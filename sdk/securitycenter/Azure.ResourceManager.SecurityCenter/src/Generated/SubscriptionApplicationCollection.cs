// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="SubscriptionApplicationResource" /> and their operations.
    /// Each <see cref="SubscriptionApplicationResource" /> in the collection will belong to the same instance of <see cref="SubscriptionResource" />.
    /// To get a <see cref="SubscriptionApplicationCollection" /> instance call the GetSubscriptionApplications method from an instance of <see cref="SubscriptionResource" />.
    /// </summary>
    public partial class SubscriptionApplicationCollection : ArmCollection, IEnumerable<SubscriptionApplicationResource>, IAsyncEnumerable<SubscriptionApplicationResource>
    {
        private readonly ClientDiagnostics _subscriptionApplicationApplicationClientDiagnostics;
        private readonly ApplicationRestOperations _subscriptionApplicationApplicationRestClient;
        private readonly ClientDiagnostics _subscriptionApplicationApplicationsClientDiagnostics;
        private readonly ApplicationsRestOperations _subscriptionApplicationApplicationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionApplicationCollection"/> class for mocking. </summary>
        protected SubscriptionApplicationCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionApplicationCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal SubscriptionApplicationCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _subscriptionApplicationApplicationClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SubscriptionApplicationResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SubscriptionApplicationResource.ResourceType, out string subscriptionApplicationApplicationApiVersion);
            _subscriptionApplicationApplicationRestClient = new ApplicationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, subscriptionApplicationApplicationApiVersion);
            _subscriptionApplicationApplicationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SubscriptionApplicationResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SubscriptionApplicationResource.ResourceType, out string subscriptionApplicationApplicationsApiVersion);
            _subscriptionApplicationApplicationsRestClient = new ApplicationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, subscriptionApplicationApplicationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or update a security application on the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications/{applicationId}
        /// Operation Id: Application_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="applicationId"> The security Application key - unique key for the standard application. </param>
        /// <param name="data"> Application over a subscription scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<SubscriptionApplicationResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string applicationId, ApplicationData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _subscriptionApplicationApplicationClientDiagnostics.CreateScope("SubscriptionApplicationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _subscriptionApplicationApplicationRestClient.CreateOrUpdateAsync(Id.SubscriptionId, applicationId, data, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityCenterArmOperation<SubscriptionApplicationResource>(Response.FromValue(new SubscriptionApplicationResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or update a security application on the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications/{applicationId}
        /// Operation Id: Application_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="applicationId"> The security Application key - unique key for the standard application. </param>
        /// <param name="data"> Application over a subscription scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<SubscriptionApplicationResource> CreateOrUpdate(WaitUntil waitUntil, string applicationId, ApplicationData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _subscriptionApplicationApplicationClientDiagnostics.CreateScope("SubscriptionApplicationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _subscriptionApplicationApplicationRestClient.CreateOrUpdate(Id.SubscriptionId, applicationId, data, cancellationToken);
                var operation = new SecurityCenterArmOperation<SubscriptionApplicationResource>(Response.FromValue(new SubscriptionApplicationResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific application for the requested scope by applicationId
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications/{applicationId}
        /// Operation Id: Application_Get
        /// </summary>
        /// <param name="applicationId"> The security Application key - unique key for the standard application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        public virtual async Task<Response<SubscriptionApplicationResource>> GetAsync(string applicationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            using var scope = _subscriptionApplicationApplicationClientDiagnostics.CreateScope("SubscriptionApplicationCollection.Get");
            scope.Start();
            try
            {
                var response = await _subscriptionApplicationApplicationRestClient.GetAsync(Id.SubscriptionId, applicationId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionApplicationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific application for the requested scope by applicationId
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications/{applicationId}
        /// Operation Id: Application_Get
        /// </summary>
        /// <param name="applicationId"> The security Application key - unique key for the standard application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        public virtual Response<SubscriptionApplicationResource> Get(string applicationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            using var scope = _subscriptionApplicationApplicationClientDiagnostics.CreateScope("SubscriptionApplicationCollection.Get");
            scope.Start();
            try
            {
                var response = _subscriptionApplicationApplicationRestClient.Get(Id.SubscriptionId, applicationId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionApplicationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a list of all relevant applications over a subscription level scope
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications
        /// Operation Id: Applications_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SubscriptionApplicationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SubscriptionApplicationResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SubscriptionApplicationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _subscriptionApplicationApplicationsClientDiagnostics.CreateScope("SubscriptionApplicationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _subscriptionApplicationApplicationsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionApplicationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SubscriptionApplicationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _subscriptionApplicationApplicationsClientDiagnostics.CreateScope("SubscriptionApplicationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _subscriptionApplicationApplicationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionApplicationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get a list of all relevant applications over a subscription level scope
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications
        /// Operation Id: Applications_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SubscriptionApplicationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SubscriptionApplicationResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<SubscriptionApplicationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _subscriptionApplicationApplicationsClientDiagnostics.CreateScope("SubscriptionApplicationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _subscriptionApplicationApplicationsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionApplicationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SubscriptionApplicationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _subscriptionApplicationApplicationsClientDiagnostics.CreateScope("SubscriptionApplicationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _subscriptionApplicationApplicationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionApplicationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications/{applicationId}
        /// Operation Id: Application_Get
        /// </summary>
        /// <param name="applicationId"> The security Application key - unique key for the standard application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string applicationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            using var scope = _subscriptionApplicationApplicationClientDiagnostics.CreateScope("SubscriptionApplicationCollection.Exists");
            scope.Start();
            try
            {
                var response = await _subscriptionApplicationApplicationRestClient.GetAsync(Id.SubscriptionId, applicationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications/{applicationId}
        /// Operation Id: Application_Get
        /// </summary>
        /// <param name="applicationId"> The security Application key - unique key for the standard application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        public virtual Response<bool> Exists(string applicationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            using var scope = _subscriptionApplicationApplicationClientDiagnostics.CreateScope("SubscriptionApplicationCollection.Exists");
            scope.Start();
            try
            {
                var response = _subscriptionApplicationApplicationRestClient.Get(Id.SubscriptionId, applicationId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SubscriptionApplicationResource> IEnumerable<SubscriptionApplicationResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SubscriptionApplicationResource> IAsyncEnumerable<SubscriptionApplicationResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
