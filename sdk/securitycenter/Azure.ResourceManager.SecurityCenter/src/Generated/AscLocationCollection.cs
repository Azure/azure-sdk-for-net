// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="AscLocationResource" /> and their operations.
    /// Each <see cref="AscLocationResource" /> in the collection will belong to the same instance of <see cref="SubscriptionResource" />.
    /// To get an <see cref="AscLocationCollection" /> instance call the GetAscLocations method from an instance of <see cref="SubscriptionResource" />.
    /// </summary>
    public partial class AscLocationCollection : ArmCollection, IEnumerable<AscLocationResource>, IAsyncEnumerable<AscLocationResource>
    {
        private readonly ClientDiagnostics _ascLocationLocationsClientDiagnostics;
        private readonly LocationsRestOperations _ascLocationLocationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="AscLocationCollection"/> class for mocking. </summary>
        protected AscLocationCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AscLocationCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AscLocationCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _ascLocationLocationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", AscLocationResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AscLocationResource.ResourceType, out string ascLocationLocationsApiVersion);
            _ascLocationLocationsRestClient = new LocationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, ascLocationLocationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Details of a specific location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        public virtual async Task<Response<AscLocationResource>> GetAsync(string ascLocation, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));

            using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationCollection.Get");
            scope.Start();
            try
            {
                var response = await _ascLocationLocationsRestClient.GetAsync(Id.SubscriptionId, ascLocation, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AscLocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Details of a specific location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        public virtual Response<AscLocationResource> Get(string ascLocation, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));

            using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationCollection.Get");
            scope.Start();
            try
            {
                var response = _ascLocationLocationsRestClient.Get(Id.SubscriptionId, ascLocation, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AscLocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The location of the responsible ASC of the specific subscription (home region). For each subscription there is only one responsible location. The location in the response should be used to read or write other resources in ASC according to their ID.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations
        /// Operation Id: Locations_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AscLocationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AscLocationResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AscLocationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _ascLocationLocationsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AscLocationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AscLocationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _ascLocationLocationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AscLocationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// The location of the responsible ASC of the specific subscription (home region). For each subscription there is only one responsible location. The location in the response should be used to read or write other resources in ASC according to their ID.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations
        /// Operation Id: Locations_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AscLocationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AscLocationResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AscLocationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _ascLocationLocationsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AscLocationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AscLocationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _ascLocationLocationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AscLocationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string ascLocation, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));

            using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationCollection.Exists");
            scope.Start();
            try
            {
                var response = await _ascLocationLocationsRestClient.GetAsync(Id.SubscriptionId, ascLocation, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        public virtual Response<bool> Exists(string ascLocation, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));

            using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationCollection.Exists");
            scope.Start();
            try
            {
                var response = _ascLocationLocationsRestClient.Get(Id.SubscriptionId, ascLocation, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AscLocationResource> IEnumerable<AscLocationResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AscLocationResource> IAsyncEnumerable<AscLocationResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
