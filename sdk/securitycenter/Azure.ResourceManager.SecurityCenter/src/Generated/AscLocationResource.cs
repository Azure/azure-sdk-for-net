// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A Class representing an AscLocation along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct an <see cref="AscLocationResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetAscLocationResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource" /> using the GetAscLocation method.
    /// </summary>
    public partial class AscLocationResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="AscLocationResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string ascLocation)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _ascLocationLocationsClientDiagnostics;
        private readonly LocationsRestOperations _ascLocationLocationsRestClient;
        private readonly ClientDiagnostics _allowedConnectionsResourceAllowedConnectionsClientDiagnostics;
        private readonly AllowedConnectionsRestOperations _allowedConnectionsResourceAllowedConnectionsRestClient;
        private readonly ClientDiagnostics _topologyResourceTopologyClientDiagnostics;
        private readonly TopologyRestOperations _topologyResourceTopologyRestClient;
        private readonly ClientDiagnostics _jitNetworkAccessPolicyClientDiagnostics;
        private readonly JitNetworkAccessPoliciesRestOperations _jitNetworkAccessPolicyRestClient;
        private readonly ClientDiagnostics _discoveredSecuritySolutionClientDiagnostics;
        private readonly DiscoveredSecuritySolutionsRestOperations _discoveredSecuritySolutionRestClient;
        private readonly ClientDiagnostics _securitySolutionsReferenceDataClientDiagnostics;
        private readonly SecuritySolutionsReferenceDataRestOperations _securitySolutionsReferenceDataRestClient;
        private readonly ClientDiagnostics _externalSecuritySolutionClientDiagnostics;
        private readonly ExternalSecuritySolutionsRestOperations _externalSecuritySolutionRestClient;
        private readonly ClientDiagnostics _alertsClientDiagnostics;
        private readonly AlertsRestOperations _alertsRestClient;
        private readonly AscLocationData _data;

        /// <summary> Initializes a new instance of the <see cref="AscLocationResource"/> class for mocking. </summary>
        protected AscLocationResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "AscLocationResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal AscLocationResource(ArmClient client, AscLocationData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="AscLocationResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal AscLocationResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _ascLocationLocationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string ascLocationLocationsApiVersion);
            _ascLocationLocationsRestClient = new LocationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, ascLocationLocationsApiVersion);
            _allowedConnectionsResourceAllowedConnectionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", AllowedConnectionsResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AllowedConnectionsResource.ResourceType, out string allowedConnectionsResourceAllowedConnectionsApiVersion);
            _allowedConnectionsResourceAllowedConnectionsRestClient = new AllowedConnectionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, allowedConnectionsResourceAllowedConnectionsApiVersion);
            _topologyResourceTopologyClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", TopologyResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(TopologyResource.ResourceType, out string topologyResourceTopologyApiVersion);
            _topologyResourceTopologyRestClient = new TopologyRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, topologyResourceTopologyApiVersion);
            _jitNetworkAccessPolicyClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", JitNetworkAccessPolicyResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(JitNetworkAccessPolicyResource.ResourceType, out string jitNetworkAccessPolicyApiVersion);
            _jitNetworkAccessPolicyRestClient = new JitNetworkAccessPoliciesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, jitNetworkAccessPolicyApiVersion);
            _discoveredSecuritySolutionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", DiscoveredSecuritySolutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DiscoveredSecuritySolutionResource.ResourceType, out string discoveredSecuritySolutionApiVersion);
            _discoveredSecuritySolutionRestClient = new DiscoveredSecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, discoveredSecuritySolutionApiVersion);
            _securitySolutionsReferenceDataClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _securitySolutionsReferenceDataRestClient = new SecuritySolutionsReferenceDataRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _externalSecuritySolutionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ExternalSecuritySolutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ExternalSecuritySolutionResource.ResourceType, out string externalSecuritySolutionApiVersion);
            _externalSecuritySolutionRestClient = new ExternalSecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, externalSecuritySolutionApiVersion);
            _alertsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _alertsRestClient = new AlertsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Security/locations";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual AscLocationData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of AscLocationLocationTaskResources in the AscLocation. </summary>
        /// <returns> An object representing collection of AscLocationLocationTaskResources and their operations over a AscLocationLocationTaskResource. </returns>
        public virtual AscLocationLocationTaskCollection GetAscLocationLocationTasks()
        {
            return GetCachedClient(Client => new AscLocationLocationTaskCollection(Client, Id));
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
        /// Operation Id: Tasks_GetSubscriptionLevelTask
        /// </summary>
        /// <param name="taskName"> Name of the task object, will be a GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="taskName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="taskName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AscLocationLocationTaskResource>> GetAscLocationLocationTaskAsync(string taskName, CancellationToken cancellationToken = default)
        {
            return await GetAscLocationLocationTasks().GetAsync(taskName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
        /// Operation Id: Tasks_GetSubscriptionLevelTask
        /// </summary>
        /// <param name="taskName"> Name of the task object, will be a GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="taskName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="taskName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AscLocationLocationTaskResource> GetAscLocationLocationTask(string taskName, CancellationToken cancellationToken = default)
        {
            return GetAscLocationLocationTasks().Get(taskName, cancellationToken);
        }

        /// <summary> Gets a collection of AdaptiveApplicationControlGroupResources in the AscLocation. </summary>
        /// <returns> An object representing collection of AdaptiveApplicationControlGroupResources and their operations over a AdaptiveApplicationControlGroupResource. </returns>
        public virtual AdaptiveApplicationControlGroupCollection GetAdaptiveApplicationControlGroups()
        {
            return GetCachedClient(Client => new AdaptiveApplicationControlGroupCollection(Client, Id));
        }

        /// <summary>
        /// Gets an application control VM/server group.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/applicationWhitelistings/{groupName}
        /// Operation Id: AdaptiveApplicationControls_Get
        /// </summary>
        /// <param name="groupName"> Name of an application control machine group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AdaptiveApplicationControlGroupResource>> GetAdaptiveApplicationControlGroupAsync(string groupName, CancellationToken cancellationToken = default)
        {
            return await GetAdaptiveApplicationControlGroups().GetAsync(groupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an application control VM/server group.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/applicationWhitelistings/{groupName}
        /// Operation Id: AdaptiveApplicationControls_Get
        /// </summary>
        /// <param name="groupName"> Name of an application control machine group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AdaptiveApplicationControlGroupResource> GetAdaptiveApplicationControlGroup(string groupName, CancellationToken cancellationToken = default)
        {
            return GetAdaptiveApplicationControlGroups().Get(groupName, cancellationToken);
        }

        /// <summary> Gets a collection of AscLocationLocationAlertResources in the AscLocation. </summary>
        /// <returns> An object representing collection of AscLocationLocationAlertResources and their operations over a AscLocationLocationAlertResource. </returns>
        public virtual AscLocationLocationAlertCollection GetAscLocationLocationAlerts()
        {
            return GetCachedClient(Client => new AscLocationLocationAlertCollection(Client, Id));
        }

        /// <summary>
        /// Get an alert that is associated with a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}
        /// Operation Id: Alerts_GetSubscriptionLevel
        /// </summary>
        /// <param name="alertName"> Name of the alert object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AscLocationLocationAlertResource>> GetAscLocationLocationAlertAsync(string alertName, CancellationToken cancellationToken = default)
        {
            return await GetAscLocationLocationAlerts().GetAsync(alertName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an alert that is associated with a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}
        /// Operation Id: Alerts_GetSubscriptionLevel
        /// </summary>
        /// <param name="alertName"> Name of the alert object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AscLocationLocationAlertResource> GetAscLocationLocationAlert(string alertName, CancellationToken cancellationToken = default)
        {
            return GetAscLocationLocationAlerts().Get(alertName, cancellationToken);
        }

        /// <summary>
        /// Details of a specific location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AscLocationResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationResource.Get");
            scope.Start();
            try
            {
                var response = await _ascLocationLocationsRestClient.GetAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AscLocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Details of a specific location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AscLocationResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _ascLocationLocationsClientDiagnostics.CreateScope("AscLocationResource.Get");
            scope.Start();
            try
            {
                var response = _ascLocationLocationsRestClient.Get(Id.SubscriptionId, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AscLocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections
        /// Operation Id: AllowedConnections_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AllowedConnectionsResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AllowedConnectionsResource> GetAllowedConnectionsByHomeRegionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AllowedConnectionsResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _allowedConnectionsResourceAllowedConnectionsClientDiagnostics.CreateScope("AscLocationResource.GetAllowedConnectionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _allowedConnectionsResourceAllowedConnectionsRestClient.ListByHomeRegionAsync(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AllowedConnectionsResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AllowedConnectionsResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _allowedConnectionsResourceAllowedConnectionsClientDiagnostics.CreateScope("AscLocationResource.GetAllowedConnectionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _allowedConnectionsResourceAllowedConnectionsRestClient.ListByHomeRegionNextPageAsync(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AllowedConnectionsResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections
        /// Operation Id: AllowedConnections_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AllowedConnectionsResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AllowedConnectionsResource> GetAllowedConnectionsByHomeRegion(CancellationToken cancellationToken = default)
        {
            Page<AllowedConnectionsResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _allowedConnectionsResourceAllowedConnectionsClientDiagnostics.CreateScope("AscLocationResource.GetAllowedConnectionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = _allowedConnectionsResourceAllowedConnectionsRestClient.ListByHomeRegion(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AllowedConnectionsResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AllowedConnectionsResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _allowedConnectionsResourceAllowedConnectionsClientDiagnostics.CreateScope("AscLocationResource.GetAllowedConnectionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = _allowedConnectionsResourceAllowedConnectionsRestClient.ListByHomeRegionNextPage(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AllowedConnectionsResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list that allows to build a topology view of a subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/topologies
        /// Operation Id: Topology_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TopologyResource> GetTopologiesByHomeRegionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<TopologyResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _topologyResourceTopologyClientDiagnostics.CreateScope("AscLocationResource.GetTopologiesByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _topologyResourceTopologyRestClient.ListByHomeRegionAsync(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TopologyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<TopologyResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _topologyResourceTopologyClientDiagnostics.CreateScope("AscLocationResource.GetTopologiesByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _topologyResourceTopologyRestClient.ListByHomeRegionNextPageAsync(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TopologyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list that allows to build a topology view of a subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/topologies
        /// Operation Id: Topology_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TopologyResource> GetTopologiesByHomeRegion(CancellationToken cancellationToken = default)
        {
            Page<TopologyResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _topologyResourceTopologyClientDiagnostics.CreateScope("AscLocationResource.GetTopologiesByHomeRegion");
                scope.Start();
                try
                {
                    var response = _topologyResourceTopologyRestClient.ListByHomeRegion(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TopologyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<TopologyResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _topologyResourceTopologyClientDiagnostics.CreateScope("AscLocationResource.GetTopologiesByHomeRegion");
                scope.Start();
                try
                {
                    var response = _topologyResourceTopologyRestClient.ListByHomeRegionNextPage(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TopologyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control for the subscription, location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_ListByRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPoliciesByRegionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<JitNetworkAccessPolicyResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _jitNetworkAccessPolicyClientDiagnostics.CreateScope("AscLocationResource.GetJitNetworkAccessPoliciesByRegion");
                scope.Start();
                try
                {
                    var response = await _jitNetworkAccessPolicyRestClient.ListByRegionAsync(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<JitNetworkAccessPolicyResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _jitNetworkAccessPolicyClientDiagnostics.CreateScope("AscLocationResource.GetJitNetworkAccessPoliciesByRegion");
                scope.Start();
                try
                {
                    var response = await _jitNetworkAccessPolicyRestClient.ListByRegionNextPageAsync(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control for the subscription, location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_ListByRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPoliciesByRegion(CancellationToken cancellationToken = default)
        {
            Page<JitNetworkAccessPolicyResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _jitNetworkAccessPolicyClientDiagnostics.CreateScope("AscLocationResource.GetJitNetworkAccessPoliciesByRegion");
                scope.Start();
                try
                {
                    var response = _jitNetworkAccessPolicyRestClient.ListByRegion(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<JitNetworkAccessPolicyResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _jitNetworkAccessPolicyClientDiagnostics.CreateScope("AscLocationResource.GetJitNetworkAccessPoliciesByRegion");
                scope.Start();
                try
                {
                    var response = _jitNetworkAccessPolicyRestClient.ListByRegionNextPage(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of discovered Security Solutions for the subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions
        /// Operation Id: DiscoveredSecuritySolutions_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DiscoveredSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DiscoveredSecuritySolutionResource> GetDiscoveredSecuritySolutionsByHomeRegionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DiscoveredSecuritySolutionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _discoveredSecuritySolutionClientDiagnostics.CreateScope("AscLocationResource.GetDiscoveredSecuritySolutionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _discoveredSecuritySolutionRestClient.ListByHomeRegionAsync(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DiscoveredSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DiscoveredSecuritySolutionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _discoveredSecuritySolutionClientDiagnostics.CreateScope("AscLocationResource.GetDiscoveredSecuritySolutionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _discoveredSecuritySolutionRestClient.ListByHomeRegionNextPageAsync(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DiscoveredSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of discovered Security Solutions for the subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions
        /// Operation Id: DiscoveredSecuritySolutions_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DiscoveredSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DiscoveredSecuritySolutionResource> GetDiscoveredSecuritySolutionsByHomeRegion(CancellationToken cancellationToken = default)
        {
            Page<DiscoveredSecuritySolutionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _discoveredSecuritySolutionClientDiagnostics.CreateScope("AscLocationResource.GetDiscoveredSecuritySolutionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = _discoveredSecuritySolutionRestClient.ListByHomeRegion(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DiscoveredSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DiscoveredSecuritySolutionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _discoveredSecuritySolutionClientDiagnostics.CreateScope("AscLocationResource.GetDiscoveredSecuritySolutionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = _discoveredSecuritySolutionRestClient.ListByHomeRegionNextPage(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DiscoveredSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets list of all supported Security Solutions for subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/securitySolutionsReferenceData
        /// Operation Id: SecuritySolutionsReferenceData_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecuritySolutionsReferenceData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecuritySolutionsReferenceData> GetAllSecuritySolutionsReferenceDataByHomeRegionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecuritySolutionsReferenceData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _securitySolutionsReferenceDataClientDiagnostics.CreateScope("AscLocationResource.GetAllSecuritySolutionsReferenceDataByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _securitySolutionsReferenceDataRestClient.ListByHomeRegionAsync(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets list of all supported Security Solutions for subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/securitySolutionsReferenceData
        /// Operation Id: SecuritySolutionsReferenceData_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecuritySolutionsReferenceData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecuritySolutionsReferenceData> GetAllSecuritySolutionsReferenceDataByHomeRegion(CancellationToken cancellationToken = default)
        {
            Page<SecuritySolutionsReferenceData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _securitySolutionsReferenceDataClientDiagnostics.CreateScope("AscLocationResource.GetAllSecuritySolutionsReferenceDataByHomeRegion");
                scope.Start();
                try
                {
                    var response = _securitySolutionsReferenceDataRestClient.ListByHomeRegion(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of external Security Solutions for the subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/ExternalSecuritySolutions
        /// Operation Id: ExternalSecuritySolutions_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExternalSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExternalSecuritySolutionResource> GetExternalSecuritySolutionsByHomeRegionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ExternalSecuritySolutionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _externalSecuritySolutionClientDiagnostics.CreateScope("AscLocationResource.GetExternalSecuritySolutionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _externalSecuritySolutionRestClient.ListByHomeRegionAsync(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ExternalSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ExternalSecuritySolutionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _externalSecuritySolutionClientDiagnostics.CreateScope("AscLocationResource.GetExternalSecuritySolutionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = await _externalSecuritySolutionRestClient.ListByHomeRegionNextPageAsync(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ExternalSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of external Security Solutions for the subscription and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/ExternalSecuritySolutions
        /// Operation Id: ExternalSecuritySolutions_ListByHomeRegion
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExternalSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExternalSecuritySolutionResource> GetExternalSecuritySolutionsByHomeRegion(CancellationToken cancellationToken = default)
        {
            Page<ExternalSecuritySolutionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _externalSecuritySolutionClientDiagnostics.CreateScope("AscLocationResource.GetExternalSecuritySolutionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = _externalSecuritySolutionRestClient.ListByHomeRegion(Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ExternalSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ExternalSecuritySolutionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _externalSecuritySolutionClientDiagnostics.CreateScope("AscLocationResource.GetExternalSecuritySolutionsByHomeRegion");
                scope.Start();
                try
                {
                    var response = _externalSecuritySolutionRestClient.ListByHomeRegionNextPage(nextLink, Id.SubscriptionId, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ExternalSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Simulate security alerts
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/default/simulate
        /// Operation Id: Alerts_Simulate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="alertSimulatorRequestBody"> Alert Simulator Request Properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertSimulatorRequestBody"/> is null. </exception>
        public virtual async Task<ArmOperation> SimulateAlertAsync(WaitUntil waitUntil, AlertSimulatorRequestBody alertSimulatorRequestBody, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(alertSimulatorRequestBody, nameof(alertSimulatorRequestBody));

            using var scope = _alertsClientDiagnostics.CreateScope("AscLocationResource.SimulateAlert");
            scope.Start();
            try
            {
                var response = await _alertsRestClient.SimulateAsync(Id.SubscriptionId, Id.Name, alertSimulatorRequestBody, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityCenterArmOperation(_alertsClientDiagnostics, Pipeline, _alertsRestClient.CreateSimulateRequest(Id.SubscriptionId, Id.Name, alertSimulatorRequestBody).Request, response, OperationFinalStateVia.OriginalUri);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Simulate security alerts
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/default/simulate
        /// Operation Id: Alerts_Simulate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="alertSimulatorRequestBody"> Alert Simulator Request Properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertSimulatorRequestBody"/> is null. </exception>
        public virtual ArmOperation SimulateAlert(WaitUntil waitUntil, AlertSimulatorRequestBody alertSimulatorRequestBody, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(alertSimulatorRequestBody, nameof(alertSimulatorRequestBody));

            using var scope = _alertsClientDiagnostics.CreateScope("AscLocationResource.SimulateAlert");
            scope.Start();
            try
            {
                var response = _alertsRestClient.Simulate(Id.SubscriptionId, Id.Name, alertSimulatorRequestBody, cancellationToken);
                var operation = new SecurityCenterArmOperation(_alertsClientDiagnostics, Pipeline, _alertsRestClient.CreateSimulateRequest(Id.SubscriptionId, Id.Name, alertSimulatorRequestBody).Request, response, OperationFinalStateVia.OriginalUri);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
