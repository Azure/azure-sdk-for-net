// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="HealthReportResource"/> and their operations.
    /// Each <see cref="HealthReportResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get a <see cref="HealthReportCollection"/> instance call the GetHealthReports method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class HealthReportCollection : ArmCollection, IEnumerable<HealthReportResource>, IAsyncEnumerable<HealthReportResource>
    {
        private readonly ClientDiagnostics _healthReportClientDiagnostics;
        private readonly HealthReportsRestOperations _healthReportRestClient;

        /// <summary> Initializes a new instance of the <see cref="HealthReportCollection"/> class for mocking. </summary>
        protected HealthReportCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HealthReportCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal HealthReportCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _healthReportClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", HealthReportResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HealthReportResource.ResourceType, out string healthReportApiVersion);
            _healthReportRestClient = new HealthReportsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, healthReportApiVersion);
        }

        /// <summary>
        /// Get health report of resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/healthReports/{healthReportName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthReports_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthReportResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="healthReportName"> The health report Key - Unique key for the health report type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="healthReportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="healthReportName"/> is null. </exception>
        public virtual async Task<Response<HealthReportResource>> GetAsync(string healthReportName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(healthReportName, nameof(healthReportName));

            using var scope = _healthReportClientDiagnostics.CreateScope("HealthReportCollection.Get");
            scope.Start();
            try
            {
                var response = await _healthReportRestClient.GetAsync(Id, healthReportName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HealthReportResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get health report of resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/healthReports/{healthReportName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthReports_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthReportResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="healthReportName"> The health report Key - Unique key for the health report type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="healthReportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="healthReportName"/> is null. </exception>
        public virtual Response<HealthReportResource> Get(string healthReportName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(healthReportName, nameof(healthReportName));

            using var scope = _healthReportClientDiagnostics.CreateScope("HealthReportCollection.Get");
            scope.Start();
            try
            {
                var response = _healthReportRestClient.Get(Id, healthReportName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HealthReportResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a list of all health reports inside a scope. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Security/healthReports</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthReports_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthReportResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HealthReportResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HealthReportResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _healthReportRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _healthReportRestClient.CreateListNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HealthReportResource(Client, HealthReportData.DeserializeHealthReportData(e)), _healthReportClientDiagnostics, Pipeline, "HealthReportCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of all health reports inside a scope. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Security/healthReports</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthReports_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthReportResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HealthReportResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HealthReportResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _healthReportRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _healthReportRestClient.CreateListNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HealthReportResource(Client, HealthReportData.DeserializeHealthReportData(e)), _healthReportClientDiagnostics, Pipeline, "HealthReportCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/healthReports/{healthReportName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthReports_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthReportResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="healthReportName"> The health report Key - Unique key for the health report type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="healthReportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="healthReportName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string healthReportName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(healthReportName, nameof(healthReportName));

            using var scope = _healthReportClientDiagnostics.CreateScope("HealthReportCollection.Exists");
            scope.Start();
            try
            {
                var response = await _healthReportRestClient.GetAsync(Id, healthReportName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/healthReports/{healthReportName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthReports_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthReportResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="healthReportName"> The health report Key - Unique key for the health report type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="healthReportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="healthReportName"/> is null. </exception>
        public virtual Response<bool> Exists(string healthReportName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(healthReportName, nameof(healthReportName));

            using var scope = _healthReportClientDiagnostics.CreateScope("HealthReportCollection.Exists");
            scope.Start();
            try
            {
                var response = _healthReportRestClient.Get(Id, healthReportName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/healthReports/{healthReportName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthReports_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthReportResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="healthReportName"> The health report Key - Unique key for the health report type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="healthReportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="healthReportName"/> is null. </exception>
        public virtual async Task<NullableResponse<HealthReportResource>> GetIfExistsAsync(string healthReportName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(healthReportName, nameof(healthReportName));

            using var scope = _healthReportClientDiagnostics.CreateScope("HealthReportCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _healthReportRestClient.GetAsync(Id, healthReportName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<HealthReportResource>(response.GetRawResponse());
                return Response.FromValue(new HealthReportResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/healthReports/{healthReportName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthReports_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthReportResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="healthReportName"> The health report Key - Unique key for the health report type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="healthReportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="healthReportName"/> is null. </exception>
        public virtual NullableResponse<HealthReportResource> GetIfExists(string healthReportName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(healthReportName, nameof(healthReportName));

            using var scope = _healthReportClientDiagnostics.CreateScope("HealthReportCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _healthReportRestClient.Get(Id, healthReportName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<HealthReportResource>(response.GetRawResponse());
                return Response.FromValue(new HealthReportResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<HealthReportResource> IEnumerable<HealthReportResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<HealthReportResource> IAsyncEnumerable<HealthReportResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
