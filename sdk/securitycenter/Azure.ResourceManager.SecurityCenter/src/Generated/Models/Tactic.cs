// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> Tactic of the assessment. </summary>
    public readonly partial struct Tactic : IEquatable<Tactic>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Tactic"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Tactic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReconnaissanceValue = "Reconnaissance";
        private const string ResourceDevelopmentValue = "Resource Development";
        private const string InitialAccessValue = "Initial Access";
        private const string ExecutionValue = "Execution";
        private const string PersistenceValue = "Persistence";
        private const string PrivilegeEscalationValue = "Privilege Escalation";
        private const string DefenseEvasionValue = "Defense Evasion";
        private const string CredentialAccessValue = "Credential Access";
        private const string DiscoveryValue = "Discovery";
        private const string LateralMovementValue = "Lateral Movement";
        private const string CollectionValue = "Collection";
        private const string CommandAndControlValue = "Command and Control";
        private const string ExfiltrationValue = "Exfiltration";
        private const string ImpactValue = "Impact";

        /// <summary> Reconnaissance. </summary>
        public static Tactic Reconnaissance { get; } = new Tactic(ReconnaissanceValue);
        /// <summary> Resource Development. </summary>
        public static Tactic ResourceDevelopment { get; } = new Tactic(ResourceDevelopmentValue);
        /// <summary> Initial Access. </summary>
        public static Tactic InitialAccess { get; } = new Tactic(InitialAccessValue);
        /// <summary> Execution. </summary>
        public static Tactic Execution { get; } = new Tactic(ExecutionValue);
        /// <summary> Persistence. </summary>
        public static Tactic Persistence { get; } = new Tactic(PersistenceValue);
        /// <summary> Privilege Escalation. </summary>
        public static Tactic PrivilegeEscalation { get; } = new Tactic(PrivilegeEscalationValue);
        /// <summary> Defense Evasion. </summary>
        public static Tactic DefenseEvasion { get; } = new Tactic(DefenseEvasionValue);
        /// <summary> Credential Access. </summary>
        public static Tactic CredentialAccess { get; } = new Tactic(CredentialAccessValue);
        /// <summary> Discovery. </summary>
        public static Tactic Discovery { get; } = new Tactic(DiscoveryValue);
        /// <summary> Lateral Movement. </summary>
        public static Tactic LateralMovement { get; } = new Tactic(LateralMovementValue);
        /// <summary> Collection. </summary>
        public static Tactic Collection { get; } = new Tactic(CollectionValue);
        /// <summary> Command and Control. </summary>
        public static Tactic CommandAndControl { get; } = new Tactic(CommandAndControlValue);
        /// <summary> Exfiltration. </summary>
        public static Tactic Exfiltration { get; } = new Tactic(ExfiltrationValue);
        /// <summary> Impact. </summary>
        public static Tactic Impact { get; } = new Tactic(ImpactValue);
        /// <summary> Determines if two <see cref="Tactic"/> values are the same. </summary>
        public static bool operator ==(Tactic left, Tactic right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Tactic"/> values are not the same. </summary>
        public static bool operator !=(Tactic left, Tactic right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Tactic"/>. </summary>
        public static implicit operator Tactic(string value) => new Tactic(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Tactic other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Tactic other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
