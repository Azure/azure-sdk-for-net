// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class ScanProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TriggerType))
            {
                writer.WritePropertyName("triggerType");
                writer.WriteStringValue(TriggerType.Value.ToString());
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsDefined(Server))
            {
                writer.WritePropertyName("server");
                writer.WriteStringValue(Server);
            }
            if (Optional.IsDefined(Database))
            {
                writer.WritePropertyName("database");
                writer.WriteStringValue(Database);
            }
            if (Optional.IsDefined(SqlVersion))
            {
                writer.WritePropertyName("sqlVersion");
                writer.WriteStringValue(SqlVersion);
            }
            if (Optional.IsDefined(StartOn))
            {
                writer.WritePropertyName("startTime");
                writer.WriteStringValue(StartOn.Value, "O");
            }
            if (Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endTime");
                writer.WriteStringValue(EndOn.Value, "O");
            }
            if (Optional.IsDefined(HighSeverityFailedRulesCount))
            {
                writer.WritePropertyName("highSeverityFailedRulesCount");
                writer.WriteNumberValue(HighSeverityFailedRulesCount.Value);
            }
            if (Optional.IsDefined(MediumSeverityFailedRulesCount))
            {
                writer.WritePropertyName("mediumSeverityFailedRulesCount");
                writer.WriteNumberValue(MediumSeverityFailedRulesCount.Value);
            }
            if (Optional.IsDefined(LowSeverityFailedRulesCount))
            {
                writer.WritePropertyName("lowSeverityFailedRulesCount");
                writer.WriteNumberValue(LowSeverityFailedRulesCount.Value);
            }
            if (Optional.IsDefined(TotalPassedRulesCount))
            {
                writer.WritePropertyName("totalPassedRulesCount");
                writer.WriteNumberValue(TotalPassedRulesCount.Value);
            }
            if (Optional.IsDefined(TotalFailedRulesCount))
            {
                writer.WritePropertyName("totalFailedRulesCount");
                writer.WriteNumberValue(TotalFailedRulesCount.Value);
            }
            if (Optional.IsDefined(TotalRulesCount))
            {
                writer.WritePropertyName("totalRulesCount");
                writer.WriteNumberValue(TotalRulesCount.Value);
            }
            if (Optional.IsDefined(IsBaselineApplied))
            {
                writer.WritePropertyName("isBaselineApplied");
                writer.WriteBooleanValue(IsBaselineApplied.Value);
            }
            writer.WriteEndObject();
        }

        internal static ScanProperties DeserializeScanProperties(JsonElement element)
        {
            Optional<ScanTriggerType> triggerType = default;
            Optional<ScanState> state = default;
            Optional<string> server = default;
            Optional<string> database = default;
            Optional<string> sqlVersion = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<int> highSeverityFailedRulesCount = default;
            Optional<int> mediumSeverityFailedRulesCount = default;
            Optional<int> lowSeverityFailedRulesCount = default;
            Optional<int> totalPassedRulesCount = default;
            Optional<int> totalFailedRulesCount = default;
            Optional<int> totalRulesCount = default;
            Optional<bool> isBaselineApplied = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("triggerType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    triggerType = new ScanTriggerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = new ScanState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("server"))
                {
                    server = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("database"))
                {
                    database = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlVersion"))
                {
                    sqlVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("highSeverityFailedRulesCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    highSeverityFailedRulesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("mediumSeverityFailedRulesCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mediumSeverityFailedRulesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lowSeverityFailedRulesCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lowSeverityFailedRulesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("totalPassedRulesCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalPassedRulesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("totalFailedRulesCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalFailedRulesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("totalRulesCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalRulesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isBaselineApplied"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isBaselineApplied = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ScanProperties(Optional.ToNullable(triggerType), Optional.ToNullable(state), server.Value, database.Value, sqlVersion.Value, Optional.ToNullable(startTime), Optional.ToNullable(endTime), Optional.ToNullable(highSeverityFailedRulesCount), Optional.ToNullable(mediumSeverityFailedRulesCount), Optional.ToNullable(lowSeverityFailedRulesCount), Optional.ToNullable(totalPassedRulesCount), Optional.ToNullable(totalFailedRulesCount), Optional.ToNullable(totalRulesCount), Optional.ToNullable(isBaselineApplied));
        }
    }
}
