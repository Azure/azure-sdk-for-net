// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> A valid event source type. </summary>
    public readonly partial struct EventSource : IEquatable<EventSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EventSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EventSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AssessmentsValue = "Assessments";
        private const string AssessmentsSnapshotValue = "AssessmentsSnapshot";
        private const string SubAssessmentsValue = "SubAssessments";
        private const string SubAssessmentsSnapshotValue = "SubAssessmentsSnapshot";
        private const string AlertsValue = "Alerts";
        private const string SecureScoresValue = "SecureScores";
        private const string SecureScoresSnapshotValue = "SecureScoresSnapshot";
        private const string SecureScoreControlsValue = "SecureScoreControls";
        private const string SecureScoreControlsSnapshotValue = "SecureScoreControlsSnapshot";
        private const string RegulatoryComplianceAssessmentValue = "RegulatoryComplianceAssessment";
        private const string RegulatoryComplianceAssessmentSnapshotValue = "RegulatoryComplianceAssessmentSnapshot";

        /// <summary> Assessments. </summary>
        public static EventSource Assessments { get; } = new EventSource(AssessmentsValue);
        /// <summary> AssessmentsSnapshot. </summary>
        public static EventSource AssessmentsSnapshot { get; } = new EventSource(AssessmentsSnapshotValue);
        /// <summary> SubAssessments. </summary>
        public static EventSource SubAssessments { get; } = new EventSource(SubAssessmentsValue);
        /// <summary> SubAssessmentsSnapshot. </summary>
        public static EventSource SubAssessmentsSnapshot { get; } = new EventSource(SubAssessmentsSnapshotValue);
        /// <summary> Alerts. </summary>
        public static EventSource Alerts { get; } = new EventSource(AlertsValue);
        /// <summary> SecureScores. </summary>
        public static EventSource SecureScores { get; } = new EventSource(SecureScoresValue);
        /// <summary> SecureScoresSnapshot. </summary>
        public static EventSource SecureScoresSnapshot { get; } = new EventSource(SecureScoresSnapshotValue);
        /// <summary> SecureScoreControls. </summary>
        public static EventSource SecureScoreControls { get; } = new EventSource(SecureScoreControlsValue);
        /// <summary> SecureScoreControlsSnapshot. </summary>
        public static EventSource SecureScoreControlsSnapshot { get; } = new EventSource(SecureScoreControlsSnapshotValue);
        /// <summary> RegulatoryComplianceAssessment. </summary>
        public static EventSource RegulatoryComplianceAssessment { get; } = new EventSource(RegulatoryComplianceAssessmentValue);
        /// <summary> RegulatoryComplianceAssessmentSnapshot. </summary>
        public static EventSource RegulatoryComplianceAssessmentSnapshot { get; } = new EventSource(RegulatoryComplianceAssessmentSnapshotValue);
        /// <summary> Determines if two <see cref="EventSource"/> values are the same. </summary>
        public static bool operator ==(EventSource left, EventSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EventSource"/> values are not the same. </summary>
        public static bool operator !=(EventSource left, EventSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EventSource"/>. </summary>
        public static implicit operator EventSource(string value) => new EventSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EventSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EventSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
