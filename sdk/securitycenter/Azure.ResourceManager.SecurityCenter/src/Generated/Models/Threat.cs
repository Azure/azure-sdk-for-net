// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> Threats impact of the assessment. </summary>
    public readonly partial struct Threat : IEquatable<Threat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Threat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Threat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AccountBreachValue = "accountBreach";
        private const string DataExfiltrationValue = "dataExfiltration";
        private const string DataSpillageValue = "dataSpillage";
        private const string MaliciousInsiderValue = "maliciousInsider";
        private const string ElevationOfPrivilegeValue = "elevationOfPrivilege";
        private const string ThreatResistanceValue = "threatResistance";
        private const string MissingCoverageValue = "missingCoverage";
        private const string DenialOfServiceValue = "denialOfService";

        /// <summary> accountBreach. </summary>
        public static Threat AccountBreach { get; } = new Threat(AccountBreachValue);
        /// <summary> dataExfiltration. </summary>
        public static Threat DataExfiltration { get; } = new Threat(DataExfiltrationValue);
        /// <summary> dataSpillage. </summary>
        public static Threat DataSpillage { get; } = new Threat(DataSpillageValue);
        /// <summary> maliciousInsider. </summary>
        public static Threat MaliciousInsider { get; } = new Threat(MaliciousInsiderValue);
        /// <summary> elevationOfPrivilege. </summary>
        public static Threat ElevationOfPrivilege { get; } = new Threat(ElevationOfPrivilegeValue);
        /// <summary> threatResistance. </summary>
        public static Threat ThreatResistance { get; } = new Threat(ThreatResistanceValue);
        /// <summary> missingCoverage. </summary>
        public static Threat MissingCoverage { get; } = new Threat(MissingCoverageValue);
        /// <summary> denialOfService. </summary>
        public static Threat DenialOfService { get; } = new Threat(DenialOfServiceValue);
        /// <summary> Determines if two <see cref="Threat"/> values are the same. </summary>
        public static bool operator ==(Threat left, Threat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Threat"/> values are not the same. </summary>
        public static bool operator !=(Threat left, Threat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Threat"/>. </summary>
        public static implicit operator Threat(string value) => new Threat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Threat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Threat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
