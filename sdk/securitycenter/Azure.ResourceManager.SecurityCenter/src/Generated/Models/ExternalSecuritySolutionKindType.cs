// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> The kind of the external solution. </summary>
    public readonly partial struct ExternalSecuritySolutionKindType : IEquatable<ExternalSecuritySolutionKindType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExternalSecuritySolutionKindType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExternalSecuritySolutionKindType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CEFValue = "CEF";
        private const string ATAValue = "ATA";
        private const string AADValue = "AAD";

        /// <summary> CEF. </summary>
        public static ExternalSecuritySolutionKindType CEF { get; } = new ExternalSecuritySolutionKindType(CEFValue);
        /// <summary> ATA. </summary>
        public static ExternalSecuritySolutionKindType ATA { get; } = new ExternalSecuritySolutionKindType(ATAValue);
        /// <summary> AAD. </summary>
        public static ExternalSecuritySolutionKindType AAD { get; } = new ExternalSecuritySolutionKindType(AADValue);
        /// <summary> Determines if two <see cref="ExternalSecuritySolutionKindType"/> values are the same. </summary>
        public static bool operator ==(ExternalSecuritySolutionKindType left, ExternalSecuritySolutionKindType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExternalSecuritySolutionKindType"/> values are not the same. </summary>
        public static bool operator !=(ExternalSecuritySolutionKindType left, ExternalSecuritySolutionKindType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExternalSecuritySolutionKindType"/>. </summary>
        public static implicit operator ExternalSecuritySolutionKindType(string value) => new ExternalSecuritySolutionKindType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExternalSecuritySolutionKindType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExternalSecuritySolutionKindType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
