// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary>
    /// A valid event source type.
    /// Serialized Name: EventSource
    /// </summary>
    public readonly partial struct SecurityEventSource : IEquatable<SecurityEventSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SecurityEventSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SecurityEventSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AssessmentsValue = "Assessments";
        private const string AssessmentsSnapshotValue = "AssessmentsSnapshot";
        private const string SubAssessmentsValue = "SubAssessments";
        private const string SubAssessmentsSnapshotValue = "SubAssessmentsSnapshot";
        private const string AlertsValue = "Alerts";
        private const string SecureScoresValue = "SecureScores";
        private const string SecureScoresSnapshotValue = "SecureScoresSnapshot";
        private const string SecureScoreControlsValue = "SecureScoreControls";
        private const string SecureScoreControlsSnapshotValue = "SecureScoreControlsSnapshot";
        private const string RegulatoryComplianceAssessmentValue = "RegulatoryComplianceAssessment";
        private const string RegulatoryComplianceAssessmentSnapshotValue = "RegulatoryComplianceAssessmentSnapshot";

        /// <summary>
        /// Assessments
        /// Serialized Name: EventSource.Assessments
        /// </summary>
        public static SecurityEventSource Assessments { get; } = new SecurityEventSource(AssessmentsValue);
        /// <summary>
        /// AssessmentsSnapshot
        /// Serialized Name: EventSource.AssessmentsSnapshot
        /// </summary>
        public static SecurityEventSource AssessmentsSnapshot { get; } = new SecurityEventSource(AssessmentsSnapshotValue);
        /// <summary>
        /// SubAssessments
        /// Serialized Name: EventSource.SubAssessments
        /// </summary>
        public static SecurityEventSource SubAssessments { get; } = new SecurityEventSource(SubAssessmentsValue);
        /// <summary>
        /// SubAssessmentsSnapshot
        /// Serialized Name: EventSource.SubAssessmentsSnapshot
        /// </summary>
        public static SecurityEventSource SubAssessmentsSnapshot { get; } = new SecurityEventSource(SubAssessmentsSnapshotValue);
        /// <summary>
        /// Alerts
        /// Serialized Name: EventSource.Alerts
        /// </summary>
        public static SecurityEventSource Alerts { get; } = new SecurityEventSource(AlertsValue);
        /// <summary>
        /// SecureScores
        /// Serialized Name: EventSource.SecureScores
        /// </summary>
        public static SecurityEventSource SecureScores { get; } = new SecurityEventSource(SecureScoresValue);
        /// <summary>
        /// SecureScoresSnapshot
        /// Serialized Name: EventSource.SecureScoresSnapshot
        /// </summary>
        public static SecurityEventSource SecureScoresSnapshot { get; } = new SecurityEventSource(SecureScoresSnapshotValue);
        /// <summary>
        /// SecureScoreControls
        /// Serialized Name: EventSource.SecureScoreControls
        /// </summary>
        public static SecurityEventSource SecureScoreControls { get; } = new SecurityEventSource(SecureScoreControlsValue);
        /// <summary>
        /// SecureScoreControlsSnapshot
        /// Serialized Name: EventSource.SecureScoreControlsSnapshot
        /// </summary>
        public static SecurityEventSource SecureScoreControlsSnapshot { get; } = new SecurityEventSource(SecureScoreControlsSnapshotValue);
        /// <summary>
        /// RegulatoryComplianceAssessment
        /// Serialized Name: EventSource.RegulatoryComplianceAssessment
        /// </summary>
        public static SecurityEventSource RegulatoryComplianceAssessment { get; } = new SecurityEventSource(RegulatoryComplianceAssessmentValue);
        /// <summary>
        /// RegulatoryComplianceAssessmentSnapshot
        /// Serialized Name: EventSource.RegulatoryComplianceAssessmentSnapshot
        /// </summary>
        public static SecurityEventSource RegulatoryComplianceAssessmentSnapshot { get; } = new SecurityEventSource(RegulatoryComplianceAssessmentSnapshotValue);
        /// <summary> Determines if two <see cref="SecurityEventSource"/> values are the same. </summary>
        public static bool operator ==(SecurityEventSource left, SecurityEventSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SecurityEventSource"/> values are not the same. </summary>
        public static bool operator !=(SecurityEventSource left, SecurityEventSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SecurityEventSource"/>. </summary>
        public static implicit operator SecurityEventSource(string value) => new SecurityEventSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SecurityEventSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SecurityEventSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
