// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> Alert Simulator supported bundles. </summary>
    public readonly partial struct BundleType : IEquatable<BundleType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BundleType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BundleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AppServicesValue = "AppServices";
        private const string DnsValue = "DNS";
        private const string KeyVaultsValue = "KeyVaults";
        private const string KubernetesServiceValue = "KubernetesService";
        private const string ResourceManagerValue = "ResourceManager";
        private const string SqlServersValue = "SqlServers";
        private const string StorageAccountsValue = "StorageAccounts";
        private const string VirtualMachinesValue = "VirtualMachines";
        private const string CosmosDbsValue = "CosmosDbs";

        /// <summary> AppServices. </summary>
        public static BundleType AppServices { get; } = new BundleType(AppServicesValue);
        /// <summary> DNS. </summary>
        public static BundleType Dns { get; } = new BundleType(DnsValue);
        /// <summary> KeyVaults. </summary>
        public static BundleType KeyVaults { get; } = new BundleType(KeyVaultsValue);
        /// <summary> KubernetesService. </summary>
        public static BundleType KubernetesService { get; } = new BundleType(KubernetesServiceValue);
        /// <summary> ResourceManager. </summary>
        public static BundleType ResourceManager { get; } = new BundleType(ResourceManagerValue);
        /// <summary> SqlServers. </summary>
        public static BundleType SqlServers { get; } = new BundleType(SqlServersValue);
        /// <summary> StorageAccounts. </summary>
        public static BundleType StorageAccounts { get; } = new BundleType(StorageAccountsValue);
        /// <summary> VirtualMachines. </summary>
        public static BundleType VirtualMachines { get; } = new BundleType(VirtualMachinesValue);
        /// <summary> CosmosDbs. </summary>
        public static BundleType CosmosDbs { get; } = new BundleType(CosmosDbsValue);
        /// <summary> Determines if two <see cref="BundleType"/> values are the same. </summary>
        public static bool operator ==(BundleType left, BundleType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BundleType"/> values are not the same. </summary>
        public static bool operator !=(BundleType left, BundleType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="BundleType"/>. </summary>
        public static implicit operator BundleType(string value) => new BundleType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BundleType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BundleType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
