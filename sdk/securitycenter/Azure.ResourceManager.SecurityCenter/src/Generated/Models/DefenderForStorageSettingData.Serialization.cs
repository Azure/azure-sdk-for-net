// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    public partial class DefenderForStorageSettingData : IUtf8JsonSerializable, IJsonModel<DefenderForStorageSettingData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DefenderForStorageSettingData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<DefenderForStorageSettingData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DefenderForStorageSettingData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DefenderForStorageSettingData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("isEnabled"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(IsOverrideSubscriptionLevelSettingsEnabled))
            {
                writer.WritePropertyName("overrideSubscriptionLevelSettings"u8);
                writer.WriteBooleanValue(IsOverrideSubscriptionLevelSettingsEnabled.Value);
            }
            writer.WritePropertyName("sensitiveDataDiscovery"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(IsSensitiveDataDiscoveryEnabled))
            {
                writer.WritePropertyName("isEnabled"u8);
                writer.WriteBooleanValue(IsSensitiveDataDiscoveryEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SensitiveDataDiscoveryOperationStatus))
            {
                writer.WritePropertyName("operationStatus"u8);
                writer.WriteObjectValue(SensitiveDataDiscoveryOperationStatus);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("malwareScanning"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ScanResultsEventGridTopicResourceId))
            {
                writer.WritePropertyName("scanResultsEventGridTopicResourceId"u8);
                writer.WriteStringValue(ScanResultsEventGridTopicResourceId);
            }
            if (options.Format != "W" && Optional.IsDefined(MalwareScanningOperationStatus))
            {
                writer.WritePropertyName("operationStatus"u8);
                writer.WriteObjectValue(MalwareScanningOperationStatus);
            }
            writer.WritePropertyName("onUpload"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(IsMalwareScanningOnUploadEnabled))
            {
                writer.WritePropertyName("isEnabled"u8);
                writer.WriteBooleanValue(IsMalwareScanningOnUploadEnabled.Value);
            }
            if (Optional.IsDefined(CapGBPerMonth))
            {
                writer.WritePropertyName("capGBPerMonth"u8);
                writer.WriteNumberValue(CapGBPerMonth.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DefenderForStorageSettingData IJsonModel<DefenderForStorageSettingData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DefenderForStorageSettingData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DefenderForStorageSettingData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDefenderForStorageSettingData(document.RootElement, options);
        }

        internal static DefenderForStorageSettingData DeserializeDefenderForStorageSettingData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<bool> isEnabled = default;
            Optional<bool> overrideSubscriptionLevelSettings = default;
            Optional<bool> isEnabled0 = default;
            Optional<ExtensionOperationStatus> operationStatus = default;
            Optional<ResourceIdentifier> scanResultsEventGridTopicResourceId = default;
            Optional<ExtensionOperationStatus> operationStatus0 = default;
            Optional<bool> isEnabled1 = default;
            Optional<int> capGBPerMonth = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("isEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("overrideSubscriptionLevelSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            overrideSubscriptionLevelSettings = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("sensitiveDataDiscovery"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("isEnabled"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    isEnabled0 = property1.Value.GetBoolean();
                                    continue;
                                }
                                if (property1.NameEquals("operationStatus"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    operationStatus = ExtensionOperationStatus.DeserializeExtensionOperationStatus(property1.Value);
                                    continue;
                                }
                            }
                            continue;
                        }
                        if (property0.NameEquals("malwareScanning"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("scanResultsEventGridTopicResourceId"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    scanResultsEventGridTopicResourceId = new ResourceIdentifier(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("operationStatus"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    operationStatus0 = ExtensionOperationStatus.DeserializeExtensionOperationStatus(property1.Value);
                                    continue;
                                }
                                if (property1.NameEquals("onUpload"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    foreach (var property2 in property1.Value.EnumerateObject())
                                    {
                                        if (property2.NameEquals("isEnabled"u8))
                                        {
                                            if (property2.Value.ValueKind == JsonValueKind.Null)
                                            {
                                                continue;
                                            }
                                            isEnabled1 = property2.Value.GetBoolean();
                                            continue;
                                        }
                                        if (property2.NameEquals("capGBPerMonth"u8))
                                        {
                                            if (property2.Value.ValueKind == JsonValueKind.Null)
                                            {
                                                continue;
                                            }
                                            capGBPerMonth = property2.Value.GetInt32();
                                            continue;
                                        }
                                    }
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new DefenderForStorageSettingData(id, name, type, systemData.Value, Optional.ToNullable(isEnabled), Optional.ToNullable(overrideSubscriptionLevelSettings), Optional.ToNullable(isEnabled0), operationStatus.Value, scanResultsEventGridTopicResourceId.Value, operationStatus0.Value, Optional.ToNullable(isEnabled1), Optional.ToNullable(capGBPerMonth), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Id))
            {
                builder.Append("  id:");
                builder.AppendLine($" '{Id.ToString()}'");
            }

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                builder.AppendLine($" '{Name}'");
            }

            if (Optional.IsDefined(ResourceType))
            {
                builder.Append("  type:");
                builder.AppendLine($" '{ResourceType.ToString()}'");
            }

            if (Optional.IsDefined(SystemData))
            {
                builder.Append("  systemData:");
                builder.AppendLine($" '{SystemData.ToString()}'");
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(IsEnabled))
            {
                builder.Append("    isEnabled:");
                var boolValue = IsEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsOverrideSubscriptionLevelSettingsEnabled))
            {
                builder.Append("    overrideSubscriptionLevelSettings:");
                var boolValue = IsOverrideSubscriptionLevelSettingsEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            builder.Append("    sensitiveDataDiscovery:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(IsSensitiveDataDiscoveryEnabled))
            {
                builder.Append("      isEnabled:");
                var boolValue = IsSensitiveDataDiscoveryEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(SensitiveDataDiscoveryOperationStatus))
            {
                builder.Append("      operationStatus:");
                AppendChildObject(builder, SensitiveDataDiscoveryOperationStatus, options, 6, false);
            }

            builder.AppendLine("    }");
            builder.Append("    malwareScanning:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(ScanResultsEventGridTopicResourceId))
            {
                builder.Append("      scanResultsEventGridTopicResourceId:");
                builder.AppendLine($" '{ScanResultsEventGridTopicResourceId.ToString()}'");
            }

            if (Optional.IsDefined(MalwareScanningOperationStatus))
            {
                builder.Append("      operationStatus:");
                AppendChildObject(builder, MalwareScanningOperationStatus, options, 6, false);
            }

            builder.Append("      onUpload:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(IsMalwareScanningOnUploadEnabled))
            {
                builder.Append("        isEnabled:");
                var boolValue = IsMalwareScanningOnUploadEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(CapGBPerMonth))
            {
                builder.Append("        capGBPerMonth:");
                builder.AppendLine($" {CapGBPerMonth.Value}");
            }

            builder.AppendLine("      }");
            builder.AppendLine("    }");
            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<DefenderForStorageSettingData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DefenderForStorageSettingData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(DefenderForStorageSettingData)} does not support '{options.Format}' format.");
            }
        }

        DefenderForStorageSettingData IPersistableModel<DefenderForStorageSettingData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DefenderForStorageSettingData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDefenderForStorageSettingData(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(DefenderForStorageSettingData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<DefenderForStorageSettingData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
