// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> The risk level of the threat that was detected. Learn more: https://docs.microsoft.com/en-us/azure/security-center/security-center-alerts-overview#how-are-alerts-classified. </summary>
    public readonly partial struct AlertSeverity : IEquatable<AlertSeverity>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AlertSeverity"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AlertSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InformationalValue = "Informational";
        private const string LowValue = "Low";
        private const string MediumValue = "Medium";
        private const string HighValue = "High";

        /// <summary> Informational. </summary>
        public static AlertSeverity Informational { get; } = new AlertSeverity(InformationalValue);
        /// <summary> Low. </summary>
        public static AlertSeverity Low { get; } = new AlertSeverity(LowValue);
        /// <summary> Medium. </summary>
        public static AlertSeverity Medium { get; } = new AlertSeverity(MediumValue);
        /// <summary> High. </summary>
        public static AlertSeverity High { get; } = new AlertSeverity(HighValue);
        /// <summary> Determines if two <see cref="AlertSeverity"/> values are the same. </summary>
        public static bool operator ==(AlertSeverity left, AlertSeverity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AlertSeverity"/> values are not the same. </summary>
        public static bool operator !=(AlertSeverity left, AlertSeverity right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AlertSeverity"/>. </summary>
        public static implicit operator AlertSeverity(string value) => new AlertSeverity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AlertSeverity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AlertSeverity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
