// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> The kill chain related intent behind the alert. For list of supported values, and explanations of Azure Security Center&apos;s supported kill chain intents. </summary>
    public readonly partial struct Intent : IEquatable<Intent>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Intent"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Intent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string PreAttackValue = "PreAttack";
        private const string InitialAccessValue = "InitialAccess";
        private const string PersistenceValue = "Persistence";
        private const string PrivilegeEscalationValue = "PrivilegeEscalation";
        private const string DefenseEvasionValue = "DefenseEvasion";
        private const string CredentialAccessValue = "CredentialAccess";
        private const string DiscoveryValue = "Discovery";
        private const string LateralMovementValue = "LateralMovement";
        private const string ExecutionValue = "Execution";
        private const string CollectionValue = "Collection";
        private const string ExfiltrationValue = "Exfiltration";
        private const string CommandAndControlValue = "CommandAndControl";
        private const string ImpactValue = "Impact";
        private const string ProbingValue = "Probing";
        private const string ExploitationValue = "Exploitation";

        /// <summary> Unknown. </summary>
        public static Intent Unknown { get; } = new Intent(UnknownValue);
        /// <summary> PreAttack could be either an attempt to access a certain resource regardless of a malicious intent, or a failed attempt to gain access to a target system to gather information prior to exploitation. This step is usually detected as an attempt, originating from outside the network, to scan the target system and find a way in.  Further details on the PreAttack stage can be read in [MITRE Pre-Att&amp;ck matrix](https://attack.mitre.org/matrices/pre/). </summary>
        public static Intent PreAttack { get; } = new Intent(PreAttackValue);
        /// <summary> InitialAccess is the stage where an attacker manages to get foothold on the attacked resource. </summary>
        public static Intent InitialAccess { get; } = new Intent(InitialAccessValue);
        /// <summary> Persistence is any access, action, or configuration change to a system that gives a threat actor a persistent presence on that system. </summary>
        public static Intent Persistence { get; } = new Intent(PersistenceValue);
        /// <summary> Privilege escalation is the result of actions that allow an adversary to obtain a higher level of permissions on a system or network. </summary>
        public static Intent PrivilegeEscalation { get; } = new Intent(PrivilegeEscalationValue);
        /// <summary> Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. </summary>
        public static Intent DefenseEvasion { get; } = new Intent(DefenseEvasionValue);
        /// <summary> Credential access represents techniques resulting in access to or control over system, domain, or service credentials that are used within an enterprise environment. </summary>
        public static Intent CredentialAccess { get; } = new Intent(CredentialAccessValue);
        /// <summary> Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network. </summary>
        public static Intent Discovery { get; } = new Intent(DiscoveryValue);
        /// <summary> Lateral movement consists of techniques that enable an adversary to access and control remote systems on a network and could, but does not necessarily, include execution of tools on remote systems. </summary>
        public static Intent LateralMovement { get; } = new Intent(LateralMovementValue);
        /// <summary> The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote system. </summary>
        public static Intent Execution { get; } = new Intent(ExecutionValue);
        /// <summary> Collection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. </summary>
        public static Intent Collection { get; } = new Intent(CollectionValue);
        /// <summary> Exfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from a target network. </summary>
        public static Intent Exfiltration { get; } = new Intent(ExfiltrationValue);
        /// <summary> The command and control tactic represents how adversaries communicate with systems under their control within a target network. </summary>
        public static Intent CommandAndControl { get; } = new Intent(CommandAndControlValue);
        /// <summary> Impact events primarily try to directly reduce the availability or integrity of a system, service, or network; including manipulation of data to impact a business or operational process. </summary>
        public static Intent Impact { get; } = new Intent(ImpactValue);
        /// <summary> Probing could be either an attempt to access a certain resource regardless of a malicious intent, or a failed attempt to gain access to a target system to gather information prior to exploitation. </summary>
        public static Intent Probing { get; } = new Intent(ProbingValue);
        /// <summary> Exploitation is the stage where an attacker manages to get a foothold on the attacked resource. This stage is relevant for compute hosts and resources such as user accounts, certificates etc. </summary>
        public static Intent Exploitation { get; } = new Intent(ExploitationValue);
        /// <summary> Determines if two <see cref="Intent"/> values are the same. </summary>
        public static bool operator ==(Intent left, Intent right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Intent"/> values are not the same. </summary>
        public static bool operator !=(Intent left, Intent right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Intent"/>. </summary>
        public static implicit operator Intent(string value) => new Intent(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Intent other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Intent other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
