// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class VulnerabilityAssessmentRule : IUtf8JsonSerializable, IModelJsonSerializable<VulnerabilityAssessmentRule>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<VulnerabilityAssessmentRule>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<VulnerabilityAssessmentRule>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(RuleId))
            {
                writer.WritePropertyName("ruleId"u8);
                writer.WriteStringValue(RuleId);
            }
            if (Optional.IsDefined(Severity))
            {
                writer.WritePropertyName("severity"u8);
                writer.WriteStringValue(Severity.Value.ToString());
            }
            if (Optional.IsDefined(Category))
            {
                writer.WritePropertyName("category"u8);
                writer.WriteStringValue(Category);
            }
            if (Optional.IsDefined(RuleType))
            {
                writer.WritePropertyName("ruleType"u8);
                writer.WriteStringValue(RuleType.Value.ToString());
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Rationale))
            {
                writer.WritePropertyName("rationale"u8);
                writer.WriteStringValue(Rationale);
            }
            if (Optional.IsDefined(QueryCheck))
            {
                writer.WritePropertyName("queryCheck"u8);
                if (QueryCheck is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<VulnerabilityAssessmentRuleQueryCheck>)QueryCheck).Serialize(writer, options);
                }
            }
            if (Optional.IsCollectionDefined(BenchmarkReferences))
            {
                writer.WritePropertyName("benchmarkReferences"u8);
                writer.WriteStartArray();
                foreach (var item in BenchmarkReferences)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<BenchmarkReference>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static VulnerabilityAssessmentRule DeserializeVulnerabilityAssessmentRule(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> ruleId = default;
            Optional<RuleSeverity> severity = default;
            Optional<string> category = default;
            Optional<VulnerabilityAssessmentRuleType> ruleType = default;
            Optional<string> title = default;
            Optional<string> description = default;
            Optional<string> rationale = default;
            Optional<VulnerabilityAssessmentRuleQueryCheck> queryCheck = default;
            Optional<IList<BenchmarkReference>> benchmarkReferences = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ruleId"u8))
                {
                    ruleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    severity = new RuleSeverity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ruleType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ruleType = new VulnerabilityAssessmentRuleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rationale"u8))
                {
                    rationale = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queryCheck"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    queryCheck = VulnerabilityAssessmentRuleQueryCheck.DeserializeVulnerabilityAssessmentRuleQueryCheck(property.Value);
                    continue;
                }
                if (property.NameEquals("benchmarkReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BenchmarkReference> array = new List<BenchmarkReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BenchmarkReference.DeserializeBenchmarkReference(item));
                    }
                    benchmarkReferences = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new VulnerabilityAssessmentRule(ruleId.Value, Optional.ToNullable(severity), category.Value, Optional.ToNullable(ruleType), title.Value, description.Value, rationale.Value, queryCheck.Value, Optional.ToList(benchmarkReferences), rawData);
        }

        VulnerabilityAssessmentRule IModelJsonSerializable<VulnerabilityAssessmentRule>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeVulnerabilityAssessmentRule(doc.RootElement, options);
        }

        BinaryData IModelSerializable<VulnerabilityAssessmentRule>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        VulnerabilityAssessmentRule IModelSerializable<VulnerabilityAssessmentRule>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeVulnerabilityAssessmentRule(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="VulnerabilityAssessmentRule"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="VulnerabilityAssessmentRule"/> to convert. </param>
        public static implicit operator RequestContent(VulnerabilityAssessmentRule model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="VulnerabilityAssessmentRule"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator VulnerabilityAssessmentRule(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeVulnerabilityAssessmentRule(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
