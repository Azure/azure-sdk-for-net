// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class VulnerabilityAssessmentRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RuleId))
            {
                writer.WritePropertyName("ruleId");
                writer.WriteStringValue(RuleId);
            }
            if (Optional.IsDefined(Severity))
            {
                writer.WritePropertyName("severity");
                writer.WriteStringValue(Severity.Value.ToString());
            }
            if (Optional.IsDefined(Category))
            {
                writer.WritePropertyName("category");
                writer.WriteStringValue(Category);
            }
            if (Optional.IsDefined(RuleType))
            {
                writer.WritePropertyName("ruleType");
                writer.WriteStringValue(RuleType.Value.ToString());
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title");
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Rationale))
            {
                writer.WritePropertyName("rationale");
                writer.WriteStringValue(Rationale);
            }
            if (Optional.IsDefined(QueryCheck))
            {
                writer.WritePropertyName("queryCheck");
                writer.WriteObjectValue(QueryCheck);
            }
            if (Optional.IsCollectionDefined(BenchmarkReferences))
            {
                writer.WritePropertyName("benchmarkReferences");
                writer.WriteStartArray();
                foreach (var item in BenchmarkReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static VulnerabilityAssessmentRule DeserializeVulnerabilityAssessmentRule(JsonElement element)
        {
            Optional<string> ruleId = default;
            Optional<RuleSeverity> severity = default;
            Optional<string> category = default;
            Optional<VulnerabilityAssessmentRuleType> ruleType = default;
            Optional<string> title = default;
            Optional<string> description = default;
            Optional<string> rationale = default;
            Optional<VulnerabilityAssessmentRuleQueryCheck> queryCheck = default;
            Optional<IList<BenchmarkReference>> benchmarkReferences = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ruleId"))
                {
                    ruleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    severity = new RuleSeverity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("category"))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ruleType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ruleType = new VulnerabilityAssessmentRuleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("title"))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rationale"))
                {
                    rationale = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queryCheck"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    queryCheck = VulnerabilityAssessmentRuleQueryCheck.DeserializeVulnerabilityAssessmentRuleQueryCheck(property.Value);
                    continue;
                }
                if (property.NameEquals("benchmarkReferences"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<BenchmarkReference> array = new List<BenchmarkReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BenchmarkReference.DeserializeBenchmarkReference(item));
                    }
                    benchmarkReferences = array;
                    continue;
                }
            }
            return new VulnerabilityAssessmentRule(ruleId.Value, Optional.ToNullable(severity), category.Value, Optional.ToNullable(ruleType), title.Value, description.Value, rationale.Value, queryCheck.Value, Optional.ToList(benchmarkReferences));
        }
    }
}
