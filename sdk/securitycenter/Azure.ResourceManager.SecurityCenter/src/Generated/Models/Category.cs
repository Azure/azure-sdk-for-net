// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> The categories of resource that is at risk when the assessment is unhealthy. </summary>
    public readonly partial struct Category : IEquatable<Category>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Category"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Category(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ComputeValue = "Compute";
        private const string NetworkingValue = "Networking";
        private const string DataValue = "Data";
        private const string IdentityAndAccessValue = "IdentityAndAccess";
        private const string IotValue = "IoT";

        /// <summary> Compute. </summary>
        public static Category Compute { get; } = new Category(ComputeValue);
        /// <summary> Networking. </summary>
        public static Category Networking { get; } = new Category(NetworkingValue);
        /// <summary> Data. </summary>
        public static Category Data { get; } = new Category(DataValue);
        /// <summary> IdentityAndAccess. </summary>
        public static Category IdentityAndAccess { get; } = new Category(IdentityAndAccessValue);
        /// <summary> IoT. </summary>
        public static Category Iot { get; } = new Category(IotValue);
        /// <summary> Determines if two <see cref="Category"/> values are the same. </summary>
        public static bool operator ==(Category left, Category right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Category"/> values are not the same. </summary>
        public static bool operator !=(Category left, Category right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Category"/>. </summary>
        public static implicit operator Category(string value) => new Category(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Category other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Category other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
