// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> The configuration status of the machines group or machine or rule. </summary>
    public readonly partial struct ConfigurationStatus : IEquatable<ConfigurationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConfigurationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConfigurationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConfiguredValue = "Configured";
        private const string NotConfiguredValue = "NotConfigured";
        private const string InProgressValue = "InProgress";
        private const string FailedValue = "Failed";
        private const string NoStatusValue = "NoStatus";

        /// <summary> Configured. </summary>
        public static ConfigurationStatus Configured { get; } = new ConfigurationStatus(ConfiguredValue);
        /// <summary> NotConfigured. </summary>
        public static ConfigurationStatus NotConfigured { get; } = new ConfigurationStatus(NotConfiguredValue);
        /// <summary> InProgress. </summary>
        public static ConfigurationStatus InProgress { get; } = new ConfigurationStatus(InProgressValue);
        /// <summary> Failed. </summary>
        public static ConfigurationStatus Failed { get; } = new ConfigurationStatus(FailedValue);
        /// <summary> NoStatus. </summary>
        public static ConfigurationStatus NoStatus { get; } = new ConfigurationStatus(NoStatusValue);
        /// <summary> Determines if two <see cref="ConfigurationStatus"/> values are the same. </summary>
        public static bool operator ==(ConfigurationStatus left, ConfigurationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConfigurationStatus"/> values are not the same. </summary>
        public static bool operator !=(ConfigurationStatus left, ConfigurationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConfigurationStatus"/>. </summary>
        public static implicit operator ConfigurationStatus(string value) => new ConfigurationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConfigurationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConfigurationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
