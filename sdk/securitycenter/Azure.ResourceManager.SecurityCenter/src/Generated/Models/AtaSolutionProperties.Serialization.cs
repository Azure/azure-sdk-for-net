// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class AtaSolutionProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(LastEventReceived))
            {
                writer.WritePropertyName("lastEventReceived");
                writer.WriteStringValue(LastEventReceived);
            }
            if (Optional.IsDefined(DeviceVendor))
            {
                writer.WritePropertyName("deviceVendor");
                writer.WriteStringValue(DeviceVendor);
            }
            if (Optional.IsDefined(DeviceType))
            {
                writer.WritePropertyName("deviceType");
                writer.WriteStringValue(DeviceType);
            }
            if (Optional.IsDefined(Workspace))
            {
                writer.WritePropertyName("workspace");
                JsonSerializer.Serialize(writer, Workspace);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static AtaSolutionProperties DeserializeAtaSolutionProperties(JsonElement element)
        {
            Optional<string> lastEventReceived = default;
            Optional<string> deviceVendor = default;
            Optional<string> deviceType = default;
            Optional<WritableSubResource> workspace = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lastEventReceived"))
                {
                    lastEventReceived = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deviceVendor"))
                {
                    deviceVendor = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deviceType"))
                {
                    deviceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workspace"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    workspace = JsonSerializer.Deserialize<WritableSubResource>(property.Value.GetRawText());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new AtaSolutionProperties(deviceVendor.Value, deviceType.Value, workspace, additionalProperties, lastEventReceived.Value);
        }
    }
}
