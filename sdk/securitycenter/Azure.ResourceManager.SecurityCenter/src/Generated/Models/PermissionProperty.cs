// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> A permission detected in the cloud account. </summary>
    public readonly partial struct PermissionProperty : IEquatable<PermissionProperty>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PermissionProperty"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PermissionProperty(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AWSAWSSecurityHubReadOnlyAccessValue = "AWS::AWSSecurityHubReadOnlyAccess";
        private const string AWSSecurityAuditValue = "AWS::SecurityAudit";
        private const string AWSAmazonSSMAutomationRoleValue = "AWS::AmazonSSMAutomationRole";
        private const string GCPSecurityCenterAdminViewerValue = "GCP::Security Center Admin Viewer";

        /// <summary> This permission provides read only access to AWS Security Hub resources. </summary>
        public static PermissionProperty AWSAWSSecurityHubReadOnlyAccess { get; } = new PermissionProperty(AWSAWSSecurityHubReadOnlyAccessValue);
        /// <summary> This permission grants access to read security configuration metadata. </summary>
        public static PermissionProperty AWSSecurityAudit { get; } = new PermissionProperty(AWSSecurityAuditValue);
        /// <summary> The permission provides for EC2 Automation service to execute activities defined within Automation documents. </summary>
        public static PermissionProperty AWSAmazonSSMAutomationRole { get; } = new PermissionProperty(AWSAmazonSSMAutomationRoleValue);
        /// <summary> This permission provides read only access to GCP Security Command Center. </summary>
        public static PermissionProperty GCPSecurityCenterAdminViewer { get; } = new PermissionProperty(GCPSecurityCenterAdminViewerValue);
        /// <summary> Determines if two <see cref="PermissionProperty"/> values are the same. </summary>
        public static bool operator ==(PermissionProperty left, PermissionProperty right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PermissionProperty"/> values are not the same. </summary>
        public static bool operator !=(PermissionProperty left, PermissionProperty right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PermissionProperty"/>. </summary>
        public static implicit operator PermissionProperty(string value) => new PermissionProperty(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PermissionProperty other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PermissionProperty other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
