// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class TopologySingleResource
    {
        internal static TopologySingleResource DeserializeTopologySingleResource(JsonElement element)
        {
            Optional<string> resourceId = default;
            Optional<string> severity = default;
            Optional<bool> recommendationsExist = default;
            Optional<string> networkZones = default;
            Optional<int> topologyScore = default;
            Optional<AzureLocation> location = default;
            Optional<IReadOnlyList<TopologySingleResourceParent>> parents = default;
            Optional<IReadOnlyList<TopologySingleResourceChild>> children = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceId"))
                {
                    resourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"))
                {
                    severity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recommendationsExist"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recommendationsExist = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("networkZones"))
                {
                    networkZones = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("topologyScore"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    topologyScore = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("parents"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TopologySingleResourceParent> array = new List<TopologySingleResourceParent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TopologySingleResourceParent.DeserializeTopologySingleResourceParent(item));
                    }
                    parents = array;
                    continue;
                }
                if (property.NameEquals("children"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TopologySingleResourceChild> array = new List<TopologySingleResourceChild>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TopologySingleResourceChild.DeserializeTopologySingleResourceChild(item));
                    }
                    children = array;
                    continue;
                }
            }
            return new TopologySingleResource(resourceId.Value, severity.Value, Optional.ToNullable(recommendationsExist), networkZones.Value, Optional.ToNullable(topologyScore), Optional.ToNullable(location), Optional.ToList(parents), Optional.ToList(children));
        }
    }
}
