// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class Baseline : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ExpectedResults))
            {
                writer.WritePropertyName("expectedResults");
                writer.WriteStartArray();
                foreach (var item in ExpectedResults)
                {
                    writer.WriteStartArray();
                    foreach (var item0 in item)
                    {
                        writer.WriteStringValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(UpdatedOn))
            {
                writer.WritePropertyName("updatedTime");
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            writer.WriteEndObject();
        }

        internal static Baseline DeserializeBaseline(JsonElement element)
        {
            Optional<IList<IList<string>>> expectedResults = default;
            Optional<DateTimeOffset> updatedTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("expectedResults"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        List<string> array0 = new List<string>();
                        foreach (var item0 in item.EnumerateArray())
                        {
                            array0.Add(item0.GetString());
                        }
                        array.Add(array0);
                    }
                    expectedResults = array;
                    continue;
                }
                if (property.NameEquals("updatedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    updatedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new Baseline(Optional.ToList(expectedResults), Optional.ToNullable(updatedTime));
        }
    }
}
