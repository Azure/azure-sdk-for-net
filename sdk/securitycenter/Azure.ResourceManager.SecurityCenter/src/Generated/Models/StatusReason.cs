// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> A description of why the `status` has its value. </summary>
    public readonly partial struct StatusReason : IEquatable<StatusReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StatusReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StatusReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExpiredValue = "Expired";
        private const string UserRequestedValue = "UserRequested";
        private const string NewerRequestInitiatedValue = "NewerRequestInitiated";

        /// <summary> Expired. </summary>
        public static StatusReason Expired { get; } = new StatusReason(ExpiredValue);
        /// <summary> UserRequested. </summary>
        public static StatusReason UserRequested { get; } = new StatusReason(UserRequestedValue);
        /// <summary> NewerRequestInitiated. </summary>
        public static StatusReason NewerRequestInitiated { get; } = new StatusReason(NewerRequestInitiatedValue);
        /// <summary> Determines if two <see cref="StatusReason"/> values are the same. </summary>
        public static bool operator ==(StatusReason left, StatusReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StatusReason"/> values are not the same. </summary>
        public static bool operator !=(StatusReason left, StatusReason right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StatusReason"/>. </summary>
        public static implicit operator StatusReason(string value) => new StatusReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StatusReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StatusReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
