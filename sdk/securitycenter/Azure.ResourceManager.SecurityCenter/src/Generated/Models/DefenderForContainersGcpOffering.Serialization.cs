// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class DefenderForContainersGcpOffering : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(NativeCloudConnection))
            {
                writer.WritePropertyName("nativeCloudConnection");
                writer.WriteObjectValue(NativeCloudConnection);
            }
            if (Optional.IsDefined(DataPipelineNativeCloudConnection))
            {
                writer.WritePropertyName("dataPipelineNativeCloudConnection");
                writer.WriteObjectValue(DataPipelineNativeCloudConnection);
            }
            if (Optional.IsDefined(AuditLogsAutoProvisioningFlag))
            {
                writer.WritePropertyName("auditLogsAutoProvisioningFlag");
                writer.WriteBooleanValue(AuditLogsAutoProvisioningFlag.Value);
            }
            if (Optional.IsDefined(DefenderAgentAutoProvisioningFlag))
            {
                writer.WritePropertyName("defenderAgentAutoProvisioningFlag");
                writer.WriteBooleanValue(DefenderAgentAutoProvisioningFlag.Value);
            }
            if (Optional.IsDefined(PolicyAgentAutoProvisioningFlag))
            {
                writer.WritePropertyName("policyAgentAutoProvisioningFlag");
                writer.WriteBooleanValue(PolicyAgentAutoProvisioningFlag.Value);
            }
            writer.WritePropertyName("offeringType");
            writer.WriteStringValue(OfferingType.ToString());
            writer.WriteEndObject();
        }

        internal static DefenderForContainersGcpOffering DeserializeDefenderForContainersGcpOffering(JsonElement element)
        {
            Optional<DefenderForContainersGcpOfferingNativeCloudConnection> nativeCloudConnection = default;
            Optional<DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection> dataPipelineNativeCloudConnection = default;
            Optional<bool> auditLogsAutoProvisioningFlag = default;
            Optional<bool> defenderAgentAutoProvisioningFlag = default;
            Optional<bool> policyAgentAutoProvisioningFlag = default;
            OfferingType offeringType = default;
            Optional<string> description = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nativeCloudConnection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nativeCloudConnection = DefenderForContainersGcpOfferingNativeCloudConnection.DeserializeDefenderForContainersGcpOfferingNativeCloudConnection(property.Value);
                    continue;
                }
                if (property.NameEquals("dataPipelineNativeCloudConnection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dataPipelineNativeCloudConnection = DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection.DeserializeDefenderForContainersGcpOfferingDataPipelineNativeCloudConnection(property.Value);
                    continue;
                }
                if (property.NameEquals("auditLogsAutoProvisioningFlag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    auditLogsAutoProvisioningFlag = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defenderAgentAutoProvisioningFlag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defenderAgentAutoProvisioningFlag = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("policyAgentAutoProvisioningFlag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    policyAgentAutoProvisioningFlag = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("offeringType"))
                {
                    offeringType = new OfferingType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
            }
            return new DefenderForContainersGcpOffering(offeringType, description.Value, nativeCloudConnection.Value, dataPipelineNativeCloudConnection.Value, Optional.ToNullable(auditLogsAutoProvisioningFlag), Optional.ToNullable(defenderAgentAutoProvisioningFlag), Optional.ToNullable(policyAgentAutoProvisioningFlag));
        }
    }
}
