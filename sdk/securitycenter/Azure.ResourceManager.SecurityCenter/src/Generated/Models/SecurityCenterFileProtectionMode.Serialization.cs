// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class SecurityCenterFileProtectionMode : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Exe))
            {
                writer.WritePropertyName("exe"u8);
                writer.WriteStringValue(Exe.Value.ToString());
            }
            if (Optional.IsDefined(Msi))
            {
                writer.WritePropertyName("msi"u8);
                writer.WriteStringValue(Msi.Value.ToString());
            }
            if (Optional.IsDefined(Script))
            {
                writer.WritePropertyName("script"u8);
                writer.WriteStringValue(Script.Value.ToString());
            }
            if (Optional.IsDefined(Executable))
            {
                writer.WritePropertyName("executable"u8);
                writer.WriteStringValue(Executable.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static SecurityCenterFileProtectionMode DeserializeSecurityCenterFileProtectionMode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<AdaptiveApplicationControlEnforcementMode> exe = default;
            Optional<AdaptiveApplicationControlEnforcementMode> msi = default;
            Optional<AdaptiveApplicationControlEnforcementMode> script = default;
            Optional<AdaptiveApplicationControlEnforcementMode> executable = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("exe"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exe = new AdaptiveApplicationControlEnforcementMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("msi"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    msi = new AdaptiveApplicationControlEnforcementMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("script"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    script = new AdaptiveApplicationControlEnforcementMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("executable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    executable = new AdaptiveApplicationControlEnforcementMode(property.Value.GetString());
                    continue;
                }
            }
            return new SecurityCenterFileProtectionMode(Optional.ToNullable(exe), Optional.ToNullable(msi), Optional.ToNullable(script), Optional.ToNullable(executable));
        }
    }
}
