// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> The type of the file (for Linux files - Executable is used). </summary>
    public readonly partial struct FileType : IEquatable<FileType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FileType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExeValue = "Exe";
        private const string DllValue = "Dll";
        private const string MsiValue = "Msi";
        private const string ScriptValue = "Script";
        private const string ExecutableValue = "Executable";
        private const string UnknownValue = "Unknown";

        /// <summary> Exe. </summary>
        public static FileType Exe { get; } = new FileType(ExeValue);
        /// <summary> Dll. </summary>
        public static FileType Dll { get; } = new FileType(DllValue);
        /// <summary> Msi. </summary>
        public static FileType Msi { get; } = new FileType(MsiValue);
        /// <summary> Script. </summary>
        public static FileType Script { get; } = new FileType(ScriptValue);
        /// <summary> Executable. </summary>
        public static FileType Executable { get; } = new FileType(ExecutableValue);
        /// <summary> Unknown. </summary>
        public static FileType Unknown { get; } = new FileType(UnknownValue);
        /// <summary> Determines if two <see cref="FileType"/> values are the same. </summary>
        public static bool operator ==(FileType left, FileType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileType"/> values are not the same. </summary>
        public static bool operator !=(FileType left, FileType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FileType"/>. </summary>
        public static implicit operator FileType(string value) => new FileType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
