// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class SqlVulnerabilityAssessmentScanResultProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RuleId))
            {
                writer.WritePropertyName("ruleId"u8);
                writer.WriteStringValue(RuleId);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(IsTrimmed))
            {
                writer.WritePropertyName("isTrimmed"u8);
                writer.WriteBooleanValue(IsTrimmed.Value);
            }
            if (Optional.IsCollectionDefined(QueryResults))
            {
                writer.WritePropertyName("queryResults"u8);
                writer.WriteStartArray();
                foreach (var item in QueryResults)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartArray();
                    foreach (var item0 in item)
                    {
                        writer.WriteStringValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Remediation))
            {
                writer.WritePropertyName("remediation"u8);
                writer.WriteObjectValue(Remediation);
            }
            if (Optional.IsDefined(BaselineAdjustedResult))
            {
                writer.WritePropertyName("baselineAdjustedResult"u8);
                writer.WriteObjectValue(BaselineAdjustedResult);
            }
            if (Optional.IsDefined(RuleMetadata))
            {
                writer.WritePropertyName("ruleMetadata"u8);
                writer.WriteObjectValue(RuleMetadata);
            }
            writer.WriteEndObject();
        }

        internal static SqlVulnerabilityAssessmentScanResultProperties DeserializeSqlVulnerabilityAssessmentScanResultProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> ruleId = default;
            Optional<SqlVulnerabilityAssessmentScanResultRuleStatus> status = default;
            Optional<bool> isTrimmed = default;
            Optional<IList<IList<string>>> queryResults = default;
            Optional<SqlVulnerabilityAssessmentRemediation> remediation = default;
            Optional<BaselineAdjustedResult> baselineAdjustedResult = default;
            Optional<VulnerabilityAssessmentRule> ruleMetadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ruleId"u8))
                {
                    ruleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new SqlVulnerabilityAssessmentScanResultRuleStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isTrimmed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isTrimmed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("queryResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<string> array0 = new List<string>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array0.Add(item0.GetString());
                            }
                            array.Add(array0);
                        }
                    }
                    queryResults = array;
                    continue;
                }
                if (property.NameEquals("remediation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    remediation = SqlVulnerabilityAssessmentRemediation.DeserializeSqlVulnerabilityAssessmentRemediation(property.Value);
                    continue;
                }
                if (property.NameEquals("baselineAdjustedResult"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    baselineAdjustedResult = BaselineAdjustedResult.DeserializeBaselineAdjustedResult(property.Value);
                    continue;
                }
                if (property.NameEquals("ruleMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ruleMetadata = VulnerabilityAssessmentRule.DeserializeVulnerabilityAssessmentRule(property.Value);
                    continue;
                }
            }
            return new SqlVulnerabilityAssessmentScanResultProperties(ruleId.Value, Optional.ToNullable(status), Optional.ToNullable(isTrimmed), Optional.ToList(queryResults), remediation.Value, baselineAdjustedResult.Value, ruleMetadata.Value);
        }
    }
}
