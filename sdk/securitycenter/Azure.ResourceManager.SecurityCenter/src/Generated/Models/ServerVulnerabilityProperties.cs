// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary>
    /// Additional context fields for server vulnerability assessment
    /// Serialized Name: ServerVulnerabilityProperties
    /// </summary>
    public partial class ServerVulnerabilityProperties : SecuritySubAssessmentAdditionalInfo
    {
        /// <summary> Initializes a new instance of <see cref="ServerVulnerabilityProperties"/>. </summary>
        public ServerVulnerabilityProperties()
        {
            Cvss = new ChangeTrackingDictionary<string, SecurityCvss>();
            Cve = new ChangeTrackingList<SecurityCve>();
            VendorReferences = new ChangeTrackingList<VendorReference>();
            AssessedResourceType = new AssessedResourceType("ServerVulnerabilityAssessment");
        }

        /// <summary> Initializes a new instance of <see cref="ServerVulnerabilityProperties"/>. </summary>
        /// <param name="assessedResourceType">
        /// Sub-assessment resource type
        /// Serialized Name: AdditionalData.assessedResourceType
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="serverVulnerabilityType">
        /// Vulnerability Type. e.g: Vulnerability, Potential Vulnerability, Information Gathered
        /// Serialized Name: ServerVulnerabilityProperties.type
        /// </param>
        /// <param name="cvss">
        /// Dictionary from cvss version to cvss details object
        /// Serialized Name: ServerVulnerabilityProperties.cvss
        /// </param>
        /// <param name="isPatchable">
        /// Indicates whether a patch is available or not
        /// Serialized Name: ServerVulnerabilityProperties.patchable
        /// </param>
        /// <param name="cve">
        /// List of CVEs
        /// Serialized Name: ServerVulnerabilityProperties.cve
        /// </param>
        /// <param name="threat">
        /// Threat name
        /// Serialized Name: ServerVulnerabilityProperties.threat
        /// </param>
        /// <param name="publishedOn">
        /// Published time
        /// Serialized Name: ServerVulnerabilityProperties.publishedTime
        /// </param>
        /// <param name="vendorReferences"> Serialized Name: ServerVulnerabilityProperties.vendorReferences. </param>
        internal ServerVulnerabilityProperties(AssessedResourceType assessedResourceType, IDictionary<string, BinaryData> serializedAdditionalRawData, string serverVulnerabilityType, IReadOnlyDictionary<string, SecurityCvss> cvss, bool? isPatchable, IReadOnlyList<SecurityCve> cve, string threat, DateTimeOffset? publishedOn, IReadOnlyList<VendorReference> vendorReferences) : base(assessedResourceType, serializedAdditionalRawData)
        {
            ServerVulnerabilityType = serverVulnerabilityType;
            Cvss = cvss;
            IsPatchable = isPatchable;
            Cve = cve;
            Threat = threat;
            PublishedOn = publishedOn;
            VendorReferences = vendorReferences;
            AssessedResourceType = assessedResourceType;
        }

        /// <summary>
        /// Vulnerability Type. e.g: Vulnerability, Potential Vulnerability, Information Gathered
        /// Serialized Name: ServerVulnerabilityProperties.type
        /// </summary>
        public string ServerVulnerabilityType { get; }
        /// <summary>
        /// Dictionary from cvss version to cvss details object
        /// Serialized Name: ServerVulnerabilityProperties.cvss
        /// </summary>
        public IReadOnlyDictionary<string, SecurityCvss> Cvss { get; }
        /// <summary>
        /// Indicates whether a patch is available or not
        /// Serialized Name: ServerVulnerabilityProperties.patchable
        /// </summary>
        public bool? IsPatchable { get; }
        /// <summary>
        /// List of CVEs
        /// Serialized Name: ServerVulnerabilityProperties.cve
        /// </summary>
        public IReadOnlyList<SecurityCve> Cve { get; }
        /// <summary>
        /// Threat name
        /// Serialized Name: ServerVulnerabilityProperties.threat
        /// </summary>
        public string Threat { get; }
        /// <summary>
        /// Published time
        /// Serialized Name: ServerVulnerabilityProperties.publishedTime
        /// </summary>
        public DateTimeOffset? PublishedOn { get; }
        /// <summary> Serialized Name: ServerVulnerabilityProperties.vendorReferences. </summary>
        public IReadOnlyList<VendorReference> VendorReferences { get; }
    }
}
