// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> The multi cloud resource&apos;s cloud name. </summary>
    public readonly partial struct CloudName : IEquatable<CloudName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CloudName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CloudName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureValue = "Azure";
        private const string AWSValue = "AWS";
        private const string GCPValue = "GCP";
        private const string GithubValue = "Github";
        private const string AzureDevOpsValue = "AzureDevOps";

        /// <summary> Azure. </summary>
        public static CloudName Azure { get; } = new CloudName(AzureValue);
        /// <summary> AWS. </summary>
        public static CloudName AWS { get; } = new CloudName(AWSValue);
        /// <summary> GCP. </summary>
        public static CloudName GCP { get; } = new CloudName(GCPValue);
        /// <summary> Github. </summary>
        public static CloudName Github { get; } = new CloudName(GithubValue);
        /// <summary> AzureDevOps. </summary>
        public static CloudName AzureDevOps { get; } = new CloudName(AzureDevOpsValue);
        /// <summary> Determines if two <see cref="CloudName"/> values are the same. </summary>
        public static bool operator ==(CloudName left, CloudName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CloudName"/> values are not the same. </summary>
        public static bool operator !=(CloudName left, CloudName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CloudName"/>. </summary>
        public static implicit operator CloudName(string value) => new CloudName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CloudName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CloudName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
