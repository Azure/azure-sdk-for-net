// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class ContainerRegistryVulnerabilityProperties : IUtf8JsonSerializable, IJsonModel<ContainerRegistryVulnerabilityProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContainerRegistryVulnerabilityProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ContainerRegistryVulnerabilityProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerRegistryVulnerabilityProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerRegistryVulnerabilityProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ContainerRegistryVulnerabilityPropertiesType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ContainerRegistryVulnerabilityPropertiesType);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Cvss))
            {
                writer.WritePropertyName("cvss"u8);
                writer.WriteStartObject();
                foreach (var item in Cvss)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(IsPatchable))
            {
                writer.WritePropertyName("patchable"u8);
                writer.WriteBooleanValue(IsPatchable.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Cve))
            {
                writer.WritePropertyName("cve"u8);
                writer.WriteStartArray();
                foreach (var item in Cve)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(PublishedOn))
            {
                writer.WritePropertyName("publishedTime"u8);
                writer.WriteStringValue(PublishedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(VendorReferences))
            {
                writer.WritePropertyName("vendorReferences"u8);
                writer.WriteStartArray();
                foreach (var item in VendorReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(RepositoryName))
            {
                writer.WritePropertyName("repositoryName"u8);
                writer.WriteStringValue(RepositoryName);
            }
            if (options.Format != "W" && Optional.IsDefined(ImageDigest))
            {
                writer.WritePropertyName("imageDigest"u8);
                writer.WriteStringValue(ImageDigest);
            }
            writer.WritePropertyName("assessedResourceType"u8);
            writer.WriteStringValue(AssessedResourceType.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ContainerRegistryVulnerabilityProperties IJsonModel<ContainerRegistryVulnerabilityProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerRegistryVulnerabilityProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerRegistryVulnerabilityProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerRegistryVulnerabilityProperties(document.RootElement, options);
        }

        internal static ContainerRegistryVulnerabilityProperties DeserializeContainerRegistryVulnerabilityProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> type = default;
            Optional<IReadOnlyDictionary<string, SecurityCvss>> cvss = default;
            Optional<bool> patchable = default;
            Optional<IReadOnlyList<SecurityCve>> cve = default;
            Optional<DateTimeOffset> publishedTime = default;
            Optional<IReadOnlyList<VendorReference>> vendorReferences = default;
            Optional<string> repositoryName = default;
            Optional<string> imageDigest = default;
            AssessedResourceType assessedResourceType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cvss"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, SecurityCvss> dictionary = new Dictionary<string, SecurityCvss>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, SecurityCvss.DeserializeSecurityCvss(property0.Value));
                    }
                    cvss = dictionary;
                    continue;
                }
                if (property.NameEquals("patchable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    patchable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cve"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SecurityCve> array = new List<SecurityCve>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SecurityCve.DeserializeSecurityCve(item));
                    }
                    cve = array;
                    continue;
                }
                if (property.NameEquals("publishedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publishedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("vendorReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VendorReference> array = new List<VendorReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VendorReference.DeserializeVendorReference(item));
                    }
                    vendorReferences = array;
                    continue;
                }
                if (property.NameEquals("repositoryName"u8))
                {
                    repositoryName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("imageDigest"u8))
                {
                    imageDigest = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assessedResourceType"u8))
                {
                    assessedResourceType = new AssessedResourceType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ContainerRegistryVulnerabilityProperties(assessedResourceType, serializedAdditionalRawData, type.Value, Optional.ToDictionary(cvss), Optional.ToNullable(patchable), Optional.ToList(cve), Optional.ToNullable(publishedTime), Optional.ToList(vendorReferences), repositoryName.Value, imageDigest.Value);
        }

        BinaryData IPersistableModel<ContainerRegistryVulnerabilityProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerRegistryVulnerabilityProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ContainerRegistryVulnerabilityProperties)} does not support '{options.Format}' format.");
            }
        }

        ContainerRegistryVulnerabilityProperties IPersistableModel<ContainerRegistryVulnerabilityProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerRegistryVulnerabilityProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeContainerRegistryVulnerabilityProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContainerRegistryVulnerabilityProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContainerRegistryVulnerabilityProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
