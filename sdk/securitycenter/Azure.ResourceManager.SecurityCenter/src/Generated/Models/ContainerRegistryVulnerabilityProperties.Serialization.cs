// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class ContainerRegistryVulnerabilityProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("assessedResourceType"u8);
            writer.WriteStringValue(AssessedResourceType.ToString());
            writer.WriteEndObject();
        }

        internal static ContainerRegistryVulnerabilityProperties DeserializeContainerRegistryVulnerabilityProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> type = default;
            Optional<IReadOnlyDictionary<string, SecurityCvss>> cvss = default;
            Optional<bool> patchable = default;
            Optional<IReadOnlyList<SecurityCve>> cve = default;
            Optional<DateTimeOffset> publishedTime = default;
            Optional<IReadOnlyList<VendorReference>> vendorReferences = default;
            Optional<string> repositoryName = default;
            Optional<string> imageDigest = default;
            AssessedResourceType assessedResourceType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cvss"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, SecurityCvss> dictionary = new Dictionary<string, SecurityCvss>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, SecurityCvss.DeserializeSecurityCvss(property0.Value));
                    }
                    cvss = dictionary;
                    continue;
                }
                if (property.NameEquals("patchable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    patchable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cve"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SecurityCve> array = new List<SecurityCve>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SecurityCve.DeserializeSecurityCve(item));
                    }
                    cve = array;
                    continue;
                }
                if (property.NameEquals("publishedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publishedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("vendorReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VendorReference> array = new List<VendorReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VendorReference.DeserializeVendorReference(item));
                    }
                    vendorReferences = array;
                    continue;
                }
                if (property.NameEquals("repositoryName"u8))
                {
                    repositoryName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("imageDigest"u8))
                {
                    imageDigest = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assessedResourceType"u8))
                {
                    assessedResourceType = new AssessedResourceType(property.Value.GetString());
                    continue;
                }
            }
            return new ContainerRegistryVulnerabilityProperties(assessedResourceType, type.Value, Optional.ToDictionary(cvss), Optional.ToNullable(patchable), Optional.ToList(cve), Optional.ToNullable(publishedTime), Optional.ToList(vendorReferences), repositoryName.Value, imageDigest.Value);
        }
    }
}
