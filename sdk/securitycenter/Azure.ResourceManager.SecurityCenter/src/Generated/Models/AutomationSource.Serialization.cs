// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class AutomationSource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(EventSource))
            {
                writer.WritePropertyName("eventSource");
                writer.WriteStringValue(EventSource.Value.ToString());
            }
            if (Optional.IsCollectionDefined(RuleSets))
            {
                writer.WritePropertyName("ruleSets");
                writer.WriteStartArray();
                foreach (var item in RuleSets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AutomationSource DeserializeAutomationSource(JsonElement element)
        {
            Optional<EventSource> eventSource = default;
            Optional<IList<AutomationRuleSet>> ruleSets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("eventSource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    eventSource = new EventSource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ruleSets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AutomationRuleSet> array = new List<AutomationRuleSet>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AutomationRuleSet.DeserializeAutomationRuleSet(item));
                    }
                    ruleSets = array;
                    continue;
                }
            }
            return new AutomationSource(Optional.ToNullable(eventSource), Optional.ToList(ruleSets));
        }
    }
}
