// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary>
    /// Additional context fields for container registry Vulnerability assessment
    /// Serialized Name: ContainerRegistryVulnerabilityProperties
    /// </summary>
    public partial class ContainerRegistryVulnerabilityProperties : SecuritySubAssessmentAdditionalInfo
    {
        /// <summary> Initializes a new instance of <see cref="ContainerRegistryVulnerabilityProperties"/>. </summary>
        public ContainerRegistryVulnerabilityProperties()
        {
            Cvss = new ChangeTrackingDictionary<string, SecurityCvss>();
            Cve = new ChangeTrackingList<SecurityCve>();
            VendorReferences = new ChangeTrackingList<VendorReference>();
            AssessedResourceType = AssessedResourceType.ContainerRegistryVulnerability;
        }

        /// <summary> Initializes a new instance of <see cref="ContainerRegistryVulnerabilityProperties"/>. </summary>
        /// <param name="assessedResourceType">
        /// Sub-assessment resource type
        /// Serialized Name: AdditionalData.assessedResourceType
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="containerRegistryVulnerabilityPropertiesType">
        /// Vulnerability Type. e.g: Vulnerability, Potential Vulnerability, Information Gathered, Vulnerability
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.type
        /// </param>
        /// <param name="cvss">
        /// Dictionary from cvss version to cvss details object
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.cvss
        /// </param>
        /// <param name="isPatchable">
        /// Indicates whether a patch is available or not
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.patchable
        /// </param>
        /// <param name="cve">
        /// List of CVEs
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.cve
        /// </param>
        /// <param name="publishedOn">
        /// Published time
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.publishedTime
        /// </param>
        /// <param name="vendorReferences"> Serialized Name: ContainerRegistryVulnerabilityProperties.vendorReferences. </param>
        /// <param name="repositoryName">
        /// Name of the repository which the vulnerable image belongs to
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.repositoryName
        /// </param>
        /// <param name="imageDigest">
        /// Digest of the vulnerable image
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.imageDigest
        /// </param>
        internal ContainerRegistryVulnerabilityProperties(AssessedResourceType assessedResourceType, IDictionary<string, BinaryData> serializedAdditionalRawData, string containerRegistryVulnerabilityPropertiesType, IReadOnlyDictionary<string, SecurityCvss> cvss, bool? isPatchable, IReadOnlyList<SecurityCve> cve, DateTimeOffset? publishedOn, IReadOnlyList<VendorReference> vendorReferences, string repositoryName, string imageDigest) : base(assessedResourceType, serializedAdditionalRawData)
        {
            ContainerRegistryVulnerabilityPropertiesType = containerRegistryVulnerabilityPropertiesType;
            Cvss = cvss;
            IsPatchable = isPatchable;
            Cve = cve;
            PublishedOn = publishedOn;
            VendorReferences = vendorReferences;
            RepositoryName = repositoryName;
            ImageDigest = imageDigest;
            AssessedResourceType = assessedResourceType;
        }

        /// <summary>
        /// Vulnerability Type. e.g: Vulnerability, Potential Vulnerability, Information Gathered, Vulnerability
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.type
        /// </summary>
        public string ContainerRegistryVulnerabilityPropertiesType { get; }
        /// <summary>
        /// Dictionary from cvss version to cvss details object
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.cvss
        /// </summary>
        public IReadOnlyDictionary<string, SecurityCvss> Cvss { get; }
        /// <summary>
        /// Indicates whether a patch is available or not
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.patchable
        /// </summary>
        public bool? IsPatchable { get; }
        /// <summary>
        /// List of CVEs
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.cve
        /// </summary>
        public IReadOnlyList<SecurityCve> Cve { get; }
        /// <summary>
        /// Published time
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.publishedTime
        /// </summary>
        public DateTimeOffset? PublishedOn { get; }
        /// <summary> Serialized Name: ContainerRegistryVulnerabilityProperties.vendorReferences. </summary>
        public IReadOnlyList<VendorReference> VendorReferences { get; }
        /// <summary>
        /// Name of the repository which the vulnerable image belongs to
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.repositoryName
        /// </summary>
        public string RepositoryName { get; }
        /// <summary>
        /// Digest of the vulnerable image
        /// Serialized Name: ContainerRegistryVulnerabilityProperties.imageDigest
        /// </summary>
        public string ImageDigest { get; }
    }
}
