// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition. </summary>
    public readonly partial struct AssessmentType : IEquatable<AssessmentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BuiltInValue = "BuiltIn";
        private const string CustomPolicyValue = "CustomPolicy";
        private const string CustomerManagedValue = "CustomerManaged";
        private const string VerifiedPartnerValue = "VerifiedPartner";

        /// <summary> Microsoft Defender for Cloud managed assessments. </summary>
        public static AssessmentType BuiltIn { get; } = new AssessmentType(BuiltInValue);
        /// <summary> User defined policies that are automatically ingested from Azure Policy to Microsoft Defender for Cloud. </summary>
        public static AssessmentType CustomPolicy { get; } = new AssessmentType(CustomPolicyValue);
        /// <summary> User assessments pushed directly by the user or other third party to Microsoft Defender for Cloud. </summary>
        public static AssessmentType CustomerManaged { get; } = new AssessmentType(CustomerManagedValue);
        /// <summary> An assessment that was created by a verified 3rd party if the user connected it to ASC. </summary>
        public static AssessmentType VerifiedPartner { get; } = new AssessmentType(VerifiedPartnerValue);
        /// <summary> Determines if two <see cref="AssessmentType"/> values are the same. </summary>
        public static bool operator ==(AssessmentType left, AssessmentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentType"/> values are not the same. </summary>
        public static bool operator !=(AssessmentType left, AssessmentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AssessmentType"/>. </summary>
        public static implicit operator AssessmentType(string value) => new AssessmentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
