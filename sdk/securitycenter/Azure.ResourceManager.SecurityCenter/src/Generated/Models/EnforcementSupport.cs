// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> The machine supportability of Enforce feature. </summary>
    public readonly partial struct EnforcementSupport : IEquatable<EnforcementSupport>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EnforcementSupport"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnforcementSupport(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SupportedValue = "Supported";
        private const string NotSupportedValue = "NotSupported";
        private const string UnknownValue = "Unknown";

        /// <summary> Supported. </summary>
        public static EnforcementSupport Supported { get; } = new EnforcementSupport(SupportedValue);
        /// <summary> NotSupported. </summary>
        public static EnforcementSupport NotSupported { get; } = new EnforcementSupport(NotSupportedValue);
        /// <summary> Unknown. </summary>
        public static EnforcementSupport Unknown { get; } = new EnforcementSupport(UnknownValue);
        /// <summary> Determines if two <see cref="EnforcementSupport"/> values are the same. </summary>
        public static bool operator ==(EnforcementSupport left, EnforcementSupport right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnforcementSupport"/> values are not the same. </summary>
        public static bool operator !=(EnforcementSupport left, EnforcementSupport right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnforcementSupport"/>. </summary>
        public static implicit operator EnforcementSupport(string value) => new EnforcementSupport(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnforcementSupport other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnforcementSupport other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
