// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    public partial class SoftwareData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(DeviceId))
            {
                writer.WritePropertyName("deviceId");
                writer.WriteStringValue(DeviceId);
            }
            if (Optional.IsDefined(OSPlatform))
            {
                writer.WritePropertyName("osPlatform");
                writer.WriteStringValue(OSPlatform);
            }
            if (Optional.IsDefined(Vendor))
            {
                writer.WritePropertyName("vendor");
                writer.WriteStringValue(Vendor);
            }
            if (Optional.IsDefined(SoftwareName))
            {
                writer.WritePropertyName("softwareName");
                writer.WriteStringValue(SoftwareName);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(EndOfSupportStatus))
            {
                writer.WritePropertyName("endOfSupportStatus");
                writer.WriteStringValue(EndOfSupportStatus.Value.ToString());
            }
            if (Optional.IsDefined(EndOfSupportDate))
            {
                writer.WritePropertyName("endOfSupportDate");
                writer.WriteStringValue(EndOfSupportDate);
            }
            if (Optional.IsDefined(NumberOfKnownVulnerabilities))
            {
                writer.WritePropertyName("numberOfKnownVulnerabilities");
                writer.WriteNumberValue(NumberOfKnownVulnerabilities.Value);
            }
            if (Optional.IsDefined(FirstSeenAt))
            {
                writer.WritePropertyName("firstSeenAt");
                writer.WriteStringValue(FirstSeenAt);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SoftwareData DeserializeSoftwareData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> deviceId = default;
            Optional<string> osPlatform = default;
            Optional<string> vendor = default;
            Optional<string> softwareName = default;
            Optional<string> version = default;
            Optional<EndOfSupportStatus> endOfSupportStatus = default;
            Optional<string> endOfSupportDate = default;
            Optional<int> numberOfKnownVulnerabilities = default;
            Optional<string> firstSeenAt = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("deviceId"))
                        {
                            deviceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("osPlatform"))
                        {
                            osPlatform = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vendor"))
                        {
                            vendor = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("softwareName"))
                        {
                            softwareName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("version"))
                        {
                            version = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("endOfSupportStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            endOfSupportStatus = new EndOfSupportStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("endOfSupportDate"))
                        {
                            endOfSupportDate = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("numberOfKnownVulnerabilities"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            numberOfKnownVulnerabilities = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("firstSeenAt"))
                        {
                            firstSeenAt = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SoftwareData(id, name, type, systemData.Value, deviceId.Value, osPlatform.Value, vendor.Value, softwareName.Value, version.Value, Optional.ToNullable(endOfSupportStatus), endOfSupportDate.Value, Optional.ToNullable(numberOfKnownVulnerabilities), firstSeenAt.Value);
        }
    }
}
