// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class ScanResultProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RuleId))
            {
                writer.WritePropertyName("ruleId");
                writer.WriteStringValue(RuleId);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(IsTrimmed))
            {
                writer.WritePropertyName("isTrimmed");
                writer.WriteBooleanValue(IsTrimmed.Value);
            }
            if (Optional.IsCollectionDefined(QueryResults))
            {
                writer.WritePropertyName("queryResults");
                writer.WriteStartArray();
                foreach (var item in QueryResults)
                {
                    writer.WriteStartArray();
                    foreach (var item0 in item)
                    {
                        writer.WriteStringValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Remediation))
            {
                writer.WritePropertyName("remediation");
                writer.WriteObjectValue(Remediation);
            }
            if (Optional.IsDefined(BaselineAdjustedResult))
            {
                writer.WritePropertyName("baselineAdjustedResult");
                writer.WriteObjectValue(BaselineAdjustedResult);
            }
            if (Optional.IsDefined(RuleMetadata))
            {
                writer.WritePropertyName("ruleMetadata");
                writer.WriteObjectValue(RuleMetadata);
            }
            writer.WriteEndObject();
        }

        internal static ScanResultProperties DeserializeScanResultProperties(JsonElement element)
        {
            Optional<string> ruleId = default;
            Optional<RuleStatus> status = default;
            Optional<bool> isTrimmed = default;
            Optional<IList<IList<string>>> queryResults = default;
            Optional<Remediation> remediation = default;
            Optional<BaselineAdjustedResult> baselineAdjustedResult = default;
            Optional<VaRule> ruleMetadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ruleId"))
                {
                    ruleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new RuleStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isTrimmed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isTrimmed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("queryResults"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        List<string> array0 = new List<string>();
                        foreach (var item0 in item.EnumerateArray())
                        {
                            array0.Add(item0.GetString());
                        }
                        array.Add(array0);
                    }
                    queryResults = array;
                    continue;
                }
                if (property.NameEquals("remediation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    remediation = Remediation.DeserializeRemediation(property.Value);
                    continue;
                }
                if (property.NameEquals("baselineAdjustedResult"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    baselineAdjustedResult = BaselineAdjustedResult.DeserializeBaselineAdjustedResult(property.Value);
                    continue;
                }
                if (property.NameEquals("ruleMetadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ruleMetadata = VaRule.DeserializeVaRule(property.Value);
                    continue;
                }
            }
            return new ScanResultProperties(ruleId.Value, Optional.ToNullable(status), Optional.ToNullable(isTrimmed), Optional.ToList(queryResults), remediation.Value, baselineAdjustedResult.Value, ruleMetadata.Value);
        }
    }
}
