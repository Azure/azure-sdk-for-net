// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class HybridComputeSettingsProperties : IUtf8JsonSerializable, IModelJsonSerializable<HybridComputeSettingsProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<HybridComputeSettingsProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<HybridComputeSettingsProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HybridComputeSettingsProperties>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("autoProvision"u8);
            writer.WriteStringValue(AutoProvision.ToString());
            if (Optional.IsDefined(ResourceGroupName))
            {
                writer.WritePropertyName("resourceGroupName"u8);
                writer.WriteStringValue(ResourceGroupName);
            }
            if (Optional.IsDefined(Region))
            {
                writer.WritePropertyName("region"u8);
                writer.WriteStringValue(Region);
            }
            if (Optional.IsDefined(ProxyServer))
            {
                writer.WritePropertyName("proxyServer"u8);
                if (ProxyServer is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ProxyServerProperties>)ProxyServer).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(ServicePrincipal))
            {
                writer.WritePropertyName("servicePrincipal"u8);
                if (ServicePrincipal is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ServicePrincipalProperties>)ServicePrincipal).Serialize(writer, options);
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static HybridComputeSettingsProperties DeserializeHybridComputeSettingsProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<HybridComputeProvisioningState> hybridComputeProvisioningState = default;
            AutoProvisionState autoProvision = default;
            Optional<string> resourceGroupName = default;
            Optional<string> region = default;
            Optional<ProxyServerProperties> proxyServer = default;
            Optional<ServicePrincipalProperties> servicePrincipal = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hybridComputeProvisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hybridComputeProvisioningState = new HybridComputeProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("autoProvision"u8))
                {
                    autoProvision = new AutoProvisionState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceGroupName"u8))
                {
                    resourceGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("region"u8))
                {
                    region = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("proxyServer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    proxyServer = ProxyServerProperties.DeserializeProxyServerProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("servicePrincipal"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    servicePrincipal = ServicePrincipalProperties.DeserializeServicePrincipalProperties(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new HybridComputeSettingsProperties(Optional.ToNullable(hybridComputeProvisioningState), autoProvision, resourceGroupName.Value, region.Value, proxyServer.Value, servicePrincipal.Value, rawData);
        }

        HybridComputeSettingsProperties IModelJsonSerializable<HybridComputeSettingsProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HybridComputeSettingsProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeHybridComputeSettingsProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<HybridComputeSettingsProperties>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HybridComputeSettingsProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        HybridComputeSettingsProperties IModelSerializable<HybridComputeSettingsProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HybridComputeSettingsProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeHybridComputeSettingsProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="HybridComputeSettingsProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="HybridComputeSettingsProperties"/> to convert. </param>
        public static implicit operator RequestContent(HybridComputeSettingsProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="HybridComputeSettingsProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator HybridComputeSettingsProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeHybridComputeSettingsProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
