// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class GcpCredentialsDetailsProperties : IUtf8JsonSerializable, IJsonModel<GcpCredentialsDetailsProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<GcpCredentialsDetailsProperties>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<GcpCredentialsDetailsProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<GcpCredentialsDetailsProperties>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<GcpCredentialsDetailsProperties>)} interface");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("organizationId"u8);
            writer.WriteStringValue(OrganizationId);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(GcpCredentialType);
            writer.WritePropertyName("projectId"u8);
            writer.WriteStringValue(ProjectId);
            writer.WritePropertyName("privateKeyId"u8);
            writer.WriteStringValue(PrivateKeyId);
            writer.WritePropertyName("privateKey"u8);
            writer.WriteStringValue(PrivateKey);
            writer.WritePropertyName("clientEmail"u8);
            writer.WriteStringValue(ClientEmail);
            writer.WritePropertyName("clientId"u8);
            writer.WriteStringValue(ClientId);
            writer.WritePropertyName("authUri"u8);
            writer.WriteStringValue(AuthUri.AbsoluteUri);
            writer.WritePropertyName("tokenUri"u8);
            writer.WriteStringValue(TokenUri.AbsoluteUri);
            writer.WritePropertyName("authProviderX509CertUrl"u8);
            writer.WriteStringValue(AuthProviderX509CertUri.AbsoluteUri);
            writer.WritePropertyName("clientX509CertUrl"u8);
            writer.WriteStringValue(ClientX509CertUri.AbsoluteUri);
            if (options.Format == "J")
            {
                if (Optional.IsDefined(AuthenticationProvisioningState))
                {
                    writer.WritePropertyName("authenticationProvisioningState"u8);
                    writer.WriteStringValue(AuthenticationProvisioningState.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsCollectionDefined(GrantedPermissions))
                {
                    writer.WritePropertyName("grantedPermissions"u8);
                    writer.WriteStartArray();
                    foreach (var item in GrantedPermissions)
                    {
                        writer.WriteStringValue(item.ToString());
                    }
                    writer.WriteEndArray();
                }
            }
            writer.WritePropertyName("authenticationType"u8);
            writer.WriteStringValue(AuthenticationType.ToString());
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        GcpCredentialsDetailsProperties IJsonModel<GcpCredentialsDetailsProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(GcpCredentialsDetailsProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeGcpCredentialsDetailsProperties(document.RootElement, options);
        }

        internal static GcpCredentialsDetailsProperties DeserializeGcpCredentialsDetailsProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string organizationId = default;
            string type = default;
            string projectId = default;
            string privateKeyId = default;
            string privateKey = default;
            string clientEmail = default;
            string clientId = default;
            Uri authUri = default;
            Uri tokenUri = default;
            Uri authProviderX509CertUrl = default;
            Uri clientX509CertUrl = default;
            Optional<AuthenticationProvisioningState> authenticationProvisioningState = default;
            Optional<IReadOnlyList<SecurityCenterCloudPermission>> grantedPermissions = default;
            AuthenticationType authenticationType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("organizationId"u8))
                {
                    organizationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("projectId"u8))
                {
                    projectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateKeyId"u8))
                {
                    privateKeyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateKey"u8))
                {
                    privateKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientEmail"u8))
                {
                    clientEmail = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientId"u8))
                {
                    clientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authUri"u8))
                {
                    authUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tokenUri"u8))
                {
                    tokenUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("authProviderX509CertUrl"u8))
                {
                    authProviderX509CertUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("clientX509CertUrl"u8))
                {
                    clientX509CertUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("authenticationProvisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authenticationProvisioningState = new AuthenticationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("grantedPermissions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SecurityCenterCloudPermission> array = new List<SecurityCenterCloudPermission>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SecurityCenterCloudPermission(item.GetString()));
                    }
                    grantedPermissions = array;
                    continue;
                }
                if (property.NameEquals("authenticationType"u8))
                {
                    authenticationType = new AuthenticationType(property.Value.GetString());
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new GcpCredentialsDetailsProperties(Optional.ToNullable(authenticationProvisioningState), Optional.ToList(grantedPermissions), authenticationType, serializedAdditionalRawData, organizationId, type, projectId, privateKeyId, privateKey, clientEmail, clientId, authUri, tokenUri, authProviderX509CertUrl, clientX509CertUrl);
        }

        BinaryData IPersistableModel<GcpCredentialsDetailsProperties>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(GcpCredentialsDetailsProperties)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        GcpCredentialsDetailsProperties IPersistableModel<GcpCredentialsDetailsProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(GcpCredentialsDetailsProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeGcpCredentialsDetailsProperties(document.RootElement, options);
        }

        string IPersistableModel<GcpCredentialsDetailsProperties>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
