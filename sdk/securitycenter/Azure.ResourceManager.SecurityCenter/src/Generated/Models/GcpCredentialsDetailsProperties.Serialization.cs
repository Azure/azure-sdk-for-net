// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class GcpCredentialsDetailsProperties : IUtf8JsonSerializable, IModelJsonSerializable<GcpCredentialsDetailsProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<GcpCredentialsDetailsProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<GcpCredentialsDetailsProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<GcpCredentialsDetailsProperties>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("organizationId"u8);
            writer.WriteStringValue(OrganizationId);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(GcpCredentialType);
            writer.WritePropertyName("projectId"u8);
            writer.WriteStringValue(ProjectId);
            writer.WritePropertyName("privateKeyId"u8);
            writer.WriteStringValue(PrivateKeyId);
            writer.WritePropertyName("privateKey"u8);
            writer.WriteStringValue(PrivateKey);
            writer.WritePropertyName("clientEmail"u8);
            writer.WriteStringValue(ClientEmail);
            writer.WritePropertyName("clientId"u8);
            writer.WriteStringValue(ClientId);
            writer.WritePropertyName("authUri"u8);
            writer.WriteStringValue(AuthUri.AbsoluteUri);
            writer.WritePropertyName("tokenUri"u8);
            writer.WriteStringValue(TokenUri.AbsoluteUri);
            writer.WritePropertyName("authProviderX509CertUrl"u8);
            writer.WriteStringValue(AuthProviderX509CertUri.AbsoluteUri);
            writer.WritePropertyName("clientX509CertUrl"u8);
            writer.WriteStringValue(ClientX509CertUri.AbsoluteUri);
            writer.WritePropertyName("authenticationType"u8);
            writer.WriteStringValue(AuthenticationType.ToString());
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static GcpCredentialsDetailsProperties DeserializeGcpCredentialsDetailsProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string organizationId = default;
            string type = default;
            string projectId = default;
            string privateKeyId = default;
            string privateKey = default;
            string clientEmail = default;
            string clientId = default;
            Uri authUri = default;
            Uri tokenUri = default;
            Uri authProviderX509CertUrl = default;
            Uri clientX509CertUrl = default;
            Optional<AuthenticationProvisioningState> authenticationProvisioningState = default;
            Optional<IReadOnlyList<SecurityCenterCloudPermission>> grantedPermissions = default;
            AuthenticationType authenticationType = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("organizationId"u8))
                {
                    organizationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("projectId"u8))
                {
                    projectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateKeyId"u8))
                {
                    privateKeyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateKey"u8))
                {
                    privateKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientEmail"u8))
                {
                    clientEmail = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientId"u8))
                {
                    clientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authUri"u8))
                {
                    authUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tokenUri"u8))
                {
                    tokenUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("authProviderX509CertUrl"u8))
                {
                    authProviderX509CertUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("clientX509CertUrl"u8))
                {
                    clientX509CertUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("authenticationProvisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authenticationProvisioningState = new AuthenticationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("grantedPermissions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SecurityCenterCloudPermission> array = new List<SecurityCenterCloudPermission>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SecurityCenterCloudPermission(item.GetString()));
                    }
                    grantedPermissions = array;
                    continue;
                }
                if (property.NameEquals("authenticationType"u8))
                {
                    authenticationType = new AuthenticationType(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new GcpCredentialsDetailsProperties(Optional.ToNullable(authenticationProvisioningState), Optional.ToList(grantedPermissions), authenticationType, organizationId, type, projectId, privateKeyId, privateKey, clientEmail, clientId, authUri, tokenUri, authProviderX509CertUrl, clientX509CertUrl, rawData);
        }

        GcpCredentialsDetailsProperties IModelJsonSerializable<GcpCredentialsDetailsProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<GcpCredentialsDetailsProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeGcpCredentialsDetailsProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<GcpCredentialsDetailsProperties>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<GcpCredentialsDetailsProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        GcpCredentialsDetailsProperties IModelSerializable<GcpCredentialsDetailsProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<GcpCredentialsDetailsProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeGcpCredentialsDetailsProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="GcpCredentialsDetailsProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="GcpCredentialsDetailsProperties"/> to convert. </param>
        public static implicit operator RequestContent(GcpCredentialsDetailsProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="GcpCredentialsDetailsProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator GcpCredentialsDetailsProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeGcpCredentialsDetailsProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
