// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class GcpCredentialsDetailsProperties : IUtf8JsonSerializable, IJsonModel<GcpCredentialsDetailsProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<GcpCredentialsDetailsProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<GcpCredentialsDetailsProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GcpCredentialsDetailsProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(GcpCredentialsDetailsProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("organizationId"u8);
            writer.WriteStringValue(OrganizationId);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(GcpCredentialType);
            writer.WritePropertyName("projectId"u8);
            writer.WriteStringValue(ProjectId);
            writer.WritePropertyName("privateKeyId"u8);
            writer.WriteStringValue(PrivateKeyId);
            writer.WritePropertyName("privateKey"u8);
            writer.WriteStringValue(PrivateKey);
            writer.WritePropertyName("clientEmail"u8);
            writer.WriteStringValue(ClientEmail);
            writer.WritePropertyName("clientId"u8);
            writer.WriteStringValue(ClientId);
            writer.WritePropertyName("authUri"u8);
            writer.WriteStringValue(AuthUri.AbsoluteUri);
            writer.WritePropertyName("tokenUri"u8);
            writer.WriteStringValue(TokenUri.AbsoluteUri);
            writer.WritePropertyName("authProviderX509CertUrl"u8);
            writer.WriteStringValue(AuthProviderX509CertUri.AbsoluteUri);
            writer.WritePropertyName("clientX509CertUrl"u8);
            writer.WriteStringValue(ClientX509CertUri.AbsoluteUri);
            if (options.Format != "W" && Optional.IsDefined(AuthenticationProvisioningState))
            {
                writer.WritePropertyName("authenticationProvisioningState"u8);
                writer.WriteStringValue(AuthenticationProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(GrantedPermissions))
            {
                writer.WritePropertyName("grantedPermissions"u8);
                writer.WriteStartArray();
                foreach (var item in GrantedPermissions)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("authenticationType"u8);
            writer.WriteStringValue(AuthenticationType.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        GcpCredentialsDetailsProperties IJsonModel<GcpCredentialsDetailsProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GcpCredentialsDetailsProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(GcpCredentialsDetailsProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeGcpCredentialsDetailsProperties(document.RootElement, options);
        }

        internal static GcpCredentialsDetailsProperties DeserializeGcpCredentialsDetailsProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string organizationId = default;
            string type = default;
            string projectId = default;
            string privateKeyId = default;
            string privateKey = default;
            string clientEmail = default;
            string clientId = default;
            Uri authUri = default;
            Uri tokenUri = default;
            Uri authProviderX509CertUrl = default;
            Uri clientX509CertUrl = default;
            Optional<AuthenticationProvisioningState> authenticationProvisioningState = default;
            Optional<IReadOnlyList<SecurityCenterCloudPermission>> grantedPermissions = default;
            AuthenticationType authenticationType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("organizationId"u8))
                {
                    organizationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("projectId"u8))
                {
                    projectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateKeyId"u8))
                {
                    privateKeyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateKey"u8))
                {
                    privateKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientEmail"u8))
                {
                    clientEmail = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientId"u8))
                {
                    clientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authUri"u8))
                {
                    authUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tokenUri"u8))
                {
                    tokenUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("authProviderX509CertUrl"u8))
                {
                    authProviderX509CertUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("clientX509CertUrl"u8))
                {
                    clientX509CertUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("authenticationProvisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authenticationProvisioningState = new AuthenticationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("grantedPermissions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SecurityCenterCloudPermission> array = new List<SecurityCenterCloudPermission>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SecurityCenterCloudPermission(item.GetString()));
                    }
                    grantedPermissions = array;
                    continue;
                }
                if (property.NameEquals("authenticationType"u8))
                {
                    authenticationType = new AuthenticationType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new GcpCredentialsDetailsProperties(Optional.ToNullable(authenticationProvisioningState), Optional.ToList(grantedPermissions), authenticationType, serializedAdditionalRawData, organizationId, type, projectId, privateKeyId, privateKey, clientEmail, clientId, authUri, tokenUri, authProviderX509CertUrl, clientX509CertUrl);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(OrganizationId))
            {
                builder.Append("  organizationId:");
                if (OrganizationId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{OrganizationId}'''");
                }
                else
                {
                    builder.AppendLine($" '{OrganizationId}'");
                }
            }

            if (Optional.IsDefined(ProjectId))
            {
                builder.Append("  projectId:");
                if (ProjectId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ProjectId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ProjectId}'");
                }
            }

            if (Optional.IsDefined(PrivateKeyId))
            {
                builder.Append("  privateKeyId:");
                if (PrivateKeyId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PrivateKeyId}'''");
                }
                else
                {
                    builder.AppendLine($" '{PrivateKeyId}'");
                }
            }

            if (Optional.IsDefined(PrivateKey))
            {
                builder.Append("  privateKey:");
                if (PrivateKey.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PrivateKey}'''");
                }
                else
                {
                    builder.AppendLine($" '{PrivateKey}'");
                }
            }

            if (Optional.IsDefined(ClientEmail))
            {
                builder.Append("  clientEmail:");
                if (ClientEmail.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ClientEmail}'''");
                }
                else
                {
                    builder.AppendLine($" '{ClientEmail}'");
                }
            }

            if (Optional.IsDefined(ClientId))
            {
                builder.Append("  clientId:");
                if (ClientId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ClientId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ClientId}'");
                }
            }

            if (Optional.IsDefined(AuthUri))
            {
                builder.Append("  authUri:");
                builder.AppendLine($" '{AuthUri.AbsoluteUri}'");
            }

            if (Optional.IsDefined(TokenUri))
            {
                builder.Append("  tokenUri:");
                builder.AppendLine($" '{TokenUri.AbsoluteUri}'");
            }

            if (Optional.IsDefined(AuthProviderX509CertUri))
            {
                builder.Append("  authProviderX509CertUrl:");
                builder.AppendLine($" '{AuthProviderX509CertUri.AbsoluteUri}'");
            }

            if (Optional.IsDefined(ClientX509CertUri))
            {
                builder.Append("  clientX509CertUrl:");
                builder.AppendLine($" '{ClientX509CertUri.AbsoluteUri}'");
            }

            if (Optional.IsDefined(AuthenticationProvisioningState))
            {
                builder.Append("  authenticationProvisioningState:");
                builder.AppendLine($" '{AuthenticationProvisioningState.Value.ToString()}'");
            }

            if (Optional.IsCollectionDefined(GrantedPermissions))
            {
                if (GrantedPermissions.Any())
                {
                    builder.Append("  grantedPermissions:");
                    builder.AppendLine(" [");
                    foreach (var item in GrantedPermissions)
                    {
                        builder.AppendLine($"    '{item.ToString()}'");
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(AuthenticationType))
            {
                builder.Append("  authenticationType:");
                builder.AppendLine($" '{AuthenticationType.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<GcpCredentialsDetailsProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GcpCredentialsDetailsProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(GcpCredentialsDetailsProperties)} does not support '{options.Format}' format.");
            }
        }

        GcpCredentialsDetailsProperties IPersistableModel<GcpCredentialsDetailsProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GcpCredentialsDetailsProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeGcpCredentialsDetailsProperties(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(GcpCredentialsDetailsProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<GcpCredentialsDetailsProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
