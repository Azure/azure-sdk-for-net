// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    public partial class ProtectionMode : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Exe))
            {
                writer.WritePropertyName("exe");
                writer.WriteStringValue(Exe.Value.ToString());
            }
            if (Optional.IsDefined(Msi))
            {
                writer.WritePropertyName("msi");
                writer.WriteStringValue(Msi.Value.ToString());
            }
            if (Optional.IsDefined(Script))
            {
                writer.WritePropertyName("script");
                writer.WriteStringValue(Script.Value.ToString());
            }
            if (Optional.IsDefined(Executable))
            {
                writer.WritePropertyName("executable");
                writer.WriteStringValue(Executable.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static ProtectionMode DeserializeProtectionMode(JsonElement element)
        {
            Optional<EnforcementMode> exe = default;
            Optional<EnforcementMode> msi = default;
            Optional<EnforcementMode> script = default;
            Optional<EnforcementMode> executable = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("exe"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    exe = new EnforcementMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("msi"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    msi = new EnforcementMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("script"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    script = new EnforcementMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("executable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    executable = new EnforcementMode(property.Value.GetString());
                    continue;
                }
            }
            return new ProtectionMode(Optional.ToNullable(exe), Optional.ToNullable(msi), Optional.ToNullable(script), Optional.ToNullable(executable));
        }
    }
}
