// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    public partial class AdaptiveApplicationControlGroupData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(EnforcementMode))
            {
                writer.WritePropertyName("enforcementMode"u8);
                writer.WriteStringValue(EnforcementMode.Value.ToString());
            }
            if (Core.Optional.IsDefined(ProtectionMode))
            {
                writer.WritePropertyName("protectionMode"u8);
                writer.WriteObjectValue(ProtectionMode);
            }
            if (Core.Optional.IsCollectionDefined(VmRecommendations))
            {
                writer.WritePropertyName("vmRecommendations"u8);
                writer.WriteStartArray();
                foreach (var item in VmRecommendations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(PathRecommendations))
            {
                writer.WritePropertyName("pathRecommendations"u8);
                writer.WriteStartArray();
                foreach (var item in PathRecommendations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static AdaptiveApplicationControlGroupData DeserializeAdaptiveApplicationControlGroupData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<AzureLocation> location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<AdaptiveApplicationControlEnforcementMode> enforcementMode = default;
            Core.Optional<SecurityCenterFileProtectionMode> protectionMode = default;
            Core.Optional<SecurityCenterConfigurationStatus> configurationStatus = default;
            Core.Optional<RecommendationStatus> recommendationStatus = default;
            Core.Optional<IReadOnlyList<AdaptiveApplicationControlIssueSummary>> issues = default;
            Core.Optional<AdaptiveApplicationControlGroupSourceSystem> sourceSystem = default;
            Core.Optional<IList<VmRecommendation>> vmRecommendations = default;
            Core.Optional<IList<PathRecommendation>> pathRecommendations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("enforcementMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enforcementMode = new AdaptiveApplicationControlEnforcementMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("protectionMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            protectionMode = SecurityCenterFileProtectionMode.DeserializeSecurityCenterFileProtectionMode(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("configurationStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            configurationStatus = new SecurityCenterConfigurationStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("recommendationStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendationStatus = new RecommendationStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("issues"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AdaptiveApplicationControlIssueSummary> array = new List<AdaptiveApplicationControlIssueSummary>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AdaptiveApplicationControlIssueSummary.DeserializeAdaptiveApplicationControlIssueSummary(item));
                            }
                            issues = array;
                            continue;
                        }
                        if (property0.NameEquals("sourceSystem"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sourceSystem = new AdaptiveApplicationControlGroupSourceSystem(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("vmRecommendations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<VmRecommendation> array = new List<VmRecommendation>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VmRecommendation.DeserializeVmRecommendation(item));
                            }
                            vmRecommendations = array;
                            continue;
                        }
                        if (property0.NameEquals("pathRecommendations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<PathRecommendation> array = new List<PathRecommendation>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(PathRecommendation.DeserializePathRecommendation(item));
                            }
                            pathRecommendations = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new AdaptiveApplicationControlGroupData(id, name, type, systemData.Value, Core.Optional.ToNullable(enforcementMode), protectionMode.Value, Core.Optional.ToNullable(configurationStatus), Core.Optional.ToNullable(recommendationStatus), Core.Optional.ToList(issues), Core.Optional.ToNullable(sourceSystem), Core.Optional.ToList(vmRecommendations), Core.Optional.ToList(pathRecommendations), Core.Optional.ToNullable(location));
        }
    }
}
