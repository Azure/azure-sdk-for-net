// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="SoftwareResource" /> and their operations.
    /// Each <see cref="SoftwareResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="SoftwareCollection" /> instance call the GetSoftwares method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class SoftwareCollection : ArmCollection, IEnumerable<SoftwareResource>, IAsyncEnumerable<SoftwareResource>
    {
        private readonly ClientDiagnostics _softwareSoftwareInventoriesClientDiagnostics;
        private readonly SoftwareInventoriesRestOperations _softwareSoftwareInventoriesRestClient;
        private readonly string _resourceNamespace;
        private readonly string _resourceType;
        private readonly string _resourceName;

        /// <summary> Initializes a new instance of the <see cref="SoftwareCollection"/> class for mocking. </summary>
        protected SoftwareCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SoftwareCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="resourceNamespace"> The namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal SoftwareCollection(ArmClient client, ResourceIdentifier id, string resourceNamespace, string resourceType, string resourceName) : base(client, id)
        {
            _resourceNamespace = resourceNamespace;
            _resourceType = resourceType;
            _resourceName = resourceName;
            _softwareSoftwareInventoriesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SoftwareResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SoftwareResource.ResourceType, out string softwareSoftwareInventoriesApiVersion);
            _softwareSoftwareInventoriesRestClient = new SoftwareInventoriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, softwareSoftwareInventoriesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a single software data of the virtual machine.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/softwareInventories/{softwareName}
        /// Operation Id: SoftwareInventories_Get
        /// </summary>
        /// <param name="softwareName"> Name of the installed software. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="softwareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="softwareName"/> is null. </exception>
        public virtual async Task<Response<SoftwareResource>> GetAsync(string softwareName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(softwareName, nameof(softwareName));

            using var scope = _softwareSoftwareInventoriesClientDiagnostics.CreateScope("SoftwareCollection.Get");
            scope.Start();
            try
            {
                var response = await _softwareSoftwareInventoriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _resourceNamespace, _resourceType, _resourceName, softwareName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SoftwareResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a single software data of the virtual machine.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/softwareInventories/{softwareName}
        /// Operation Id: SoftwareInventories_Get
        /// </summary>
        /// <param name="softwareName"> Name of the installed software. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="softwareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="softwareName"/> is null. </exception>
        public virtual Response<SoftwareResource> Get(string softwareName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(softwareName, nameof(softwareName));

            using var scope = _softwareSoftwareInventoriesClientDiagnostics.CreateScope("SoftwareCollection.Get");
            scope.Start();
            try
            {
                var response = _softwareSoftwareInventoriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _resourceNamespace, _resourceType, _resourceName, softwareName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SoftwareResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the software inventory of the virtual machine.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/softwareInventories
        /// Operation Id: SoftwareInventories_ListByExtendedResource
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SoftwareResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SoftwareResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SoftwareResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _softwareSoftwareInventoriesClientDiagnostics.CreateScope("SoftwareCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _softwareSoftwareInventoriesRestClient.ListByExtendedResourceAsync(Id.SubscriptionId, Id.ResourceGroupName, _resourceNamespace, _resourceType, _resourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SoftwareResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _softwareSoftwareInventoriesClientDiagnostics.CreateScope("SoftwareCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _softwareSoftwareInventoriesRestClient.ListByExtendedResourceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _resourceNamespace, _resourceType, _resourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the software inventory of the virtual machine.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/softwareInventories
        /// Operation Id: SoftwareInventories_ListByExtendedResource
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SoftwareResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SoftwareResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<SoftwareResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _softwareSoftwareInventoriesClientDiagnostics.CreateScope("SoftwareCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _softwareSoftwareInventoriesRestClient.ListByExtendedResource(Id.SubscriptionId, Id.ResourceGroupName, _resourceNamespace, _resourceType, _resourceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SoftwareResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _softwareSoftwareInventoriesClientDiagnostics.CreateScope("SoftwareCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _softwareSoftwareInventoriesRestClient.ListByExtendedResourceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _resourceNamespace, _resourceType, _resourceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/softwareInventories/{softwareName}
        /// Operation Id: SoftwareInventories_Get
        /// </summary>
        /// <param name="softwareName"> Name of the installed software. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="softwareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="softwareName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string softwareName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(softwareName, nameof(softwareName));

            using var scope = _softwareSoftwareInventoriesClientDiagnostics.CreateScope("SoftwareCollection.Exists");
            scope.Start();
            try
            {
                var response = await _softwareSoftwareInventoriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _resourceNamespace, _resourceType, _resourceName, softwareName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/softwareInventories/{softwareName}
        /// Operation Id: SoftwareInventories_Get
        /// </summary>
        /// <param name="softwareName"> Name of the installed software. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="softwareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="softwareName"/> is null. </exception>
        public virtual Response<bool> Exists(string softwareName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(softwareName, nameof(softwareName));

            using var scope = _softwareSoftwareInventoriesClientDiagnostics.CreateScope("SoftwareCollection.Exists");
            scope.Start();
            try
            {
                var response = _softwareSoftwareInventoriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _resourceNamespace, _resourceType, _resourceName, softwareName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SoftwareResource> IEnumerable<SoftwareResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SoftwareResource> IAsyncEnumerable<SoftwareResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
