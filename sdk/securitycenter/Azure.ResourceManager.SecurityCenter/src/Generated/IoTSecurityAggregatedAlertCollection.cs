// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="IoTSecurityAggregatedAlertResource" /> and their operations.
    /// Each <see cref="IoTSecurityAggregatedAlertResource" /> in the collection will belong to the same instance of <see cref="IoTSecuritySolutionAnalyticsModelResource" />.
    /// To get an <see cref="IoTSecurityAggregatedAlertCollection" /> instance call the GetIoTSecurityAggregatedAlerts method from an instance of <see cref="IoTSecuritySolutionAnalyticsModelResource" />.
    /// </summary>
    public partial class IoTSecurityAggregatedAlertCollection : ArmCollection, IEnumerable<IoTSecurityAggregatedAlertResource>, IAsyncEnumerable<IoTSecurityAggregatedAlertResource>
    {
        private readonly ClientDiagnostics _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics;
        private readonly IotSecuritySolutionsAnalyticsAggregatedAlertRestOperations _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient;

        /// <summary> Initializes a new instance of the <see cref="IoTSecurityAggregatedAlertCollection"/> class for mocking. </summary>
        protected IoTSecurityAggregatedAlertCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="IoTSecurityAggregatedAlertCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal IoTSecurityAggregatedAlertCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", IoTSecurityAggregatedAlertResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(IoTSecurityAggregatedAlertResource.ResourceType, out string ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertApiVersion);
            _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient = new IotSecuritySolutionsAnalyticsAggregatedAlertRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != IoTSecuritySolutionAnalyticsModelResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, IoTSecuritySolutionAnalyticsModelResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Use this method to get a single the aggregated alert of yours IoT Security solution. This aggregation is performed by alert name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}
        /// Operation Id: IotSecuritySolutionsAnalyticsAggregatedAlert_Get
        /// </summary>
        /// <param name="aggregatedAlertName"> Identifier of the aggregated alert. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="aggregatedAlertName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="aggregatedAlertName"/> is null. </exception>
        public virtual async Task<Response<IoTSecurityAggregatedAlertResource>> GetAsync(string aggregatedAlertName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(aggregatedAlertName, nameof(aggregatedAlertName));

            using var scope = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics.CreateScope("IoTSecurityAggregatedAlertCollection.Get");
            scope.Start();
            try
            {
                var response = await _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, aggregatedAlertName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new IoTSecurityAggregatedAlertResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Use this method to get a single the aggregated alert of yours IoT Security solution. This aggregation is performed by alert name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}
        /// Operation Id: IotSecuritySolutionsAnalyticsAggregatedAlert_Get
        /// </summary>
        /// <param name="aggregatedAlertName"> Identifier of the aggregated alert. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="aggregatedAlertName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="aggregatedAlertName"/> is null. </exception>
        public virtual Response<IoTSecurityAggregatedAlertResource> Get(string aggregatedAlertName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(aggregatedAlertName, nameof(aggregatedAlertName));

            using var scope = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics.CreateScope("IoTSecurityAggregatedAlertCollection.Get");
            scope.Start();
            try
            {
                var response = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, aggregatedAlertName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new IoTSecurityAggregatedAlertResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Use this method to get the aggregated alert list of yours IoT Security solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts
        /// Operation Id: IotSecuritySolutionsAnalyticsAggregatedAlert_List
        /// </summary>
        /// <param name="top"> Number of results to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IoTSecurityAggregatedAlertResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IoTSecurityAggregatedAlertResource> GetAllAsync(int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<IoTSecurityAggregatedAlertResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics.CreateScope("IoTSecurityAggregatedAlertCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IoTSecurityAggregatedAlertResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IoTSecurityAggregatedAlertResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics.CreateScope("IoTSecurityAggregatedAlertCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IoTSecurityAggregatedAlertResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Use this method to get the aggregated alert list of yours IoT Security solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts
        /// Operation Id: IotSecuritySolutionsAnalyticsAggregatedAlert_List
        /// </summary>
        /// <param name="top"> Number of results to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IoTSecurityAggregatedAlertResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IoTSecurityAggregatedAlertResource> GetAll(int? top = null, CancellationToken cancellationToken = default)
        {
            Page<IoTSecurityAggregatedAlertResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics.CreateScope("IoTSecurityAggregatedAlertCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IoTSecurityAggregatedAlertResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IoTSecurityAggregatedAlertResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics.CreateScope("IoTSecurityAggregatedAlertCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IoTSecurityAggregatedAlertResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}
        /// Operation Id: IotSecuritySolutionsAnalyticsAggregatedAlert_Get
        /// </summary>
        /// <param name="aggregatedAlertName"> Identifier of the aggregated alert. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="aggregatedAlertName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="aggregatedAlertName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string aggregatedAlertName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(aggregatedAlertName, nameof(aggregatedAlertName));

            using var scope = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics.CreateScope("IoTSecurityAggregatedAlertCollection.Exists");
            scope.Start();
            try
            {
                var response = await _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, aggregatedAlertName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}
        /// Operation Id: IotSecuritySolutionsAnalyticsAggregatedAlert_Get
        /// </summary>
        /// <param name="aggregatedAlertName"> Identifier of the aggregated alert. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="aggregatedAlertName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="aggregatedAlertName"/> is null. </exception>
        public virtual Response<bool> Exists(string aggregatedAlertName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(aggregatedAlertName, nameof(aggregatedAlertName));

            using var scope = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertClientDiagnostics.CreateScope("IoTSecurityAggregatedAlertCollection.Exists");
            scope.Start();
            try
            {
                var response = _ioTSecurityAggregatedAlertIotSecuritySolutionsAnalyticsAggregatedAlertRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, aggregatedAlertName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<IoTSecurityAggregatedAlertResource> IEnumerable<IoTSecurityAggregatedAlertResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<IoTSecurityAggregatedAlertResource> IAsyncEnumerable<IoTSecurityAggregatedAlertResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
