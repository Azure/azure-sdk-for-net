// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IngestionSettingsOperations.
    /// </summary>
    public static partial class IngestionSettingsOperationsExtensions
    {
            /// <summary>
            /// Settings for ingesting security data and logs to correlate with resources
            /// associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<IngestionSetting> List(this IIngestionSettingsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Settings for ingesting security data and logs to correlate with resources
            /// associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IngestionSetting>> ListAsync(this IIngestionSettingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Settings for ingesting security data and logs to correlate with resources
            /// associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            public static IngestionSetting Get(this IIngestionSettingsOperations operations, string ingestionSettingName)
            {
                return operations.GetAsync(ingestionSettingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Settings for ingesting security data and logs to correlate with resources
            /// associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IngestionSetting> GetAsync(this IIngestionSettingsOperations operations, string ingestionSettingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(ingestionSettingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create setting for ingesting security data and logs to correlate with
            /// resources associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            /// <param name='properties'>
            /// Ingestion setting data
            /// </param>
            public static IngestionSetting Create(this IIngestionSettingsOperations operations, string ingestionSettingName, object properties = default(object))
            {
                return operations.CreateAsync(ingestionSettingName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create setting for ingesting security data and logs to correlate with
            /// resources associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            /// <param name='properties'>
            /// Ingestion setting data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IngestionSetting> CreateAsync(this IIngestionSettingsOperations operations, string ingestionSettingName, object properties = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(ingestionSettingName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the ingestion settings for this subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            public static void Delete(this IIngestionSettingsOperations operations, string ingestionSettingName)
            {
                operations.DeleteAsync(ingestionSettingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the ingestion settings for this subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IIngestionSettingsOperations operations, string ingestionSettingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(ingestionSettingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the token that is used for correlating ingested telemetry with the
            /// resources in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            public static IngestionSettingToken ListTokens(this IIngestionSettingsOperations operations, string ingestionSettingName)
            {
                return operations.ListTokensAsync(ingestionSettingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the token that is used for correlating ingested telemetry with the
            /// resources in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IngestionSettingToken> ListTokensAsync(this IIngestionSettingsOperations operations, string ingestionSettingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTokensWithHttpMessagesAsync(ingestionSettingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Connection strings for ingesting security scan logs and data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            public static ConnectionStrings ListConnectionStrings(this IIngestionSettingsOperations operations, string ingestionSettingName)
            {
                return operations.ListConnectionStringsAsync(ingestionSettingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Connection strings for ingesting security scan logs and data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ingestionSettingName'>
            /// Name of the ingestion setting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStrings> ListConnectionStringsAsync(this IIngestionSettingsOperations operations, string ingestionSettingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsWithHttpMessagesAsync(ingestionSettingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Settings for ingesting security data and logs to correlate with resources
            /// associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IngestionSetting> ListNext(this IIngestionSettingsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Settings for ingesting security data and logs to correlate with resources
            /// associated with the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IngestionSetting>> ListNextAsync(this IIngestionSettingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
