// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// GovernanceRulesOperations operations.
    /// </summary>
    public partial interface IGovernanceRulesOperations
    {
        /// <summary>
        /// Get a list of all relevant governance rules over a scope
        /// </summary>
        /// <param name='scope'>
        /// Scope of the query. can be subscription
        /// (/subscriptions/{subscriptionId}) or management group
        /// (/providers/Microsoft.Management/managementGroups/mgName) or a
        /// security connector scope: (format:
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<GovernanceRule>>> ListWithHttpMessagesAsync(string scope, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a specific governance rule for the requested scope by ruleId
        /// </summary>
        /// <param name='scope'>
        /// Scope of the query. can be subscription
        /// (/subscriptions/{subscriptionId}) or management group
        /// (/providers/Microsoft.Management/managementGroups/mgName) or a
        /// security connector scope: (format:
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance
        /// rule (GUID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<GovernanceRule>> GetWithHttpMessagesAsync(string scope, string ruleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates or updates a governance rule over a given scope
        /// </summary>
        /// <param name='scope'>
        /// Scope of the query. can be subscription
        /// (/subscriptions/{subscriptionId}) or management group
        /// (/providers/Microsoft.Management/managementGroups/mgName) or a
        /// security connector scope: (format:
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance
        /// rule (GUID)
        /// </param>
        /// <param name='governanceRule'>
        /// Governance rule over a given scope
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<GovernanceRule>> CreateOrUpdateWithHttpMessagesAsync(string scope, string ruleId, GovernanceRule governanceRule, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a Governance rule over a given scope
        /// </summary>
        /// <param name='scope'>
        /// Scope of the query. can be subscription
        /// (/subscriptions/{subscriptionId}) or management group
        /// (/providers/Microsoft.Management/managementGroups/mgName) or a
        /// security connector scope: (format:
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance
        /// rule (GUID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationHeaderResponse<GovernanceRulesDeleteHeaders>> DeleteWithHttpMessagesAsync(string scope, string ruleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Execute a governance rule
        /// </summary>
        /// <param name='scope'>
        /// Scope of the query. can be subscription
        /// (/subscriptions/{subscriptionId}) or management group
        /// (/providers/Microsoft.Management/managementGroups/mgName) or a
        /// security connector scope: (format:
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance
        /// rule (GUID)
        /// </param>
        /// <param name='overrideParameter'>
        /// Describe if governance rule should be override
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationHeaderResponse<GovernanceRulesExecuteHeaders>> ExecuteWithHttpMessagesAsync(string scope, string ruleId, bool? overrideParameter = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get governance rules long run operation result for the requested
        /// scope by ruleId and operationId
        /// </summary>
        /// <param name='scope'>
        /// Scope of the query. can be subscription
        /// (/subscriptions/{subscriptionId}) or management group
        /// (/providers/Microsoft.Management/managementGroups/mgName) or a
        /// security connector scope: (format:
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance
        /// rule (GUID)
        /// </param>
        /// <param name='operationId'>
        /// The governance rule long running operation unique key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<OperationResult1,GovernanceRulesOperationResultsHeaders>> OperationResultsWithHttpMessagesAsync(string scope, string ruleId, string operationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a Governance rule over a given scope
        /// </summary>
        /// <param name='scope'>
        /// Scope of the query. can be subscription
        /// (/subscriptions/{subscriptionId}) or management group
        /// (/providers/Microsoft.Management/managementGroups/mgName) or a
        /// security connector scope: (format:
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance
        /// rule (GUID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationHeaderResponse<GovernanceRulesDeleteHeaders>> BeginDeleteWithHttpMessagesAsync(string scope, string ruleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Execute a governance rule
        /// </summary>
        /// <param name='scope'>
        /// Scope of the query. can be subscription
        /// (/subscriptions/{subscriptionId}) or management group
        /// (/providers/Microsoft.Management/managementGroups/mgName) or a
        /// security connector scope: (format:
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </param>
        /// <param name='ruleId'>
        /// The governance rule key - unique key for the standard governance
        /// rule (GUID)
        /// </param>
        /// <param name='overrideParameter'>
        /// Describe if governance rule should be override
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationHeaderResponse<GovernanceRulesExecuteHeaders>> BeginExecuteWithHttpMessagesAsync(string scope, string ruleId, bool? overrideParameter = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of all relevant governance rules over a scope
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<GovernanceRule>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
