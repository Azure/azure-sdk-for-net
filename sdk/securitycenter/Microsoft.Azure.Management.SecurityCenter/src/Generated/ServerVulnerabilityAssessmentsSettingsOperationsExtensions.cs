// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServerVulnerabilityAssessmentsSettingsOperations.
    /// </summary>
    public static partial class ServerVulnerabilityAssessmentsSettingsOperationsExtensions
    {
            /// <summary>
            /// Get a list of all the server vulnerability assessments settings over a
            /// subscription level scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ServerVulnerabilityAssessmentsSetting> ListBySubscription(this IServerVulnerabilityAssessmentsSettingsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all the server vulnerability assessments settings over a
            /// subscription level scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerVulnerabilityAssessmentsSetting>> ListBySubscriptionAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a server vulnerability assessments setting of the requested kind, that
            /// is set on the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ServerVulnerabilityAssessmentsSetting Get(this IServerVulnerabilityAssessmentsSettingsOperations operations)
            {
                return operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a server vulnerability assessments setting of the requested kind, that
            /// is set on the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerVulnerabilityAssessmentsSetting> GetAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a server vulnerability assessments setting of the
            /// requested kind on the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverVulnerabilityAssessmentsSetting'>
            /// A server vulnerability assessments setting over a predefined scope
            /// </param>
            public static ServerVulnerabilityAssessmentsSetting CreateOrUpdate(this IServerVulnerabilityAssessmentsSettingsOperations operations, ServerVulnerabilityAssessmentsSetting serverVulnerabilityAssessmentsSetting)
            {
                return operations.CreateOrUpdateAsync(serverVulnerabilityAssessmentsSetting).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a server vulnerability assessments setting of the
            /// requested kind on the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverVulnerabilityAssessmentsSetting'>
            /// A server vulnerability assessments setting over a predefined scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerVulnerabilityAssessmentsSetting> CreateOrUpdateAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, ServerVulnerabilityAssessmentsSetting serverVulnerabilityAssessmentsSetting, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(serverVulnerabilityAssessmentsSetting, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the server vulnerability assessments setting of the requested kind
            /// from the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Delete(this IServerVulnerabilityAssessmentsSettingsOperations operations)
            {
                operations.DeleteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the server vulnerability assessments setting of the requested kind
            /// from the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of all the server vulnerability assessments settings over a
            /// subscription level scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServerVulnerabilityAssessmentsSetting> ListBySubscriptionNext(this IServerVulnerabilityAssessmentsSettingsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all the server vulnerability assessments settings over a
            /// subscription level scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerVulnerabilityAssessmentsSetting>> ListBySubscriptionNextAsync(this IServerVulnerabilityAssessmentsSettingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
