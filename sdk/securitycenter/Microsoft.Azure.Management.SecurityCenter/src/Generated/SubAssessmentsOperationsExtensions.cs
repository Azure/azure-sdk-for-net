// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SubAssessmentsOperations.
    /// </summary>
    public static partial class SubAssessmentsOperationsExtensions
    {
            /// <summary>
            /// Get security sub-assessments on all your scanned resources inside a
            /// subscription scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            public static IPage<SecuritySubAssessment> ListAll(this ISubAssessmentsOperations operations, string scope)
            {
                return operations.ListAllAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get security sub-assessments on all your scanned resources inside a
            /// subscription scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecuritySubAssessment>> ListAllAsync(this ISubAssessmentsOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get security sub-assessments on all your scanned resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            public static IPage<SecuritySubAssessment> List(this ISubAssessmentsOperations operations, string scope, string assessmentName)
            {
                return operations.ListAsync(scope, assessmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get security sub-assessments on all your scanned resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecuritySubAssessment>> ListAsync(this ISubAssessmentsOperations operations, string scope, string assessmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(scope, assessmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a security sub-assessment on your scanned resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='subAssessmentName'>
            /// The Sub-Assessment Key - Unique key for the sub-assessment type
            /// </param>
            public static SecuritySubAssessment Get(this ISubAssessmentsOperations operations, string scope, string assessmentName, string subAssessmentName)
            {
                return operations.GetAsync(scope, assessmentName, subAssessmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a security sub-assessment on your scanned resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='subAssessmentName'>
            /// The Sub-Assessment Key - Unique key for the sub-assessment type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecuritySubAssessment> GetAsync(this ISubAssessmentsOperations operations, string scope, string assessmentName, string subAssessmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, assessmentName, subAssessmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get security sub-assessments on all your scanned resources inside a
            /// subscription scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SecuritySubAssessment> ListAllNext(this ISubAssessmentsOperations operations, string nextPageLink)
            {
                return operations.ListAllNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get security sub-assessments on all your scanned resources inside a
            /// subscription scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecuritySubAssessment>> ListAllNextAsync(this ISubAssessmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get security sub-assessments on all your scanned resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SecuritySubAssessment> ListNext(this ISubAssessmentsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get security sub-assessments on all your scanned resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecuritySubAssessment>> ListNextAsync(this ISubAssessmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
