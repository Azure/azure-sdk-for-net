// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AdaptiveNetworkHardeningsOperations.
    /// </summary>
    public static partial class AdaptiveNetworkHardeningsOperationsExtensions
    {
            /// <summary>
            /// Gets a list of Adaptive Network Hardenings resources in scope of an
            /// extended resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            public static IPage<AdaptiveNetworkHardening> ListByExtendedResource(this IAdaptiveNetworkHardeningsOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName)
            {
                return operations.ListByExtendedResourceAsync(resourceGroupName, resourceNamespace, resourceType, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Adaptive Network Hardenings resources in scope of an
            /// extended resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AdaptiveNetworkHardening>> ListByExtendedResourceAsync(this IAdaptiveNetworkHardeningsOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByExtendedResourceWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single Adaptive Network Hardening resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='adaptiveNetworkHardeningResourceName'>
            /// The name of the Adaptive Network Hardening resource.
            /// </param>
            public static AdaptiveNetworkHardening Get(this IAdaptiveNetworkHardeningsOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string adaptiveNetworkHardeningResourceName)
            {
                return operations.GetAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, adaptiveNetworkHardeningResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single Adaptive Network Hardening resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='adaptiveNetworkHardeningResourceName'>
            /// The name of the Adaptive Network Hardening resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdaptiveNetworkHardening> GetAsync(this IAdaptiveNetworkHardeningsOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string adaptiveNetworkHardeningResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, adaptiveNetworkHardeningResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Enforces the given rules on the NSG(s) listed in the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='adaptiveNetworkHardeningResourceName'>
            /// The name of the Adaptive Network Hardening resource.
            /// </param>
            /// <param name='rules'>
            /// The rules to enforce
            /// </param>
            /// <param name='networkSecurityGroups'>
            /// The Azure resource IDs of the effective network security groups that will
            /// be updated with the created security rules from the Adaptive Network
            /// Hardening rules
            /// </param>
            public static void Enforce(this IAdaptiveNetworkHardeningsOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string adaptiveNetworkHardeningResourceName, IList<Rule> rules, IList<string> networkSecurityGroups)
            {
                operations.EnforceAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, adaptiveNetworkHardeningResourceName, rules, networkSecurityGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enforces the given rules on the NSG(s) listed in the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='adaptiveNetworkHardeningResourceName'>
            /// The name of the Adaptive Network Hardening resource.
            /// </param>
            /// <param name='rules'>
            /// The rules to enforce
            /// </param>
            /// <param name='networkSecurityGroups'>
            /// The Azure resource IDs of the effective network security groups that will
            /// be updated with the created security rules from the Adaptive Network
            /// Hardening rules
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EnforceAsync(this IAdaptiveNetworkHardeningsOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string adaptiveNetworkHardeningResourceName, IList<Rule> rules, IList<string> networkSecurityGroups, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EnforceWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, adaptiveNetworkHardeningResourceName, rules, networkSecurityGroups, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Enforces the given rules on the NSG(s) listed in the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='adaptiveNetworkHardeningResourceName'>
            /// The name of the Adaptive Network Hardening resource.
            /// </param>
            /// <param name='rules'>
            /// The rules to enforce
            /// </param>
            /// <param name='networkSecurityGroups'>
            /// The Azure resource IDs of the effective network security groups that will
            /// be updated with the created security rules from the Adaptive Network
            /// Hardening rules
            /// </param>
            public static void BeginEnforce(this IAdaptiveNetworkHardeningsOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string adaptiveNetworkHardeningResourceName, IList<Rule> rules, IList<string> networkSecurityGroups)
            {
                operations.BeginEnforceAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, adaptiveNetworkHardeningResourceName, rules, networkSecurityGroups).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enforces the given rules on the NSG(s) listed in the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceNamespace'>
            /// The Namespace of the resource.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='adaptiveNetworkHardeningResourceName'>
            /// The name of the Adaptive Network Hardening resource.
            /// </param>
            /// <param name='rules'>
            /// The rules to enforce
            /// </param>
            /// <param name='networkSecurityGroups'>
            /// The Azure resource IDs of the effective network security groups that will
            /// be updated with the created security rules from the Adaptive Network
            /// Hardening rules
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginEnforceAsync(this IAdaptiveNetworkHardeningsOperations operations, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string adaptiveNetworkHardeningResourceName, IList<Rule> rules, IList<string> networkSecurityGroups, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginEnforceWithHttpMessagesAsync(resourceGroupName, resourceNamespace, resourceType, resourceName, adaptiveNetworkHardeningResourceName, rules, networkSecurityGroups, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of Adaptive Network Hardenings resources in scope of an
            /// extended resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AdaptiveNetworkHardening> ListByExtendedResourceNext(this IAdaptiveNetworkHardeningsOperations operations, string nextPageLink)
            {
                return operations.ListByExtendedResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Adaptive Network Hardenings resources in scope of an
            /// extended resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AdaptiveNetworkHardening>> ListByExtendedResourceNextAsync(this IAdaptiveNetworkHardeningsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByExtendedResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
