// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GovernanceRulesOperations.
    /// </summary>
    public static partial class GovernanceRulesOperationsExtensions
    {
            /// <summary>
            /// Get a list of all relevant governance rules over a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            public static IPage<GovernanceRule> List(this IGovernanceRulesOperations operations, string scope)
            {
                return operations.ListAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all relevant governance rules over a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GovernanceRule>> ListAsync(this IGovernanceRulesOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific governance rule for the requested scope by ruleId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            public static GovernanceRule Get(this IGovernanceRulesOperations operations, string scope, string ruleId)
            {
                return operations.GetAsync(scope, ruleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific governance rule for the requested scope by ruleId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceRule> GetAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, ruleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a governance rule over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='governanceRule'>
            /// Governance rule over a given scope
            /// </param>
            public static GovernanceRule CreateOrUpdate(this IGovernanceRulesOperations operations, string scope, string ruleId, GovernanceRule governanceRule)
            {
                return operations.CreateOrUpdateAsync(scope, ruleId, governanceRule).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a governance rule over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='governanceRule'>
            /// Governance rule over a given scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceRule> CreateOrUpdateAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, GovernanceRule governanceRule, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(scope, ruleId, governanceRule, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Governance rule over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            public static GovernanceRulesDeleteHeaders Delete(this IGovernanceRulesOperations operations, string scope, string ruleId)
            {
                return operations.DeleteAsync(scope, ruleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Governance rule over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceRulesDeleteHeaders> DeleteAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(scope, ruleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Execute a governance rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='overrideParameter'>
            /// Describe if governance rule should be override
            /// </param>
            public static GovernanceRulesExecuteHeaders Execute(this IGovernanceRulesOperations operations, string scope, string ruleId, bool? overrideParameter = default(bool?))
            {
                return operations.ExecuteAsync(scope, ruleId, overrideParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a governance rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='overrideParameter'>
            /// Describe if governance rule should be override
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceRulesExecuteHeaders> ExecuteAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, bool? overrideParameter = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteWithHttpMessagesAsync(scope, ruleId, overrideParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get governance rules long run operation result for the requested scope by
            /// ruleId and operationId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='operationId'>
            /// The governance rule long running operation unique key
            /// </param>
            public static OperationResult1 OperationResults(this IGovernanceRulesOperations operations, string scope, string ruleId, string operationId)
            {
                return operations.OperationResultsAsync(scope, ruleId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get governance rules long run operation result for the requested scope by
            /// ruleId and operationId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='operationId'>
            /// The governance rule long running operation unique key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResult1> OperationResultsAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OperationResultsWithHttpMessagesAsync(scope, ruleId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Governance rule over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            public static GovernanceRulesDeleteHeaders BeginDelete(this IGovernanceRulesOperations operations, string scope, string ruleId)
            {
                return operations.BeginDeleteAsync(scope, ruleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Governance rule over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceRulesDeleteHeaders> BeginDeleteAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(scope, ruleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Execute a governance rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='overrideParameter'>
            /// Describe if governance rule should be override
            /// </param>
            public static GovernanceRulesExecuteHeaders BeginExecute(this IGovernanceRulesOperations operations, string scope, string ruleId, bool? overrideParameter = default(bool?))
            {
                return operations.BeginExecuteAsync(scope, ruleId, overrideParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a governance rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='ruleId'>
            /// The governance rule key - unique key for the standard governance rule
            /// (GUID)
            /// </param>
            /// <param name='overrideParameter'>
            /// Describe if governance rule should be override
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceRulesExecuteHeaders> BeginExecuteAsync(this IGovernanceRulesOperations operations, string scope, string ruleId, bool? overrideParameter = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginExecuteWithHttpMessagesAsync(scope, ruleId, overrideParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get a list of all relevant governance rules over a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GovernanceRule> ListNext(this IGovernanceRulesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all relevant governance rules over a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GovernanceRule>> ListNextAsync(this IGovernanceRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
