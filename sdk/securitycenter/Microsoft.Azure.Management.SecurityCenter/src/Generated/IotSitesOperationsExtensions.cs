// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IotSitesOperations.
    /// </summary>
    public static partial class IotSitesOperationsExtensions
    {
            /// <summary>
            /// List IoT sites
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
            /// </param>
            public static IotSitesList List(this IIotSitesOperations operations, string scope)
            {
                return operations.ListAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List IoT sites
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotSitesList> ListAsync(this IIotSitesOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get IoT site
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
            /// </param>
            public static IotSitesModel Get(this IIotSitesOperations operations, string scope)
            {
                return operations.GetAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get IoT site
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotSitesModel> GetAsync(this IIotSitesOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update IoT site
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
            /// </param>
            /// <param name='displayName'>
            /// Display name of the IoT site
            /// </param>
            /// <param name='tags'>
            /// Tags of the IoT site
            /// </param>
            public static IotSitesModel CreateOrUpdate(this IIotSitesOperations operations, string scope, string displayName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.CreateOrUpdateAsync(scope, displayName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update IoT site
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
            /// </param>
            /// <param name='displayName'>
            /// Display name of the IoT site
            /// </param>
            /// <param name='tags'>
            /// Tags of the IoT site
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotSitesModel> CreateOrUpdateAsync(this IIotSitesOperations operations, string scope, string displayName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(scope, displayName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete IoT site
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
            /// </param>
            public static void Delete(this IIotSitesOperations operations, string scope)
            {
                operations.DeleteAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete IoT site
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IIotSitesOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
