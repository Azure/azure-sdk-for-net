// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HealthReportsOperations.
    /// </summary>
    public static partial class HealthReportsOperationsExtensions
    {
            /// <summary>
            /// Get a list of all health reports inside a scope. Valid scopes are:
            /// subscription (format: 'subscriptions/{subscriptionId}'), or security
            /// connector (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            public static IPage<HealthReport> List(this IHealthReportsOperations operations, string scope)
            {
                return operations.ListAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all health reports inside a scope. Valid scopes are:
            /// subscription (format: 'subscriptions/{subscriptionId}'), or security
            /// connector (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query. can be subscription (/subscriptions/{subscriptionId})
            /// or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName) or a security
            /// connector scope: (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HealthReport>> ListAsync(this IHealthReportsOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get health report of resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='healthReportName'>
            /// The health report Key - Unique key for the health report type
            /// </param>
            public static HealthReport Get(this IHealthReportsOperations operations, string resourceId, string healthReportName)
            {
                return operations.GetAsync(resourceId, healthReportName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get health report of resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='healthReportName'>
            /// The health report Key - Unique key for the health report type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HealthReport> GetAsync(this IHealthReportsOperations operations, string resourceId, string healthReportName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceId, healthReportName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all health reports inside a scope. Valid scopes are:
            /// subscription (format: 'subscriptions/{subscriptionId}'), or security
            /// connector (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HealthReport> ListNext(this IHealthReportsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all health reports inside a scope. Valid scopes are:
            /// subscription (format: 'subscriptions/{subscriptionId}'), or security
            /// connector (format:
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HealthReport>> ListNextAsync(this IHealthReportsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
