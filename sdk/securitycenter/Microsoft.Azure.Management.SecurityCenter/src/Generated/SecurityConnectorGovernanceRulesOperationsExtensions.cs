// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SecurityConnectorGovernanceRulesOperations.
    /// </summary>
    public static partial class SecurityConnectorGovernanceRulesOperationsExtensions
    {
            /// <summary>
            /// Get a specific governanceRule for the requested scope by ruleId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='securityConnectorName'>
            /// The security connector name.
            /// </param>
            /// <param name='ruleId'>
            /// The security GovernanceRule key - unique key for the standard
            /// GovernanceRule
            /// </param>
            public static GovernanceRule Get(this ISecurityConnectorGovernanceRulesOperations operations, string resourceGroupName, string securityConnectorName, string ruleId)
            {
                return operations.GetAsync(resourceGroupName, securityConnectorName, ruleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific governanceRule for the requested scope by ruleId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='securityConnectorName'>
            /// The security connector name.
            /// </param>
            /// <param name='ruleId'>
            /// The security GovernanceRule key - unique key for the standard
            /// GovernanceRule
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceRule> GetAsync(this ISecurityConnectorGovernanceRulesOperations operations, string resourceGroupName, string securityConnectorName, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, securityConnectorName, ruleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or update a security GovernanceRule on the given security
            /// connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='securityConnectorName'>
            /// The security connector name.
            /// </param>
            /// <param name='ruleId'>
            /// The security GovernanceRule key - unique key for the standard
            /// GovernanceRule
            /// </param>
            /// <param name='governanceRule'>
            /// GovernanceRule over a subscription scope
            /// </param>
            public static GovernanceRule CreateOrUpdate(this ISecurityConnectorGovernanceRulesOperations operations, string resourceGroupName, string securityConnectorName, string ruleId, GovernanceRule governanceRule)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, securityConnectorName, ruleId, governanceRule).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or update a security GovernanceRule on the given security
            /// connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='securityConnectorName'>
            /// The security connector name.
            /// </param>
            /// <param name='ruleId'>
            /// The security GovernanceRule key - unique key for the standard
            /// GovernanceRule
            /// </param>
            /// <param name='governanceRule'>
            /// GovernanceRule over a subscription scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceRule> CreateOrUpdateAsync(this ISecurityConnectorGovernanceRulesOperations operations, string resourceGroupName, string securityConnectorName, string ruleId, GovernanceRule governanceRule, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, securityConnectorName, ruleId, governanceRule, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a GovernanceRule over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='securityConnectorName'>
            /// The security connector name.
            /// </param>
            /// <param name='ruleId'>
            /// The security GovernanceRule key - unique key for the standard
            /// GovernanceRule
            /// </param>
            public static void Delete(this ISecurityConnectorGovernanceRulesOperations operations, string resourceGroupName, string securityConnectorName, string ruleId)
            {
                operations.DeleteAsync(resourceGroupName, securityConnectorName, ruleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a GovernanceRule over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='securityConnectorName'>
            /// The security connector name.
            /// </param>
            /// <param name='ruleId'>
            /// The security GovernanceRule key - unique key for the standard
            /// GovernanceRule
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISecurityConnectorGovernanceRulesOperations operations, string resourceGroupName, string securityConnectorName, string ruleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, securityConnectorName, ruleId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
