// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SecurityOperatorsOperations.
    /// </summary>
    public static partial class SecurityOperatorsOperationsExtensions
    {
            /// <summary>
            /// Lists Microsoft Defender for Cloud securityOperators in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pricingName'>
            /// name of the pricing configuration
            /// </param>
            public static SecurityOperatorList List(this ISecurityOperatorsOperations operations, string pricingName)
            {
                return operations.ListAsync(pricingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists Microsoft Defender for Cloud securityOperators in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pricingName'>
            /// name of the pricing configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityOperatorList> ListAsync(this ISecurityOperatorsOperations operations, string pricingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(pricingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific security operator for the requested scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pricingName'>
            /// name of the pricing configuration
            /// </param>
            /// <param name='securityOperatorName'>
            /// name of the securityOperator
            /// </param>
            public static SecurityOperator Get(this ISecurityOperatorsOperations operations, string pricingName, string securityOperatorName)
            {
                return operations.GetAsync(pricingName, securityOperatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific security operator for the requested scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pricingName'>
            /// name of the pricing configuration
            /// </param>
            /// <param name='securityOperatorName'>
            /// name of the securityOperator
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityOperator> GetAsync(this ISecurityOperatorsOperations operations, string pricingName, string securityOperatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(pricingName, securityOperatorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates Microsoft Defender for Cloud security operator on the given scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pricingName'>
            /// name of the pricing configuration
            /// </param>
            /// <param name='securityOperatorName'>
            /// name of the securityOperator
            /// </param>
            public static SecurityOperator CreateOrUpdate(this ISecurityOperatorsOperations operations, string pricingName, string securityOperatorName)
            {
                return operations.CreateOrUpdateAsync(pricingName, securityOperatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates Microsoft Defender for Cloud security operator on the given scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pricingName'>
            /// name of the pricing configuration
            /// </param>
            /// <param name='securityOperatorName'>
            /// name of the securityOperator
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityOperator> CreateOrUpdateAsync(this ISecurityOperatorsOperations operations, string pricingName, string securityOperatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(pricingName, securityOperatorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Microsoft Defender for Cloud securityOperator in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pricingName'>
            /// name of the pricing configuration
            /// </param>
            /// <param name='securityOperatorName'>
            /// name of the securityOperator
            /// </param>
            public static void Delete(this ISecurityOperatorsOperations operations, string pricingName, string securityOperatorName)
            {
                operations.DeleteAsync(pricingName, securityOperatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Microsoft Defender for Cloud securityOperator in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pricingName'>
            /// name of the pricing configuration
            /// </param>
            /// <param name='securityOperatorName'>
            /// name of the securityOperator
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISecurityOperatorsOperations operations, string pricingName, string securityOperatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(pricingName, securityOperatorName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
