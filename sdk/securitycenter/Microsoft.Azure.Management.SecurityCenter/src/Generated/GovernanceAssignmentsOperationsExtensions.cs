// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GovernanceAssignmentsOperations.
    /// </summary>
    public static partial class GovernanceAssignmentsOperationsExtensions
    {
            /// <summary>
            /// Get security governanceAssignments on all your resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            public static IPage<GovernanceAssignment> List(this IGovernanceAssignmentsOperations operations, string scope, string assessmentName)
            {
                return operations.ListAsync(scope, assessmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get security governanceAssignments on all your resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GovernanceAssignment>> ListAsync(this IGovernanceAssignmentsOperations operations, string scope, string assessmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(scope, assessmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific governanceAssignment for the requested scope by
            /// AssignmentKey
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='assignmentKey'>
            /// The security governance assignment key - the assessment key of the required
            /// governance assignment
            /// </param>
            public static GovernanceAssignment Get(this IGovernanceAssignmentsOperations operations, string scope, string assessmentName, string assignmentKey)
            {
                return operations.GetAsync(scope, assessmentName, assignmentKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific governanceAssignment for the requested scope by
            /// AssignmentKey
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='assignmentKey'>
            /// The security governance assignment key - the assessment key of the required
            /// governance assignment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceAssignment> GetAsync(this IGovernanceAssignmentsOperations operations, string scope, string assessmentName, string assignmentKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, assessmentName, assignmentKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or update a security GovernanceAssignment on the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='assignmentKey'>
            /// The security governance assignment key - the assessment key of the required
            /// governance assignment
            /// </param>
            /// <param name='governanceAssignment'>
            /// GovernanceAssignment over a subscription scope
            /// </param>
            public static GovernanceAssignment CreateOrUpdate(this IGovernanceAssignmentsOperations operations, string scope, string assessmentName, string assignmentKey, GovernanceAssignment governanceAssignment)
            {
                return operations.CreateOrUpdateAsync(scope, assessmentName, assignmentKey, governanceAssignment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or update a security GovernanceAssignment on the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='assignmentKey'>
            /// The security governance assignment key - the assessment key of the required
            /// governance assignment
            /// </param>
            /// <param name='governanceAssignment'>
            /// GovernanceAssignment over a subscription scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GovernanceAssignment> CreateOrUpdateAsync(this IGovernanceAssignmentsOperations operations, string scope, string assessmentName, string assignmentKey, GovernanceAssignment governanceAssignment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(scope, assessmentName, assignmentKey, governanceAssignment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a GovernanceAssignment over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='assignmentKey'>
            /// The security governance assignment key - the assessment key of the required
            /// governance assignment
            /// </param>
            public static void Delete(this IGovernanceAssignmentsOperations operations, string scope, string assessmentName, string assignmentKey)
            {
                operations.DeleteAsync(scope, assessmentName, assignmentKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a GovernanceAssignment over a given scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='assignmentKey'>
            /// The security governance assignment key - the assessment key of the required
            /// governance assignment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IGovernanceAssignmentsOperations operations, string scope, string assessmentName, string assignmentKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(scope, assessmentName, assignmentKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get security governanceAssignments on all your resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GovernanceAssignment> ListNext(this IGovernanceAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get security governanceAssignments on all your resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GovernanceAssignment>> ListNextAsync(this IGovernanceAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
