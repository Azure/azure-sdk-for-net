// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IotAlertsOperations.
    /// </summary>
    public static partial class IotAlertsOperationsExtensions
    {
            /// <summary>
            /// List IoT alerts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or
            /// IoT Hub (i.e.
            /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
            /// </param>
            /// <param name='minStartTimeUtc'>
            /// Filter by minimum startTimeUtc (ISO 8601 format)
            /// </param>
            /// <param name='maxStartTimeUtc'>
            /// Filter by maximum startTimeUtc (ISO 8601 format)
            /// </param>
            /// <param name='alertType'>
            /// Filter by alert type
            /// </param>
            /// <param name='deviceManagementType'>
            /// Get devices only from specific type, Managed or Unmanaged. Possible values
            /// include: 'Managed', 'Unmanaged'
            /// </param>
            /// <param name='compromisedEntity'>
            /// Filter by compromised device
            /// </param>
            /// <param name='limit'>
            /// Limit the number of items returned in a single page
            /// </param>
            /// <param name='skipToken'>
            /// Skip token used for pagination
            /// </param>
            public static IPage<IotAlertModel> List(this IIotAlertsOperations operations, string scope, string minStartTimeUtc = default(string), string maxStartTimeUtc = default(string), string alertType = default(string), string deviceManagementType = default(string), string compromisedEntity = default(string), int? limit = default(int?), string skipToken = default(string))
            {
                return operations.ListAsync(scope, minStartTimeUtc, maxStartTimeUtc, alertType, deviceManagementType, compromisedEntity, limit, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List IoT alerts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or
            /// IoT Hub (i.e.
            /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
            /// </param>
            /// <param name='minStartTimeUtc'>
            /// Filter by minimum startTimeUtc (ISO 8601 format)
            /// </param>
            /// <param name='maxStartTimeUtc'>
            /// Filter by maximum startTimeUtc (ISO 8601 format)
            /// </param>
            /// <param name='alertType'>
            /// Filter by alert type
            /// </param>
            /// <param name='deviceManagementType'>
            /// Get devices only from specific type, Managed or Unmanaged. Possible values
            /// include: 'Managed', 'Unmanaged'
            /// </param>
            /// <param name='compromisedEntity'>
            /// Filter by compromised device
            /// </param>
            /// <param name='limit'>
            /// Limit the number of items returned in a single page
            /// </param>
            /// <param name='skipToken'>
            /// Skip token used for pagination
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotAlertModel>> ListAsync(this IIotAlertsOperations operations, string scope, string minStartTimeUtc = default(string), string maxStartTimeUtc = default(string), string alertType = default(string), string deviceManagementType = default(string), string compromisedEntity = default(string), int? limit = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(scope, minStartTimeUtc, maxStartTimeUtc, alertType, deviceManagementType, compromisedEntity, limit, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get IoT alert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or
            /// IoT Hub (i.e.
            /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
            /// </param>
            /// <param name='iotAlertId'>
            /// Id of the alert
            /// </param>
            public static IotAlertModel Get(this IIotAlertsOperations operations, string scope, string iotAlertId)
            {
                return operations.GetAsync(scope, iotAlertId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get IoT alert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or
            /// IoT Hub (i.e.
            /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
            /// </param>
            /// <param name='iotAlertId'>
            /// Id of the alert
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotAlertModel> GetAsync(this IIotAlertsOperations operations, string scope, string iotAlertId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, iotAlertId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List IoT alerts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IotAlertModel> ListNext(this IIotAlertsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List IoT alerts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotAlertModel>> ListNextAsync(this IIotAlertsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
