// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// API spec for Microsoft.Security (Azure Security Center) resource
    /// provider
    /// </summary>
    public partial class SecurityCenterClient : ServiceClient<SecurityCenterClient>, ISecurityCenterClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The location where ASC stores the data of the subscription. can be
        /// retrieved from Get locations
        /// </summary>
        public string AscLocation { get; set; }

        /// <summary>
        /// Azure subscription ID
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the ILocationsOperations.
        /// </summary>
        public virtual ILocationsOperations Locations { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the ITasksOperations.
        /// </summary>
        public virtual ITasksOperations Tasks { get; private set; }

        /// <summary>
        /// Gets the IAutoProvisioningSettingsOperations.
        /// </summary>
        public virtual IAutoProvisioningSettingsOperations AutoProvisioningSettings { get; private set; }

        /// <summary>
        /// Gets the ICompliancesOperations.
        /// </summary>
        public virtual ICompliancesOperations Compliances { get; private set; }

        /// <summary>
        /// Gets the IInformationProtectionPoliciesOperations.
        /// </summary>
        public virtual IInformationProtectionPoliciesOperations InformationProtectionPolicies { get; private set; }

        /// <summary>
        /// Gets the IWorkspaceSettingsOperations.
        /// </summary>
        public virtual IWorkspaceSettingsOperations WorkspaceSettings { get; private set; }

        /// <summary>
        /// Gets the IAlertsSuppressionRulesOperations.
        /// </summary>
        public virtual IAlertsSuppressionRulesOperations AlertsSuppressionRules { get; private set; }

        /// <summary>
        /// Gets the IAutomationsOperations.
        /// </summary>
        public virtual IAutomationsOperations Automations { get; private set; }

        /// <summary>
        /// Gets the IRegulatoryComplianceStandardsOperations.
        /// </summary>
        public virtual IRegulatoryComplianceStandardsOperations RegulatoryComplianceStandards { get; private set; }

        /// <summary>
        /// Gets the IRegulatoryComplianceControlsOperations.
        /// </summary>
        public virtual IRegulatoryComplianceControlsOperations RegulatoryComplianceControls { get; private set; }

        /// <summary>
        /// Gets the IRegulatoryComplianceAssessmentsOperations.
        /// </summary>
        public virtual IRegulatoryComplianceAssessmentsOperations RegulatoryComplianceAssessments { get; private set; }

        /// <summary>
        /// Gets the ISubAssessmentsOperations.
        /// </summary>
        public virtual ISubAssessmentsOperations SubAssessments { get; private set; }

        /// <summary>
        /// Gets the IConnectorsOperations.
        /// </summary>
        public virtual IConnectorsOperations Connectors { get; private set; }

        /// <summary>
        /// Gets the ISecurityContactsOperations.
        /// </summary>
        public virtual ISecurityContactsOperations SecurityContacts { get; private set; }

        /// <summary>
        /// Gets the IIngestionSettingsOperations.
        /// </summary>
        public virtual IIngestionSettingsOperations IngestionSettings { get; private set; }

        /// <summary>
        /// Gets the ISoftwareInventoriesOperations.
        /// </summary>
        public virtual ISoftwareInventoriesOperations SoftwareInventories { get; private set; }

        /// <summary>
        /// Gets the ICustomAssessmentAutomationsOperations.
        /// </summary>
        public virtual ICustomAssessmentAutomationsOperations CustomAssessmentAutomations { get; private set; }

        /// <summary>
        /// Gets the ICustomEntityStoreAssignmentsOperations.
        /// </summary>
        public virtual ICustomEntityStoreAssignmentsOperations CustomEntityStoreAssignments { get; private set; }

        /// <summary>
        /// Gets the IMdeOnboardingsOperations.
        /// </summary>
        public virtual IMdeOnboardingsOperations MdeOnboardings { get; private set; }

        /// <summary>
        /// Gets the IGovernanceAssignmentsOperations.
        /// </summary>
        public virtual IGovernanceAssignmentsOperations GovernanceAssignments { get; private set; }

        /// <summary>
        /// Gets the IGovernanceRulesOperations.
        /// </summary>
        public virtual IGovernanceRulesOperations GovernanceRules { get; private set; }

        /// <summary>
        /// Gets the IApplicationsOperations.
        /// </summary>
        public virtual IApplicationsOperations Applications { get; private set; }

        /// <summary>
        /// Gets the IApplicationOperations.
        /// </summary>
        public virtual IApplicationOperations Application { get; private set; }

        /// <summary>
        /// Gets the ISecurityConnectorApplicationsOperations.
        /// </summary>
        public virtual ISecurityConnectorApplicationsOperations SecurityConnectorApplications { get; private set; }

        /// <summary>
        /// Gets the ISecurityConnectorApplicationOperations.
        /// </summary>
        public virtual ISecurityConnectorApplicationOperations SecurityConnectorApplication { get; private set; }

        /// <summary>
        /// Gets the IAPICollectionOperations.
        /// </summary>
        public virtual IAPICollectionOperations APICollection { get; private set; }

        /// <summary>
        /// Gets the IAPICollectionOnboardingOperations.
        /// </summary>
        public virtual IAPICollectionOnboardingOperations APICollectionOnboarding { get; private set; }

        /// <summary>
        /// Gets the IAPICollectionOffboardingOperations.
        /// </summary>
        public virtual IAPICollectionOffboardingOperations APICollectionOffboarding { get; private set; }

        /// <summary>
        /// Gets the IDefenderForStorageOperations.
        /// </summary>
        public virtual IDefenderForStorageOperations DefenderForStorage { get; private set; }

        /// <summary>
        /// Gets the ISecurityOperatorsOperations.
        /// </summary>
        public virtual ISecurityOperatorsOperations SecurityOperators { get; private set; }

        /// <summary>
        /// Gets the ISqlVulnerabilityAssessmentBaselineRulesOperations.
        /// </summary>
        public virtual ISqlVulnerabilityAssessmentBaselineRulesOperations SqlVulnerabilityAssessmentBaselineRules { get; private set; }

        /// <summary>
        /// Gets the ISqlVulnerabilityAssessmentScansOperations.
        /// </summary>
        public virtual ISqlVulnerabilityAssessmentScansOperations SqlVulnerabilityAssessmentScans { get; private set; }

        /// <summary>
        /// Gets the ISqlVulnerabilityAssessmentScanResultsOperations.
        /// </summary>
        public virtual ISqlVulnerabilityAssessmentScanResultsOperations SqlVulnerabilityAssessmentScanResults { get; private set; }

        /// <summary>
        /// Gets the ISensitivitySettingsOperations.
        /// </summary>
        public virtual ISensitivitySettingsOperations SensitivitySettings { get; private set; }

        /// <summary>
        /// Gets the ISecurityConnectorsOperations.
        /// </summary>
        public virtual ISecurityConnectorsOperations SecurityConnectors { get; private set; }

        /// <summary>
        /// Gets the IHealthReportsOperations.
        /// </summary>
        public virtual IHealthReportsOperations HealthReports { get; private set; }

        /// <summary>
        /// Gets the IComplianceResultsOperations.
        /// </summary>
        public virtual IComplianceResultsOperations ComplianceResults { get; private set; }

        /// <summary>
        /// Gets the IAdvancedThreatProtectionOperations.
        /// </summary>
        public virtual IAdvancedThreatProtectionOperations AdvancedThreatProtection { get; private set; }

        /// <summary>
        /// Gets the IDeviceSecurityGroupsOperations.
        /// </summary>
        public virtual IDeviceSecurityGroupsOperations DeviceSecurityGroups { get; private set; }

        /// <summary>
        /// Gets the IIotSecuritySolutionAnalyticsOperations.
        /// </summary>
        public virtual IIotSecuritySolutionAnalyticsOperations IotSecuritySolutionAnalytics { get; private set; }

        /// <summary>
        /// Gets the IIotSecuritySolutionsAnalyticsAggregatedAlertOperations.
        /// </summary>
        public virtual IIotSecuritySolutionsAnalyticsAggregatedAlertOperations IotSecuritySolutionsAnalyticsAggregatedAlert { get; private set; }

        /// <summary>
        /// Gets the IIotSecuritySolutionsAnalyticsRecommendationOperations.
        /// </summary>
        public virtual IIotSecuritySolutionsAnalyticsRecommendationOperations IotSecuritySolutionsAnalyticsRecommendation { get; private set; }

        /// <summary>
        /// Gets the IIotSecuritySolutionOperations.
        /// </summary>
        public virtual IIotSecuritySolutionOperations IotSecuritySolution { get; private set; }

        /// <summary>
        /// Gets the IAdaptiveNetworkHardeningsOperations.
        /// </summary>
        public virtual IAdaptiveNetworkHardeningsOperations AdaptiveNetworkHardenings { get; private set; }

        /// <summary>
        /// Gets the IAllowedConnectionsOperations.
        /// </summary>
        public virtual IAllowedConnectionsOperations AllowedConnections { get; private set; }

        /// <summary>
        /// Gets the IAdaptiveApplicationControlsOperations.
        /// </summary>
        public virtual IAdaptiveApplicationControlsOperations AdaptiveApplicationControls { get; private set; }

        /// <summary>
        /// Gets the IDiscoveredSecuritySolutionsOperations.
        /// </summary>
        public virtual IDiscoveredSecuritySolutionsOperations DiscoveredSecuritySolutions { get; private set; }

        /// <summary>
        /// Gets the IExternalSecuritySolutionsOperations.
        /// </summary>
        public virtual IExternalSecuritySolutionsOperations ExternalSecuritySolutions { get; private set; }

        /// <summary>
        /// Gets the IJitNetworkAccessPoliciesOperations.
        /// </summary>
        public virtual IJitNetworkAccessPoliciesOperations JitNetworkAccessPolicies { get; private set; }

        /// <summary>
        /// Gets the ISecureScoresOperations.
        /// </summary>
        public virtual ISecureScoresOperations SecureScores { get; private set; }

        /// <summary>
        /// Gets the ISecureScoreControlsOperations.
        /// </summary>
        public virtual ISecureScoreControlsOperations SecureScoreControls { get; private set; }

        /// <summary>
        /// Gets the ISecureScoreControlDefinitionsOperations.
        /// </summary>
        public virtual ISecureScoreControlDefinitionsOperations SecureScoreControlDefinitions { get; private set; }

        /// <summary>
        /// Gets the ISecuritySolutionsOperations.
        /// </summary>
        public virtual ISecuritySolutionsOperations SecuritySolutions { get; private set; }

        /// <summary>
        /// Gets the ISecuritySolutionsReferenceDataOperations.
        /// </summary>
        public virtual ISecuritySolutionsReferenceDataOperations SecuritySolutionsReferenceData { get; private set; }

        /// <summary>
        /// Gets the IServerVulnerabilityAssessmentOperations.
        /// </summary>
        public virtual IServerVulnerabilityAssessmentOperations ServerVulnerabilityAssessment { get; private set; }

        /// <summary>
        /// Gets the ITopologyOperations.
        /// </summary>
        public virtual ITopologyOperations Topology { get; private set; }

        /// <summary>
        /// Gets the IAssessmentsMetadataOperations.
        /// </summary>
        public virtual IAssessmentsMetadataOperations AssessmentsMetadata { get; private set; }

        /// <summary>
        /// Gets the IAssessmentsOperations.
        /// </summary>
        public virtual IAssessmentsOperations Assessments { get; private set; }

        /// <summary>
        /// Gets the IAlertsOperations.
        /// </summary>
        public virtual IAlertsOperations Alerts { get; private set; }

        /// <summary>
        /// Gets the ISettingsOperations.
        /// </summary>
        public virtual ISettingsOperations Settings { get; private set; }

        /// <summary>
        /// Gets the IPricingsOperations.
        /// </summary>
        public virtual IPricingsOperations Pricings { get; private set; }

        /// <summary>
        /// Gets the IServerVulnerabilityAssessmentsSettingsOperations.
        /// </summary>
        public virtual IServerVulnerabilityAssessmentsSettingsOperations ServerVulnerabilityAssessmentsSettings { get; private set; }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SecurityCenterClient.Dispose(). False: will not dispose provided httpClient</param>
        protected SecurityCenterClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SecurityCenterClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SecurityCenterClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SecurityCenterClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SecurityCenterClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityCenterClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SecurityCenterClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityCenterClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityCenterClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityCenterClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityCenterClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityCenterClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Locations = new LocationsOperations(this);
            Operations = new Operations(this);
            Tasks = new TasksOperations(this);
            AutoProvisioningSettings = new AutoProvisioningSettingsOperations(this);
            Compliances = new CompliancesOperations(this);
            InformationProtectionPolicies = new InformationProtectionPoliciesOperations(this);
            WorkspaceSettings = new WorkspaceSettingsOperations(this);
            AlertsSuppressionRules = new AlertsSuppressionRulesOperations(this);
            Automations = new AutomationsOperations(this);
            RegulatoryComplianceStandards = new RegulatoryComplianceStandardsOperations(this);
            RegulatoryComplianceControls = new RegulatoryComplianceControlsOperations(this);
            RegulatoryComplianceAssessments = new RegulatoryComplianceAssessmentsOperations(this);
            SubAssessments = new SubAssessmentsOperations(this);
            Connectors = new ConnectorsOperations(this);
            SecurityContacts = new SecurityContactsOperations(this);
            IngestionSettings = new IngestionSettingsOperations(this);
            SoftwareInventories = new SoftwareInventoriesOperations(this);
            CustomAssessmentAutomations = new CustomAssessmentAutomationsOperations(this);
            CustomEntityStoreAssignments = new CustomEntityStoreAssignmentsOperations(this);
            MdeOnboardings = new MdeOnboardingsOperations(this);
            GovernanceAssignments = new GovernanceAssignmentsOperations(this);
            GovernanceRules = new GovernanceRulesOperations(this);
            Applications = new ApplicationsOperations(this);
            Application = new ApplicationOperations(this);
            SecurityConnectorApplications = new SecurityConnectorApplicationsOperations(this);
            SecurityConnectorApplication = new SecurityConnectorApplicationOperations(this);
            APICollection = new APICollectionOperations(this);
            APICollectionOnboarding = new APICollectionOnboardingOperations(this);
            APICollectionOffboarding = new APICollectionOffboardingOperations(this);
            DefenderForStorage = new DefenderForStorageOperations(this);
            SecurityOperators = new SecurityOperatorsOperations(this);
            SqlVulnerabilityAssessmentBaselineRules = new SqlVulnerabilityAssessmentBaselineRulesOperations(this);
            SqlVulnerabilityAssessmentScans = new SqlVulnerabilityAssessmentScansOperations(this);
            SqlVulnerabilityAssessmentScanResults = new SqlVulnerabilityAssessmentScanResultsOperations(this);
            SensitivitySettings = new SensitivitySettingsOperations(this);
            SecurityConnectors = new SecurityConnectorsOperations(this);
            HealthReports = new HealthReportsOperations(this);
            ComplianceResults = new ComplianceResultsOperations(this);
            AdvancedThreatProtection = new AdvancedThreatProtectionOperations(this);
            DeviceSecurityGroups = new DeviceSecurityGroupsOperations(this);
            IotSecuritySolutionAnalytics = new IotSecuritySolutionAnalyticsOperations(this);
            IotSecuritySolutionsAnalyticsAggregatedAlert = new IotSecuritySolutionsAnalyticsAggregatedAlertOperations(this);
            IotSecuritySolutionsAnalyticsRecommendation = new IotSecuritySolutionsAnalyticsRecommendationOperations(this);
            IotSecuritySolution = new IotSecuritySolutionOperations(this);
            AdaptiveNetworkHardenings = new AdaptiveNetworkHardeningsOperations(this);
            AllowedConnections = new AllowedConnectionsOperations(this);
            AdaptiveApplicationControls = new AdaptiveApplicationControlsOperations(this);
            DiscoveredSecuritySolutions = new DiscoveredSecuritySolutionsOperations(this);
            ExternalSecuritySolutions = new ExternalSecuritySolutionsOperations(this);
            JitNetworkAccessPolicies = new JitNetworkAccessPoliciesOperations(this);
            SecureScores = new SecureScoresOperations(this);
            SecureScoreControls = new SecureScoreControlsOperations(this);
            SecureScoreControlDefinitions = new SecureScoreControlDefinitionsOperations(this);
            SecuritySolutions = new SecuritySolutionsOperations(this);
            SecuritySolutionsReferenceData = new SecuritySolutionsReferenceDataOperations(this);
            ServerVulnerabilityAssessment = new ServerVulnerabilityAssessmentOperations(this);
            Topology = new TopologyOperations(this);
            AssessmentsMetadata = new AssessmentsMetadataOperations(this);
            Assessments = new AssessmentsOperations(this);
            Alerts = new AlertsOperations(this);
            Settings = new SettingsOperations(this);
            Pricings = new PricingsOperations(this);
            ServerVulnerabilityAssessmentsSettings = new ServerVulnerabilityAssessmentsSettingsOperations(this);
            BaseUri = new System.Uri("https://management.azure.com");
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AutomationAction>("actionType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AutomationAction>("actionType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ResourceDetails>("source"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ResourceDetails>("source"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AdditionalData>("assessedResourceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AdditionalData>("assessedResourceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AuthenticationDetailsProperties>("authenticationType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AuthenticationDetailsProperties>("authenticationType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CloudOffering>("offeringType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<CloudOffering>("offeringType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EnvironmentData>("environmentType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EnvironmentData>("environmentType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AwsOrganizationalData>("organizationMembershipType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AwsOrganizationalData>("organizationMembershipType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<GcpOrganizationalData>("organizationMembershipType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<GcpOrganizationalData>("organizationMembershipType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CustomAlertRule>("ruleType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<CustomAlertRule>("ruleType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ExternalSecuritySolution>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ExternalSecuritySolution>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ResourceIdentifier>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ResourceIdentifier>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AlertSimulatorRequestProperties>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AlertSimulatorRequestProperties>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Setting>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Setting>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ServerVulnerabilityAssessmentsSetting>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ServerVulnerabilityAssessmentsSetting>("kind"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
        /// <summary>
        /// Updates data sensitivity settings for sensitive data discovery
        /// </summary>
        /// <param name='sensitivitySettings'>
        /// The data sensitivity settings to update
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<AzureOperationResponse<GetSensitivitySettingsResponse>> UpdateSensitivitySettingsWithHttpMessagesAsync(UpdateSensitivitySettingsRequest sensitivitySettings, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (sensitivitySettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "sensitivitySettings");
            }
            if (sensitivitySettings != null)
            {
                sensitivitySettings.Validate();
            }
            string apiVersion = "2023-02-15-preview";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("sensitivitySettings", sensitivitySettings);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateSensitivitySettings", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "providers/Microsoft.Security/sensitivitySettings/current").ToString();
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += (_url.Contains("?") ? "&" : "?") + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (GenerateClientRequestId != null && GenerateClientRequestId.Value)
            {
                _httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", System.Guid.NewGuid().ToString());
            }
            if (AcceptLanguage != null)
            {
                if (_httpRequest.Headers.Contains("accept-language"))
                {
                    _httpRequest.Headers.Remove("accept-language");
                }
                _httpRequest.Headers.TryAddWithoutValidation("accept-language", AcceptLanguage);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(sensitivitySettings != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(sensitivitySettings, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError _errorBody =  SafeJsonConvert.DeserializeObject<CloudError>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex = new CloudException(_errorBody.Message);
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_httpResponse.Headers.Contains("x-ms-request-id"))
                {
                    ex.RequestId = _httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                }
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new AzureOperationResponse<GetSensitivitySettingsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_httpResponse.Headers.Contains("x-ms-request-id"))
            {
                _result.RequestId = _httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<GetSensitivitySettingsResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Gets data sensitivity settings for sensitive data discovery
        /// </summary>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<AzureOperationResponse<GetSensitivitySettingsResponse>> GetSensitivitySettingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            string apiVersion = "2023-02-15-preview";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetSensitivitySettings", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "providers/Microsoft.Security/sensitivitySettings/current").ToString();
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += (_url.Contains("?") ? "&" : "?") + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (GenerateClientRequestId != null && GenerateClientRequestId.Value)
            {
                _httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", System.Guid.NewGuid().ToString());
            }
            if (AcceptLanguage != null)
            {
                if (_httpRequest.Headers.Contains("accept-language"))
                {
                    _httpRequest.Headers.Remove("accept-language");
                }
                _httpRequest.Headers.TryAddWithoutValidation("accept-language", AcceptLanguage);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError _errorBody =  SafeJsonConvert.DeserializeObject<CloudError>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex = new CloudException(_errorBody.Message);
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_httpResponse.Headers.Contains("x-ms-request-id"))
                {
                    ex.RequestId = _httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                }
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new AzureOperationResponse<GetSensitivitySettingsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_httpResponse.Headers.Contains("x-ms-request-id"))
            {
                _result.RequestId = _httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<GetSensitivitySettingsResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
