// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AssessmentsMetadataSubscriptionOperations.
    /// </summary>
    public static partial class AssessmentsMetadataSubscriptionOperationsExtensions
    {
            /// <summary>
            /// Get metadata information on all assessment types in a specific subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SecurityAssessmentMetadata> List(this IAssessmentsMetadataSubscriptionOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metadata information on all assessment types in a specific subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecurityAssessmentMetadata>> ListAsync(this IAssessmentsMetadataSubscriptionOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metadata information on an assessment type in a specific subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessmentMetadataName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            public static SecurityAssessmentMetadata Get(this IAssessmentsMetadataSubscriptionOperations operations, string assessmentMetadataName)
            {
                return operations.GetAsync(assessmentMetadataName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metadata information on an assessment type in a specific subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessmentMetadataName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityAssessmentMetadata> GetAsync(this IAssessmentsMetadataSubscriptionOperations operations, string assessmentMetadataName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(assessmentMetadataName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create metadata information on an assessment type in a specific
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessmentMetadataName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='assessmentMetadata'>
            /// AssessmentMetadata object
            /// </param>
            public static SecurityAssessmentMetadata Create(this IAssessmentsMetadataSubscriptionOperations operations, string assessmentMetadataName, SecurityAssessmentMetadata assessmentMetadata)
            {
                return operations.CreateAsync(assessmentMetadataName, assessmentMetadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create metadata information on an assessment type in a specific
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessmentMetadataName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='assessmentMetadata'>
            /// AssessmentMetadata object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityAssessmentMetadata> CreateAsync(this IAssessmentsMetadataSubscriptionOperations operations, string assessmentMetadataName, SecurityAssessmentMetadata assessmentMetadata, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(assessmentMetadataName, assessmentMetadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete metadata information on an assessment type in a specific
            /// subscription, will cause the deletion of all the assessments of that type
            /// in that subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessmentMetadataName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            public static void Delete(this IAssessmentsMetadataSubscriptionOperations operations, string assessmentMetadataName)
            {
                operations.DeleteAsync(assessmentMetadataName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete metadata information on an assessment type in a specific
            /// subscription, will cause the deletion of all the assessments of that type
            /// in that subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessmentMetadataName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAssessmentsMetadataSubscriptionOperations operations, string assessmentMetadataName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(assessmentMetadataName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get metadata information on all assessment types in a specific subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SecurityAssessmentMetadata> ListNext(this IAssessmentsMetadataSubscriptionOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metadata information on all assessment types in a specific subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecurityAssessmentMetadata>> ListNextAsync(this IAssessmentsMetadataSubscriptionOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
