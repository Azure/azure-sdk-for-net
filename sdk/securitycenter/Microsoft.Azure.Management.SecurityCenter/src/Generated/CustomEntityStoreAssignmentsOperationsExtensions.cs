// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CustomEntityStoreAssignmentsOperations.
    /// </summary>
    public static partial class CustomEntityStoreAssignmentsOperationsExtensions
    {
            /// <summary>
            /// Gets a custom entity store assignment
            /// </summary>
            /// <remarks>
            /// Gets a single custom entity store assignment by name for the provided
            /// subscription and resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='customEntityStoreAssignmentName'>
            /// Name of the custom entity store assignment. Generated name is GUID.
            /// </param>
            public static CustomEntityStoreAssignment Get(this ICustomEntityStoreAssignmentsOperations operations, string resourceGroupName, string customEntityStoreAssignmentName)
            {
                return operations.GetAsync(resourceGroupName, customEntityStoreAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a custom entity store assignment
            /// </summary>
            /// <remarks>
            /// Gets a single custom entity store assignment by name for the provided
            /// subscription and resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='customEntityStoreAssignmentName'>
            /// Name of the custom entity store assignment. Generated name is GUID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomEntityStoreAssignment> GetAsync(this ICustomEntityStoreAssignmentsOperations operations, string resourceGroupName, string customEntityStoreAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, customEntityStoreAssignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a custom entity store assignment
            /// </summary>
            /// <remarks>
            /// Creates a custom entity store assignment for the provided subscription, if
            /// not already exists.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='customEntityStoreAssignmentName'>
            /// Name of the custom entity store assignment. Generated name is GUID.
            /// </param>
            /// <param name='principal'>
            /// The principal assigned with entity store. If not provided, will use caller
            /// principal. Format of principal is: [AAD
            /// type]=[PrincipalObjectId];[TenantId]
            /// </param>
            public static CustomEntityStoreAssignment Create(this ICustomEntityStoreAssignmentsOperations operations, string resourceGroupName, string customEntityStoreAssignmentName, string principal = default(string))
            {
                return operations.CreateAsync(resourceGroupName, customEntityStoreAssignmentName, principal).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a custom entity store assignment
            /// </summary>
            /// <remarks>
            /// Creates a custom entity store assignment for the provided subscription, if
            /// not already exists.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='customEntityStoreAssignmentName'>
            /// Name of the custom entity store assignment. Generated name is GUID.
            /// </param>
            /// <param name='principal'>
            /// The principal assigned with entity store. If not provided, will use caller
            /// principal. Format of principal is: [AAD
            /// type]=[PrincipalObjectId];[TenantId]
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomEntityStoreAssignment> CreateAsync(this ICustomEntityStoreAssignmentsOperations operations, string resourceGroupName, string customEntityStoreAssignmentName, string principal = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, customEntityStoreAssignmentName, principal, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deleted a custom entity store assignment
            /// </summary>
            /// <remarks>
            /// Delete a custom entity store assignment by name for a provided subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='customEntityStoreAssignmentName'>
            /// Name of the custom entity store assignment. Generated name is GUID.
            /// </param>
            public static void Delete(this ICustomEntityStoreAssignmentsOperations operations, string resourceGroupName, string customEntityStoreAssignmentName)
            {
                operations.DeleteAsync(resourceGroupName, customEntityStoreAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deleted a custom entity store assignment
            /// </summary>
            /// <remarks>
            /// Delete a custom entity store assignment by name for a provided subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='customEntityStoreAssignmentName'>
            /// Name of the custom entity store assignment. Generated name is GUID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICustomEntityStoreAssignmentsOperations operations, string resourceGroupName, string customEntityStoreAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, customEntityStoreAssignmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List custom entity store assignments in a subscription and a resource group
            /// </summary>
            /// <remarks>
            /// List custom entity store assignments by a provided subscription and
            /// resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            public static IPage<CustomEntityStoreAssignment> ListByResourceGroup(this ICustomEntityStoreAssignmentsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List custom entity store assignments in a subscription and a resource group
            /// </summary>
            /// <remarks>
            /// List custom entity store assignments by a provided subscription and
            /// resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CustomEntityStoreAssignment>> ListByResourceGroupAsync(this ICustomEntityStoreAssignmentsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List custom entity store assignments in a subscription
            /// </summary>
            /// <remarks>
            /// List custom entity store assignments by provided subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<CustomEntityStoreAssignment> ListBySubscription(this ICustomEntityStoreAssignmentsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List custom entity store assignments in a subscription
            /// </summary>
            /// <remarks>
            /// List custom entity store assignments by provided subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CustomEntityStoreAssignment>> ListBySubscriptionAsync(this ICustomEntityStoreAssignmentsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List custom entity store assignments in a subscription and a resource group
            /// </summary>
            /// <remarks>
            /// List custom entity store assignments by a provided subscription and
            /// resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CustomEntityStoreAssignment> ListByResourceGroupNext(this ICustomEntityStoreAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List custom entity store assignments in a subscription and a resource group
            /// </summary>
            /// <remarks>
            /// List custom entity store assignments by a provided subscription and
            /// resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CustomEntityStoreAssignment>> ListByResourceGroupNextAsync(this ICustomEntityStoreAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List custom entity store assignments in a subscription
            /// </summary>
            /// <remarks>
            /// List custom entity store assignments by provided subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CustomEntityStoreAssignment> ListBySubscriptionNext(this ICustomEntityStoreAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List custom entity store assignments in a subscription
            /// </summary>
            /// <remarks>
            /// List custom entity store assignments by provided subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CustomEntityStoreAssignment>> ListBySubscriptionNextAsync(this ICustomEntityStoreAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
