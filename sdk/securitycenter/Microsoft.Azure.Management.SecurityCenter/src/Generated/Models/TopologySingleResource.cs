// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TopologySingleResource
    {
        /// <summary>
        /// Initializes a new instance of the TopologySingleResource class.
        /// </summary>
        public TopologySingleResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TopologySingleResource class.
        /// </summary>
        /// <param name="resourceId">Azure resource id</param>
        /// <param name="severity">The security severity of the
        /// resource</param>
        /// <param name="recommendationsExist">Indicates if the resource has
        /// security recommendations</param>
        /// <param name="networkZones">Indicates the resource connectivity
        /// level to the Internet (InternetFacing, Internal ,etc.)</param>
        /// <param name="topologyScore">Score of the resource based on its
        /// security severity</param>
        /// <param name="location">The location of this resource</param>
        /// <param name="parents">Azure resources connected to this resource
        /// which are in higher level in the topology view</param>
        /// <param name="children">Azure resources connected to this resource
        /// which are in lower level in the topology view</param>
        public TopologySingleResource(string resourceId = default(string), string severity = default(string), bool? recommendationsExist = default(bool?), string networkZones = default(string), int? topologyScore = default(int?), string location = default(string), IList<TopologySingleResourceParent> parents = default(IList<TopologySingleResourceParent>), IList<TopologySingleResourceChild> children = default(IList<TopologySingleResourceChild>))
        {
            ResourceId = resourceId;
            Severity = severity;
            RecommendationsExist = recommendationsExist;
            NetworkZones = networkZones;
            TopologyScore = topologyScore;
            Location = location;
            Parents = parents;
            Children = children;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets azure resource id
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; private set; }

        /// <summary>
        /// Gets the security severity of the resource
        /// </summary>
        [JsonProperty(PropertyName = "severity")]
        public string Severity { get; private set; }

        /// <summary>
        /// Gets indicates if the resource has security recommendations
        /// </summary>
        [JsonProperty(PropertyName = "recommendationsExist")]
        public bool? RecommendationsExist { get; private set; }

        /// <summary>
        /// Gets indicates the resource connectivity level to the Internet
        /// (InternetFacing, Internal ,etc.)
        /// </summary>
        [JsonProperty(PropertyName = "networkZones")]
        public string NetworkZones { get; private set; }

        /// <summary>
        /// Gets score of the resource based on its security severity
        /// </summary>
        [JsonProperty(PropertyName = "topologyScore")]
        public int? TopologyScore { get; private set; }

        /// <summary>
        /// Gets the location of this resource
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; private set; }

        /// <summary>
        /// Gets azure resources connected to this resource which are in higher
        /// level in the topology view
        /// </summary>
        [JsonProperty(PropertyName = "parents")]
        public IList<TopologySingleResourceParent> Parents { get; private set; }

        /// <summary>
        /// Gets azure resources connected to this resource which are in lower
        /// level in the topology view
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public IList<TopologySingleResourceChild> Children { get; private set; }

    }
}
