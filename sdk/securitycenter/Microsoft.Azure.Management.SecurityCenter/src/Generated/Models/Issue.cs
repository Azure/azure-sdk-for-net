// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The issue that caused the resource to by unhealthy
    /// </summary>
    public partial class Issue
    {
        /// <summary>
        /// Initializes a new instance of the Issue class.
        /// </summary>
        public Issue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Issue class.
        /// </summary>
        /// <param name="issueKey">The unique issue key</param>
        /// <param name="issueName">The issue name</param>
        /// <param name="securityValues">The affected security values that MDC
        /// offers that will be affected by the issue, for example:
        /// recommendations, alerts, etc</param>
        /// <param name="issueDescription">The issue description</param>
        /// <param name="remediationSteps">Human readable description of what
        /// you should do to mitigate this health issue</param>
        /// <param name="remediationScript">The remediation script to solve
        /// this issue</param>
        /// <param name="issueAdditionalData">Additional data for the given
        /// issue. The additional data depends on the issue type</param>
        public Issue(string issueKey, string issueName = default(string), IList<string> securityValues = default(IList<string>), string issueDescription = default(string), string remediationSteps = default(string), string remediationScript = default(string), IDictionary<string, string> issueAdditionalData = default(IDictionary<string, string>))
        {
            IssueKey = issueKey;
            IssueName = issueName;
            SecurityValues = securityValues;
            IssueDescription = issueDescription;
            RemediationSteps = remediationSteps;
            RemediationScript = remediationScript;
            IssueAdditionalData = issueAdditionalData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique issue key
        /// </summary>
        [JsonProperty(PropertyName = "issueKey")]
        public string IssueKey { get; set; }

        /// <summary>
        /// Gets or sets the issue name
        /// </summary>
        [JsonProperty(PropertyName = "issueName")]
        public string IssueName { get; set; }

        /// <summary>
        /// Gets or sets the affected security values that MDC offers that will
        /// be affected by the issue, for example: recommendations, alerts, etc
        /// </summary>
        [JsonProperty(PropertyName = "securityValues")]
        public IList<string> SecurityValues { get; set; }

        /// <summary>
        /// Gets or sets the issue description
        /// </summary>
        [JsonProperty(PropertyName = "issueDescription")]
        public string IssueDescription { get; set; }

        /// <summary>
        /// Gets or sets human readable description of what you should do to
        /// mitigate this health issue
        /// </summary>
        [JsonProperty(PropertyName = "remediationSteps")]
        public string RemediationSteps { get; set; }

        /// <summary>
        /// Gets or sets the remediation script to solve this issue
        /// </summary>
        [JsonProperty(PropertyName = "remediationScript")]
        public string RemediationScript { get; set; }

        /// <summary>
        /// Gets or sets additional data for the given issue. The additional
        /// data depends on the issue type
        /// </summary>
        [JsonProperty(PropertyName = "issueAdditionalData")]
        public IDictionary<string, string> IssueAdditionalData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IssueKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IssueKey");
            }
        }
    }
}
