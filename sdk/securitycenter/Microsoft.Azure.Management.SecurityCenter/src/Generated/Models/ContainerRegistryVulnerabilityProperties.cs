// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Additional context fields for container registry Vulnerability
    /// assessment
    /// </summary>
    [Newtonsoft.Json.JsonObject("ContainerRegistryVulnerability")]
    public partial class ContainerRegistryVulnerabilityProperties : AdditionalData
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ContainerRegistryVulnerabilityProperties class.
        /// </summary>
        public ContainerRegistryVulnerabilityProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ContainerRegistryVulnerabilityProperties class.
        /// </summary>
        /// <param name="type">Vulnerability Type. e.g: Vulnerability,
        /// Potential Vulnerability, Information Gathered,
        /// Vulnerability</param>
        /// <param name="cvss">Dictionary from cvss version to cvss details
        /// object</param>
        /// <param name="patchable">Indicates whether a patch is available or
        /// not</param>
        /// <param name="cve">List of CVEs</param>
        /// <param name="publishedTime">Published time</param>
        /// <param name="repositoryName">Name of the repository which the
        /// vulnerable image belongs to</param>
        /// <param name="imageDigest">Digest of the vulnerable image</param>
        public ContainerRegistryVulnerabilityProperties(string type = default(string), IDictionary<string, CVSS> cvss = default(IDictionary<string, CVSS>), bool? patchable = default(bool?), IList<CVE> cve = default(IList<CVE>), System.DateTime? publishedTime = default(System.DateTime?), IList<VendorReference> vendorReferences = default(IList<VendorReference>), string repositoryName = default(string), string imageDigest = default(string))
        {
            Type = type;
            Cvss = cvss;
            Patchable = patchable;
            Cve = cve;
            PublishedTime = publishedTime;
            VendorReferences = vendorReferences;
            RepositoryName = repositoryName;
            ImageDigest = imageDigest;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets vulnerability Type. e.g: Vulnerability, Potential
        /// Vulnerability, Information Gathered, Vulnerability
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets dictionary from cvss version to cvss details object
        /// </summary>
        [JsonProperty(PropertyName = "cvss")]
        public IDictionary<string, CVSS> Cvss { get; private set; }

        /// <summary>
        /// Gets indicates whether a patch is available or not
        /// </summary>
        [JsonProperty(PropertyName = "patchable")]
        public bool? Patchable { get; private set; }

        /// <summary>
        /// Gets list of CVEs
        /// </summary>
        [JsonProperty(PropertyName = "cve")]
        public IList<CVE> Cve { get; private set; }

        /// <summary>
        /// Gets published time
        /// </summary>
        [JsonProperty(PropertyName = "publishedTime")]
        public System.DateTime? PublishedTime { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vendorReferences")]
        public IList<VendorReference> VendorReferences { get; private set; }

        /// <summary>
        /// Gets name of the repository which the vulnerable image belongs to
        /// </summary>
        [JsonProperty(PropertyName = "repositoryName")]
        public string RepositoryName { get; private set; }

        /// <summary>
        /// Gets digest of the vulnerable image
        /// </summary>
        [JsonProperty(PropertyName = "imageDigest")]
        public string ImageDigest { get; private set; }

    }
}
