// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Governance rule over a given scope
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class GovernanceRule : Resource
    {
        /// <summary>
        /// Initializes a new instance of the GovernanceRule class.
        /// </summary>
        public GovernanceRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GovernanceRule class.
        /// </summary>
        /// <param name="displayName">Display name of the governance
        /// rule</param>
        /// <param name="rulePriority">The governance rule priority, priority
        /// to the lower number. Rules with the same priority on the same scope
        /// will not be allowed</param>
        /// <param name="ruleType">The rule type of the governance rule,
        /// defines the source of the rule e.g. Integrated. Possible values
        /// include: 'Integrated', 'ServiceNow'</param>
        /// <param name="conditionSets">The governance rule conditionSets - see
        /// examples</param>
        /// <param name="ownerSource">The owner source for the governance rule
        /// - e.g. Manually by user@contoso.com - see example</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tenantId">The tenantId (GUID)</param>
        /// <param name="description">Description of the governance
        /// rule</param>
        /// <param name="remediationTimeframe">Governance rule remediation
        /// timeframe - this is the time that will affect on the grace-period
        /// duration e.g. 7.00:00:00 - means 7 days</param>
        /// <param name="isGracePeriod">Defines whether there is a grace period
        /// on the governance rule</param>
        /// <param name="isDisabled">Defines whether the rule is
        /// active/inactive</param>
        /// <param name="excludedScopes">Excluded scopes, filter out the
        /// descendants of the scope (on management scopes)</param>
        /// <param name="includeMemberScopes">Defines whether the rule is
        /// management scope rule (master connector as a single scope or
        /// management scope)</param>
        /// <param name="governanceEmailNotification">The email notifications
        /// settings for the governance rule, states whether to disable
        /// notifications for mangers and owners</param>
        public GovernanceRule(string displayName, int rulePriority, string ruleType, IList<object> conditionSets, GovernanceRuleOwnerSource ownerSource, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string tenantId = default(string), string description = default(string), string remediationTimeframe = default(string), bool? isGracePeriod = default(bool?), bool? isDisabled = default(bool?), IList<string> excludedScopes = default(IList<string>), bool? includeMemberScopes = default(bool?), GovernanceRuleEmailNotification governanceEmailNotification = default(GovernanceRuleEmailNotification), GovernanceRuleMetadata metadata = default(GovernanceRuleMetadata))
            : base(id, name, type, systemData)
        {
            TenantId = tenantId;
            DisplayName = displayName;
            Description = description;
            RemediationTimeframe = remediationTimeframe;
            IsGracePeriod = isGracePeriod;
            RulePriority = rulePriority;
            IsDisabled = isDisabled;
            RuleType = ruleType;
            ExcludedScopes = excludedScopes;
            ConditionSets = conditionSets;
            IncludeMemberScopes = includeMemberScopes;
            OwnerSource = ownerSource;
            GovernanceEmailNotification = governanceEmailNotification;
            Metadata = metadata;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for GovernanceRule class.
        /// </summary>
        static GovernanceRule()
        {
            SourceResourceType = "Assessments";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the tenantId (GUID)
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets or sets display name of the governance rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets description of the governance rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets governance rule remediation timeframe - this is the
        /// time that will affect on the grace-period duration e.g. 7.00:00:00
        /// - means 7 days
        /// </summary>
        [JsonProperty(PropertyName = "properties.remediationTimeframe")]
        public string RemediationTimeframe { get; set; }

        /// <summary>
        /// Gets or sets defines whether there is a grace period on the
        /// governance rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.isGracePeriod")]
        public bool? IsGracePeriod { get; set; }

        /// <summary>
        /// Gets or sets the governance rule priority, priority to the lower
        /// number. Rules with the same priority on the same scope will not be
        /// allowed
        /// </summary>
        [JsonProperty(PropertyName = "properties.rulePriority")]
        public int RulePriority { get; set; }

        /// <summary>
        /// Gets or sets defines whether the rule is active/inactive
        /// </summary>
        [JsonProperty(PropertyName = "properties.isDisabled")]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Gets or sets the rule type of the governance rule, defines the
        /// source of the rule e.g. Integrated. Possible values include:
        /// 'Integrated', 'ServiceNow'
        /// </summary>
        [JsonProperty(PropertyName = "properties.ruleType")]
        public string RuleType { get; set; }

        /// <summary>
        /// Gets or sets excluded scopes, filter out the descendants of the
        /// scope (on management scopes)
        /// </summary>
        [JsonProperty(PropertyName = "properties.excludedScopes")]
        public IList<string> ExcludedScopes { get; set; }

        /// <summary>
        /// Gets or sets the governance rule conditionSets - see examples
        /// </summary>
        [JsonProperty(PropertyName = "properties.conditionSets")]
        public IList<object> ConditionSets { get; set; }

        /// <summary>
        /// Gets or sets defines whether the rule is management scope rule
        /// (master connector as a single scope or management scope)
        /// </summary>
        [JsonProperty(PropertyName = "properties.includeMemberScopes")]
        public bool? IncludeMemberScopes { get; set; }

        /// <summary>
        /// Gets or sets the owner source for the governance rule - e.g.
        /// Manually by user@contoso.com - see example
        /// </summary>
        [JsonProperty(PropertyName = "properties.ownerSource")]
        public GovernanceRuleOwnerSource OwnerSource { get; set; }

        /// <summary>
        /// Gets or sets the email notifications settings for the governance
        /// rule, states whether to disable notifications for mangers and
        /// owners
        /// </summary>
        [JsonProperty(PropertyName = "properties.governanceEmailNotification")]
        public GovernanceRuleEmailNotification GovernanceEmailNotification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public GovernanceRuleMetadata Metadata { get; set; }

        /// <summary>
        /// The governance rule source, what the rule affects, e.g. Assessments
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceResourceType")]
        public static string SourceResourceType { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (RuleType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RuleType");
            }
            if (ConditionSets == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConditionSets");
            }
            if (OwnerSource == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OwnerSource");
            }
            if (RemediationTimeframe != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(RemediationTimeframe, "^[0-9]+\\.[0-9]{2}:[0-9]{2}:[0-9]{2}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "RemediationTimeframe", "^[0-9]+\\.[0-9]{2}:[0-9]{2}:[0-9]{2}$");
                }
            }
            if (RulePriority > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "RulePriority", 1000);
            }
            if (RulePriority < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "RulePriority", 0);
            }
        }
    }
}
