// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A custom alert rule that checks if a value (depends on the custom alert
    /// type) is allowed.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AllowlistCustomAlertRule")]
    public partial class AllowlistCustomAlertRule : ListCustomAlertRule
    {
        /// <summary>
        /// Initializes a new instance of the AllowlistCustomAlertRule class.
        /// </summary>
        public AllowlistCustomAlertRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AllowlistCustomAlertRule class.
        /// </summary>
        /// <param name="isEnabled">Status of the custom alert.</param>
        /// <param name="allowlistValues">The values to allow. The format of
        /// the values depends on the rule type.</param>
        /// <param name="displayName">The display name of the custom
        /// alert.</param>
        /// <param name="description">The description of the custom
        /// alert.</param>
        /// <param name="valueType">The value type of the items in the list.
        /// Possible values include: 'IpCidr', 'String'</param>
        public AllowlistCustomAlertRule(bool isEnabled, IList<string> allowlistValues, string displayName = default(string), string description = default(string), string valueType = default(string))
            : base(isEnabled, displayName, description, valueType)
        {
            AllowlistValues = allowlistValues;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the values to allow. The format of the values depends
        /// on the rule type.
        /// </summary>
        [JsonProperty(PropertyName = "allowlistValues")]
        public IList<string> AllowlistValues { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (AllowlistValues == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AllowlistValues");
            }
        }
    }
}
