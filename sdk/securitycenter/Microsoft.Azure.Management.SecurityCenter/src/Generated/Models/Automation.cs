// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The security automation resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Automation : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Automation class.
        /// </summary>
        public Automation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Automation class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Location where the resource is
        /// stored</param>
        /// <param name="kind">Kind of the resource</param>
        /// <param name="etag">Entity tag is used for comparing two or more
        /// entities from the same requested resource.</param>
        /// <param name="tags">A list of key value pairs that describe the
        /// resource.</param>
        /// <param name="description">The security automation
        /// description.</param>
        /// <param name="isEnabled">Indicates whether the security automation
        /// is enabled.</param>
        /// <param name="scopes">A collection of scopes on which the security
        /// automations logic is applied. Supported scopes are the subscription
        /// itself or a resource group under that subscription. The automation
        /// will only apply on defined scopes.</param>
        /// <param name="sources">A collection of the source event types which
        /// evaluate the security automation set of rules.</param>
        /// <param name="actions">A collection of the actions which are
        /// triggered if all the configured rules evaluations, within at least
        /// one rule set, are true.</param>
        public Automation(string id = default(string), string name = default(string), string type = default(string), string location = default(string), string kind = default(string), string etag = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), bool? isEnabled = default(bool?), IList<AutomationScope> scopes = default(IList<AutomationScope>), IList<AutomationSource> sources = default(IList<AutomationSource>), IList<AutomationAction> actions = default(IList<AutomationAction>))
            : base(id, name, type, location, kind, etag, tags)
        {
            Description = description;
            IsEnabled = isEnabled;
            Scopes = scopes;
            Sources = sources;
            Actions = actions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the security automation description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the security automation is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets a collection of scopes on which the security
        /// automations logic is applied. Supported scopes are the subscription
        /// itself or a resource group under that subscription. The automation
        /// will only apply on defined scopes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scopes")]
        public IList<AutomationScope> Scopes { get; set; }

        /// <summary>
        /// Gets or sets a collection of the source event types which evaluate
        /// the security automation set of rules.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sources")]
        public IList<AutomationSource> Sources { get; set; }

        /// <summary>
        /// Gets or sets a collection of the actions which are triggered if all
        /// the configured rules evaluations, within at least one rule set, are
        /// true.
        /// </summary>
        [JsonProperty(PropertyName = "properties.actions")]
        public IList<AutomationAction> Actions { get; set; }

    }
}
