// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// GCP cloud account connector based service to service credentials, the
    /// credentials is composed of organization id and json api key (write
    /// only)&lt;/a&gt;
    /// </summary>
    [Newtonsoft.Json.JsonObject("gcpCredentials")]
    public partial class GcpCredentialsDetailsProperties : AuthenticationDetailsProperties
    {
        /// <summary>
        /// Initializes a new instance of the GcpCredentialsDetailsProperties
        /// class.
        /// </summary>
        public GcpCredentialsDetailsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GcpCredentialsDetailsProperties
        /// class.
        /// </summary>
        /// <param name="organizationId">The Organization ID of the GCP cloud
        /// account</param>
        /// <param name="type">Type field of the API key (write only)</param>
        /// <param name="projectId">Project Id field of the API key (write
        /// only)</param>
        /// <param name="privateKeyId">Private key Id field of the API key
        /// (write only)</param>
        /// <param name="privateKey">Private key field of the API key (write
        /// only)</param>
        /// <param name="clientEmail">Client email field of the API key (write
        /// only)</param>
        /// <param name="clientId">Client Id field of the API key (write
        /// only)</param>
        /// <param name="authUri">Auth Uri field of the API key (write
        /// only)</param>
        /// <param name="tokenUri">Token Uri field of the API key (write
        /// only)</param>
        /// <param name="authProviderX509CertUrl">Auth provider x509
        /// certificate url field of the API key (write only)</param>
        /// <param name="clientX509CertUrl">Client x509 certificate url field
        /// of the API key (write only)</param>
        /// <param name="authenticationProvisioningState">State of the
        /// multi-cloud connector. Possible values include: 'Valid', 'Invalid',
        /// 'Expired', 'IncorrectPolicy'</param>
        /// <param name="grantedPermissions">The permissions detected in the
        /// cloud account.</param>
        public GcpCredentialsDetailsProperties(string organizationId, string type, string projectId, string privateKeyId, string privateKey, string clientEmail, string clientId, string authUri, string tokenUri, string authProviderX509CertUrl, string clientX509CertUrl, string authenticationProvisioningState = default(string), IList<string> grantedPermissions = default(IList<string>))
            : base(authenticationProvisioningState, grantedPermissions)
        {
            OrganizationId = organizationId;
            Type = type;
            ProjectId = projectId;
            PrivateKeyId = privateKeyId;
            PrivateKey = privateKey;
            ClientEmail = clientEmail;
            ClientId = clientId;
            AuthUri = authUri;
            TokenUri = tokenUri;
            AuthProviderX509CertUrl = authProviderX509CertUrl;
            ClientX509CertUrl = clientX509CertUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Organization ID of the GCP cloud account
        /// </summary>
        [JsonProperty(PropertyName = "organizationId")]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets type field of the API key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets project Id field of the API key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "projectId")]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or sets private key Id field of the API key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "privateKeyId")]
        public string PrivateKeyId { get; set; }

        /// <summary>
        /// Gets or sets private key field of the API key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "privateKey")]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Gets or sets client email field of the API key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "clientEmail")]
        public string ClientEmail { get; set; }

        /// <summary>
        /// Gets or sets client Id field of the API key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or sets auth Uri field of the API key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "authUri")]
        public string AuthUri { get; set; }

        /// <summary>
        /// Gets or sets token Uri field of the API key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "tokenUri")]
        public string TokenUri { get; set; }

        /// <summary>
        /// Gets or sets auth provider x509 certificate url field of the API
        /// key (write only)
        /// </summary>
        [JsonProperty(PropertyName = "authProviderX509CertUrl")]
        public string AuthProviderX509CertUrl { get; set; }

        /// <summary>
        /// Gets or sets client x509 certificate url field of the API key
        /// (write only)
        /// </summary>
        [JsonProperty(PropertyName = "clientX509CertUrl")]
        public string ClientX509CertUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OrganizationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrganizationId");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (ProjectId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProjectId");
            }
            if (PrivateKeyId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrivateKeyId");
            }
            if (PrivateKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrivateKey");
            }
            if (ClientEmail == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientEmail");
            }
            if (ClientId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientId");
            }
            if (AuthUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AuthUri");
            }
            if (TokenUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TokenUri");
            }
            if (AuthProviderX509CertUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AuthProviderX509CertUrl");
            }
            if (ClientX509CertUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientX509CertUrl");
            }
        }
    }
}
