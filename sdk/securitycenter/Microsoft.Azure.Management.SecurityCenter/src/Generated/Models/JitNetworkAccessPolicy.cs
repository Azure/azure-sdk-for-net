// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class JitNetworkAccessPolicy
    {
        /// <summary>
        /// Initializes a new instance of the JitNetworkAccessPolicy class.
        /// </summary>
        public JitNetworkAccessPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JitNetworkAccessPolicy class.
        /// </summary>
        /// <param name="virtualMachines">Configurations for
        /// Microsoft.Compute/virtualMachines resource type.</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="kind">Kind of the resource</param>
        /// <param name="location">Location where the resource is
        /// stored</param>
        /// <param name="provisioningState">Gets the provisioning state of the
        /// Just-in-Time policy.</param>
        public JitNetworkAccessPolicy(IList<JitNetworkAccessPolicyVirtualMachine> virtualMachines, string id = default(string), string name = default(string), string type = default(string), string kind = default(string), string location = default(string), IList<JitNetworkAccessRequest> requests = default(IList<JitNetworkAccessRequest>), string provisioningState = default(string))
        {
            Id = id;
            Name = name;
            Type = type;
            Kind = kind;
            Location = location;
            VirtualMachines = virtualMachines;
            Requests = requests;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets resource Id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets resource name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets resource type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets kind of the resource
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets location where the resource is stored
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; private set; }

        /// <summary>
        /// Gets or sets configurations for Microsoft.Compute/virtualMachines
        /// resource type.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualMachines")]
        public IList<JitNetworkAccessPolicyVirtualMachine> VirtualMachines { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.requests")]
        public IList<JitNetworkAccessRequest> Requests { get; set; }

        /// <summary>
        /// Gets the provisioning state of the Just-in-Time policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VirtualMachines == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VirtualMachines");
            }
            if (VirtualMachines != null)
            {
                foreach (var element in VirtualMachines)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Requests != null)
            {
                foreach (var element1 in Requests)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
