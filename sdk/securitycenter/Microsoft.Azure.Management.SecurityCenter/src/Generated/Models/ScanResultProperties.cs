// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A vulnerability assessment scan result properties for a single rule.
    /// </summary>
    public partial class ScanResultProperties
    {
        /// <summary>
        /// Initializes a new instance of the ScanResultProperties class.
        /// </summary>
        public ScanResultProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScanResultProperties class.
        /// </summary>
        /// <param name="ruleId">The rule Id.</param>
        /// <param name="status">Possible values include: 'NonFinding',
        /// 'Finding', 'InternalError'</param>
        /// <param name="isTrimmed">Indicated whether the results specified
        /// here are trimmed.</param>
        /// <param name="queryResults">The results of the query that was
        /// run.</param>
        public ScanResultProperties(string ruleId = default(string), string status = default(string), bool? isTrimmed = default(bool?), IList<IList<string>> queryResults = default(IList<IList<string>>), Remediation remediation = default(Remediation), BaselineAdjustedResult baselineAdjustedResult = default(BaselineAdjustedResult), VaRule ruleMetadata = default(VaRule))
        {
            RuleId = ruleId;
            Status = status;
            IsTrimmed = isTrimmed;
            QueryResults = queryResults;
            Remediation = remediation;
            BaselineAdjustedResult = baselineAdjustedResult;
            RuleMetadata = ruleMetadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the rule Id.
        /// </summary>
        [JsonProperty(PropertyName = "ruleId")]
        public string RuleId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NonFinding', 'Finding',
        /// 'InternalError'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets indicated whether the results specified here are
        /// trimmed.
        /// </summary>
        [JsonProperty(PropertyName = "isTrimmed")]
        public bool? IsTrimmed { get; set; }

        /// <summary>
        /// Gets or sets the results of the query that was run.
        /// </summary>
        [JsonProperty(PropertyName = "queryResults")]
        public IList<IList<string>> QueryResults { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "remediation")]
        public Remediation Remediation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "baselineAdjustedResult")]
        public BaselineAdjustedResult BaselineAdjustedResult { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ruleMetadata")]
        public VaRule RuleMetadata { get; set; }

    }
}
