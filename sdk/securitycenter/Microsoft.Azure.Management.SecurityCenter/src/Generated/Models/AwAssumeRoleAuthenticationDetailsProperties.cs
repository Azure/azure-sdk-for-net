// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AWS cloud account connector based assume role, the role enables
    /// delegating access to your AWS resources. The role is composed of role
    /// Amazon Resource Name (ARN) and external ID. For more details, refer to
    /// &lt;a
    /// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html"&gt;Creating
    /// a Role to Delegate Permissions to an IAM User (write only)&lt;/a&gt;
    /// </summary>
    [Newtonsoft.Json.JsonObject("awsAssumeRole")]
    public partial class AwAssumeRoleAuthenticationDetailsProperties : AuthenticationDetailsProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AwAssumeRoleAuthenticationDetailsProperties class.
        /// </summary>
        public AwAssumeRoleAuthenticationDetailsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AwAssumeRoleAuthenticationDetailsProperties class.
        /// </summary>
        /// <param name="awsAssumeRoleArn">Assumed role ID is an identifier
        /// that you can use to create temporary security credentials.</param>
        /// <param name="awsExternalId">A unique identifier that is required
        /// when you assume a role in another account.</param>
        /// <param name="authenticationProvisioningState">State of the
        /// multi-cloud connector. Possible values include: 'Valid', 'Invalid',
        /// 'Expired', 'IncorrectPolicy'</param>
        /// <param name="grantedPermissions">The permissions detected in the
        /// cloud account.</param>
        /// <param name="accountId">The ID of the cloud account</param>
        public AwAssumeRoleAuthenticationDetailsProperties(string awsAssumeRoleArn, string awsExternalId, string authenticationProvisioningState = default(string), IList<string> grantedPermissions = default(IList<string>), string accountId = default(string))
            : base(authenticationProvisioningState, grantedPermissions)
        {
            AccountId = accountId;
            AwsAssumeRoleArn = awsAssumeRoleArn;
            AwsExternalId = awsExternalId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the ID of the cloud account
        /// </summary>
        [JsonProperty(PropertyName = "accountId")]
        public string AccountId { get; private set; }

        /// <summary>
        /// Gets or sets assumed role ID is an identifier that you can use to
        /// create temporary security credentials.
        /// </summary>
        [JsonProperty(PropertyName = "awsAssumeRoleArn")]
        public string AwsAssumeRoleArn { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier that is required when you assume a
        /// role in another account.
        /// </summary>
        [JsonProperty(PropertyName = "awsExternalId")]
        public string AwsExternalId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AwsAssumeRoleArn == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AwsAssumeRoleArn");
            }
            if (AwsExternalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AwsExternalId");
            }
        }
    }
}
