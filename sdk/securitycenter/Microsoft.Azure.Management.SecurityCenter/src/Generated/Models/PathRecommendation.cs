// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a path that is recommended to be allowed and its properties
    /// </summary>
    public partial class PathRecommendation
    {
        /// <summary>
        /// Initializes a new instance of the PathRecommendation class.
        /// </summary>
        public PathRecommendation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PathRecommendation class.
        /// </summary>
        /// <param name="path">The full path of the file, or an identifier of
        /// the application</param>
        /// <param name="action">Possible values include: 'Recommended', 'Add',
        /// 'Remove'</param>
        /// <param name="type">Possible values include: 'File', 'FileHash',
        /// 'PublisherSignature', 'ProductSignature', 'BinarySignature',
        /// 'VersionAndAboveSignature'</param>
        /// <param name="common">Whether the application is commonly run on the
        /// machine</param>
        /// <param name="fileType">Possible values include: 'Exe', 'Dll',
        /// 'Msi', 'Script', 'Executable', 'Unknown'</param>
        /// <param name="configurationStatus">Possible values include:
        /// 'Configured', 'NotConfigured', 'InProgress', 'Failed',
        /// 'NoStatus'</param>
        public PathRecommendation(string path = default(string), string action = default(string), string type = default(string), PublisherInfo publisherInfo = default(PublisherInfo), bool? common = default(bool?), IList<string> userSids = default(IList<string>), IList<UserRecommendation> usernames = default(IList<UserRecommendation>), string fileType = default(string), string configurationStatus = default(string))
        {
            Path = path;
            Action = action;
            Type = type;
            PublisherInfo = publisherInfo;
            Common = common;
            UserSids = userSids;
            Usernames = usernames;
            FileType = fileType;
            ConfigurationStatus = configurationStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the full path of the file, or an identifier of the
        /// application
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Recommended', 'Add',
        /// 'Remove'
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'File', 'FileHash',
        /// 'PublisherSignature', 'ProductSignature', 'BinarySignature',
        /// 'VersionAndAboveSignature'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "publisherInfo")]
        public PublisherInfo PublisherInfo { get; set; }

        /// <summary>
        /// Gets or sets whether the application is commonly run on the machine
        /// </summary>
        [JsonProperty(PropertyName = "common")]
        public bool? Common { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userSids")]
        public IList<string> UserSids { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "usernames")]
        public IList<UserRecommendation> Usernames { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Exe', 'Dll', 'Msi',
        /// 'Script', 'Executable', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "fileType")]
        public string FileType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Configured',
        /// 'NotConfigured', 'InProgress', 'Failed', 'NoStatus'
        /// </summary>
        [JsonProperty(PropertyName = "configurationStatus")]
        public string ConfigurationStatus { get; set; }

    }
}
