// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Secure score item data model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SecureScoreItem : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SecureScoreItem class.
        /// </summary>
        public SecureScoreItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecureScoreItem class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="displayName">The initiative’s name</param>
        /// <param name="max">Maximum score available</param>
        /// <param name="current">Current score</param>
        public SecureScoreItem(string id = default(string), string name = default(string), string type = default(string), string displayName = default(string), int? max = default(int?), double? current = default(double?))
            : base(id, name, type)
        {
            DisplayName = displayName;
            Max = max;
            Current = current;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the initiative’s name
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets maximum score available
        /// </summary>
        [JsonProperty(PropertyName = "properties.score.max")]
        public int? Max { get; private set; }

        /// <summary>
        /// Gets current score
        /// </summary>
        [JsonProperty(PropertyName = "properties.score.current")]
        public double? Current { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Max < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Max", 0);
            }
            if (Current < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Current", 0);
            }
        }
    }
}
