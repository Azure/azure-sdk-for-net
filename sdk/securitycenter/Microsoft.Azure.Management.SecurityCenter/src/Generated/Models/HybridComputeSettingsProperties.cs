// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Settings for hybrid compute management
    /// </summary>
    public partial class HybridComputeSettingsProperties
    {
        /// <summary>
        /// Initializes a new instance of the HybridComputeSettingsProperties
        /// class.
        /// </summary>
        public HybridComputeSettingsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HybridComputeSettingsProperties
        /// class.
        /// </summary>
        /// <param name="autoProvision">Whether or not to automatically install
        /// Azure Arc (hybrid compute) agents on machines. Possible values
        /// include: 'On', 'Off'</param>
        /// <param name="hybridComputeProvisioningState">State of the service
        /// principal and its secret. Possible values include: 'Valid',
        /// 'Invalid', 'Expired'</param>
        /// <param name="resourceGroupName">The name of the resource group
        /// where Arc (Hybrid Compute) connectors are connected.</param>
        /// <param name="region">The location where the metadata of machines
        /// will be stored</param>
        /// <param name="proxyServer">For a non-Azure machine that is not
        /// connected directly to the internet, specify a proxy server that the
        /// non-Azure machine can use.</param>
        /// <param name="servicePrincipal">An object to access resources that
        /// are secured by an Azure AD tenant.</param>
        public HybridComputeSettingsProperties(string autoProvision, string hybridComputeProvisioningState = default(string), string resourceGroupName = default(string), string region = default(string), ProxyServerProperties proxyServer = default(ProxyServerProperties), ServicePrincipalProperties servicePrincipal = default(ServicePrincipalProperties))
        {
            HybridComputeProvisioningState = hybridComputeProvisioningState;
            AutoProvision = autoProvision;
            ResourceGroupName = resourceGroupName;
            Region = region;
            ProxyServer = proxyServer;
            ServicePrincipal = servicePrincipal;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets state of the service principal and its secret. Possible values
        /// include: 'Valid', 'Invalid', 'Expired'
        /// </summary>
        [JsonProperty(PropertyName = "hybridComputeProvisioningState")]
        public string HybridComputeProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets whether or not to automatically install Azure Arc
        /// (hybrid compute) agents on machines. Possible values include: 'On',
        /// 'Off'
        /// </summary>
        [JsonProperty(PropertyName = "autoProvision")]
        public string AutoProvision { get; set; }

        /// <summary>
        /// Gets or sets the name of the resource group where Arc (Hybrid
        /// Compute) connectors are connected.
        /// </summary>
        [JsonProperty(PropertyName = "resourceGroupName")]
        public string ResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets the location where the metadata of machines will be
        /// stored
        /// </summary>
        [JsonProperty(PropertyName = "region")]
        public string Region { get; set; }

        /// <summary>
        /// Gets or sets for a non-Azure machine that is not connected directly
        /// to the internet, specify a proxy server that the non-Azure machine
        /// can use.
        /// </summary>
        [JsonProperty(PropertyName = "proxyServer")]
        public ProxyServerProperties ProxyServer { get; set; }

        /// <summary>
        /// Gets or sets an object to access resources that are secured by an
        /// Azure AD tenant.
        /// </summary>
        [JsonProperty(PropertyName = "servicePrincipal")]
        public ServicePrincipalProperties ServicePrincipal { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AutoProvision == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AutoProvision");
            }
        }
    }
}
