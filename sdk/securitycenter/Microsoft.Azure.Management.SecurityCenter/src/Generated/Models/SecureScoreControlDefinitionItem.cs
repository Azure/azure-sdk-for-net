// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about the security control.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SecureScoreControlDefinitionItem : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SecureScoreControlDefinitionItem
        /// class.
        /// </summary>
        public SecureScoreControlDefinitionItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecureScoreControlDefinitionItem
        /// class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="displayName">User friendly display name of the
        /// control</param>
        /// <param name="description">User friendly description of the
        /// control</param>
        /// <param name="maxScore">Maximum control score (0..10)</param>
        /// <param name="source">Source object from which the control was
        /// created</param>
        /// <param name="assessmentDefinitions">Array of assessments metadata
        /// IDs that are included in this security control</param>
        public SecureScoreControlDefinitionItem(string id = default(string), string name = default(string), string type = default(string), string displayName = default(string), string description = default(string), int? maxScore = default(int?), SecureScoreControlDefinitionSource source = default(SecureScoreControlDefinitionSource), IList<AzureResourceLink> assessmentDefinitions = default(IList<AzureResourceLink>))
            : base(id, name, type)
        {
            DisplayName = displayName;
            Description = description;
            MaxScore = maxScore;
            Source = source;
            AssessmentDefinitions = assessmentDefinitions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets user friendly display name of the control
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets user friendly description of the control
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets maximum control score (0..10)
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxScore")]
        public int? MaxScore { get; private set; }

        /// <summary>
        /// Gets source object from which the control was created
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public SecureScoreControlDefinitionSource Source { get; private set; }

        /// <summary>
        /// Gets array of assessments metadata IDs that are included in this
        /// security control
        /// </summary>
        [JsonProperty(PropertyName = "properties.assessmentDefinitions")]
        public IList<AzureResourceLink> AssessmentDefinitions { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Description != null)
            {
                if (Description.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 256);
                }
            }
            if (MaxScore != null)
            {
                if (MaxScore > 10)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxScore", 10);
                }
                if (MaxScore < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxScore", 0);
                }
            }
        }
    }
}
