// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Rules results input.
    /// </summary>
    public partial class RulesResultsInput
    {
        /// <summary>
        /// Initializes a new instance of the RulesResultsInput class.
        /// </summary>
        public RulesResultsInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RulesResultsInput class.
        /// </summary>
        /// <param name="latestScan">Take results from latest scan.</param>
        /// <param name="results">Expected results to be inserted into the
        /// baseline.
        /// Leave this field empty it LatestScan == true.</param>
        public RulesResultsInput(bool? latestScan = default(bool?), IDictionary<string, IList<IList<string>>> results = default(IDictionary<string, IList<IList<string>>>))
        {
            LatestScan = latestScan;
            Results = results;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets take results from latest scan.
        /// </summary>
        [JsonProperty(PropertyName = "latestScan")]
        public bool? LatestScan { get; set; }

        /// <summary>
        /// Gets or sets expected results to be inserted into the baseline.
        /// Leave this field empty it LatestScan == true.
        /// </summary>
        [JsonProperty(PropertyName = "results")]
        public IDictionary<string, IList<IList<string>>> Results { get; set; }

    }
}
