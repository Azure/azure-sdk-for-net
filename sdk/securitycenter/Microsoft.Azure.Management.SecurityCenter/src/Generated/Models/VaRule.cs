// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// vulnerability assessment rule metadata details.
    /// </summary>
    public partial class VaRule
    {
        /// <summary>
        /// Initializes a new instance of the VaRule class.
        /// </summary>
        public VaRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VaRule class.
        /// </summary>
        /// <param name="ruleId">The rule Id.</param>
        /// <param name="severity">Possible values include: 'High', 'Medium',
        /// 'Low', 'Informational', 'Obsolete'</param>
        /// <param name="category">The rule category.</param>
        /// <param name="ruleType">Possible values include: 'Binary',
        /// 'BaselineExpected', 'PositiveList', 'NegativeList'</param>
        /// <param name="title">The rule title.</param>
        /// <param name="description">The rule description.</param>
        /// <param name="rationale">The rule rationale.</param>
        /// <param name="benchmarkReferences">The benchmark references.</param>
        public VaRule(string ruleId = default(string), string severity = default(string), string category = default(string), string ruleType = default(string), string title = default(string), string description = default(string), string rationale = default(string), QueryCheck queryCheck = default(QueryCheck), IList<BenchmarkReference> benchmarkReferences = default(IList<BenchmarkReference>))
        {
            RuleId = ruleId;
            Severity = severity;
            Category = category;
            RuleType = ruleType;
            Title = title;
            Description = description;
            Rationale = rationale;
            QueryCheck = queryCheck;
            BenchmarkReferences = benchmarkReferences;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the rule Id.
        /// </summary>
        [JsonProperty(PropertyName = "ruleId")]
        public string RuleId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'High', 'Medium', 'Low',
        /// 'Informational', 'Obsolete'
        /// </summary>
        [JsonProperty(PropertyName = "severity")]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or sets the rule category.
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Binary', 'BaselineExpected',
        /// 'PositiveList', 'NegativeList'
        /// </summary>
        [JsonProperty(PropertyName = "ruleType")]
        public string RuleType { get; set; }

        /// <summary>
        /// Gets or sets the rule title.
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the rule description.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the rule rationale.
        /// </summary>
        [JsonProperty(PropertyName = "rationale")]
        public string Rationale { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "queryCheck")]
        public QueryCheck QueryCheck { get; set; }

        /// <summary>
        /// Gets or sets the benchmark references.
        /// </summary>
        [JsonProperty(PropertyName = "benchmarkReferences")]
        public IList<BenchmarkReference> BenchmarkReferences { get; set; }

    }
}
