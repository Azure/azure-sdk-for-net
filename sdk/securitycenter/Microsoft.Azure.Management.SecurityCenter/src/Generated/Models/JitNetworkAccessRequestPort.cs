// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class JitNetworkAccessRequestPort
    {
        /// <summary>
        /// Initializes a new instance of the JitNetworkAccessRequestPort
        /// class.
        /// </summary>
        public JitNetworkAccessRequestPort()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JitNetworkAccessRequestPort
        /// class.
        /// </summary>
        /// <param name="endTimeUtc">The date &amp; time at which the request
        /// ends in UTC</param>
        /// <param name="status">The status of the port. Possible values
        /// include: 'Revoked', 'Initiated'</param>
        /// <param name="statusReason">A description of why the `status` has
        /// its value. Possible values include: 'Expired', 'UserRequested',
        /// 'NewerRequestInitiated'</param>
        /// <param name="allowedSourceAddressPrefix">Mutually exclusive with
        /// the "allowedSourceAddressPrefixes" parameter. Should be an IP
        /// address or CIDR, for example "192.168.0.3" or
        /// "192.168.0.0/16".</param>
        /// <param name="allowedSourceAddressPrefixes">Mutually exclusive with
        /// the "allowedSourceAddressPrefix" parameter.</param>
        public JitNetworkAccessRequestPort(int number, System.DateTime endTimeUtc, string status, string statusReason, string allowedSourceAddressPrefix = default(string), IList<string> allowedSourceAddressPrefixes = default(IList<string>))
        {
            Number = number;
            AllowedSourceAddressPrefix = allowedSourceAddressPrefix;
            AllowedSourceAddressPrefixes = allowedSourceAddressPrefixes;
            EndTimeUtc = endTimeUtc;
            Status = status;
            StatusReason = statusReason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "number")]
        public int Number { get; set; }

        /// <summary>
        /// Gets or sets mutually exclusive with the
        /// "allowedSourceAddressPrefixes" parameter. Should be an IP address
        /// or CIDR, for example "192.168.0.3" or "192.168.0.0/16".
        /// </summary>
        [JsonProperty(PropertyName = "allowedSourceAddressPrefix")]
        public string AllowedSourceAddressPrefix { get; set; }

        /// <summary>
        /// Gets or sets mutually exclusive with the
        /// "allowedSourceAddressPrefix" parameter.
        /// </summary>
        [JsonProperty(PropertyName = "allowedSourceAddressPrefixes")]
        public IList<string> AllowedSourceAddressPrefixes { get; set; }

        /// <summary>
        /// Gets or sets the date &amp;amp; time at which the request ends in
        /// UTC
        /// </summary>
        [JsonProperty(PropertyName = "endTimeUtc")]
        public System.DateTime EndTimeUtc { get; set; }

        /// <summary>
        /// Gets or sets the status of the port. Possible values include:
        /// 'Revoked', 'Initiated'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets a description of why the `status` has its value.
        /// Possible values include: 'Expired', 'UserRequested',
        /// 'NewerRequestInitiated'
        /// </summary>
        [JsonProperty(PropertyName = "statusReason")]
        public string StatusReason { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (StatusReason == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StatusReason");
            }
        }
    }
}
