// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// IoT alert type.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class IotAlertType : Resource
    {
        /// <summary>
        /// Initializes a new instance of the IotAlertType class.
        /// </summary>
        public IotAlertType()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IotAlertType class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="alertDisplayName">The display name of the
        /// alert</param>
        /// <param name="severity">The severity of the alert. Possible values
        /// include: 'Informational', 'Low', 'Medium', 'High'</param>
        /// <param name="description">Description of the suspected
        /// vulnerability and meaning.</param>
        /// <param name="providerName">The name of the alert provider or
        /// internal partner</param>
        /// <param name="productName">The name of the product which published
        /// this alert</param>
        /// <param name="productComponentName">The name of a component inside
        /// the product which generated the alert</param>
        /// <param name="vendorName">The name of the vendor that raise the
        /// alert</param>
        /// <param name="intent">Kill chain related intent behind the alert.
        /// Could contain multiple enum values (separated by commas). Possible
        /// values include: 'Unknown', 'PreAttack', 'InitialAccess',
        /// 'Persistence', 'PrivilegeEscalation', 'DefenseEvasion',
        /// 'CredentialAccess', 'Discovery', 'LateralMovement', 'Execution',
        /// 'Collection', 'Exfiltration', 'CommandAndControl', 'Impact',
        /// 'Probing', 'Exploitation'</param>
        /// <param name="remediationSteps">Manual action items to take to
        /// remediate the alert</param>
        public IotAlertType(string id = default(string), string name = default(string), string type = default(string), string alertDisplayName = default(string), string severity = default(string), string description = default(string), string providerName = default(string), string productName = default(string), string productComponentName = default(string), string vendorName = default(string), string intent = default(string), IList<string> remediationSteps = default(IList<string>))
            : base(id, name, type)
        {
            AlertDisplayName = alertDisplayName;
            Severity = severity;
            Description = description;
            ProviderName = providerName;
            ProductName = productName;
            ProductComponentName = productComponentName;
            VendorName = vendorName;
            Intent = intent;
            RemediationSteps = remediationSteps;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the display name of the alert
        /// </summary>
        [JsonProperty(PropertyName = "properties.alertDisplayName")]
        public string AlertDisplayName { get; private set; }

        /// <summary>
        /// Gets the severity of the alert. Possible values include:
        /// 'Informational', 'Low', 'Medium', 'High'
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public string Severity { get; private set; }

        /// <summary>
        /// Gets description of the suspected vulnerability and meaning.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets the name of the alert provider or internal partner
        /// </summary>
        [JsonProperty(PropertyName = "properties.providerName")]
        public string ProviderName { get; private set; }

        /// <summary>
        /// Gets the name of the product which published this alert
        /// </summary>
        [JsonProperty(PropertyName = "properties.productName")]
        public string ProductName { get; private set; }

        /// <summary>
        /// Gets the name of a component inside the product which generated the
        /// alert
        /// </summary>
        [JsonProperty(PropertyName = "properties.productComponentName")]
        public string ProductComponentName { get; private set; }

        /// <summary>
        /// Gets the name of the vendor that raise the alert
        /// </summary>
        [JsonProperty(PropertyName = "properties.vendorName")]
        public string VendorName { get; private set; }

        /// <summary>
        /// Gets kill chain related intent behind the alert. Could contain
        /// multiple enum values (separated by commas). Possible values
        /// include: 'Unknown', 'PreAttack', 'InitialAccess', 'Persistence',
        /// 'PrivilegeEscalation', 'DefenseEvasion', 'CredentialAccess',
        /// 'Discovery', 'LateralMovement', 'Execution', 'Collection',
        /// 'Exfiltration', 'CommandAndControl', 'Impact', 'Probing',
        /// 'Exploitation'
        /// </summary>
        [JsonProperty(PropertyName = "properties.intent")]
        public string Intent { get; private set; }

        /// <summary>
        /// Gets manual action items to take to remediate the alert
        /// </summary>
        [JsonProperty(PropertyName = "properties.remediationSteps")]
        public IList<string> RemediationSteps { get; private set; }

    }
}
