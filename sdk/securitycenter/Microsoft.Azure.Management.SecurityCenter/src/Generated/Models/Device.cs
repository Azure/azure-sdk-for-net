// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Device model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Device : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Device class.
        /// </summary>
        public Device()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Device class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="displayName">Device display name given by the
        /// collector</param>
        /// <param name="deviceType">Device type.</param>
        /// <param name="sourceName">The source that created the device</param>
        /// <param name="networkInterfaces">List of network interfaces.</param>
        /// <param name="vendor">Device vendor</param>
        /// <param name="osName">Device operating system name.</param>
        /// <param name="protocols">List of protocols.</param>
        /// <param name="lastActiveTime">last time the device was active in the
        /// network</param>
        /// <param name="lastUpdateTime">last time the device was
        /// updated</param>
        /// <param name="managementState">Managed state of the device. Possible
        /// values include: 'Managed', 'Unmanaged'</param>
        /// <param name="authorizationState">Authorized state of the device.
        /// Possible values include: 'Authorized', 'Unauthorized'</param>
        /// <param name="deviceCriticality">Device criticality. Possible values
        /// include: 'Important', 'Standard'</param>
        /// <param name="purdueLevel">Purdue level of the device. Possible
        /// values include: 'ProcessControl', 'Supervisory',
        /// 'Enterprise'</param>
        /// <param name="notes">user notes for the device, up to 300
        /// characters.</param>
        /// <param name="firmwares">List of device firmwares.</param>
        /// <param name="discoveryTime">Discovered time of the device.</param>
        /// <param name="programmingState">Indicates whether this device is
        /// programming. Possible values include: 'ProgrammingDevice',
        /// 'NotProgrammingDevice'</param>
        /// <param name="lastProgrammingTime">last time the device was
        /// programming or programed.</param>
        /// <param name="scanningFunctionality">Indicates whether the device is
        /// a scanner. Possible values include: 'ScannerDevice',
        /// 'NotScannerDevice'</param>
        /// <param name="lastScanTime">last time the device was
        /// scanning.</param>
        /// <param name="riskScore">risk score of the device.</param>
        /// <param name="sensors">List of sensors that scanned this
        /// device.</param>
        /// <param name="deviceStatus">Device status. Possible values include:
        /// 'Active', 'Removed'</param>
        public Device(string id = default(string), string name = default(string), string type = default(string), string displayName = default(string), string deviceType = default(string), string sourceName = default(string), IList<NetworkInterface> networkInterfaces = default(IList<NetworkInterface>), string vendor = default(string), string osName = default(string), IList<Protocol1> protocols = default(IList<Protocol1>), System.DateTime? lastActiveTime = default(System.DateTime?), System.DateTime? lastUpdateTime = default(System.DateTime?), string managementState = default(string), string authorizationState = default(string), string deviceCriticality = default(string), string purdueLevel = default(string), string notes = default(string), IList<Firmware> firmwares = default(IList<Firmware>), System.DateTime? discoveryTime = default(System.DateTime?), string programmingState = default(string), System.DateTime? lastProgrammingTime = default(System.DateTime?), string scanningFunctionality = default(string), System.DateTime? lastScanTime = default(System.DateTime?), int? riskScore = default(int?), IList<Sensor> sensors = default(IList<Sensor>), Site site = default(Site), string deviceStatus = default(string))
            : base(id, name, type)
        {
            DisplayName = displayName;
            DeviceType = deviceType;
            SourceName = sourceName;
            NetworkInterfaces = networkInterfaces;
            Vendor = vendor;
            OsName = osName;
            Protocols = protocols;
            LastActiveTime = lastActiveTime;
            LastUpdateTime = lastUpdateTime;
            ManagementState = managementState;
            AuthorizationState = authorizationState;
            DeviceCriticality = deviceCriticality;
            PurdueLevel = purdueLevel;
            Notes = notes;
            Firmwares = firmwares;
            DiscoveryTime = discoveryTime;
            ProgrammingState = programmingState;
            LastProgrammingTime = lastProgrammingTime;
            ScanningFunctionality = scanningFunctionality;
            LastScanTime = lastScanTime;
            RiskScore = riskScore;
            Sensors = sensors;
            Site = site;
            DeviceStatus = deviceStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets device display name given by the collector
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets device type.
        /// </summary>
        [JsonProperty(PropertyName = "properties.deviceType")]
        public string DeviceType { get; set; }

        /// <summary>
        /// Gets the source that created the device
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceName")]
        public string SourceName { get; private set; }

        /// <summary>
        /// Gets list of network interfaces.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkInterfaces")]
        public IList<NetworkInterface> NetworkInterfaces { get; private set; }

        /// <summary>
        /// Gets device vendor
        /// </summary>
        [JsonProperty(PropertyName = "properties.vendor")]
        public string Vendor { get; private set; }

        /// <summary>
        /// Gets or sets device operating system name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.osName")]
        public string OsName { get; set; }

        /// <summary>
        /// Gets list of protocols.
        /// </summary>
        [JsonProperty(PropertyName = "properties.protocols")]
        public IList<Protocol1> Protocols { get; private set; }

        /// <summary>
        /// Gets last time the device was active in the network
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastActiveTime")]
        public System.DateTime? LastActiveTime { get; private set; }

        /// <summary>
        /// Gets last time the device was updated
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastUpdateTime")]
        public System.DateTime? LastUpdateTime { get; private set; }

        /// <summary>
        /// Gets managed state of the device. Possible values include:
        /// 'Managed', 'Unmanaged'
        /// </summary>
        [JsonProperty(PropertyName = "properties.managementState")]
        public string ManagementState { get; private set; }

        /// <summary>
        /// Gets or sets authorized state of the device. Possible values
        /// include: 'Authorized', 'Unauthorized'
        /// </summary>
        [JsonProperty(PropertyName = "properties.authorizationState")]
        public string AuthorizationState { get; set; }

        /// <summary>
        /// Gets or sets device criticality. Possible values include:
        /// 'Important', 'Standard'
        /// </summary>
        [JsonProperty(PropertyName = "properties.deviceCriticality")]
        public string DeviceCriticality { get; set; }

        /// <summary>
        /// Gets or sets purdue level of the device. Possible values include:
        /// 'ProcessControl', 'Supervisory', 'Enterprise'
        /// </summary>
        [JsonProperty(PropertyName = "properties.purdueLevel")]
        public string PurdueLevel { get; set; }

        /// <summary>
        /// Gets or sets user notes for the device, up to 300 characters.
        /// </summary>
        [JsonProperty(PropertyName = "properties.notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Gets list of device firmwares.
        /// </summary>
        [JsonProperty(PropertyName = "properties.firmwares")]
        public IList<Firmware> Firmwares { get; private set; }

        /// <summary>
        /// Gets discovered time of the device.
        /// </summary>
        [JsonProperty(PropertyName = "properties.discoveryTime")]
        public System.DateTime? DiscoveryTime { get; private set; }

        /// <summary>
        /// Gets indicates whether this device is programming. Possible values
        /// include: 'ProgrammingDevice', 'NotProgrammingDevice'
        /// </summary>
        [JsonProperty(PropertyName = "properties.programmingState")]
        public string ProgrammingState { get; private set; }

        /// <summary>
        /// Gets last time the device was programming or programed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastProgrammingTime")]
        public System.DateTime? LastProgrammingTime { get; private set; }

        /// <summary>
        /// Gets indicates whether the device is a scanner. Possible values
        /// include: 'ScannerDevice', 'NotScannerDevice'
        /// </summary>
        [JsonProperty(PropertyName = "properties.scanningFunctionality")]
        public string ScanningFunctionality { get; private set; }

        /// <summary>
        /// Gets last time the device was scanning.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastScanTime")]
        public System.DateTime? LastScanTime { get; private set; }

        /// <summary>
        /// Gets risk score of the device.
        /// </summary>
        [JsonProperty(PropertyName = "properties.riskScore")]
        public int? RiskScore { get; private set; }

        /// <summary>
        /// Gets list of sensors that scanned this device.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sensors")]
        public IList<Sensor> Sensors { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.site")]
        public Site Site { get; private set; }

        /// <summary>
        /// Gets device status. Possible values include: 'Active', 'Removed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.deviceStatus")]
        public string DeviceStatus { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RiskScore != null)
            {
                if (RiskScore > 100)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "RiskScore", 100);
                }
                if (RiskScore < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "RiskScore", 0);
                }
            }
        }
    }
}
