// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for Rank.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Rank
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "Low")]
        Low,
        [EnumMember(Value = "Medium")]
        Medium,
        [EnumMember(Value = "High")]
        High,
        [EnumMember(Value = "Critical")]
        Critical
    }
    internal static class RankEnumExtension
    {
        internal static string ToSerializedValue(this Rank? value)
        {
            return value == null ? null : ((Rank)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this Rank value)
        {
            switch( value )
            {
                case Rank.None:
                    return "None";
                case Rank.Low:
                    return "Low";
                case Rank.Medium:
                    return "Medium";
                case Rank.High:
                    return "High";
                case Rank.Critical:
                    return "Critical";
            }
            return null;
        }

        internal static Rank? ParseRank(this string value)
        {
            switch( value )
            {
                case "None":
                    return Rank.None;
                case "Low":
                    return Rank.Low;
                case "Medium":
                    return Rank.Medium;
                case "High":
                    return Rank.High;
                case "Critical":
                    return Rank.Critical;
            }
            return null;
        }
    }
}
