// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A plan's extension properties
    /// </summary>
    public partial class Extension
    {
        /// <summary>
        /// Initializes a new instance of the Extension class.
        /// </summary>
        public Extension()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Extension class.
        /// </summary>
        /// <param name="name">The extension name. Supported values are:
        /// &lt;br&gt;&lt;br&gt;**AgentlessDiscoveryForKubernetes** - API-based
        /// discovery of information about Kubernetes cluster architecture,
        /// workload objects, and setup. Required for Kubernetes inventory,
        /// identity and network exposure detection, attack path analysis and
        /// risk hunting as part of the cloud security explorer.
        /// Available for CloudPosture
        /// plan.&lt;br&gt;&lt;br&gt;**OnUploadMalwareScanning** - Limits the
        /// GB to be scanned per month for each storage account within the
        /// subscription. Once this limit reached on a given storage account,
        /// Blobs won't be scanned during current calendar month.
        /// Available for StorageAccounts
        /// plan.&lt;br&gt;&lt;br&gt;**SensitiveDataDiscovery** - Sensitive
        /// data discovery identifies Blob storage container with sensitive
        /// data such as credentials, credit cards, and more, to help
        /// prioritize and investigate security events.
        /// Available for StorageAccounts and CloudPosture
        /// plans.&lt;br&gt;&lt;br&gt;**ContainerRegistriesVulnerabilityAssessments**
        /// - Provides vulnerability management for images stored in your
        /// container registries.
        /// Available for CloudPosture and Containers plans.</param>
        /// <param name="isEnabled">Indicates whether the extension is enabled.
        /// Possible values include: 'True', 'False'</param>
        /// <param name="additionalExtensionProperties">Property values
        /// associated with the extension.</param>
        /// <param name="operationStatus">Optional. A status describing the
        /// success/failure of the extension's enablement/disablement
        /// operation.</param>
        public Extension(string name, string isEnabled, IDictionary<string, object> additionalExtensionProperties = default(IDictionary<string, object>), OperationStatus operationStatus = default(OperationStatus))
        {
            Name = name;
            IsEnabled = isEnabled;
            AdditionalExtensionProperties = additionalExtensionProperties;
            OperationStatus = operationStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the extension name. Supported values are:
        /// &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;**AgentlessDiscoveryForKubernetes**
        /// - API-based discovery of information about Kubernetes cluster
        /// architecture, workload objects, and setup. Required for Kubernetes
        /// inventory, identity and network exposure detection, attack path
        /// analysis and risk hunting as part of the cloud security explorer.
        /// Available for CloudPosture
        /// plan.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;**OnUploadMalwareScanning**
        /// - Limits the GB to be scanned per month for each storage account
        /// within the subscription. Once this limit reached on a given storage
        /// account, Blobs won't be scanned during current calendar month.
        /// Available for StorageAccounts
        /// plan.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;**SensitiveDataDiscovery**
        /// - Sensitive data discovery identifies Blob storage container with
        /// sensitive data such as credentials, credit cards, and more, to help
        /// prioritize and investigate security events.
        /// Available for StorageAccounts and CloudPosture
        /// plans.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;**ContainerRegistriesVulnerabilityAssessments**
        /// - Provides vulnerability management for images stored in your
        /// container registries.
        /// Available for CloudPosture and Containers plans.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the extension is enabled. Possible
        /// values include: 'True', 'False'
        /// </summary>
        [JsonProperty(PropertyName = "isEnabled")]
        public string IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets property values associated with the extension.
        /// </summary>
        [JsonProperty(PropertyName = "additionalExtensionProperties")]
        public IDictionary<string, object> AdditionalExtensionProperties { get; set; }

        /// <summary>
        /// Gets optional. A status describing the success/failure of the
        /// extension's enablement/disablement operation.
        /// </summary>
        [JsonProperty(PropertyName = "operationStatus")]
        public OperationStatus OperationStatus { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (IsEnabled == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IsEnabled");
            }
        }
    }
}
