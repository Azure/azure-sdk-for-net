// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The resource of the configuration or data needed to onboard the machine
    /// to MDE
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class MdeOnboardingData : Resource
    {
        /// <summary>
        /// Initializes a new instance of the MdeOnboardingData class.
        /// </summary>
        public MdeOnboardingData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MdeOnboardingData class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="onboardingPackageWindows">The onboarding package used
        /// to onboard Windows machines to MDE, coded in base64. This can also
        /// be used for onboarding using the dedicated VM Extension</param>
        /// <param name="onboardingPackageLinux">The onboarding package used to
        /// onboard Linux machines to MDE, coded in base64. This can also be
        /// used for onboarding using the dedicated VM Extension</param>
        public MdeOnboardingData(string id = default(string), string name = default(string), string type = default(string), byte[] onboardingPackageWindows = default(byte[]), byte[] onboardingPackageLinux = default(byte[]))
            : base(id, name, type)
        {
            OnboardingPackageWindows = onboardingPackageWindows;
            OnboardingPackageLinux = onboardingPackageLinux;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the onboarding package used to onboard Windows
        /// machines to MDE, coded in base64. This can also be used for
        /// onboarding using the dedicated VM Extension
        /// </summary>
        [JsonProperty(PropertyName = "properties.onboardingPackageWindows")]
        public byte[] OnboardingPackageWindows { get; set; }

        /// <summary>
        /// Gets or sets the onboarding package used to onboard Linux machines
        /// to MDE, coded in base64. This can also be used for onboarding using
        /// the dedicated VM Extension
        /// </summary>
        [JsonProperty(PropertyName = "properties.onboardingPackageLinux")]
        public byte[] OnboardingPackageLinux { get; set; }

    }
}
