// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Regulatory compliance standard details and state
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RegulatoryComplianceStandard : Resource
    {
        /// <summary>
        /// Initializes a new instance of the RegulatoryComplianceStandard
        /// class.
        /// </summary>
        public RegulatoryComplianceStandard()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegulatoryComplianceStandard
        /// class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="state">Aggregative state based on the standard's
        /// supported controls states. Possible values include: 'Passed',
        /// 'Failed', 'Skipped', 'Unsupported'</param>
        /// <param name="passedControls">The number of supported regulatory
        /// compliance controls of the given standard with a passed
        /// state</param>
        /// <param name="failedControls">The number of supported regulatory
        /// compliance controls of the given standard with a failed
        /// state</param>
        /// <param name="skippedControls">The number of supported regulatory
        /// compliance controls of the given standard with a skipped
        /// state</param>
        /// <param name="unsupportedControls">The number of regulatory
        /// compliance controls of the given standard which are unsupported by
        /// automated assessments</param>
        public RegulatoryComplianceStandard(string id = default(string), string name = default(string), string type = default(string), string state = default(string), int? passedControls = default(int?), int? failedControls = default(int?), int? skippedControls = default(int?), int? unsupportedControls = default(int?))
            : base(id, name, type)
        {
            State = state;
            PassedControls = passedControls;
            FailedControls = failedControls;
            SkippedControls = skippedControls;
            UnsupportedControls = unsupportedControls;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets aggregative state based on the standard's supported
        /// controls states. Possible values include: 'Passed', 'Failed',
        /// 'Skipped', 'Unsupported'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; set; }

        /// <summary>
        /// Gets the number of supported regulatory compliance controls of the
        /// given standard with a passed state
        /// </summary>
        [JsonProperty(PropertyName = "properties.passedControls")]
        public int? PassedControls { get; private set; }

        /// <summary>
        /// Gets the number of supported regulatory compliance controls of the
        /// given standard with a failed state
        /// </summary>
        [JsonProperty(PropertyName = "properties.failedControls")]
        public int? FailedControls { get; private set; }

        /// <summary>
        /// Gets the number of supported regulatory compliance controls of the
        /// given standard with a skipped state
        /// </summary>
        [JsonProperty(PropertyName = "properties.skippedControls")]
        public int? SkippedControls { get; private set; }

        /// <summary>
        /// Gets the number of regulatory compliance controls of the given
        /// standard which are unsupported by automated assessments
        /// </summary>
        [JsonProperty(PropertyName = "properties.unsupportedControls")]
        public int? UnsupportedControls { get; private set; }

    }
}
