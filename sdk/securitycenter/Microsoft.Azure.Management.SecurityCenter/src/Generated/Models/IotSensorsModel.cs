// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// IoT sensor model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class IotSensorsModel : Resource
    {
        /// <summary>
        /// Initializes a new instance of the IotSensorsModel class.
        /// </summary>
        public IotSensorsModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IotSensorsModel class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="connectivityTime">Last connectivity time of the IoT
        /// sensor</param>
        /// <param name="creationTime">Creation time of the IoT sensor</param>
        /// <param name="dynamicLearning">Dynamic mode status of the IoT
        /// sensor</param>
        /// <param name="learningMode">Learning mode status of the IoT
        /// sensor</param>
        /// <param name="sensorStatus">Status of the IoT sensor. Possible
        /// values include: 'Ok', 'Disconnected', 'Unavailable'</param>
        /// <param name="sensorVersion">Version of the IoT sensor</param>
        /// <param name="tiAutomaticUpdates">TI Automatic mode status of the
        /// IoT sensor</param>
        /// <param name="tiStatus">TI Status of the IoT sensor. Possible values
        /// include: 'Ok', 'Failed', 'InProgress', 'UpdateAvailable'</param>
        /// <param name="tiVersion">TI Version of the IoT sensor</param>
        /// <param name="zone">Zone of the IoT sensor</param>
        /// <param name="sensorType">Type of sensor. Possible values include:
        /// 'Ot', 'Enterprise'</param>
        public IotSensorsModel(string id = default(string), string name = default(string), string type = default(string), string connectivityTime = default(string), string creationTime = default(string), bool? dynamicLearning = default(bool?), bool? learningMode = default(bool?), string sensorStatus = default(string), string sensorVersion = default(string), bool? tiAutomaticUpdates = default(bool?), string tiStatus = default(string), string tiVersion = default(string), string zone = default(string), string sensorType = default(string))
            : base(id, name, type)
        {
            ConnectivityTime = connectivityTime;
            CreationTime = creationTime;
            DynamicLearning = dynamicLearning;
            LearningMode = learningMode;
            SensorStatus = sensorStatus;
            SensorVersion = sensorVersion;
            TiAutomaticUpdates = tiAutomaticUpdates;
            TiStatus = tiStatus;
            TiVersion = tiVersion;
            Zone = zone;
            SensorType = sensorType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets last connectivity time of the IoT sensor
        /// </summary>
        [JsonProperty(PropertyName = "properties.connectivityTime")]
        public string ConnectivityTime { get; private set; }

        /// <summary>
        /// Gets creation time of the IoT sensor
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationTime")]
        public string CreationTime { get; private set; }

        /// <summary>
        /// Gets dynamic mode status of the IoT sensor
        /// </summary>
        [JsonProperty(PropertyName = "properties.dynamicLearning")]
        public bool? DynamicLearning { get; private set; }

        /// <summary>
        /// Gets learning mode status of the IoT sensor
        /// </summary>
        [JsonProperty(PropertyName = "properties.learningMode")]
        public bool? LearningMode { get; private set; }

        /// <summary>
        /// Gets status of the IoT sensor. Possible values include: 'Ok',
        /// 'Disconnected', 'Unavailable'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sensorStatus")]
        public string SensorStatus { get; private set; }

        /// <summary>
        /// Gets version of the IoT sensor
        /// </summary>
        [JsonProperty(PropertyName = "properties.sensorVersion")]
        public string SensorVersion { get; private set; }

        /// <summary>
        /// Gets or sets TI Automatic mode status of the IoT sensor
        /// </summary>
        [JsonProperty(PropertyName = "properties.tiAutomaticUpdates")]
        public bool? TiAutomaticUpdates { get; set; }

        /// <summary>
        /// Gets TI Status of the IoT sensor. Possible values include: 'Ok',
        /// 'Failed', 'InProgress', 'UpdateAvailable'
        /// </summary>
        [JsonProperty(PropertyName = "properties.tiStatus")]
        public string TiStatus { get; private set; }

        /// <summary>
        /// Gets TI Version of the IoT sensor
        /// </summary>
        [JsonProperty(PropertyName = "properties.tiVersion")]
        public string TiVersion { get; private set; }

        /// <summary>
        /// Gets or sets zone of the IoT sensor
        /// </summary>
        [JsonProperty(PropertyName = "properties.zone")]
        public string Zone { get; set; }

        /// <summary>
        /// Gets or sets type of sensor. Possible values include: 'Ot',
        /// 'Enterprise'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sensorType")]
        public string SensorType { get; set; }

    }
}
