// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SignalR.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A class represent a SignalR service resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SignalRResource : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the SignalRResource class.
        /// </summary>
        public SignalRResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SignalRResource class.
        /// </summary>
        /// <param name="id">Fully qualified resource Id for the
        /// resource.</param>
        /// <param name="name">The name of the resouce.</param>
        /// <param name="type">The type of the service - e.g.
        /// "Microsoft.SignalRService/SignalR"</param>
        /// <param name="location">The GEO location of the SignalR service.
        /// e.g. West US | East US | North Central US | South Central
        /// US.</param>
        /// <param name="tags">Tags of the service which is a list of key value
        /// pairs that describe the resource.</param>
        /// <param name="sku">SKU of the service.</param>
        /// <param name="hostNamePrefix">Prefix for the hostName of the SignalR
        /// service. Retained for future use.
        /// The hostname will be of format:
        /// &amp;lt;hostNamePrefix&amp;gt;.service.signalr.net.</param>
        /// <param name="provisioningState">Provisioning state of the resource.
        /// Possible values include: 'Unknown', 'Succeeded', 'Failed',
        /// 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting',
        /// 'Moving'</param>
        /// <param name="externalIP">The publicly accessible IP of the SignalR
        /// service.</param>
        /// <param name="hostName">FQDN of the SignalR service instance.
        /// Format: xxx.service.signalr.net</param>
        /// <param name="publicPort">The publicly accessibly port of the
        /// SignalR service which is designed for browser/client side
        /// usage.</param>
        /// <param name="serverPort">The publicly accessibly port of the
        /// SignalR service which is designed for customer server side
        /// usage.</param>
        /// <param name="version">Version of the SignalR resource. Probably you
        /// need the same or higher version of client SDKs.</param>
        public SignalRResource(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), ResourceSku sku = default(ResourceSku), string hostNamePrefix = default(string), string provisioningState = default(string), string externalIP = default(string), string hostName = default(string), int? publicPort = default(int?), int? serverPort = default(int?), string version = default(string))
            : base(id, name, type, location, tags)
        {
            Sku = sku;
            HostNamePrefix = hostNamePrefix;
            ProvisioningState = provisioningState;
            ExternalIP = externalIP;
            HostName = hostName;
            PublicPort = publicPort;
            ServerPort = serverPort;
            Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets SKU of the service.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public ResourceSku Sku { get; set; }

        /// <summary>
        /// Gets or sets prefix for the hostName of the SignalR service.
        /// Retained for future use.
        /// The hostname will be of format:
        /// &amp;amp;lt;hostNamePrefix&amp;amp;gt;.service.signalr.net.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostNamePrefix")]
        public string HostNamePrefix { get; set; }

        /// <summary>
        /// Gets provisioning state of the resource. Possible values include:
        /// 'Unknown', 'Succeeded', 'Failed', 'Canceled', 'Running',
        /// 'Creating', 'Updating', 'Deleting', 'Moving'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the publicly accessible IP of the SignalR service.
        /// </summary>
        [JsonProperty(PropertyName = "properties.externalIP")]
        public string ExternalIP { get; private set; }

        /// <summary>
        /// Gets FQDN of the SignalR service instance. Format:
        /// xxx.service.signalr.net
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostName")]
        public string HostName { get; private set; }

        /// <summary>
        /// Gets the publicly accessibly port of the SignalR service which is
        /// designed for browser/client side usage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicPort")]
        public int? PublicPort { get; private set; }

        /// <summary>
        /// Gets the publicly accessibly port of the SignalR service which is
        /// designed for customer server side usage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverPort")]
        public int? ServerPort { get; private set; }

        /// <summary>
        /// Gets or sets version of the SignalR resource. Probably you need the
        /// same or higher version of client SDKs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku != null)
            {
                Sku.Validate();
            }
        }
    }
}
