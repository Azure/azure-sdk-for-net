// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SignalR.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A custom domain
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CustomDomain : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the CustomDomain class.
        /// </summary>
        public CustomDomain()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomDomain class.
        /// </summary>
        /// <param name="domainName">The custom domain name.</param>
        /// <param name="id">Fully qualified resource Id for the
        /// resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource - e.g.
        /// "Microsoft.SignalRService/SignalR"</param>
        /// <param name="provisioningState">Possible values include: 'Unknown',
        /// 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating',
        /// 'Updating', 'Deleting', 'Moving'</param>
        public CustomDomain(string domainName, ResourceReference customCertificate, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string))
            : base(id, name, type)
        {
            SystemData = systemData;
            ProvisioningState = provisioningState;
            DomainName = domainName;
            CustomCertificate = customCertificate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Unknown', 'Succeeded', 'Failed',
        /// 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the custom domain name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.domainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.customCertificate")]
        public ResourceReference CustomCertificate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DomainName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DomainName");
            }
            if (CustomCertificate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CustomCertificate");
            }
        }
    }
}
