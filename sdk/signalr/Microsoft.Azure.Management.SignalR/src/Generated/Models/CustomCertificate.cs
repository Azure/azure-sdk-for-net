// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SignalR.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A custom certificate.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CustomCertificate : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the CustomCertificate class.
        /// </summary>
        public CustomCertificate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomCertificate class.
        /// </summary>
        /// <param name="keyVaultBaseUri">Base uri of the KeyVault that stores
        /// certificate.</param>
        /// <param name="keyVaultSecretName">Certificate secret name.</param>
        /// <param name="id">Fully qualified resource Id for the
        /// resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource - e.g.
        /// "Microsoft.SignalRService/SignalR"</param>
        /// <param name="provisioningState">Possible values include: 'Unknown',
        /// 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating',
        /// 'Updating', 'Deleting', 'Moving'</param>
        /// <param name="keyVaultSecretVersion">Certificate secret
        /// version.</param>
        public CustomCertificate(string keyVaultBaseUri, string keyVaultSecretName, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string), string keyVaultSecretVersion = default(string))
            : base(id, name, type)
        {
            SystemData = systemData;
            ProvisioningState = provisioningState;
            KeyVaultBaseUri = keyVaultBaseUri;
            KeyVaultSecretName = keyVaultSecretName;
            KeyVaultSecretVersion = keyVaultSecretVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Unknown', 'Succeeded', 'Failed',
        /// 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets base uri of the KeyVault that stores certificate.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyVaultBaseUri")]
        public string KeyVaultBaseUri { get; set; }

        /// <summary>
        /// Gets or sets certificate secret name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyVaultSecretName")]
        public string KeyVaultSecretName { get; set; }

        /// <summary>
        /// Gets or sets certificate secret version.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyVaultSecretVersion")]
        public string KeyVaultSecretVersion { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KeyVaultBaseUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyVaultBaseUri");
            }
            if (KeyVaultSecretName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyVaultSecretName");
            }
        }
    }
}
