// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SignalR.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Upstream template item settings. It defines the Upstream URL of the
    /// incoming requests.
    /// The template defines the pattern of the event, the hub or the category
    /// of the incoming request that matches current URL template.
    /// </summary>
    public partial class UpstreamTemplate
    {
        /// <summary>
        /// Initializes a new instance of the UpstreamTemplate class.
        /// </summary>
        public UpstreamTemplate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpstreamTemplate class.
        /// </summary>
        /// <param name="urlTemplate">Gets or sets the Upstream URL template.
        /// You can use 3 predefined parameters {hub}, {category} {event}
        /// inside the template, the value of the Upstream URL is dynamically
        /// calculated when the client request comes in.
        /// For example, if the urlTemplate is
        /// `http://example.com/{hub}/api/{event}`, with a client request from
        /// hub `chat` connects, it will first POST to this URL:
        /// `http://example.com/chat/api/connect`.</param>
        /// <param name="hubPattern">Gets or sets the matching pattern for hub
        /// names. If not set, it matches any hub.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any hub name
        /// 2. Combine multiple hubs with ",", for example "hub1,hub2", it
        /// matches "hub1" and "hub2"
        /// 3. The single hub name, for example, "hub1", it matches
        /// "hub1"</param>
        /// <param name="eventPattern">Gets or sets the matching pattern for
        /// event names. If not set, it matches any event.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any event name
        /// 2. Combine multiple events with ",", for example
        /// "connect,disconnect", it matches event "connect" and "disconnect"
        /// 3. The single event name, for example, "connect", it matches
        /// "connect"</param>
        /// <param name="categoryPattern">Gets or sets the matching pattern for
        /// category names. If not set, it matches any category.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any category name
        /// 2. Combine multiple categories with ",", for example
        /// "connections,messages", it matches category "connections" and
        /// "messages"
        /// 3. The single category name, for example, "connections", it matches
        /// the category "connections"</param>
        /// <param name="auth">Gets or sets the auth settings for an upstream.
        /// If not set, no auth is used for upstream messages.</param>
        public UpstreamTemplate(string urlTemplate, string hubPattern = default(string), string eventPattern = default(string), string categoryPattern = default(string), UpstreamAuthSettings auth = default(UpstreamAuthSettings))
        {
            HubPattern = hubPattern;
            EventPattern = eventPattern;
            CategoryPattern = categoryPattern;
            UrlTemplate = urlTemplate;
            Auth = auth;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the matching pattern for hub names. If not set, it
        /// matches any hub.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any hub name
        /// 2. Combine multiple hubs with ",", for example "hub1,hub2", it
        /// matches "hub1" and "hub2"
        /// 3. The single hub name, for example, "hub1", it matches "hub1"
        /// </summary>
        [JsonProperty(PropertyName = "hubPattern")]
        public string HubPattern { get; set; }

        /// <summary>
        /// Gets or sets the matching pattern for event names. If not set, it
        /// matches any event.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any event name
        /// 2. Combine multiple events with ",", for example
        /// "connect,disconnect", it matches event "connect" and "disconnect"
        /// 3. The single event name, for example, "connect", it matches
        /// "connect"
        /// </summary>
        [JsonProperty(PropertyName = "eventPattern")]
        public string EventPattern { get; set; }

        /// <summary>
        /// Gets or sets the matching pattern for category names. If not set,
        /// it matches any category.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any category name
        /// 2. Combine multiple categories with ",", for example
        /// "connections,messages", it matches category "connections" and
        /// "messages"
        /// 3. The single category name, for example, "connections", it matches
        /// the category "connections"
        /// </summary>
        [JsonProperty(PropertyName = "categoryPattern")]
        public string CategoryPattern { get; set; }

        /// <summary>
        /// Gets or sets the Upstream URL template. You can use 3 predefined
        /// parameters {hub}, {category} {event} inside the template, the value
        /// of the Upstream URL is dynamically calculated when the client
        /// request comes in.
        /// For example, if the urlTemplate is
        /// `http://example.com/{hub}/api/{event}`, with a client request from
        /// hub `chat` connects, it will first POST to this URL:
        /// `http://example.com/chat/api/connect`.
        /// </summary>
        [JsonProperty(PropertyName = "urlTemplate")]
        public string UrlTemplate { get; set; }

        /// <summary>
        /// Gets or sets the auth settings for an upstream. If not set, no auth
        /// is used for upstream messages.
        /// </summary>
        [JsonProperty(PropertyName = "auth")]
        public UpstreamAuthSettings Auth { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UrlTemplate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UrlTemplate");
            }
        }
    }
}
