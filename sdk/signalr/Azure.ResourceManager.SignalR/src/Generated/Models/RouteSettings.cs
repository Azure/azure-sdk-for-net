// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SignalR.Models
{
    /// <summary> Route settings for the resource. </summary>
    public partial class RouteSettings
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RouteSettings"/>. </summary>
        public RouteSettings()
        {
        }

        /// <summary> Initializes a new instance of <see cref="RouteSettings"/>. </summary>
        /// <param name="serverBalanceWeight">
        /// Gets or sets the server balance weight.
        /// A higher value means a greater balance of client connections across different app server instances.
        /// A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
        /// The default value is 255.
        /// Recommended ```255``` for multiple app servers in same size.
        /// </param>
        /// <param name="connectionBalanceWeight">
        /// Gets or sets the connection balance weight.
        /// A higher value means a greater balance of client connections across different server connections.
        /// A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
        /// The default value is 255.
        /// Recommended ```255``` for all of the cases.
        /// </param>
        /// <param name="latencyWeight">
        /// Gets or sets the weight for latency-based routing.
        /// A higher value increases the influence of latency-based routing.
        /// A value of 0 disables latency-based routing entirely, while a value of 255 enables it fully.
        /// The default value is 0.
        /// Recommended ```255``` for replicas or app servers in different regions for disaster recovery.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RouteSettings(int? serverBalanceWeight, int? connectionBalanceWeight, int? latencyWeight, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ServerBalanceWeight = serverBalanceWeight;
            ConnectionBalanceWeight = connectionBalanceWeight;
            LatencyWeight = latencyWeight;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Gets or sets the server balance weight.
        /// A higher value means a greater balance of client connections across different app server instances.
        /// A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
        /// The default value is 255.
        /// Recommended ```255``` for multiple app servers in same size.
        /// </summary>
        [WirePath("serverBalanceWeight")]
        public int? ServerBalanceWeight { get; set; }
        /// <summary>
        /// Gets or sets the connection balance weight.
        /// A higher value means a greater balance of client connections across different server connections.
        /// A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
        /// The default value is 255.
        /// Recommended ```255``` for all of the cases.
        /// </summary>
        [WirePath("connectionBalanceWeight")]
        public int? ConnectionBalanceWeight { get; set; }
        /// <summary>
        /// Gets or sets the weight for latency-based routing.
        /// A higher value increases the influence of latency-based routing.
        /// A value of 0 disables latency-based routing entirely, while a value of 255 enables it fully.
        /// The default value is 0.
        /// Recommended ```255``` for replicas or app servers in different regions for disaster recovery.
        /// </summary>
        [WirePath("latencyWeight")]
        public int? LatencyWeight { get; set; }
    }
}
