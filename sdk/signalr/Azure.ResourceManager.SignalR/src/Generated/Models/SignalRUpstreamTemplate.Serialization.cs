// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SignalR.Models
{
    public partial class SignalRUpstreamTemplate : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(HubPattern))
            {
                writer.WritePropertyName("hubPattern"u8);
                writer.WriteStringValue(HubPattern);
            }
            if (Optional.IsDefined(EventPattern))
            {
                writer.WritePropertyName("eventPattern"u8);
                writer.WriteStringValue(EventPattern);
            }
            if (Optional.IsDefined(CategoryPattern))
            {
                writer.WritePropertyName("categoryPattern"u8);
                writer.WriteStringValue(CategoryPattern);
            }
            writer.WritePropertyName("urlTemplate"u8);
            writer.WriteStringValue(UrlTemplate);
            if (Optional.IsDefined(Auth))
            {
                writer.WritePropertyName("auth"u8);
                writer.WriteObjectValue(Auth);
            }
            writer.WriteEndObject();
        }

        internal static SignalRUpstreamTemplate DeserializeSignalRUpstreamTemplate(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> hubPattern = default;
            Optional<string> eventPattern = default;
            Optional<string> categoryPattern = default;
            string urlTemplate = default;
            Optional<SignalRUpstreamAuthSettings> auth = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hubPattern"u8))
                {
                    hubPattern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventPattern"u8))
                {
                    eventPattern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("categoryPattern"u8))
                {
                    categoryPattern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("urlTemplate"u8))
                {
                    urlTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("auth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    auth = SignalRUpstreamAuthSettings.DeserializeSignalRUpstreamAuthSettings(property.Value);
                    continue;
                }
            }
            return new SignalRUpstreamTemplate(hubPattern.Value, eventPattern.Value, categoryPattern.Value, urlTemplate, auth.Value);
        }
    }
}
