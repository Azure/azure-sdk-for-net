// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SignalR.Models
{
    /// <summary> Serverless settings. </summary>
    public partial class ServerlessSettings
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ServerlessSettings"/>. </summary>
        public ServerlessSettings()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ServerlessSettings"/>. </summary>
        /// <param name="connectionTimeoutInSeconds">
        /// Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is sent.
        /// You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.
        /// </param>
        /// <param name="keepAliveIntervalInSeconds">
        /// Gets or sets the Keep-Alive Interval. Optional to set.
        /// Value is in seconds.
        /// The default value is 15 seconds.
        /// Customers should set this value to a shorter period if they want the service to send keep-alive messages more frequently,
        /// ensuring timely checks of the connection status.
        /// Conversely, customers can set this value to a longer period if they want the service to send keep-alive messages less frequently,
        /// reducing network traffic, but note that it may take longer to detect a disconnection.
        /// This interval ensures that the connection is maintained by sending periodic keep-alive messages to the client.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ServerlessSettings(int? connectionTimeoutInSeconds, int? keepAliveIntervalInSeconds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ConnectionTimeoutInSeconds = connectionTimeoutInSeconds;
            KeepAliveIntervalInSeconds = keepAliveIntervalInSeconds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is sent.
        /// You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.
        /// </summary>
        [WirePath("connectionTimeoutInSeconds")]
        public int? ConnectionTimeoutInSeconds { get; set; }
        /// <summary>
        /// Gets or sets the Keep-Alive Interval. Optional to set.
        /// Value is in seconds.
        /// The default value is 15 seconds.
        /// Customers should set this value to a shorter period if they want the service to send keep-alive messages more frequently,
        /// ensuring timely checks of the connection status.
        /// Conversely, customers can set this value to a longer period if they want the service to send keep-alive messages less frequently,
        /// reducing network traffic, but note that it may take longer to detect a disconnection.
        /// This interval ensures that the connection is maintained by sending periodic keep-alive messages to the client.
        /// </summary>
        [WirePath("keepAliveIntervalInSeconds")]
        public int? KeepAliveIntervalInSeconds { get; set; }
    }
}
