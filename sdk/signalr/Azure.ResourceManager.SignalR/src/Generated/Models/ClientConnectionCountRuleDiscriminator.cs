// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SignalR.Models
{
    /// <summary> The ClientConnectionCountRuleDiscriminator. </summary>
    internal readonly partial struct ClientConnectionCountRuleDiscriminator : IEquatable<ClientConnectionCountRuleDiscriminator>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ClientConnectionCountRuleDiscriminator"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ClientConnectionCountRuleDiscriminator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ThrottleByJwtSignatureRuleValue = "ThrottleByJwtSignatureRule";
        private const string ThrottleByUserIdRuleValue = "ThrottleByUserIdRule";
        private const string ThrottleByJwtCustomClaimRuleValue = "ThrottleByJwtCustomClaimRule";

        /// <summary> ThrottleByJwtSignatureRule. </summary>
        public static ClientConnectionCountRuleDiscriminator ThrottleByJwtSignatureRule { get; } = new ClientConnectionCountRuleDiscriminator(ThrottleByJwtSignatureRuleValue);
        /// <summary> ThrottleByUserIdRule. </summary>
        public static ClientConnectionCountRuleDiscriminator ThrottleByUserIdRule { get; } = new ClientConnectionCountRuleDiscriminator(ThrottleByUserIdRuleValue);
        /// <summary> ThrottleByJwtCustomClaimRule. </summary>
        public static ClientConnectionCountRuleDiscriminator ThrottleByJwtCustomClaimRule { get; } = new ClientConnectionCountRuleDiscriminator(ThrottleByJwtCustomClaimRuleValue);
        /// <summary> Determines if two <see cref="ClientConnectionCountRuleDiscriminator"/> values are the same. </summary>
        public static bool operator ==(ClientConnectionCountRuleDiscriminator left, ClientConnectionCountRuleDiscriminator right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ClientConnectionCountRuleDiscriminator"/> values are not the same. </summary>
        public static bool operator !=(ClientConnectionCountRuleDiscriminator left, ClientConnectionCountRuleDiscriminator right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ClientConnectionCountRuleDiscriminator"/>. </summary>
        public static implicit operator ClientConnectionCountRuleDiscriminator(string value) => new ClientConnectionCountRuleDiscriminator(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ClientConnectionCountRuleDiscriminator other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ClientConnectionCountRuleDiscriminator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
