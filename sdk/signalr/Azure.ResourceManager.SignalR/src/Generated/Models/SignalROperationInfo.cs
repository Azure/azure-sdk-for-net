// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SignalR.Models
{
    /// <summary> REST API operation supported by resource provider. </summary>
    public partial class SignalROperationInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SignalROperationInfo"/>. </summary>
        internal SignalROperationInfo()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SignalROperationInfo"/>. </summary>
        /// <param name="name"> Name of the operation with format: {provider}/{resource}/{operation}. </param>
        /// <param name="isDataAction"> If the operation is a data action. (for data plane rbac). </param>
        /// <param name="display"> The object that describes a operation. </param>
        /// <param name="origin"> Optional. The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. </param>
        /// <param name="properties"> Extra Operation properties. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SignalROperationInfo(string name, bool? isDataAction, OperationDisplay display, string origin, OperationProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            IsDataAction = isDataAction;
            Display = display;
            Origin = origin;
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Name of the operation with format: {provider}/{resource}/{operation}. </summary>
        [WirePath("name")]
        public string Name { get; }
        /// <summary> If the operation is a data action. (for data plane rbac). </summary>
        [WirePath("isDataAction")]
        public bool? IsDataAction { get; }
        /// <summary> The object that describes a operation. </summary>
        [WirePath("display")]
        public OperationDisplay Display { get; }
        /// <summary> Optional. The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. </summary>
        [WirePath("origin")]
        public string Origin { get; }
        /// <summary> Extra Operation properties. </summary>
        internal OperationProperties Properties { get; }
        /// <summary> An object that describes a specification. </summary>
        [WirePath("properties.serviceSpecification")]
        public ServiceSpecification OperationServiceSpecification
        {
            get => Properties?.ServiceSpecification;
        }
    }
}
