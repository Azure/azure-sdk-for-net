// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StoragePool
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IscsiTargetsOperations.
    /// </summary>
    public static partial class IscsiTargetsOperationsExtensions
    {
            /// <summary>
            /// Get iSCSI Targets in a Disk pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            public static IPage<IscsiTarget> ListByDiskPool(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName)
            {
                return operations.ListByDiskPoolAsync(resourceGroupName, diskPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get iSCSI Targets in a Disk pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IscsiTarget>> ListByDiskPoolAsync(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDiskPoolWithHttpMessagesAsync(resourceGroupName, diskPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or Update an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='iscsiTargetCreatePayload'>
            /// Request payload for iSCSI Target create operation.
            /// </param>
            public static IscsiTarget CreateOrUpdate(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, IscsiTargetCreate iscsiTargetCreatePayload)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, diskPoolName, iscsiTargetName, iscsiTargetCreatePayload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='iscsiTargetCreatePayload'>
            /// Request payload for iSCSI Target create operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiTarget> CreateOrUpdateAsync(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, IscsiTargetCreate iscsiTargetCreatePayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskPoolName, iscsiTargetName, iscsiTargetCreatePayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='staticAcls'>
            /// Access Control List (ACL) for an iSCSI Target; defines LUN masking policy
            /// </param>
            /// <param name='luns'>
            /// List of LUNs to be exposed through iSCSI Target.
            /// </param>
            public static IscsiTarget Update(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, IList<Acl> staticAcls = default(IList<Acl>), IList<IscsiLun> luns = default(IList<IscsiLun>))
            {
                return operations.UpdateAsync(resourceGroupName, diskPoolName, iscsiTargetName, staticAcls, luns).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='staticAcls'>
            /// Access Control List (ACL) for an iSCSI Target; defines LUN masking policy
            /// </param>
            /// <param name='luns'>
            /// List of LUNs to be exposed through iSCSI Target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiTarget> UpdateAsync(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, IList<Acl> staticAcls = default(IList<Acl>), IList<IscsiLun> luns = default(IList<IscsiLun>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, diskPoolName, iscsiTargetName, staticAcls, luns, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            public static void Delete(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName)
            {
                operations.DeleteAsync(resourceGroupName, diskPoolName, iscsiTargetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, diskPoolName, iscsiTargetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            public static IscsiTarget Get(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName)
            {
                return operations.GetAsync(resourceGroupName, diskPoolName, iscsiTargetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiTarget> GetAsync(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, diskPoolName, iscsiTargetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or Update an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='iscsiTargetCreatePayload'>
            /// Request payload for iSCSI Target create operation.
            /// </param>
            public static IscsiTarget BeginCreateOrUpdate(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, IscsiTargetCreate iscsiTargetCreatePayload)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, diskPoolName, iscsiTargetName, iscsiTargetCreatePayload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='iscsiTargetCreatePayload'>
            /// Request payload for iSCSI Target create operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiTarget> BeginCreateOrUpdateAsync(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, IscsiTargetCreate iscsiTargetCreatePayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskPoolName, iscsiTargetName, iscsiTargetCreatePayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='staticAcls'>
            /// Access Control List (ACL) for an iSCSI Target; defines LUN masking policy
            /// </param>
            /// <param name='luns'>
            /// List of LUNs to be exposed through iSCSI Target.
            /// </param>
            public static IscsiTarget BeginUpdate(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, IList<Acl> staticAcls = default(IList<Acl>), IList<IscsiLun> luns = default(IList<IscsiLun>))
            {
                return operations.BeginUpdateAsync(resourceGroupName, diskPoolName, iscsiTargetName, staticAcls, luns).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='staticAcls'>
            /// Access Control List (ACL) for an iSCSI Target; defines LUN masking policy
            /// </param>
            /// <param name='luns'>
            /// List of LUNs to be exposed through iSCSI Target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiTarget> BeginUpdateAsync(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, IList<Acl> staticAcls = default(IList<Acl>), IList<IscsiLun> luns = default(IList<IscsiLun>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, diskPoolName, iscsiTargetName, staticAcls, luns, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            public static void BeginDelete(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName)
            {
                operations.BeginDeleteAsync(resourceGroupName, diskPoolName, iscsiTargetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an iSCSI Target.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='iscsiTargetName'>
            /// The name of the iSCSI Target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IIscsiTargetsOperations operations, string resourceGroupName, string diskPoolName, string iscsiTargetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, diskPoolName, iscsiTargetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get iSCSI Targets in a Disk pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IscsiTarget> ListByDiskPoolNext(this IIscsiTargetsOperations operations, string nextPageLink)
            {
                return operations.ListByDiskPoolNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get iSCSI Targets in a Disk pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IscsiTarget>> ListByDiskPoolNextAsync(this IIscsiTargetsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDiskPoolNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
