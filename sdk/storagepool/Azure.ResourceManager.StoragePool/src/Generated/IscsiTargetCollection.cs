// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.StoragePool.Models;

namespace Azure.ResourceManager.StoragePool
{
    /// <summary> A class representing collection of IscsiTarget and their operations over its parent. </summary>
    public partial class IscsiTargetCollection : ArmCollection, IEnumerable<IscsiTarget>, IAsyncEnumerable<IscsiTarget>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly IscsiTargetsRestOperations _iscsiTargetsRestClient;

        /// <summary> Initializes a new instance of the <see cref="IscsiTargetCollection"/> class for mocking. </summary>
        protected IscsiTargetCollection()
        {
        }

        /// <summary> Initializes a new instance of IscsiTargetCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal IscsiTargetCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _iscsiTargetsRestClient = new IscsiTargetsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != DiskPool.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, DiskPool.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets/{iscsiTargetName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}
        /// OperationId: IscsiTargets_CreateOrUpdate
        /// <summary> Create or Update an iSCSI Target. </summary>
        /// <param name="iscsiTargetName"> The name of the iSCSI Target. </param>
        /// <param name="iscsiTargetCreatePayload"> Request payload for iSCSI Target create operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iscsiTargetName"/> or <paramref name="iscsiTargetCreatePayload"/> is null. </exception>
        public virtual IscsiTargetCreateOrUpdateOperation CreateOrUpdate(string iscsiTargetName, IscsiTargetCreate iscsiTargetCreatePayload, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (iscsiTargetName == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetName));
            }
            if (iscsiTargetCreatePayload == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetCreatePayload));
            }

            using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _iscsiTargetsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, iscsiTargetName, iscsiTargetCreatePayload, cancellationToken);
                var operation = new IscsiTargetCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _iscsiTargetsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, iscsiTargetName, iscsiTargetCreatePayload).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets/{iscsiTargetName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}
        /// OperationId: IscsiTargets_CreateOrUpdate
        /// <summary> Create or Update an iSCSI Target. </summary>
        /// <param name="iscsiTargetName"> The name of the iSCSI Target. </param>
        /// <param name="iscsiTargetCreatePayload"> Request payload for iSCSI Target create operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iscsiTargetName"/> or <paramref name="iscsiTargetCreatePayload"/> is null. </exception>
        public async virtual Task<IscsiTargetCreateOrUpdateOperation> CreateOrUpdateAsync(string iscsiTargetName, IscsiTargetCreate iscsiTargetCreatePayload, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (iscsiTargetName == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetName));
            }
            if (iscsiTargetCreatePayload == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetCreatePayload));
            }

            using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _iscsiTargetsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, iscsiTargetName, iscsiTargetCreatePayload, cancellationToken).ConfigureAwait(false);
                var operation = new IscsiTargetCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _iscsiTargetsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, iscsiTargetName, iscsiTargetCreatePayload).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets/{iscsiTargetName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}
        /// OperationId: IscsiTargets_Get
        /// <summary> Get an iSCSI Target. </summary>
        /// <param name="iscsiTargetName"> The name of the iSCSI Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iscsiTargetName"/> is null. </exception>
        public virtual Response<IscsiTarget> Get(string iscsiTargetName, CancellationToken cancellationToken = default)
        {
            if (iscsiTargetName == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.Get");
            scope.Start();
            try
            {
                var response = _iscsiTargetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, iscsiTargetName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new IscsiTarget(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets/{iscsiTargetName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}
        /// OperationId: IscsiTargets_Get
        /// <summary> Get an iSCSI Target. </summary>
        /// <param name="iscsiTargetName"> The name of the iSCSI Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iscsiTargetName"/> is null. </exception>
        public async virtual Task<Response<IscsiTarget>> GetAsync(string iscsiTargetName, CancellationToken cancellationToken = default)
        {
            if (iscsiTargetName == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.Get");
            scope.Start();
            try
            {
                var response = await _iscsiTargetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, iscsiTargetName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new IscsiTarget(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="iscsiTargetName"> The name of the iSCSI Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iscsiTargetName"/> is null. </exception>
        public virtual Response<IscsiTarget> GetIfExists(string iscsiTargetName, CancellationToken cancellationToken = default)
        {
            if (iscsiTargetName == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _iscsiTargetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, iscsiTargetName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<IscsiTarget>(null, response.GetRawResponse())
                    : Response.FromValue(new IscsiTarget(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="iscsiTargetName"> The name of the iSCSI Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iscsiTargetName"/> is null. </exception>
        public async virtual Task<Response<IscsiTarget>> GetIfExistsAsync(string iscsiTargetName, CancellationToken cancellationToken = default)
        {
            if (iscsiTargetName == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _iscsiTargetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, iscsiTargetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<IscsiTarget>(null, response.GetRawResponse())
                    : Response.FromValue(new IscsiTarget(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="iscsiTargetName"> The name of the iSCSI Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iscsiTargetName"/> is null. </exception>
        public virtual Response<bool> Exists(string iscsiTargetName, CancellationToken cancellationToken = default)
        {
            if (iscsiTargetName == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(iscsiTargetName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="iscsiTargetName"> The name of the iSCSI Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iscsiTargetName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string iscsiTargetName, CancellationToken cancellationToken = default)
        {
            if (iscsiTargetName == null)
            {
                throw new ArgumentNullException(nameof(iscsiTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.ExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(iscsiTargetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}
        /// OperationId: IscsiTargets_ListByDiskPool
        /// <summary> Get iSCSI Targets in a Disk pool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IscsiTarget" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IscsiTarget> GetAll(CancellationToken cancellationToken = default)
        {
            Page<IscsiTarget> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _iscsiTargetsRestClient.ListByDiskPool(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IscsiTarget(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IscsiTarget> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _iscsiTargetsRestClient.ListByDiskPoolNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IscsiTarget(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}
        /// OperationId: IscsiTargets_ListByDiskPool
        /// <summary> Get iSCSI Targets in a Disk pool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IscsiTarget" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IscsiTarget> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<IscsiTarget>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _iscsiTargetsRestClient.ListByDiskPoolAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IscsiTarget(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IscsiTarget>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IscsiTargetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _iscsiTargetsRestClient.ListByDiskPoolNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IscsiTarget(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<IscsiTarget> IEnumerable<IscsiTarget>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<IscsiTarget> IAsyncEnumerable<IscsiTarget>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, IscsiTarget, IscsiTargetData> Construct() { }
    }
}
