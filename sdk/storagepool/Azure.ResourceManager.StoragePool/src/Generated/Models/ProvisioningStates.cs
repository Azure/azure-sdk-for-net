// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StoragePool.Models
{
    /// <summary> Provisioning state of the iSCSI Target. </summary>
    public readonly partial struct ProvisioningStates : IEquatable<ProvisioningStates>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProvisioningStates"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProvisioningStates(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string PendingValue = "Pending";
        private const string CreatingValue = "Creating";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";

        /// <summary> Invalid. </summary>
        public static ProvisioningStates Invalid { get; } = new ProvisioningStates(InvalidValue);
        /// <summary> Succeeded. </summary>
        public static ProvisioningStates Succeeded { get; } = new ProvisioningStates(SucceededValue);
        /// <summary> Failed. </summary>
        public static ProvisioningStates Failed { get; } = new ProvisioningStates(FailedValue);
        /// <summary> Canceled. </summary>
        public static ProvisioningStates Canceled { get; } = new ProvisioningStates(CanceledValue);
        /// <summary> Pending. </summary>
        public static ProvisioningStates Pending { get; } = new ProvisioningStates(PendingValue);
        /// <summary> Creating. </summary>
        public static ProvisioningStates Creating { get; } = new ProvisioningStates(CreatingValue);
        /// <summary> Updating. </summary>
        public static ProvisioningStates Updating { get; } = new ProvisioningStates(UpdatingValue);
        /// <summary> Deleting. </summary>
        public static ProvisioningStates Deleting { get; } = new ProvisioningStates(DeletingValue);
        /// <summary> Determines if two <see cref="ProvisioningStates"/> values are the same. </summary>
        public static bool operator ==(ProvisioningStates left, ProvisioningStates right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProvisioningStates"/> values are not the same. </summary>
        public static bool operator !=(ProvisioningStates left, ProvisioningStates right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProvisioningStates"/>. </summary>
        public static implicit operator ProvisioningStates(string value) => new ProvisioningStates(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProvisioningStates other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProvisioningStates other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
