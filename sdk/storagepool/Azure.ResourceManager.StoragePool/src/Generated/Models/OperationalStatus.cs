// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StoragePool.Models
{
    /// <summary> Operational status of the resource. </summary>
    public readonly partial struct OperationalStatus : IEquatable<OperationalStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OperationalStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperationalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string UnknownValue = "Unknown";
        private const string HealthyValue = "Healthy";
        private const string UnhealthyValue = "Unhealthy";
        private const string UpdatingValue = "Updating";
        private const string RunningValue = "Running";
        private const string StoppedValue = "Stopped";
        private const string StoppedDeallocatedValue = "Stopped (deallocated)";

        /// <summary> Invalid. </summary>
        public static OperationalStatus Invalid { get; } = new OperationalStatus(InvalidValue);
        /// <summary> Unknown. </summary>
        public static OperationalStatus Unknown { get; } = new OperationalStatus(UnknownValue);
        /// <summary> Healthy. </summary>
        public static OperationalStatus Healthy { get; } = new OperationalStatus(HealthyValue);
        /// <summary> Unhealthy. </summary>
        public static OperationalStatus Unhealthy { get; } = new OperationalStatus(UnhealthyValue);
        /// <summary> Updating. </summary>
        public static OperationalStatus Updating { get; } = new OperationalStatus(UpdatingValue);
        /// <summary> Running. </summary>
        public static OperationalStatus Running { get; } = new OperationalStatus(RunningValue);
        /// <summary> Stopped. </summary>
        public static OperationalStatus Stopped { get; } = new OperationalStatus(StoppedValue);
        /// <summary> Stopped (deallocated). </summary>
        public static OperationalStatus StoppedDeallocated { get; } = new OperationalStatus(StoppedDeallocatedValue);
        /// <summary> Determines if two <see cref="OperationalStatus"/> values are the same. </summary>
        public static bool operator ==(OperationalStatus left, OperationalStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperationalStatus"/> values are not the same. </summary>
        public static bool operator !=(OperationalStatus left, OperationalStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OperationalStatus"/>. </summary>
        public static implicit operator OperationalStatus(string value) => new OperationalStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperationalStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperationalStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
