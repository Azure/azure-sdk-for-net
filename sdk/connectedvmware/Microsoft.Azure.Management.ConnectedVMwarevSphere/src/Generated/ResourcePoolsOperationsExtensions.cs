// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ResourcePoolsOperations.
    /// </summary>
    public static partial class ResourcePoolsOperationsExtensions
    {
            /// <summary>
            /// Implements resourcePool PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update resourcePool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static ResourcePool Create(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, ResourcePool body = default(ResourcePool))
            {
                return operations.CreateAsync(resourceGroupName, resourcePoolName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements resourcePool PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update resourcePool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourcePool> CreateAsync(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, ResourcePool body = default(ResourcePool), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, resourcePoolName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a resourcePool.
            /// </summary>
            /// <remarks>
            /// Implements resourcePool GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            public static ResourcePool Get(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName)
            {
                return operations.GetAsync(resourceGroupName, resourcePoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a resourcePool.
            /// </summary>
            /// <remarks>
            /// Implements resourcePool GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourcePool> GetAsync(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourcePoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a resourcePool.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the resourcePool resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static ResourcePool Update(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, resourcePoolName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a resourcePool.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the resourcePool resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourcePool> UpdateAsync(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourcePoolName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an resourcePool.
            /// </summary>
            /// <remarks>
            /// Implements resourcePool DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            public static void Delete(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, bool? force = default(bool?))
            {
                operations.DeleteAsync(resourceGroupName, resourcePoolName, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an resourcePool.
            /// </summary>
            /// <remarks>
            /// Implements resourcePool DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourcePoolName, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET resourcePools in a subscription.
            /// </summary>
            /// <remarks>
            /// List of resourcePools in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ResourcePool> List(this IResourcePoolsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET resourcePools in a subscription.
            /// </summary>
            /// <remarks>
            /// List of resourcePools in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourcePool>> ListAsync(this IResourcePoolsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements GET resourcePools in a resource group.
            /// </summary>
            /// <remarks>
            /// List of resourcePools in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            public static IPage<ResourcePool> ListByResourceGroup(this IResourcePoolsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET resourcePools in a resource group.
            /// </summary>
            /// <remarks>
            /// List of resourcePools in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourcePool>> ListByResourceGroupAsync(this IResourcePoolsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements resourcePool PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update resourcePool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static ResourcePool BeginCreate(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, ResourcePool body = default(ResourcePool))
            {
                return operations.BeginCreateAsync(resourceGroupName, resourcePoolName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements resourcePool PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update resourcePool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourcePool> BeginCreateAsync(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, ResourcePool body = default(ResourcePool), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, resourcePoolName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an resourcePool.
            /// </summary>
            /// <remarks>
            /// Implements resourcePool DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            public static void BeginDelete(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, bool? force = default(bool?))
            {
                operations.BeginDeleteAsync(resourceGroupName, resourcePoolName, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an resourcePool.
            /// </summary>
            /// <remarks>
            /// Implements resourcePool DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='resourcePoolName'>
            /// Name of the resourcePool.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IResourcePoolsOperations operations, string resourceGroupName, string resourcePoolName, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourcePoolName, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET resourcePools in a subscription.
            /// </summary>
            /// <remarks>
            /// List of resourcePools in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourcePool> ListNext(this IResourcePoolsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET resourcePools in a subscription.
            /// </summary>
            /// <remarks>
            /// List of resourcePools in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourcePool>> ListNextAsync(this IResourcePoolsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements GET resourcePools in a resource group.
            /// </summary>
            /// <remarks>
            /// List of resourcePools in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourcePool> ListByResourceGroupNext(this IResourcePoolsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET resourcePools in a resource group.
            /// </summary>
            /// <remarks>
            /// List of resourcePools in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourcePool>> ListByResourceGroupNextAsync(this IResourcePoolsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
