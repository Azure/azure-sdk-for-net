// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DatastoresOperations.
    /// </summary>
    public static partial class DatastoresOperationsExtensions
    {
            /// <summary>
            /// Implements datastore PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update datastore.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static Datastore Create(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, Datastore body = default(Datastore))
            {
                return operations.CreateAsync(resourceGroupName, datastoreName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements datastore PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update datastore.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datastore> CreateAsync(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, Datastore body = default(Datastore), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, datastoreName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a datastore.
            /// </summary>
            /// <remarks>
            /// Implements datastore GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            public static Datastore Get(this IDatastoresOperations operations, string resourceGroupName, string datastoreName)
            {
                return operations.GetAsync(resourceGroupName, datastoreName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a datastore.
            /// </summary>
            /// <remarks>
            /// Implements datastore GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datastore> GetAsync(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, datastoreName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a datastore.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the datastore resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static Datastore Update(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, datastoreName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a datastore.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the datastore resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datastore> UpdateAsync(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, datastoreName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an datastore.
            /// </summary>
            /// <remarks>
            /// Implements datastore DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            public static void Delete(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, bool? force = default(bool?))
            {
                operations.DeleteAsync(resourceGroupName, datastoreName, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an datastore.
            /// </summary>
            /// <remarks>
            /// Implements datastore DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, datastoreName, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET datastores in a subscription.
            /// </summary>
            /// <remarks>
            /// List of datastores in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Datastore> List(this IDatastoresOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET datastores in a subscription.
            /// </summary>
            /// <remarks>
            /// List of datastores in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Datastore>> ListAsync(this IDatastoresOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements GET datastores in a resource group.
            /// </summary>
            /// <remarks>
            /// List of datastores in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            public static IPage<Datastore> ListByResourceGroup(this IDatastoresOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET datastores in a resource group.
            /// </summary>
            /// <remarks>
            /// List of datastores in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Datastore>> ListByResourceGroupAsync(this IDatastoresOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements datastore PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update datastore.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static Datastore BeginCreate(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, Datastore body = default(Datastore))
            {
                return operations.BeginCreateAsync(resourceGroupName, datastoreName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements datastore PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update datastore.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datastore> BeginCreateAsync(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, Datastore body = default(Datastore), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, datastoreName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an datastore.
            /// </summary>
            /// <remarks>
            /// Implements datastore DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            public static void BeginDelete(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, bool? force = default(bool?))
            {
                operations.BeginDeleteAsync(resourceGroupName, datastoreName, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an datastore.
            /// </summary>
            /// <remarks>
            /// Implements datastore DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='datastoreName'>
            /// Name of the datastore.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDatastoresOperations operations, string resourceGroupName, string datastoreName, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, datastoreName, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET datastores in a subscription.
            /// </summary>
            /// <remarks>
            /// List of datastores in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Datastore> ListNext(this IDatastoresOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET datastores in a subscription.
            /// </summary>
            /// <remarks>
            /// List of datastores in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Datastore>> ListNextAsync(this IDatastoresOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements GET datastores in a resource group.
            /// </summary>
            /// <remarks>
            /// List of datastores in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Datastore> ListByResourceGroupNext(this IDatastoresOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET datastores in a resource group.
            /// </summary>
            /// <remarks>
            /// List of datastores in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Datastore>> ListByResourceGroupNextAsync(this IDatastoresOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
