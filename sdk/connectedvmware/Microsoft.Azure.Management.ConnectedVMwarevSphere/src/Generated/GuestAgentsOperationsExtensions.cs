// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GuestAgentsOperations.
    /// </summary>
    public static partial class GuestAgentsOperationsExtensions
    {
            /// <summary>
            /// Implements GuestAgent PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update GuestAgent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the guestAgents.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static GuestAgent Create(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name, GuestAgent body = default(GuestAgent))
            {
                return operations.CreateAsync(resourceGroupName, virtualMachineName, name, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GuestAgent PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update GuestAgent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the guestAgents.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GuestAgent> CreateAsync(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name, GuestAgent body = default(GuestAgent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, name, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets GuestAgent.
            /// </summary>
            /// <remarks>
            /// Implements GuestAgent GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the GuestAgent.
            /// </param>
            public static GuestAgent Get(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name)
            {
                return operations.GetAsync(resourceGroupName, virtualMachineName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets GuestAgent.
            /// </summary>
            /// <remarks>
            /// Implements GuestAgent GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the GuestAgent.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GuestAgent> GetAsync(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, virtualMachineName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an GuestAgent.
            /// </summary>
            /// <remarks>
            /// Implements GuestAgent DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the GuestAgent.
            /// </param>
            public static void Delete(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name)
            {
                operations.DeleteAsync(resourceGroupName, virtualMachineName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an GuestAgent.
            /// </summary>
            /// <remarks>
            /// Implements GuestAgent DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the GuestAgent.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, virtualMachineName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET GuestAgent in a vm.
            /// </summary>
            /// <remarks>
            /// Returns the list of GuestAgent of the given vm.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            public static IPage<GuestAgent> ListByVm(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName)
            {
                return operations.ListByVmAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET GuestAgent in a vm.
            /// </summary>
            /// <remarks>
            /// Returns the list of GuestAgent of the given vm.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GuestAgent>> ListByVmAsync(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVmWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements GuestAgent PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update GuestAgent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the guestAgents.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static GuestAgent BeginCreate(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name, GuestAgent body = default(GuestAgent))
            {
                return operations.BeginCreateAsync(resourceGroupName, virtualMachineName, name, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GuestAgent PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update GuestAgent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the guestAgents.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GuestAgent> BeginCreateAsync(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name, GuestAgent body = default(GuestAgent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, name, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an GuestAgent.
            /// </summary>
            /// <remarks>
            /// Implements GuestAgent DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the GuestAgent.
            /// </param>
            public static void BeginDelete(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name)
            {
                operations.BeginDeleteAsync(resourceGroupName, virtualMachineName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an GuestAgent.
            /// </summary>
            /// <remarks>
            /// Implements GuestAgent DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the vm.
            /// </param>
            /// <param name='name'>
            /// Name of the GuestAgent.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IGuestAgentsOperations operations, string resourceGroupName, string virtualMachineName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, virtualMachineName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET GuestAgent in a vm.
            /// </summary>
            /// <remarks>
            /// Returns the list of GuestAgent of the given vm.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GuestAgent> ListByVmNext(this IGuestAgentsOperations operations, string nextPageLink)
            {
                return operations.ListByVmNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET GuestAgent in a vm.
            /// </summary>
            /// <remarks>
            /// Returns the list of GuestAgent of the given vm.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GuestAgent>> ListByVmNextAsync(this IGuestAgentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVmNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
