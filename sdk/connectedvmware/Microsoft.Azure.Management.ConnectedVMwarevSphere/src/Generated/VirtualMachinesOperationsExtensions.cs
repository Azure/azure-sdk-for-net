// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualMachinesOperations.
    /// </summary>
    public static partial class VirtualMachinesOperationsExtensions
    {
            /// <summary>
            /// Implements virtual machine PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static VirtualMachine Create(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachine body = default(VirtualMachine))
            {
                return operations.CreateAsync(resourceGroupName, virtualMachineName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> CreateAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachine body = default(VirtualMachine), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a virtual machine.
            /// </summary>
            /// <remarks>
            /// Implements virtual machine GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            public static VirtualMachine Get(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                return operations.GetAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a virtual machine.
            /// </summary>
            /// <remarks>
            /// Implements virtual machine GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> GetAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a virtual machine.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the virtual machine resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='body'>
            /// Resource properties to update.
            /// </param>
            public static VirtualMachine Update(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachineUpdate body = default(VirtualMachineUpdate))
            {
                return operations.UpdateAsync(resourceGroupName, virtualMachineName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a virtual machine.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the virtual machine resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='body'>
            /// Resource properties to update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> UpdateAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachineUpdate body = default(VirtualMachineUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an virtual machine.
            /// </summary>
            /// <remarks>
            /// Implements virtual machine DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            public static void Delete(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, bool? force = default(bool?))
            {
                operations.DeleteAsync(resourceGroupName, virtualMachineName, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an virtual machine.
            /// </summary>
            /// <remarks>
            /// Implements virtual machine DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, virtualMachineName, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements the operation to stop a virtual machine.
            /// </summary>
            /// <remarks>
            /// Stop virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='skipShutdown'>
            /// Gets or sets a value indicating whether to request non-graceful VM
            /// shutdown. True value for this flag indicates non-graceful shutdown whereas
            /// false indicates otherwise. Defaults to false.
            /// </param>
            public static void Stop(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, bool? skipShutdown = false)
            {
                operations.StopAsync(resourceGroupName, virtualMachineName, skipShutdown).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements the operation to stop a virtual machine.
            /// </summary>
            /// <remarks>
            /// Stop virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='skipShutdown'>
            /// Gets or sets a value indicating whether to request non-graceful VM
            /// shutdown. True value for this flag indicates non-graceful shutdown whereas
            /// false indicates otherwise. Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, bool? skipShutdown = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, virtualMachineName, skipShutdown, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements the operation to start a virtual machine.
            /// </summary>
            /// <remarks>
            /// Start virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            public static void Start(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                operations.StartAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements the operation to start a virtual machine.
            /// </summary>
            /// <remarks>
            /// Start virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements the operation to restart a virtual machine.
            /// </summary>
            /// <remarks>
            /// Restart virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            public static void Restart(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                operations.RestartAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements the operation to restart a virtual machine.
            /// </summary>
            /// <remarks>
            /// Restart virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET virtualMachines in a subscription.
            /// </summary>
            /// <remarks>
            /// List of virtualMachines in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<VirtualMachine> List(this IVirtualMachinesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET virtualMachines in a subscription.
            /// </summary>
            /// <remarks>
            /// List of virtualMachines in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListAsync(this IVirtualMachinesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements GET virtualMachines in a resource group.
            /// </summary>
            /// <remarks>
            /// List of virtualMachines in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            public static IPage<VirtualMachine> ListByResourceGroup(this IVirtualMachinesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET virtualMachines in a resource group.
            /// </summary>
            /// <remarks>
            /// List of virtualMachines in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListByResourceGroupAsync(this IVirtualMachinesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements virtual machine PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static VirtualMachine BeginCreate(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachine body = default(VirtualMachine))
            {
                return operations.BeginCreateAsync(resourceGroupName, virtualMachineName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> BeginCreateAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachine body = default(VirtualMachine), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a virtual machine.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the virtual machine resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='body'>
            /// Resource properties to update.
            /// </param>
            public static VirtualMachine BeginUpdate(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachineUpdate body = default(VirtualMachineUpdate))
            {
                return operations.BeginUpdateAsync(resourceGroupName, virtualMachineName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a virtual machine.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the virtual machine resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='body'>
            /// Resource properties to update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> BeginUpdateAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachineUpdate body = default(VirtualMachineUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an virtual machine.
            /// </summary>
            /// <remarks>
            /// Implements virtual machine DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            public static void BeginDelete(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, bool? force = default(bool?))
            {
                operations.BeginDeleteAsync(resourceGroupName, virtualMachineName, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an virtual machine.
            /// </summary>
            /// <remarks>
            /// Implements virtual machine DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='force'>
            /// Whether force delete was specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, virtualMachineName, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements the operation to stop a virtual machine.
            /// </summary>
            /// <remarks>
            /// Stop virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='skipShutdown'>
            /// Gets or sets a value indicating whether to request non-graceful VM
            /// shutdown. True value for this flag indicates non-graceful shutdown whereas
            /// false indicates otherwise. Defaults to false.
            /// </param>
            public static void BeginStop(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, bool? skipShutdown = false)
            {
                operations.BeginStopAsync(resourceGroupName, virtualMachineName, skipShutdown).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements the operation to stop a virtual machine.
            /// </summary>
            /// <remarks>
            /// Stop virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='skipShutdown'>
            /// Gets or sets a value indicating whether to request non-graceful VM
            /// shutdown. True value for this flag indicates non-graceful shutdown whereas
            /// false indicates otherwise. Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, bool? skipShutdown = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, virtualMachineName, skipShutdown, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements the operation to start a virtual machine.
            /// </summary>
            /// <remarks>
            /// Start virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            public static void BeginStart(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                operations.BeginStartAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements the operation to start a virtual machine.
            /// </summary>
            /// <remarks>
            /// Start virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements the operation to restart a virtual machine.
            /// </summary>
            /// <remarks>
            /// Restart virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            public static void BeginRestart(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                operations.BeginRestartAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements the operation to restart a virtual machine.
            /// </summary>
            /// <remarks>
            /// Restart virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='virtualMachineName'>
            /// Name of the virtual machine resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestartAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestartWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET virtualMachines in a subscription.
            /// </summary>
            /// <remarks>
            /// List of virtualMachines in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualMachine> ListNext(this IVirtualMachinesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET virtualMachines in a subscription.
            /// </summary>
            /// <remarks>
            /// List of virtualMachines in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListNextAsync(this IVirtualMachinesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements GET virtualMachines in a resource group.
            /// </summary>
            /// <remarks>
            /// List of virtualMachines in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualMachine> ListByResourceGroupNext(this IVirtualMachinesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET virtualMachines in a resource group.
            /// </summary>
            /// <remarks>
            /// List of virtualMachines in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListByResourceGroupNextAsync(this IVirtualMachinesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
