// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InventoryItemsOperations.
    /// </summary>
    public static partial class InventoryItemsOperationsExtensions
    {
            /// <summary>
            /// Implements InventoryItem PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update InventoryItem.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='vcenterName'>
            /// Name of the vCenter.
            /// </param>
            /// <param name='inventoryItemName'>
            /// Name of the inventoryItem.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            public static InventoryItem Create(this IInventoryItemsOperations operations, string resourceGroupName, string vcenterName, string inventoryItemName, InventoryItem body = default(InventoryItem))
            {
                return operations.CreateAsync(resourceGroupName, vcenterName, inventoryItemName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements InventoryItem PUT method.
            /// </summary>
            /// <remarks>
            /// Create Or Update InventoryItem.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='vcenterName'>
            /// Name of the vCenter.
            /// </param>
            /// <param name='inventoryItemName'>
            /// Name of the inventoryItem.
            /// </param>
            /// <param name='body'>
            /// Request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InventoryItem> CreateAsync(this IInventoryItemsOperations operations, string resourceGroupName, string vcenterName, string inventoryItemName, InventoryItem body = default(InventoryItem), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, vcenterName, inventoryItemName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets InventoryItem.
            /// </summary>
            /// <remarks>
            /// Implements InventoryItem GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='vcenterName'>
            /// Name of the vCenter.
            /// </param>
            /// <param name='inventoryItemName'>
            /// Name of the inventoryItem.
            /// </param>
            public static InventoryItem Get(this IInventoryItemsOperations operations, string resourceGroupName, string vcenterName, string inventoryItemName)
            {
                return operations.GetAsync(resourceGroupName, vcenterName, inventoryItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets InventoryItem.
            /// </summary>
            /// <remarks>
            /// Implements InventoryItem GET method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='vcenterName'>
            /// Name of the vCenter.
            /// </param>
            /// <param name='inventoryItemName'>
            /// Name of the inventoryItem.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InventoryItem> GetAsync(this IInventoryItemsOperations operations, string resourceGroupName, string vcenterName, string inventoryItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vcenterName, inventoryItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an inventoryItem.
            /// </summary>
            /// <remarks>
            /// Implements inventoryItem DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='vcenterName'>
            /// Name of the vCenter.
            /// </param>
            /// <param name='inventoryItemName'>
            /// Name of the inventoryItem.
            /// </param>
            public static void Delete(this IInventoryItemsOperations operations, string resourceGroupName, string vcenterName, string inventoryItemName)
            {
                operations.DeleteAsync(resourceGroupName, vcenterName, inventoryItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an inventoryItem.
            /// </summary>
            /// <remarks>
            /// Implements inventoryItem DELETE method.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='vcenterName'>
            /// Name of the vCenter.
            /// </param>
            /// <param name='inventoryItemName'>
            /// Name of the inventoryItem.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IInventoryItemsOperations operations, string resourceGroupName, string vcenterName, string inventoryItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, vcenterName, inventoryItemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Implements GET inventoryItems in a vCenter.
            /// </summary>
            /// <remarks>
            /// Returns the list of inventoryItems of the given vCenter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='vcenterName'>
            /// Name of the vCenter.
            /// </param>
            public static IPage<InventoryItem> ListByVCenter(this IInventoryItemsOperations operations, string resourceGroupName, string vcenterName)
            {
                return operations.ListByVCenterAsync(resourceGroupName, vcenterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET inventoryItems in a vCenter.
            /// </summary>
            /// <remarks>
            /// Returns the list of inventoryItems of the given vCenter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='vcenterName'>
            /// Name of the vCenter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InventoryItem>> ListByVCenterAsync(this IInventoryItemsOperations operations, string resourceGroupName, string vcenterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVCenterWithHttpMessagesAsync(resourceGroupName, vcenterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements GET inventoryItems in a vCenter.
            /// </summary>
            /// <remarks>
            /// Returns the list of inventoryItems of the given vCenter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InventoryItem> ListByVCenterNext(this IInventoryItemsOperations operations, string nextPageLink)
            {
                return operations.ListByVCenterNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements GET inventoryItems in a vCenter.
            /// </summary>
            /// <remarks>
            /// Returns the list of inventoryItems of the given vCenter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InventoryItem>> ListByVCenterNextAsync(this IInventoryItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVCenterNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
