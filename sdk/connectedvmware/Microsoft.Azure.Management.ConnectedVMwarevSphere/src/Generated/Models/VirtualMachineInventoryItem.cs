// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The VM inventory item.
    /// </summary>
    [Newtonsoft.Json.JsonObject("VirtualMachine")]
    public partial class VirtualMachineInventoryItem : InventoryItemProperties
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineInventoryItem
        /// class.
        /// </summary>
        public VirtualMachineInventoryItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineInventoryItem
        /// class.
        /// </summary>
        /// <param name="managedResourceId">Gets or sets the tracked resource
        /// id corresponding to the inventory resource.</param>
        /// <param name="moRefId">Gets or sets the MoRef (Managed Object
        /// Reference) ID for the inventory item.</param>
        /// <param name="moName">Gets or sets the vCenter Managed Object name
        /// for the inventory item.</param>
        /// <param name="provisioningState">Gets or sets the provisioning
        /// state.</param>
        /// <param name="osType">Gets or sets the type of the os. Possible
        /// values include: 'Windows', 'Linux', 'Other'</param>
        /// <param name="osName">Gets or sets os name.</param>
        /// <param name="ipAddresses">Gets or sets the nic ip
        /// addresses.</param>
        /// <param name="folderPath">Gets or sets the folder path of the
        /// vm.</param>
        /// <param name="host">Host inventory resource details.</param>
        /// <param name="resourcePool">ResourcePool inventory resource
        /// details.</param>
        /// <param name="instanceUuid">Gets or sets the instance uuid of the
        /// vm.</param>
        /// <param name="smbiosUuid">Gets or sets the SMBIOS UUID of the
        /// vm.</param>
        /// <param name="powerState">Gets the power state of the virtual
        /// machine.</param>
        /// <param name="toolsRunningStatus">Gets or sets the current running
        /// status of VMware Tools running in the guest operating
        /// system.</param>
        /// <param name="toolsVersionStatus">Gets or sets the current version
        /// status of VMware Tools installed in the guest operating
        /// system.</param>
        /// <param name="toolsVersion">Gets or sets the current version of
        /// VMware Tools.</param>
        public VirtualMachineInventoryItem(string managedResourceId = default(string), string moRefId = default(string), string moName = default(string), string provisioningState = default(string), string osType = default(string), string osName = default(string), IList<string> ipAddresses = default(IList<string>), string folderPath = default(string), InventoryItemDetails host = default(InventoryItemDetails), InventoryItemDetails resourcePool = default(InventoryItemDetails), string instanceUuid = default(string), string smbiosUuid = default(string), string powerState = default(string), string toolsRunningStatus = default(string), string toolsVersionStatus = default(string), string toolsVersion = default(string))
            : base(managedResourceId, moRefId, moName, provisioningState)
        {
            OsType = osType;
            OsName = osName;
            IpAddresses = ipAddresses;
            FolderPath = folderPath;
            Host = host;
            ResourcePool = resourcePool;
            InstanceUuid = instanceUuid;
            SmbiosUuid = smbiosUuid;
            PowerState = powerState;
            ToolsRunningStatus = toolsRunningStatus;
            ToolsVersionStatus = toolsVersionStatus;
            ToolsVersion = toolsVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of the os. Possible values include:
        /// 'Windows', 'Linux', 'Other'
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; set; }

        /// <summary>
        /// Gets or sets os name.
        /// </summary>
        [JsonProperty(PropertyName = "osName")]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or sets the nic ip addresses.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddresses")]
        public IList<string> IpAddresses { get; set; }

        /// <summary>
        /// Gets or sets the folder path of the vm.
        /// </summary>
        [JsonProperty(PropertyName = "folderPath")]
        public string FolderPath { get; set; }

        /// <summary>
        /// Gets or sets host inventory resource details.
        /// </summary>
        [JsonProperty(PropertyName = "host")]
        public InventoryItemDetails Host { get; set; }

        /// <summary>
        /// Gets or sets resourcePool inventory resource details.
        /// </summary>
        [JsonProperty(PropertyName = "resourcePool")]
        public InventoryItemDetails ResourcePool { get; set; }

        /// <summary>
        /// Gets or sets the instance uuid of the vm.
        /// </summary>
        [JsonProperty(PropertyName = "instanceUuid")]
        public string InstanceUuid { get; set; }

        /// <summary>
        /// Gets or sets the SMBIOS UUID of the vm.
        /// </summary>
        [JsonProperty(PropertyName = "smbiosUuid")]
        public string SmbiosUuid { get; set; }

        /// <summary>
        /// Gets the power state of the virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "powerState")]
        public string PowerState { get; private set; }

        /// <summary>
        /// Gets or sets the current running status of VMware Tools running in
        /// the guest operating system.
        /// </summary>
        [JsonProperty(PropertyName = "toolsRunningStatus")]
        public string ToolsRunningStatus { get; private set; }

        /// <summary>
        /// Gets or sets the current version status of VMware Tools installed
        /// in the guest operating system.
        /// </summary>
        [JsonProperty(PropertyName = "toolsVersionStatus")]
        public string ToolsVersionStatus { get; private set; }

        /// <summary>
        /// Gets or sets the current version of VMware Tools.
        /// </summary>
        [JsonProperty(PropertyName = "toolsVersion")]
        public string ToolsVersion { get; private set; }

    }
}
