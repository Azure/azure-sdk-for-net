// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The VM Template inventory item.
    /// </summary>
    [Newtonsoft.Json.JsonObject("VirtualMachineTemplate")]
    public partial class VirtualMachineTemplateInventoryItem : InventoryItemProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineTemplateInventoryItem class.
        /// </summary>
        public VirtualMachineTemplateInventoryItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineTemplateInventoryItem class.
        /// </summary>
        /// <param name="managedResourceId">Gets or sets the tracked resource
        /// id corresponding to the inventory resource.</param>
        /// <param name="moRefId">Gets or sets the MoRef (Managed Object
        /// Reference) ID for the inventory item.</param>
        /// <param name="moName">Gets or sets the vCenter Managed Object name
        /// for the inventory item.</param>
        /// <param name="provisioningState">Gets or sets the provisioning
        /// state.</param>
        /// <param name="memorySizeMB">Gets or sets memory size in MBs for the
        /// template.</param>
        /// <param name="numCPUs">Gets or sets the number of vCPUs for the
        /// template.</param>
        /// <param name="numCoresPerSocket">Gets or sets the number of cores
        /// per socket for the template.
        /// Defaults to 1 if unspecified.</param>
        /// <param name="osType">Gets or sets the type of the os. Possible
        /// values include: 'Windows', 'Linux', 'Other'</param>
        /// <param name="osName">Gets or sets os name.</param>
        /// <param name="folderPath">Gets or sets the folder path of the
        /// template.</param>
        public VirtualMachineTemplateInventoryItem(string managedResourceId = default(string), string moRefId = default(string), string moName = default(string), string provisioningState = default(string), int? memorySizeMB = default(int?), int? numCPUs = default(int?), int? numCoresPerSocket = default(int?), string osType = default(string), string osName = default(string), string folderPath = default(string))
            : base(managedResourceId, moRefId, moName, provisioningState)
        {
            MemorySizeMB = memorySizeMB;
            NumCPUs = numCPUs;
            NumCoresPerSocket = numCoresPerSocket;
            OsType = osType;
            OsName = osName;
            FolderPath = folderPath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets memory size in MBs for the template.
        /// </summary>
        [JsonProperty(PropertyName = "memorySizeMB")]
        public int? MemorySizeMB { get; set; }

        /// <summary>
        /// Gets or sets the number of vCPUs for the template.
        /// </summary>
        [JsonProperty(PropertyName = "numCPUs")]
        public int? NumCPUs { get; set; }

        /// <summary>
        /// Gets or sets the number of cores per socket for the template.
        /// Defaults to 1 if unspecified.
        /// </summary>
        [JsonProperty(PropertyName = "numCoresPerSocket")]
        public int? NumCoresPerSocket { get; set; }

        /// <summary>
        /// Gets or sets the type of the os. Possible values include:
        /// 'Windows', 'Linux', 'Other'
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; set; }

        /// <summary>
        /// Gets or sets os name.
        /// </summary>
        [JsonProperty(PropertyName = "osName")]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or sets the folder path of the template.
        /// </summary>
        [JsonProperty(PropertyName = "folderPath")]
        public string FolderPath { get; set; }

    }
}
