// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the virtual disk update.
    /// </summary>
    public partial class VirtualDiskUpdate
    {
        /// <summary>
        /// Initializes a new instance of the VirtualDiskUpdate class.
        /// </summary>
        public VirtualDiskUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualDiskUpdate class.
        /// </summary>
        /// <param name="name">Gets or sets the name of the virtual
        /// disk.</param>
        /// <param name="diskSizeGB">Gets or sets the disk total size.</param>
        /// <param name="deviceKey">Gets or sets the device key value.</param>
        /// <param name="diskMode">Gets or sets the disk mode. Possible values
        /// include: 'persistent', 'independent_persistent',
        /// 'independent_nonpersistent'</param>
        /// <param name="controllerKey">Gets or sets the controller id.</param>
        /// <param name="unitNumber">Gets or sets the unit number of the disk
        /// on the controller.</param>
        /// <param name="deviceName">Gets or sets the device name.</param>
        /// <param name="diskType">Gets or sets the disk backing type. Possible
        /// values include: 'flat', 'pmem', 'rawphysical', 'rawvirtual',
        /// 'sparse', 'sesparse', 'unknown'</param>
        public VirtualDiskUpdate(string name = default(string), int? diskSizeGB = default(int?), int? deviceKey = default(int?), string diskMode = default(string), int? controllerKey = default(int?), int? unitNumber = default(int?), string deviceName = default(string), string diskType = default(string))
        {
            Name = name;
            DiskSizeGB = diskSizeGB;
            DeviceKey = deviceKey;
            DiskMode = diskMode;
            ControllerKey = controllerKey;
            UnitNumber = unitNumber;
            DeviceName = deviceName;
            DiskType = diskType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the virtual disk.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the disk total size.
        /// </summary>
        [JsonProperty(PropertyName = "diskSizeGB")]
        public int? DiskSizeGB { get; set; }

        /// <summary>
        /// Gets or sets the device key value.
        /// </summary>
        [JsonProperty(PropertyName = "deviceKey")]
        public int? DeviceKey { get; set; }

        /// <summary>
        /// Gets or sets the disk mode. Possible values include: 'persistent',
        /// 'independent_persistent', 'independent_nonpersistent'
        /// </summary>
        [JsonProperty(PropertyName = "diskMode")]
        public string DiskMode { get; set; }

        /// <summary>
        /// Gets or sets the controller id.
        /// </summary>
        [JsonProperty(PropertyName = "controllerKey")]
        public int? ControllerKey { get; set; }

        /// <summary>
        /// Gets or sets the unit number of the disk on the controller.
        /// </summary>
        [JsonProperty(PropertyName = "unitNumber")]
        public int? UnitNumber { get; set; }

        /// <summary>
        /// Gets or sets the device name.
        /// </summary>
        [JsonProperty(PropertyName = "deviceName")]
        public string DeviceName { get; set; }

        /// <summary>
        /// Gets or sets the disk backing type. Possible values include:
        /// 'flat', 'pmem', 'rawphysical', 'rawvirtual', 'sparse', 'sesparse',
        /// 'unknown'
        /// </summary>
        [JsonProperty(PropertyName = "diskType")]
        public string DiskType { get; set; }

    }
}
