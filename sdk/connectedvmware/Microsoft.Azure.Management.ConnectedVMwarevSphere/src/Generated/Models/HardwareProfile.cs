// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the resource properties.
    /// </summary>
    public partial class HardwareProfile
    {
        /// <summary>
        /// Initializes a new instance of the HardwareProfile class.
        /// </summary>
        public HardwareProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HardwareProfile class.
        /// </summary>
        /// <param name="memorySizeMB">Gets or sets memory size in MBs for the
        /// vm.</param>
        /// <param name="numCPUs">Gets or sets the number of vCPUs for the
        /// vm.</param>
        /// <param name="numCoresPerSocket">Gets or sets the number of cores
        /// per socket for the vm. Defaults to 1 if unspecified.</param>
        /// <param name="cpuHotAddEnabled">Gets or sets a value indicating
        /// whether virtual processors can be added while this virtual machine
        /// is running.</param>
        /// <param name="cpuHotRemoveEnabled">Gets or sets a value indicating
        /// whether virtual processors can be removed while this virtual
        /// machine is running.</param>
        /// <param name="memoryHotAddEnabled">Gets or sets a value indicating
        /// whether memory can be added while this virtual machine is
        /// running.</param>
        public HardwareProfile(int? memorySizeMB = default(int?), int? numCPUs = default(int?), int? numCoresPerSocket = default(int?), bool? cpuHotAddEnabled = default(bool?), bool? cpuHotRemoveEnabled = default(bool?), bool? memoryHotAddEnabled = default(bool?))
        {
            MemorySizeMB = memorySizeMB;
            NumCPUs = numCPUs;
            NumCoresPerSocket = numCoresPerSocket;
            CpuHotAddEnabled = cpuHotAddEnabled;
            CpuHotRemoveEnabled = cpuHotRemoveEnabled;
            MemoryHotAddEnabled = memoryHotAddEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets memory size in MBs for the vm.
        /// </summary>
        [JsonProperty(PropertyName = "memorySizeMB")]
        public int? MemorySizeMB { get; set; }

        /// <summary>
        /// Gets or sets the number of vCPUs for the vm.
        /// </summary>
        [JsonProperty(PropertyName = "numCPUs")]
        public int? NumCPUs { get; set; }

        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to
        /// 1 if unspecified.
        /// </summary>
        [JsonProperty(PropertyName = "numCoresPerSocket")]
        public int? NumCoresPerSocket { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be
        /// added while this virtual machine is running.
        /// </summary>
        [JsonProperty(PropertyName = "cpuHotAddEnabled")]
        public bool? CpuHotAddEnabled { get; private set; }

        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be
        /// removed while this virtual machine is running.
        /// </summary>
        [JsonProperty(PropertyName = "cpuHotRemoveEnabled")]
        public bool? CpuHotRemoveEnabled { get; private set; }

        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while
        /// this virtual machine is running.
        /// </summary>
        [JsonProperty(PropertyName = "memoryHotAddEnabled")]
        public bool? MemoryHotAddEnabled { get; private set; }

    }
}
