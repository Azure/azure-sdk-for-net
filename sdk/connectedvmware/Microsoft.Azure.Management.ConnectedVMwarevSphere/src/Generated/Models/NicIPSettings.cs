// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the network interface ip settings.
    /// </summary>
    public partial class NicIPSettings
    {
        /// <summary>
        /// Initializes a new instance of the NicIPSettings class.
        /// </summary>
        public NicIPSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NicIPSettings class.
        /// </summary>
        /// <param name="allocationMethod">Gets or sets the nic allocation
        /// method. Possible values include: 'unset', 'dynamic', 'static',
        /// 'linklayer', 'random', 'other'</param>
        /// <param name="dnsServers">Gets or sets the dns servers.</param>
        /// <param name="gateway">Gets or sets the gateway.</param>
        /// <param name="ipAddress">Gets or sets the ip address for the
        /// nic.</param>
        /// <param name="subnetMask">Gets or sets the mask.</param>
        /// <param name="primaryWinsServer">Gets or sets the primary
        /// server.</param>
        /// <param name="secondaryWinsServer">Gets or sets the secondary
        /// server.</param>
        /// <param name="ipAddressInfo">Gets or sets the IP address information
        /// being reported for this NIC. This contains the same IPv4
        /// information above plus IPV6 information.</param>
        public NicIPSettings(string allocationMethod = default(string), IList<string> dnsServers = default(IList<string>), IList<string> gateway = default(IList<string>), string ipAddress = default(string), string subnetMask = default(string), string primaryWinsServer = default(string), string secondaryWinsServer = default(string), IList<NicIPAddressSettings> ipAddressInfo = default(IList<NicIPAddressSettings>))
        {
            AllocationMethod = allocationMethod;
            DnsServers = dnsServers;
            Gateway = gateway;
            IpAddress = ipAddress;
            SubnetMask = subnetMask;
            PrimaryWinsServer = primaryWinsServer;
            SecondaryWinsServer = secondaryWinsServer;
            IpAddressInfo = ipAddressInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the nic allocation method. Possible values include:
        /// 'unset', 'dynamic', 'static', 'linklayer', 'random', 'other'
        /// </summary>
        [JsonProperty(PropertyName = "allocationMethod")]
        public string AllocationMethod { get; set; }

        /// <summary>
        /// Gets or sets the dns servers.
        /// </summary>
        [JsonProperty(PropertyName = "dnsServers")]
        public IList<string> DnsServers { get; set; }

        /// <summary>
        /// Gets or sets the gateway.
        /// </summary>
        [JsonProperty(PropertyName = "gateway")]
        public IList<string> Gateway { get; set; }

        /// <summary>
        /// Gets or sets the ip address for the nic.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or sets the mask.
        /// </summary>
        [JsonProperty(PropertyName = "subnetMask")]
        public string SubnetMask { get; set; }

        /// <summary>
        /// Gets or sets the primary server.
        /// </summary>
        [JsonProperty(PropertyName = "primaryWinsServer")]
        public string PrimaryWinsServer { get; private set; }

        /// <summary>
        /// Gets or sets the secondary server.
        /// </summary>
        [JsonProperty(PropertyName = "secondaryWinsServer")]
        public string SecondaryWinsServer { get; private set; }

        /// <summary>
        /// Gets or sets the IP address information being reported for this
        /// NIC. This contains the same IPv4 information above plus IPV6
        /// information.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddressInfo")]
        public IList<NicIPAddressSettings> IpAddressInfo { get; private set; }

    }
}
