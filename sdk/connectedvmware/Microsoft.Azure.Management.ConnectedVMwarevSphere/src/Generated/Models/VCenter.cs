// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the vCenter.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VCenter : IResource
    {
        /// <summary>
        /// Initializes a new instance of the VCenter class.
        /// </summary>
        public VCenter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VCenter class.
        /// </summary>
        /// <param name="fqdn">Gets or sets the FQDN/IPAddress of the
        /// vCenter.</param>
        /// <param name="location">Gets or sets the location.</param>
        /// <param name="uuid">Gets or sets a unique identifier for this
        /// resource.</param>
        /// <param name="port">Gets or sets the port of the vCenter.</param>
        /// <param name="version">Gets or sets the version of the
        /// vCenter.</param>
        /// <param name="instanceUuid">Gets or sets the instance UUID of the
        /// vCenter.</param>
        /// <param name="connectionStatus">Gets or sets the connection status
        /// to the vCenter.</param>
        /// <param name="customResourceName">Gets the name of the corresponding
        /// resource in Kubernetes.</param>
        /// <param name="credentials">Username / Password Credentials to
        /// connect to vcenter.</param>
        /// <param name="statuses">The resource status information.</param>
        /// <param name="provisioningState">Gets or sets the provisioning
        /// state.</param>
        /// <param name="extendedLocation">Gets or sets the extended
        /// location.</param>
        /// <param name="systemData">The system data.</param>
        /// <param name="tags">Gets or sets the Resource tags.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="id">Gets or sets the Id.</param>
        /// <param name="type">Gets or sets the type of the resource.</param>
        /// <param name="kind">Metadata used by portal/tooling/etc to render
        /// different UX experiences for resources of the same type; e.g.
        /// ApiApps are a kind of Microsoft.Web/sites type.  If supported, the
        /// resource provider must validate and persist this value.</param>
        public VCenter(string fqdn, string location, string uuid = default(string), int? port = default(int?), string version = default(string), string instanceUuid = default(string), string connectionStatus = default(string), string customResourceName = default(string), VICredential credentials = default(VICredential), IList<ResourceStatus> statuses = default(IList<ResourceStatus>), string provisioningState = default(string), ExtendedLocation extendedLocation = default(ExtendedLocation), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), string name = default(string), string id = default(string), string type = default(string), string kind = default(string))
        {
            Uuid = uuid;
            Fqdn = fqdn;
            Port = port;
            Version = version;
            InstanceUuid = instanceUuid;
            ConnectionStatus = connectionStatus;
            CustomResourceName = customResourceName;
            Credentials = credentials;
            Statuses = statuses;
            ProvisioningState = provisioningState;
            Location = location;
            ExtendedLocation = extendedLocation;
            SystemData = systemData;
            Tags = tags;
            Name = name;
            Id = id;
            Type = type;
            Kind = kind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a unique identifier for this resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.uuid")]
        public string Uuid { get; private set; }

        /// <summary>
        /// Gets or sets the FQDN/IPAddress of the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fqdn")]
        public string Fqdn { get; set; }

        /// <summary>
        /// Gets or sets the port of the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "properties.port")]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or sets the version of the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; private set; }

        /// <summary>
        /// Gets or sets the instance UUID of the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceUuid")]
        public string InstanceUuid { get; private set; }

        /// <summary>
        /// Gets or sets the connection status to the vCenter.
        /// </summary>
        [JsonProperty(PropertyName = "properties.connectionStatus")]
        public string ConnectionStatus { get; private set; }

        /// <summary>
        /// Gets the name of the corresponding resource in Kubernetes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customResourceName")]
        public string CustomResourceName { get; private set; }

        /// <summary>
        /// Gets or sets username / Password Credentials to connect to vcenter.
        /// </summary>
        [JsonProperty(PropertyName = "properties.credentials")]
        public VICredential Credentials { get; set; }

        /// <summary>
        /// Gets the resource status information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.statuses")]
        public IList<ResourceStatus> Statuses { get; private set; }

        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        [JsonProperty(PropertyName = "extendedLocation")]
        public ExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// Gets or sets the system data.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Gets or sets the Resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets the type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets metadata used by portal/tooling/etc to render
        /// different UX experiences for resources of the same type; e.g.
        /// ApiApps are a kind of Microsoft.Web/sites type.  If supported, the
        /// resource provider must validate and persist this value.
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

    }
}
