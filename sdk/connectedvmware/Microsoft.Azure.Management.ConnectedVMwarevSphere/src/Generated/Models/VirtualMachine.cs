// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Define the virtualMachine.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VirtualMachine : IResource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachine class.
        /// </summary>
        public VirtualMachine()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachine class.
        /// </summary>
        /// <param name="location">Gets or sets the location.</param>
        /// <param name="resourcePoolId">Gets or sets the ARM Id of the
        /// resourcePool resource on which this virtual machine will
        /// deploy.</param>
        /// <param name="templateId">Gets or sets the ARM Id of the template
        /// resource to deploy the virtual machine.</param>
        /// <param name="vCenterId">Gets or sets the ARM Id of the vCenter
        /// resource in which this resource pool resides.</param>
        /// <param name="placementProfile">Placement properties.</param>
        /// <param name="osProfile">OS properties.</param>
        /// <param name="hardwareProfile">Hardware properties.</param>
        /// <param name="networkProfile">Network properties.</param>
        /// <param name="storageProfile">Storage properties.</param>
        /// <param name="guestAgentProfile">Guest agent status
        /// properties.</param>
        /// <param name="moRefId">Gets or sets the vCenter MoRef (Managed
        /// Object Reference) ID for the virtual machine.</param>
        /// <param name="inventoryItemId">Gets or sets the inventory Item ID
        /// for the virtual machine.</param>
        /// <param name="moName">Gets or sets the vCenter Managed Object name
        /// for the virtual machine.</param>
        /// <param name="folderPath">Gets or sets the folder path of the
        /// vm.</param>
        /// <param name="instanceUuid">Gets or sets the instance uuid of the
        /// vm.</param>
        /// <param name="smbiosUuid">Gets or sets the SMBIOS UUID of the
        /// vm.</param>
        /// <param name="firmwareType">Firmware type. Possible values include:
        /// 'bios', 'efi'</param>
        /// <param name="powerState">Gets the power state of the virtual
        /// machine.</param>
        /// <param name="customResourceName">Gets the name of the corresponding
        /// resource in Kubernetes.</param>
        /// <param name="uuid">Gets or sets a unique identifier for this
        /// resource.</param>
        /// <param name="statuses">The resource status information.</param>
        /// <param name="provisioningState">Gets or sets the provisioning
        /// state.</param>
        /// <param name="vmId">Gets or sets a unique identifier for the vm
        /// resource.</param>
        /// <param name="extendedLocation">Gets or sets the extended
        /// location.</param>
        /// <param name="systemData">The system data.</param>
        /// <param name="tags">Gets or sets the Resource tags.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="id">Gets or sets the Id.</param>
        /// <param name="type">Gets or sets the type of the resource.</param>
        /// <param name="kind">Metadata used by portal/tooling/etc to render
        /// different UX experiences for resources of the same type; e.g.
        /// ApiApps are a kind of Microsoft.Web/sites type.  If supported, the
        /// resource provider must validate and persist this value.</param>
        /// <param name="identity">The identity of the resource.</param>
        public VirtualMachine(string location, string resourcePoolId = default(string), string templateId = default(string), string vCenterId = default(string), PlacementProfile placementProfile = default(PlacementProfile), OsProfile osProfile = default(OsProfile), HardwareProfile hardwareProfile = default(HardwareProfile), NetworkProfile networkProfile = default(NetworkProfile), StorageProfile storageProfile = default(StorageProfile), GuestAgentProfile guestAgentProfile = default(GuestAgentProfile), string moRefId = default(string), string inventoryItemId = default(string), string moName = default(string), string folderPath = default(string), string instanceUuid = default(string), string smbiosUuid = default(string), string firmwareType = default(string), string powerState = default(string), string customResourceName = default(string), string uuid = default(string), IList<ResourceStatus> statuses = default(IList<ResourceStatus>), string provisioningState = default(string), string vmId = default(string), ExtendedLocation extendedLocation = default(ExtendedLocation), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), string name = default(string), string id = default(string), string type = default(string), string kind = default(string), Identity identity = default(Identity))
        {
            ResourcePoolId = resourcePoolId;
            TemplateId = templateId;
            VCenterId = vCenterId;
            PlacementProfile = placementProfile;
            OsProfile = osProfile;
            HardwareProfile = hardwareProfile;
            NetworkProfile = networkProfile;
            StorageProfile = storageProfile;
            GuestAgentProfile = guestAgentProfile;
            MoRefId = moRefId;
            InventoryItemId = inventoryItemId;
            MoName = moName;
            FolderPath = folderPath;
            InstanceUuid = instanceUuid;
            SmbiosUuid = smbiosUuid;
            FirmwareType = firmwareType;
            PowerState = powerState;
            CustomResourceName = customResourceName;
            Uuid = uuid;
            Statuses = statuses;
            ProvisioningState = provisioningState;
            VmId = vmId;
            Location = location;
            ExtendedLocation = extendedLocation;
            SystemData = systemData;
            Tags = tags;
            Name = name;
            Id = id;
            Type = type;
            Kind = kind;
            Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this
        /// virtual machine will
        /// deploy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourcePoolId")]
        public string ResourcePoolId { get; set; }

        /// <summary>
        /// Gets or sets the ARM Id of the template resource to deploy the
        /// virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "properties.templateId")]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this
        /// resource pool resides.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vCenterId")]
        public string VCenterId { get; set; }

        /// <summary>
        /// Gets or sets placement properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.placementProfile")]
        public PlacementProfile PlacementProfile { get; set; }

        /// <summary>
        /// Gets or sets OS properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.osProfile")]
        public OsProfile OsProfile { get; set; }

        /// <summary>
        /// Gets or sets hardware properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hardwareProfile")]
        public HardwareProfile HardwareProfile { get; set; }

        /// <summary>
        /// Gets or sets network properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkProfile")]
        public NetworkProfile NetworkProfile { get; set; }

        /// <summary>
        /// Gets or sets storage properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageProfile")]
        public StorageProfile StorageProfile { get; set; }

        /// <summary>
        /// Gets or sets guest agent status properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.guestAgentProfile")]
        public GuestAgentProfile GuestAgentProfile { get; set; }

        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for
        /// the virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "properties.moRefId")]
        public string MoRefId { get; set; }

        /// <summary>
        /// Gets or sets the inventory Item ID for the virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "properties.inventoryItemId")]
        public string InventoryItemId { get; set; }

        /// <summary>
        /// Gets or sets the vCenter Managed Object name for the virtual
        /// machine.
        /// </summary>
        [JsonProperty(PropertyName = "properties.moName")]
        public string MoName { get; private set; }

        /// <summary>
        /// Gets or sets the folder path of the vm.
        /// </summary>
        [JsonProperty(PropertyName = "properties.folderPath")]
        public string FolderPath { get; private set; }

        /// <summary>
        /// Gets or sets the instance uuid of the vm.
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceUuid")]
        public string InstanceUuid { get; private set; }

        /// <summary>
        /// Gets or sets the SMBIOS UUID of the vm.
        /// </summary>
        [JsonProperty(PropertyName = "properties.smbiosUuid")]
        public string SmbiosUuid { get; set; }

        /// <summary>
        /// Gets or sets firmware type. Possible values include: 'bios', 'efi'
        /// </summary>
        [JsonProperty(PropertyName = "properties.firmwareType")]
        public string FirmwareType { get; set; }

        /// <summary>
        /// Gets the power state of the virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "properties.powerState")]
        public string PowerState { get; private set; }

        /// <summary>
        /// Gets the name of the corresponding resource in Kubernetes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customResourceName")]
        public string CustomResourceName { get; private set; }

        /// <summary>
        /// Gets or sets a unique identifier for this resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.uuid")]
        public string Uuid { get; private set; }

        /// <summary>
        /// Gets the resource status information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.statuses")]
        public IList<ResourceStatus> Statuses { get; private set; }

        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets a unique identifier for the vm resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmId")]
        public string VmId { get; private set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        [JsonProperty(PropertyName = "extendedLocation")]
        public ExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// Gets or sets the system data.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Gets or sets the Resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets the type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets metadata used by portal/tooling/etc to render
        /// different UX experiences for resources of the same type; e.g.
        /// ApiApps are a kind of Microsoft.Web/sites type.  If supported, the
        /// resource provider must validate and persist this value.
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets the identity of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public Identity Identity { get; set; }

    }
}
