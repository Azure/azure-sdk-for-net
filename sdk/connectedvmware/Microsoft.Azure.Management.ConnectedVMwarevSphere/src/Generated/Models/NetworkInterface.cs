// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ConnectedVMwarevSphere.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Network Interface model
    /// </summary>
    public partial class NetworkInterface
    {
        /// <summary>
        /// Initializes a new instance of the NetworkInterface class.
        /// </summary>
        public NetworkInterface()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkInterface class.
        /// </summary>
        /// <param name="name">Gets or sets the name of the network
        /// interface.</param>
        /// <param name="label">Gets or sets the label of the virtual network
        /// in vCenter that the nic is connected to.</param>
        /// <param name="ipAddresses">Gets or sets the nic ip
        /// addresses.</param>
        /// <param name="macAddress">Gets or sets the NIC MAC address.</param>
        /// <param name="networkId">Gets or sets the ARM Id of the network
        /// resource to connect the virtual machine.</param>
        /// <param name="nicType">NIC type. Possible values include: 'vmxnet3',
        /// 'vmxnet2', 'vmxnet', 'e1000', 'e1000e', 'pcnet32'</param>
        /// <param name="powerOnBoot">Gets or sets the power on boot. Possible
        /// values include: 'enabled', 'disabled'</param>
        /// <param name="networkMoRefId">Gets or sets the vCenter MoRef
        /// (Managed Object Reference) ID of the virtual network
        /// that the nic is connected to.</param>
        /// <param name="networkMoName">Gets or sets the name of the virtual
        /// network in vCenter that the nic is connected to.</param>
        /// <param name="deviceKey">Gets or sets the device key value.</param>
        /// <param name="ipSettings">Gets or sets the ipsettings.</param>
        public NetworkInterface(string name = default(string), string label = default(string), IList<string> ipAddresses = default(IList<string>), string macAddress = default(string), string networkId = default(string), string nicType = default(string), string powerOnBoot = default(string), string networkMoRefId = default(string), string networkMoName = default(string), int? deviceKey = default(int?), NicIPSettings ipSettings = default(NicIPSettings))
        {
            Name = name;
            Label = label;
            IpAddresses = ipAddresses;
            MacAddress = macAddress;
            NetworkId = networkId;
            NicType = nicType;
            PowerOnBoot = powerOnBoot;
            NetworkMoRefId = networkMoRefId;
            NetworkMoName = networkMoName;
            DeviceKey = deviceKey;
            IpSettings = ipSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the network interface.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the label of the virtual network in vCenter that the
        /// nic is connected to.
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; private set; }

        /// <summary>
        /// Gets or sets the nic ip addresses.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddresses")]
        public IList<string> IpAddresses { get; private set; }

        /// <summary>
        /// Gets or sets the NIC MAC address.
        /// </summary>
        [JsonProperty(PropertyName = "macAddress")]
        public string MacAddress { get; private set; }

        /// <summary>
        /// Gets or sets the ARM Id of the network resource to connect the
        /// virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "networkId")]
        public string NetworkId { get; set; }

        /// <summary>
        /// Gets or sets NIC type. Possible values include: 'vmxnet3',
        /// 'vmxnet2', 'vmxnet', 'e1000', 'e1000e', 'pcnet32'
        /// </summary>
        [JsonProperty(PropertyName = "nicType")]
        public string NicType { get; set; }

        /// <summary>
        /// Gets or sets the power on boot. Possible values include: 'enabled',
        /// 'disabled'
        /// </summary>
        [JsonProperty(PropertyName = "powerOnBoot")]
        public string PowerOnBoot { get; set; }

        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID of the
        /// virtual network
        /// that the nic is connected to.
        /// </summary>
        [JsonProperty(PropertyName = "networkMoRefId")]
        public string NetworkMoRefId { get; private set; }

        /// <summary>
        /// Gets or sets the name of the virtual network in vCenter that the
        /// nic is connected to.
        /// </summary>
        [JsonProperty(PropertyName = "networkMoName")]
        public string NetworkMoName { get; private set; }

        /// <summary>
        /// Gets or sets the device key value.
        /// </summary>
        [JsonProperty(PropertyName = "deviceKey")]
        public int? DeviceKey { get; set; }

        /// <summary>
        /// Gets or sets the ipsettings.
        /// </summary>
        [JsonProperty(PropertyName = "ipSettings")]
        public NicIPSettings IpSettings { get; set; }

    }
}
