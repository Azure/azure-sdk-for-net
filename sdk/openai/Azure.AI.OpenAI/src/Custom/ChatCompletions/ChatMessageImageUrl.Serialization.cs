// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.OpenAI;

[CodeGenSuppress("global::System.ClientModel.Primitives.IJsonModel<Azure.AI.OpenAI.ChatMessageImageUrl>.Write", typeof(Utf8JsonWriter), typeof(ModelReaderWriterOptions))]
[CodeGenSuppress("DeserializeChatMessageImageUrl", typeof(JsonElement), typeof(ModelReaderWriterOptions))]
public partial class ChatMessageImageUrl : IUtf8JsonSerializable, IJsonModel<ChatMessageImageUrl>
{
    void IJsonModel<ChatMessageImageUrl>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
        var format = options.Format == "W" ? ((IPersistableModel<ChatMessageImageUrl>)this).GetFormatFromOptions(options) : options.Format;
        if (format != "J")
        {
            throw new FormatException($"The model {nameof(ChatMessageImageUrl)} does not support writing '{format}' format.");
        }

        writer.WriteStartObject();
        writer.WritePropertyName("url"u8);
        if (!string.IsNullOrWhiteSpace(DataUri))
        {
            writer.WriteStringValue(DataUri);
        }
        else
        {
            writer.WriteStringValue(Url.AbsoluteUri);
        }
        if (Optional.IsDefined(Detail))
        {
            writer.WritePropertyName("detail"u8);
            writer.WriteStringValue(Detail.Value.ToString());
        }
        if (options.Format != "W" && _serializedAdditionalRawData != null)
        {
            foreach (var item in _serializedAdditionalRawData)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
        }
        writer.WriteEndObject();
    }

    internal static ChatMessageImageUrl DeserializeChatMessageImageUrl(JsonElement element, ModelReaderWriterOptions options = null)
    {
        options ??= new ModelReaderWriterOptions("W");

        if (element.ValueKind == JsonValueKind.Null)
        {
            return null;
        }
        Uri url = default;
        string dataUri = null;
        ChatMessageImageDetailLevel? detail = default;
        IDictionary<string, BinaryData> serializedAdditionalRawData = default;
        Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
        foreach (var property in element.EnumerateObject())
        {
            if (property.NameEquals("url"u8))
            {
                string value = property.Value.GetString();
                try
                {
                    url = new Uri(value);
                }
                catch(System.UriFormatException exception) when (exception.Message is "Invalid URI: The Uri string is too long.")
                {
                    dataUri = value;
                }
                continue;
            }
            if (property.NameEquals("detail"u8))
            {
                if (property.Value.ValueKind == JsonValueKind.Null)
                {
                    continue;
                }
                detail = new ChatMessageImageDetailLevel(property.Value.GetString());
                continue;
            }
            if (options.Format != "W")
            {
                rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
        }
        serializedAdditionalRawData = rawDataDictionary;
        return string.IsNullOrWhiteSpace(dataUri)
            ? new ChatMessageImageUrl(url, detail, serializedAdditionalRawData)
            : new ChatMessageImageUrl(dataUri, detail, serializedAdditionalRawData);
    }
}
