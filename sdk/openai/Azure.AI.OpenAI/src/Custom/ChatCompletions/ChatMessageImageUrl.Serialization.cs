// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.OpenAI;

[CodeGenSuppress("DeserializeChatMessageImageUrl", typeof(JsonElement), typeof(ModelReaderWriterOptions))]
[CodeGenSerialization(nameof(Url), SerializationValueHook = nameof(SerializeUrl))]
public partial class ChatMessageImageUrl
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void SerializeUrl(Utf8JsonWriter writer)
    {
        if (!string.IsNullOrWhiteSpace(DataUri))
        {
            writer.WriteStringValue(DataUri);
        }
        else
        {
            writer.WriteStringValue(Url.AbsoluteUri);
        }
    }

    internal static ChatMessageImageUrl DeserializeChatMessageImageUrl(JsonElement element, ModelReaderWriterOptions options = null)
    {
        options ??= new ModelReaderWriterOptions("W");

        if (element.ValueKind == JsonValueKind.Null)
        {
            return null;
        }
        Uri url = default;
        string dataUri = null;
        ChatMessageImageDetailLevel? detail = default;
        IDictionary<string, BinaryData> serializedAdditionalRawData = default;
        Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
        foreach (var property in element.EnumerateObject())
        {
            if (property.NameEquals("url"u8))
            {
                string value = property.Value.GetString();
                try
                {
                    url = new Uri(value);
                }
                catch(System.UriFormatException exception) when (exception.Message is "Invalid URI: The Uri string is too long.")
                {
                    dataUri = value;
                }
                continue;
            }
            if (property.NameEquals("detail"u8))
            {
                if (property.Value.ValueKind == JsonValueKind.Null)
                {
                    continue;
                }
                detail = new ChatMessageImageDetailLevel(property.Value.GetString());
                continue;
            }
            if (options.Format != "W")
            {
                rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
        }
        serializedAdditionalRawData = rawDataDictionary;
        return string.IsNullOrWhiteSpace(dataUri)
            ? new ChatMessageImageUrl(url, detail, serializedAdditionalRawData)
            : new ChatMessageImageUrl(dataUri, detail, serializedAdditionalRawData);
    }
}
