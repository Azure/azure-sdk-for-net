// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.OpenAI;

// CUSTOM CODE NOTE:
//   Depending on the model being used, "Content" may either be a plain string or an array of content items.
//   This is internally represented as BinaryData, but automatically storing and reserializing the permutations
//   of data is exceptionally non-trivial. Instead, we hide the "Content" property entirely and replace
//   its serialization with direct emission of the appropriate underlying data type.

[CodeGenSuppress("ChatRequestUserMessage", typeof(BinaryData))]

public partial class ChatRequestUserMessage : ChatRequestMessage
{
    private string _stringContent = null;
    private IEnumerable<ChatMessageContentItem> _listContent = null;

    /// <summary>
    /// Creates a new instance of ChatRequestUserMessage using plain text content.
    /// </summary>
    /// <param name="content"> The plain text content associated with the message. </param>
    /// <exception cref="ArgumentException">
    /// <paramref name="content"/> is null or empty.
    /// </exception>
    public ChatRequestUserMessage(string content)
        : this(ChatRole.User, content: null, name: null)
    {
        Argument.AssertNotNullOrEmpty(content, nameof(content));
        _stringContent = content;
    }

    /// <summary>
    /// Creates a new instance of ChatRequestUserMessage using a collection of structured content.
    /// </summary>
    /// <param name="content"> The collection of structured content associated with the message. </param>
    /// <exception cref="ArgumentException">
    /// <paramref name="content"/> is null or empty.
    /// </exception>
    public ChatRequestUserMessage(IEnumerable<ChatMessageContentItem> content)
        : this(ChatRole.User, content: null, name: null)
    {
        Argument.AssertNotNullOrEmpty(content, nameof(content));
        _listContent = content;
    }

    /// <summary>
    /// Creates a new instance of ChatRequestUserMessage using a collection of structured content.
    /// </summary>
    /// <param name="content"> The collection of structured content associated with the message. </param>
    /// <exception cref="ArgumentException">
    /// <paramref name="content"/> is null or empty.
    /// </exception>
    public ChatRequestUserMessage(params ChatMessageContentItem[] content)
        : this(ChatRole.User, content: null, name: null)
    {
        Argument.AssertNotNullOrEmpty(content, nameof(content));
        _listContent = content;
    }

    [CodeGenMemberSerializationHooks(SerializationValueHook = nameof(SerializeContent))]
    internal BinaryData Content { get; }

    internal void SerializeContent(Utf8JsonWriter writer)
    {
        if (!string.IsNullOrEmpty(_stringContent))
        {
            writer.WriteStringValue(_stringContent);
        }
        else
        {
            writer.WriteStartArray();
            foreach (ChatMessageContentItem item in _listContent)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
        }
    }
}
