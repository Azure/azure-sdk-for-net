// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.OpenAI
{
    /// <summary>
    ///     An individual image result, represented as a URL at which the image may be retrieved.
    /// </summary>
    public partial class ImageLocation // : ImageResponseItem
    {
        // CUSTOM CODE NOTE: we augment the ImageLocation model with a reference to the client's pipeline to facilitate
        //                   the GetStreamAsync() member function helper.
        internal HttpPipeline ClientPipeline { get; set; }

        /// <summary>
        ///     Gets a stream that encapsulates the image data located at this <see cref="ImageLocation"/>'s
        ///     <see cref="Url"/>. Uses the <see cref="HttpPipeline"/> from the originating client and inherits any
        ///     custom pipeline policy that was applied.
        /// </summary>
        /// <param name="cancellationToken">
        ///     A cancellation token that may be used to abort the streaming data retrieval.
        /// </param>
        /// <returns> A stream pointing to the image data at <see cref="Url"/>. </returns>
        public async Task<Stream> GetStreamAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage message = ClientPipeline.CreateMessage();
            message.BufferResponse = false;

            var requestUri = new RequestUriBuilder();
            requestUri.Reset(Url);

            message.Request.Method = RequestMethod.Get;
            message.Request.Uri = requestUri;
            message.SetProperty(SkippableBearerTokenAuthenticationPolicy.SkipPropertyKey, true);

            Response response = await ClientPipeline.ProcessMessageAsync(
                message,
                requestContext: null,
                cancellationToken)
                .ConfigureAwait(false);

            return response.ContentStream;
        }

        /// <summary>
        ///     Gets a stream that encapsulates the image data located at this <see cref="ImageLocation"/>'s
        ///     <see cref="Url"/>. Uses the <see cref="HttpPipeline"/> from the originating client and inherits any
        ///     custom pipeline policy that was applied.
        /// </summary>
        /// <param name="cancellationToken">
        ///     A cancellation token that may be used to abort the streaming data retrieval.
        /// </param>
        /// <returns> A stream pointing to the image data at <see cref="Url"/>. </returns>
        public Stream GetStream(CancellationToken cancellationToken = default)
        {
            HttpMessage message = ClientPipeline.CreateMessage();
            message.BufferResponse = false;

            var requestUri = new RequestUriBuilder();
            requestUri.Reset(Url);

            message.Request.Method = RequestMethod.Get;
            message.Request.Uri = requestUri;
            message.SetProperty(SkippableBearerTokenAuthenticationPolicy.SkipPropertyKey, true);

            RequestContext context = OpenAIClient.FromCancellationToken(cancellationToken);
            Response response = ClientPipeline.ProcessMessage(message, context, cancellationToken);

            return response.ContentStream;
        }
    }
}
