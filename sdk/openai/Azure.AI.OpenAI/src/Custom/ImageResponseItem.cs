// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.IO;
using System.Threading;
using System.Threading.Tasks;

// CUSTOM CODE NOTE: This union type of 'ImageLocation | ImagePayload' is not currently emitted. It's define here in
//                   custom code pending generation adjustments.

namespace Azure.AI.OpenAI
{
    /// <summary>
    ///     A representation of a requested image item that may use one of multiple underlying response formats.
    /// </summary>
    /// <remarks>
    ///     Underlying response formats are encapsulated by derived classes such as <see cref="ImageLocation"/> and
    ///     <see cref="ImagePayload"/>. Binary data may be generically retrieved the convenience methods on this
    ///     abstract class, but response-format-specific data should be accessed via cast to the appropriate
    ///     derived type.
    /// </remarks>
    public abstract partial class ImageResponseItem
    {
        /// <summary>
        ///     Gets a stream that encapsulates the image data represented by this <see cref="ImageResponseItem"/>.
        /// </summary>
        /// <param name="cancellationToken">
        ///     A token that may be used to cancel any asynchronous portion of this streaming operation.
        /// </param>
        /// <returns>
        ///     A stream that encapsulates this item's image data.
        /// </returns>
        public abstract Task<Stream> GetStreamAsync(CancellationToken cancellationToken = default);

        /// <summary>
        ///     Gets a stream that encapsulates the image data represented by this <see cref="ImageResponseItem"/>.
        /// </summary>
        /// <param name="cancellationToken">
        ///     A token that may be used to cancel any asynchronous portion of this streaming operation.
        /// </param>
        /// <returns>
        ///     A stream that encapsulates this item's image data.
        /// </returns>
        public abstract Stream GetStream(CancellationToken cancellationToken = default);
    }
}
