// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using System;
using System.ComponentModel;

#nullable disable

namespace Azure.AI.OpenAI
{
    /// <summary>
    /// A description of the intended purpose of a message within a chat completions interaction.
    /// </summary>
    public readonly struct ChatRole : IEquatable<ChatRole>
    {
        /// <summary>
        /// The role that instructs or sets the behavior of the assistant.
        /// </summary>
        public static readonly ChatRole System = new ChatRole("system");
        /// <summary>
        /// The role that provides responses to system-instructed, user-prompted input.
        /// </summary>
        public static readonly ChatRole Assistant = new ChatRole("assistant");
        /// <summary>
        /// The role that provides input for chat completions.
        /// </summary>
        public static readonly ChatRole User = new ChatRole("user");

        /// <summary>
        /// Gets the label associated with this ChatRole.
        /// </summary>
        /// <remarks>
        /// The label is what will be serialized into the "role" message field of the OpenAI Chat Message format.
        /// </remarks>
        public string Label { get; }

        /// <summary>
        /// Creates a new ChatRole instance with the provided label.
        /// </summary>
        /// <remarks>
        /// When possible, use the system-defined ChatRole instances such as ChatRole.System and ChatRole.User. Custom
        /// ChatRole instances are only needed if 
        /// </remarks>
        /// <param name="label"></param>
        public ChatRole(string label)
        {
            Argument.AssertNotNull(label, nameof(label));
            Label = label;
        }

        /// <summary>
        /// Converts a label into a new instance of <see cref="ChatRole"/>.
        /// </summary>
        /// <param name="label"> the label to use in the new <see cref="ChatRole"/> instance. </param>
        public static implicit operator ChatRole(string label) => new ChatRole(label);

        /// <summary>
        /// Returns a value indicating whether two ChatRole instances are equivalent, as determined by a
        /// case-insensitive comparison of their labels.
        /// </summary>
        /// <param name="left"> the first ChatRole instance to compare </param>
        /// <param name="right"> the second ChatRole instance to compare </param>
        /// <returns> true if left and right are both null or have equivalent labels; false otherwise </returns>
        public static bool operator ==(ChatRole left, ChatRole right)
        {
            if (Object.ReferenceEquals(left, null) != Object.ReferenceEquals(right, null))
            {
                return false;
            }
            else if (Object.ReferenceEquals(left, null))
            {
                return true;
            }
            else
            {
                return left.Equals(right);
            }
        }

        /// <summary>
        /// Returns a value indicating whether two ChatRole instances are not equivalent, as determined by a
        /// case-insensitive comparison of their labels.
        /// </summary>
        /// <param name="left"> the first ChatRole instance to compare </param>
        /// <param name="right"> the second ChatRole instance to compare </param>
        /// <returns> false if left and right are both null or have equivalent labels; true otherwise </returns>
        public static bool operator !=(ChatRole left, ChatRole right)
            => !(left == right);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj)
            => obj is ChatRole otherRole && this == otherRole;

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode()
            => Label.GetHashCode();

        /// <inheritdoc/>
        public bool Equals(ChatRole other)
            => !Object.ReferenceEquals(other, null)
                && string.Equals(Label, other.Label, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        public override string ToString() => Label;
    }
}
