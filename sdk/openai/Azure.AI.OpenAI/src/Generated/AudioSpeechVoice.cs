// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> Represents a voice for speech synthesis. </summary>
    public readonly partial struct AudioSpeechVoice : IEquatable<AudioSpeechVoice>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AudioSpeechVoice"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AudioSpeechVoice(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AlloyValue = "alloy";
        private const string EchoValue = "echo";
        private const string FableValue = "fable";
        private const string OnyxValue = "onyx";
        private const string NovaValue = "nova";
        private const string ShimmerValue = "shimmer";

        /// <summary> The Alloy voice. </summary>
        public static AudioSpeechVoice Alloy { get; } = new AudioSpeechVoice(AlloyValue);
        /// <summary> The Echo voice. </summary>
        public static AudioSpeechVoice Echo { get; } = new AudioSpeechVoice(EchoValue);
        /// <summary> The Fable voice. </summary>
        public static AudioSpeechVoice Fable { get; } = new AudioSpeechVoice(FableValue);
        /// <summary> The Onyx voice. </summary>
        public static AudioSpeechVoice Onyx { get; } = new AudioSpeechVoice(OnyxValue);
        /// <summary> The Nova voice. </summary>
        public static AudioSpeechVoice Nova { get; } = new AudioSpeechVoice(NovaValue);
        /// <summary> The Shimmer voice. </summary>
        public static AudioSpeechVoice Shimmer { get; } = new AudioSpeechVoice(ShimmerValue);
        /// <summary> Determines if two <see cref="AudioSpeechVoice"/> values are the same. </summary>
        public static bool operator ==(AudioSpeechVoice left, AudioSpeechVoice right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AudioSpeechVoice"/> values are not the same. </summary>
        public static bool operator !=(AudioSpeechVoice left, AudioSpeechVoice right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AudioSpeechVoice"/>. </summary>
        public static implicit operator AudioSpeechVoice(string value) => new AudioSpeechVoice(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AudioSpeechVoice other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AudioSpeechVoice other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
