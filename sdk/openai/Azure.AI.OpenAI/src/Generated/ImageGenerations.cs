// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.OpenAI
{
    /// <summary> The result of the operation if the operation succeeded. </summary>
    public partial class ImageGenerations
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ImageGenerations"/>. </summary>
        /// <param name="created"> A timestamp when this job or item was created (in unix epochs). </param>
        /// <param name="data"> The images generated by the operator. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        internal ImageGenerations(DateTimeOffset created, IEnumerable<ImageLocation> data)
        {
            Argument.AssertNotNull(data, nameof(data));

            Created = created;
            Data = data.ToList();
            _serializedAdditionalRawData = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="ImageGenerations"/>. </summary>
        /// <param name="created"> A timestamp when this job or item was created (in unix epochs). </param>
        /// <param name="data"> The images generated by the operator. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ImageGenerations(DateTimeOffset created, IReadOnlyList<ImageLocation> data, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Created = created;
            Data = data;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ImageGenerations"/> for deserialization. </summary>
        internal ImageGenerations()
        {
        }

        /// <summary> A timestamp when this job or item was created (in unix epochs). </summary>
        public DateTimeOffset Created { get; }
    }
}
