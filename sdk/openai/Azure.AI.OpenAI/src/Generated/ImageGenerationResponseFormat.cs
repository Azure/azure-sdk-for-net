// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> The format in which the generated images are returned. </summary>
    internal readonly partial struct ImageGenerationResponseFormat : IEquatable<ImageGenerationResponseFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImageGenerationResponseFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImageGenerationResponseFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UrlValue = "url";
        private const string Base64Value = "b64_json";

        /// <summary> Image generation response items should provide a URL from which the image may be retrieved. </summary>
        public static ImageGenerationResponseFormat Url { get; } = new ImageGenerationResponseFormat(UrlValue);
        /// <summary> Image generation response items should provide image data as a base64-encoded string. </summary>
        public static ImageGenerationResponseFormat Base64 { get; } = new ImageGenerationResponseFormat(Base64Value);
        /// <summary> Determines if two <see cref="ImageGenerationResponseFormat"/> values are the same. </summary>
        public static bool operator ==(ImageGenerationResponseFormat left, ImageGenerationResponseFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImageGenerationResponseFormat"/> values are not the same. </summary>
        public static bool operator !=(ImageGenerationResponseFormat left, ImageGenerationResponseFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ImageGenerationResponseFormat"/>. </summary>
        public static implicit operator ImageGenerationResponseFormat(string value) => new ImageGenerationResponseFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageGenerationResponseFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImageGenerationResponseFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
