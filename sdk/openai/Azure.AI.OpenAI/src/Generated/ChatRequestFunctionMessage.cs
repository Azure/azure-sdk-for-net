// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.AI.OpenAI
{
    /// <summary> A request chat message representing requested output from a configured function. </summary>
    public partial class ChatRequestFunctionMessage : ChatRequestMessage
    {
        /// <summary> Initializes a new instance of ChatRequestFunctionMessage. </summary>
        /// <param name="name"> The name of the function to call. </param>
        /// <param name="arguments">
        /// The arguments to call the function with, as generated by the model in JSON format.
        /// Note that the model does not always generate valid JSON, and may hallucinate parameters
        /// not defined by your function schema. Validate the arguments in your code before calling
        /// your function.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="arguments"/> is null. </exception>
        public ChatRequestFunctionMessage(string name, string arguments)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(arguments, nameof(arguments));

            Role = ChatRole.Function;
            Name = name;
            Arguments = arguments;
        }

        /// <summary> Initializes a new instance of ChatRequestFunctionMessage. </summary>
        /// <param name="role"> The chat role associated with this message. </param>
        /// <param name="name"> The name of the function to call. </param>
        /// <param name="arguments">
        /// The arguments to call the function with, as generated by the model in JSON format.
        /// Note that the model does not always generate valid JSON, and may hallucinate parameters
        /// not defined by your function schema. Validate the arguments in your code before calling
        /// your function.
        /// </param>
        internal ChatRequestFunctionMessage(ChatRole role, string name, string arguments) : base(role)
        {
            Name = name;
            Arguments = arguments;
        }

        /// <summary> The name of the function to call. </summary>
        public string Name { get; }
        /// <summary>
        /// The arguments to call the function with, as generated by the model in JSON format.
        /// Note that the model does not always generate valid JSON, and may hallucinate parameters
        /// not defined by your function schema. Validate the arguments in your code before calling
        /// your function.
        /// </summary>
        public string Arguments { get; }
    }
}
