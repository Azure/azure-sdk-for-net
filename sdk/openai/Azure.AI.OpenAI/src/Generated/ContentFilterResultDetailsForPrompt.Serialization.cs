// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.OpenAI
{
    public partial class ContentFilterResultDetailsForPrompt
    {
        internal static ContentFilterResultDetailsForPrompt DeserializeContentFilterResultDetailsForPrompt(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ContentFilterResult> sexual = default;
            Optional<ContentFilterResult> violence = default;
            Optional<ContentFilterResult> hate = default;
            Optional<ContentFilterResult> selfHarm = default;
            Optional<ContentFilterDetectionResult> profanity = default;
            Optional<IReadOnlyList<ContentFilterBlocklistIdResult>> customBlocklists = default;
            Optional<ResponseError> error = default;
            Optional<ContentFilterDetectionResult> jailbreak = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sexual"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sexual = ContentFilterResult.DeserializeContentFilterResult(property.Value);
                    continue;
                }
                if (property.NameEquals("violence"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    violence = ContentFilterResult.DeserializeContentFilterResult(property.Value);
                    continue;
                }
                if (property.NameEquals("hate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hate = ContentFilterResult.DeserializeContentFilterResult(property.Value);
                    continue;
                }
                if (property.NameEquals("self_harm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selfHarm = ContentFilterResult.DeserializeContentFilterResult(property.Value);
                    continue;
                }
                if (property.NameEquals("profanity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    profanity = ContentFilterDetectionResult.DeserializeContentFilterDetectionResult(property.Value);
                    continue;
                }
                if (property.NameEquals("custom_blocklists"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ContentFilterBlocklistIdResult> array = new List<ContentFilterBlocklistIdResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContentFilterBlocklistIdResult.DeserializeContentFilterBlocklistIdResult(item));
                    }
                    customBlocklists = array;
                    continue;
                }
                if (property.NameEquals("error"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = JsonSerializer.Deserialize<ResponseError>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("jailbreak"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jailbreak = ContentFilterDetectionResult.DeserializeContentFilterDetectionResult(property.Value);
                    continue;
                }
            }
            return new ContentFilterResultDetailsForPrompt(sexual.Value, violence.Value, hate.Value, selfHarm.Value, profanity.Value, Optional.ToList(customBlocklists), error.Value, jailbreak.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ContentFilterResultDetailsForPrompt FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeContentFilterResultDetailsForPrompt(document.RootElement);
        }
    }
}
