// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.AI.OpenAI
{
    /// <summary>
    /// A specific representation of configurable options for Azure Cognitive Search when using it as an Azure OpenAI chat
    /// extension.
    /// </summary>
    public partial class AzureCognitiveSearchChatExtensionConfiguration : AzureChatExtensionConfiguration
    {
        /// <summary> Initializes a new instance of AzureCognitiveSearchChatExtensionConfiguration. </summary>
        /// <param name="type">
        ///   The label for the type of an Azure chat extension. This typically corresponds to a matching Azure resource.
        ///   Azure chat extensions are only compatible with Azure OpenAI.
        /// </param>
        /// <param name="parameters">
        ///   The configuration payload used for the Azure chat extension. The structure payload details are specific to the
        ///   extension being configured.
        ///   Azure chat extensions are only compatible with Azure OpenAI.
        /// </param>
        /// <param name="searchEndpoint"> The absolute endpoint path for the Azure Cognitive Search resource to use. </param>
        /// <param name="searchKey"> The API admin key to use with the specified Azure Cognitive Search endpoint. </param>
        /// <param name="indexName"> The name of the index to use as available in the referenced Azure Cognitive Search resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/>, <paramref name="searchEndpoint"/>, <paramref name="searchKey"/> or <paramref name="indexName"/> is null. </exception>
        internal AzureCognitiveSearchChatExtensionConfiguration(AzureChatExtensionType type, BinaryData parameters, Uri searchEndpoint, string searchKey, string indexName) : base(type, parameters)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));
            Argument.AssertNotNull(searchEndpoint, nameof(searchEndpoint));
            Argument.AssertNotNull(searchKey, nameof(searchKey));
            Argument.AssertNotNull(indexName, nameof(indexName));

            SearchEndpoint = searchEndpoint;
            SearchKey = searchKey;
            IndexName = indexName;
        }

        /// <summary> Initializes a new instance of AzureCognitiveSearchChatExtensionConfiguration. </summary>
        /// <param name="type">
        ///   The label for the type of an Azure chat extension. This typically corresponds to a matching Azure resource.
        ///   Azure chat extensions are only compatible with Azure OpenAI.
        /// </param>
        /// <param name="parameters">
        ///   The configuration payload used for the Azure chat extension. The structure payload details are specific to the
        ///   extension being configured.
        ///   Azure chat extensions are only compatible with Azure OpenAI.
        /// </param>
        /// <param name="searchEndpoint"> The absolute endpoint path for the Azure Cognitive Search resource to use. </param>
        /// <param name="searchKey"> The API admin key to use with the specified Azure Cognitive Search endpoint. </param>
        /// <param name="indexName"> The name of the index to use as available in the referenced Azure Cognitive Search resource. </param>
        /// <param name="fieldMappingOptions"> Customized field mapping behavior to use when interacting with the search index. </param>
        /// <param name="documentCount"> The configured top number of documents to feature for the configured query. </param>
        /// <param name="queryType"> The query type to use with Azure Cognitive Search. </param>
        /// <param name="shouldRestrictResultScope"> Whether queries should be restricted to use of indexed data. </param>
        /// <param name="semanticConfiguration"> The additional semantic configuration for the query. </param>
        /// <param name="embeddingEndpoint"> When using embeddings for search, specifies the resource URL from which embeddings should be retrieved. </param>
        /// <param name="embeddingKey"> When using embeddings, specifies the API key to use with the provided embeddings endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        internal AzureCognitiveSearchChatExtensionConfiguration(AzureChatExtensionType type, BinaryData parameters, Uri searchEndpoint, string searchKey, string indexName, AzureCognitiveSearchIndexFieldMappingOptions fieldMappingOptions, int? documentCount, AzureCognitiveSearchQueryType? queryType, bool? shouldRestrictResultScope, string semanticConfiguration, Uri embeddingEndpoint, string embeddingKey) : base(type, parameters)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            SearchEndpoint = searchEndpoint;
            SearchKey = searchKey;
            IndexName = indexName;
            FieldMappingOptions = fieldMappingOptions;
            DocumentCount = documentCount;
            QueryType = queryType;
            ShouldRestrictResultScope = shouldRestrictResultScope;
            SemanticConfiguration = semanticConfiguration;
            EmbeddingEndpoint = embeddingEndpoint;
            EmbeddingKey = embeddingKey;
        }
    }
}
