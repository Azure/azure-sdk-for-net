// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> Defines the possible descriptors for available audio operation responses. </summary>
    internal readonly partial struct AudioTaskLabel : IEquatable<AudioTaskLabel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AudioTaskLabel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AudioTaskLabel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TranscribeValue = "transcribe";
        private const string TranslateValue = "translate";

        /// <summary> Accompanying response data resulted from an audio transcription task. </summary>
        public static AudioTaskLabel Transcribe { get; } = new AudioTaskLabel(TranscribeValue);
        /// <summary> Accompanying response data resulted from an audio translation task. </summary>
        public static AudioTaskLabel Translate { get; } = new AudioTaskLabel(TranslateValue);
        /// <summary> Determines if two <see cref="AudioTaskLabel"/> values are the same. </summary>
        public static bool operator ==(AudioTaskLabel left, AudioTaskLabel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AudioTaskLabel"/> values are not the same. </summary>
        public static bool operator !=(AudioTaskLabel left, AudioTaskLabel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AudioTaskLabel"/>. </summary>
        public static implicit operator AudioTaskLabel(string value) => new AudioTaskLabel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AudioTaskLabel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AudioTaskLabel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
