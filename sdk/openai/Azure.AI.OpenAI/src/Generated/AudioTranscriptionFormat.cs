// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> Defines available options for the underlying response format of output transcription information. </summary>
    public readonly partial struct AudioTranscriptionFormat : IEquatable<AudioTranscriptionFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AudioTranscriptionFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AudioTranscriptionFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SimpleValue = "json";
        private const string VerboseValue = "verbose_json";
        private const string InternalPlainTextValue = "text";
        private const string SrtValue = "srt";
        private const string VttValue = "vtt";

        /// <summary> Use a response body that is a JSON object containing a single 'text' field for the transcription. </summary>
        public static AudioTranscriptionFormat Simple { get; } = new AudioTranscriptionFormat(SimpleValue);
        /// <summary>
        /// Use a response body that is a JSON object containing transcription text along with timing, segments, and other
        /// metadata.
        /// </summary>
        public static AudioTranscriptionFormat Verbose { get; } = new AudioTranscriptionFormat(VerboseValue);
        /// <summary> Use a response body that is plain text in SubRip (SRT) format that also includes timing information. </summary>
        public static AudioTranscriptionFormat Srt { get; } = new AudioTranscriptionFormat(SrtValue);
        /// <summary> Use a response body that is plain text in Web Video Text Tracks (VTT) format that also includes timing information. </summary>
        public static AudioTranscriptionFormat Vtt { get; } = new AudioTranscriptionFormat(VttValue);
        /// <summary> Determines if two <see cref="AudioTranscriptionFormat"/> values are the same. </summary>
        public static bool operator ==(AudioTranscriptionFormat left, AudioTranscriptionFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AudioTranscriptionFormat"/> values are not the same. </summary>
        public static bool operator !=(AudioTranscriptionFormat left, AudioTranscriptionFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AudioTranscriptionFormat"/>. </summary>
        public static implicit operator AudioTranscriptionFormat(string value) => new AudioTranscriptionFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AudioTranscriptionFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AudioTranscriptionFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
