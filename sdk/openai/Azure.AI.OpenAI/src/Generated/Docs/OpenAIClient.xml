<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetEmbeddingsAsync(string,EmbeddingsOptions,CancellationToken)">
<example>
This sample shows how to call GetEmbeddingsAsync with required parameters.
<code><![CDATA[
var client = new OpenAIClient("<openAIApiKey>");

var embeddingsOptions = new EmbeddingsOptions(new string[] 
{
    "<null>"
})
{
    User = "<User>",
};
var result = await client.GetEmbeddingsAsync("<deploymentId>", embeddingsOptions);
]]></code>
</example>
    </member>
    <member name="GetEmbeddings(string,EmbeddingsOptions,CancellationToken)">
<example>
This sample shows how to call GetEmbeddings with required parameters.
<code><![CDATA[
var client = new OpenAIClient("<openAIApiKey>");

var embeddingsOptions = new EmbeddingsOptions(new string[] 
{
    "<null>"
})
{
    User = "<User>",
};
var result = client.GetEmbeddings("<deploymentId>", embeddingsOptions);
]]></code>
</example>
    </member>
    <member name="GetEmbeddingsAsync(string,RequestContent,RequestContext)">
    </member>
    <member name="GetEmbeddings(string,RequestContent,RequestContext)">
    </member>
    <member name="GetCompletionsAsync(string,CompletionsOptions,CancellationToken)">
<example>
This sample shows how to call GetCompletionsAsync with required parameters.
<code><![CDATA[
var client = new OpenAIClient("<openAIApiKey>");

var completionsOptions = new CompletionsOptions(new string[] 
{
    "<null>"
})
{
    MaxTokens = 1234,
    Temperature = 3.14f,
    NucleusSamplingFactor = 3.14f,
    User = "<User>",
    ChoicesPerPrompt = 1234,
    LogProbabilityCount = 1234,
    Echo = true,
    StopSequences = 
{
        "<null>"
    },
    PresencePenalty = 3.14f,
    FrequencyPenalty = 3.14f,
    GenerationSampleCount = 1234,
};
var result = await client.GetCompletionsAsync("<deploymentId>", completionsOptions);
]]></code>
</example>
    </member>
    <member name="GetCompletions(string,CompletionsOptions,CancellationToken)">
<example>
This sample shows how to call GetCompletions with required parameters.
<code><![CDATA[
var client = new OpenAIClient("<openAIApiKey>");

var completionsOptions = new CompletionsOptions(new string[] 
{
    "<null>"
})
{
    MaxTokens = 1234,
    Temperature = 3.14f,
    NucleusSamplingFactor = 3.14f,
    User = "<User>",
    ChoicesPerPrompt = 1234,
    LogProbabilityCount = 1234,
    Echo = true,
    StopSequences = 
{
        "<null>"
    },
    PresencePenalty = 3.14f,
    FrequencyPenalty = 3.14f,
    GenerationSampleCount = 1234,
};
var result = client.GetCompletions("<deploymentId>", completionsOptions);
]]></code>
</example>
    </member>
    <member name="GetCompletionsAsync(string,RequestContent,RequestContext)">
    </member>
    <member name="GetCompletions(string,RequestContent,RequestContext)">
    </member>
    <member name="GetChatCompletionsAsync(string,ChatCompletionsOptions,CancellationToken)">
    </member>
    <member name="GetChatCompletions(string,ChatCompletionsOptions,CancellationToken)">
    </member>
    <member name="GetChatCompletionsAsync(string,RequestContent,RequestContext)">
    </member>
    <member name="GetChatCompletions(string,RequestContent,RequestContext)">
    </member>
    <member name="GetChatCompletionsWithAzureExtensionsAsync(string,ChatCompletionsOptions,CancellationToken)">
    </member>
    <member name="GetChatCompletionsWithAzureExtensions(string,ChatCompletionsOptions,CancellationToken)">
    </member>
    <member name="GetChatCompletionsWithAzureExtensionsAsync(string,RequestContent,RequestContext)">
    </member>
    <member name="GetChatCompletionsWithAzureExtensions(string,RequestContent,RequestContext)">
    </member>
    <member name="BeginAzureBatchImageGenerationAsync(WaitUntil,ImageGenerationOptions,CancellationToken)">
    </member>
    <member name="BeginAzureBatchImageGeneration(WaitUntil,ImageGenerationOptions,CancellationToken)">
    </member>
    <member name="BeginAzureBatchImageGenerationAsync(WaitUntil,RequestContent,RequestContext)">
    </member>
    <member name="BeginAzureBatchImageGeneration(WaitUntil,RequestContent,RequestContext)">
    </member>
  </members>
</doc>