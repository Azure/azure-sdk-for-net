// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.AI.OpenAI
{
    /// <summary>
    /// Transcription request.
    /// Requesting format 'json' will result on only the 'text' field being set.
    /// For more output data use 'verbose_json.
    /// </summary>
    public partial class AudioTranscriptionOptions
    {
        /// <summary> Initializes a new instance of AudioTranscriptionOptions. </summary>
        /// <param name="file"> The audio file object to transcribe. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="file"/> is null. </exception>
        public AudioTranscriptionOptions(BinaryData file)
        {
            Argument.AssertNotNull(file, nameof(file));

            File = file;
        }

        /// <summary> Initializes a new instance of AudioTranscriptionOptions. </summary>
        /// <param name="file"> The audio file object to transcribe. </param>
        /// <param name="prompt"> An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language. </param>
        /// <param name="responseFormat"> The format of the transcription output, in one of these options: json, text, srt, verbose_json, or vtt. </param>
        /// <param name="temperature">
        /// The sampling temperature, between 0 and 1.
        /// Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.
        /// </param>
        /// <param name="language"> The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency. </param>
        internal AudioTranscriptionOptions(BinaryData file, string prompt, AudioTranscriptionFormat? responseFormat, float? temperature, string language)
        {
            File = file;
            Prompt = prompt;
            ResponseFormat = responseFormat;
            Temperature = temperature;
            Language = language;
        }
        /// <summary> An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language. </summary>
        public string Prompt { get; set; }
        /// <summary> The format of the transcription output, in one of these options: json, text, srt, verbose_json, or vtt. </summary>
        public AudioTranscriptionFormat? ResponseFormat { get; set; }
        /// <summary>
        /// The sampling temperature, between 0 and 1.
        /// Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.
        /// </summary>
        public float? Temperature { get; set; }
        /// <summary> The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency. </summary>
        public string Language { get; set; }
    }
}
