// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.AI.OpenAI;

namespace Azure.AI.OpenAI.Chat
{
    /// <summary></summary>
    public partial class ChatRetrievedDocument : IJsonModel<ChatRetrievedDocument>
    {
        internal ChatRetrievedDocument()
        {
        }

        void IJsonModel<ChatRetrievedDocument>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatRetrievedDocument>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ChatRetrievedDocument)} does not support writing '{format}' format.");
            }
            if (_additionalBinaryDataProperties?.ContainsKey("content") != true)
            {
                writer.WritePropertyName("content"u8);
                writer.WriteStringValue(Content);
            }
            if (Optional.IsDefined(Title) && _additionalBinaryDataProperties?.ContainsKey("title") != true)
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Url) && _additionalBinaryDataProperties?.ContainsKey("url") != true)
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Url);
            }
            if (Optional.IsDefined(ChunkId) && _additionalBinaryDataProperties?.ContainsKey("chunk_id") != true)
            {
                writer.WritePropertyName("chunk_id"u8);
                writer.WriteStringValue(ChunkId);
            }
            if (Optional.IsDefined(RerankScore) && _additionalBinaryDataProperties?.ContainsKey("rerank_score") != true)
            {
                writer.WritePropertyName("rerank_score"u8);
                writer.WriteNumberValue(RerankScore.Value);
            }
            if (_additionalBinaryDataProperties?.ContainsKey("search_queries") != true)
            {
                writer.WritePropertyName("search_queries"u8);
                writer.WriteStartArray();
                foreach (string item in SearchQueries)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (_additionalBinaryDataProperties?.ContainsKey("data_source_index") != true)
            {
                writer.WritePropertyName("data_source_index"u8);
                writer.WriteNumberValue(DataSourceIndex);
            }
            if (Optional.IsDefined(OriginalSearchScore) && _additionalBinaryDataProperties?.ContainsKey("original_search_score") != true)
            {
                writer.WritePropertyName("original_search_score"u8);
                writer.WriteNumberValue(OriginalSearchScore.Value);
            }
            if (Optional.IsDefined(FilterReason) && _additionalBinaryDataProperties?.ContainsKey("filter_reason") != true)
            {
                writer.WritePropertyName("filter_reason"u8);
                writer.WriteStringValue(FilterReason.Value.ToString());
            }
            if (Optional.IsDefined(FilePath) && _additionalBinaryDataProperties?.ContainsKey("filepath") != true)
            {
                writer.WritePropertyName("filepath"u8);
                writer.WriteStringValue(FilePath);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    if (ModelSerializationExtensions.IsSentinelValue(item.Value))
                    {
                        continue;
                    }
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ChatRetrievedDocument IJsonModel<ChatRetrievedDocument>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ChatRetrievedDocument JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatRetrievedDocument>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ChatRetrievedDocument)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeChatRetrievedDocument(document.RootElement, options);
        }

        internal static ChatRetrievedDocument DeserializeChatRetrievedDocument(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string content = default;
            string title = default;
            string url = default;
            string chunkId = default;
            double? rerankScore = default;
            IList<string> searchQueries = default;
            int dataSourceIndex = default;
            double? originalSearchScore = default;
            ChatDocumentFilterReason? filterReason = default;
            string filePath = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("content"u8))
                {
                    content = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("title"u8))
                {
                    title = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("url"u8))
                {
                    url = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("chunk_id"u8))
                {
                    chunkId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("rerank_score"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rerankScore = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("search_queries"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    searchQueries = array;
                    continue;
                }
                if (prop.NameEquals("data_source_index"u8))
                {
                    dataSourceIndex = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("original_search_score"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    originalSearchScore = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("filter_reason"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filterReason = new ChatDocumentFilterReason(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("filepath"u8))
                {
                    filePath = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ChatRetrievedDocument(
                content,
                title,
                url,
                chunkId,
                rerankScore,
                searchQueries,
                dataSourceIndex,
                originalSearchScore,
                filterReason,
                filePath,
                additionalBinaryDataProperties);
        }

        BinaryData IPersistableModel<ChatRetrievedDocument>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatRetrievedDocument>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ChatRetrievedDocument)} does not support writing '{options.Format}' format.");
            }
        }

        ChatRetrievedDocument IPersistableModel<ChatRetrievedDocument>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ChatRetrievedDocument PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatRetrievedDocument>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeChatRetrievedDocument(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ChatRetrievedDocument)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ChatRetrievedDocument>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="chatRetrievedDocument"> The <see cref="ChatRetrievedDocument"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(ChatRetrievedDocument chatRetrievedDocument)
        {
            if (chatRetrievedDocument == null)
            {
                return null;
            }
            return BinaryContent.Create(chatRetrievedDocument, ModelSerializationExtensions.WireOptions);
        }

        /// <param name="result"> The <see cref="ClientResult"/> to deserialize the <see cref="ChatRetrievedDocument"/> from. </param>
        public static explicit operator ChatRetrievedDocument(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeChatRetrievedDocument(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
