// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.AI.OpenAI;

namespace Azure.AI.OpenAI.Chat
{
    internal readonly partial struct InternalAzureChatDataSourceVectorizationSourceType : IEquatable<InternalAzureChatDataSourceVectorizationSourceType>
    {
        private readonly string _value;
        private const string EndpointValue = "endpoint";
        private const string DeploymentNameValue = "deployment_name";
        private const string ModelIdValue = "model_id";
        private const string IntegratedValue = "integrated";

        /// <summary> Initializes a new instance of <see cref="InternalAzureChatDataSourceVectorizationSourceType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InternalAzureChatDataSourceVectorizationSourceType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets or sets the Endpoint. </summary>
        internal static InternalAzureChatDataSourceVectorizationSourceType Endpoint { get; set; } = new InternalAzureChatDataSourceVectorizationSourceType(EndpointValue);

        /// <summary> Gets or sets the DeploymentName. </summary>
        internal static InternalAzureChatDataSourceVectorizationSourceType DeploymentName { get; set; } = new InternalAzureChatDataSourceVectorizationSourceType(DeploymentNameValue);

        /// <summary> Gets or sets the ModelId. </summary>
        internal static InternalAzureChatDataSourceVectorizationSourceType ModelId { get; set; } = new InternalAzureChatDataSourceVectorizationSourceType(ModelIdValue);

        /// <summary> Gets or sets the Integrated. </summary>
        internal static InternalAzureChatDataSourceVectorizationSourceType Integrated { get; set; } = new InternalAzureChatDataSourceVectorizationSourceType(IntegratedValue);

        /// <summary> Determines if two <see cref="InternalAzureChatDataSourceVectorizationSourceType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(InternalAzureChatDataSourceVectorizationSourceType left, InternalAzureChatDataSourceVectorizationSourceType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="InternalAzureChatDataSourceVectorizationSourceType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(InternalAzureChatDataSourceVectorizationSourceType left, InternalAzureChatDataSourceVectorizationSourceType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="InternalAzureChatDataSourceVectorizationSourceType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator InternalAzureChatDataSourceVectorizationSourceType(string value) => new InternalAzureChatDataSourceVectorizationSourceType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalAzureChatDataSourceVectorizationSourceType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(InternalAzureChatDataSourceVectorizationSourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
