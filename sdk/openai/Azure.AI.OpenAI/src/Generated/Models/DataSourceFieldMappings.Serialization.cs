// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.AI.OpenAI;

namespace Azure.AI.OpenAI.Chat
{
    /// <summary></summary>
    public partial class DataSourceFieldMappings : IJsonModel<DataSourceFieldMappings>
    {
        void IJsonModel<DataSourceFieldMappings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataSourceFieldMappings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataSourceFieldMappings)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(TitleFieldName) && _additionalBinaryDataProperties?.ContainsKey("title_field") != true)
            {
                writer.WritePropertyName("title_field"u8);
                writer.WriteStringValue(TitleFieldName);
            }
            if (Optional.IsDefined(UrlFieldName) && _additionalBinaryDataProperties?.ContainsKey("url_field") != true)
            {
                writer.WritePropertyName("url_field"u8);
                writer.WriteStringValue(UrlFieldName);
            }
            if (Optional.IsDefined(FilePathFieldName) && _additionalBinaryDataProperties?.ContainsKey("filepath_field") != true)
            {
                writer.WritePropertyName("filepath_field"u8);
                writer.WriteStringValue(FilePathFieldName);
            }
            if (Optional.IsCollectionDefined(ContentFieldNames) && _additionalBinaryDataProperties?.ContainsKey("content_fields") != true)
            {
                writer.WritePropertyName("content_fields"u8);
                writer.WriteStartArray();
                foreach (string item in ContentFieldNames)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ContentFieldSeparator) && _additionalBinaryDataProperties?.ContainsKey("content_fields_separator") != true)
            {
                writer.WritePropertyName("content_fields_separator"u8);
                writer.WriteStringValue(ContentFieldSeparator);
            }
            if (Optional.IsCollectionDefined(VectorFieldNames) && _additionalBinaryDataProperties?.ContainsKey("vector_fields") != true)
            {
                writer.WritePropertyName("vector_fields"u8);
                writer.WriteStartArray();
                foreach (string item in VectorFieldNames)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ImageVectorFieldNames) && _additionalBinaryDataProperties?.ContainsKey("image_vector_fields") != true)
            {
                writer.WritePropertyName("image_vector_fields"u8);
                writer.WriteStartArray();
                foreach (string item in ImageVectorFieldNames)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    if (ModelSerializationExtensions.IsSentinelValue(item.Value))
                    {
                        continue;
                    }
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        DataSourceFieldMappings IJsonModel<DataSourceFieldMappings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DataSourceFieldMappings JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataSourceFieldMappings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataSourceFieldMappings)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataSourceFieldMappings(document.RootElement, options);
        }

        internal static DataSourceFieldMappings DeserializeDataSourceFieldMappings(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string titleFieldName = default;
            string urlFieldName = default;
            string filePathFieldName = default;
            IList<string> contentFieldNames = default;
            string contentFieldSeparator = default;
            IList<string> vectorFieldNames = default;
            IList<string> imageVectorFieldNames = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("title_field"u8))
                {
                    titleFieldName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("url_field"u8))
                {
                    urlFieldName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("filepath_field"u8))
                {
                    filePathFieldName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("content_fields"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    contentFieldNames = array;
                    continue;
                }
                if (prop.NameEquals("content_fields_separator"u8))
                {
                    contentFieldSeparator = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("vector_fields"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    vectorFieldNames = array;
                    continue;
                }
                if (prop.NameEquals("image_vector_fields"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    imageVectorFieldNames = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DataSourceFieldMappings(
                titleFieldName,
                urlFieldName,
                filePathFieldName,
                contentFieldNames ?? new ChangeTrackingList<string>(),
                contentFieldSeparator,
                vectorFieldNames ?? new ChangeTrackingList<string>(),
                imageVectorFieldNames ?? new ChangeTrackingList<string>(),
                additionalBinaryDataProperties);
        }

        BinaryData IPersistableModel<DataSourceFieldMappings>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataSourceFieldMappings>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(DataSourceFieldMappings)} does not support writing '{options.Format}' format.");
            }
        }

        DataSourceFieldMappings IPersistableModel<DataSourceFieldMappings>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DataSourceFieldMappings PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataSourceFieldMappings>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDataSourceFieldMappings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DataSourceFieldMappings)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DataSourceFieldMappings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="dataSourceFieldMappings"> The <see cref="DataSourceFieldMappings"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(DataSourceFieldMappings dataSourceFieldMappings)
        {
            if (dataSourceFieldMappings == null)
            {
                return null;
            }
            return BinaryContent.Create(dataSourceFieldMappings, ModelSerializationExtensions.WireOptions);
        }

        /// <param name="result"> The <see cref="ClientResult"/> to deserialize the <see cref="DataSourceFieldMappings"/> from. </param>
        public static explicit operator DataSourceFieldMappings(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeDataSourceFieldMappings(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
