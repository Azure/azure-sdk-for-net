// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.OpenAI
{
    /// <summary></summary>
    public partial class RequestImageContentFilterResult : IJsonModel<RequestImageContentFilterResult>
    {
        internal RequestImageContentFilterResult()
        {
        }

        void IJsonModel<RequestImageContentFilterResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<RequestImageContentFilterResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RequestImageContentFilterResult)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Profanity) && _additionalBinaryDataProperties?.ContainsKey("profanity") != true)
            {
                writer.WritePropertyName("profanity"u8);
                writer.WriteObjectValue(Profanity, options);
            }
            if (Optional.IsDefined(CustomBlocklists) && _additionalBinaryDataProperties?.ContainsKey("custom_blocklists") != true)
            {
                writer.WritePropertyName("custom_blocklists"u8);
                writer.WriteObjectValue(CustomBlocklists, options);
            }
            if (_additionalBinaryDataProperties?.ContainsKey("jailbreak") != true)
            {
                writer.WritePropertyName("jailbreak"u8);
                writer.WriteObjectValue(Jailbreak, options);
            }
        }

        RequestImageContentFilterResult IJsonModel<RequestImageContentFilterResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (RequestImageContentFilterResult)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override ResponseImageContentFilterResult JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<RequestImageContentFilterResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RequestImageContentFilterResult)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRequestImageContentFilterResult(document.RootElement, options);
        }

        internal static RequestImageContentFilterResult DeserializeRequestImageContentFilterResult(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ContentFilterSeverityResult sexual = default;
            ContentFilterSeverityResult violence = default;
            ContentFilterSeverityResult hate = default;
            ContentFilterSeverityResult selfHarm = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            ContentFilterDetectionResult profanity = default;
            ContentFilterBlocklistResult customBlocklists = default;
            ContentFilterDetectionResult jailbreak = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("sexual"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sexual = ContentFilterSeverityResult.DeserializeContentFilterSeverityResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("violence"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    violence = ContentFilterSeverityResult.DeserializeContentFilterSeverityResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("hate"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hate = ContentFilterSeverityResult.DeserializeContentFilterSeverityResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("self_harm"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selfHarm = ContentFilterSeverityResult.DeserializeContentFilterSeverityResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("profanity"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    profanity = ContentFilterDetectionResult.DeserializeContentFilterDetectionResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("custom_blocklists"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customBlocklists = ContentFilterBlocklistResult.DeserializeContentFilterBlocklistResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("jailbreak"u8))
                {
                    jailbreak = ContentFilterDetectionResult.DeserializeContentFilterDetectionResult(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new RequestImageContentFilterResult(
                sexual,
                violence,
                hate,
                selfHarm,
                additionalBinaryDataProperties,
                profanity,
                customBlocklists,
                jailbreak);
        }

        BinaryData IPersistableModel<RequestImageContentFilterResult>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<RequestImageContentFilterResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(RequestImageContentFilterResult)} does not support writing '{options.Format}' format.");
            }
        }

        RequestImageContentFilterResult IPersistableModel<RequestImageContentFilterResult>.Create(BinaryData data, ModelReaderWriterOptions options) => (RequestImageContentFilterResult)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override ResponseImageContentFilterResult PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<RequestImageContentFilterResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeRequestImageContentFilterResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RequestImageContentFilterResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RequestImageContentFilterResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="requestImageContentFilterResult"> The <see cref="RequestImageContentFilterResult"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(RequestImageContentFilterResult requestImageContentFilterResult)
        {
            if (requestImageContentFilterResult == null)
            {
                return null;
            }
            return BinaryContent.Create(requestImageContentFilterResult, ModelSerializationExtensions.WireOptions);
        }

        /// <param name="result"> The <see cref="ClientResult"/> to deserialize the <see cref="RequestImageContentFilterResult"/> from. </param>
        public static explicit operator RequestImageContentFilterResult(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeRequestImageContentFilterResult(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
