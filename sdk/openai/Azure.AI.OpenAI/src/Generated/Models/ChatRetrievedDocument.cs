// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.AI.OpenAI;

namespace Azure.AI.OpenAI.Chat
{
    /// <summary> The ChatRetrievedDocument. </summary>
    public partial class ChatRetrievedDocument
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ChatRetrievedDocument"/>. </summary>
        /// <param name="content"> The content of the citation. </param>
        /// <param name="searchQueries"> The search queries executed to retrieve documents. </param>
        /// <param name="dataSourceIndex"> The index of the data source used for retrieval. </param>
        internal ChatRetrievedDocument(string content, IEnumerable<string> searchQueries, int dataSourceIndex)
        {
            Content = content;
            SearchQueries = searchQueries.ToList();
            DataSourceIndex = dataSourceIndex;
        }

        /// <summary> Initializes a new instance of <see cref="ChatRetrievedDocument"/>. </summary>
        /// <param name="content"> The content of the citation. </param>
        /// <param name="title"> The title for the citation. </param>
        /// <param name="url"> The URL of the citation. </param>
        /// <param name="chunkId"> The chunk ID for the citation. </param>
        /// <param name="rerankScore"> The rerank score for the retrieval. </param>
        /// <param name="searchQueries"> The search queries executed to retrieve documents. </param>
        /// <param name="dataSourceIndex"> The index of the data source used for retrieval. </param>
        /// <param name="originalSearchScore"> The original search score for the retrieval. </param>
        /// <param name="filterReason"> If applicable, an indication of why the document was filtered. </param>
        /// <param name="filePath"> The file path for the citation. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ChatRetrievedDocument(string content, string title, string url, string chunkId, double? rerankScore, IList<string> searchQueries, int dataSourceIndex, double? originalSearchScore, ChatDocumentFilterReason? filterReason, string filePath, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            // Plugin customization: ensure initialization of collections
            Content = content;
            Title = title;
            Url = url;
            ChunkId = chunkId;
            RerankScore = rerankScore;
            SearchQueries = searchQueries ?? new ChangeTrackingList<string>();
            DataSourceIndex = dataSourceIndex;
            OriginalSearchScore = originalSearchScore;
            FilterReason = filterReason;
            FilePath = filePath;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The content of the citation. </summary>
        public string Content { get; }

        /// <summary> The title for the citation. </summary>
        public string Title { get; }

        /// <summary> The URL of the citation. </summary>
        public string Url { get; }

        /// <summary> The chunk ID for the citation. </summary>
        public string ChunkId { get; }

        /// <summary> The rerank score for the retrieval. </summary>
        public double? RerankScore { get; }

        /// <summary> The search queries executed to retrieve documents. </summary>
        public IList<string> SearchQueries { get; }

        /// <summary> The index of the data source used for retrieval. </summary>
        public int DataSourceIndex { get; }

        /// <summary> The original search score for the retrieval. </summary>
        public double? OriginalSearchScore { get; }

        /// <summary> If applicable, an indication of why the document was filtered. </summary>
        public ChatDocumentFilterReason? FilterReason { get; }

        /// <summary></summary>
        internal IDictionary<string, BinaryData> SerializedAdditionalRawData
        {
            get => _additionalBinaryDataProperties;
            set => _additionalBinaryDataProperties = value;
        }
    }
}
