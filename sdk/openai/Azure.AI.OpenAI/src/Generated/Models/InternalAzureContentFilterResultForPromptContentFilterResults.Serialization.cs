// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.OpenAI
{
    internal partial class InternalAzureContentFilterResultForPromptContentFilterResults : IJsonModel<InternalAzureContentFilterResultForPromptContentFilterResults>
    {
        internal InternalAzureContentFilterResultForPromptContentFilterResults()
        {
        }

        void IJsonModel<InternalAzureContentFilterResultForPromptContentFilterResults>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalAzureContentFilterResultForPromptContentFilterResults>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalAzureContentFilterResultForPromptContentFilterResults)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Sexual) && _additionalBinaryDataProperties?.ContainsKey("sexual") != true)
            {
                writer.WritePropertyName("sexual"u8);
                writer.WriteObjectValue(Sexual, options);
            }
            if (Optional.IsDefined(Hate) && _additionalBinaryDataProperties?.ContainsKey("hate") != true)
            {
                writer.WritePropertyName("hate"u8);
                writer.WriteObjectValue(Hate, options);
            }
            if (Optional.IsDefined(Violence) && _additionalBinaryDataProperties?.ContainsKey("violence") != true)
            {
                writer.WritePropertyName("violence"u8);
                writer.WriteObjectValue(Violence, options);
            }
            if (Optional.IsDefined(SelfHarm) && _additionalBinaryDataProperties?.ContainsKey("self_harm") != true)
            {
                writer.WritePropertyName("self_harm"u8);
                writer.WriteObjectValue(SelfHarm, options);
            }
            if (Optional.IsDefined(Profanity) && _additionalBinaryDataProperties?.ContainsKey("profanity") != true)
            {
                writer.WritePropertyName("profanity"u8);
                writer.WriteObjectValue(Profanity, options);
            }
            if (Optional.IsDefined(CustomBlocklists) && _additionalBinaryDataProperties?.ContainsKey("custom_blocklists") != true)
            {
                writer.WritePropertyName("custom_blocklists"u8);
                writer.WriteObjectValue(CustomBlocklists, options);
            }
            if (Optional.IsDefined(Error) && _additionalBinaryDataProperties?.ContainsKey("error") != true)
            {
                writer.WritePropertyName("error"u8);
                writer.WriteObjectValue(Error, options);
            }
            if (_additionalBinaryDataProperties?.ContainsKey("jailbreak") != true)
            {
                writer.WritePropertyName("jailbreak"u8);
                writer.WriteObjectValue(Jailbreak, options);
            }
            if (_additionalBinaryDataProperties?.ContainsKey("indirect_attack") != true)
            {
                writer.WritePropertyName("indirect_attack"u8);
                writer.WriteObjectValue(IndirectAttack, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    if (ModelSerializationExtensions.IsSentinelValue(item.Value))
                    {
                        continue;
                    }
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        InternalAzureContentFilterResultForPromptContentFilterResults IJsonModel<InternalAzureContentFilterResultForPromptContentFilterResults>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        protected virtual InternalAzureContentFilterResultForPromptContentFilterResults JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalAzureContentFilterResultForPromptContentFilterResults>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalAzureContentFilterResultForPromptContentFilterResults)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternalAzureContentFilterResultForPromptContentFilterResults(document.RootElement, options);
        }

        internal static InternalAzureContentFilterResultForPromptContentFilterResults DeserializeInternalAzureContentFilterResultForPromptContentFilterResults(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ContentFilterSeverityResult sexual = default;
            ContentFilterSeverityResult hate = default;
            ContentFilterSeverityResult violence = default;
            ContentFilterSeverityResult selfHarm = default;
            ContentFilterDetectionResult profanity = default;
            ContentFilterBlocklistResult customBlocklists = default;
            InternalAzureContentFilterResultForChoiceError error = default;
            ContentFilterDetectionResult jailbreak = default;
            ContentFilterDetectionResult indirectAttack = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("sexual"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sexual = ContentFilterSeverityResult.DeserializeContentFilterSeverityResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("hate"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hate = ContentFilterSeverityResult.DeserializeContentFilterSeverityResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("violence"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    violence = ContentFilterSeverityResult.DeserializeContentFilterSeverityResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("self_harm"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selfHarm = ContentFilterSeverityResult.DeserializeContentFilterSeverityResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("profanity"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    profanity = ContentFilterDetectionResult.DeserializeContentFilterDetectionResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("custom_blocklists"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customBlocklists = ContentFilterBlocklistResult.DeserializeContentFilterBlocklistResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("error"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = InternalAzureContentFilterResultForChoiceError.DeserializeInternalAzureContentFilterResultForChoiceError(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("jailbreak"u8))
                {
                    jailbreak = ContentFilterDetectionResult.DeserializeContentFilterDetectionResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("indirect_attack"u8))
                {
                    indirectAttack = ContentFilterDetectionResult.DeserializeContentFilterDetectionResult(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new InternalAzureContentFilterResultForPromptContentFilterResults(
                sexual,
                hate,
                violence,
                selfHarm,
                profanity,
                customBlocklists,
                error,
                jailbreak,
                indirectAttack,
                additionalBinaryDataProperties);
        }

        BinaryData IPersistableModel<InternalAzureContentFilterResultForPromptContentFilterResults>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalAzureContentFilterResultForPromptContentFilterResults>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(InternalAzureContentFilterResultForPromptContentFilterResults)} does not support writing '{options.Format}' format.");
            }
        }

        InternalAzureContentFilterResultForPromptContentFilterResults IPersistableModel<InternalAzureContentFilterResultForPromptContentFilterResults>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        protected virtual InternalAzureContentFilterResultForPromptContentFilterResults PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalAzureContentFilterResultForPromptContentFilterResults>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInternalAzureContentFilterResultForPromptContentFilterResults(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternalAzureContentFilterResultForPromptContentFilterResults)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternalAzureContentFilterResultForPromptContentFilterResults>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        public static implicit operator BinaryContent(InternalAzureContentFilterResultForPromptContentFilterResults internalAzureContentFilterResultForPromptContentFilterResults)
        {
            if (internalAzureContentFilterResultForPromptContentFilterResults == null)
            {
                return null;
            }
            return BinaryContent.Create(internalAzureContentFilterResultForPromptContentFilterResults, ModelSerializationExtensions.WireOptions);
        }

        public static explicit operator InternalAzureContentFilterResultForPromptContentFilterResults(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeInternalAzureContentFilterResultForPromptContentFilterResults(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
