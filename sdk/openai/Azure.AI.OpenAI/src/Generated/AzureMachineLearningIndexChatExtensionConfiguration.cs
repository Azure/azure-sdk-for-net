// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.AI.OpenAI
{
    /// <summary>
    /// A specific representation of configurable options for Azure Machine Learning index when using it as an Azure OpenAI chat
    /// extension.
    /// </summary>
    public partial class AzureMachineLearningIndexChatExtensionConfiguration : AzureChatExtensionConfiguration
    {
        /// <summary> Initializes a new instance of AzureMachineLearningIndexChatExtensionConfiguration. </summary>
        /// <param name="parameters">
        ///   The configuration payload used for the Azure chat extension. The structure payload details are specific to the
        ///   extension being configured.
        ///   Azure chat extensions are only compatible with Azure OpenAI.
        /// </param>
        /// <param name="projectResourceId"> The resource id of the Azure Machine Learning project. </param>
        /// <param name="name"> The Azure Machine Learning index name. </param>
        /// <param name="version"> The version of the Azure Machine Learning index. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/>, <paramref name="projectResourceId"/>, <paramref name="name"/> or <paramref name="version"/> is null. </exception>
        public AzureMachineLearningIndexChatExtensionConfiguration(BinaryData parameters, string projectResourceId, string name, string version) : base(parameters)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));
            Argument.AssertNotNull(projectResourceId, nameof(projectResourceId));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));

            Type = AzureChatExtensionType.AzureMachineLearningIndex;
            ProjectResourceId = projectResourceId;
            Name = name;
            Version = version;
        }

        /// <summary> Initializes a new instance of AzureMachineLearningIndexChatExtensionConfiguration. </summary>
        /// <param name="type">
        ///   The label for the type of an Azure chat extension. This typically corresponds to a matching Azure resource.
        ///   Azure chat extensions are only compatible with Azure OpenAI.
        /// </param>
        /// <param name="parameters">
        ///   The configuration payload used for the Azure chat extension. The structure payload details are specific to the
        ///   extension being configured.
        ///   Azure chat extensions are only compatible with Azure OpenAI.
        /// </param>
        /// <param name="authentication"> The authentication option to access the data. </param>
        /// <param name="documentCount"> The configured top number of documents to feature for the configured query. </param>
        /// <param name="shouldRestrictResultScope"> Whether queries should be restricted to use of indexed data. </param>
        /// <param name="strictness"> The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer. </param>
        /// <param name="roleInformation"> Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit. </param>
        /// <param name="projectResourceId"> The resource id of the Azure Machine Learning project. </param>
        /// <param name="name"> The Azure Machine Learning index name. </param>
        /// <param name="version"> The version of the Azure Machine Learning index. </param>
        /// <param name="filter"> Search filter. Only supported if the MLIndex is of type AzureSearch. </param>
        internal AzureMachineLearningIndexChatExtensionConfiguration(AzureChatExtensionType type, BinaryData parameters, OnYourDataAuthenticationOptions authentication, int? documentCount, bool? shouldRestrictResultScope, int? strictness, string roleInformation, string projectResourceId, string name, string version, string filter) : base(type, parameters)
        {
            Authentication = authentication;
            DocumentCount = documentCount;
            ShouldRestrictResultScope = shouldRestrictResultScope;
            Strictness = strictness;
            RoleInformation = roleInformation;
            ProjectResourceId = projectResourceId;
            Name = name;
            Version = version;
            Filter = filter;
        }

        /// <summary>
        /// The authentication option to access the data.
        /// Please note <see cref="OnYourDataAuthenticationOptions"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="OnYourDataApiKeyAuthenticationOptions"/>, <see cref="OnYourDataConnectionStringAuthenticationOptions"/>, <see cref="OnYourDataKeyAndKeyIdAuthenticationOptions"/>, <see cref="OnYourDataSystemAssignedManagedIdentityAuthenticationOptions"/> and <see cref="OnYourDataUserAssignedManagedIdentityAuthenticationOptions"/>.
        /// </summary>
        public OnYourDataAuthenticationOptions Authentication { get; set; }
        /// <summary> The configured top number of documents to feature for the configured query. </summary>
        public int? DocumentCount { get; set; }
        /// <summary> Whether queries should be restricted to use of indexed data. </summary>
        public bool? ShouldRestrictResultScope { get; set; }
        /// <summary> The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer. </summary>
        public int? Strictness { get; set; }
        /// <summary> Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit. </summary>
        public string RoleInformation { get; set; }
        /// <summary> Search filter. Only supported if the MLIndex is of type AzureSearch. </summary>
        public string Filter { get; set; }
    }
}
