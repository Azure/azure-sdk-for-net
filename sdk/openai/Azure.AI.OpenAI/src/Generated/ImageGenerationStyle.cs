// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary>
    /// An image generation configuration that specifies how the model should incorporate realism and other visual characteristics.
    /// Only configurable with dall-e-3 models.
    /// </summary>
    public readonly partial struct ImageGenerationStyle : IEquatable<ImageGenerationStyle>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImageGenerationStyle"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImageGenerationStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NaturalValue = "natural";
        private const string VividValue = "vivid";

        /// <summary> Requests image generation in a natural style with less preference for dramatic and hyper-realistic characteristics. </summary>
        public static ImageGenerationStyle Natural { get; } = new ImageGenerationStyle(NaturalValue);
        /// <summary>
        /// Requests image generation in a vivid style with a higher preference for dramatic and hyper-realistic
        /// characteristics.
        /// </summary>
        public static ImageGenerationStyle Vivid { get; } = new ImageGenerationStyle(VividValue);
        /// <summary> Determines if two <see cref="ImageGenerationStyle"/> values are the same. </summary>
        public static bool operator ==(ImageGenerationStyle left, ImageGenerationStyle right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImageGenerationStyle"/> values are not the same. </summary>
        public static bool operator !=(ImageGenerationStyle left, ImageGenerationStyle right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ImageGenerationStyle"/>. </summary>
        public static implicit operator ImageGenerationStyle(string value) => new ImageGenerationStyle(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageGenerationStyle other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImageGenerationStyle other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
