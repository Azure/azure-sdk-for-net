// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.OpenAI;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.OpenAI.Samples
{
    public partial class Samples_OpenAIClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmbeddings_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                input = new object[]
            {
"<input>"
            },
            });
            Response response = client.GetEmbeddings("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmbeddings_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                input = new object[]
            {
"<input>"
            },
            });
            Response response = await client.GetEmbeddingsAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmbeddings_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            EmbeddingsOptions embeddingsOptions = new EmbeddingsOptions(new string[] { "<input>" });
            Response<Embeddings> response = client.GetEmbeddings("<deploymentId>", embeddingsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmbeddings_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            EmbeddingsOptions embeddingsOptions = new EmbeddingsOptions(new string[] { "<input>" });
            Response<Embeddings> response = await client.GetEmbeddingsAsync("<deploymentId>", embeddingsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmbeddings_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                user = "<user>",
                model = "<model>",
                input = new object[]
            {
"<input>"
            },
            });
            Response response = client.GetEmbeddings("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmbeddings_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                user = "<user>",
                model = "<model>",
                input = new object[]
            {
"<input>"
            },
            });
            Response response = await client.GetEmbeddingsAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmbeddings_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            EmbeddingsOptions embeddingsOptions = new EmbeddingsOptions(new string[] { "<input>" })
            {
                User = "<user>",
                InternalNonAzureModelName = "<model>",
            };
            Response<Embeddings> response = client.GetEmbeddings("<deploymentId>", embeddingsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmbeddings_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            EmbeddingsOptions embeddingsOptions = new EmbeddingsOptions(new string[] { "<input>" })
            {
                User = "<user>",
                InternalNonAzureModelName = "<model>",
            };
            Response<Embeddings> response = await client.GetEmbeddingsAsync("<deploymentId>", embeddingsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCompletions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                prompt = new object[]
            {
"<prompt>"
            },
            });
            Response response = client.GetCompletions("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCompletions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                prompt = new object[]
            {
"<prompt>"
            },
            });
            Response response = await client.GetCompletionsAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCompletions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            CompletionsOptions completionsOptions = new CompletionsOptions(new string[] { "<prompt>" });
            Response<Completions> response = client.GetCompletions("<deploymentId>", completionsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCompletions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            CompletionsOptions completionsOptions = new CompletionsOptions(new string[] { "<prompt>" });
            Response<Completions> response = await client.GetCompletionsAsync("<deploymentId>", completionsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCompletions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                prompt = new object[]
            {
"<prompt>"
            },
                max_tokens = 1234,
                temperature = 123.45F,
                top_p = 123.45F,
                logit_bias = new
                {
                    key = 1234,
                },
                user = "<user>",
                n = 1234,
                logprobs = 1234,
                echo = true,
                stop = new object[]
            {
"<stop>"
            },
                presence_penalty = 123.45F,
                frequency_penalty = 123.45F,
                best_of = 1234,
                stream = true,
                model = "<model>",
            });
            Response response = client.GetCompletions("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("prompt_index").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCompletions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                prompt = new object[]
            {
"<prompt>"
            },
                max_tokens = 1234,
                temperature = 123.45F,
                top_p = 123.45F,
                logit_bias = new
                {
                    key = 1234,
                },
                user = "<user>",
                n = 1234,
                logprobs = 1234,
                echo = true,
                stop = new object[]
            {
"<stop>"
            },
                presence_penalty = 123.45F,
                frequency_penalty = 123.45F,
                best_of = 1234,
                stream = true,
                model = "<model>",
            });
            Response response = await client.GetCompletionsAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("prompt_index").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCompletions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            CompletionsOptions completionsOptions = new CompletionsOptions(new string[] { "<prompt>" })
            {
                MaxTokens = 1234,
                Temperature = 123.45F,
                NucleusSamplingFactor = 123.45F,
                InternalStringKeyedTokenSelectionBiases =
{
["key"] = 1234
},
                User = "<user>",
                ChoicesPerPrompt = 1234,
                LogProbabilityCount = 1234,
                Echo = true,
                StopSequences = { "<stop>" },
                PresencePenalty = 123.45F,
                FrequencyPenalty = 123.45F,
                GenerationSampleCount = 1234,
                InternalShouldStreamResponse = true,
                InternalNonAzureModelName = "<model>",
            };
            Response<Completions> response = client.GetCompletions("<deploymentId>", completionsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCompletions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            CompletionsOptions completionsOptions = new CompletionsOptions(new string[] { "<prompt>" })
            {
                MaxTokens = 1234,
                Temperature = 123.45F,
                NucleusSamplingFactor = 123.45F,
                InternalStringKeyedTokenSelectionBiases =
{
["key"] = 1234
},
                User = "<user>",
                ChoicesPerPrompt = 1234,
                LogProbabilityCount = 1234,
                Echo = true,
                StopSequences = { "<stop>" },
                PresencePenalty = 123.45F,
                FrequencyPenalty = 123.45F,
                GenerationSampleCount = 1234,
                InternalShouldStreamResponse = true,
                InternalNonAzureModelName = "<model>",
            };
            Response<Completions> response = await client.GetCompletionsAsync("<deploymentId>", completionsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetChatCompletions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "system",
content = "<content>",
}
            },
            });
            Response response = client.GetChatCompletions("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetChatCompletions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "system",
content = "<content>",
}
            },
            });
            Response response = await client.GetChatCompletionsAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetChatCompletions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "system",
content = "<content>",
name = "<name>",
function_call = new
{
name = "<name>",
arguments = "<arguments>",
},
context = new
{
messages = new object[]
{
null
},
},
}
            },
                functions = new object[]
            {
new
{
name = "<name>",
description = "<description>",
parameters = new object(),
}
            },
                function_call = "auto",
                max_tokens = 1234,
                temperature = 123.45F,
                top_p = 123.45F,
                logit_bias = new
                {
                    key = 1234,
                },
                user = "<user>",
                n = 1234,
                stop = new object[]
            {
"<stop>"
            },
                presence_penalty = 123.45F,
                frequency_penalty = 123.45F,
                stream = true,
                model = "<model>",
                dataSources = new object[]
            {
new
{
type = "AzureCognitiveSearch",
parameters = new object(),
}
            },
            });
            Response response = client.GetChatCompletions("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("function_call").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("function_call").GetProperty("arguments").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("function_call").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("function_call").GetProperty("arguments").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("prompt_index").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetChatCompletions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "system",
content = "<content>",
name = "<name>",
function_call = new
{
name = "<name>",
arguments = "<arguments>",
},
context = new
{
messages = new object[]
{
null
},
},
}
            },
                functions = new object[]
            {
new
{
name = "<name>",
description = "<description>",
parameters = new object(),
}
            },
                function_call = "auto",
                max_tokens = 1234,
                temperature = 123.45F,
                top_p = 123.45F,
                logit_bias = new
                {
                    key = 1234,
                },
                user = "<user>",
                n = 1234,
                stop = new object[]
            {
"<stop>"
            },
                presence_penalty = 123.45F,
                frequency_penalty = 123.45F,
                stream = true,
                model = "<model>",
                dataSources = new object[]
            {
new
{
type = "AzureCognitiveSearch",
parameters = new object(),
}
            },
            });
            Response response = await client.GetChatCompletionsAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("function_call").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("function_call").GetProperty("arguments").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("function_call").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("delta").GetProperty("function_call").GetProperty("arguments").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("prompt_index").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("sexual").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("violence").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("hate").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("self_harm").GetProperty("filtered").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("prompt_annotations")[0].GetProperty("content_filter_results").GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsPlainText_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = client.GetAudioTranscriptionAsPlainText("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsPlainText_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = await client.GetAudioTranscriptionAsPlainTextAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsPlainText_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()));
            Response<string> response = client.GetAudioTranscriptionAsPlainText("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsPlainText_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()));
            Response<string> response = await client.GetAudioTranscriptionAsPlainTextAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsPlainText_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                language = "<language>",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = client.GetAudioTranscriptionAsPlainText("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsPlainText_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                language = "<language>",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = await client.GetAudioTranscriptionAsPlainTextAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsPlainText_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranscriptionFormat.Json,
                Language = "<language>",
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<string> response = client.GetAudioTranscriptionAsPlainText("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsPlainText_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranscriptionFormat.Json,
                Language = "<language>",
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<string> response = await client.GetAudioTranscriptionAsPlainTextAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsResponseObject_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = client.GetAudioTranscriptionAsResponseObject("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsResponseObject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = await client.GetAudioTranscriptionAsResponseObjectAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsResponseObject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()));
            Response<AudioTranscription> response = client.GetAudioTranscriptionAsResponseObject("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsResponseObject_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()));
            Response<AudioTranscription> response = await client.GetAudioTranscriptionAsResponseObjectAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsResponseObject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                language = "<language>",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = client.GetAudioTranscriptionAsResponseObject("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsResponseObject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                language = "<language>",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = await client.GetAudioTranscriptionAsResponseObjectAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsResponseObject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranscriptionFormat.Json,
                Language = "<language>",
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<AudioTranscription> response = client.GetAudioTranscriptionAsResponseObject("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsResponseObject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranscriptionFormat.Json,
                Language = "<language>",
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<AudioTranscription> response = await client.GetAudioTranscriptionAsResponseObjectAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsPlainText_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = client.GetAudioTranslationAsPlainText("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsPlainText_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = await client.GetAudioTranslationAsPlainTextAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsPlainText_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()));
            Response<string> response = client.GetAudioTranslationAsPlainText("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsPlainText_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()));
            Response<string> response = await client.GetAudioTranslationAsPlainTextAsync("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsPlainText_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = client.GetAudioTranslationAsPlainText("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsPlainText_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = await client.GetAudioTranslationAsPlainTextAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsPlainText_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranslationFormat.Json,
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<string> response = client.GetAudioTranslationAsPlainText("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsPlainText_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranslationFormat.Json,
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<string> response = await client.GetAudioTranslationAsPlainTextAsync("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsResponseObject_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = client.GetAudioTranslationAsResponseObject("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsResponseObject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = await client.GetAudioTranslationAsResponseObjectAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsResponseObject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()));
            Response<AudioTranslation> response = client.GetAudioTranslationAsResponseObject("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsResponseObject_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()));
            Response<AudioTranslation> response = await client.GetAudioTranslationAsResponseObjectAsync("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsResponseObject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = client.GetAudioTranslationAsResponseObject("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsResponseObject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = await client.GetAudioTranslationAsResponseObjectAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsResponseObject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranslationFormat.Json,
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<AudioTranslation> response = client.GetAudioTranslationAsResponseObject("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsResponseObject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            OpenAIClient client = new OpenAIClient(endpoint, credential);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranslationFormat.Json,
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<AudioTranslation> response = await client.GetAudioTranslationAsResponseObjectAsync("<deploymentId>", audioTranslationOptions);
        }
    }
}
