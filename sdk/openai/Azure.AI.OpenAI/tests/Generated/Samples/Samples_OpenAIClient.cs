// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.OpenAI.Samples
{
    public class Samples_OpenAIClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmbeddings_Convenience_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var embeddingsOptions = new EmbeddingsOptions(new string[]
            {
    "<null>"
            })
            {
                User = "<User>",
            };
            var result = await client.GetEmbeddingsAsync("<deploymentId>", embeddingsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCompletions_Convenience_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var completionsOptions = new CompletionsOptions(new string[]
            {
    "<null>"
            })
            {
                MaxTokens = 1234,
                Temperature = 3.14f,
                NucleusSamplingFactor = 3.14f,
                User = "<User>",
                ChoicesPerPrompt = 1234,
                LogProbabilityCount = 1234,
                Echo = true,
                StopSequences =
{
        "<null>"
    },
                PresencePenalty = 3.14f,
                FrequencyPenalty = 3.14f,
                GenerationSampleCount = 1234,
            };
            var result = await client.GetCompletionsAsync("<deploymentId>", completionsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscription()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                file = new { },
            };

            Response response = client.GetAudioTranscription("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscription_AllParameters()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                file = new { },
                prompt = "<prompt>",
                response_format = "json",
                temperature = 123.45f,
                language = "<language>",
            };

            Response response = client.GetAudioTranscription("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscription_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                file = new { },
            };

            Response response = await client.GetAudioTranscriptionAsync("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscription_AllParameters_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                file = new { },
                prompt = "<prompt>",
                response_format = "json",
                temperature = 123.45f,
                language = "<language>",
            };

            Response response = await client.GetAudioTranscriptionAsync("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscription_Convenience_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromString("<your binary data content>"))
            {
                Prompt = "<Prompt>",
                ResponseFormat = AudioTranscriptionFormat.Json,
                Temperature = 3.14f,
                Language = "<Language>",
            };
            var result = await client.GetAudioTranscriptionAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslation()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                file = new { },
            };

            Response response = client.GetAudioTranslation("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslation_AllParameters()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                file = new { },
                prompt = "<prompt>",
                response_format = "json",
                temperature = 123.45f,
            };

            Response response = client.GetAudioTranslation("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslation_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                file = new { },
            };

            Response response = await client.GetAudioTranslationAsync("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslation_AllParameters_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                file = new { },
                prompt = "<prompt>",
                response_format = "json",
                temperature = 123.45f,
            };

            Response response = await client.GetAudioTranslationAsync("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslation_Convenience_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromString("<your binary data content>"))
            {
                Prompt = "<Prompt>",
                ResponseFormat = AudioTranscriptionFormat.Json,
                Temperature = 3.14f,
            };
            var result = await client.GetAudioTranslationAsync("<deploymentId>", audioTranslationOptions);
        }
    }
}
