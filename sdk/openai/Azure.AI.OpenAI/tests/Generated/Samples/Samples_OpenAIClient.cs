// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.OpenAI.Samples
{
    public class Samples_OpenAIClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmbeddings()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                input = new { },
            };

            Response response = client.GetEmbeddings("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmbeddings_AllParameters()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                user = "<user>",
                input_type = "<input_type>",
                model = "<model>",
                input = new { },
            };

            Response response = client.GetEmbeddings("<deploymentId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmbeddings_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                input = new { },
            };

            Response response = await client.GetEmbeddingsAsync("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmbeddings_AllParameters_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                user = "<user>",
                input_type = "<input_type>",
                model = "<model>",
                input = new { },
            };

            Response response = await client.GetEmbeddingsAsync("<deploymentId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCompletions()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new { };

            Response response = client.GetCompletions("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCompletions_AllParameters()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                prompt = new[] {
        "<String>"
    },
                max_tokens = 1234,
                temperature = 123.45f,
                top_p = 123.45f,
                logit_bias = new
                {
                    key = 1234,
                },
                user = "<user>",
                n = 1234,
                logprobs = 1234,
                model = "<model>",
                echo = true,
                stop = new[] {
        "<String>"
    },
                completion_config = "<completion_config>",
                cache_level = 1234,
                presence_penalty = 123.45f,
                frequency_penalty = 123.45f,
                best_of = 1234,
            };

            Response response = client.GetCompletions("<deploymentId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCompletions_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new { };

            Response response = await client.GetCompletionsAsync("<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCompletions_AllParameters_Async()
        {
            var client = new OpenAIClient("<openAIApiKey>");

            var data = new
            {
                prompt = new[] {
        "<String>"
    },
                max_tokens = 1234,
                temperature = 123.45f,
                top_p = 123.45f,
                logit_bias = new
                {
                    key = 1234,
                },
                user = "<user>",
                n = 1234,
                logprobs = 1234,
                model = "<model>",
                echo = true,
                stop = new[] {
        "<String>"
    },
                completion_config = "<completion_config>",
                cache_level = 1234,
                presence_penalty = 123.45f,
                frequency_penalty = 123.45f,
                best_of = 1234,
            };

            Response response = await client.GetCompletionsAsync("<deploymentId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
        }
    }
}
