// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI.Assistants
{
    /// <summary> The OpenAIPageableListOfObject2. </summary>
    internal readonly partial struct OpenAIPageableListOfObject2 : IEquatable<OpenAIPageableListOfObject2>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OpenAIPageableListOfObject2"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OpenAIPageableListOfObject2(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ListValue = "list";

        /// <summary> list. </summary>
        public static OpenAIPageableListOfObject2 List { get; } = new OpenAIPageableListOfObject2(ListValue);
        /// <summary> Determines if two <see cref="OpenAIPageableListOfObject2"/> values are the same. </summary>
        public static bool operator ==(OpenAIPageableListOfObject2 left, OpenAIPageableListOfObject2 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OpenAIPageableListOfObject2"/> values are not the same. </summary>
        public static bool operator !=(OpenAIPageableListOfObject2 left, OpenAIPageableListOfObject2 right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OpenAIPageableListOfObject2"/>. </summary>
        public static implicit operator OpenAIPageableListOfObject2(string value) => new OpenAIPageableListOfObject2(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OpenAIPageableListOfObject2 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OpenAIPageableListOfObject2 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
