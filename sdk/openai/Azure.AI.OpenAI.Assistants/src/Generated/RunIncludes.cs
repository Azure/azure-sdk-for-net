// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI.Assistants
{
    /// <summary> Values to for the includes parameter in the create run operation. </summary>
    public readonly partial struct RunIncludes : IEquatable<RunIncludes>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RunIncludes"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RunIncludes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FileSearchContentValue = "step_details.tool_calls[*].file_search.results[*].content";

        /// <summary> Fetch the file search result content. </summary>
        public static RunIncludes FileSearchContent { get; } = new RunIncludes(FileSearchContentValue);
        /// <summary> Determines if two <see cref="RunIncludes"/> values are the same. </summary>
        public static bool operator ==(RunIncludes left, RunIncludes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RunIncludes"/> values are not the same. </summary>
        public static bool operator !=(RunIncludes left, RunIncludes right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RunIncludes"/>. </summary>
        public static implicit operator RunIncludes(string value) => new RunIncludes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RunIncludes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RunIncludes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
