// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MigrationDiscoverySap.Models
{
    /// <summary> The data source for this resource. </summary>
    internal readonly partial struct DataSource : IEquatable<DataSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExcelValue = "Excel";
        private const string NativeValue = "Native";

        /// <summary> The type of DataSource- Excel. </summary>
        public static DataSource Excel { get; } = new DataSource(ExcelValue);
        /// <summary> The type of DataSource- Native. </summary>
        public static DataSource Native { get; } = new DataSource(NativeValue);
        /// <summary> Determines if two <see cref="DataSource"/> values are the same. </summary>
        public static bool operator ==(DataSource left, DataSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataSource"/> values are not the same. </summary>
        public static bool operator !=(DataSource left, DataSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataSource"/>. </summary>
        public static implicit operator DataSource(string value) => new DataSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
