// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MigrationDiscoverySap.Models
{
    /// <summary> This is Operating System on which the host server is running. </summary>
    public readonly partial struct OperatingSystem : IEquatable<OperatingSystem>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OperatingSystem"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperatingSystem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IbmaixValue = "IBMAIX";
        private const string RedHatValue = "RedHat";
        private const string SuseValue = "SUSE";
        private const string SolarisValue = "Solaris";
        private const string UnixValue = "Unix";
        private const string WindowsServerValue = "WindowsServer";

        /// <summary> The type of Operating system- IBMAIX. </summary>
        public static OperatingSystem Ibmaix { get; } = new OperatingSystem(IbmaixValue);
        /// <summary> The type of Operating system- RedHat. </summary>
        public static OperatingSystem RedHat { get; } = new OperatingSystem(RedHatValue);
        /// <summary> The type of Operating system- SUSE. </summary>
        public static OperatingSystem Suse { get; } = new OperatingSystem(SuseValue);
        /// <summary> The type of Operating system- Solaris. </summary>
        public static OperatingSystem Solaris { get; } = new OperatingSystem(SolarisValue);
        /// <summary> The type of Operating system- Unix. </summary>
        public static OperatingSystem Unix { get; } = new OperatingSystem(UnixValue);
        /// <summary> The type of Operating system- WindowsServer. </summary>
        public static OperatingSystem WindowsServer { get; } = new OperatingSystem(WindowsServerValue);
        /// <summary> Determines if two <see cref="OperatingSystem"/> values are the same. </summary>
        public static bool operator ==(OperatingSystem left, OperatingSystem right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperatingSystem"/> values are not the same. </summary>
        public static bool operator !=(OperatingSystem left, OperatingSystem right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OperatingSystem"/>. </summary>
        public static implicit operator OperatingSystem(string value) => new OperatingSystem(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperatingSystem other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperatingSystem other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
