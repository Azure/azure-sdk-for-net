// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ServiceLinker.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ServiceLinker.Samples
{
    public partial class Sample_ServiceLinkerDryrunResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetDryrun()
        {
            // Generated from example definition: specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2024-07-01-preview/examples/GetDryrun.json
            // this example is just showing the usage of "Linkers_GetDryrun" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceLinkerDryrunResource created on azure
            // for more information of creating ServiceLinkerDryrunResource, please refer to the document of ServiceLinkerDryrunResource
            string resourceUri = "subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app";
            string dryrunName = "dryrunName";
            ResourceIdentifier serviceLinkerDryrunResourceId = ServiceLinkerDryrunResource.CreateResourceIdentifier(resourceUri, dryrunName);
            ServiceLinkerDryrunResource serviceLinkerDryrun = client.GetServiceLinkerDryrunResource(serviceLinkerDryrunResourceId);

            // invoke the operation
            ServiceLinkerDryrunResource result = await serviceLinkerDryrun.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DryrunResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteDryrun()
        {
            // Generated from example definition: specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2024-07-01-preview/examples/DeleteDryrun.json
            // this example is just showing the usage of "Linkers_DeleteDryrun" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceLinkerDryrunResource created on azure
            // for more information of creating ServiceLinkerDryrunResource, please refer to the document of ServiceLinkerDryrunResource
            string resourceUri = "subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app";
            string dryrunName = "dryrunName";
            ResourceIdentifier serviceLinkerDryrunResourceId = ServiceLinkerDryrunResource.CreateResourceIdentifier(resourceUri, dryrunName);
            ServiceLinkerDryrunResource serviceLinkerDryrun = client.GetServiceLinkerDryrunResource(serviceLinkerDryrunResourceId);

            // invoke the operation
            await serviceLinkerDryrun.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_PatchDryrun()
        {
            // Generated from example definition: specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2024-07-01-preview/examples/PatchDryrun.json
            // this example is just showing the usage of "Linkers_UpdateDryrun" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceLinkerDryrunResource created on azure
            // for more information of creating ServiceLinkerDryrunResource, please refer to the document of ServiceLinkerDryrunResource
            string resourceUri = "subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app";
            string dryrunName = "dryrunName";
            ResourceIdentifier serviceLinkerDryrunResourceId = ServiceLinkerDryrunResource.CreateResourceIdentifier(resourceUri, dryrunName);
            ServiceLinkerDryrunResource serviceLinkerDryrun = client.GetServiceLinkerDryrunResource(serviceLinkerDryrunResourceId);

            // invoke the operation
            DryrunPatch patch = new DryrunPatch
            {
                Parameters = new ServiceLinkerCreateOrUpdateDryrunParametersContent
                {
                    TargetService = new AzureResourceInfo
                    {
                        Id = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
                    },
                    AuthInfo = new SecretAuthInfo
                    {
                        Name = "name",
                        SecretInfo = new RawValueSecretInfo
                        {
                            Value = "secret",
                        },
                    },
                },
            };
            ArmOperation<ServiceLinkerDryrunResource> lro = await serviceLinkerDryrun.UpdateAsync(WaitUntil.Completed, patch);
            ServiceLinkerDryrunResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DryrunResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
