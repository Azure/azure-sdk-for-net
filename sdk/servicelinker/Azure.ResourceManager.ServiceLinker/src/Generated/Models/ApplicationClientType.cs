// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> The application client type. </summary>
    public readonly partial struct ApplicationClientType : IEquatable<ApplicationClientType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ApplicationClientType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApplicationClientType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "none";
        private const string DotnetValue = "dotnet";
        private const string JavaValue = "java";
        private const string PythonValue = "python";
        private const string GoValue = "go";
        private const string PhpValue = "php";
        private const string RubyValue = "ruby";
        private const string DjangoValue = "django";
        private const string NodejsValue = "nodejs";
        private const string SpringBootValue = "springBoot";

        /// <summary> none. </summary>
        public static ApplicationClientType None { get; } = new ApplicationClientType(NoneValue);
        /// <summary> dotnet. </summary>
        public static ApplicationClientType Dotnet { get; } = new ApplicationClientType(DotnetValue);
        /// <summary> java. </summary>
        public static ApplicationClientType Java { get; } = new ApplicationClientType(JavaValue);
        /// <summary> python. </summary>
        public static ApplicationClientType Python { get; } = new ApplicationClientType(PythonValue);
        /// <summary> go. </summary>
        public static ApplicationClientType Go { get; } = new ApplicationClientType(GoValue);
        /// <summary> php. </summary>
        public static ApplicationClientType Php { get; } = new ApplicationClientType(PhpValue);
        /// <summary> ruby. </summary>
        public static ApplicationClientType Ruby { get; } = new ApplicationClientType(RubyValue);
        /// <summary> django. </summary>
        public static ApplicationClientType Django { get; } = new ApplicationClientType(DjangoValue);
        /// <summary> nodejs. </summary>
        public static ApplicationClientType Nodejs { get; } = new ApplicationClientType(NodejsValue);
        /// <summary> springBoot. </summary>
        public static ApplicationClientType SpringBoot { get; } = new ApplicationClientType(SpringBootValue);
        /// <summary> Determines if two <see cref="ApplicationClientType"/> values are the same. </summary>
        public static bool operator ==(ApplicationClientType left, ApplicationClientType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ApplicationClientType"/> values are not the same. </summary>
        public static bool operator !=(ApplicationClientType left, ApplicationClientType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ApplicationClientType"/>. </summary>
        public static implicit operator ApplicationClientType(string value) => new ApplicationClientType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApplicationClientType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ApplicationClientType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
