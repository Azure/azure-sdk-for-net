// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class LinkerValidateOperationResult : IUtf8JsonSerializable, IJsonModel<LinkerValidateOperationResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<LinkerValidateOperationResult>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<LinkerValidateOperationResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkerValidateOperationResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LinkerValidateOperationResult)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(ResourceId))
            {
                if (ResourceId != null)
                {
                    writer.WritePropertyName("resourceId"u8);
                    writer.WriteStringValue(ResourceId);
                }
                else
                {
                    writer.WriteNull("resourceId");
                }
            }
            if (Optional.IsDefined(Status))
            {
                if (Status != null)
                {
                    writer.WritePropertyName("status"u8);
                    writer.WriteStringValue(Status);
                }
                else
                {
                    writer.WriteNull("status");
                }
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(LinkerName))
            {
                if (LinkerName != null)
                {
                    writer.WritePropertyName("linkerName"u8);
                    writer.WriteStringValue(LinkerName);
                }
                else
                {
                    writer.WriteNull("linkerName");
                }
            }
            if (Optional.IsDefined(IsConnectionAvailable))
            {
                if (IsConnectionAvailable != null)
                {
                    writer.WritePropertyName("isConnectionAvailable"u8);
                    writer.WriteBooleanValue(IsConnectionAvailable.Value);
                }
                else
                {
                    writer.WriteNull("isConnectionAvailable");
                }
            }
            if (Optional.IsDefined(ReportStartOn))
            {
                if (ReportStartOn != null)
                {
                    writer.WritePropertyName("reportStartTimeUtc"u8);
                    writer.WriteStringValue(ReportStartOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("reportStartTimeUtc");
                }
            }
            if (Optional.IsDefined(ReportEndOn))
            {
                if (ReportEndOn != null)
                {
                    writer.WritePropertyName("reportEndTimeUtc"u8);
                    writer.WriteStringValue(ReportEndOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("reportEndTimeUtc");
                }
            }
            if (Optional.IsDefined(SourceId))
            {
                if (SourceId != null)
                {
                    writer.WritePropertyName("sourceId"u8);
                    writer.WriteStringValue(SourceId);
                }
                else
                {
                    writer.WriteNull("sourceId");
                }
            }
            if (Optional.IsDefined(TargetId))
            {
                if (TargetId != null)
                {
                    writer.WritePropertyName("targetId"u8);
                    writer.WriteStringValue(TargetId);
                }
                else
                {
                    writer.WriteNull("targetId");
                }
            }
            if (Optional.IsDefined(AuthType))
            {
                if (AuthType != null)
                {
                    writer.WritePropertyName("authType"u8);
                    writer.WriteStringValue(AuthType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("authType");
                }
            }
            if (Optional.IsCollectionDefined(ValidationDetail))
            {
                if (ValidationDetail != null)
                {
                    writer.WritePropertyName("validationDetail"u8);
                    writer.WriteStartArray();
                    foreach (var item in ValidationDetail)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("validationDetail");
                }
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        LinkerValidateOperationResult IJsonModel<LinkerValidateOperationResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkerValidateOperationResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LinkerValidateOperationResult)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLinkerValidateOperationResult(document.RootElement, options);
        }

        internal static LinkerValidateOperationResult DeserializeLinkerValidateOperationResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ResourceIdentifier> resourceId = default;
            Optional<string> status = default;
            Optional<string> linkerName = default;
            Optional<bool?> isConnectionAvailable = default;
            Optional<DateTimeOffset?> reportStartTimeUtc = default;
            Optional<DateTimeOffset?> reportEndTimeUtc = default;
            Optional<ResourceIdentifier> sourceId = default;
            Optional<ResourceIdentifier> targetId = default;
            Optional<LinkerAuthType?> authType = default;
            Optional<IReadOnlyList<LinkerValidationResultItemInfo>> validationDetail = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resourceId = null;
                        continue;
                    }
                    resourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        status = null;
                        continue;
                    }
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("linkerName"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                linkerName = null;
                                continue;
                            }
                            linkerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isConnectionAvailable"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                isConnectionAvailable = null;
                                continue;
                            }
                            isConnectionAvailable = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("reportStartTimeUtc"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                reportStartTimeUtc = null;
                                continue;
                            }
                            reportStartTimeUtc = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("reportEndTimeUtc"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                reportEndTimeUtc = null;
                                continue;
                            }
                            reportEndTimeUtc = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("sourceId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                sourceId = null;
                                continue;
                            }
                            sourceId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("targetId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                targetId = null;
                                continue;
                            }
                            targetId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("authType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                authType = null;
                                continue;
                            }
                            authType = new LinkerAuthType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("validationDetail"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                validationDetail = null;
                                continue;
                            }
                            List<LinkerValidationResultItemInfo> array = new List<LinkerValidationResultItemInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(LinkerValidationResultItemInfo.DeserializeLinkerValidationResultItemInfo(item));
                            }
                            validationDetail = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new LinkerValidateOperationResult(resourceId.Value, status.Value, linkerName.Value, Optional.ToNullable(isConnectionAvailable), Optional.ToNullable(reportStartTimeUtc), Optional.ToNullable(reportEndTimeUtc), sourceId.Value, targetId.Value, Optional.ToNullable(authType), Optional.ToList(validationDetail), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(ResourceId))
            {
                builder.Append("  resourceId:");
                builder.AppendLine($" '{ResourceId.ToString()}'");
            }

            if (Optional.IsDefined(Status))
            {
                builder.Append("  status:");
                builder.AppendLine($" '{Status}'");
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(LinkerName))
            {
                builder.Append("    linkerName:");
                builder.AppendLine($" '{LinkerName}'");
            }

            if (Optional.IsDefined(IsConnectionAvailable))
            {
                builder.Append("    isConnectionAvailable:");
                var boolValue = IsConnectionAvailable.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(ReportStartOn))
            {
                builder.Append("    reportStartTimeUtc:");
                var formattedDateTimeString = TypeFormatters.ToString(ReportStartOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(ReportEndOn))
            {
                builder.Append("    reportEndTimeUtc:");
                var formattedDateTimeString = TypeFormatters.ToString(ReportEndOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(SourceId))
            {
                builder.Append("    sourceId:");
                builder.AppendLine($" '{SourceId.ToString()}'");
            }

            if (Optional.IsDefined(TargetId))
            {
                builder.Append("    targetId:");
                builder.AppendLine($" '{TargetId.ToString()}'");
            }

            if (Optional.IsDefined(AuthType))
            {
                builder.Append("    authType:");
                builder.AppendLine($" '{AuthType.ToString()}'");
            }

            if (Optional.IsCollectionDefined(ValidationDetail))
            {
                if (ValidationDetail.Any())
                {
                    builder.Append("    validationDetail:");
                    builder.AppendLine(" [");
                    foreach (var item in ValidationDetail)
                    {
                        AppendChildObject(builder, item, options, 6, true);
                    }
                    builder.AppendLine("    ]");
                }
            }

            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<LinkerValidateOperationResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkerValidateOperationResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(LinkerValidateOperationResult)} does not support '{options.Format}' format.");
            }
        }

        LinkerValidateOperationResult IPersistableModel<LinkerValidateOperationResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkerValidateOperationResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeLinkerValidateOperationResult(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(LinkerValidateOperationResult)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<LinkerValidateOperationResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
