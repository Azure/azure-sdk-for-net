// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> Indicates how to apply the authentication configuration operations. </summary>
    public readonly partial struct ConfigurationAuthMode : IEquatable<ConfigurationAuthMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConfigurationAuthMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConfigurationAuthMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OptInAllAuthValue = "optInAllAuth";
        private const string OptOutAllAuthValue = "optOutAllAuth";

        /// <summary> Default authentication configuration according to the authentication type. </summary>
        public static ConfigurationAuthMode OptInAllAuth { get; } = new ConfigurationAuthMode(OptInAllAuthValue);
        /// <summary> Skip all authentication configuration such as enabling managed identity and granting RBAC roles. </summary>
        public static ConfigurationAuthMode OptOutAllAuth { get; } = new ConfigurationAuthMode(OptOutAllAuthValue);
        /// <summary> Determines if two <see cref="ConfigurationAuthMode"/> values are the same. </summary>
        public static bool operator ==(ConfigurationAuthMode left, ConfigurationAuthMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConfigurationAuthMode"/> values are not the same. </summary>
        public static bool operator !=(ConfigurationAuthMode left, ConfigurationAuthMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConfigurationAuthMode"/>. </summary>
        public static implicit operator ConfigurationAuthMode(string value) => new ConfigurationAuthMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConfigurationAuthMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConfigurationAuthMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
