// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class DaprProperties : IUtf8JsonSerializable, IJsonModel<DaprProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DaprProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DaprProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DaprProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DaprProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Version))
            {
                if (Version != null)
                {
                    writer.WritePropertyName("version"u8);
                    writer.WriteStringValue(Version);
                }
                else
                {
                    writer.WriteNull("version");
                }
            }
            if (Optional.IsDefined(ComponentType))
            {
                if (ComponentType != null)
                {
                    writer.WritePropertyName("componentType"u8);
                    writer.WriteStringValue(ComponentType);
                }
                else
                {
                    writer.WriteNull("componentType");
                }
            }
            if (Optional.IsDefined(SecretStoreComponent))
            {
                if (SecretStoreComponent != null)
                {
                    writer.WritePropertyName("secretStoreComponent"u8);
                    writer.WriteStringValue(SecretStoreComponent);
                }
                else
                {
                    writer.WriteNull("secretStoreComponent");
                }
            }
            if (Optional.IsCollectionDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteStartArray();
                foreach (var item in Metadata)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Scopes))
            {
                writer.WritePropertyName("scopes"u8);
                writer.WriteStartArray();
                foreach (var item in Scopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(RuntimeVersion))
            {
                if (RuntimeVersion != null)
                {
                    writer.WritePropertyName("runtimeVersion"u8);
                    writer.WriteStringValue(RuntimeVersion);
                }
                else
                {
                    writer.WriteNull("runtimeVersion");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(BindingComponentDirection))
            {
                if (BindingComponentDirection != null)
                {
                    writer.WritePropertyName("bindingComponentDirection"u8);
                    writer.WriteStringValue(BindingComponentDirection.Value.ToString());
                }
                else
                {
                    writer.WriteNull("bindingComponentDirection");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        DaprProperties IJsonModel<DaprProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DaprProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DaprProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDaprProperties(document.RootElement, options);
        }

        internal static DaprProperties DeserializeDaprProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string version = default;
            string componentType = default;
            string secretStoreComponent = default;
            IList<DaprMetadata> metadata = default;
            IList<string> scopes = default;
            string runtimeVersion = default;
            DaprBindingComponentDirection? bindingComponentDirection = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("version"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        version = null;
                        continue;
                    }
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("componentType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        componentType = null;
                        continue;
                    }
                    componentType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("secretStoreComponent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        secretStoreComponent = null;
                        continue;
                    }
                    secretStoreComponent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DaprMetadata> array = new List<DaprMetadata>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DaprMetadata.DeserializeDaprMetadata(item, options));
                    }
                    metadata = array;
                    continue;
                }
                if (property.NameEquals("scopes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    scopes = array;
                    continue;
                }
                if (property.NameEquals("runtimeVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        runtimeVersion = null;
                        continue;
                    }
                    runtimeVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bindingComponentDirection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        bindingComponentDirection = null;
                        continue;
                    }
                    bindingComponentDirection = new DaprBindingComponentDirection(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DaprProperties(
                version,
                componentType,
                secretStoreComponent,
                metadata ?? new ChangeTrackingList<DaprMetadata>(),
                scopes ?? new ChangeTrackingList<string>(),
                runtimeVersion,
                bindingComponentDirection,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DaprProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DaprProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerServiceLinkerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DaprProperties)} does not support writing '{options.Format}' format.");
            }
        }

        DaprProperties IPersistableModel<DaprProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DaprProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDaprProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DaprProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DaprProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
