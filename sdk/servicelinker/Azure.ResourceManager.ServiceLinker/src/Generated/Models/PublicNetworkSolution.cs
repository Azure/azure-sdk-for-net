// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> Indicates public network solution, include firewall rules. </summary>
    public partial class PublicNetworkSolution
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PublicNetworkSolution"/>. </summary>
        public PublicNetworkSolution()
        {
        }

        /// <summary> Initializes a new instance of <see cref="PublicNetworkSolution"/>. </summary>
        /// <param name="deleteOrUpdateBehavior"> Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting. </param>
        /// <param name="action"> Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration. </param>
        /// <param name="firewallRules"> Describe firewall rules of target service to make sure source application could connect to the target. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PublicNetworkSolution(DeleteOrUpdateBehavior? deleteOrUpdateBehavior, ActionType? action, FirewallRules firewallRules, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DeleteOrUpdateBehavior = deleteOrUpdateBehavior;
            Action = action;
            FirewallRules = firewallRules;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting. </summary>
        public DeleteOrUpdateBehavior? DeleteOrUpdateBehavior { get; set; }
        /// <summary> Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration. </summary>
        public ActionType? Action { get; set; }
        /// <summary> Describe firewall rules of target service to make sure source application could connect to the target. </summary>
        public FirewallRules FirewallRules { get; set; }
    }
}
