// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> Whether to allow firewall rules. </summary>
    public readonly partial struct AllowType : IEquatable<AllowType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AllowType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AllowType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TrueValue = "true";
        private const string FalseValue = "false";

        /// <summary> true. </summary>
        public static AllowType True { get; } = new AllowType(TrueValue);
        /// <summary> false. </summary>
        public static AllowType False { get; } = new AllowType(FalseValue);
        /// <summary> Determines if two <see cref="AllowType"/> values are the same. </summary>
        public static bool operator ==(AllowType left, AllowType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AllowType"/> values are not the same. </summary>
        public static bool operator !=(AllowType left, AllowType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AllowType"/>. </summary>
        public static implicit operator AllowType(string value) => new AllowType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AllowType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AllowType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
