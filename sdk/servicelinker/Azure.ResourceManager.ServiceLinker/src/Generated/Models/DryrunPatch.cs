// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> a dryrun job to be updated. </summary>
    public partial class DryrunPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DryrunPatch"/>. </summary>
        public DryrunPatch()
        {
            PrerequisiteResults = new ChangeTrackingList<DryrunPrerequisiteResult>();
            OperationPreviews = new ChangeTrackingList<DryrunOperationPreview>();
        }

        /// <summary> Initializes a new instance of <see cref="DryrunPatch"/>. </summary>
        /// <param name="parameters">
        /// The parameters of the dryrun
        /// Please note <see cref="ServiceLinkerDryrunParametersContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ServiceLinkerCreateOrUpdateDryrunParametersContent"/>.
        /// </param>
        /// <param name="prerequisiteResults">
        /// the result of the dryrun
        /// Please note <see cref="DryrunPrerequisiteResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BasicErrorDryrunPrerequisiteResult"/> and <see cref="PermissionsMissingDryrunPrerequisiteResult"/>.
        /// </param>
        /// <param name="operationPreviews"> the preview of the operations for creation. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DryrunPatch(ServiceLinkerDryrunParametersContent parameters, IReadOnlyList<DryrunPrerequisiteResult> prerequisiteResults, IReadOnlyList<DryrunOperationPreview> operationPreviews, string provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Parameters = parameters;
            PrerequisiteResults = prerequisiteResults;
            OperationPreviews = operationPreviews;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The parameters of the dryrun
        /// Please note <see cref="ServiceLinkerDryrunParametersContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ServiceLinkerCreateOrUpdateDryrunParametersContent"/>.
        /// </summary>
        public ServiceLinkerDryrunParametersContent Parameters { get; set; }
        /// <summary>
        /// the result of the dryrun
        /// Please note <see cref="DryrunPrerequisiteResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BasicErrorDryrunPrerequisiteResult"/> and <see cref="PermissionsMissingDryrunPrerequisiteResult"/>.
        /// </summary>
        public IReadOnlyList<DryrunPrerequisiteResult> PrerequisiteResults { get; }
        /// <summary> the preview of the operations for creation. </summary>
        public IReadOnlyList<DryrunOperationPreview> OperationPreviews { get; }
        /// <summary> The provisioning state. </summary>
        public string ProvisioningState { get; }
    }
}
