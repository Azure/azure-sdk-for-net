// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class ServicePrincipalCertificateAuthInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("clientId");
            writer.WriteStringValue(ClientId);
            writer.WritePropertyName("principalId");
            writer.WriteStringValue(PrincipalId);
            writer.WritePropertyName("certificate");
            writer.WriteStringValue(Certificate);
            writer.WritePropertyName("authType");
            writer.WriteStringValue(AuthType.ToString());
            writer.WriteEndObject();
        }

        internal static ServicePrincipalCertificateAuthInfo DeserializeServicePrincipalCertificateAuthInfo(JsonElement element)
        {
            string clientId = default;
            string principalId = default;
            string certificate = default;
            AuthType authType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clientId"))
                {
                    clientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("principalId"))
                {
                    principalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificate"))
                {
                    certificate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authType"))
                {
                    authType = new AuthType(property.Value.GetString());
                    continue;
                }
            }
            return new ServicePrincipalCertificateAuthInfo(authType, clientId, principalId, certificate);
        }
    }
}
