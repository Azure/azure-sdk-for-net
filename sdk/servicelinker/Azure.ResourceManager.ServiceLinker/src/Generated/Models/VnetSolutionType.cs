// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> Type of VNet solution. </summary>
    public readonly partial struct VNetSolutionType : IEquatable<VNetSolutionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VNetSolutionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VNetSolutionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ServiceEndpointValue = "serviceEndpoint";
        private const string PrivateLinkValue = "privateLink";

        /// <summary> serviceEndpoint. </summary>
        public static VNetSolutionType ServiceEndpoint { get; } = new VNetSolutionType(ServiceEndpointValue);
        /// <summary> privateLink. </summary>
        public static VNetSolutionType PrivateLink { get; } = new VNetSolutionType(PrivateLinkValue);
        /// <summary> Determines if two <see cref="VNetSolutionType"/> values are the same. </summary>
        public static bool operator ==(VNetSolutionType left, VNetSolutionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VNetSolutionType"/> values are not the same. </summary>
        public static bool operator !=(VNetSolutionType left, VNetSolutionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VNetSolutionType"/>. </summary>
        public static implicit operator VNetSolutionType(string value) => new VNetSolutionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VNetSolutionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VNetSolutionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
