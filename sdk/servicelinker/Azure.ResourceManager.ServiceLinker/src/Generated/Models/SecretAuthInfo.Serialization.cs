// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class SecretAuthInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                if (Name != null)
                {
                    writer.WritePropertyName("name"u8);
                    writer.WriteStringValue(Name);
                }
                else
                {
                    writer.WriteNull("name");
                }
            }
            if (Optional.IsDefined(SecretInfo))
            {
                if (SecretInfo != null)
                {
                    writer.WritePropertyName("secretInfo"u8);
                    writer.WriteObjectValue(SecretInfo);
                }
                else
                {
                    writer.WriteNull("secretInfo");
                }
            }
            writer.WritePropertyName("authType"u8);
            writer.WriteStringValue(AuthType.ToString());
            writer.WriteEndObject();
        }

        internal static SecretAuthInfo DeserializeSecretAuthInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<SecretBaseInfo> secretInfo = default;
            LinkerAuthType authType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        name = null;
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("secretInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        secretInfo = null;
                        continue;
                    }
                    secretInfo = SecretBaseInfo.DeserializeSecretBaseInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("authType"u8))
                {
                    authType = new LinkerAuthType(property.Value.GetString());
                    continue;
                }
            }
            return new SecretAuthInfo(authType, name.Value, secretInfo.Value);
        }
    }
}
