// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> Type of configuration to determine whether the configuration can be modified after creation. KeyvaultSecret means the configuration references a key vault secret, such as App Service/ACA key vault reference. Default means the configuration is real value, such as user name, raw secret, etc. </summary>
    public readonly partial struct LinkerConfigurationType : IEquatable<LinkerConfigurationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LinkerConfigurationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LinkerConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string KeyVaultSecretValue = "KeyVaultSecret";

        /// <summary> Default. </summary>
        public static LinkerConfigurationType Default { get; } = new LinkerConfigurationType(DefaultValue);
        /// <summary> KeyVaultSecret. </summary>
        public static LinkerConfigurationType KeyVaultSecret { get; } = new LinkerConfigurationType(KeyVaultSecretValue);
        /// <summary> Determines if two <see cref="LinkerConfigurationType"/> values are the same. </summary>
        public static bool operator ==(LinkerConfigurationType left, LinkerConfigurationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LinkerConfigurationType"/> values are not the same. </summary>
        public static bool operator !=(LinkerConfigurationType left, LinkerConfigurationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LinkerConfigurationType"/>. </summary>
        public static implicit operator LinkerConfigurationType(string value) => new LinkerConfigurationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LinkerConfigurationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LinkerConfigurationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
