// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> The dapr component metadata. </summary>
    public partial class DaprMetadata
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DaprMetadata"/>. </summary>
        public DaprMetadata()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DaprMetadata"/>. </summary>
        /// <param name="name"> Metadata property name. </param>
        /// <param name="value"> Metadata property value. </param>
        /// <param name="secretRef"> The secret name where dapr could get value. </param>
        /// <param name="description"> The description of the metadata, returned from configuration api. </param>
        /// <param name="required"> The value indicating whether the metadata is required or not. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DaprMetadata(string name, string value, string secretRef, string description, DaprMetadataRequired? required, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Value = value;
            SecretRef = secretRef;
            Description = description;
            Required = required;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Metadata property name. </summary>
        public string Name { get; set; }
        /// <summary> Metadata property value. </summary>
        public string Value { get; set; }
        /// <summary> The secret name where dapr could get value. </summary>
        public string SecretRef { get; set; }
        /// <summary> The description of the metadata, returned from configuration api. </summary>
        public string Description { get; set; }
        /// <summary> The value indicating whether the metadata is required or not. </summary>
        public DaprMetadataRequired? Required { get; set; }
    }
}
