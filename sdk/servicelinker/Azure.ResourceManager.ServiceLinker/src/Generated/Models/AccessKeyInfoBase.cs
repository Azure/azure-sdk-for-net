// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> The access key directly from target resource properties, which target service is Azure Resource, such as Microsoft.Storage. </summary>
    public partial class AccessKeyInfoBase : AuthBaseInfo
    {
        /// <summary> Initializes a new instance of <see cref="AccessKeyInfoBase"/>. </summary>
        public AccessKeyInfoBase()
        {
            Permissions = new ChangeTrackingList<AccessKeyPermission>();
            AuthType = LinkerAuthType.AccessKey;
        }

        /// <summary> Initializes a new instance of <see cref="AccessKeyInfoBase"/>. </summary>
        /// <param name="authType"> The authentication type. </param>
        /// <param name="authMode"> Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="permissions"> Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus. </param>
        internal AccessKeyInfoBase(LinkerAuthType authType, AuthMode? authMode, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<AccessKeyPermission> permissions) : base(authType, authMode, serializedAdditionalRawData)
        {
            Permissions = permissions;
            AuthType = authType;
        }

        /// <summary> Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus. </summary>
        public IList<AccessKeyPermission> Permissions { get; }
    }
}
