// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class ConfigurationNameItem : IUtf8JsonSerializable, IJsonModel<ConfigurationNameItem>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConfigurationNameItem>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ConfigurationNameItem>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigurationNameItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigurationNameItem)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(TargetService))
            {
                if (TargetService != null)
                {
                    writer.WritePropertyName("targetService"u8);
                    writer.WriteStringValue(TargetService);
                }
                else
                {
                    writer.WriteNull("targetService");
                }
            }
            if (Optional.IsDefined(ClientType))
            {
                if (ClientType != null)
                {
                    writer.WritePropertyName("clientType"u8);
                    writer.WriteStringValue(ClientType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("clientType");
                }
            }
            if (Optional.IsDefined(AuthType))
            {
                if (AuthType != null)
                {
                    writer.WritePropertyName("authType"u8);
                    writer.WriteStringValue(AuthType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("authType");
                }
            }
            if (Optional.IsDefined(SecretType))
            {
                if (SecretType != null)
                {
                    writer.WritePropertyName("secretType"u8);
                    writer.WriteStringValue(SecretType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("secretType");
                }
            }
            if (Optional.IsDefined(DaprProperties))
            {
                if (DaprProperties != null)
                {
                    writer.WritePropertyName("daprProperties"u8);
                    writer.WriteObjectValue(DaprProperties, options);
                }
                else
                {
                    writer.WriteNull("daprProperties");
                }
            }
            if (Optional.IsCollectionDefined(Names))
            {
                if (Names != null)
                {
                    writer.WritePropertyName("names"u8);
                    writer.WriteStartArray();
                    foreach (var item in Names)
                    {
                        writer.WriteObjectValue(item, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("names");
                }
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ConfigurationNameItem IJsonModel<ConfigurationNameItem>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigurationNameItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigurationNameItem)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConfigurationNameItem(document.RootElement, options);
        }

        internal static ConfigurationNameItem DeserializeConfigurationNameItem(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string targetService = default;
            LinkerClientType? clientType = default;
            LinkerAuthType? authType = default;
            SecretSourceType? secretType = default;
            DaprProperties daprProperties = default;
            IReadOnlyList<LinkerConfigurationName> names = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("targetService"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                targetService = null;
                                continue;
                            }
                            targetService = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                clientType = null;
                                continue;
                            }
                            clientType = new LinkerClientType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("authType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                authType = null;
                                continue;
                            }
                            authType = new LinkerAuthType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("secretType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                secretType = null;
                                continue;
                            }
                            secretType = new SecretSourceType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("daprProperties"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                daprProperties = null;
                                continue;
                            }
                            daprProperties = DaprProperties.DeserializeDaprProperties(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("names"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                names = null;
                                continue;
                            }
                            List<LinkerConfigurationName> array = new List<LinkerConfigurationName>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(LinkerConfigurationName.DeserializeLinkerConfigurationName(item, options));
                            }
                            names = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ConfigurationNameItem(
                targetService,
                clientType,
                authType,
                secretType,
                daprProperties,
                names ?? new ChangeTrackingList<LinkerConfigurationName>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConfigurationNameItem>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigurationNameItem>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerServiceLinkerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ConfigurationNameItem)} does not support writing '{options.Format}' format.");
            }
        }

        ConfigurationNameItem IPersistableModel<ConfigurationNameItem>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigurationNameItem>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeConfigurationNameItem(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ConfigurationNameItem)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConfigurationNameItem>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
