// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class LinkerConfigurationInfo : IUtf8JsonSerializable, IJsonModel<LinkerConfigurationInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<LinkerConfigurationInfo>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<LinkerConfigurationInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkerConfigurationInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LinkerConfigurationInfo)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(DeleteOrUpdateBehavior))
            {
                writer.WritePropertyName("deleteOrUpdateBehavior"u8);
                writer.WriteStringValue(DeleteOrUpdateBehavior.Value.ToString());
            }
            if (Optional.IsDefined(Action))
            {
                writer.WritePropertyName("action"u8);
                writer.WriteStringValue(Action.Value.ToString());
            }
            if (Optional.IsCollectionDefined(CustomizedKeys))
            {
                writer.WritePropertyName("customizedKeys"u8);
                writer.WriteStartObject();
                foreach (var item in CustomizedKeys)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(DaprProperties))
            {
                writer.WritePropertyName("daprProperties"u8);
                writer.WriteObjectValue(DaprProperties, options);
            }
            if (Optional.IsCollectionDefined(AdditionalConfigurations))
            {
                writer.WritePropertyName("additionalConfigurations"u8);
                writer.WriteStartObject();
                foreach (var item in AdditionalConfigurations)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(AdditionalConnectionStringProperties))
            {
                writer.WritePropertyName("additionalConnectionStringProperties"u8);
                writer.WriteStartObject();
                foreach (var item in AdditionalConnectionStringProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(ConfigurationStore))
            {
                if (ConfigurationStore != null)
                {
                    writer.WritePropertyName("configurationStore"u8);
                    writer.WriteObjectValue(ConfigurationStore, options);
                }
                else
                {
                    writer.WriteNull("configurationStore");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        LinkerConfigurationInfo IJsonModel<LinkerConfigurationInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkerConfigurationInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LinkerConfigurationInfo)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLinkerConfigurationInfo(document.RootElement, options);
        }

        internal static LinkerConfigurationInfo DeserializeLinkerConfigurationInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DeleteOrUpdateBehavior? deleteOrUpdateBehavior = default;
            ConfigurationActionType? action = default;
            IDictionary<string, string> customizedKeys = default;
            DaprProperties daprProperties = default;
            IDictionary<string, string> additionalConfigurations = default;
            IDictionary<string, string> additionalConnectionStringProperties = default;
            ConfigurationStore configurationStore = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deleteOrUpdateBehavior"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deleteOrUpdateBehavior = new DeleteOrUpdateBehavior(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("action"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    action = new ConfigurationActionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customizedKeys"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    customizedKeys = dictionary;
                    continue;
                }
                if (property.NameEquals("daprProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    daprProperties = DaprProperties.DeserializeDaprProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("additionalConfigurations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    additionalConfigurations = dictionary;
                    continue;
                }
                if (property.NameEquals("additionalConnectionStringProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    additionalConnectionStringProperties = dictionary;
                    continue;
                }
                if (property.NameEquals("configurationStore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        configurationStore = null;
                        continue;
                    }
                    configurationStore = ConfigurationStore.DeserializeConfigurationStore(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new LinkerConfigurationInfo(
                deleteOrUpdateBehavior,
                action,
                customizedKeys ?? new ChangeTrackingDictionary<string, string>(),
                daprProperties,
                additionalConfigurations ?? new ChangeTrackingDictionary<string, string>(),
                additionalConnectionStringProperties ?? new ChangeTrackingDictionary<string, string>(),
                configurationStore,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<LinkerConfigurationInfo>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkerConfigurationInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerServiceLinkerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(LinkerConfigurationInfo)} does not support writing '{options.Format}' format.");
            }
        }

        LinkerConfigurationInfo IPersistableModel<LinkerConfigurationInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LinkerConfigurationInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeLinkerConfigurationInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(LinkerConfigurationInfo)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<LinkerConfigurationInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
