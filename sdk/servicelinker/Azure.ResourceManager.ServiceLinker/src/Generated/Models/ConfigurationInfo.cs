// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> The configuration information, used to generate configurations or save to applications. </summary>
    public partial class ConfigurationInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConfigurationInfo"/>. </summary>
        public ConfigurationInfo()
        {
            CustomizedKeys = new ChangeTrackingDictionary<string, string>();
            AdditionalConfigurations = new ChangeTrackingDictionary<string, string>();
            AdditionalConnectionStringProperties = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="ConfigurationInfo"/>. </summary>
        /// <param name="deleteOrUpdateBehavior"> Indicates whether to clean up previous operation when Linker is updating or deleting. </param>
        /// <param name="action"> Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source. </param>
        /// <param name="customizedKeys"> Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations. </param>
        /// <param name="daprProperties"> Indicates some additional properties for dapr client type. </param>
        /// <param name="additionalConfigurations"> A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations. </param>
        /// <param name="additionalConnectionStringProperties"> A dictionary of additional properties to be added in the end of connection string. </param>
        /// <param name="configurationStore"> An option to store configuration into different place. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConfigurationInfo(DeleteOrUpdateBehavior? deleteOrUpdateBehavior, ActionType? action, IDictionary<string, string> customizedKeys, DaprProperties daprProperties, IDictionary<string, string> additionalConfigurations, IDictionary<string, string> additionalConnectionStringProperties, ConfigurationStore configurationStore, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DeleteOrUpdateBehavior = deleteOrUpdateBehavior;
            Action = action;
            CustomizedKeys = customizedKeys;
            DaprProperties = daprProperties;
            AdditionalConfigurations = additionalConfigurations;
            AdditionalConnectionStringProperties = additionalConnectionStringProperties;
            ConfigurationStore = configurationStore;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Indicates whether to clean up previous operation when Linker is updating or deleting. </summary>
        public DeleteOrUpdateBehavior? DeleteOrUpdateBehavior { get; set; }
        /// <summary> Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source. </summary>
        public ActionType? Action { get; set; }
        /// <summary> Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations. </summary>
        public IDictionary<string, string> CustomizedKeys { get; }
        /// <summary> Indicates some additional properties for dapr client type. </summary>
        public DaprProperties DaprProperties { get; set; }
        /// <summary> A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations. </summary>
        public IDictionary<string, string> AdditionalConfigurations { get; }
        /// <summary> A dictionary of additional properties to be added in the end of connection string. </summary>
        public IDictionary<string, string> AdditionalConnectionStringProperties { get; }
        /// <summary> An option to store configuration into different place. </summary>
        internal ConfigurationStore ConfigurationStore { get; set; }
        /// <summary> The app configuration id to store configuration. </summary>
        public string AppConfigurationId
        {
            get => ConfigurationStore is null ? default : ConfigurationStore.AppConfigurationId;
            set
            {
                if (ConfigurationStore is null)
                    ConfigurationStore = new ConfigurationStore();
                ConfigurationStore.AppConfigurationId = value;
            }
        }
    }
}
