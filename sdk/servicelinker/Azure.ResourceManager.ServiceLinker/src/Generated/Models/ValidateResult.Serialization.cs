// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class ValidateResult
    {
        internal static ValidateResult DeserializeValidateResult(JsonElement element)
        {
            Optional<string> linkerName = default;
            Optional<bool> isConnectionAvailable = default;
            Optional<DateTimeOffset> reportStartTimeUtc = default;
            Optional<DateTimeOffset> reportEndTimeUtc = default;
            Optional<string> sourceId = default;
            Optional<string> targetId = default;
            Optional<AuthType> authType = default;
            Optional<IReadOnlyList<ValidationResultItem>> validationDetail = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("linkerName"))
                {
                    linkerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isConnectionAvailable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isConnectionAvailable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("reportStartTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    reportStartTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("reportEndTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    reportEndTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("sourceId"))
                {
                    sourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetId"))
                {
                    targetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authType = new AuthType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("validationDetail"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ValidationResultItem> array = new List<ValidationResultItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ValidationResultItem.DeserializeValidationResultItem(item));
                    }
                    validationDetail = array;
                    continue;
                }
            }
            return new ValidateResult(linkerName.Value, Optional.ToNullable(isConnectionAvailable), Optional.ToNullable(reportStartTimeUtc), Optional.ToNullable(reportEndTimeUtc), sourceId.Value, targetId.Value, Optional.ToNullable(authType), Optional.ToList(validationDetail));
        }
    }
}
