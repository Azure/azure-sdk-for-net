// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class ServiceLinkerCreateOrUpdateDryrunParametersContent : IUtf8JsonSerializable, IJsonModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ServiceLinkerCreateOrUpdateDryrunParametersContent)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(TargetService))
            {
                writer.WritePropertyName("targetService"u8);
                writer.WriteObjectValue(TargetService, options);
            }
            if (Optional.IsDefined(AuthInfo))
            {
                writer.WritePropertyName("authInfo"u8);
                writer.WriteObjectValue(AuthInfo, options);
            }
            if (Optional.IsDefined(ClientType))
            {
                writer.WritePropertyName("clientType"u8);
                writer.WriteStringValue(ClientType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState);
            }
            if (Optional.IsDefined(VnetSolution))
            {
                if (VnetSolution != null)
                {
                    writer.WritePropertyName("vNetSolution"u8);
                    writer.WriteObjectValue(VnetSolution, options);
                }
                else
                {
                    writer.WriteNull("vNetSolution");
                }
            }
            if (Optional.IsDefined(SecretStore))
            {
                if (SecretStore != null)
                {
                    writer.WritePropertyName("secretStore"u8);
                    writer.WriteObjectValue(SecretStore, options);
                }
                else
                {
                    writer.WriteNull("secretStore");
                }
            }
            if (Optional.IsDefined(Scope))
            {
                if (Scope != null)
                {
                    writer.WritePropertyName("scope"u8);
                    writer.WriteStringValue(Scope);
                }
                else
                {
                    writer.WriteNull("scope");
                }
            }
            if (Optional.IsDefined(PublicNetworkSolution))
            {
                if (PublicNetworkSolution != null)
                {
                    writer.WritePropertyName("publicNetworkSolution"u8);
                    writer.WriteObjectValue(PublicNetworkSolution, options);
                }
                else
                {
                    writer.WriteNull("publicNetworkSolution");
                }
            }
            if (Optional.IsDefined(ConfigurationInfo))
            {
                if (ConfigurationInfo != null)
                {
                    writer.WritePropertyName("configurationInfo"u8);
                    writer.WriteObjectValue(ConfigurationInfo, options);
                }
                else
                {
                    writer.WriteNull("configurationInfo");
                }
            }
        }

        ServiceLinkerCreateOrUpdateDryrunParametersContent IJsonModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ServiceLinkerCreateOrUpdateDryrunParametersContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeServiceLinkerCreateOrUpdateDryrunParametersContent(document.RootElement, options);
        }

        internal static ServiceLinkerCreateOrUpdateDryrunParametersContent DeserializeServiceLinkerCreateOrUpdateDryrunParametersContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TargetServiceBaseInfo targetService = default;
            AuthBaseInfo authInfo = default;
            LinkerClientType? clientType = default;
            string provisioningState = default;
            VnetSolution vnetSolution = default;
            LinkerSecretStore secretStore = default;
            string scope = default;
            PublicNetworkSolution publicNetworkSolution = default;
            LinkerConfigurationInfo configurationInfo = default;
            DryrunActionName actionName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetService"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetService = TargetServiceBaseInfo.DeserializeTargetServiceBaseInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("authInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authInfo = AuthBaseInfo.DeserializeAuthBaseInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("clientType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clientType = new LinkerClientType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vNetSolution"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vnetSolution = null;
                        continue;
                    }
                    vnetSolution = VnetSolution.DeserializeVnetSolution(property.Value, options);
                    continue;
                }
                if (property.NameEquals("secretStore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        secretStore = null;
                        continue;
                    }
                    secretStore = LinkerSecretStore.DeserializeLinkerSecretStore(property.Value, options);
                    continue;
                }
                if (property.NameEquals("scope"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scope = null;
                        continue;
                    }
                    scope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publicNetworkSolution"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        publicNetworkSolution = null;
                        continue;
                    }
                    publicNetworkSolution = PublicNetworkSolution.DeserializePublicNetworkSolution(property.Value, options);
                    continue;
                }
                if (property.NameEquals("configurationInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        configurationInfo = null;
                        continue;
                    }
                    configurationInfo = LinkerConfigurationInfo.DeserializeLinkerConfigurationInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("actionName"u8))
                {
                    actionName = new DryrunActionName(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ServiceLinkerCreateOrUpdateDryrunParametersContent(
                actionName,
                serializedAdditionalRawData,
                targetService,
                authInfo,
                clientType,
                provisioningState,
                vnetSolution,
                secretStore,
                scope,
                publicNetworkSolution,
                configurationInfo);
        }

        BinaryData IPersistableModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerServiceLinkerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ServiceLinkerCreateOrUpdateDryrunParametersContent)} does not support writing '{options.Format}' format.");
            }
        }

        ServiceLinkerCreateOrUpdateDryrunParametersContent IPersistableModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeServiceLinkerCreateOrUpdateDryrunParametersContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ServiceLinkerCreateOrUpdateDryrunParametersContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ServiceLinkerCreateOrUpdateDryrunParametersContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
