// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> The authentication info when authType is servicePrincipal secret. </summary>
    public partial class ServicePrincipalSecretAuthInfo : AuthBaseInfo
    {
        /// <summary> Initializes a new instance of <see cref="ServicePrincipalSecretAuthInfo"/>. </summary>
        /// <param name="clientId"> ServicePrincipal application clientId for servicePrincipal auth. </param>
        /// <param name="principalId"> Principal Id for servicePrincipal auth. </param>
        /// <param name="secret"> Secret for servicePrincipal auth. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientId"/> or <paramref name="secret"/> is null. </exception>
        public ServicePrincipalSecretAuthInfo(string clientId, Guid principalId, string secret)
        {
            Argument.AssertNotNull(clientId, nameof(clientId));
            Argument.AssertNotNull(secret, nameof(secret));

            ClientId = clientId;
            PrincipalId = principalId;
            Secret = secret;
            Roles = new ChangeTrackingList<string>();
            AuthType = LinkerAuthType.ServicePrincipalSecret;
        }

        /// <summary> Initializes a new instance of <see cref="ServicePrincipalSecretAuthInfo"/>. </summary>
        /// <param name="authType"> The authentication type. </param>
        /// <param name="authMode"> Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="userName"> Username created in the database which is mapped to a user in AAD. </param>
        /// <param name="clientId"> ServicePrincipal application clientId for servicePrincipal auth. </param>
        /// <param name="principalId"> Principal Id for servicePrincipal auth. </param>
        /// <param name="secret"> Secret for servicePrincipal auth. </param>
        /// <param name="deleteOrUpdateBehavior"> Indicates whether to clean up previous operation when Linker is updating or deleting. </param>
        /// <param name="roles"> Optional, this value specifies the Azure roles to be assigned. Automatically. </param>
        internal ServicePrincipalSecretAuthInfo(LinkerAuthType authType, ConfigurationAuthMode? authMode, IDictionary<string, BinaryData> serializedAdditionalRawData, string userName, string clientId, Guid principalId, string secret, DeleteOrUpdateBehavior? deleteOrUpdateBehavior, IList<string> roles) : base(authType, authMode, serializedAdditionalRawData)
        {
            UserName = userName;
            ClientId = clientId;
            PrincipalId = principalId;
            Secret = secret;
            DeleteOrUpdateBehavior = deleteOrUpdateBehavior;
            Roles = roles;
            AuthType = authType;
        }

        /// <summary> Initializes a new instance of <see cref="ServicePrincipalSecretAuthInfo"/> for deserialization. </summary>
        internal ServicePrincipalSecretAuthInfo()
        {
        }

        /// <summary> Username created in the database which is mapped to a user in AAD. </summary>
        public string UserName { get; set; }
        /// <summary> ServicePrincipal application clientId for servicePrincipal auth. </summary>
        public string ClientId { get; set; }
        /// <summary> Principal Id for servicePrincipal auth. </summary>
        public Guid PrincipalId { get; set; }
        /// <summary> Secret for servicePrincipal auth. </summary>
        public string Secret { get; set; }
        /// <summary> Indicates whether to clean up previous operation when Linker is updating or deleting. </summary>
        public DeleteOrUpdateBehavior? DeleteOrUpdateBehavior { get; set; }
        /// <summary> Optional, this value specifies the Azure roles to be assigned. Automatically. </summary>
        public IList<string> Roles { get; }
    }
}
