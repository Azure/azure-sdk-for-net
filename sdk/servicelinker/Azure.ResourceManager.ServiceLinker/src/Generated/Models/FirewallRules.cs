// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> Target service's firewall rules. to allow connections from source service. </summary>
    public partial class FirewallRules
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FirewallRules"/>. </summary>
        public FirewallRules()
        {
            IPRanges = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="FirewallRules"/>. </summary>
        /// <param name="ipRanges"> This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. </param>
        /// <param name="azureServices"> Allow Azure services to access the target service if true. </param>
        /// <param name="callerClientIP"> Allow caller client IP to access the target service if true. the property is used when connecting local application to target service. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FirewallRules(IList<string> ipRanges, AllowType? azureServices, AllowType? callerClientIP, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IPRanges = ipRanges;
            AzureServices = azureServices;
            CallerClientIP = callerClientIP;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. </summary>
        public IList<string> IPRanges { get; }
        /// <summary> Allow Azure services to access the target service if true. </summary>
        public AllowType? AzureServices { get; set; }
        /// <summary> Allow caller client IP to access the target service if true. the property is used when connecting local application to target service. </summary>
        public AllowType? CallerClientIP { get; set; }
    }
}
