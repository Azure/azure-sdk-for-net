// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> A linker to be updated. </summary>
    public partial class LinkerResourcePatch
    {
        /// <summary> Initializes a new instance of LinkerResourcePatch. </summary>
        public LinkerResourcePatch()
        {
        }

        /// <summary>
        /// The target service properties
        /// Please note <see cref="TargetServiceBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResourceInfo"/>, <see cref="ConfluentBootstrapServerInfo"/> and <see cref="ConfluentSchemaRegistryInfo"/>.
        /// </summary>
        public TargetServiceBaseInfo TargetService { get; set; }
        /// <summary>
        /// The authentication type.
        /// Please note <see cref="AuthBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecretAuthInfo"/>, <see cref="ServicePrincipalCertificateAuthInfo"/>, <see cref="ServicePrincipalSecretAuthInfo"/>, <see cref="SystemAssignedIdentityAuthInfo"/> and <see cref="UserAssignedIdentityAuthInfo"/>.
        /// </summary>
        public AuthBaseInfo AuthInfo { get; set; }
        /// <summary> The application client type. </summary>
        public LinkerClientType? ClientType { get; set; }
        /// <summary> The provisioning state. </summary>
        public string ProvisioningState { get; }
        /// <summary> The VNet solution. </summary>
        internal VNetSolution VNetSolution { get; set; }
        /// <summary> Type of VNet solution. </summary>
        public VNetSolutionType? SolutionType
        {
            get => VNetSolution is null ? default : VNetSolution.SolutionType;
            set
            {
                if (VNetSolution is null)
                    VNetSolution = new VNetSolution();
                VNetSolution.SolutionType = value;
            }
        }

        /// <summary> An option to store secret value in secure place. </summary>
        internal LinkerSecretStore SecretStore { get; set; }
        /// <summary> The key vault id to store secret. </summary>
        public ResourceIdentifier SecretStoreKeyVaultId
        {
            get => SecretStore is null ? default : SecretStore.KeyVaultId;
            set
            {
                if (SecretStore is null)
                    SecretStore = new LinkerSecretStore();
                SecretStore.KeyVaultId = value;
            }
        }

        /// <summary> connection scope in source service. </summary>
        public string Scope { get; set; }
    }
}
