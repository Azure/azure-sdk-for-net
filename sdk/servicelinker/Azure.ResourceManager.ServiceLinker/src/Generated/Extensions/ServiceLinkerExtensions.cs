// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ServiceLinker
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.ServiceLinker. </summary>
    public static partial class ServiceLinkerExtensions
    {
        private static ArmResourceExtensionClient GetExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new ArmResourceExtensionClient(client, scope);
            }
            );
        }

        private static ArmResourceExtensionClient GetExtensionClient(ArmResource armResource)
        {
            return armResource.GetCachedClient((client) =>
            {
                return new ArmResourceExtensionClient(client, armResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of LinkerResources in the ArmResource. </summary>
        /// <param name="armResource"> The <see cref="ArmResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of LinkerResources and their operations over a LinkerResource. </returns>
        public static LinkerResourceCollection GetLinkerResources(this ArmResource armResource)
        {
            return GetExtensionClient(armResource).GetLinkerResources();
        }

        /// <summary> Gets a collection of LinkerResources in the ArmResource. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of LinkerResources and their operations over a LinkerResource. </returns>
        public static LinkerResourceCollection GetLinkerResources(this ArmClient client, ResourceIdentifier scope)
        {
            return GetExtensionClient(client, scope).GetLinkerResources();
        }

        /// <summary>
        /// Returns Linker resource for a given name.
        /// Request Path: /{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}
        /// Operation Id: Linker_Get
        /// </summary>
        /// <param name="armResource"> The <see cref="ArmResource" /> instance the method will execute against. </param>
        /// <param name="linkerName"> The name Linker resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="linkerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="linkerName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<LinkerResource>> GetLinkerResourceAsync(this ArmResource armResource, string linkerName, CancellationToken cancellationToken = default)
        {
            return await armResource.GetLinkerResources().GetAsync(linkerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns Linker resource for a given name.
        /// Request Path: /{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}
        /// Operation Id: Linker_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="linkerName"> The name Linker resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="linkerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="linkerName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<LinkerResource>> GetLinkerResourceAsync(this ArmClient client, ResourceIdentifier scope, string linkerName, CancellationToken cancellationToken = default)
        {
            return await client.GetLinkerResources(scope).GetAsync(linkerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns Linker resource for a given name.
        /// Request Path: /{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}
        /// Operation Id: Linker_Get
        /// </summary>
        /// <param name="armResource"> The <see cref="ArmResource" /> instance the method will execute against. </param>
        /// <param name="linkerName"> The name Linker resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="linkerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="linkerName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<LinkerResource> GetLinkerResource(this ArmResource armResource, string linkerName, CancellationToken cancellationToken = default)
        {
            return armResource.GetLinkerResources().Get(linkerName, cancellationToken);
        }

        /// <summary>
        /// Returns Linker resource for a given name.
        /// Request Path: /{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}
        /// Operation Id: Linker_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="linkerName"> The name Linker resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="linkerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="linkerName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<LinkerResource> GetLinkerResource(this ArmClient client, ResourceIdentifier scope, string linkerName, CancellationToken cancellationToken = default)
        {
            return client.GetLinkerResources(scope).Get(linkerName, cancellationToken);
        }

        #region LinkerResource
        /// <summary>
        /// Gets an object representing a <see cref="LinkerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LinkerResource.CreateResourceIdentifier" /> to create a <see cref="LinkerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LinkerResource" /> object. </returns>
        public static LinkerResource GetLinkerResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LinkerResource.ValidateResourceId(id);
                return new LinkerResource(client, id);
            }
            );
        }
        #endregion
    }
}
