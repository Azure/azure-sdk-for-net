// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmServiceLinkerModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.DaprConfigurationResource"/>. </summary>
        /// <param name="targetType"> Supported target resource type, extract from resource id, uppercase. </param>
        /// <param name="authType"> The authentication type. </param>
        /// <param name="daprProperties"> Indicates some additional properties for dapr client type. </param>
        /// <returns> A new <see cref="Models.DaprConfigurationResource"/> instance for mocking. </returns>
        public static DaprConfigurationResource DaprConfigurationResource(string targetType = null, LinkerAuthType? authType = null, DaprProperties daprProperties = null)
        {
            return new DaprConfigurationResource(targetType, authType, daprProperties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DaprProperties"/>. </summary>
        /// <param name="version"> The dapr component version. </param>
        /// <param name="componentType"> The dapr component type. </param>
        /// <param name="secretStoreComponent"> The name of a secret store dapr to retrieve secret. </param>
        /// <param name="metadata"> Additional dapr metadata. </param>
        /// <param name="scopes"> The dapr component scopes. </param>
        /// <param name="runtimeVersion"> The runtime version supported by the properties. </param>
        /// <param name="bindingComponentDirection"> The direction supported by the dapr binding component. </param>
        /// <returns> A new <see cref="Models.DaprProperties"/> instance for mocking. </returns>
        public static DaprProperties DaprProperties(string version = null, string componentType = null, string secretStoreComponent = null, IEnumerable<DaprMetadata> metadata = null, IEnumerable<string> scopes = null, string runtimeVersion = null, DaprBindingComponentDirection? bindingComponentDirection = null)
        {
            metadata ??= new List<DaprMetadata>();
            scopes ??= new List<string>();

            return new DaprProperties(
                version,
                componentType,
                secretStoreComponent,
                metadata?.ToList(),
                scopes?.ToList(),
                runtimeVersion,
                bindingComponentDirection,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ServiceLinker.DryrunResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="parameters">
        /// The parameters of the dryrun
        /// Please note <see cref="ServiceLinkerDryrunParametersContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.ServiceLinkerCreateOrUpdateDryrunParametersContent"/>.
        /// </param>
        /// <param name="prerequisiteResults">
        /// the result of the dryrun
        /// Please note <see cref="DryrunPrerequisiteResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.BasicErrorDryrunPrerequisiteResult"/> and <see cref="Models.PermissionsMissingDryrunPrerequisiteResult"/>.
        /// </param>
        /// <param name="operationPreviews"> the preview of the operations for creation. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="ServiceLinker.DryrunResourceData"/> instance for mocking. </returns>
        public static DryrunResourceData DryrunResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ServiceLinkerDryrunParametersContent parameters = null, IEnumerable<DryrunPrerequisiteResult> prerequisiteResults = null, IEnumerable<DryrunOperationPreview> operationPreviews = null, string provisioningState = null)
        {
            prerequisiteResults ??= new List<DryrunPrerequisiteResult>();
            operationPreviews ??= new List<DryrunOperationPreview>();

            return new DryrunResourceData(
                id,
                name,
                resourceType,
                systemData,
                parameters,
                prerequisiteResults?.ToList(),
                operationPreviews?.ToList(),
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DryrunOperationPreview"/>. </summary>
        /// <param name="name"> The operation name. </param>
        /// <param name="operationType"> The operation type. </param>
        /// <param name="description"> The description of the operation. </param>
        /// <param name="action"> The action defined by RBAC, refer https://docs.microsoft.com/azure/role-based-access-control/role-definitions#actions-format. </param>
        /// <param name="scope"> The scope of the operation, refer https://docs.microsoft.com/azure/role-based-access-control/scope-overview. </param>
        /// <returns> A new <see cref="Models.DryrunOperationPreview"/> instance for mocking. </returns>
        public static DryrunOperationPreview DryrunOperationPreview(string name = null, DryrunPreviewOperationType? operationType = null, string description = null, string action = null, string scope = null)
        {
            return new DryrunOperationPreview(
                name,
                operationType,
                description,
                action,
                scope,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DryrunPatch"/>. </summary>
        /// <param name="parameters">
        /// The parameters of the dryrun
        /// Please note <see cref="ServiceLinkerDryrunParametersContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.ServiceLinkerCreateOrUpdateDryrunParametersContent"/>.
        /// </param>
        /// <param name="prerequisiteResults">
        /// the result of the dryrun
        /// Please note <see cref="DryrunPrerequisiteResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.BasicErrorDryrunPrerequisiteResult"/> and <see cref="Models.PermissionsMissingDryrunPrerequisiteResult"/>.
        /// </param>
        /// <param name="operationPreviews"> the preview of the operations for creation. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="Models.DryrunPatch"/> instance for mocking. </returns>
        public static DryrunPatch DryrunPatch(ServiceLinkerDryrunParametersContent parameters = null, IEnumerable<DryrunPrerequisiteResult> prerequisiteResults = null, IEnumerable<DryrunOperationPreview> operationPreviews = null, string provisioningState = null)
        {
            prerequisiteResults ??= new List<DryrunPrerequisiteResult>();
            operationPreviews ??= new List<DryrunOperationPreview>();

            return new DryrunPatch(parameters, prerequisiteResults?.ToList(), operationPreviews?.ToList(), provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ServiceLinker.LinkerResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="targetService">
        /// The target service properties
        /// Please note <see cref="TargetServiceBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResourceInfo"/>, <see cref="ConfluentBootstrapServerInfo"/>, <see cref="ConfluentSchemaRegistryInfo"/>, <see cref="FabricPlatform"/> and <see cref="SelfHostedServer"/>.
        /// </param>
        /// <param name="authInfo">
        /// The authentication type.
        /// Please note <see cref="AuthBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AccessKeyInfoBase"/>, <see cref="EasyAuthMicrosoftEntraIdAuthInfo"/>, <see cref="SecretAuthInfo"/>, <see cref="ServicePrincipalCertificateAuthInfo"/>, <see cref="ServicePrincipalSecretAuthInfo"/>, <see cref="SystemAssignedIdentityAuthInfo"/>, <see cref="UserAccountAuthInfo"/> and <see cref="UserAssignedIdentityAuthInfo"/>.
        /// </param>
        /// <param name="clientType"> The application client type. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="vnetSolution"> The VNet solution. </param>
        /// <param name="secretStore"> An option to store secret value in secure place. </param>
        /// <param name="scope"> connection scope in source service. </param>
        /// <param name="publicNetworkSolution"> The network solution. </param>
        /// <param name="configurationInfo"> The connection information consumed by applications, including secrets, connection strings. </param>
        /// <returns> A new <see cref="ServiceLinker.LinkerResourceData"/> instance for mocking. </returns>
        public static LinkerResourceData LinkerResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, TargetServiceBaseInfo targetService = null, AuthBaseInfo authInfo = null, LinkerClientType? clientType = null, string provisioningState = null, VnetSolution vnetSolution = null, LinkerSecretStore secretStore = null, string scope = null, PublicNetworkSolution publicNetworkSolution = null, LinkerConfigurationInfo configurationInfo = null)
        {
            return new LinkerResourceData(
                id,
                name,
                resourceType,
                systemData,
                targetService,
                authInfo,
                clientType,
                provisioningState,
                vnetSolution,
                secretStore,
                scope,
                publicNetworkSolution,
                configurationInfo,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LinkerResourcePatch"/>. </summary>
        /// <param name="targetService">
        /// The target service properties
        /// Please note <see cref="TargetServiceBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResourceInfo"/>, <see cref="ConfluentBootstrapServerInfo"/>, <see cref="ConfluentSchemaRegistryInfo"/>, <see cref="FabricPlatform"/> and <see cref="SelfHostedServer"/>.
        /// </param>
        /// <param name="authInfo">
        /// The authentication type.
        /// Please note <see cref="AuthBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AccessKeyInfoBase"/>, <see cref="EasyAuthMicrosoftEntraIdAuthInfo"/>, <see cref="SecretAuthInfo"/>, <see cref="ServicePrincipalCertificateAuthInfo"/>, <see cref="ServicePrincipalSecretAuthInfo"/>, <see cref="SystemAssignedIdentityAuthInfo"/>, <see cref="UserAccountAuthInfo"/> and <see cref="UserAssignedIdentityAuthInfo"/>.
        /// </param>
        /// <param name="clientType"> The application client type. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="vnetSolution"> The VNet solution. </param>
        /// <param name="secretStore"> An option to store secret value in secure place. </param>
        /// <param name="scope"> connection scope in source service. </param>
        /// <param name="publicNetworkSolution"> The network solution. </param>
        /// <param name="configurationInfo"> The connection information consumed by applications, including secrets, connection strings. </param>
        /// <returns> A new <see cref="Models.LinkerResourcePatch"/> instance for mocking. </returns>
        public static LinkerResourcePatch LinkerResourcePatch(TargetServiceBaseInfo targetService = null, AuthBaseInfo authInfo = null, LinkerClientType? clientType = null, string provisioningState = null, VnetSolution vnetSolution = null, LinkerSecretStore secretStore = null, string scope = null, PublicNetworkSolution publicNetworkSolution = null, LinkerConfigurationInfo configurationInfo = null)
        {
            return new LinkerResourcePatch(
                targetService,
                authInfo,
                clientType,
                provisioningState,
                vnetSolution,
                secretStore,
                scope,
                publicNetworkSolution,
                configurationInfo,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SourceConfigurationResult"/>. </summary>
        /// <param name="configurations"> The configuration properties for source resource. </param>
        /// <returns> A new <see cref="Models.SourceConfigurationResult"/> instance for mocking. </returns>
        public static SourceConfigurationResult SourceConfigurationResult(IEnumerable<SourceConfiguration> configurations = null)
        {
            configurations ??= new List<SourceConfiguration>();

            return new SourceConfigurationResult(configurations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SourceConfiguration"/>. </summary>
        /// <param name="name"> The name of setting. </param>
        /// <param name="value"> The value of setting. </param>
        /// <param name="configType"> The type of setting. </param>
        /// <param name="keyVaultReferenceIdentity"> The identity for key vault reference, system or user-assigned managed identity ID. </param>
        /// <param name="description"> Descriptive information for the configuration. </param>
        /// <returns> A new <see cref="Models.SourceConfiguration"/> instance for mocking. </returns>
        public static SourceConfiguration SourceConfiguration(string name = null, string value = null, LinkerConfigurationType? configType = null, string keyVaultReferenceIdentity = null, string description = null)
        {
            return new SourceConfiguration(
                name,
                value,
                configType,
                keyVaultReferenceIdentity,
                description,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LinkerValidateOperationResult"/>. </summary>
        /// <param name="resourceId"> Validated Linker id. </param>
        /// <param name="status"> Validation operation status. </param>
        /// <param name="linkerName"> The linker name. </param>
        /// <param name="isConnectionAvailable"> A boolean value indicating whether the connection is available or not. </param>
        /// <param name="reportStartOn"> The start time of the validation report. </param>
        /// <param name="reportEndOn"> The end time of the validation report. </param>
        /// <param name="sourceId"> The resource id of the Linker source application. </param>
        /// <param name="targetId"> The resource Id of target service. </param>
        /// <param name="authType"> The authentication type. </param>
        /// <param name="validationDetail"> The detail of validation result. </param>
        /// <returns> A new <see cref="Models.LinkerValidateOperationResult"/> instance for mocking. </returns>
        public static LinkerValidateOperationResult LinkerValidateOperationResult(ResourceIdentifier resourceId = null, string status = null, string linkerName = null, bool? isConnectionAvailable = null, DateTimeOffset? reportStartOn = null, DateTimeOffset? reportEndOn = null, ResourceIdentifier sourceId = null, ResourceIdentifier targetId = null, LinkerAuthType? authType = null, IEnumerable<LinkerValidationResultItemInfo> validationDetail = null)
        {
            validationDetail ??= new List<LinkerValidationResultItemInfo>();

            return new LinkerValidateOperationResult(
                resourceId,
                status,
                linkerName,
                isConnectionAvailable,
                reportStartOn,
                reportEndOn,
                sourceId,
                targetId,
                authType,
                validationDetail?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LinkerValidationResultItemInfo"/>. </summary>
        /// <param name="name"> The validation item name. </param>
        /// <param name="description"> The display name of validation item. </param>
        /// <param name="result"> The result of validation. </param>
        /// <param name="errorMessage"> The error message of validation result. </param>
        /// <param name="errorCode"> The error code of validation result. </param>
        /// <returns> A new <see cref="Models.LinkerValidationResultItemInfo"/> instance for mocking. </returns>
        public static LinkerValidationResultItemInfo LinkerValidationResultItemInfo(string name = null, string description = null, LinkerValidationResultStatus? result = null, string errorMessage = null, string errorCode = null)
        {
            return new LinkerValidationResultItemInfo(
                name,
                description,
                result,
                errorMessage,
                errorCode,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConfigurationNameItem"/>. </summary>
        /// <param name="targetService"> The target service provider name and resource name. </param>
        /// <param name="clientType"> The client type for configuration names. </param>
        /// <param name="authType"> The auth type. </param>
        /// <param name="secretType"> Indicates where the secrets in configuration from. Used when secrets are from Keyvault. </param>
        /// <param name="daprProperties"> Deprecated, please use #/definitions/DaprConfigurationList instead. </param>
        /// <param name="names"> The configuration names to be set in compute service environment. </param>
        /// <returns> A new <see cref="Models.ConfigurationNameItem"/> instance for mocking. </returns>
        public static ConfigurationNameItem ConfigurationNameItem(string targetService = null, LinkerClientType? clientType = null, LinkerAuthType? authType = null, SecretSourceType? secretType = null, DaprProperties daprProperties = null, IEnumerable<LinkerConfigurationName> names = null)
        {
            names ??= new List<LinkerConfigurationName>();

            return new ConfigurationNameItem(
                targetService,
                clientType,
                authType,
                secretType,
                daprProperties,
                names?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LinkerConfigurationName"/>. </summary>
        /// <param name="value"></param>
        /// <param name="description"> Description for the configuration name. </param>
        /// <param name="isRequired"> Represent the configuration is required or not. </param>
        /// <returns> A new <see cref="Models.LinkerConfigurationName"/> instance for mocking. </returns>
        public static LinkerConfigurationName LinkerConfigurationName(string value = null, string description = null, bool? isRequired = null)
        {
            return new LinkerConfigurationName(value, description, isRequired, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BasicErrorDryrunPrerequisiteResult"/>. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <returns> A new <see cref="Models.BasicErrorDryrunPrerequisiteResult"/> instance for mocking. </returns>
        public static BasicErrorDryrunPrerequisiteResult BasicErrorDryrunPrerequisiteResult(string code = null, string message = null)
        {
            return new BasicErrorDryrunPrerequisiteResult(DryrunPrerequisiteResultType.BasicError, serializedAdditionalRawData: null, code, message);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ServiceLinkerCreateOrUpdateDryrunParametersContent"/>. </summary>
        /// <param name="targetService">
        /// The target service properties
        /// Please note <see cref="TargetServiceBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResourceInfo"/>, <see cref="ConfluentBootstrapServerInfo"/>, <see cref="ConfluentSchemaRegistryInfo"/>, <see cref="FabricPlatform"/> and <see cref="SelfHostedServer"/>.
        /// </param>
        /// <param name="authInfo">
        /// The authentication type.
        /// Please note <see cref="AuthBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AccessKeyInfoBase"/>, <see cref="EasyAuthMicrosoftEntraIdAuthInfo"/>, <see cref="SecretAuthInfo"/>, <see cref="ServicePrincipalCertificateAuthInfo"/>, <see cref="ServicePrincipalSecretAuthInfo"/>, <see cref="SystemAssignedIdentityAuthInfo"/>, <see cref="UserAccountAuthInfo"/> and <see cref="UserAssignedIdentityAuthInfo"/>.
        /// </param>
        /// <param name="clientType"> The application client type. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="vnetSolution"> The VNet solution. </param>
        /// <param name="secretStore"> An option to store secret value in secure place. </param>
        /// <param name="scope"> connection scope in source service. </param>
        /// <param name="publicNetworkSolution"> The network solution. </param>
        /// <param name="configurationInfo"> The connection information consumed by applications, including secrets, connection strings. </param>
        /// <returns> A new <see cref="Models.ServiceLinkerCreateOrUpdateDryrunParametersContent"/> instance for mocking. </returns>
        public static ServiceLinkerCreateOrUpdateDryrunParametersContent ServiceLinkerCreateOrUpdateDryrunParametersContent(TargetServiceBaseInfo targetService = null, AuthBaseInfo authInfo = null, LinkerClientType? clientType = null, string provisioningState = null, VnetSolution vnetSolution = null, LinkerSecretStore secretStore = null, string scope = null, PublicNetworkSolution publicNetworkSolution = null, LinkerConfigurationInfo configurationInfo = null)
        {
            return new ServiceLinkerCreateOrUpdateDryrunParametersContent(
                DryrunActionName.CreateOrUpdate,
                serializedAdditionalRawData: null,
                targetService,
                authInfo,
                clientType,
                provisioningState,
                vnetSolution,
                secretStore,
                scope,
                publicNetworkSolution,
                configurationInfo);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PermissionsMissingDryrunPrerequisiteResult"/>. </summary>
        /// <param name="scope"> The permission scope. </param>
        /// <param name="permissions"> The permission list. </param>
        /// <param name="recommendedRole"> The recommended role to resolve permissions missing. </param>
        /// <returns> A new <see cref="Models.PermissionsMissingDryrunPrerequisiteResult"/> instance for mocking. </returns>
        public static PermissionsMissingDryrunPrerequisiteResult PermissionsMissingDryrunPrerequisiteResult(string scope = null, IEnumerable<string> permissions = null, string recommendedRole = null)
        {
            permissions ??= new List<string>();

            return new PermissionsMissingDryrunPrerequisiteResult(DryrunPrerequisiteResultType.PermissionsMissing, serializedAdditionalRawData: null, scope, permissions?.ToList(), recommendedRole);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.ServiceLinker.Models.SourceConfiguration" />. </summary>
        /// <param name="name"> The name of setting. </param>
        /// <param name="value"> The value of setting. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.ServiceLinker.Models.SourceConfiguration" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static SourceConfiguration SourceConfiguration(string name, string value)
        {
            return SourceConfiguration(name: name, value: value, configType: default, keyVaultReferenceIdentity: default, description: default);
        }
    }
}
