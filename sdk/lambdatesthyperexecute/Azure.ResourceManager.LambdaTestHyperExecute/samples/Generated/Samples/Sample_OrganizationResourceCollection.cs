// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.LambdaTestHyperExecute.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.LambdaTestHyperExecute.Samples
{
    public partial class Sample_OrganizationResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_OrganizationsCreateOrUpdateMaximumSetGenGeneratedByMaximumSetRuleGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-02-01-preview/Organizations_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "171E7A75-341B-4472-BC4C-7603C5AB9F32";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OrganizationResource
            OrganizationResourceCollection collection = resourceGroupResource.GetOrganizationResources();

            // invoke the operation
            string organizationname = "testorg";
            OrganizationResourceData data = new OrganizationResourceData(new AzureLocation("cvymsrlt"))
            {
                Properties = new OrganizationProperties(new MarketplaceDetails(new OfferDetails("ufwwpzit", "fmljkvoivqmfdiwsu", "ssjlabxexw")
                {
                    PlanName = "mrguqu",
                    TermUnit = "acvhavsffebfivyaxhxxsaqzt",
                    TermId = "hxkszxfscsyefeuunyyfskhibr",
                })
                {
                    SubscriptionId = "zetdxwryjgcsnosezfpovkpvgvim",
                }, new UserDetails
                {
                    FirstName = "ssnzyujsrszbptndzeoqzrmbufrhgp",
                    LastName = "nsfylyvdyrtfzfeehmji",
                    EmailAddress = "joe@example.com",
                    Upn = "tfqolz",
                    PhoneNumber = "jkevskjaaylbwjzofkzmxdysejsoir",
                }, new PartnerProperties(7))
                {
                    SingleSignOnProperties = new SingleSignOnPropertiesV2(SingleSignOnType.Saml)
                    {
                        State = SingleSignOnState.Initial,
                        EnterpriseAppId = "sonpowym",
                        Uri = "qlshnxrfcdpjcpkxxisrn",
                        AadDomains = { "hrgguokssgyrfdzliyjmovtelfu" },
                    },
                },
                Identity = new ManagedServiceIdentity("None")
                {
                    UserAssignedIdentities = { },
                },
                Tags = { },
            };
            ArmOperation<OrganizationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, organizationname, data);
            OrganizationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OrganizationResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OrganizationsGetMaximumSetGenGeneratedByMaximumSetRuleGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-02-01-preview/Organizations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "171E7A75-341B-4472-BC4C-7603C5AB9F32";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OrganizationResource
            OrganizationResourceCollection collection = resourceGroupResource.GetOrganizationResources();

            // invoke the operation
            string organizationname = "testorg";
            OrganizationResource result = await collection.GetAsync(organizationname);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OrganizationResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_OrganizationsListByResourceGroupMaximumSetGenGeneratedByMaximumSetRuleGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-02-01-preview/Organizations_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "171E7A75-341B-4472-BC4C-7603C5AB9F32";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OrganizationResource
            OrganizationResourceCollection collection = resourceGroupResource.GetOrganizationResources();

            // invoke the operation and iterate over the result
            await foreach (OrganizationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OrganizationResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_OrganizationsListByResourceGroupMaximumSetGenGeneratedByMaximumSetRuleGeneratedByMaximumSetRuleGeneratedByMinimumSetRule()
        {
            // Generated from example definition: 2024-02-01-preview/Organizations_ListByResourceGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "171E7A75-341B-4472-BC4C-7603C5AB9F32";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OrganizationResource
            OrganizationResourceCollection collection = resourceGroupResource.GetOrganizationResources();

            // invoke the operation and iterate over the result
            await foreach (OrganizationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OrganizationResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_OrganizationsGetMaximumSetGenGeneratedByMaximumSetRuleGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-02-01-preview/Organizations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "171E7A75-341B-4472-BC4C-7603C5AB9F32";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OrganizationResource
            OrganizationResourceCollection collection = resourceGroupResource.GetOrganizationResources();

            // invoke the operation
            string organizationname = "testorg";
            bool result = await collection.ExistsAsync(organizationname);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_OrganizationsGetMaximumSetGenGeneratedByMaximumSetRuleGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-02-01-preview/Organizations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "171E7A75-341B-4472-BC4C-7603C5AB9F32";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OrganizationResource
            OrganizationResourceCollection collection = resourceGroupResource.GetOrganizationResources();

            // invoke the operation
            string organizationname = "testorg";
            NullableResponse<OrganizationResource> response = await collection.GetIfExistsAsync(organizationname);
            OrganizationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OrganizationResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
