// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.LambdaTestHyperExecute;

namespace Azure.ResourceManager.LambdaTestHyperExecute.Models
{
    /// <summary> Properties specific to Organization. </summary>
    public partial class LambdaTestHyperExecuteOrganizationProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="LambdaTestHyperExecuteOrganizationProperties"/>. </summary>
        /// <param name="marketplace"> Marketplace details of the resource. </param>
        /// <param name="user"> Details of the user. </param>
        /// <param name="partnerProperties"> partner properties. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="marketplace"/>, <paramref name="user"/> or <paramref name="partnerProperties"/> is null. </exception>
        public LambdaTestHyperExecuteOrganizationProperties(LambdaTestHyperExecuteMarketplaceDetails marketplace, LambdaTestHyperExecuteUserDetails user, LambdaTestHyperExecuteOfferPartnerProperties partnerProperties)
        {
            Argument.AssertNotNull(marketplace, nameof(marketplace));
            Argument.AssertNotNull(user, nameof(user));
            Argument.AssertNotNull(partnerProperties, nameof(partnerProperties));

            Marketplace = marketplace;
            User = user;
            PartnerProperties = partnerProperties;
        }

        /// <summary> Initializes a new instance of <see cref="LambdaTestHyperExecuteOrganizationProperties"/>. </summary>
        /// <param name="marketplace"> Marketplace details of the resource. </param>
        /// <param name="user"> Details of the user. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="partnerProperties"> partner properties. </param>
        /// <param name="singleSignOnProperties"> Single sign-on properties. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal LambdaTestHyperExecuteOrganizationProperties(LambdaTestHyperExecuteMarketplaceDetails marketplace, LambdaTestHyperExecuteUserDetails user, LambdaTestHyperExecuteOfferProvisioningState? provisioningState, LambdaTestHyperExecuteOfferPartnerProperties partnerProperties, LambdaTestHyperExecuteSingleSignOnPropertiesV2 singleSignOnProperties, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Marketplace = marketplace;
            User = user;
            ProvisioningState = provisioningState;
            PartnerProperties = partnerProperties;
            SingleSignOnProperties = singleSignOnProperties;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Marketplace details of the resource. </summary>
        public LambdaTestHyperExecuteMarketplaceDetails Marketplace { get; set; }

        /// <summary> Details of the user. </summary>
        public LambdaTestHyperExecuteUserDetails User { get; set; }

        /// <summary> Provisioning state of the resource. </summary>
        public LambdaTestHyperExecuteOfferProvisioningState? ProvisioningState { get; }

        /// <summary> partner properties. </summary>
        internal LambdaTestHyperExecuteOfferPartnerProperties PartnerProperties { get; set; }

        /// <summary> Single sign-on properties. </summary>
        public LambdaTestHyperExecuteSingleSignOnPropertiesV2 SingleSignOnProperties { get; set; }

        /// <summary> The number of licenses subscribed. </summary>
        public int? PartnerLicensesSubscribed
        {
            get
            {
                return PartnerProperties is null ? default : PartnerProperties.LicensesSubscribed;
            }
            set
            {
                PartnerProperties = value.HasValue ? new LambdaTestHyperExecuteOfferPartnerProperties(value.Value) : default;
            }
        }
    }
}
