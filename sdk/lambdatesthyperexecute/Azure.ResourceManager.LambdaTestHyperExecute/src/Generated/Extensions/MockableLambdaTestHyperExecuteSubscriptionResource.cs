// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.LambdaTestHyperExecute;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.LambdaTestHyperExecute.Mocking
{
    /// <summary> A class to add extension methods to <see cref="SubscriptionResource"/>. </summary>
    public partial class MockableLambdaTestHyperExecuteSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _organizationsClientDiagnostics;
        private Organizations _organizationsRestClient;

        /// <summary> Initializes a new instance of MockableLambdaTestHyperExecuteSubscriptionResource for mocking. </summary>
        protected MockableLambdaTestHyperExecuteSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableLambdaTestHyperExecuteSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableLambdaTestHyperExecuteSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics OrganizationsClientDiagnostics => _organizationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.LambdaTestHyperExecute.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private Organizations OrganizationsRestClient => _organizationsRestClient ??= new Organizations(OrganizationsClientDiagnostics, Pipeline, Endpoint, "2024-02-01");

        /// <summary> List OrganizationResource resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LambdaTestHyperExecuteOrganizationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LambdaTestHyperExecuteOrganizationResource> GetLambdaTestHyperExecuteOrganizationsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<LambdaTestHyperExecuteOrganizationData, LambdaTestHyperExecuteOrganizationResource>(new OrganizationsGetBySubscriptionAsyncCollectionResultOfT(OrganizationsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new LambdaTestHyperExecuteOrganizationResource(Client, data));
        }

        /// <summary> List OrganizationResource resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LambdaTestHyperExecuteOrganizationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LambdaTestHyperExecuteOrganizationResource> GetLambdaTestHyperExecuteOrganizations(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<LambdaTestHyperExecuteOrganizationData, LambdaTestHyperExecuteOrganizationResource>(new OrganizationsGetBySubscriptionCollectionResultOfT(OrganizationsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new LambdaTestHyperExecuteOrganizationResource(Client, data));
        }
    }
}
