// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Grafana.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.Grafana.Samples
{
    public partial class Sample_ResourceGroupResourceExtensions
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetGrafana_GrafanaGet()
        {
            // Generated from example definition: 2024-11-01-preview/Grafana_Get.json
            // this example is just showing the usage of "ManagedGrafana_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            ManagedGrafana result = await resourceGroupResource.GetGrafanaAsync(workspaceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateGrafana_GrafanaCreate()
        {
            // Generated from example definition: 2024-11-01-preview/Grafana_Create.json
            // this example is just showing the usage of "ManagedGrafana_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            ManagedGrafana requestBodyParameters = new ManagedGrafana(new AzureLocation("West US"))
            {
                SkuName = "Standard",
                Properties = new ManagedGrafanaProperties
                {
                    PublicNetworkAccess = GrafanaPublicNetworkAccess.Enabled,
                    ZoneRedundancy = GrafanaZoneRedundancy.Enabled,
                    ApiKey = GrafanaApiKey.Enabled,
                    DeterministicOutboundIP = DeterministicOutboundIP.Enabled,
                    MonitorWorkspaceIntegrations = {new MonitorWorkspaceIntegration
{
MonitorWorkspaceResourceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.monitor/accounts/myAzureMonitorWorkspace"),
}},
                    EnterpriseConfigurations = new EnterpriseConfigurations
                    {
                        MarketplacePlanId = "myPlanId",
                        MarketplaceAutoRenew = MarketplaceAutoRenew.Enabled,
                    },
                    GrafanaConfigurations = new GrafanaConfigurations
                    {
                        Smtp = new GrafanaSmtpSettings
                        {
                            IsEnabled = true,
                            Host = "smtp.sendemail.com:587",
                            User = "username",
                            Password = "<password>",
                            FromAddress = "test@sendemail.com",
                            FromName = "emailsender",
                            StartTLSPolicy = GrafanaStartTlsPolicy.OpportunisticStartTls,
                            SkipVerify = true,
                        },
                        IsExternalEnabled = true,
                        Users = new GrafanaUserSettings
                        {
                            ViewersCanEdit = true,
                            EditorsCanAdmin = true,
                        },
                        IsCsrfAlwaysCheckEnabled = false,
                        IsCaptureEnabled = false,
                    },
                    GrafanaPlugins =
{
["sample-plugin-id"] = new GrafanaPlugin()
},
                    GrafanaMajorVersion = "9",
                },
                Identity = new ManagedServiceIdentity("SystemAssigned"),
                Tags =
{
["Environment"] = "Dev"
},
            };
            ArmOperation<ManagedGrafana> lro = await resourceGroupResource.CreateGrafanaAsync(WaitUntil.Completed, workspaceName, requestBodyParameters);
            ManagedGrafana result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateGrafana_GrafanaUpdate()
        {
            // Generated from example definition: 2024-11-01-preview/Grafana_Update.json
            // this example is just showing the usage of "ManagedGrafana_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            ManagedGrafanaUpdateContent content = new ManagedGrafanaUpdateContent
            {
                SkuName = "Standard",
                Tags =
{
["Environment"] = "Dev 2"
},
                Properties = new ManagedGrafanaPatchProperties
                {
                    ApiKey = GrafanaApiKey.Enabled,
                    DeterministicOutboundIP = DeterministicOutboundIP.Enabled,
                    MonitorWorkspaceIntegrations = {new MonitorWorkspaceIntegration
{
MonitorWorkspaceResourceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.monitor/accounts/myAzureMonitorWorkspace"),
}},
                    EnterpriseConfigurations = new EnterpriseConfigurations
                    {
                        MarketplacePlanId = "myPlanId",
                        MarketplaceAutoRenew = MarketplaceAutoRenew.Enabled,
                    },
                    GrafanaConfigurations = new GrafanaConfigurations
                    {
                        Smtp = new GrafanaSmtpSettings
                        {
                            IsEnabled = true,
                            Host = "smtp.sendemail.com:587",
                            User = "username",
                            Password = "<password>",
                            FromAddress = "test@sendemail.com",
                            FromName = "emailsender",
                            StartTLSPolicy = GrafanaStartTlsPolicy.OpportunisticStartTls,
                            SkipVerify = true,
                        },
                        IsExternalEnabled = true,
                        Users = new GrafanaUserSettings
                        {
                            ViewersCanEdit = true,
                            EditorsCanAdmin = true,
                        },
                        IsCsrfAlwaysCheckEnabled = false,
                        IsCaptureEnabled = false,
                    },
                    GrafanaPlugins =
{
["sample-plugin-id"] = new GrafanaPlugin()
},
                    GrafanaMajorVersion = "9",
                },
            };
            ArmOperation<ManagedGrafana> lro = await resourceGroupResource.UpdateGrafanaAsync(WaitUntil.Completed, workspaceName, content);
            ManagedGrafana result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DeleteGrafana_GrafanaDelete()
        {
            // Generated from example definition: 2024-11-01-preview/Grafana_Delete.json
            // this example is just showing the usage of "ManagedGrafana_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            await resourceGroupResource.DeleteGrafanaAsync(WaitUntil.Completed, workspaceName);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetGrafanasByResourceGroup_GrafanaListByResourceGroup()
        {
            // Generated from example definition: 2024-11-01-preview/Grafana_ListByResourceGroup.json
            // this example is just showing the usage of "ManagedGrafana_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation and iterate over the result
            await foreach (ManagedGrafana item in resourceGroupResource.GetGrafanasByResourceGroupAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CheckEnterpriseDetailsGrafana_EnterpriseDetailsPost()
        {
            // Generated from example definition: 2024-11-01-preview/EnterpriseDetails_Post.json
            // this example is just showing the usage of "ManagedGrafanas_CheckEnterpriseDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            EnterpriseDetails result = await resourceGroupResource.CheckEnterpriseDetailsGrafanaAsync(workspaceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task FetchAvailablePluginsGrafanas_GrafanaFetchAvailablePlugins()
        {
            // Generated from example definition: 2024-11-01-preview/Grafana_FetchAvailablePlugins.json
            // this example is just showing the usage of "ManagedGrafanas_FetchAvailablePlugins" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation and iterate over the result
            string workspaceName = "myWorkspace";
            await foreach (GrafanaAvailablePlugin item in resourceGroupResource.FetchAvailablePluginsGrafanasAsync(workspaceName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RefreshManagedPrivateEndpoint_ManagedPrivateEndpointRefresh()
        {
            // Generated from example definition: 2024-11-01-preview/ManagedPrivateEndpoints_Refresh.json
            // this example is just showing the usage of "ManagedGrafanas_RefreshManagedPrivateEndpoint" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            await resourceGroupResource.RefreshManagedPrivateEndpointAsync(WaitUntil.Completed, workspaceName);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetManagedPrivateEndpoint_ManagedPrivateEndpointGet()
        {
            // Generated from example definition: 2024-11-01-preview/ManagedPrivateEndpoints_Get.json
            // this example is just showing the usage of "ManagedPrivateEndpointModel_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            string managedPrivateEndpointName = "myMPEName";
            ManagedPrivateEndpointModel result = await resourceGroupResource.GetManagedPrivateEndpointAsync(workspaceName, managedPrivateEndpointName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateManagedPrivateEndpoint_ManagedPrivateEndpointCreate()
        {
            // Generated from example definition: 2024-11-01-preview/ManagedPrivateEndpoints_Create.json
            // this example is just showing the usage of "ManagedPrivateEndpointModel_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            string managedPrivateEndpointName = "myMPEName";
            ManagedPrivateEndpointModel requestBodyParameters = new ManagedPrivateEndpointModel(new AzureLocation("West US"));
            ArmOperation<ManagedPrivateEndpointModel> lro = await resourceGroupResource.CreateManagedPrivateEndpointAsync(WaitUntil.Completed, workspaceName, managedPrivateEndpointName, requestBodyParameters);
            ManagedPrivateEndpointModel result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateManagedPrivateEndpoint_ManagedPrivateEndpointsPatch()
        {
            // Generated from example definition: 2024-11-01-preview/ManagedPrivateEndpoints_Patch.json
            // this example is just showing the usage of "ManagedPrivateEndpointModel_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            string managedPrivateEndpointName = "myMPEName";
            ManagedPrivateEndpointUpdateContent content = new ManagedPrivateEndpointUpdateContent
            {
                Tags =
{
["Environment"] = "Dev 2"
},
            };
            ArmOperation<ManagedPrivateEndpointModel> lro = await resourceGroupResource.UpdateManagedPrivateEndpointAsync(WaitUntil.Completed, workspaceName, managedPrivateEndpointName, content);
            ManagedPrivateEndpointModel result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DeleteManagedPrivateEndpoint_ManagedPrivateEndpointDelete()
        {
            // Generated from example definition: 2024-11-01-preview/ManagedPrivateEndpoints_Delete.json
            // this example is just showing the usage of "ManagedPrivateEndpointModel_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string workspaceName = "myWorkspace";
            string managedPrivateEndpointName = "myMPEName";
            await resourceGroupResource.DeleteManagedPrivateEndpointAsync(WaitUntil.Completed, workspaceName, managedPrivateEndpointName);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetManagedPrivateEndpoints_ManagedPrivateEndpointList()
        {
            // Generated from example definition: 2024-11-01-preview/ManagedPrivateEndpoints_List.json
            // this example is just showing the usage of "ManagedPrivateEndpointModel_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation and iterate over the result
            string workspaceName = "myWorkspace";
            await foreach (ManagedPrivateEndpointModel item in resourceGroupResource.GetManagedPrivateEndpointsAsync(workspaceName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }
    }
}
