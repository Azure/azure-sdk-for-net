// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Grafana.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Grafana.Samples
{
    public partial class Sample_IntegrationFabricResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_IntegrationFabricsGet()
        {
            // Generated from example definition: specification/dashboard/resource-manager/Microsoft.Dashboard/preview/2024-11-01-preview/examples/IntegrationFabrics_Get.json
            // this example is just showing the usage of "IntegrationFabrics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationFabricResource created on azure
            // for more information of creating IntegrationFabricResource, please refer to the document of IntegrationFabricResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string workspaceName = "myWorkspace";
            string integrationFabricName = "sampleIntegration";
            ResourceIdentifier integrationFabricResourceId = IntegrationFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, integrationFabricName);
            IntegrationFabricResource integrationFabric = client.GetIntegrationFabricResource(integrationFabricResourceId);

            // invoke the operation
            IntegrationFabricResource result = await integrationFabric.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IntegrationFabricData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_IntegrationFabricsDelete()
        {
            // Generated from example definition: specification/dashboard/resource-manager/Microsoft.Dashboard/preview/2024-11-01-preview/examples/IntegrationFabrics_Delete.json
            // this example is just showing the usage of "IntegrationFabrics_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationFabricResource created on azure
            // for more information of creating IntegrationFabricResource, please refer to the document of IntegrationFabricResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string workspaceName = "myWorkspace";
            string integrationFabricName = "sampleIntegration";
            ResourceIdentifier integrationFabricResourceId = IntegrationFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, integrationFabricName);
            IntegrationFabricResource integrationFabric = client.GetIntegrationFabricResource(integrationFabricResourceId);

            // invoke the operation
            await integrationFabric.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_IntegrationFabricsUpdate()
        {
            // Generated from example definition: specification/dashboard/resource-manager/Microsoft.Dashboard/preview/2024-11-01-preview/examples/IntegrationFabrics_Update.json
            // this example is just showing the usage of "IntegrationFabrics_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationFabricResource created on azure
            // for more information of creating IntegrationFabricResource, please refer to the document of IntegrationFabricResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string workspaceName = "myWorkspace";
            string integrationFabricName = "sampleIntegration";
            ResourceIdentifier integrationFabricResourceId = IntegrationFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, integrationFabricName);
            IntegrationFabricResource integrationFabric = client.GetIntegrationFabricResource(integrationFabricResourceId);

            // invoke the operation
            IntegrationFabricPatch patch = new IntegrationFabricPatch
            {
                Tags =
{
["Environment"] = "Dev 2"
},
                IntegrationFabricPropertiesUpdateParametersScenarios = { "scenario1" },
            };
            ArmOperation<IntegrationFabricResource> lro = await integrationFabric.UpdateAsync(WaitUntil.Completed, patch);
            IntegrationFabricResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IntegrationFabricData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
