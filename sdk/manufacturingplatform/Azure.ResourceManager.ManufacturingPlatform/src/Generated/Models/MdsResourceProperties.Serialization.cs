// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ManufacturingPlatform.Models
{
    public partial class MdsResourceProperties : IUtf8JsonSerializable, IJsonModel<MdsResourceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MdsResourceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MdsResourceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MdsResourceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MdsResourceProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(EnableTeamsNotification))
            {
                writer.WritePropertyName("enableTeamsNotification"u8);
                writer.WriteBooleanValue(EnableTeamsNotification.Value);
            }
            if (Optional.IsDefined(EnableCopilot))
            {
                writer.WritePropertyName("enableCopilot"u8);
                writer.WriteBooleanValue(EnableCopilot.Value);
            }
            writer.WritePropertyName("aadApplicationId"u8);
            writer.WriteStringValue(AadApplicationId);
            if (Optional.IsDefined(AksAdminGroupId))
            {
                writer.WritePropertyName("aksAdminGroupId"u8);
                writer.WriteStringValue(AksAdminGroupId);
            }
            if (Optional.IsDefined(ContinuousExportPeriod))
            {
                writer.WritePropertyName("continuousExportPeriod"u8);
                writer.WriteNumberValue(ContinuousExportPeriod.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ServiceUri))
            {
                writer.WritePropertyName("serviceUrl"u8);
                writer.WriteStringValue(ServiceUri);
            }
            if (options.Format != "W" && Optional.IsDefined(AksProfile))
            {
                writer.WritePropertyName("aksProfile"u8);
                JsonSerializer.Serialize(writer, AksProfile);
            }
            if (options.Format != "W" && Optional.IsDefined(StorageProfile))
            {
                writer.WritePropertyName("storageProfile"u8);
                JsonSerializer.Serialize(writer, StorageProfile);
            }
            if (options.Format != "W" && Optional.IsDefined(DatabaseProfile))
            {
                writer.WritePropertyName("databaseProfile"u8);
                writer.WriteObjectValue(DatabaseProfile, options);
            }
            if (options.Format != "W" && Optional.IsDefined(AdxProfile))
            {
                writer.WritePropertyName("adxProfile"u8);
                writer.WriteObjectValue(AdxProfile, options);
            }
            if (options.Format != "W" && Optional.IsDefined(RedisProfile))
            {
                writer.WritePropertyName("redisProfile"u8);
                JsonSerializer.Serialize(writer, RedisProfile);
            }
            if (options.Format != "W" && Optional.IsDefined(MonitoringProfile))
            {
                writer.WritePropertyName("monitoringProfile"u8);
                JsonSerializer.Serialize(writer, MonitoringProfile);
            }
            if (options.Format != "W" && Optional.IsDefined(EventHubProfile))
            {
                writer.WritePropertyName("eventHubProfile"u8);
                writer.WriteObjectValue(EventHubProfile, options);
            }
            if (options.Format != "W" && Optional.IsDefined(FunctionAppProfile))
            {
                writer.WritePropertyName("functionAppProfile"u8);
                JsonSerializer.Serialize(writer, FunctionAppProfile);
            }
            if (Optional.IsDefined(OpenAIProfile))
            {
                writer.WritePropertyName("openAIProfile"u8);
                writer.WriteObjectValue(OpenAIProfile, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ManagedResourceGroupConfiguration))
            {
                writer.WritePropertyName("managedResourceGroupConfiguration"u8);
                writer.WriteObjectValue(ManagedResourceGroupConfiguration, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ManagedOnBehalfOfConfiguration))
            {
                writer.WritePropertyName("managedOnBehalfOfConfiguration"u8);
                writer.WriteObjectValue(ManagedOnBehalfOfConfiguration, options);
            }
            if (Optional.IsDefined(AmlProfile))
            {
                writer.WritePropertyName("amlProfile"u8);
                writer.WriteObjectValue(AmlProfile, options);
            }
            if (Optional.IsDefined(UserManagedDatabaseProfile))
            {
                writer.WritePropertyName("userManagedDatabaseProfile"u8);
                writer.WriteObjectValue(UserManagedDatabaseProfile, options);
            }
            if (Optional.IsDefined(UserManagedAdxProfile))
            {
                writer.WritePropertyName("userManagedAdxProfile"u8);
                writer.WriteObjectValue(UserManagedAdxProfile, options);
            }
            if (Optional.IsDefined(CmkProfile))
            {
                writer.WritePropertyName("cmkProfile"u8);
                writer.WriteObjectValue(CmkProfile, options);
            }
            if (Optional.IsDefined(FabricProfile))
            {
                writer.WritePropertyName("fabricProfile"u8);
                writer.WriteObjectValue(FabricProfile, options);
            }
            if (Optional.IsDefined(UserManagedOpenAIProfile))
            {
                writer.WritePropertyName("userManagedOpenAIProfile"u8);
                writer.WriteObjectValue(UserManagedOpenAIProfile, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MdsResourceProperties IJsonModel<MdsResourceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MdsResourceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MdsResourceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMdsResourceProperties(document.RootElement, options);
        }

        internal static MdsResourceProperties DeserializeMdsResourceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ProvisioningState? provisioningState = default;
            string version = default;
            bool? enableTeamsNotification = default;
            bool? enableCopilot = default;
            string aadApplicationId = default;
            string aksAdminGroupId = default;
            int? continuousExportPeriod = default;
            string serviceUrl = default;
            SubResource aksProfile = default;
            SubResource storageProfile = default;
            DatabaseProfile databaseProfile = default;
            AdxProfile adxProfile = default;
            SubResource redisProfile = default;
            SubResource monitoringProfile = default;
            EventHubProfile eventHubProfile = default;
            SubResource functionAppProfile = default;
            OpenAIProfile openAIProfile = default;
            ManagedResourceGroupConfiguration managedResourceGroupConfiguration = default;
            ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration = default;
            AmlProfile amlProfile = default;
            UserManagedDatabaseProfile userManagedDatabaseProfile = default;
            UserManagedAdxProfile userManagedAdxProfile = default;
            CmkProfile cmkProfile = default;
            FabricProfile fabricProfile = default;
            UserManagedOpenAIProfile userManagedOpenAIProfile = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableTeamsNotification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableTeamsNotification = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableCopilot"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableCopilot = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("aadApplicationId"u8))
                {
                    aadApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aksAdminGroupId"u8))
                {
                    aksAdminGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("continuousExportPeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    continuousExportPeriod = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("serviceUrl"u8))
                {
                    serviceUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aksProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    aksProfile = JsonSerializer.Deserialize<SubResource>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("storageProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageProfile = JsonSerializer.Deserialize<SubResource>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("databaseProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseProfile = DatabaseProfile.DeserializeDatabaseProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("adxProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    adxProfile = AdxProfile.DeserializeAdxProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("redisProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    redisProfile = JsonSerializer.Deserialize<SubResource>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("monitoringProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monitoringProfile = JsonSerializer.Deserialize<SubResource>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("eventHubProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eventHubProfile = EventHubProfile.DeserializeEventHubProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("functionAppProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    functionAppProfile = JsonSerializer.Deserialize<SubResource>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("openAIProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    openAIProfile = OpenAIProfile.DeserializeOpenAIProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("managedResourceGroupConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedResourceGroupConfiguration = ManagedResourceGroupConfiguration.DeserializeManagedResourceGroupConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("managedOnBehalfOfConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedOnBehalfOfConfiguration = ManagedOnBehalfOfConfiguration.DeserializeManagedOnBehalfOfConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("amlProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    amlProfile = AmlProfile.DeserializeAmlProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("userManagedDatabaseProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userManagedDatabaseProfile = UserManagedDatabaseProfile.DeserializeUserManagedDatabaseProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("userManagedAdxProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userManagedAdxProfile = UserManagedAdxProfile.DeserializeUserManagedAdxProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("cmkProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cmkProfile = CmkProfile.DeserializeCmkProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("fabricProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fabricProfile = FabricProfile.DeserializeFabricProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("userManagedOpenAIProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userManagedOpenAIProfile = UserManagedOpenAIProfile.DeserializeUserManagedOpenAIProfile(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MdsResourceProperties(
                provisioningState,
                version,
                enableTeamsNotification,
                enableCopilot,
                aadApplicationId,
                aksAdminGroupId,
                continuousExportPeriod,
                serviceUrl,
                aksProfile,
                storageProfile,
                databaseProfile,
                adxProfile,
                redisProfile,
                monitoringProfile,
                eventHubProfile,
                functionAppProfile,
                openAIProfile,
                managedResourceGroupConfiguration,
                managedOnBehalfOfConfiguration,
                amlProfile,
                userManagedDatabaseProfile,
                userManagedAdxProfile,
                cmkProfile,
                fabricProfile,
                userManagedOpenAIProfile,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MdsResourceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MdsResourceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MdsResourceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        MdsResourceProperties IPersistableModel<MdsResourceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MdsResourceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMdsResourceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MdsResourceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MdsResourceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
