// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ManufacturingPlatform.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmManufacturingPlatformModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ManufacturingPlatform.MdsResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="sku"> The SKU (Stock Keeping Unit) assigned to this resource. </param>
        /// <returns> A new <see cref="ManufacturingPlatform.MdsResourceData"/> instance for mocking. </returns>
        public static MdsResourceData MdsResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, MdsResourceProperties properties = null, ManagedServiceIdentity identity = null, ManufacturingPlatformSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MdsResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                sku,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MdsResourceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="version"> Mds Resource Version. </param>
        /// <param name="enableTeamsNotification"> Enable Teams Notification. </param>
        /// <param name="enableCopilot"> Enable Copilot. </param>
        /// <param name="aadApplicationId"> AAD Application Id. </param>
        /// <param name="aksAdminGroupId"> AKS Admin Group Id. </param>
        /// <param name="continuousExportPeriod"> Continuous Export Period. </param>
        /// <param name="serviceUri"> Service Url. </param>
        /// <param name="aksProfileId"> Profile of AKS Created. </param>
        /// <param name="storageProfileId"> Profile of Storage Created. </param>
        /// <param name="databaseCosmosId"> Profile of Database Created. </param>
        /// <param name="adxProfile"> Profile of Adx Created. </param>
        /// <param name="redisProfileId"> Profile of Azure Redis Created. </param>
        /// <param name="monitoringProfileId"> Profile of Monitoring Resource Created. </param>
        /// <param name="eventHubProfile"> Profile of EventHub Resource. </param>
        /// <param name="functionAppProfileId"> Profile of Function App Resource. </param>
        /// <param name="openAIProfile"> Profile of OpenAI Resource. </param>
        /// <param name="managedResourceGroupConfiguration"> Configuration of the managed resource group associated with the resource. </param>
        /// <param name="managedOnBehalfOfMoboBrokerResources"> Managed On Behalf Of Configuration. </param>
        /// <param name="amlProfile"> Profile of Azure Machine Learning Resource. </param>
        /// <param name="userManagedDatabaseCosmosId"> Profile of User Managed Database. </param>
        /// <param name="userManagedAdxProfile"> Profile of User Managed Adx. </param>
        /// <param name="cmkKeyUri"> Profile of CMK Settings. </param>
        /// <param name="fabricProfile"> Profile of Fabric resources. </param>
        /// <param name="userManagedOpenAIProfile"> Profile of User Managed OpenAI Resource. </param>
        /// <returns> A new <see cref="Models.MdsResourceProperties"/> instance for mocking. </returns>
        public static MdsResourceProperties MdsResourceProperties(ProvisioningState? provisioningState = null, string version = null, bool? enableTeamsNotification = null, bool? enableCopilot = null, string aadApplicationId = null, string aksAdminGroupId = null, int? continuousExportPeriod = null, string serviceUri = null, ResourceIdentifier aksProfileId = null, ResourceIdentifier storageProfileId = null, string databaseCosmosId = null, AdxProfile adxProfile = null, ResourceIdentifier redisProfileId = null, ResourceIdentifier monitoringProfileId = null, EventHubProfile eventHubProfile = null, ResourceIdentifier functionAppProfileId = null, OpenAIProfile openAIProfile = null, ManagedResourceGroupConfiguration managedResourceGroupConfiguration = null, IEnumerable<SubResource> managedOnBehalfOfMoboBrokerResources = null, AmlProfile amlProfile = null, string userManagedDatabaseCosmosId = null, UserManagedAdxProfile userManagedAdxProfile = null, string cmkKeyUri = null, FabricProfile fabricProfile = null, UserManagedOpenAIProfile userManagedOpenAIProfile = null)
        {
            managedOnBehalfOfMoboBrokerResources ??= new List<SubResource>();

            return new MdsResourceProperties(
                provisioningState,
                version,
                enableTeamsNotification,
                enableCopilot,
                aadApplicationId,
                aksAdminGroupId,
                continuousExportPeriod,
                serviceUri,
                aksProfileId != null ? ResourceManagerModelFactory.SubResource(aksProfileId) : null,
                storageProfileId != null ? ResourceManagerModelFactory.SubResource(storageProfileId) : null,
                databaseCosmosId != null ? new DatabaseProfile(databaseCosmosId, serializedAdditionalRawData: null) : null,
                adxProfile,
                redisProfileId != null ? ResourceManagerModelFactory.SubResource(redisProfileId) : null,
                monitoringProfileId != null ? ResourceManagerModelFactory.SubResource(monitoringProfileId) : null,
                eventHubProfile,
                functionAppProfileId != null ? ResourceManagerModelFactory.SubResource(functionAppProfileId) : null,
                openAIProfile,
                managedResourceGroupConfiguration,
                managedOnBehalfOfMoboBrokerResources != null ? new ManagedOnBehalfOfConfiguration(managedOnBehalfOfMoboBrokerResources?.ToList(), serializedAdditionalRawData: null) : null,
                amlProfile,
                userManagedDatabaseCosmosId != null ? new UserManagedDatabaseProfile(userManagedDatabaseCosmosId, serializedAdditionalRawData: null) : null,
                userManagedAdxProfile,
                cmkKeyUri != null ? new CmkProfile(cmkKeyUri, serializedAdditionalRawData: null) : null,
                fabricProfile,
                userManagedOpenAIProfile,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdxProfile"/>. </summary>
        /// <param name="id"> Resource Id of Adx Resource. </param>
        /// <param name="uri"> Uri of Adx Resource. </param>
        /// <param name="dataIngestionUri"> Data Ingestion Uri of Adx Resource. </param>
        /// <returns> A new <see cref="Models.AdxProfile"/> instance for mocking. </returns>
        public static AdxProfile AdxProfile(string id = null, string uri = null, string dataIngestionUri = null)
        {
            return new AdxProfile(id, uri, dataIngestionUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EventHubProfile"/>. </summary>
        /// <param name="adxInstanceId"> Resource Id of Adx Instance. </param>
        /// <param name="hostName"> Host Name. </param>
        /// <returns> A new <see cref="Models.EventHubProfile"/> instance for mocking. </returns>
        public static EventHubProfile EventHubProfile(string adxInstanceId = null, string hostName = null)
        {
            return new EventHubProfile(adxInstanceId, hostName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OpenAIProfile"/>. </summary>
        /// <param name="id"> Resource Id of OpenAI Resource. </param>
        /// <param name="gptModelName"> GPT Model Name. </param>
        /// <param name="gptModelVersion"> GPT Model Version. </param>
        /// <param name="gptModelCapacity"> GPT Model Capacity. </param>
        /// <param name="gptModelSkuName"> GPT Model SKU Name. </param>
        /// <param name="embeddingModelName"> Embedding Model Name. </param>
        /// <param name="embeddingModelVersion"> Embedding Model Version. </param>
        /// <param name="embeddingModelSkuName"> Embedding Model SKU Name. </param>
        /// <param name="embeddingModelCapacity"> Embedding Model Capacity. </param>
        /// <returns> A new <see cref="Models.OpenAIProfile"/> instance for mocking. </returns>
        public static OpenAIProfile OpenAIProfile(string id = null, string gptModelName = null, string gptModelVersion = null, int? gptModelCapacity = null, string gptModelSkuName = null, string embeddingModelName = null, string embeddingModelVersion = null, string embeddingModelSkuName = null, int? embeddingModelCapacity = null)
        {
            return new OpenAIProfile(
                id,
                gptModelName,
                gptModelVersion,
                gptModelCapacity,
                gptModelSkuName,
                embeddingModelName,
                embeddingModelVersion,
                embeddingModelSkuName,
                embeddingModelCapacity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ManagedResourceGroupConfiguration"/>. </summary>
        /// <param name="name"> The resource group name. </param>
        /// <param name="location"> The resource group location. </param>
        /// <returns> A new <see cref="Models.ManagedResourceGroupConfiguration"/> instance for mocking. </returns>
        public static ManagedResourceGroupConfiguration ManagedResourceGroupConfiguration(string name = null, string location = null)
        {
            return new ManagedResourceGroupConfiguration(name, location, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UserManagedAdxProfile"/>. </summary>
        /// <param name="id"> Resource Id of Adx Resource. </param>
        /// <param name="uri"> Uri of Adx Resource. </param>
        /// <param name="dataIngestionUri"> Data Ingestion Uri of Adx Resource. </param>
        /// <returns> A new <see cref="Models.UserManagedAdxProfile"/> instance for mocking. </returns>
        public static UserManagedAdxProfile UserManagedAdxProfile(string id = null, string uri = null, string dataIngestionUri = null)
        {
            return new UserManagedAdxProfile(id, uri, dataIngestionUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvailableVersionListResult"/>. </summary>
        /// <param name="versions"> The list of versions. </param>
        /// <returns> A new <see cref="Models.AvailableVersionListResult"/> instance for mocking. </returns>
        public static AvailableVersionListResult AvailableVersionListResult(IEnumerable<ApplicationVersion> versions = null)
        {
            versions ??= new List<ApplicationVersion>();

            return new AvailableVersionListResult(versions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApplicationVersion"/>. </summary>
        /// <param name="version"> Application Version. </param>
        /// <param name="isLatest"> Is Latest. </param>
        /// <param name="isPreview"> Is Preview. </param>
        /// <returns> A new <see cref="Models.ApplicationVersion"/> instance for mocking. </returns>
        public static ApplicationVersion ApplicationVersion(string version = null, bool isLatest = default, bool isPreview = default)
        {
            return new ApplicationVersion(version, isLatest, isPreview, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Operation"/>. </summary>
        /// <param name="name"> The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action". </param>
        /// <param name="isDataAction"> Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure Resource Manager/control-plane operations. </param>
        /// <param name="display"> Localized display information for this particular operation. </param>
        /// <param name="origin"> The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system". </param>
        /// <param name="actionType"> Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, bool? isDataAction = null, OperationDisplay display = null, Origin? origin = null, ActionType? actionType = null)
        {
            return new Operation(
                name,
                isDataAction,
                display,
                origin,
                actionType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationDisplay"/>. </summary>
        /// <param name="provider"> The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute". </param>
        /// <param name="resource"> The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections". </param>
        /// <param name="operation"> The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine". </param>
        /// <param name="description"> The short, localized friendly description of the operation; suitable for tool tips and detailed views. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description, serializedAdditionalRawData: null);
        }
    }
}
