// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.Network.Models;

namespace Azure.Management.Network
{
    /// <summary> Returns the list of currently active sessions on the Bastion. </summary>
    public partial class NetworkManagementGetActiveSessionsOperation : Operation<AsyncPageable<BastionActiveSession>>, IOperationSource<AsyncPageable<BastionActiveSession>>
    {
        private readonly ArmOperationHelpers<AsyncPageable<BastionActiveSession>> _operation;
        private readonly Func<string, Task<Response>> _nextPageFunc;
        internal NetworkManagementGetActiveSessionsOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, Func<string, Task<Response>> nextPageFunc)
        {
            _operation = new ArmOperationHelpers<AsyncPageable<BastionActiveSession>>(this, clientDiagnostics, pipeline, request, response, OperationFinalStateVia.Location, "NetworkManagementGetActiveSessionsOperation");
            _nextPageFunc = nextPageFunc;
        }
        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override AsyncPageable<BastionActiveSession> Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<AsyncPageable<BastionActiveSession>>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<AsyncPageable<BastionActiveSession>>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        AsyncPageable<BastionActiveSession> IOperationSource<AsyncPageable<BastionActiveSession>>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            BastionActiveSessionListResult firstPageResult;
            using var document = JsonDocument.Parse(response.ContentStream);
            firstPageResult = BastionActiveSessionListResult.DeserializeBastionActiveSessionListResult(document.RootElement);
            Page<BastionActiveSession> firstPage = Page.FromValues(firstPageResult.Value, firstPageResult.NextLink, response);

            return PageableHelpers.CreateAsyncEnumerable(_ => Task.FromResult(firstPage), (nextLink, _) => GetNextPage(nextLink, cancellationToken));
        }

        async ValueTask<AsyncPageable<BastionActiveSession>> IOperationSource<AsyncPageable<BastionActiveSession>>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            BastionActiveSessionListResult firstPageResult;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            firstPageResult = BastionActiveSessionListResult.DeserializeBastionActiveSessionListResult(document.RootElement);
            Page<BastionActiveSession> firstPage = Page.FromValues(firstPageResult.Value, firstPageResult.NextLink, response);

            return PageableHelpers.CreateAsyncEnumerable(_ => Task.FromResult(firstPage), (nextLink, _) => GetNextPage(nextLink, cancellationToken));
        }

        private async Task<Page<BastionActiveSession>> GetNextPage(string nextLink, CancellationToken cancellationToken)
        {
            Response response = await _nextPageFunc(nextLink).ConfigureAwait(false);
            BastionActiveSessionListResult nextPageResult;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            nextPageResult = BastionActiveSessionListResult.DeserializeBastionActiveSessionListResult(document.RootElement);
            return Page.FromValues(nextPageResult.Value, nextPageResult.NextLink, response);
        }
    }
}
