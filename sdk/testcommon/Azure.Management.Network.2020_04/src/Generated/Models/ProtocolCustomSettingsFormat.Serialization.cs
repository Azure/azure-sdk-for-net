// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Network.Models
{
    public partial class ProtocolCustomSettingsFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Protocol != null)
            {
                writer.WritePropertyName("protocol");
                writer.WriteStringValue(Protocol.Value.ToString());
            }
            if (TriggerRateOverride != null)
            {
                writer.WritePropertyName("triggerRateOverride");
                writer.WriteStringValue(TriggerRateOverride);
            }
            if (SourceRateOverride != null)
            {
                writer.WritePropertyName("sourceRateOverride");
                writer.WriteStringValue(SourceRateOverride);
            }
            if (TriggerSensitivityOverride != null)
            {
                writer.WritePropertyName("triggerSensitivityOverride");
                writer.WriteStringValue(TriggerSensitivityOverride.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static ProtocolCustomSettingsFormat DeserializeProtocolCustomSettingsFormat(JsonElement element)
        {
            DdosCustomPolicyProtocol? protocol = default;
            string triggerRateOverride = default;
            string sourceRateOverride = default;
            DdosCustomPolicyTriggerSensitivityOverride? triggerSensitivityOverride = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protocol = new DdosCustomPolicyProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("triggerRateOverride"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    triggerRateOverride = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceRateOverride"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceRateOverride = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("triggerSensitivityOverride"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    triggerSensitivityOverride = new DdosCustomPolicyTriggerSensitivityOverride(property.Value.GetString());
                    continue;
                }
            }
            return new ProtocolCustomSettingsFormat(protocol, triggerRateOverride, sourceRateOverride, triggerSensitivityOverride);
        }
    }
}
