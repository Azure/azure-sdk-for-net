// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Network.Models
{
    public partial class PolicySettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (State != null)
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Mode != null)
            {
                writer.WritePropertyName("mode");
                writer.WriteStringValue(Mode.Value.ToString());
            }
            if (RequestBodyCheck != null)
            {
                writer.WritePropertyName("requestBodyCheck");
                writer.WriteBooleanValue(RequestBodyCheck.Value);
            }
            if (MaxRequestBodySizeInKb != null)
            {
                writer.WritePropertyName("maxRequestBodySizeInKb");
                writer.WriteNumberValue(MaxRequestBodySizeInKb.Value);
            }
            if (FileUploadLimitInMb != null)
            {
                writer.WritePropertyName("fileUploadLimitInMb");
                writer.WriteNumberValue(FileUploadLimitInMb.Value);
            }
            writer.WriteEndObject();
        }

        internal static PolicySettings DeserializePolicySettings(JsonElement element)
        {
            WebApplicationFirewallEnabledState? state = default;
            WebApplicationFirewallMode? mode = default;
            bool? requestBodyCheck = default;
            int? maxRequestBodySizeInKb = default;
            int? fileUploadLimitInMb = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new WebApplicationFirewallEnabledState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("mode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new WebApplicationFirewallMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("requestBodyCheck"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    requestBodyCheck = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("maxRequestBodySizeInKb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxRequestBodySizeInKb = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fileUploadLimitInMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fileUploadLimitInMb = property.Value.GetInt32();
                    continue;
                }
            }
            return new PolicySettings(state, mode, requestBodyCheck, maxRequestBodySizeInKb, fileUploadLimitInMb);
        }
    }
}
