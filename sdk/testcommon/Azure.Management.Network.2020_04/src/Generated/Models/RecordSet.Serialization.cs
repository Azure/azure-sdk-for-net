// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Network.Models
{
    public partial class RecordSet : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RecordType))
            {
                writer.WritePropertyName("recordType");
                writer.WriteStringValue(RecordType);
            }
            if (Optional.IsDefined(RecordSetName))
            {
                writer.WritePropertyName("recordSetName");
                writer.WriteStringValue(RecordSetName);
            }
            if (Optional.IsDefined(Fqdn))
            {
                writer.WritePropertyName("fqdn");
                writer.WriteStringValue(Fqdn);
            }
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Ttl))
            {
                writer.WritePropertyName("ttl");
                writer.WriteNumberValue(Ttl.Value);
            }
            if (Optional.IsDefined(IpAddresses))
            {
                writer.WritePropertyName("ipAddresses");
                writer.WriteStartArray();
                foreach (var item in IpAddresses)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static RecordSet DeserializeRecordSet(JsonElement element)
        {
            Optional<string> recordType = default;
            Optional<string> recordSetName = default;
            Optional<string> fqdn = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<int> ttl = default;
            Optional<IList<string>> ipAddresses = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("recordType"))
                {
                    recordType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recordSetName"))
                {
                    recordSetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fqdn"))
                {
                    fqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ttl"))
                {
                    ttl = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ipAddresses"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    ipAddresses = array;
                    continue;
                }
            }
            return new RecordSet(recordType.HasValue ? recordType.Value : null, recordSetName.HasValue ? recordSetName.Value : null, fqdn.HasValue ? fqdn.Value : null, provisioningState.HasValue ? provisioningState.Value : (ProvisioningState?)null, ttl.HasValue ? ttl.Value : (int?)null, new ChangeTrackingList<string>(ipAddresses));
        }
    }
}
