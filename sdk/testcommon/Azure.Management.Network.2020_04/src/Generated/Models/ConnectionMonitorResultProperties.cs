// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Management.Network.Models
{
    /// <summary> Describes the properties of a connection monitor. </summary>
    public partial class ConnectionMonitorResultProperties : ConnectionMonitorParameters
    {
        /// <summary> Initializes a new instance of ConnectionMonitorResultProperties. </summary>
        public ConnectionMonitorResultProperties()
        {
        }

        /// <summary> Initializes a new instance of ConnectionMonitorResultProperties. </summary>
        /// <param name="source"> Describes the source of connection monitor. </param>
        /// <param name="destination"> Describes the destination of connection monitor. </param>
        /// <param name="autoStart"> Determines if the connection monitor will start automatically once created. </param>
        /// <param name="monitoringIntervalInSeconds"> Monitoring interval in seconds. </param>
        /// <param name="endpoints"> List of connection monitor endpoints. </param>
        /// <param name="testConfigurations"> List of connection monitor test configurations. </param>
        /// <param name="testGroups"> List of connection monitor test groups. </param>
        /// <param name="outputs"> List of connection monitor outputs. </param>
        /// <param name="notes"> Optional notes to be associated with the connection monitor. </param>
        /// <param name="provisioningState"> The provisioning state of the connection monitor. </param>
        /// <param name="startTime"> The date and time when the connection monitor was started. </param>
        /// <param name="monitoringStatus"> The monitoring status of the connection monitor. </param>
        /// <param name="connectionMonitorType"> Type of connection monitor. </param>
        internal ConnectionMonitorResultProperties(ConnectionMonitorSource source, ConnectionMonitorDestination destination, bool? autoStart, int? monitoringIntervalInSeconds, IList<ConnectionMonitorEndpoint> endpoints, IList<ConnectionMonitorTestConfiguration> testConfigurations, IList<ConnectionMonitorTestGroup> testGroups, IList<ConnectionMonitorOutput> outputs, string notes, ProvisioningState? provisioningState, DateTimeOffset? startTime, string monitoringStatus, ConnectionMonitorType? connectionMonitorType) : base(source, destination, autoStart, monitoringIntervalInSeconds, endpoints, testConfigurations, testGroups, outputs, notes)
        {
            ProvisioningState = provisioningState;
            StartTime = startTime;
            MonitoringStatus = monitoringStatus;
            ConnectionMonitorType = connectionMonitorType;
        }

        /// <summary> The provisioning state of the connection monitor. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The date and time when the connection monitor was started. </summary>
        public DateTimeOffset? StartTime { get; }
        /// <summary> The monitoring status of the connection monitor. </summary>
        public string MonitoringStatus { get; }
        /// <summary> Type of connection monitor. </summary>
        public ConnectionMonitorType? ConnectionMonitorType { get; }
    }
}
