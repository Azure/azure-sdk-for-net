// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Network.Models
{
    public partial class VpnClientConnectionHealthDetail
    {
        internal static VpnClientConnectionHealthDetail DeserializeVpnClientConnectionHealthDetail(JsonElement element)
        {
            string vpnConnectionId = default;
            long? vpnConnectionDuration = default;
            string vpnConnectionTime = default;
            string publicIpAddress = default;
            string privateIpAddress = default;
            string vpnUserName = default;
            long? maxBandwidth = default;
            long? egressPacketsTransferred = default;
            long? egressBytesTransferred = default;
            long? ingressPacketsTransferred = default;
            long? ingressBytesTransferred = default;
            long? maxPacketsPerSecond = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vpnConnectionId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vpnConnectionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vpnConnectionDuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vpnConnectionDuration = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("vpnConnectionTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vpnConnectionTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publicIpAddress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicIpAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateIpAddress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    privateIpAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vpnUserName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vpnUserName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxBandwidth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxBandwidth = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("egressPacketsTransferred"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    egressPacketsTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("egressBytesTransferred"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    egressBytesTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("ingressPacketsTransferred"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingressPacketsTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("ingressBytesTransferred"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingressBytesTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("maxPacketsPerSecond"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxPacketsPerSecond = property.Value.GetInt64();
                    continue;
                }
            }
            return new VpnClientConnectionHealthDetail(vpnConnectionId, vpnConnectionDuration, vpnConnectionTime, publicIpAddress, privateIpAddress, vpnUserName, maxBandwidth, egressPacketsTransferred, egressBytesTransferred, ingressPacketsTransferred, ingressBytesTransferred, maxPacketsPerSecond);
        }
    }
}
