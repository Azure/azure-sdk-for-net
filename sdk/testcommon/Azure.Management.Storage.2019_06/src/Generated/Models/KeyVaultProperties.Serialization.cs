// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Storage.Models
{
    public partial class KeyVaultProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (KeyName != null)
            {
                writer.WritePropertyName("keyname");
                writer.WriteStringValue(KeyName);
            }
            if (KeyVersion != null)
            {
                writer.WritePropertyName("keyversion");
                writer.WriteStringValue(KeyVersion);
            }
            if (KeyVaultUri != null)
            {
                writer.WritePropertyName("keyvaulturi");
                writer.WriteStringValue(KeyVaultUri);
            }
            if (CurrentVersionedKeyIdentifier != null)
            {
                writer.WritePropertyName("currentVersionedKeyIdentifier");
                writer.WriteStringValue(CurrentVersionedKeyIdentifier);
            }
            if (LastKeyRotationTimestamp != null)
            {
                writer.WritePropertyName("lastKeyRotationTimestamp");
                writer.WriteStringValue(LastKeyRotationTimestamp.Value, "O");
            }
            writer.WriteEndObject();
        }

        internal static KeyVaultProperties DeserializeKeyVaultProperties(JsonElement element)
        {
            string keyname = default;
            string keyversion = default;
            string keyvaulturi = default;
            string currentVersionedKeyIdentifier = default;
            DateTimeOffset? lastKeyRotationTimestamp = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("keyname"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyversion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyversion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyvaulturi"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyvaulturi = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("currentVersionedKeyIdentifier"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentVersionedKeyIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastKeyRotationTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastKeyRotationTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new KeyVaultProperties(keyname, keyversion, keyvaulturi, currentVersionedKeyIdentifier, lastKeyRotationTimestamp);
        }
    }
}
