// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Graph.Rbac.Models
{
    /// <summary> The OAuth2PermissionGrant. </summary>
    public partial class OAuth2PermissionGrant
    {
        /// <summary> Initializes a new instance of OAuth2PermissionGrant. </summary>
        public OAuth2PermissionGrant()
        {
        }

        /// <summary> Initializes a new instance of OAuth2PermissionGrant. </summary>
        /// <param name="odataType"> Microsoft.DirectoryServices.OAuth2PermissionGrant. </param>
        /// <param name="clientId"> The id of the resource&apos;s service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property). </param>
        /// <param name="objectId"> The id of the permission grant. </param>
        /// <param name="consentType"> Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual. </param>
        /// <param name="principalId"> When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user. </param>
        /// <param name="resourceId"> Object Id of the resource you want to grant. </param>
        /// <param name="scope"> Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read. </param>
        /// <param name="startTime"> Start time for TTL. </param>
        /// <param name="expiryTime"> Expiry time for TTL. </param>
        internal OAuth2PermissionGrant(string odataType, string clientId, string objectId, ConsentType? consentType, string principalId, string resourceId, string scope, string startTime, string expiryTime)
        {
            OdataType = odataType;
            ClientId = clientId;
            ObjectId = objectId;
            ConsentType = consentType;
            PrincipalId = principalId;
            ResourceId = resourceId;
            Scope = scope;
            StartTime = startTime;
            ExpiryTime = expiryTime;
        }

        /// <summary> Microsoft.DirectoryServices.OAuth2PermissionGrant. </summary>
        public string OdataType { get; set; }
        /// <summary> The id of the resource&apos;s service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property). </summary>
        public string ClientId { get; set; }
        /// <summary> The id of the permission grant. </summary>
        public string ObjectId { get; set; }
        /// <summary> Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual. </summary>
        public ConsentType? ConsentType { get; set; }
        /// <summary> When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user. </summary>
        public string PrincipalId { get; set; }
        /// <summary> Object Id of the resource you want to grant. </summary>
        public string ResourceId { get; set; }
        /// <summary> Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read. </summary>
        public string Scope { get; set; }
        /// <summary> Start time for TTL. </summary>
        public string StartTime { get; set; }
        /// <summary> Expiry time for TTL. </summary>
        public string ExpiryTime { get; set; }
    }
}
