// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Graph.Rbac.Models
{
    /// <summary> Active Directory service principal information. </summary>
    public partial class ServicePrincipal : DirectoryObject
    {
        /// <summary> Initializes a new instance of ServicePrincipal. </summary>
        internal ServicePrincipal()
        {
            AlternativeNames = new ChangeTrackingList<string>();
            AppRoles = new ChangeTrackingList<AppRole>();
            KeyCredentials = new ChangeTrackingList<KeyCredential>();
            Oauth2Permissions = new ChangeTrackingList<OAuth2Permission>();
            PasswordCredentials = new ChangeTrackingList<PasswordCredential>();
            ReplyUrls = new ChangeTrackingList<string>();
            ServicePrincipalNames = new ChangeTrackingList<string>();
            Tags = new ChangeTrackingList<string>();
            ObjectType = "ServicePrincipal";
        }

        /// <summary> Initializes a new instance of ServicePrincipal. </summary>
        /// <param name="objectId"> The object ID. </param>
        /// <param name="objectType"> The object type. </param>
        /// <param name="deletionTimestamp"> The time at which the directory object was deleted. </param>
        /// <param name="additionalProperties"> . </param>
        /// <param name="accountEnabled"> whether or not the service principal account is enabled. </param>
        /// <param name="alternativeNames"> alternative names. </param>
        /// <param name="appDisplayName"> The display name exposed by the associated application. </param>
        /// <param name="appId"> The application ID. </param>
        /// <param name="appOwnerTenantId"> . </param>
        /// <param name="appRoleAssignmentRequired"> Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application. </param>
        /// <param name="appRoles"> The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals. </param>
        /// <param name="displayName"> The display name of the service principal. </param>
        /// <param name="errorUrl"> A URL provided by the author of the associated application to report errors when using the application. </param>
        /// <param name="homepage"> The URL to the homepage of the associated application. </param>
        /// <param name="keyCredentials"> The collection of key credentials associated with the service principal. </param>
        /// <param name="logoutUrl"> A URL provided by the author of the associated application to logout. </param>
        /// <param name="oauth2Permissions"> The OAuth 2.0 permissions exposed by the associated application. </param>
        /// <param name="passwordCredentials"> The collection of password credentials associated with the service principal. </param>
        /// <param name="preferredTokenSigningKeyThumbprint"> The thumbprint of preferred certificate to sign the token. </param>
        /// <param name="publisherName"> The publisher&apos;s name of the associated application. </param>
        /// <param name="replyUrls"> The URLs that user tokens are sent to for sign in with the associated application.  The redirect URIs that the oAuth 2.0 authorization code and access tokens are sent to for the associated application. </param>
        /// <param name="samlMetadataUrl"> The URL to the SAML metadata of the associated application. </param>
        /// <param name="servicePrincipalNames"> A collection of service principal names. </param>
        /// <param name="servicePrincipalType"> the type of the service principal. </param>
        /// <param name="tags"> Optional list of tags that you can apply to your service principals. Not nullable. </param>
        internal ServicePrincipal(string objectId, string objectType, DateTimeOffset? deletionTimestamp, IReadOnlyDictionary<string, object> additionalProperties, bool? accountEnabled, IReadOnlyList<string> alternativeNames, string appDisplayName, string appId, string appOwnerTenantId, bool? appRoleAssignmentRequired, IReadOnlyList<AppRole> appRoles, string displayName, string errorUrl, string homepage, IReadOnlyList<KeyCredential> keyCredentials, string logoutUrl, IReadOnlyList<OAuth2Permission> oauth2Permissions, IReadOnlyList<PasswordCredential> passwordCredentials, string preferredTokenSigningKeyThumbprint, string publisherName, IReadOnlyList<string> replyUrls, string samlMetadataUrl, IReadOnlyList<string> servicePrincipalNames, string servicePrincipalType, IReadOnlyList<string> tags) : base(objectId, objectType, deletionTimestamp, additionalProperties)
        {
            AccountEnabled = accountEnabled;
            AlternativeNames = alternativeNames;
            AppDisplayName = appDisplayName;
            AppId = appId;
            AppOwnerTenantId = appOwnerTenantId;
            AppRoleAssignmentRequired = appRoleAssignmentRequired;
            AppRoles = appRoles;
            DisplayName = displayName;
            ErrorUrl = errorUrl;
            Homepage = homepage;
            KeyCredentials = keyCredentials;
            LogoutUrl = logoutUrl;
            Oauth2Permissions = oauth2Permissions;
            PasswordCredentials = passwordCredentials;
            PreferredTokenSigningKeyThumbprint = preferredTokenSigningKeyThumbprint;
            PublisherName = publisherName;
            ReplyUrls = replyUrls;
            SamlMetadataUrl = samlMetadataUrl;
            ServicePrincipalNames = servicePrincipalNames;
            ServicePrincipalType = servicePrincipalType;
            Tags = tags;
            ObjectType = objectType ?? "ServicePrincipal";
        }

        /// <summary> whether or not the service principal account is enabled. </summary>
        public bool? AccountEnabled { get; }
        /// <summary> alternative names. </summary>
        public IReadOnlyList<string> AlternativeNames { get; }
        /// <summary> The display name exposed by the associated application. </summary>
        public string AppDisplayName { get; }
        /// <summary> The application ID. </summary>
        public string AppId { get; }
        public string AppOwnerTenantId { get; }
        /// <summary> Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application. </summary>
        public bool? AppRoleAssignmentRequired { get; }
        /// <summary> The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals. </summary>
        public IReadOnlyList<AppRole> AppRoles { get; }
        /// <summary> The display name of the service principal. </summary>
        public string DisplayName { get; }
        /// <summary> A URL provided by the author of the associated application to report errors when using the application. </summary>
        public string ErrorUrl { get; }
        /// <summary> The URL to the homepage of the associated application. </summary>
        public string Homepage { get; }
        /// <summary> The collection of key credentials associated with the service principal. </summary>
        public IReadOnlyList<KeyCredential> KeyCredentials { get; }
        /// <summary> A URL provided by the author of the associated application to logout. </summary>
        public string LogoutUrl { get; }
        /// <summary> The OAuth 2.0 permissions exposed by the associated application. </summary>
        public IReadOnlyList<OAuth2Permission> Oauth2Permissions { get; }
        /// <summary> The collection of password credentials associated with the service principal. </summary>
        public IReadOnlyList<PasswordCredential> PasswordCredentials { get; }
        /// <summary> The thumbprint of preferred certificate to sign the token. </summary>
        public string PreferredTokenSigningKeyThumbprint { get; }
        /// <summary> The publisher&apos;s name of the associated application. </summary>
        public string PublisherName { get; }
        /// <summary> The URLs that user tokens are sent to for sign in with the associated application.  The redirect URIs that the oAuth 2.0 authorization code and access tokens are sent to for the associated application. </summary>
        public IReadOnlyList<string> ReplyUrls { get; }
        /// <summary> The URL to the SAML metadata of the associated application. </summary>
        public string SamlMetadataUrl { get; }
        /// <summary> A collection of service principal names. </summary>
        public IReadOnlyList<string> ServicePrincipalNames { get; }
        /// <summary> the type of the service principal. </summary>
        public string ServicePrincipalType { get; }
        /// <summary> Optional list of tags that you can apply to your service principals. Not nullable. </summary>
        public IReadOnlyList<string> Tags { get; }
    }
}
