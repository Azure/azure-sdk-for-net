// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Graph.Rbac.Models
{
    /// <summary> Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual. </summary>
    public readonly partial struct ConsentType : IEquatable<ConsentType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ConsentType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConsentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllPrincipalsValue = "AllPrincipals";
        private const string PrincipalValue = "Principal";

        /// <summary> AllPrincipals. </summary>
        public static ConsentType AllPrincipals { get; } = new ConsentType(AllPrincipalsValue);
        /// <summary> Principal. </summary>
        public static ConsentType Principal { get; } = new ConsentType(PrincipalValue);
        /// <summary> Determines if two <see cref="ConsentType"/> values are the same. </summary>
        public static bool operator ==(ConsentType left, ConsentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConsentType"/> values are not the same. </summary>
        public static bool operator !=(ConsentType left, ConsentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConsentType"/>. </summary>
        public static implicit operator ConsentType(string value) => new ConsentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConsentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConsentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
