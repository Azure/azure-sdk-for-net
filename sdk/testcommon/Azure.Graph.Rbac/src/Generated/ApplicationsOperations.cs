// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Graph.Rbac.Models;

namespace Azure.Graph.Rbac
{
    /// <summary> The Applications service client. </summary>
    public partial class ApplicationsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ApplicationsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of ApplicationsOperations for mocking. </summary>
        protected ApplicationsOperations()
        {
        }
        /// <summary> Initializes a new instance of ApplicationsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tenantID"> The tenant ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal ApplicationsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string tenantID, Uri endpoint = null, string apiVersion = "1.6")
        {
            RestClient = new ApplicationsRestOperations(clientDiagnostics, pipeline, tenantID, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Create a new application. </summary>
        /// <param name="parameters"> The parameters for creating an application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Application>> CreateAsync(ApplicationCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.Create");
            scope.Start();
            try
            {
                return await RestClient.CreateAsync(parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new application. </summary>
        /// <param name="parameters"> The parameters for creating an application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Application> Create(ApplicationCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.Create");
            scope.Start();
            try
            {
                return RestClient.Create(parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(applicationObjectId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an application by object ID. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Application>> GetAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an application by object ID. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Application> Get(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(applicationObjectId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an existing application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PatchAsync(string applicationObjectId, ApplicationUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.Patch");
            scope.Start();
            try
            {
                return await RestClient.PatchAsync(applicationObjectId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an existing application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Patch(string applicationObjectId, ApplicationUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.Patch");
            scope.Start();
            try
            {
                return RestClient.Patch(applicationObjectId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add an owner to an application. </summary>
        /// <param name="applicationObjectId"> The object ID of the application to which to add the owner. </param>
        /// <param name="parameters"> The URL of the owner object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddOwnerAsync(string applicationObjectId, AddOwnerParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.AddOwner");
            scope.Start();
            try
            {
                return await RestClient.AddOwnerAsync(applicationObjectId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add an owner to an application. </summary>
        /// <param name="applicationObjectId"> The object ID of the application to which to add the owner. </param>
        /// <param name="parameters"> The URL of the owner object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddOwner(string applicationObjectId, AddOwnerParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.AddOwner");
            scope.Start();
            try
            {
                return RestClient.AddOwner(applicationObjectId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a member from owners. </summary>
        /// <param name="applicationObjectId"> The object ID of the application from which to remove the owner. </param>
        /// <param name="ownerObjectId"> Owner object id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveOwnerAsync(string applicationObjectId, string ownerObjectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.RemoveOwner");
            scope.Start();
            try
            {
                return await RestClient.RemoveOwnerAsync(applicationObjectId, ownerObjectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a member from owners. </summary>
        /// <param name="applicationObjectId"> The object ID of the application from which to remove the owner. </param>
        /// <param name="ownerObjectId"> Owner object id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveOwner(string applicationObjectId, string ownerObjectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.RemoveOwner");
            scope.Start();
            try
            {
                return RestClient.RemoveOwner(applicationObjectId, ownerObjectId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update the keyCredentials of an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateKeyCredentialsAsync(string applicationObjectId, KeyCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.UpdateKeyCredentials");
            scope.Start();
            try
            {
                return await RestClient.UpdateKeyCredentialsAsync(applicationObjectId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update the keyCredentials of an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateKeyCredentials(string applicationObjectId, KeyCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.UpdateKeyCredentials");
            scope.Start();
            try
            {
                return RestClient.UpdateKeyCredentials(applicationObjectId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update passwordCredentials of an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdatePasswordCredentialsAsync(string applicationObjectId, PasswordCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.UpdatePasswordCredentials");
            scope.Start();
            try
            {
                return await RestClient.UpdatePasswordCredentialsAsync(applicationObjectId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update passwordCredentials of an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdatePasswordCredentials(string applicationObjectId, PasswordCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.UpdatePasswordCredentials");
            scope.Start();
            try
            {
                return RestClient.UpdatePasswordCredentials(applicationObjectId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an object id for a given application id from the current tenant. </summary>
        /// <param name="applicationID"> The application ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServicePrincipalObjectResult>> GetServicePrincipalsIdByAppIdAsync(string applicationID, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.GetServicePrincipalsIdByAppId");
            scope.Start();
            try
            {
                return await RestClient.GetServicePrincipalsIdByAppIdAsync(applicationID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an object id for a given application id from the current tenant. </summary>
        /// <param name="applicationID"> The application ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServicePrincipalObjectResult> GetServicePrincipalsIdByAppId(string applicationID, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.GetServicePrincipalsIdByAppId");
            scope.Start();
            try
            {
                return RestClient.GetServicePrincipalsIdByAppId(applicationID, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists applications by filter parameters. </summary>
        /// <param name="filter"> The filters to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Application> ListAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Application>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Application>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists applications by filter parameters. </summary>
        /// <param name="filter"> The filters to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Application> List(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Application> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Application> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNext(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="applicationObjectId"> The object ID of the application for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<DirectoryObject> ListOwnersAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            async Task<Page<DirectoryObject>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListOwners");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOwnersAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DirectoryObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListOwners");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOwnersNextPageAsync(nextLink, applicationObjectId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="applicationObjectId"> The object ID of the application for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<DirectoryObject> ListOwners(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            Page<DirectoryObject> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListOwners");
                scope.Start();
                try
                {
                    var response = RestClient.ListOwners(applicationObjectId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DirectoryObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListOwners");
                scope.Start();
                try
                {
                    var response = RestClient.ListOwnersNextPage(nextLink, applicationObjectId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<KeyCredential> ListKeyCredentialsAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            async Task<Page<KeyCredential>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListKeyCredentials");
                scope.Start();
                try
                {
                    var response = await RestClient.ListKeyCredentialsAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Get the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<KeyCredential> ListKeyCredentials(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            Page<KeyCredential> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListKeyCredentials");
                scope.Start();
                try
                {
                    var response = RestClient.ListKeyCredentials(applicationObjectId, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Get the passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PasswordCredential> ListPasswordCredentialsAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            async Task<Page<PasswordCredential>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListPasswordCredentials");
                scope.Start();
                try
                {
                    var response = await RestClient.ListPasswordCredentialsAsync(applicationObjectId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Get the passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PasswordCredential> ListPasswordCredentials(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            Page<PasswordCredential> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListPasswordCredentials");
                scope.Start();
                try
                {
                    var response = RestClient.ListPasswordCredentials(applicationObjectId, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets a list of applications from the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Application> ListNextAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            async Task<Page<Application>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListNext");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Application>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListNext");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of applications from the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Application> ListNext(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            Page<Application> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListNext");
                scope.Start();
                try
                {
                    var response = RestClient.ListNext(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Application> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationsOperations.ListNext");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
