// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Graph.Rbac.Models;

namespace Azure.Graph.Rbac
{
    internal partial class ApplicationsRestOperations
    {
        private string tenantID;
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ApplicationsRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tenantID"> The tenant ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> This occurs when one of the required arguments is null. </exception>
        public ApplicationsRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string tenantID, Uri endpoint = null, string apiVersion = "1.6")
        {
            if (tenantID == null)
            {
                throw new ArgumentNullException(nameof(tenantID));
            }
            endpoint ??= new Uri("https://graph.windows.net");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.tenantID = tenantID;
            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateRequest(ApplicationCreateParameters parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Create a new application. </summary>
        /// <param name="parameters"> The parameters for creating an application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Application>> CreateAsync(ApplicationCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCreateRequest(parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Application value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Application.DeserializeApplication(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new application. </summary>
        /// <param name="parameters"> The parameters for creating an application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Application> Create(ApplicationCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCreateRequest(parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Application value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Application.DeserializeApplication(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRequest(string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Lists applications by filter parameters. </summary>
        /// <param name="filter"> The filters to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ApplicationListResult>> ListAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApplicationListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists applications by filter parameters. </summary>
        /// <param name="filter"> The filters to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ApplicationListResult> List(string filter = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApplicationListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string applicationObjectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Delete an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateDeleteRequest(applicationObjectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Delete(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateDeleteRequest(applicationObjectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string applicationObjectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get an application by object ID. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Application>> GetAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateGetRequest(applicationObjectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Application value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Application.DeserializeApplication(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get an application by object ID. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Application> Get(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateGetRequest(applicationObjectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Application value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Application.DeserializeApplication(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatchRequest(string applicationObjectId, ApplicationUpdateParameters parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Update an existing application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> PatchAsync(string applicationObjectId, ApplicationUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreatePatchRequest(applicationObjectId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an existing application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Patch(string applicationObjectId, ApplicationUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreatePatchRequest(applicationObjectId, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListOwnersRequest(string applicationObjectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendPath("/owners", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="applicationObjectId"> The object ID of the application for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DirectoryObjectListResult>> ListOwnersAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateListOwnersRequest(applicationObjectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DirectoryObjectListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DirectoryObjectListResult.DeserializeDirectoryObjectListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="applicationObjectId"> The object ID of the application for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DirectoryObjectListResult> ListOwners(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateListOwnersRequest(applicationObjectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DirectoryObjectListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DirectoryObjectListResult.DeserializeDirectoryObjectListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddOwnerRequest(string applicationObjectId, AddOwnerParameters parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendPath("/$links/owners", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Add an owner to an application. </summary>
        /// <param name="applicationObjectId"> The object ID of the application to which to add the owner. </param>
        /// <param name="parameters"> The URL of the owner object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> AddOwnerAsync(string applicationObjectId, AddOwnerParameters parameters, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateAddOwnerRequest(applicationObjectId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add an owner to an application. </summary>
        /// <param name="applicationObjectId"> The object ID of the application to which to add the owner. </param>
        /// <param name="parameters"> The URL of the owner object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response AddOwner(string applicationObjectId, AddOwnerParameters parameters, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateAddOwnerRequest(applicationObjectId, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveOwnerRequest(string applicationObjectId, string ownerObjectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendPath("/$links/owners/", false);
            uri.AppendPath(ownerObjectId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a member from owners. </summary>
        /// <param name="applicationObjectId"> The object ID of the application from which to remove the owner. </param>
        /// <param name="ownerObjectId"> Owner object id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> RemoveOwnerAsync(string applicationObjectId, string ownerObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (ownerObjectId == null)
            {
                throw new ArgumentNullException(nameof(ownerObjectId));
            }

            using var message = CreateRemoveOwnerRequest(applicationObjectId, ownerObjectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a member from owners. </summary>
        /// <param name="applicationObjectId"> The object ID of the application from which to remove the owner. </param>
        /// <param name="ownerObjectId"> Owner object id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response RemoveOwner(string applicationObjectId, string ownerObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (ownerObjectId == null)
            {
                throw new ArgumentNullException(nameof(ownerObjectId));
            }

            using var message = CreateRemoveOwnerRequest(applicationObjectId, ownerObjectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListKeyCredentialsRequest(string applicationObjectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendPath("/keyCredentials", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<KeyCredentialListResult>> ListKeyCredentialsAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateListKeyCredentialsRequest(applicationObjectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        KeyCredentialListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = KeyCredentialListResult.DeserializeKeyCredentialListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<KeyCredentialListResult> ListKeyCredentials(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateListKeyCredentialsRequest(applicationObjectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        KeyCredentialListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = KeyCredentialListResult.DeserializeKeyCredentialListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateKeyCredentialsRequest(string applicationObjectId, KeyCredentialsUpdateParameters parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendPath("/keyCredentials", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Update the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update the keyCredentials of an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> UpdateKeyCredentialsAsync(string applicationObjectId, KeyCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateKeyCredentialsRequest(applicationObjectId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the keyCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update the keyCredentials of an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response UpdateKeyCredentials(string applicationObjectId, KeyCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateKeyCredentialsRequest(applicationObjectId, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListPasswordCredentialsRequest(string applicationObjectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendPath("/passwordCredentials", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get the passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PasswordCredentialListResult>> ListPasswordCredentialsAsync(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateListPasswordCredentialsRequest(applicationObjectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PasswordCredentialListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PasswordCredentialListResult.DeserializePasswordCredentialListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PasswordCredentialListResult> ListPasswordCredentials(string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateListPasswordCredentialsRequest(applicationObjectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PasswordCredentialListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PasswordCredentialListResult.DeserializePasswordCredentialListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdatePasswordCredentialsRequest(string applicationObjectId, PasswordCredentialsUpdateParameters parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationObjectId, true);
            uri.AppendPath("/passwordCredentials", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Update passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update passwordCredentials of an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> UpdatePasswordCredentialsAsync(string applicationObjectId, PasswordCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdatePasswordCredentialsRequest(applicationObjectId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update passwordCredentials associated with an application. </summary>
        /// <param name="applicationObjectId"> Application object ID. </param>
        /// <param name="parameters"> Parameters to update passwordCredentials of an existing application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response UpdatePasswordCredentials(string applicationObjectId, PasswordCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdatePasswordCredentialsRequest(applicationObjectId, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetServicePrincipalsIdByAppIdRequest(string applicationID)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/servicePrincipalsByAppId/", false);
            uri.AppendPath(applicationID, true);
            uri.AppendPath("/objectId", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Gets an object id for a given application id from the current tenant. </summary>
        /// <param name="applicationID"> The application ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ServicePrincipalObjectResult>> GetServicePrincipalsIdByAppIdAsync(string applicationID, CancellationToken cancellationToken = default)
        {
            if (applicationID == null)
            {
                throw new ArgumentNullException(nameof(applicationID));
            }

            using var message = CreateGetServicePrincipalsIdByAppIdRequest(applicationID);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServicePrincipalObjectResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ServicePrincipalObjectResult.DeserializeServicePrincipalObjectResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets an object id for a given application id from the current tenant. </summary>
        /// <param name="applicationID"> The application ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ServicePrincipalObjectResult> GetServicePrincipalsIdByAppId(string applicationID, CancellationToken cancellationToken = default)
        {
            if (applicationID == null)
            {
                throw new ArgumentNullException(nameof(applicationID));
            }

            using var message = CreateGetServicePrincipalsIdByAppIdRequest(applicationID);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServicePrincipalObjectResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ServicePrincipalObjectResult.DeserializeServicePrincipalObjectResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(tenantID, true);
            uri.AppendPath("/", false);
            uri.AppendRaw(nextLink, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Gets a list of applications from the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ApplicationListResult>> ListNextAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApplicationListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of applications from the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ApplicationListResult> ListNext(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApplicationListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListOwnersNextPageRequest(string nextLink, string applicationObjectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            return message;
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="applicationObjectId"> The object ID of the application for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DirectoryObjectListResult>> ListOwnersNextPageAsync(string nextLink, string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateListOwnersNextPageRequest(nextLink, applicationObjectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DirectoryObjectListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DirectoryObjectListResult.DeserializeDirectoryObjectListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="applicationObjectId"> The object ID of the application for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DirectoryObjectListResult> ListOwnersNextPage(string nextLink, string applicationObjectId, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (applicationObjectId == null)
            {
                throw new ArgumentNullException(nameof(applicationObjectId));
            }

            using var message = CreateListOwnersNextPageRequest(nextLink, applicationObjectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DirectoryObjectListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DirectoryObjectListResult.DeserializeDirectoryObjectListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Gets a list of applications from the current tenant. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ApplicationListResult>> ListNextNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApplicationListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of applications from the current tenant. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ApplicationListResult> ListNextNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApplicationListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
