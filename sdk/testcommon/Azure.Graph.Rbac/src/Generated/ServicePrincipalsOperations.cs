// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Graph.Rbac.Models;

namespace Azure.Graph.Rbac
{
    /// <summary> The ServicePrincipals service client. </summary>
    public partial class ServicePrincipalsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ServicePrincipalsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of ServicePrincipalsOperations for mocking. </summary>
        protected ServicePrincipalsOperations()
        {
        }
        /// <summary> Initializes a new instance of ServicePrincipalsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tenantID"> The tenant ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal ServicePrincipalsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string tenantID, Uri endpoint = null, string apiVersion = "1.6")
        {
            RestClient = new ServicePrincipalsRestOperations(clientDiagnostics, pipeline, tenantID, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Creates a service principal in the directory. </summary>
        /// <param name="parameters"> Parameters to create a service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServicePrincipal>> CreateAsync(ServicePrincipalCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.Create");
            scope.Start();
            try
            {
                return await RestClient.CreateAsync(parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a service principal in the directory. </summary>
        /// <param name="parameters"> Parameters to create a service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServicePrincipal> Create(ServicePrincipalCreateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.Create");
            scope.Start();
            try
            {
                return RestClient.Create(parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a service principal in the directory. </summary>
        /// <param name="objectId"> The object ID of the service principal to delete. </param>
        /// <param name="parameters"> Parameters to update a service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAsync(string objectId, ServicePrincipalBase parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.Update");
            scope.Start();
            try
            {
                return await RestClient.UpdateAsync(objectId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a service principal in the directory. </summary>
        /// <param name="objectId"> The object ID of the service principal to delete. </param>
        /// <param name="parameters"> Parameters to update a service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Update(string objectId, ServicePrincipalBase parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.Update");
            scope.Start();
            try
            {
                return RestClient.Update(objectId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a service principal from the directory. </summary>
        /// <param name="objectId"> The object ID of the service principal to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string objectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(objectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a service principal from the directory. </summary>
        /// <param name="objectId"> The object ID of the service principal to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string objectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(objectId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets service principal information from the directory. Query by objectId or pass a filter to query by appId. </summary>
        /// <param name="objectId"> The object ID of the service principal to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServicePrincipal>> GetAsync(string objectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(objectId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets service principal information from the directory. Query by objectId or pass a filter to query by appId. </summary>
        /// <param name="objectId"> The object ID of the service principal to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServicePrincipal> Get(string objectId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(objectId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the keyCredentials associated with a service principal. </summary>
        /// <param name="objectId"> The object ID for which to get service principal information. </param>
        /// <param name="parameters"> Parameters to update the keyCredentials of an existing service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateKeyCredentialsAsync(string objectId, KeyCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.UpdateKeyCredentials");
            scope.Start();
            try
            {
                return await RestClient.UpdateKeyCredentialsAsync(objectId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the keyCredentials associated with a service principal. </summary>
        /// <param name="objectId"> The object ID for which to get service principal information. </param>
        /// <param name="parameters"> Parameters to update the keyCredentials of an existing service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateKeyCredentials(string objectId, KeyCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.UpdateKeyCredentials");
            scope.Start();
            try
            {
                return RestClient.UpdateKeyCredentials(objectId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the passwordCredentials associated with a service principal. </summary>
        /// <param name="objectId"> The object ID of the service principal. </param>
        /// <param name="parameters"> Parameters to update the passwordCredentials of an existing service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdatePasswordCredentialsAsync(string objectId, PasswordCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.UpdatePasswordCredentials");
            scope.Start();
            try
            {
                return await RestClient.UpdatePasswordCredentialsAsync(objectId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the passwordCredentials associated with a service principal. </summary>
        /// <param name="objectId"> The object ID of the service principal. </param>
        /// <param name="parameters"> Parameters to update the passwordCredentials of an existing service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdatePasswordCredentials(string objectId, PasswordCredentialsUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.UpdatePasswordCredentials");
            scope.Start();
            try
            {
                return RestClient.UpdatePasswordCredentials(objectId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of service principals from the current tenant. </summary>
        /// <param name="filter"> The filter to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ServicePrincipal> ListAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ServicePrincipal>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ServicePrincipal>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of service principals from the current tenant. </summary>
        /// <param name="filter"> The filter to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ServicePrincipal> List(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<ServicePrincipal> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ServicePrincipal> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNext(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="objectId"> The object ID of the service principal for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="objectId"/> is null. </exception>
        public virtual AsyncPageable<DirectoryObject> ListOwnersAsync(string objectId, CancellationToken cancellationToken = default)
        {
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            async Task<Page<DirectoryObject>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListOwners");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOwnersAsync(objectId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DirectoryObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListOwners");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOwnersNextPageAsync(nextLink, objectId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> The owners are a set of non-admin users who are allowed to modify this object. </summary>
        /// <param name="objectId"> The object ID of the service principal for which to get owners. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="objectId"/> is null. </exception>
        public virtual Pageable<DirectoryObject> ListOwners(string objectId, CancellationToken cancellationToken = default)
        {
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            Page<DirectoryObject> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListOwners");
                scope.Start();
                try
                {
                    var response = RestClient.ListOwners(objectId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DirectoryObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListOwners");
                scope.Start();
                try
                {
                    var response = RestClient.ListOwnersNextPage(nextLink, objectId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the keyCredentials associated with the specified service principal. </summary>
        /// <param name="objectId"> The object ID of the service principal for which to get keyCredentials. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="objectId"/> is null. </exception>
        public virtual AsyncPageable<KeyCredential> ListKeyCredentialsAsync(string objectId, CancellationToken cancellationToken = default)
        {
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            async Task<Page<KeyCredential>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListKeyCredentials");
                scope.Start();
                try
                {
                    var response = await RestClient.ListKeyCredentialsAsync(objectId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Get the keyCredentials associated with the specified service principal. </summary>
        /// <param name="objectId"> The object ID of the service principal for which to get keyCredentials. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="objectId"/> is null. </exception>
        public virtual Pageable<KeyCredential> ListKeyCredentials(string objectId, CancellationToken cancellationToken = default)
        {
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            Page<KeyCredential> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListKeyCredentials");
                scope.Start();
                try
                {
                    var response = RestClient.ListKeyCredentials(objectId, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets the passwordCredentials associated with a service principal. </summary>
        /// <param name="objectId"> The object ID of the service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="objectId"/> is null. </exception>
        public virtual AsyncPageable<PasswordCredential> ListPasswordCredentialsAsync(string objectId, CancellationToken cancellationToken = default)
        {
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            async Task<Page<PasswordCredential>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListPasswordCredentials");
                scope.Start();
                try
                {
                    var response = await RestClient.ListPasswordCredentialsAsync(objectId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets the passwordCredentials associated with a service principal. </summary>
        /// <param name="objectId"> The object ID of the service principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="objectId"/> is null. </exception>
        public virtual Pageable<PasswordCredential> ListPasswordCredentials(string objectId, CancellationToken cancellationToken = default)
        {
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            Page<PasswordCredential> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListPasswordCredentials");
                scope.Start();
                try
                {
                    var response = RestClient.ListPasswordCredentials(objectId, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets a list of service principals from the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public virtual AsyncPageable<ServicePrincipal> ListNextAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            async Task<Page<ServicePrincipal>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListNext");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ServicePrincipal>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListNext");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of service principals from the current tenant. </summary>
        /// <param name="nextLink"> Next link for the list operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public virtual Pageable<ServicePrincipal> ListNext(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            Page<ServicePrincipal> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListNext");
                scope.Start();
                try
                {
                    var response = RestClient.ListNext(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ServicePrincipal> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServicePrincipalsOperations.ListNext");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
