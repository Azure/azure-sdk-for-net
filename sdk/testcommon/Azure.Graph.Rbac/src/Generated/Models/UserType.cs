// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Graph.Rbac.Models
{
    /// <summary> A string value that can be used to classify user types in your directory, such as &apos;Member&apos; and &apos;Guest&apos;. </summary>
    public readonly partial struct UserType : IEquatable<UserType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="UserType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UserType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MemberValue = "Member";
        private const string GuestValue = "Guest";

        /// <summary> Member. </summary>
        public static UserType Member { get; } = new UserType(MemberValue);
        /// <summary> Guest. </summary>
        public static UserType Guest { get; } = new UserType(GuestValue);
        /// <summary> Determines if two <see cref="UserType"/> values are the same. </summary>
        public static bool operator ==(UserType left, UserType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UserType"/> values are not the same. </summary>
        public static bool operator !=(UserType left, UserType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UserType"/>. </summary>
        public static implicit operator UserType(string value) => new UserType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UserType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UserType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
