// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Graph.Rbac.Models
{
    /// <summary> Contains information about a sign-in name of a local account user in an Azure Active Directory B2C tenant. </summary>
    public partial class SignInName : IReadOnlyDictionary<string, object>
    {
        /// <summary> Initializes a new instance of SignInName. </summary>
        internal SignInName()
        {
            AdditionalProperties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of SignInName. </summary>
        /// <param name="type"> A string value that can be used to classify user sign-in types in your directory, such as &apos;emailAddress&apos; or &apos;userName&apos;. </param>
        /// <param name="value"> The sign-in used by the local account. Must be unique across the company/tenant. For example, &apos;johnc@example.com&apos;. </param>
        /// <param name="additionalProperties"> . </param>
        internal SignInName(string type, string value, IReadOnlyDictionary<string, object> additionalProperties)
        {
            Type = type;
            Value = value;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> A string value that can be used to classify user sign-in types in your directory, such as &apos;emailAddress&apos; or &apos;userName&apos;. </summary>
        public string Type { get; }
        /// <summary> The sign-in used by the local account. Must be unique across the company/tenant. For example, &apos;johnc@example.com&apos;. </summary>
        public string Value { get; }
        internal IReadOnlyDictionary<string, object> AdditionalProperties { get; }
        /// <inheritdoc />
        public IEnumerator<KeyValuePair<string, object>> GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        public bool TryGetValue(string key, out object value) => AdditionalProperties.TryGetValue(key, out value);
        /// <inheritdoc />
        public bool ContainsKey(string key) => AdditionalProperties.ContainsKey(key);
        /// <inheritdoc />
        public IEnumerable<string> Keys => AdditionalProperties.Keys;
        /// <inheritdoc />
        public IEnumerable<object> Values => AdditionalProperties.Values;
        /// <inheritdoc cref="IReadOnlyCollection{T}.Count"/>
        int IReadOnlyCollection<KeyValuePair<string, object>>.Count => AdditionalProperties.Count;
        /// <inheritdoc />
        public object this[string key]
        {
            get => AdditionalProperties[key];
        }
    }
}
