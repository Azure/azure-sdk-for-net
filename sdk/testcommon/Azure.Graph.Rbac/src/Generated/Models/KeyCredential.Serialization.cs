// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Graph.Rbac.Models
{
    public partial class KeyCredential : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(StartDate))
            {
                writer.WritePropertyName("startDate");
                writer.WriteStringValue(StartDate.Value, "O");
            }
            if (Optional.IsDefined(EndDate))
            {
                writer.WritePropertyName("endDate");
                writer.WriteStringValue(EndDate.Value, "O");
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value");
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(KeyId))
            {
                writer.WritePropertyName("keyId");
                writer.WriteStringValue(KeyId);
            }
            if (Optional.IsDefined(Usage))
            {
                writer.WritePropertyName("usage");
                writer.WriteStringValue(Usage);
            }
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type);
            }
            if (Optional.IsDefined(CustomKeyIdentifier))
            {
                writer.WritePropertyName("customKeyIdentifier");
                writer.WriteStringValue(CustomKeyIdentifier);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static KeyCredential DeserializeKeyCredential(JsonElement element)
        {
            Optional<DateTimeOffset> startDate = default;
            Optional<DateTimeOffset> endDate = default;
            Optional<string> value = default;
            Optional<string> keyId = default;
            Optional<string> usage = default;
            Optional<string> type = default;
            Optional<string> customKeyIdentifier = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("value"))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyId"))
                {
                    keyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("usage"))
                {
                    usage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customKeyIdentifier"))
                {
                    customKeyIdentifier = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new KeyCredential(Optional.ToNullable(startDate), Optional.ToNullable(endDate), value.Value, keyId.Value, usage.Value, type.Value, customKeyIdentifier.Value, additionalProperties);
        }
    }
}
