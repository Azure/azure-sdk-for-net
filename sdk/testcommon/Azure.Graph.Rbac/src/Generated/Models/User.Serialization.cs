// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Graph.Rbac.Models
{
    public partial class User
    {
        internal static User DeserializeUser(JsonElement element)
        {
            Optional<string> immutableId = default;
            Optional<string> usageLocation = default;
            Optional<string> givenName = default;
            Optional<string> surname = default;
            Optional<UserType> userType = default;
            Optional<bool> accountEnabled = default;
            Optional<string> displayName = default;
            Optional<string> userPrincipalName = default;
            Optional<string> mailNickname = default;
            Optional<string> mail = default;
            Optional<IReadOnlyList<SignInName>> signInNames = default;
            Optional<string> objectId = default;
            Optional<string> objectType = default;
            Optional<DateTimeOffset> deletionTimestamp = default;
            IReadOnlyDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("immutableId"))
                {
                    immutableId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("usageLocation"))
                {
                    usageLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("givenName"))
                {
                    givenName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("surname"))
                {
                    surname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    userType = new UserType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("accountEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    accountEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userPrincipalName"))
                {
                    userPrincipalName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mailNickname"))
                {
                    mailNickname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mail"))
                {
                    mail = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signInNames"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SignInName> array = new List<SignInName>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SignInName.DeserializeSignInName(item));
                    }
                    signInNames = array;
                    continue;
                }
                if (property.NameEquals("objectId"))
                {
                    objectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectType"))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deletionTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deletionTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new User(objectId.Value, objectType.Value, Optional.ToNullable(deletionTimestamp), additionalProperties, immutableId.Value, usageLocation.Value, givenName.Value, surname.Value, Optional.ToNullable(userType), Optional.ToNullable(accountEnabled), displayName.Value, userPrincipalName.Value, mailNickname.Value, mail.Value, Optional.ToList(signInNames));
        }
    }
}
