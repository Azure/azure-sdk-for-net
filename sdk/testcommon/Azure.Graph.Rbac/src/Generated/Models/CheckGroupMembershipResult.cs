// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Graph.Rbac.Models
{
    /// <summary> Server response for IsMemberOf API call. </summary>
    public partial class CheckGroupMembershipResult : IReadOnlyDictionary<string, object>
    {
        /// <summary> Initializes a new instance of CheckGroupMembershipResult. </summary>
        internal CheckGroupMembershipResult()
        {
            AdditionalProperties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of CheckGroupMembershipResult. </summary>
        /// <param name="value"> True if the specified user, group, contact, or service principal has either direct or transitive membership in the specified group; otherwise, false. </param>
        /// <param name="additionalProperties"> . </param>
        internal CheckGroupMembershipResult(bool? value, IReadOnlyDictionary<string, object> additionalProperties)
        {
            Value = value;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> True if the specified user, group, contact, or service principal has either direct or transitive membership in the specified group; otherwise, false. </summary>
        public bool? Value { get; }
        internal IReadOnlyDictionary<string, object> AdditionalProperties { get; }
        /// <inheritdoc />
        public IEnumerator<KeyValuePair<string, object>> GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        public bool TryGetValue(string key, out object value) => AdditionalProperties.TryGetValue(key, out value);
        /// <inheritdoc />
        public bool ContainsKey(string key) => AdditionalProperties.ContainsKey(key);
        /// <inheritdoc />
        public IEnumerable<string> Keys => AdditionalProperties.Keys;
        /// <inheritdoc />
        public IEnumerable<object> Values => AdditionalProperties.Values;
        /// <inheritdoc cref="IReadOnlyCollection{T}.Count"/>
        int IReadOnlyCollection<KeyValuePair<string, object>>.Count => AdditionalProperties.Count;
        /// <inheritdoc />
        public object this[string key]
        {
            get => AdditionalProperties[key];
        }
    }
}
