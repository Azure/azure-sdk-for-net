// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Graph.Rbac.Models
{
    public partial class ServicePrincipal
    {
        internal static ServicePrincipal DeserializeServicePrincipal(JsonElement element)
        {
            Optional<bool> accountEnabled = default;
            Optional<IReadOnlyList<string>> alternativeNames = default;
            Optional<string> appDisplayName = default;
            Optional<string> appId = default;
            Optional<string> appOwnerTenantId = default;
            Optional<bool> appRoleAssignmentRequired = default;
            Optional<IReadOnlyList<AppRole>> appRoles = default;
            Optional<string> displayName = default;
            Optional<string> errorUrl = default;
            Optional<string> homepage = default;
            Optional<IReadOnlyList<KeyCredential>> keyCredentials = default;
            Optional<string> logoutUrl = default;
            Optional<IReadOnlyList<OAuth2Permission>> oauth2Permissions = default;
            Optional<IReadOnlyList<PasswordCredential>> passwordCredentials = default;
            Optional<string> preferredTokenSigningKeyThumbprint = default;
            Optional<string> publisherName = default;
            Optional<IReadOnlyList<string>> replyUrls = default;
            Optional<string> samlMetadataUrl = default;
            Optional<IReadOnlyList<string>> servicePrincipalNames = default;
            Optional<string> servicePrincipalType = default;
            Optional<IReadOnlyList<string>> tags = default;
            Optional<string> objectId = default;
            Optional<string> objectType = default;
            Optional<DateTimeOffset> deletionTimestamp = default;
            IReadOnlyDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("accountEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    accountEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("alternativeNames"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    alternativeNames = array;
                    continue;
                }
                if (property.NameEquals("appDisplayName"))
                {
                    appDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appId"))
                {
                    appId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appOwnerTenantId"))
                {
                    appOwnerTenantId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appRoleAssignmentRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    appRoleAssignmentRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("appRoles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AppRole> array = new List<AppRole>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppRole.DeserializeAppRole(item));
                    }
                    appRoles = array;
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorUrl"))
                {
                    errorUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("homepage"))
                {
                    homepage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyCredentials"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<KeyCredential> array = new List<KeyCredential>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(KeyCredential.DeserializeKeyCredential(item));
                    }
                    keyCredentials = array;
                    continue;
                }
                if (property.NameEquals("logoutUrl"))
                {
                    logoutUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("oauth2Permissions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<OAuth2Permission> array = new List<OAuth2Permission>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OAuth2Permission.DeserializeOAuth2Permission(item));
                    }
                    oauth2Permissions = array;
                    continue;
                }
                if (property.NameEquals("passwordCredentials"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PasswordCredential> array = new List<PasswordCredential>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PasswordCredential.DeserializePasswordCredential(item));
                    }
                    passwordCredentials = array;
                    continue;
                }
                if (property.NameEquals("preferredTokenSigningKeyThumbprint"))
                {
                    preferredTokenSigningKeyThumbprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publisherName"))
                {
                    publisherName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replyUrls"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    replyUrls = array;
                    continue;
                }
                if (property.NameEquals("samlMetadataUrl"))
                {
                    samlMetadataUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("servicePrincipalNames"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    servicePrincipalNames = array;
                    continue;
                }
                if (property.NameEquals("servicePrincipalType"))
                {
                    servicePrincipalType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    tags = array;
                    continue;
                }
                if (property.NameEquals("objectId"))
                {
                    objectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectType"))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deletionTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deletionTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new ServicePrincipal(objectId.Value, objectType.Value, Optional.ToNullable(deletionTimestamp), additionalProperties, Optional.ToNullable(accountEnabled), Optional.ToList(alternativeNames), appDisplayName.Value, appId.Value, appOwnerTenantId.Value, Optional.ToNullable(appRoleAssignmentRequired), Optional.ToList(appRoles), displayName.Value, errorUrl.Value, homepage.Value, Optional.ToList(keyCredentials), logoutUrl.Value, Optional.ToList(oauth2Permissions), Optional.ToList(passwordCredentials), preferredTokenSigningKeyThumbprint.Value, publisherName.Value, Optional.ToList(replyUrls), samlMetadataUrl.Value, Optional.ToList(servicePrincipalNames), servicePrincipalType.Value, Optional.ToList(tags));
        }
    }
}
