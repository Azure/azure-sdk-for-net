// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace Azure.Management.Compute.Models
{
    /// <summary> Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1. </summary>
    public readonly partial struct Enum27 : IEquatable<Enum27>
    {
        private readonly int _value;

        /// <summary> Determines if two <see cref="Enum27"/> values are the same. </summary>
        public Enum27(int value)
        {
            _value = value;
        }

        private const int OneValue = 1;
        private const int ThreeValue = 3;
        private const int FiveValue = 5;

        /// <summary> 1. </summary>
        public static Enum27 One { get; } = new Enum27(OneValue);
        /// <summary> 3. </summary>
        public static Enum27 Three { get; } = new Enum27(ThreeValue);
        /// <summary> 5. </summary>
        public static Enum27 Five { get; } = new Enum27(FiveValue);
        /// <summary> Determines if two <see cref="Enum27"/> values are the same. </summary>
        public static bool operator ==(Enum27 left, Enum27 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum27"/> values are not the same. </summary>
        public static bool operator !=(Enum27 left, Enum27 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum27"/>. </summary>
        public static implicit operator Enum27(int value) => new Enum27(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum27 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum27 other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
