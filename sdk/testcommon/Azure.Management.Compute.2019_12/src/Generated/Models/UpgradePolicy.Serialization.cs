// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Compute.Models
{
    public partial class UpgradePolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Mode != null)
            {
                writer.WritePropertyName("mode");
                writer.WriteStringValue(Mode.Value.ToSerialString());
            }
            if (RollingUpgradePolicy != null)
            {
                writer.WritePropertyName("rollingUpgradePolicy");
                writer.WriteObjectValue(RollingUpgradePolicy);
            }
            if (AutomaticOSUpgradePolicy != null)
            {
                writer.WritePropertyName("automaticOSUpgradePolicy");
                writer.WriteObjectValue(AutomaticOSUpgradePolicy);
            }
            writer.WriteEndObject();
        }

        internal static UpgradePolicy DeserializeUpgradePolicy(JsonElement element)
        {
            UpgradeMode? mode = default;
            RollingUpgradePolicy rollingUpgradePolicy = default;
            AutomaticOSUpgradePolicy automaticOSUpgradePolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("mode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = property.Value.GetString().ToUpgradeMode();
                    continue;
                }
                if (property.NameEquals("rollingUpgradePolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rollingUpgradePolicy = RollingUpgradePolicy.DeserializeRollingUpgradePolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("automaticOSUpgradePolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    automaticOSUpgradePolicy = AutomaticOSUpgradePolicy.DeserializeAutomaticOSUpgradePolicy(property.Value);
                    continue;
                }
            }
            return new UpgradePolicy(mode, rollingUpgradePolicy, automaticOSUpgradePolicy);
        }
    }
}
