// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HDInsight.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The ip configurations for the private link service.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class IPConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the IPConfiguration class.
        /// </summary>
        public IPConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IPConfiguration class.
        /// </summary>
        /// <param name="name">The name of private link IP
        /// configuration.</param>
        /// <param name="id">The private link IP configuration id.</param>
        /// <param name="type">The type of the private link IP
        /// configuration.</param>
        /// <param name="provisioningState">The private link configuration
        /// provisioning state, which only appears in the response. Possible
        /// values include: 'InProgress', 'Failed', 'Succeeded', 'Canceled',
        /// 'Deleting'</param>
        /// <param name="primary">Indicates whether this IP configuration is
        /// primary for the corresponding NIC.</param>
        /// <param name="privateIPAddress">The IP address.</param>
        /// <param name="privateIPAllocationMethod">The method that private IP
        /// address is allocated. Possible values include: 'dynamic',
        /// 'static'</param>
        /// <param name="subnet">The subnet resource id.</param>
        public IPConfiguration(string name, string id = default(string), string type = default(string), string provisioningState = default(string), bool? primary = default(bool?), string privateIPAddress = default(string), string privateIPAllocationMethod = default(string), ResourceId subnet = default(ResourceId))
        {
            Id = id;
            Name = name;
            Type = type;
            ProvisioningState = provisioningState;
            Primary = primary;
            PrivateIPAddress = privateIPAddress;
            PrivateIPAllocationMethod = privateIPAllocationMethod;
            Subnet = subnet;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the private link IP configuration id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets the name of private link IP configuration.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets the type of the private link IP configuration.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets the private link configuration provisioning state, which only
        /// appears in the response. Possible values include: 'InProgress',
        /// 'Failed', 'Succeeded', 'Canceled', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets indicates whether this IP configuration is primary for
        /// the corresponding NIC.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primary")]
        public bool? Primary { get; set; }

        /// <summary>
        /// Gets or sets the IP address.
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateIPAddress")]
        public string PrivateIPAddress { get; set; }

        /// <summary>
        /// Gets or sets the method that private IP address is allocated.
        /// Possible values include: 'dynamic', 'static'
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateIPAllocationMethod")]
        public string PrivateIPAllocationMethod { get; set; }

        /// <summary>
        /// Gets or sets the subnet resource id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subnet")]
        public ResourceId Subnet { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
