// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.HDInsight
{
    using System;
    using System.Collections.Generic;

    public static class DefaultVmSizes
    {
        public static class HeadNode
        {
            private const string DefaultSizeIfNotSpecified = "Large";

            private static readonly Dictionary<string, string> DefaultSizes = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
            {
                {"hadoop", "Standard_D3_v2"},
                {"spark", "Standard_D12_v2"},
                {"rserver", "Standard_D12_v2"},
                {"mlservices", "Standard_D12_v2"},
                {"InteractiveHive", "Standard_D13_v2"},
                {"Sandbox", "Standard_D13_V2"}
            };

            public static string GetSize(string clusterType)
            {
                if (!DefaultSizes.TryGetValue(clusterType.ToLowerInvariant(), out string nodeSize))
                {
                    nodeSize = DefaultSizeIfNotSpecified;
                }

                return nodeSize;
            }
        }

        public static class WorkerNode
        {
            private const string DefaultSizeIfNotSpecified = "Standard_D3_v2";

            private static readonly Dictionary<string, string> DefaultSizes = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
            {
                {"spark", "Standard_D12_v2"},
                {"rserver", "Standard_D4_v2"},
                {"mlservices", "Standard_D4_v2"},
                {"InteractiveHive", "Standard_D13_v2"},
            };

            public static string GetSize(string clusterType)
            {
                if (!DefaultSizes.TryGetValue(clusterType.ToLowerInvariant(), out string nodeSize))
                {
                    nodeSize = DefaultSizeIfNotSpecified;
                }

                return nodeSize;
            }
        }

        public static class ZookeeperNode
        {
            private const string DefaultSizeIfNotSpecified = "Medium";

            private static readonly Dictionary<string, string> DefaultSizes = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
            {
                {"hadoop", "Small"},
                {"spark", "Small"}
            };

            public static string GetSize(string clusterType)
            {
                if (!DefaultSizes.TryGetValue(clusterType.ToLowerInvariant(), out string nodeSize))
                {
                    nodeSize = DefaultSizeIfNotSpecified;
                }

                return nodeSize;
            }
        }

        public static class EdgeNode
        {
            private const string DefaultSizeIfNotSpecified = "Standard_D4_v2";

            private static readonly Dictionary<string, string> DefaultSizes = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            public static string GetSize(string clusterType)
            {
                if (!DefaultSizes.TryGetValue(clusterType.ToLowerInvariant(), out string nodeSize))
                {
                    nodeSize = DefaultSizeIfNotSpecified;
                }

                return nodeSize;
            }
        }
    }
}
