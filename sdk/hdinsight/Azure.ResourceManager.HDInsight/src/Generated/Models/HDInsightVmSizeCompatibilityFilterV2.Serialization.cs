// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Models
{
    public partial class HDInsightVmSizeCompatibilityFilterV2
    {
        internal static HDInsightVmSizeCompatibilityFilterV2 DeserializeHDInsightVmSizeCompatibilityFilterV2(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<HDInsightFilterMode> filterMode = default;
            Optional<IReadOnlyList<string>> regions = default;
            Optional<IReadOnlyList<string>> clusterFlavors = default;
            Optional<IReadOnlyList<string>> nodeTypes = default;
            Optional<IReadOnlyList<string>> clusterVersions = default;
            Optional<IReadOnlyList<HDInsightOSType>> osType = default;
            Optional<IReadOnlyList<string>> vmSizes = default;
            Optional<string> espApplied = default;
            Optional<string> computeIsolationSupported = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("filterMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filterMode = new HDInsightFilterMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("regions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    regions = array;
                    continue;
                }
                if (property.NameEquals("clusterFlavors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    clusterFlavors = array;
                    continue;
                }
                if (property.NameEquals("nodeTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    nodeTypes = array;
                    continue;
                }
                if (property.NameEquals("clusterVersions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    clusterVersions = array;
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HDInsightOSType> array = new List<HDInsightOSType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new HDInsightOSType(item.GetString()));
                    }
                    osType = array;
                    continue;
                }
                if (property.NameEquals("vmSizes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    vmSizes = array;
                    continue;
                }
                if (property.NameEquals("espApplied"u8))
                {
                    espApplied = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("computeIsolationSupported"u8))
                {
                    computeIsolationSupported = property.Value.GetString();
                    continue;
                }
            }
            return new HDInsightVmSizeCompatibilityFilterV2(Optional.ToNullable(filterMode), Optional.ToList(regions), Optional.ToList(clusterFlavors), Optional.ToList(nodeTypes), Optional.ToList(clusterVersions), Optional.ToList(osType), Optional.ToList(vmSizes), espApplied.Value, computeIsolationSupported.Value);
        }
    }
}
