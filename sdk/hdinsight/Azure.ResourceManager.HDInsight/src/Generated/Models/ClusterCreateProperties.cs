// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Models
{
    /// <summary> The cluster create parameters. </summary>
    public partial class ClusterCreateProperties
    {
        /// <summary> Initializes a new instance of ClusterCreateProperties. </summary>
        public ClusterCreateProperties()
        {
            PrivateLinkConfigurations = new ChangeTrackingList<PrivateLinkConfiguration>();
        }

        /// <summary> The version of the cluster. </summary>
        public string ClusterVersion { get; set; }
        /// <summary> The type of operating system. </summary>
        public OSType? OSType { get; set; }
        /// <summary> The cluster tier. </summary>
        public Tier? Tier { get; set; }
        /// <summary> The cluster definition. </summary>
        public ClusterDefinition ClusterDefinition { get; set; }
        /// <summary> The cluster kafka rest proxy configuration. </summary>
        public KafkaRestProperties KafkaRestProperties { get; set; }
        /// <summary> The security profile. </summary>
        public SecurityProfile SecurityProfile { get; set; }
        /// <summary> The compute profile. </summary>
        internal ComputeProfile ComputeProfile { get; set; }
        /// <summary> The list of roles in the cluster. </summary>
        public IList<Role> ComputeRoles
        {
            get
            {
                if (ComputeProfile is null)
                    ComputeProfile = new ComputeProfile();
                return ComputeProfile.Roles;
            }
        }

        /// <summary> The storage profile. </summary>
        internal StorageProfile StorageProfile { get; set; }
        /// <summary> The list of storage accounts in the cluster. </summary>
        public IList<StorageAccount> StorageStorageaccounts
        {
            get
            {
                if (StorageProfile is null)
                    StorageProfile = new StorageProfile();
                return StorageProfile.Storageaccounts;
            }
        }

        /// <summary> The disk encryption properties. </summary>
        public DiskEncryptionProperties DiskEncryptionProperties { get; set; }
        /// <summary> The encryption-in-transit properties. </summary>
        internal EncryptionInTransitProperties EncryptionInTransitProperties { get; set; }
        /// <summary> Indicates whether or not inter cluster node communication is encrypted in transit. </summary>
        public bool? IsEncryptionInTransitEnabled
        {
            get => EncryptionInTransitProperties is null ? default : EncryptionInTransitProperties.IsEncryptionInTransitEnabled;
            set
            {
                if (EncryptionInTransitProperties is null)
                    EncryptionInTransitProperties = new EncryptionInTransitProperties();
                EncryptionInTransitProperties.IsEncryptionInTransitEnabled = value;
            }
        }

        /// <summary> The minimal supported tls version. </summary>
        public string MinSupportedTlsVersion { get; set; }
        /// <summary> The network properties. </summary>
        public NetworkProperties NetworkProperties { get; set; }
        /// <summary> The compute isolation properties. </summary>
        public ComputeIsolationProperties ComputeIsolationProperties { get; set; }
        /// <summary> The private link configurations. </summary>
        public IList<PrivateLinkConfiguration> PrivateLinkConfigurations { get; }
    }
}
