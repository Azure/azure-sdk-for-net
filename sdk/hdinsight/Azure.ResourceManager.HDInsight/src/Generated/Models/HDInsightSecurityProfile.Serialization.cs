// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.HDInsight.Models
{
    public partial class HDInsightSecurityProfile : IUtf8JsonSerializable, IModelJsonSerializable<HDInsightSecurityProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<HDInsightSecurityProfile>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<HDInsightSecurityProfile>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(DirectoryType))
            {
                writer.WritePropertyName("directoryType"u8);
                writer.WriteStringValue(DirectoryType.Value.ToString());
            }
            if (Optional.IsDefined(Domain))
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
            if (Optional.IsDefined(OrganizationalUnitDN))
            {
                writer.WritePropertyName("organizationalUnitDN"u8);
                writer.WriteStringValue(OrganizationalUnitDN);
            }
            if (Optional.IsCollectionDefined(LdapUris))
            {
                writer.WritePropertyName("ldapsUrls"u8);
                writer.WriteStartArray();
                foreach (var item in LdapUris)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item.AbsoluteUri);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DomainUsername))
            {
                writer.WritePropertyName("domainUsername"u8);
                writer.WriteStringValue(DomainUsername);
            }
            if (Optional.IsDefined(DomainUserPassword))
            {
                writer.WritePropertyName("domainUserPassword"u8);
                writer.WriteStringValue(DomainUserPassword);
            }
            if (Optional.IsCollectionDefined(ClusterUsersGroupDNs))
            {
                writer.WritePropertyName("clusterUsersGroupDNs"u8);
                writer.WriteStartArray();
                foreach (var item in ClusterUsersGroupDNs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AaddsResourceId))
            {
                writer.WritePropertyName("aaddsResourceId"u8);
                writer.WriteStringValue(AaddsResourceId);
            }
            if (Optional.IsDefined(MsiResourceId))
            {
                writer.WritePropertyName("msiResourceId"u8);
                writer.WriteStringValue(MsiResourceId);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static HDInsightSecurityProfile DeserializeHDInsightSecurityProfile(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<AuthenticationDirectoryType> directoryType = default;
            Optional<string> domain = default;
            Optional<string> organizationalUnitDN = default;
            Optional<IList<Uri>> ldapsUrls = default;
            Optional<string> domainUsername = default;
            Optional<string> domainUserPassword = default;
            Optional<IList<string>> clusterUsersGroupDNs = default;
            Optional<ResourceIdentifier> aaddsResourceId = default;
            Optional<ResourceIdentifier> msiResourceId = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("directoryType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    directoryType = new AuthenticationDirectoryType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("domain"u8))
                {
                    domain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationalUnitDN"u8))
                {
                    organizationalUnitDN = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ldapsUrls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Uri> array = new List<Uri>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(new Uri(item.GetString()));
                        }
                    }
                    ldapsUrls = array;
                    continue;
                }
                if (property.NameEquals("domainUsername"u8))
                {
                    domainUsername = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domainUserPassword"u8))
                {
                    domainUserPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterUsersGroupDNs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    clusterUsersGroupDNs = array;
                    continue;
                }
                if (property.NameEquals("aaddsResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    aaddsResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("msiResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    msiResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new HDInsightSecurityProfile(Optional.ToNullable(directoryType), domain.Value, organizationalUnitDN.Value, Optional.ToList(ldapsUrls), domainUsername.Value, domainUserPassword.Value, Optional.ToList(clusterUsersGroupDNs), aaddsResourceId.Value, msiResourceId.Value, rawData);
        }

        HDInsightSecurityProfile IModelJsonSerializable<HDInsightSecurityProfile>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeHDInsightSecurityProfile(doc.RootElement, options);
        }

        BinaryData IModelSerializable<HDInsightSecurityProfile>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        HDInsightSecurityProfile IModelSerializable<HDInsightSecurityProfile>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeHDInsightSecurityProfile(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="HDInsightSecurityProfile"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="HDInsightSecurityProfile"/> to convert. </param>
        public static implicit operator RequestContent(HDInsightSecurityProfile model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="HDInsightSecurityProfile"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator HDInsightSecurityProfile(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeHDInsightSecurityProfile(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
