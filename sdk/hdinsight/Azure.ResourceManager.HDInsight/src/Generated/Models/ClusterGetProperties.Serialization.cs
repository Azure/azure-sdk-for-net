// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.HDInsight;

namespace Azure.ResourceManager.HDInsight.Models
{
    public partial class ClusterGetProperties
    {
        internal static ClusterGetProperties DeserializeClusterGetProperties(JsonElement element)
        {
            Optional<string> clusterVersion = default;
            Optional<string> clusterHdpVersion = default;
            Optional<OSType> osType = default;
            Optional<Tier> tier = default;
            Optional<string> clusterId = default;
            ClusterDefinition clusterDefinition = default;
            Optional<KafkaRestProperties> kafkaRestProperties = default;
            Optional<SecurityProfile> securityProfile = default;
            Optional<ComputeProfile> computeProfile = default;
            Optional<HDInsightClusterProvisioningState> provisioningState = default;
            Optional<string> createdDate = default;
            Optional<string> clusterState = default;
            Optional<QuotaInfo> quotaInfo = default;
            Optional<IReadOnlyList<Errors>> errors = default;
            Optional<IReadOnlyList<ConnectivityEndpoint>> connectivityEndpoints = default;
            Optional<DiskEncryptionProperties> diskEncryptionProperties = default;
            Optional<EncryptionInTransitProperties> encryptionInTransitProperties = default;
            Optional<StorageProfile> storageProfile = default;
            Optional<string> minSupportedTlsVersion = default;
            Optional<ExcludedServicesConfig> excludedServicesConfig = default;
            Optional<NetworkProperties> networkProperties = default;
            Optional<ComputeIsolationProperties> computeIsolationProperties = default;
            Optional<IReadOnlyList<PrivateLinkConfiguration>> privateLinkConfigurations = default;
            Optional<IReadOnlyList<HDInsightPrivateEndpointConnectionData>> privateEndpointConnections = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clusterVersion"))
                {
                    clusterVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterHdpVersion"))
                {
                    clusterHdpVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    osType = new OSType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tier"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tier = new Tier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("clusterId"))
                {
                    clusterId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterDefinition"))
                {
                    clusterDefinition = ClusterDefinition.DeserializeClusterDefinition(property.Value);
                    continue;
                }
                if (property.NameEquals("kafkaRestProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    kafkaRestProperties = KafkaRestProperties.DeserializeKafkaRestProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("securityProfile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    securityProfile = SecurityProfile.DeserializeSecurityProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("computeProfile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    computeProfile = ComputeProfile.DeserializeComputeProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    provisioningState = new HDInsightClusterProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("createdDate"))
                {
                    createdDate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterState"))
                {
                    clusterState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("quotaInfo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    quotaInfo = QuotaInfo.DeserializeQuotaInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Errors> array = new List<Errors>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.Errors.DeserializeErrors(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("connectivityEndpoints"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ConnectivityEndpoint> array = new List<ConnectivityEndpoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnectivityEndpoint.DeserializeConnectivityEndpoint(item));
                    }
                    connectivityEndpoints = array;
                    continue;
                }
                if (property.NameEquals("diskEncryptionProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diskEncryptionProperties = DiskEncryptionProperties.DeserializeDiskEncryptionProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("encryptionInTransitProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    encryptionInTransitProperties = EncryptionInTransitProperties.DeserializeEncryptionInTransitProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("storageProfile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    storageProfile = StorageProfile.DeserializeStorageProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("minSupportedTlsVersion"))
                {
                    minSupportedTlsVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("excludedServicesConfig"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    excludedServicesConfig = ExcludedServicesConfig.DeserializeExcludedServicesConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("networkProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    networkProperties = NetworkProperties.DeserializeNetworkProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("computeIsolationProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    computeIsolationProperties = ComputeIsolationProperties.DeserializeComputeIsolationProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("privateLinkConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PrivateLinkConfiguration> array = new List<PrivateLinkConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PrivateLinkConfiguration.DeserializePrivateLinkConfiguration(item));
                    }
                    privateLinkConfigurations = array;
                    continue;
                }
                if (property.NameEquals("privateEndpointConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HDInsightPrivateEndpointConnectionData> array = new List<HDInsightPrivateEndpointConnectionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HDInsightPrivateEndpointConnectionData.DeserializeHDInsightPrivateEndpointConnectionData(item));
                    }
                    privateEndpointConnections = array;
                    continue;
                }
            }
            return new ClusterGetProperties(clusterVersion.Value, clusterHdpVersion.Value, Optional.ToNullable(osType), Optional.ToNullable(tier), clusterId.Value, clusterDefinition, kafkaRestProperties.Value, securityProfile.Value, computeProfile.Value, Optional.ToNullable(provisioningState), createdDate.Value, clusterState.Value, quotaInfo.Value, Optional.ToList(errors), Optional.ToList(connectivityEndpoints), diskEncryptionProperties.Value, encryptionInTransitProperties.Value, storageProfile.Value, minSupportedTlsVersion.Value, excludedServicesConfig.Value, networkProperties.Value, computeIsolationProperties.Value, Optional.ToList(privateLinkConfigurations), Optional.ToList(privateEndpointConnections));
        }
    }
}
