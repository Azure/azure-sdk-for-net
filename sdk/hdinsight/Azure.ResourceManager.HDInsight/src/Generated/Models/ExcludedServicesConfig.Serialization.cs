// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.HDInsight.Models
{
    public partial class ExcludedServicesConfig : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ExcludedServicesConfigId))
            {
                writer.WritePropertyName("excludedServicesConfigId"u8);
                writer.WriteStringValue(ExcludedServicesConfigId);
            }
            if (Optional.IsDefined(ExcludedServicesList))
            {
                writer.WritePropertyName("excludedServicesList"u8);
                writer.WriteStringValue(ExcludedServicesList);
            }
            writer.WriteEndObject();
        }

        internal static ExcludedServicesConfig DeserializeExcludedServicesConfig(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> excludedServicesConfigId = default;
            Optional<string> excludedServicesList = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("excludedServicesConfigId"u8))
                {
                    excludedServicesConfigId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("excludedServicesList"u8))
                {
                    excludedServicesList = property.Value.GetString();
                    continue;
                }
            }
            return new ExcludedServicesConfig(excludedServicesConfigId.Value, excludedServicesList.Value);
        }
    }
}
