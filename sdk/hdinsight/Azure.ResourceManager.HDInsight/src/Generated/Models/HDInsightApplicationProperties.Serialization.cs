// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Models
{
    public partial class HDInsightApplicationProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ComputeProfile))
            {
                writer.WritePropertyName("computeProfile");
                writer.WriteObjectValue(ComputeProfile);
            }
            if (Optional.IsCollectionDefined(InstallScriptActions))
            {
                writer.WritePropertyName("installScriptActions");
                writer.WriteStartArray();
                foreach (var item in InstallScriptActions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UninstallScriptActions))
            {
                writer.WritePropertyName("uninstallScriptActions");
                writer.WriteStartArray();
                foreach (var item in UninstallScriptActions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HttpsEndpoints))
            {
                writer.WritePropertyName("httpsEndpoints");
                writer.WriteStartArray();
                foreach (var item in HttpsEndpoints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SshEndpoints))
            {
                writer.WritePropertyName("sshEndpoints");
                writer.WriteStartArray();
                foreach (var item in SshEndpoints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ApplicationType))
            {
                writer.WritePropertyName("applicationType");
                writer.WriteStringValue(ApplicationType);
            }
            if (Optional.IsCollectionDefined(Errors))
            {
                writer.WritePropertyName("errors");
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PrivateLinkConfigurations))
            {
                writer.WritePropertyName("privateLinkConfigurations");
                writer.WriteStartArray();
                foreach (var item in PrivateLinkConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static HDInsightApplicationProperties DeserializeHDInsightApplicationProperties(JsonElement element)
        {
            Optional<ComputeProfile> computeProfile = default;
            Optional<IList<RuntimeScriptAction>> installScriptActions = default;
            Optional<IList<RuntimeScriptAction>> uninstallScriptActions = default;
            Optional<IList<HDInsightApplicationHttpsEndpoint>> httpsEndpoints = default;
            Optional<IList<HDInsightApplicationEndpoint>> sshEndpoints = default;
            Optional<string> provisioningState = default;
            Optional<string> applicationType = default;
            Optional<string> applicationState = default;
            Optional<IList<ResponseError>> errors = default;
            Optional<string> createdDate = default;
            Optional<string> marketplaceIdentifier = default;
            Optional<IList<HDInsightPrivateLinkConfiguration>> privateLinkConfigurations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("computeProfile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    computeProfile = ComputeProfile.DeserializeComputeProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("installScriptActions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RuntimeScriptAction> array = new List<RuntimeScriptAction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RuntimeScriptAction.DeserializeRuntimeScriptAction(item));
                    }
                    installScriptActions = array;
                    continue;
                }
                if (property.NameEquals("uninstallScriptActions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RuntimeScriptAction> array = new List<RuntimeScriptAction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RuntimeScriptAction.DeserializeRuntimeScriptAction(item));
                    }
                    uninstallScriptActions = array;
                    continue;
                }
                if (property.NameEquals("httpsEndpoints"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HDInsightApplicationHttpsEndpoint> array = new List<HDInsightApplicationHttpsEndpoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HDInsightApplicationHttpsEndpoint.DeserializeHDInsightApplicationHttpsEndpoint(item));
                    }
                    httpsEndpoints = array;
                    continue;
                }
                if (property.NameEquals("sshEndpoints"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HDInsightApplicationEndpoint> array = new List<HDInsightApplicationEndpoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HDInsightApplicationEndpoint.DeserializeHDInsightApplicationEndpoint(item));
                    }
                    sshEndpoints = array;
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationType"))
                {
                    applicationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationState"))
                {
                    applicationState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResponseError> array = new List<ResponseError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(JsonSerializer.Deserialize<ResponseError>(item.ToString()));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("createdDate"))
                {
                    createdDate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("marketplaceIdentifier"))
                {
                    marketplaceIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateLinkConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HDInsightPrivateLinkConfiguration> array = new List<HDInsightPrivateLinkConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HDInsightPrivateLinkConfiguration.DeserializeHDInsightPrivateLinkConfiguration(item));
                    }
                    privateLinkConfigurations = array;
                    continue;
                }
            }
            return new HDInsightApplicationProperties(computeProfile.Value, Optional.ToList(installScriptActions), Optional.ToList(uninstallScriptActions), Optional.ToList(httpsEndpoints), Optional.ToList(sshEndpoints), provisioningState.Value, applicationType.Value, applicationState.Value, Optional.ToList(errors), createdDate.Value, marketplaceIdentifier.Value, Optional.ToList(privateLinkConfigurations));
        }
    }
}
