// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Models
{
    public partial class HDInsightStorageAccountInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(IsDefault))
            {
                writer.WritePropertyName("isDefault"u8);
                writer.WriteBooleanValue(IsDefault.Value);
            }
            if (Optional.IsDefined(Container))
            {
                writer.WritePropertyName("container"u8);
                writer.WriteStringValue(Container);
            }
            if (Optional.IsDefined(FileSystem))
            {
                writer.WritePropertyName("fileSystem"u8);
                writer.WriteStringValue(FileSystem);
            }
            if (Optional.IsDefined(Key))
            {
                writer.WritePropertyName("key"u8);
                writer.WriteStringValue(Key);
            }
            if (Optional.IsDefined(ResourceId))
            {
                if (ResourceId != null)
                {
                    writer.WritePropertyName("resourceId"u8);
                    writer.WriteStringValue(ResourceId);
                }
                else
                {
                    writer.WriteNull("resourceId");
                }
            }
            if (Optional.IsDefined(MsiResourceId))
            {
                if (MsiResourceId != null)
                {
                    writer.WritePropertyName("msiResourceId"u8);
                    writer.WriteStringValue(MsiResourceId);
                }
                else
                {
                    writer.WriteNull("msiResourceId");
                }
            }
            if (Optional.IsDefined(SasKey))
            {
                writer.WritePropertyName("saskey"u8);
                writer.WriteStringValue(SasKey);
            }
            if (Optional.IsDefined(Fileshare))
            {
                writer.WritePropertyName("fileshare"u8);
                writer.WriteStringValue(Fileshare);
            }
            if (Optional.IsDefined(EnableSecureChannel))
            {
                writer.WritePropertyName("enableSecureChannel"u8);
                writer.WriteBooleanValue(EnableSecureChannel.Value);
            }
            writer.WriteEndObject();
        }

        internal static HDInsightStorageAccountInfo DeserializeHDInsightStorageAccountInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<bool> isDefault = default;
            Optional<string> container = default;
            Optional<string> fileSystem = default;
            Optional<string> key = default;
            Optional<ResourceIdentifier> resourceId = default;
            Optional<ResourceIdentifier> msiResourceId = default;
            Optional<string> saskey = default;
            Optional<string> fileshare = default;
            Optional<bool> enableSecureChannel = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isDefault"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDefault = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("container"u8))
                {
                    container = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileSystem"u8))
                {
                    fileSystem = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("key"u8))
                {
                    key = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resourceId = null;
                        continue;
                    }
                    resourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("msiResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        msiResourceId = null;
                        continue;
                    }
                    msiResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("saskey"u8))
                {
                    saskey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileshare"u8))
                {
                    fileshare = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableSecureChannel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableSecureChannel = property.Value.GetBoolean();
                    continue;
                }
            }
            return new HDInsightStorageAccountInfo(name.Value, Optional.ToNullable(isDefault), container.Value, fileSystem.Value, key.Value, resourceId.Value, msiResourceId.Value, saskey.Value, fileshare.Value, Optional.ToNullable(enableSecureChannel));
        }
    }
}
