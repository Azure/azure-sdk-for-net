// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.HDInsight.Models
{
    /// <summary> The filtering mode. Effectively this can enabling or disabling the VM sizes in a particular set. </summary>
    public readonly partial struct FilterMode : IEquatable<FilterMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FilterMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FilterMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExcludeValue = "Exclude";
        private const string IncludeValue = "Include";
        private const string RecommendValue = "Recommend";
        private const string DefaultValue = "Default";

        /// <summary> Exclude. </summary>
        public static FilterMode Exclude { get; } = new FilterMode(ExcludeValue);
        /// <summary> Include. </summary>
        public static FilterMode Include { get; } = new FilterMode(IncludeValue);
        /// <summary> Recommend. </summary>
        public static FilterMode Recommend { get; } = new FilterMode(RecommendValue);
        /// <summary> Default. </summary>
        public static FilterMode Default { get; } = new FilterMode(DefaultValue);
        /// <summary> Determines if two <see cref="FilterMode"/> values are the same. </summary>
        public static bool operator ==(FilterMode left, FilterMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FilterMode"/> values are not the same. </summary>
        public static bool operator !=(FilterMode left, FilterMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FilterMode"/>. </summary>
        public static implicit operator FilterMode(string value) => new FilterMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FilterMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FilterMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
