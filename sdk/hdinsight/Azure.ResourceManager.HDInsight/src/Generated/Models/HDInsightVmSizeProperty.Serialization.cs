// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Models
{
    public partial class HDInsightVmSizeProperty : IUtf8JsonSerializable, IJsonModel<HDInsightVmSizeProperty>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HDInsightVmSizeProperty>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<HDInsightVmSizeProperty>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HDInsightVmSizeProperty>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HDInsightVmSizeProperty)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Cores))
            {
                writer.WritePropertyName("cores"u8);
                writer.WriteNumberValue(Cores.Value);
            }
            if (Optional.IsDefined(DataDiskStorageTier))
            {
                writer.WritePropertyName("dataDiskStorageTier"u8);
                writer.WriteStringValue(DataDiskStorageTier);
            }
            if (Optional.IsDefined(Label))
            {
                writer.WritePropertyName("label"u8);
                writer.WriteStringValue(Label);
            }
            if (Optional.IsDefined(MaxDataDiskCount))
            {
                writer.WritePropertyName("maxDataDiskCount"u8);
                writer.WriteNumberValue(MaxDataDiskCount.Value);
            }
            if (Optional.IsDefined(MemoryInMB))
            {
                writer.WritePropertyName("memoryInMb"u8);
                writer.WriteNumberValue(MemoryInMB.Value);
            }
            if (Optional.IsDefined(IsSupportedByVirtualMachines))
            {
                writer.WritePropertyName("supportedByVirtualMachines"u8);
                writer.WriteBooleanValue(IsSupportedByVirtualMachines.Value);
            }
            if (Optional.IsDefined(IsSupportedByWebWorkerRoles))
            {
                writer.WritePropertyName("supportedByWebWorkerRoles"u8);
                writer.WriteBooleanValue(IsSupportedByWebWorkerRoles.Value);
            }
            if (Optional.IsDefined(VirtualMachineResourceDiskSizeInMB))
            {
                writer.WritePropertyName("virtualMachineResourceDiskSizeInMb"u8);
                writer.WriteNumberValue(VirtualMachineResourceDiskSizeInMB.Value);
            }
            if (Optional.IsDefined(WebWorkerResourceDiskSizeInMB))
            {
                writer.WritePropertyName("webWorkerResourceDiskSizeInMb"u8);
                writer.WriteNumberValue(WebWorkerResourceDiskSizeInMB.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        HDInsightVmSizeProperty IJsonModel<HDInsightVmSizeProperty>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HDInsightVmSizeProperty>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HDInsightVmSizeProperty)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHDInsightVmSizeProperty(document.RootElement, options);
        }

        internal static HDInsightVmSizeProperty DeserializeHDInsightVmSizeProperty(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<int> cores = default;
            Optional<string> dataDiskStorageTier = default;
            Optional<string> label = default;
            Optional<long> maxDataDiskCount = default;
            Optional<long> memoryInMB = default;
            Optional<bool> supportedByVirtualMachines = default;
            Optional<bool> supportedByWebWorkerRoles = default;
            Optional<long> virtualMachineResourceDiskSizeInMB = default;
            Optional<long> webWorkerResourceDiskSizeInMB = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cores"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dataDiskStorageTier"u8))
                {
                    dataDiskStorageTier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("label"u8))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxDataDiskCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxDataDiskCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryInMb"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryInMB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("supportedByVirtualMachines"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    supportedByVirtualMachines = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("supportedByWebWorkerRoles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    supportedByWebWorkerRoles = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("virtualMachineResourceDiskSizeInMb"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    virtualMachineResourceDiskSizeInMB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("webWorkerResourceDiskSizeInMb"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    webWorkerResourceDiskSizeInMB = property.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new HDInsightVmSizeProperty(name.Value, Optional.ToNullable(cores), dataDiskStorageTier.Value, label.Value, Optional.ToNullable(maxDataDiskCount), Optional.ToNullable(memoryInMB), Optional.ToNullable(supportedByVirtualMachines), Optional.ToNullable(supportedByWebWorkerRoles), Optional.ToNullable(virtualMachineResourceDiskSizeInMB), Optional.ToNullable(webWorkerResourceDiskSizeInMB), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                if (Name.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Name}'''");
                }
                else
                {
                    builder.AppendLine($" '{Name}'");
                }
            }

            if (Optional.IsDefined(Cores))
            {
                builder.Append("  cores:");
                builder.AppendLine($" {Cores.Value}");
            }

            if (Optional.IsDefined(DataDiskStorageTier))
            {
                builder.Append("  dataDiskStorageTier:");
                if (DataDiskStorageTier.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{DataDiskStorageTier}'''");
                }
                else
                {
                    builder.AppendLine($" '{DataDiskStorageTier}'");
                }
            }

            if (Optional.IsDefined(Label))
            {
                builder.Append("  label:");
                if (Label.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Label}'''");
                }
                else
                {
                    builder.AppendLine($" '{Label}'");
                }
            }

            if (Optional.IsDefined(MaxDataDiskCount))
            {
                builder.Append("  maxDataDiskCount:");
                builder.AppendLine($" '{MaxDataDiskCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(MemoryInMB))
            {
                builder.Append("  memoryInMb:");
                builder.AppendLine($" '{MemoryInMB.Value.ToString()}'");
            }

            if (Optional.IsDefined(IsSupportedByVirtualMachines))
            {
                builder.Append("  supportedByVirtualMachines:");
                var boolValue = IsSupportedByVirtualMachines.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsSupportedByWebWorkerRoles))
            {
                builder.Append("  supportedByWebWorkerRoles:");
                var boolValue = IsSupportedByWebWorkerRoles.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(VirtualMachineResourceDiskSizeInMB))
            {
                builder.Append("  virtualMachineResourceDiskSizeInMb:");
                builder.AppendLine($" '{VirtualMachineResourceDiskSizeInMB.Value.ToString()}'");
            }

            if (Optional.IsDefined(WebWorkerResourceDiskSizeInMB))
            {
                builder.Append("  webWorkerResourceDiskSizeInMb:");
                builder.AppendLine($" '{WebWorkerResourceDiskSizeInMB.Value.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<HDInsightVmSizeProperty>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HDInsightVmSizeProperty>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(HDInsightVmSizeProperty)} does not support '{options.Format}' format.");
            }
        }

        HDInsightVmSizeProperty IPersistableModel<HDInsightVmSizeProperty>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HDInsightVmSizeProperty>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeHDInsightVmSizeProperty(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(HDInsightVmSizeProperty)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<HDInsightVmSizeProperty>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
