// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Models
{
    public partial class ClusterDefinition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Blueprint))
            {
                writer.WritePropertyName("blueprint");
                writer.WriteStringValue(Blueprint);
            }
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            if (Optional.IsCollectionDefined(ComponentVersion))
            {
                writer.WritePropertyName("componentVersion");
                writer.WriteStartObject();
                foreach (var item in ComponentVersion)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Configurations))
            {
                writer.WritePropertyName("configurations");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Configurations);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Configurations.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static ClusterDefinition DeserializeClusterDefinition(JsonElement element)
        {
            Optional<string> blueprint = default;
            Optional<string> kind = default;
            Optional<IDictionary<string, string>> componentVersion = default;
            Optional<BinaryData> configurations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("blueprint"))
                {
                    blueprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("componentVersion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    componentVersion = dictionary;
                    continue;
                }
                if (property.NameEquals("configurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    configurations = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
            }
            return new ClusterDefinition(blueprint.Value, kind.Value, Optional.ToDictionary(componentVersion), configurations.Value);
        }
    }
}
