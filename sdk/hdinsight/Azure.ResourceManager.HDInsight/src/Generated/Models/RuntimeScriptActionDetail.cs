// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Models
{
    /// <summary>
    /// The execution details of a script action.
    /// Serialized Name: RuntimeScriptActionDetail
    /// </summary>
    public partial class RuntimeScriptActionDetail : RuntimeScriptAction
    {
        /// <summary> Initializes a new instance of RuntimeScriptActionDetail. </summary>
        /// <param name="name">
        /// The name of the script action.
        /// Serialized Name: RuntimeScriptAction.name
        /// </param>
        /// <param name="uri">
        /// The URI to the script.
        /// Serialized Name: RuntimeScriptAction.uri
        /// </param>
        /// <param name="roles">
        /// The list of roles where script will be executed.
        /// Serialized Name: RuntimeScriptAction.roles
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="uri"/> or <paramref name="roles"/> is null. </exception>
        public RuntimeScriptActionDetail(string name, Uri uri, IEnumerable<string> roles) : base(name, uri, roles)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (uri == null)
            {
                throw new ArgumentNullException(nameof(uri));
            }
            if (roles == null)
            {
                throw new ArgumentNullException(nameof(roles));
            }

            ExecutionSummary = new ChangeTrackingList<ScriptActionExecutionSummary>();
        }

        /// <summary> Initializes a new instance of RuntimeScriptActionDetail. </summary>
        /// <param name="name">
        /// The name of the script action.
        /// Serialized Name: RuntimeScriptAction.name
        /// </param>
        /// <param name="uri">
        /// The URI to the script.
        /// Serialized Name: RuntimeScriptAction.uri
        /// </param>
        /// <param name="parameters">
        /// The parameters for the script
        /// Serialized Name: RuntimeScriptAction.parameters
        /// </param>
        /// <param name="roles">
        /// The list of roles where script will be executed.
        /// Serialized Name: RuntimeScriptAction.roles
        /// </param>
        /// <param name="applicationName">
        /// The application name of the script action, if any.
        /// Serialized Name: RuntimeScriptAction.applicationName
        /// </param>
        /// <param name="scriptExecutionId">
        /// The execution id of the script action.
        /// Serialized Name: RuntimeScriptActionDetail.scriptExecutionId
        /// </param>
        /// <param name="startOn">
        /// The start time of script action execution.
        /// Serialized Name: RuntimeScriptActionDetail.startTime
        /// </param>
        /// <param name="endOn">
        /// The end time of script action execution.
        /// Serialized Name: RuntimeScriptActionDetail.endTime
        /// </param>
        /// <param name="status">
        /// The current execution status of the script action.
        /// Serialized Name: RuntimeScriptActionDetail.status
        /// </param>
        /// <param name="operation">
        /// The reason why the script action was executed.
        /// Serialized Name: RuntimeScriptActionDetail.operation
        /// </param>
        /// <param name="executionSummary">
        /// The summary of script action execution result.
        /// Serialized Name: RuntimeScriptActionDetail.executionSummary
        /// </param>
        /// <param name="debugInformation">
        /// The script action execution debug information.
        /// Serialized Name: RuntimeScriptActionDetail.debugInformation
        /// </param>
        internal RuntimeScriptActionDetail(string name, Uri uri, string parameters, IList<string> roles, string applicationName, long? scriptExecutionId, DateTimeOffset? startOn, DateTimeOffset? endOn, string status, string operation, IReadOnlyList<ScriptActionExecutionSummary> executionSummary, string debugInformation) : base(name, uri, parameters, roles, applicationName)
        {
            ScriptExecutionId = scriptExecutionId;
            StartOn = startOn;
            EndOn = endOn;
            Status = status;
            Operation = operation;
            ExecutionSummary = executionSummary;
            DebugInformation = debugInformation;
        }

        /// <summary>
        /// The execution id of the script action.
        /// Serialized Name: RuntimeScriptActionDetail.scriptExecutionId
        /// </summary>
        public long? ScriptExecutionId { get; }
        /// <summary>
        /// The start time of script action execution.
        /// Serialized Name: RuntimeScriptActionDetail.startTime
        /// </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary>
        /// The end time of script action execution.
        /// Serialized Name: RuntimeScriptActionDetail.endTime
        /// </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary>
        /// The current execution status of the script action.
        /// Serialized Name: RuntimeScriptActionDetail.status
        /// </summary>
        public string Status { get; }
        /// <summary>
        /// The reason why the script action was executed.
        /// Serialized Name: RuntimeScriptActionDetail.operation
        /// </summary>
        public string Operation { get; }
        /// <summary>
        /// The summary of script action execution result.
        /// Serialized Name: RuntimeScriptActionDetail.executionSummary
        /// </summary>
        public IReadOnlyList<ScriptActionExecutionSummary> ExecutionSummary { get; }
        /// <summary>
        /// The script action execution debug information.
        /// Serialized Name: RuntimeScriptActionDetail.debugInformation
        /// </summary>
        public string DebugInformation { get; }
    }
}
