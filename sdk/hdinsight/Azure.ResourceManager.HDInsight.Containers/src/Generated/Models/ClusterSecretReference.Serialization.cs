// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    public partial class ClusterSecretReference : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("referenceName"u8);
            writer.WriteStringValue(ReferenceName);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(KeyVaultObjectType.ToString());
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            writer.WritePropertyName("keyVaultObjectName"u8);
            writer.WriteStringValue(KeyVaultObjectName);
            writer.WriteEndObject();
        }

        internal static ClusterSecretReference DeserializeClusterSecretReference(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string referenceName = default;
            KeyVaultObjectType type = default;
            Optional<string> version = default;
            string keyVaultObjectName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("referenceName"u8))
                {
                    referenceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new KeyVaultObjectType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyVaultObjectName"u8))
                {
                    keyVaultObjectName = property.Value.GetString();
                    continue;
                }
            }
            return new ClusterSecretReference(referenceName, type, version.Value, keyVaultObjectName);
        }
    }
}
