// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    /// <summary> Cluster profile. </summary>
    public partial class ClusterProfile
    {
        /// <summary> Initializes a new instance of <see cref="ClusterProfile"/>. </summary>
        /// <param name="clusterVersion"> Version with 3/4 part. </param>
        /// <param name="ossVersion"> Version with three part. </param>
        /// <param name="identityProfile"> Identity Profile with details of an MSI. </param>
        /// <param name="authorizationProfile"> Authorization profile with details of AAD user Ids and group Ids authorized for data plane access. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterVersion"/>, <paramref name="ossVersion"/>, <paramref name="identityProfile"/> or <paramref name="authorizationProfile"/> is null. </exception>
        public ClusterProfile(string clusterVersion, string ossVersion, HDInsightIdentityProfile identityProfile, AuthorizationProfile authorizationProfile)
        {
            Argument.AssertNotNull(clusterVersion, nameof(clusterVersion));
            Argument.AssertNotNull(ossVersion, nameof(ossVersion));
            Argument.AssertNotNull(identityProfile, nameof(identityProfile));
            Argument.AssertNotNull(authorizationProfile, nameof(authorizationProfile));

            ClusterVersion = clusterVersion;
            OssVersion = ossVersion;
            Components = new ChangeTrackingList<ClusterComponentItem>();
            IdentityProfile = identityProfile;
            AuthorizationProfile = authorizationProfile;
            ServiceConfigsProfiles = new ChangeTrackingList<ClusterServiceConfigsProfile>();
            KafkaProfile = new ChangeTrackingDictionary<string, BinaryData>();
            LlapProfile = new ChangeTrackingDictionary<string, BinaryData>();
            StubProfile = new ChangeTrackingDictionary<string, BinaryData>();
            ScriptActionProfiles = new ChangeTrackingList<ScriptActionProfile>();
        }

        /// <summary> Initializes a new instance of <see cref="ClusterProfile"/>. </summary>
        /// <param name="clusterVersion"> Version with 3/4 part. </param>
        /// <param name="ossVersion"> Version with three part. </param>
        /// <param name="components"> Component list of this cluster type and version. </param>
        /// <param name="identityProfile"> Identity Profile with details of an MSI. </param>
        /// <param name="authorizationProfile"> Authorization profile with details of AAD user Ids and group Ids authorized for data plane access. </param>
        /// <param name="secretsProfile"> The cluster secret profile. </param>
        /// <param name="serviceConfigsProfiles"> The service configs profiles. </param>
        /// <param name="connectivityProfile"> Cluster connectivity profile. </param>
        /// <param name="logAnalyticsProfile"> Cluster log analytics profile to enable or disable OMS agent for cluster. </param>
        /// <param name="prometheusProfile"> Cluster Prometheus profile. </param>
        /// <param name="sshProfile"> Ssh profile for the cluster. </param>
        /// <param name="autoscaleProfile"> This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale. </param>
        /// <param name="kafkaProfile"> Kafka cluster profile. </param>
        /// <param name="trinoProfile"> Trino Cluster profile. </param>
        /// <param name="llapProfile"> LLAP cluster profile. </param>
        /// <param name="flinkProfile"> The Flink cluster profile. </param>
        /// <param name="sparkProfile"> The spark cluster profile. </param>
        /// <param name="stubProfile"> Stub cluster profile. </param>
        /// <param name="scriptActionProfiles"> The script action profile list. </param>
        internal ClusterProfile(string clusterVersion, string ossVersion, IReadOnlyList<ClusterComponentItem> components, HDInsightIdentityProfile identityProfile, AuthorizationProfile authorizationProfile, ClusterSecretsProfile secretsProfile, IList<ClusterServiceConfigsProfile> serviceConfigsProfiles, ClusterConnectivityProfile connectivityProfile, ClusterLogAnalyticsProfile logAnalyticsProfile, ClusterPrometheusProfile prometheusProfile, ClusterSshProfile sshProfile, ClusterAutoscaleProfile autoscaleProfile, IDictionary<string, BinaryData> kafkaProfile, TrinoProfile trinoProfile, IDictionary<string, BinaryData> llapProfile, FlinkProfile flinkProfile, SparkProfile sparkProfile, IDictionary<string, BinaryData> stubProfile, IList<ScriptActionProfile> scriptActionProfiles)
        {
            ClusterVersion = clusterVersion;
            OssVersion = ossVersion;
            Components = components;
            IdentityProfile = identityProfile;
            AuthorizationProfile = authorizationProfile;
            SecretsProfile = secretsProfile;
            ServiceConfigsProfiles = serviceConfigsProfiles;
            ConnectivityProfile = connectivityProfile;
            LogAnalyticsProfile = logAnalyticsProfile;
            PrometheusProfile = prometheusProfile;
            SshProfile = sshProfile;
            AutoscaleProfile = autoscaleProfile;
            KafkaProfile = kafkaProfile;
            TrinoProfile = trinoProfile;
            LlapProfile = llapProfile;
            FlinkProfile = flinkProfile;
            SparkProfile = sparkProfile;
            StubProfile = stubProfile;
            ScriptActionProfiles = scriptActionProfiles;
        }

        /// <summary> Version with 3/4 part. </summary>
        public string ClusterVersion { get; set; }
        /// <summary> Version with three part. </summary>
        public string OssVersion { get; set; }
        /// <summary> Component list of this cluster type and version. </summary>
        public IReadOnlyList<ClusterComponentItem> Components { get; }
        /// <summary> Identity Profile with details of an MSI. </summary>
        public HDInsightIdentityProfile IdentityProfile { get; set; }
        /// <summary> Authorization profile with details of AAD user Ids and group Ids authorized for data plane access. </summary>
        public AuthorizationProfile AuthorizationProfile { get; set; }
        /// <summary> The cluster secret profile. </summary>
        public ClusterSecretsProfile SecretsProfile { get; set; }
        /// <summary> The service configs profiles. </summary>
        public IList<ClusterServiceConfigsProfile> ServiceConfigsProfiles { get; }
        /// <summary> Cluster connectivity profile. </summary>
        public ClusterConnectivityProfile ConnectivityProfile { get; }
        /// <summary> Cluster log analytics profile to enable or disable OMS agent for cluster. </summary>
        public ClusterLogAnalyticsProfile LogAnalyticsProfile { get; set; }
        /// <summary> Cluster Prometheus profile. </summary>
        internal ClusterPrometheusProfile PrometheusProfile { get; set; }
        /// <summary> Enable Prometheus for cluster or not. </summary>
        public bool? IsEnabled
        {
            get => PrometheusProfile is null ? default(bool?) : PrometheusProfile.IsEnabled;
            set
            {
                PrometheusProfile = value.HasValue ? new ClusterPrometheusProfile(value.Value) : null;
            }
        }

        /// <summary> Ssh profile for the cluster. </summary>
        public ClusterSshProfile SshProfile { get; set; }
        /// <summary> This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale. </summary>
        public ClusterAutoscaleProfile AutoscaleProfile { get; set; }
        /// <summary>
        /// Kafka cluster profile.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> KafkaProfile { get; }
        /// <summary> Trino Cluster profile. </summary>
        public TrinoProfile TrinoProfile { get; set; }
        /// <summary>
        /// LLAP cluster profile.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> LlapProfile { get; }
        /// <summary> The Flink cluster profile. </summary>
        public FlinkProfile FlinkProfile { get; set; }
        /// <summary> The spark cluster profile. </summary>
        public SparkProfile SparkProfile { get; set; }
        /// <summary>
        /// Stub cluster profile.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> StubProfile { get; }
        /// <summary> The script action profile list. </summary>
        public IList<ScriptActionProfile> ScriptActionProfiles { get; }
    }
}
