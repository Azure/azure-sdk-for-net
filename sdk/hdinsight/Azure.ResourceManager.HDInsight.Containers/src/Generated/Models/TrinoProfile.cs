// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    /// <summary> Trino Cluster profile. </summary>
    public partial class TrinoProfile
    {
        /// <summary> Initializes a new instance of <see cref="TrinoProfile"/>. </summary>
        public TrinoProfile()
        {
        }

        /// <summary> Initializes a new instance of <see cref="TrinoProfile"/>. </summary>
        /// <param name="catalogOptions"> Trino cluster catalog options. </param>
        /// <param name="coordinator"> Trino Coordinator. </param>
        /// <param name="userPluginsSpec"> Trino user plugins spec. </param>
        /// <param name="userTelemetrySpec"> User telemetry. </param>
        /// <param name="worker"> Trino worker. </param>
        internal TrinoProfile(CatalogOptions catalogOptions, TrinoCoordinator coordinator, TrinoUserPluginListResult userPluginsSpec, TrinoUserTelemetry userTelemetrySpec, TrinoWorker worker)
        {
            CatalogOptions = catalogOptions;
            Coordinator = coordinator;
            UserPluginsSpec = userPluginsSpec;
            UserTelemetrySpec = userTelemetrySpec;
            Worker = worker;
        }

        /// <summary> Trino cluster catalog options. </summary>
        internal CatalogOptions CatalogOptions { get; set; }
        /// <summary> hive catalog options. </summary>
        public IList<HiveCatalogOption> CatalogOptionsHive
        {
            get
            {
                if (CatalogOptions is null)
                    CatalogOptions = new CatalogOptions();
                return CatalogOptions.Hive;
            }
        }

        /// <summary> Trino Coordinator. </summary>
        public TrinoCoordinator Coordinator { get; set; }
        /// <summary> Trino user plugins spec. </summary>
        internal TrinoUserPluginListResult UserPluginsSpec { get; set; }
        /// <summary> Trino user plugins. </summary>
        public IList<TrinoUserPlugin> Plugins
        {
            get
            {
                if (UserPluginsSpec is null)
                    UserPluginsSpec = new TrinoUserPluginListResult();
                return UserPluginsSpec.Plugins;
            }
        }

        /// <summary> User telemetry. </summary>
        internal TrinoUserTelemetry UserTelemetrySpec { get; set; }
        /// <summary> Trino user telemetry definition. </summary>
        public TrinoTelemetryConfig UserTelemetrySpecStorage
        {
            get => UserTelemetrySpec is null ? default : UserTelemetrySpec.Storage;
            set
            {
                if (UserTelemetrySpec is null)
                    UserTelemetrySpec = new TrinoUserTelemetry();
                UserTelemetrySpec.Storage = value;
            }
        }

        /// <summary> Trino worker. </summary>
        public TrinoWorker Worker { get; set; }
    }
}
