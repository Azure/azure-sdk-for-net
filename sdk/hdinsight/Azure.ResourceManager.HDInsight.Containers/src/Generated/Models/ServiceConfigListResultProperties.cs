// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    /// <summary> Service config response. </summary>
    public partial class ServiceConfigListResultProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ServiceConfigListResultProperties"/>. </summary>
        /// <param name="serviceName"> Service Config Name. </param>
        /// <param name="fileName"> File Name. </param>
        /// <param name="componentName"> Component Name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/>, <paramref name="fileName"/> or <paramref name="componentName"/> is null. </exception>
        internal ServiceConfigListResultProperties(string serviceName, string fileName, string componentName)
        {
            Argument.AssertNotNull(serviceName, nameof(serviceName));
            Argument.AssertNotNull(fileName, nameof(fileName));
            Argument.AssertNotNull(componentName, nameof(componentName));

            ServiceName = serviceName;
            FileName = fileName;
            ComponentName = componentName;
            CustomKeys = new ChangeTrackingDictionary<string, string>();
            DefaultKeys = new ChangeTrackingDictionary<string, ClusterServiceConfigValueEntity>();
        }

        /// <summary> Initializes a new instance of <see cref="ServiceConfigListResultProperties"/>. </summary>
        /// <param name="serviceName"> Service Config Name. </param>
        /// <param name="fileName"> File Name. </param>
        /// <param name="content"> Content in the service config file. </param>
        /// <param name="componentName"> Component Name. </param>
        /// <param name="serviceConfigListResultPropertiesType"> Config type. </param>
        /// <param name="path"> Config file path. </param>
        /// <param name="customKeys"> The custom keys. </param>
        /// <param name="defaultKeys"> The default keys. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ServiceConfigListResultProperties(string serviceName, string fileName, string content, string componentName, string serviceConfigListResultPropertiesType, string path, IReadOnlyDictionary<string, string> customKeys, IReadOnlyDictionary<string, ClusterServiceConfigValueEntity> defaultKeys, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ServiceName = serviceName;
            FileName = fileName;
            Content = content;
            ComponentName = componentName;
            ServiceConfigListResultPropertiesType = serviceConfigListResultPropertiesType;
            Path = path;
            CustomKeys = customKeys;
            DefaultKeys = defaultKeys;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ServiceConfigListResultProperties"/> for deserialization. </summary>
        internal ServiceConfigListResultProperties()
        {
        }

        /// <summary> Service Config Name. </summary>
        public string ServiceName { get; }
        /// <summary> File Name. </summary>
        public string FileName { get; }
        /// <summary> Content in the service config file. </summary>
        public string Content { get; }
        /// <summary> Component Name. </summary>
        public string ComponentName { get; }
        /// <summary> Config type. </summary>
        public string ServiceConfigListResultPropertiesType { get; }
        /// <summary> Config file path. </summary>
        public string Path { get; }
        /// <summary> The custom keys. </summary>
        public IReadOnlyDictionary<string, string> CustomKeys { get; }
        /// <summary> The default keys. </summary>
        public IReadOnlyDictionary<string, ClusterServiceConfigValueEntity> DefaultKeys { get; }
    }
}
