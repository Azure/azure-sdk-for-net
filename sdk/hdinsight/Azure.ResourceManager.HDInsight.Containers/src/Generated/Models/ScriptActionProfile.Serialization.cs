// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    public partial class ScriptActionProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(ScriptActionProfileType);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(UriString);
            if (Optional.IsDefined(Parameters))
            {
                writer.WritePropertyName("parameters"u8);
                writer.WriteStringValue(Parameters);
            }
            writer.WritePropertyName("services"u8);
            writer.WriteStartArray();
            foreach (var item in Services)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(TimeoutInMinutes))
            {
                writer.WritePropertyName("timeoutInMinutes"u8);
                writer.WriteNumberValue(TimeoutInMinutes.Value);
            }
            if (Optional.IsDefined(ShouldPersist))
            {
                writer.WritePropertyName("shouldPersist"u8);
                writer.WriteBooleanValue(ShouldPersist.Value);
            }
            writer.WriteEndObject();
        }

        internal static ScriptActionProfile DeserializeScriptActionProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            string name = default;
            string url = default;
            Optional<string> parameters = default;
            IList<string> services = default;
            Optional<int> timeoutInMinutes = default;
            Optional<bool> shouldPersist = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameters"u8))
                {
                    parameters = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("services"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    services = array;
                    continue;
                }
                if (property.NameEquals("timeoutInMinutes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeoutInMinutes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("shouldPersist"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shouldPersist = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ScriptActionProfile(type, name, url, parameters.Value, services, Optional.ToNullable(timeoutInMinutes), Optional.ToNullable(shouldPersist));
        }
    }
}
