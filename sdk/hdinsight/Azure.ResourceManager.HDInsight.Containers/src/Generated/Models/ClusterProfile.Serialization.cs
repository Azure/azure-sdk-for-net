// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    public partial class ClusterProfile : IUtf8JsonSerializable, IJsonModel<ClusterProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ClusterProfile>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ClusterProfile>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ClusterProfile>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ClusterProfile)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("clusterVersion"u8);
            writer.WriteStringValue(ClusterVersion);
            writer.WritePropertyName("ossVersion"u8);
            writer.WriteStringValue(OssVersion);
            if (options.Format != "W" && !(Components is ChangeTrackingList<ClusterComponentItem> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("components"u8);
                writer.WriteStartArray();
                foreach (var item in Components)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("identityProfile"u8);
            writer.WriteObjectValue(IdentityProfile);
            writer.WritePropertyName("authorizationProfile"u8);
            writer.WriteObjectValue(AuthorizationProfile);
            if (SecretsProfile != null)
            {
                writer.WritePropertyName("secretsProfile"u8);
                writer.WriteObjectValue(SecretsProfile);
            }
            if (!(ServiceConfigsProfiles is ChangeTrackingList<ClusterServiceConfigsProfile> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("serviceConfigsProfiles"u8);
                writer.WriteStartArray();
                foreach (var item in ServiceConfigsProfiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && ConnectivityProfile != null)
            {
                writer.WritePropertyName("connectivityProfile"u8);
                writer.WriteObjectValue(ConnectivityProfile);
            }
            if (LogAnalyticsProfile != null)
            {
                writer.WritePropertyName("logAnalyticsProfile"u8);
                writer.WriteObjectValue(LogAnalyticsProfile);
            }
            if (PrometheusProfile != null)
            {
                writer.WritePropertyName("prometheusProfile"u8);
                writer.WriteObjectValue(PrometheusProfile);
            }
            if (SshProfile != null)
            {
                writer.WritePropertyName("sshProfile"u8);
                writer.WriteObjectValue(SshProfile);
            }
            if (AutoscaleProfile != null)
            {
                writer.WritePropertyName("autoscaleProfile"u8);
                writer.WriteObjectValue(AutoscaleProfile);
            }
            if (!(KafkaProfile is ChangeTrackingDictionary<string, BinaryData> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("kafkaProfile"u8);
                writer.WriteStartObject();
                foreach (var item in KafkaProfile)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (TrinoProfile != null)
            {
                writer.WritePropertyName("trinoProfile"u8);
                writer.WriteObjectValue(TrinoProfile);
            }
            if (!(LlapProfile is ChangeTrackingDictionary<string, BinaryData> collection2 && collection2.IsUndefined))
            {
                writer.WritePropertyName("llapProfile"u8);
                writer.WriteStartObject();
                foreach (var item in LlapProfile)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (FlinkProfile != null)
            {
                writer.WritePropertyName("flinkProfile"u8);
                writer.WriteObjectValue(FlinkProfile);
            }
            if (SparkProfile != null)
            {
                writer.WritePropertyName("sparkProfile"u8);
                writer.WriteObjectValue(SparkProfile);
            }
            if (!(StubProfile is ChangeTrackingDictionary<string, BinaryData> collection3 && collection3.IsUndefined))
            {
                writer.WritePropertyName("stubProfile"u8);
                writer.WriteStartObject();
                foreach (var item in StubProfile)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (!(ScriptActionProfiles is ChangeTrackingList<ScriptActionProfile> collection4 && collection4.IsUndefined))
            {
                writer.WritePropertyName("scriptActionProfiles"u8);
                writer.WriteStartArray();
                foreach (var item in ScriptActionProfiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ClusterProfile IJsonModel<ClusterProfile>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ClusterProfile>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ClusterProfile)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeClusterProfile(document.RootElement, options);
        }

        internal static ClusterProfile DeserializeClusterProfile(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string clusterVersion = default;
            string ossVersion = default;
            IReadOnlyList<ClusterComponentItem> components = default;
            HDInsightIdentityProfile identityProfile = default;
            AuthorizationProfile authorizationProfile = default;
            Optional<ClusterSecretsProfile> secretsProfile = default;
            IList<ClusterServiceConfigsProfile> serviceConfigsProfiles = default;
            Optional<ClusterConnectivityProfile> connectivityProfile = default;
            Optional<ClusterLogAnalyticsProfile> logAnalyticsProfile = default;
            Optional<ClusterPrometheusProfile> prometheusProfile = default;
            Optional<ClusterSshProfile> sshProfile = default;
            Optional<ClusterAutoscaleProfile> autoscaleProfile = default;
            IDictionary<string, BinaryData> kafkaProfile = default;
            Optional<TrinoProfile> trinoProfile = default;
            IDictionary<string, BinaryData> llapProfile = default;
            Optional<FlinkProfile> flinkProfile = default;
            Optional<SparkProfile> sparkProfile = default;
            IDictionary<string, BinaryData> stubProfile = default;
            IList<ScriptActionProfile> scriptActionProfiles = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clusterVersion"u8))
                {
                    clusterVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ossVersion"u8))
                {
                    ossVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("components"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ClusterComponentItem> array = new List<ClusterComponentItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ClusterComponentItem.DeserializeClusterComponentItem(item, options));
                    }
                    components = array;
                    continue;
                }
                if (property.NameEquals("identityProfile"u8))
                {
                    identityProfile = HDInsightIdentityProfile.DeserializeHDInsightIdentityProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("authorizationProfile"u8))
                {
                    authorizationProfile = AuthorizationProfile.DeserializeAuthorizationProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("secretsProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    secretsProfile = ClusterSecretsProfile.DeserializeClusterSecretsProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("serviceConfigsProfiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ClusterServiceConfigsProfile> array = new List<ClusterServiceConfigsProfile>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ClusterServiceConfigsProfile.DeserializeClusterServiceConfigsProfile(item, options));
                    }
                    serviceConfigsProfiles = array;
                    continue;
                }
                if (property.NameEquals("connectivityProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectivityProfile = ClusterConnectivityProfile.DeserializeClusterConnectivityProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("logAnalyticsProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logAnalyticsProfile = ClusterLogAnalyticsProfile.DeserializeClusterLogAnalyticsProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("prometheusProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    prometheusProfile = ClusterPrometheusProfile.DeserializeClusterPrometheusProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("sshProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sshProfile = ClusterSshProfile.DeserializeClusterSshProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("autoscaleProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoscaleProfile = ClusterAutoscaleProfile.DeserializeClusterAutoscaleProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("kafkaProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    kafkaProfile = dictionary;
                    continue;
                }
                if (property.NameEquals("trinoProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    trinoProfile = TrinoProfile.DeserializeTrinoProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("llapProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    llapProfile = dictionary;
                    continue;
                }
                if (property.NameEquals("flinkProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    flinkProfile = FlinkProfile.DeserializeFlinkProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("sparkProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sparkProfile = SparkProfile.DeserializeSparkProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("stubProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    stubProfile = dictionary;
                    continue;
                }
                if (property.NameEquals("scriptActionProfiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ScriptActionProfile> array = new List<ScriptActionProfile>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ScriptActionProfile.DeserializeScriptActionProfile(item, options));
                    }
                    scriptActionProfiles = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ClusterProfile(
                clusterVersion,
                ossVersion,
                components ?? new ChangeTrackingList<ClusterComponentItem>(),
                identityProfile,
                authorizationProfile,
                secretsProfile.Value,
                serviceConfigsProfiles ?? new ChangeTrackingList<ClusterServiceConfigsProfile>(),
                connectivityProfile.Value,
                logAnalyticsProfile.Value,
                prometheusProfile.Value,
                sshProfile.Value,
                autoscaleProfile.Value,
                kafkaProfile ?? new ChangeTrackingDictionary<string, BinaryData>(),
                trinoProfile.Value,
                llapProfile ?? new ChangeTrackingDictionary<string, BinaryData>(),
                flinkProfile.Value,
                sparkProfile.Value,
                stubProfile ?? new ChangeTrackingDictionary<string, BinaryData>(),
                scriptActionProfiles ?? new ChangeTrackingList<ScriptActionProfile>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ClusterProfile>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ClusterProfile>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ClusterProfile)} does not support '{options.Format}' format.");
            }
        }

        ClusterProfile IPersistableModel<ClusterProfile>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ClusterProfile>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeClusterProfile(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ClusterProfile)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ClusterProfile>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
