// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    public partial class TrinoProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(CatalogOptions))
            {
                writer.WritePropertyName("catalogOptions"u8);
                writer.WriteObjectValue(CatalogOptions);
            }
            if (Optional.IsDefined(Coordinator))
            {
                writer.WritePropertyName("coordinator"u8);
                writer.WriteObjectValue(Coordinator);
            }
            if (Optional.IsDefined(UserPluginsSpec))
            {
                writer.WritePropertyName("userPluginsSpec"u8);
                writer.WriteObjectValue(UserPluginsSpec);
            }
            if (Optional.IsDefined(UserTelemetrySpec))
            {
                writer.WritePropertyName("userTelemetrySpec"u8);
                writer.WriteObjectValue(UserTelemetrySpec);
            }
            if (Optional.IsDefined(Worker))
            {
                writer.WritePropertyName("worker"u8);
                writer.WriteObjectValue(Worker);
            }
            writer.WriteEndObject();
        }

        internal static TrinoProfile DeserializeTrinoProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<CatalogOptions> catalogOptions = default;
            Optional<TrinoCoordinator> coordinator = default;
            Optional<TrinoUserPluginListResult> userPluginsSpec = default;
            Optional<TrinoUserTelemetry> userTelemetrySpec = default;
            Optional<TrinoWorker> worker = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("catalogOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    catalogOptions = CatalogOptions.DeserializeCatalogOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("coordinator"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    coordinator = TrinoCoordinator.DeserializeTrinoCoordinator(property.Value);
                    continue;
                }
                if (property.NameEquals("userPluginsSpec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userPluginsSpec = TrinoUserPluginListResult.DeserializeTrinoUserPluginListResult(property.Value);
                    continue;
                }
                if (property.NameEquals("userTelemetrySpec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userTelemetrySpec = TrinoUserTelemetry.DeserializeTrinoUserTelemetry(property.Value);
                    continue;
                }
                if (property.NameEquals("worker"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    worker = TrinoWorker.DeserializeTrinoWorker(property.Value);
                    continue;
                }
            }
            return new TrinoProfile(catalogOptions.Value, coordinator.Value, userPluginsSpec.Value, userTelemetrySpec.Value, worker.Value);
        }
    }
}
