// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    /// <summary> Managed Disk Type. </summary>
    public readonly partial struct DataDiskType : IEquatable<DataDiskType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataDiskType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardHDDLRSValue = "Standard_HDD_LRS";
        private const string StandardSSDLRSValue = "Standard_SSD_LRS";
        private const string StandardSSDZRSValue = "Standard_SSD_ZRS";
        private const string PremiumSSDLRSValue = "Premium_SSD_LRS";
        private const string PremiumSSDZRSValue = "Premium_SSD_ZRS";
        private const string PremiumSSDV2LRSValue = "Premium_SSD_v2_LRS";

        /// <summary> Standard_HDD_LRS. </summary>
        public static DataDiskType StandardHDDLRS { get; } = new DataDiskType(StandardHDDLRSValue);
        /// <summary> Standard_SSD_LRS. </summary>
        public static DataDiskType StandardSSDLRS { get; } = new DataDiskType(StandardSSDLRSValue);
        /// <summary> Standard_SSD_ZRS. </summary>
        public static DataDiskType StandardSSDZRS { get; } = new DataDiskType(StandardSSDZRSValue);
        /// <summary> Premium_SSD_LRS. </summary>
        public static DataDiskType PremiumSSDLRS { get; } = new DataDiskType(PremiumSSDLRSValue);
        /// <summary> Premium_SSD_ZRS. </summary>
        public static DataDiskType PremiumSSDZRS { get; } = new DataDiskType(PremiumSSDZRSValue);
        /// <summary> Premium_SSD_v2_LRS. </summary>
        public static DataDiskType PremiumSSDV2LRS { get; } = new DataDiskType(PremiumSSDV2LRSValue);
        /// <summary> Determines if two <see cref="DataDiskType"/> values are the same. </summary>
        public static bool operator ==(DataDiskType left, DataDiskType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataDiskType"/> values are not the same. </summary>
        public static bool operator !=(DataDiskType left, DataDiskType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataDiskType"/>. </summary>
        public static implicit operator DataDiskType(string value) => new DataDiskType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataDiskType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataDiskType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
