// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    /// <summary> The Kafka cluster profile. </summary>
    public partial class KafkaProfile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="KafkaProfile"/>. </summary>
        /// <param name="diskStorage"> Kafka disk storage profile. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="diskStorage"/> is null. </exception>
        public KafkaProfile(DiskStorageProfile diskStorage)
        {
            Argument.AssertNotNull(diskStorage, nameof(diskStorage));

            DiskStorage = diskStorage;
        }

        /// <summary> Initializes a new instance of <see cref="KafkaProfile"/>. </summary>
        /// <param name="enableKRaft"> Expose Kafka cluster in KRaft mode. </param>
        /// <param name="enablePublicEndpoints"> Expose worker nodes as public endpoints. </param>
        /// <param name="remoteStorageUri"> Fully qualified path of Azure Storage container used for Tiered Storage. </param>
        /// <param name="diskStorage"> Kafka disk storage profile. </param>
        /// <param name="clusterIdentity"> Identity of the internal service components inside the Kafka cluster. </param>
        /// <param name="connectivityEndpoints"> Kafka bootstrap server and brokers related connectivity endpoints. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal KafkaProfile(bool? enableKRaft, bool? enablePublicEndpoints, Uri remoteStorageUri, DiskStorageProfile diskStorage, HDInsightIdentityProfile clusterIdentity, KafkaConnectivityEndpoints connectivityEndpoints, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EnableKRaft = enableKRaft;
            EnablePublicEndpoints = enablePublicEndpoints;
            RemoteStorageUri = remoteStorageUri;
            DiskStorage = diskStorage;
            ClusterIdentity = clusterIdentity;
            ConnectivityEndpoints = connectivityEndpoints;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="KafkaProfile"/> for deserialization. </summary>
        internal KafkaProfile()
        {
        }

        /// <summary> Expose Kafka cluster in KRaft mode. </summary>
        public bool? EnableKRaft { get; set; }
        /// <summary> Expose worker nodes as public endpoints. </summary>
        public bool? EnablePublicEndpoints { get; set; }
        /// <summary> Fully qualified path of Azure Storage container used for Tiered Storage. </summary>
        public Uri RemoteStorageUri { get; set; }
        /// <summary> Kafka disk storage profile. </summary>
        public DiskStorageProfile DiskStorage { get; set; }
        /// <summary> Identity of the internal service components inside the Kafka cluster. </summary>
        public HDInsightIdentityProfile ClusterIdentity { get; }
        /// <summary> Kafka bootstrap server and brokers related connectivity endpoints. </summary>
        public KafkaConnectivityEndpoints ConnectivityEndpoints { get; }
    }
}
