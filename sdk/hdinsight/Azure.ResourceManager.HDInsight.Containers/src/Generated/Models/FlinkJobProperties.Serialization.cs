// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    public partial class FlinkJobProperties : IUtf8JsonSerializable, IModelJsonSerializable<FlinkJobProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<FlinkJobProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<FlinkJobProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<FlinkJobProperties>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("jobName"u8);
            writer.WriteStringValue(JobName);
            if (Optional.IsDefined(JobJarDirectory))
            {
                writer.WritePropertyName("jobJarDirectory"u8);
                writer.WriteStringValue(JobJarDirectory);
            }
            if (Optional.IsDefined(JarName))
            {
                writer.WritePropertyName("jarName"u8);
                writer.WriteStringValue(JarName);
            }
            if (Optional.IsDefined(EntryClass))
            {
                writer.WritePropertyName("entryClass"u8);
                writer.WriteStringValue(EntryClass);
            }
            if (Optional.IsDefined(Args))
            {
                writer.WritePropertyName("args"u8);
                writer.WriteStringValue(Args);
            }
            if (Optional.IsDefined(SavePointName))
            {
                writer.WritePropertyName("savePointName"u8);
                writer.WriteStringValue(SavePointName);
            }
            if (Optional.IsDefined(Action))
            {
                writer.WritePropertyName("action"u8);
                writer.WriteStringValue(Action.Value.ToString());
            }
            if (Optional.IsCollectionDefined(FlinkConfiguration))
            {
                writer.WritePropertyName("flinkConfiguration"u8);
                writer.WriteStartObject();
                foreach (var item in FlinkConfiguration)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("jobType"u8);
            writer.WriteStringValue(JobType.ToString());
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static FlinkJobProperties DeserializeFlinkJobProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string jobName = default;
            Optional<string> jobJarDirectory = default;
            Optional<string> jarName = default;
            Optional<string> entryClass = default;
            Optional<string> args = default;
            Optional<string> savePointName = default;
            Optional<FlinkJobAction> action = default;
            Optional<IDictionary<string, string>> flinkConfiguration = default;
            Optional<string> jobId = default;
            Optional<string> status = default;
            Optional<string> jobOutput = default;
            Optional<string> actionResult = default;
            Optional<string> lastSavePoint = default;
            ClusterJobType jobType = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jobName"u8))
                {
                    jobName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobJarDirectory"u8))
                {
                    jobJarDirectory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jarName"u8))
                {
                    jarName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("entryClass"u8))
                {
                    entryClass = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("args"u8))
                {
                    args = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("savePointName"u8))
                {
                    savePointName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("action"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    action = new FlinkJobAction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("flinkConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    flinkConfiguration = dictionary;
                    continue;
                }
                if (property.NameEquals("jobId"u8))
                {
                    jobId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobOutput"u8))
                {
                    jobOutput = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("actionResult"u8))
                {
                    actionResult = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastSavePoint"u8))
                {
                    lastSavePoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobType"u8))
                {
                    jobType = new ClusterJobType(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new FlinkJobProperties(jobType, jobName, jobJarDirectory.Value, jarName.Value, entryClass.Value, args.Value, savePointName.Value, Optional.ToNullable(action), Optional.ToDictionary(flinkConfiguration), jobId.Value, status.Value, jobOutput.Value, actionResult.Value, lastSavePoint.Value, rawData);
        }

        FlinkJobProperties IModelJsonSerializable<FlinkJobProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<FlinkJobProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeFlinkJobProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<FlinkJobProperties>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<FlinkJobProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        FlinkJobProperties IModelSerializable<FlinkJobProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<FlinkJobProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeFlinkJobProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="FlinkJobProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="FlinkJobProperties"/> to convert. </param>
        public static implicit operator RequestContent(FlinkJobProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="FlinkJobProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator FlinkJobProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeFlinkJobProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
