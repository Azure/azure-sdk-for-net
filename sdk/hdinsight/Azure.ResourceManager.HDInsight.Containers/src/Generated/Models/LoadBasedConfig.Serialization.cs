// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HDInsight.Containers.Models
{
    public partial class LoadBasedConfig : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("minNodes"u8);
            writer.WriteNumberValue(MinNodes);
            writer.WritePropertyName("maxNodes"u8);
            writer.WriteNumberValue(MaxNodes);
            if (Optional.IsDefined(PollIntervalInSeconds))
            {
                writer.WritePropertyName("pollInterval"u8);
                writer.WriteNumberValue(PollIntervalInSeconds.Value);
            }
            if (Optional.IsDefined(CooldownPeriod))
            {
                writer.WritePropertyName("cooldownPeriod"u8);
                writer.WriteNumberValue(CooldownPeriod.Value);
            }
            writer.WritePropertyName("scalingRules"u8);
            writer.WriteStartArray();
            foreach (var item in ScalingRules)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static LoadBasedConfig DeserializeLoadBasedConfig(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int minNodes = default;
            int maxNodes = default;
            Optional<int> pollInterval = default;
            Optional<int> cooldownPeriod = default;
            IList<ScalingRule> scalingRules = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("minNodes"u8))
                {
                    minNodes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxNodes"u8))
                {
                    maxNodes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("pollInterval"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pollInterval = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("cooldownPeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cooldownPeriod = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("scalingRules"u8))
                {
                    List<ScalingRule> array = new List<ScalingRule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ScalingRule.DeserializeScalingRule(item));
                    }
                    scalingRules = array;
                    continue;
                }
            }
            return new LoadBasedConfig(minNodes, maxNodes, Optional.ToNullable(pollInterval), Optional.ToNullable(cooldownPeriod), scalingRules);
        }
    }
}
