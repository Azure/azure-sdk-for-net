// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagedServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Eligible authorization tuple containing principle Id (of user/service
    /// principal/security group), role definition id, and the just-in-time
    /// access setting.
    /// </summary>
    public partial class EligibleAuthorization
    {
        /// <summary>
        /// Initializes a new instance of the EligibleAuthorization class.
        /// </summary>
        public EligibleAuthorization()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EligibleAuthorization class.
        /// </summary>
        /// <param name="principalId">Principal Id of the security
        /// group/service principal/user that would be delegated permissions to
        /// the projected subscription</param>
        /// <param name="roleDefinitionId">The role definition identifier. This
        /// role will delegate all the permissions that the security
        /// group/service principal/user must have on the projected
        /// subscription. This role cannot be an owner role.</param>
        /// <param name="principalIdDisplayName">Display name of the principal
        /// Id.</param>
        /// <param name="justInTimeAccessPolicy">Just-in-time access policy
        /// setting.</param>
        public EligibleAuthorization(string principalId, string roleDefinitionId, string principalIdDisplayName = default(string), JustInTimeAccessPolicy justInTimeAccessPolicy = default(JustInTimeAccessPolicy))
        {
            PrincipalId = principalId;
            PrincipalIdDisplayName = principalIdDisplayName;
            RoleDefinitionId = roleDefinitionId;
            JustInTimeAccessPolicy = justInTimeAccessPolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets principal Id of the security group/service
        /// principal/user that would be delegated permissions to the projected
        /// subscription
        /// </summary>
        [JsonProperty(PropertyName = "principalId")]
        public string PrincipalId { get; set; }

        /// <summary>
        /// Gets or sets display name of the principal Id.
        /// </summary>
        [JsonProperty(PropertyName = "principalIdDisplayName")]
        public string PrincipalIdDisplayName { get; set; }

        /// <summary>
        /// Gets or sets the role definition identifier. This role will
        /// delegate all the permissions that the security group/service
        /// principal/user must have on the projected subscription. This role
        /// cannot be an owner role.
        /// </summary>
        [JsonProperty(PropertyName = "roleDefinitionId")]
        public string RoleDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets just-in-time access policy setting.
        /// </summary>
        [JsonProperty(PropertyName = "justInTimeAccessPolicy")]
        public JustInTimeAccessPolicy JustInTimeAccessPolicy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PrincipalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrincipalId");
            }
            if (RoleDefinitionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RoleDefinitionId");
            }
            if (JustInTimeAccessPolicy != null)
            {
                JustInTimeAccessPolicy.Validate();
            }
        }
    }
}
