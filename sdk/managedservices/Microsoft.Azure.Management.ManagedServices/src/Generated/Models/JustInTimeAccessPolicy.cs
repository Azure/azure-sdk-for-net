// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagedServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Just-in-time access policy setting.
    /// </summary>
    public partial class JustInTimeAccessPolicy
    {
        /// <summary>
        /// Initializes a new instance of the JustInTimeAccessPolicy class.
        /// </summary>
        public JustInTimeAccessPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JustInTimeAccessPolicy class.
        /// </summary>
        /// <param name="multiFactorAuthProvider">The multi-factor
        /// authorization provider to be used for just-in-time access requests.
        /// Possible values include: 'Azure', 'None'</param>
        /// <param name="maximumActivationDuration">The maximum access duration
        /// in ISO 8601 format for just-in-time access requests.</param>
        /// <param name="managedByTenantApprovers">The list of managedByTenant
        /// approvers for the eligible authorization.</param>
        public JustInTimeAccessPolicy(string multiFactorAuthProvider, System.TimeSpan? maximumActivationDuration = default(System.TimeSpan?), IList<EligibleApprover> managedByTenantApprovers = default(IList<EligibleApprover>))
        {
            MultiFactorAuthProvider = multiFactorAuthProvider;
            MaximumActivationDuration = maximumActivationDuration;
            ManagedByTenantApprovers = managedByTenantApprovers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the multi-factor authorization provider to be used for
        /// just-in-time access requests. Possible values include: 'Azure',
        /// 'None'
        /// </summary>
        [JsonProperty(PropertyName = "multiFactorAuthProvider")]
        public string MultiFactorAuthProvider { get; set; }

        /// <summary>
        /// Gets or sets the maximum access duration in ISO 8601 format for
        /// just-in-time access requests.
        /// </summary>
        [JsonProperty(PropertyName = "maximumActivationDuration")]
        public System.TimeSpan? MaximumActivationDuration { get; set; }

        /// <summary>
        /// Gets or sets the list of managedByTenant approvers for the eligible
        /// authorization.
        /// </summary>
        [JsonProperty(PropertyName = "managedByTenantApprovers")]
        public IList<EligibleApprover> ManagedByTenantApprovers { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MultiFactorAuthProvider == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MultiFactorAuthProvider");
            }
            if (ManagedByTenantApprovers != null)
            {
                foreach (var element in ManagedByTenantApprovers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
