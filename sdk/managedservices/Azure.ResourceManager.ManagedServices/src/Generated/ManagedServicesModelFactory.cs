// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.ManagedServices;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ManagedServices.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ManagedServicesModelFactory
    {
        /// <summary> Initializes a new instance of RegistrationDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The properties of a registration definition. </param>
        /// <param name="plan"> The details for the Managed Services offerâ€™s plan in Azure Marketplace. </param>
        /// <returns> A new <see cref="ManagedServices.RegistrationDefinitionData"/> instance for mocking. </returns>
        public static RegistrationDefinitionData RegistrationDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RegistrationDefinitionProperties properties = null, ManagedServicesPlan plan = null)
        {
            return new RegistrationDefinitionData(id, name, resourceType, systemData, properties, plan);
        }

        /// <summary> Initializes a new instance of RegistrationDefinitionProperties. </summary>
        /// <param name="description"> The description of the registration definition. </param>
        /// <param name="authorizations"> The collection of authorization objects describing the access Azure Active Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant. </param>
        /// <param name="eligibleAuthorizations"> The collection of eligible authorization objects describing the just-in-time access Azure Active Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant. </param>
        /// <param name="registrationDefinitionName"> The name of the registration definition. </param>
        /// <param name="managedByTenantId"> The identifier of the managedBy tenant. </param>
        /// <param name="provisioningState"> The current provisioning state of the registration definition. </param>
        /// <param name="manageeTenantId"> The identifier of the managed tenant. </param>
        /// <param name="manageeTenantName"> The name of the managed tenant. </param>
        /// <param name="managedByTenantName"> The name of the managedBy tenant. </param>
        /// <returns> A new <see cref="Models.RegistrationDefinitionProperties"/> instance for mocking. </returns>
        public static RegistrationDefinitionProperties RegistrationDefinitionProperties(string description = null, IEnumerable<Authorization> authorizations = null, IEnumerable<EligibleAuthorization> eligibleAuthorizations = null, string registrationDefinitionName = null, string managedByTenantId = null, ProvisioningState? provisioningState = null, string manageeTenantId = null, string manageeTenantName = null, string managedByTenantName = null)
        {
            authorizations ??= new List<Authorization>();
            eligibleAuthorizations ??= new List<EligibleAuthorization>();

            return new RegistrationDefinitionProperties(description, authorizations?.ToList(), eligibleAuthorizations?.ToList(), registrationDefinitionName, managedByTenantId, provisioningState, manageeTenantId, manageeTenantName, managedByTenantName);
        }

        /// <summary> Initializes a new instance of Authorization. </summary>
        /// <param name="principalId"> The identifier of the Azure Active Directory principal. </param>
        /// <param name="principalIdDisplayName"> The display name of the Azure Active Directory principal. </param>
        /// <param name="roleDefinitionId"> The identifier of the Azure built-in role that defines the permissions that the Azure Active Directory principal will have on the projected scope. </param>
        /// <param name="delegatedRoleDefinitionIds"> The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other principals. </param>
        /// <returns> A new <see cref="Models.Authorization"/> instance for mocking. </returns>
        public static Authorization Authorization(string principalId = null, string principalIdDisplayName = null, string roleDefinitionId = null, IEnumerable<Guid> delegatedRoleDefinitionIds = null)
        {
            delegatedRoleDefinitionIds ??= new List<Guid>();

            return new Authorization(principalId, principalIdDisplayName, roleDefinitionId, delegatedRoleDefinitionIds?.ToList());
        }

        /// <summary> Initializes a new instance of EligibleAuthorization. </summary>
        /// <param name="principalId"> The identifier of the Azure Active Directory principal. </param>
        /// <param name="principalIdDisplayName"> The display name of the Azure Active Directory principal. </param>
        /// <param name="roleDefinitionId"> The identifier of the Azure built-in role that defines the permissions that the Azure Active Directory principal will have on the projected scope. </param>
        /// <param name="justInTimeAccessPolicy"> The just-in-time access policy setting. </param>
        /// <returns> A new <see cref="Models.EligibleAuthorization"/> instance for mocking. </returns>
        public static EligibleAuthorization EligibleAuthorization(string principalId = null, string principalIdDisplayName = null, string roleDefinitionId = null, JustInTimeAccessPolicy justInTimeAccessPolicy = null)
        {
            return new EligibleAuthorization(principalId, principalIdDisplayName, roleDefinitionId, justInTimeAccessPolicy);
        }

        /// <summary> Initializes a new instance of JustInTimeAccessPolicy. </summary>
        /// <param name="multiFactorAuthProvider"> The multi-factor authorization provider to be used for just-in-time access requests. </param>
        /// <param name="maximumActivationDuration"> The maximum access duration in ISO 8601 format for just-in-time access requests. </param>
        /// <param name="managedByTenantApprovers"> The list of managedByTenant approvers for the eligible authorization. </param>
        /// <returns> A new <see cref="Models.JustInTimeAccessPolicy"/> instance for mocking. </returns>
        public static JustInTimeAccessPolicy JustInTimeAccessPolicy(MultiFactorAuthProvider multiFactorAuthProvider = default, TimeSpan? maximumActivationDuration = null, IEnumerable<EligibleApprover> managedByTenantApprovers = null)
        {
            managedByTenantApprovers ??= new List<EligibleApprover>();

            return new JustInTimeAccessPolicy(multiFactorAuthProvider, maximumActivationDuration, managedByTenantApprovers?.ToList());
        }

        /// <summary> Initializes a new instance of EligibleApprover. </summary>
        /// <param name="principalId"> The identifier of the Azure Active Directory principal. </param>
        /// <param name="principalIdDisplayName"> The display name of the Azure Active Directory principal. </param>
        /// <returns> A new <see cref="Models.EligibleApprover"/> instance for mocking. </returns>
        public static EligibleApprover EligibleApprover(string principalId = null, string principalIdDisplayName = null)
        {
            return new EligibleApprover(principalId, principalIdDisplayName);
        }

        /// <summary> Initializes a new instance of RegistrationAssignmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The properties of a registration assignment. </param>
        /// <returns> A new <see cref="ManagedServices.RegistrationAssignmentData"/> instance for mocking. </returns>
        public static RegistrationAssignmentData RegistrationAssignmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RegistrationAssignmentProperties properties = null)
        {
            return new RegistrationAssignmentData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of RegistrationAssignmentProperties. </summary>
        /// <param name="registrationDefinitionId"> The fully qualified path of the registration definition. </param>
        /// <param name="provisioningState"> The current provisioning state of the registration assignment. </param>
        /// <param name="registrationDefinition"> The registration definition associated with the registration assignment. </param>
        /// <returns> A new <see cref="Models.RegistrationAssignmentProperties"/> instance for mocking. </returns>
        public static RegistrationAssignmentProperties RegistrationAssignmentProperties(string registrationDefinitionId = null, ProvisioningState? provisioningState = null, RegistrationAssignmentPropertiesRegistrationDefinition registrationDefinition = null)
        {
            return new RegistrationAssignmentProperties(registrationDefinitionId, provisioningState, registrationDefinition);
        }

        /// <summary> Initializes a new instance of RegistrationAssignmentPropertiesRegistrationDefinition. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The properties of the registration definition associated with the registration assignment. </param>
        /// <param name="plan"> The details for the Managed Services offerâ€™s plan in Azure Marketplace. </param>
        /// <returns> A new <see cref="Models.RegistrationAssignmentPropertiesRegistrationDefinition"/> instance for mocking. </returns>
        public static RegistrationAssignmentPropertiesRegistrationDefinition RegistrationAssignmentPropertiesRegistrationDefinition(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RegistrationAssignmentPropertiesRegistrationDefinitionProperties properties = null, ManagedServicesPlan plan = null)
        {
            return new RegistrationAssignmentPropertiesRegistrationDefinition(id, name, resourceType, systemData, properties, plan);
        }

        /// <summary> Initializes a new instance of RegistrationAssignmentPropertiesRegistrationDefinitionProperties. </summary>
        /// <param name="description"> The description of the registration definition. </param>
        /// <param name="authorizations"> The collection of authorization objects describing the access Azure Active Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant. </param>
        /// <param name="eligibleAuthorizations"> The collection of eligible authorization objects describing the just-in-time access Azure Active Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant. </param>
        /// <param name="registrationDefinitionName"> The name of the registration definition. </param>
        /// <param name="provisioningState"> The current provisioning state of the registration definition. </param>
        /// <param name="manageeTenantId"> The identifier of the managed tenant. </param>
        /// <param name="manageeTenantName"> The name of the managed tenant. </param>
        /// <param name="managedByTenantId"> The identifier of the managedBy tenant. </param>
        /// <param name="managedByTenantName"> The name of the managedBy tenant. </param>
        /// <returns> A new <see cref="Models.RegistrationAssignmentPropertiesRegistrationDefinitionProperties"/> instance for mocking. </returns>
        public static RegistrationAssignmentPropertiesRegistrationDefinitionProperties RegistrationAssignmentPropertiesRegistrationDefinitionProperties(string description = null, IEnumerable<Authorization> authorizations = null, IEnumerable<EligibleAuthorization> eligibleAuthorizations = null, string registrationDefinitionName = null, ProvisioningState? provisioningState = null, string manageeTenantId = null, string manageeTenantName = null, string managedByTenantId = null, string managedByTenantName = null)
        {
            authorizations ??= new List<Authorization>();
            eligibleAuthorizations ??= new List<EligibleAuthorization>();

            return new RegistrationAssignmentPropertiesRegistrationDefinitionProperties(description, authorizations?.ToList(), eligibleAuthorizations?.ToList(), registrationDefinitionName, provisioningState, manageeTenantId, manageeTenantName, managedByTenantId, managedByTenantName);
        }

        /// <summary> Initializes a new instance of MarketplaceRegistrationDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The properties of the marketplace registration definition. </param>
        /// <param name="plan"> The details for the Managed Services offerâ€™s plan in Azure Marketplace. </param>
        /// <returns> A new <see cref="ManagedServices.MarketplaceRegistrationDefinitionData"/> instance for mocking. </returns>
        public static MarketplaceRegistrationDefinitionData MarketplaceRegistrationDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MarketplaceRegistrationDefinitionProperties properties = null, ManagedServicesPlan plan = null)
        {
            return new MarketplaceRegistrationDefinitionData(id, name, resourceType, systemData, properties, plan);
        }

        /// <summary> Initializes a new instance of MarketplaceRegistrationDefinitionProperties. </summary>
        /// <param name="managedByTenantId"> The identifier of the managedBy tenant. </param>
        /// <param name="authorizations"> The collection of authorization objects describing the access Azure Active Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant. </param>
        /// <param name="eligibleAuthorizations"> The collection of eligible authorization objects describing the just-in-time access Azure Active Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant. </param>
        /// <param name="offerDisplayName"> The marketplace offer display name. </param>
        /// <param name="publisherDisplayName"> The marketplace publisher display name. </param>
        /// <param name="planDisplayName"> The marketplace plan display name. </param>
        /// <returns> A new <see cref="Models.MarketplaceRegistrationDefinitionProperties"/> instance for mocking. </returns>
        public static MarketplaceRegistrationDefinitionProperties MarketplaceRegistrationDefinitionProperties(string managedByTenantId = null, IEnumerable<Authorization> authorizations = null, IEnumerable<EligibleAuthorization> eligibleAuthorizations = null, string offerDisplayName = null, string publisherDisplayName = null, string planDisplayName = null)
        {
            authorizations ??= new List<Authorization>();
            eligibleAuthorizations ??= new List<EligibleAuthorization>();

            return new MarketplaceRegistrationDefinitionProperties(managedByTenantId, authorizations?.ToList(), eligibleAuthorizations?.ToList(), offerDisplayName, publisherDisplayName, planDisplayName);
        }
    }
}
