// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedServices.Models
{
    public partial class EligibleAuthorization : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("principalId");
            writer.WriteStringValue(PrincipalId);
            if (Optional.IsDefined(PrincipalIdDisplayName))
            {
                writer.WritePropertyName("principalIdDisplayName");
                writer.WriteStringValue(PrincipalIdDisplayName);
            }
            writer.WritePropertyName("roleDefinitionId");
            writer.WriteStringValue(RoleDefinitionId);
            if (Optional.IsDefined(JustInTimeAccessPolicy))
            {
                writer.WritePropertyName("justInTimeAccessPolicy");
                writer.WriteObjectValue(JustInTimeAccessPolicy);
            }
            writer.WriteEndObject();
        }

        internal static EligibleAuthorization DeserializeEligibleAuthorization(JsonElement element)
        {
            string principalId = default;
            Optional<string> principalIdDisplayName = default;
            string roleDefinitionId = default;
            Optional<JustInTimeAccessPolicy> justInTimeAccessPolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("principalId"))
                {
                    principalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("principalIdDisplayName"))
                {
                    principalIdDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("roleDefinitionId"))
                {
                    roleDefinitionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("justInTimeAccessPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    justInTimeAccessPolicy = JustInTimeAccessPolicy.DeserializeJustInTimeAccessPolicy(property.Value);
                    continue;
                }
            }
            return new EligibleAuthorization(principalId, principalIdDisplayName.Value, roleDefinitionId, justInTimeAccessPolicy.Value);
        }
    }
}
