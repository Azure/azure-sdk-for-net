// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedServices.Models
{
    public partial class JustInTimeAccessPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("multiFactorAuthProvider");
            writer.WriteStringValue(MultiFactorAuthProvider.ToString());
            if (Optional.IsDefined(MaximumActivationDuration))
            {
                writer.WritePropertyName("maximumActivationDuration");
                writer.WriteStringValue(MaximumActivationDuration.Value, "P");
            }
            if (Optional.IsCollectionDefined(ManagedByTenantApprovers))
            {
                writer.WritePropertyName("managedByTenantApprovers");
                writer.WriteStartArray();
                foreach (var item in ManagedByTenantApprovers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static JustInTimeAccessPolicy DeserializeJustInTimeAccessPolicy(JsonElement element)
        {
            MultiFactorAuthProvider multiFactorAuthProvider = default;
            Optional<TimeSpan> maximumActivationDuration = default;
            Optional<IList<EligibleApprover>> managedByTenantApprovers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("multiFactorAuthProvider"))
                {
                    multiFactorAuthProvider = new MultiFactorAuthProvider(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maximumActivationDuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maximumActivationDuration = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("managedByTenantApprovers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EligibleApprover> array = new List<EligibleApprover>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EligibleApprover.DeserializeEligibleApprover(item));
                    }
                    managedByTenantApprovers = array;
                    continue;
                }
            }
            return new JustInTimeAccessPolicy(multiFactorAuthProvider, Optional.ToNullable(maximumActivationDuration), Optional.ToList(managedByTenantApprovers));
        }
    }
}
