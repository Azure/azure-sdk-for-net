// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    public partial class EdgeOrderItemDetails : IUtf8JsonSerializable, IJsonModel<EdgeOrderItemDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeOrderItemDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<EdgeOrderItemDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeOrderItemDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeOrderItemDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("productDetails"u8);
            writer.WriteObjectValue(ProductDetails);
            writer.WritePropertyName("orderItemType"u8);
            writer.WriteStringValue(OrderItemType.ToString());
            if (options.Format != "W" && Optional.IsDefined(CurrentStage))
            {
                writer.WritePropertyName("currentStage"u8);
                writer.WriteObjectValue(CurrentStage);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(OrderItemStageHistory))
            {
                writer.WritePropertyName("orderItemStageHistory"u8);
                writer.WriteStartArray();
                foreach (var item in OrderItemStageHistory)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Preferences))
            {
                writer.WritePropertyName("preferences"u8);
                writer.WriteObjectValue(Preferences);
            }
            if (options.Format != "W" && Optional.IsDefined(ForwardShippingDetails))
            {
                writer.WritePropertyName("forwardShippingDetails"u8);
                writer.WriteObjectValue(ForwardShippingDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(ReverseShippingDetails))
            {
                writer.WritePropertyName("reverseShippingDetails"u8);
                writer.WriteObjectValue(ReverseShippingDetails);
            }
            if (Optional.IsCollectionDefined(NotificationEmailList))
            {
                writer.WritePropertyName("notificationEmailList"u8);
                writer.WriteStartArray();
                foreach (var item in NotificationEmailList)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(CancellationReason))
            {
                writer.WritePropertyName("cancellationReason"u8);
                writer.WriteStringValue(CancellationReason);
            }
            if (options.Format != "W" && Optional.IsDefined(CancellationStatus))
            {
                writer.WritePropertyName("cancellationStatus"u8);
                writer.WriteStringValue(CancellationStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(DeletionStatus))
            {
                writer.WritePropertyName("deletionStatus"u8);
                writer.WriteStringValue(DeletionStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ReturnReason))
            {
                writer.WritePropertyName("returnReason"u8);
                writer.WriteStringValue(ReturnReason);
            }
            if (options.Format != "W" && Optional.IsDefined(ReturnStatus))
            {
                writer.WritePropertyName("returnStatus"u8);
                writer.WriteStringValue(ReturnStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(FirstOrDefaultManagement))
            {
                writer.WritePropertyName("managementRpDetails"u8);
                writer.WriteObjectValue(FirstOrDefaultManagement);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ManagementRPDetailsList))
            {
                writer.WritePropertyName("managementRpDetailsList"u8);
                writer.WriteStartArray();
                foreach (var item in ManagementRPDetailsList)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(Error))
            {
                writer.WritePropertyName("error"u8);
                JsonSerializer.Serialize(writer, Error);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        EdgeOrderItemDetails IJsonModel<EdgeOrderItemDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeOrderItemDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeOrderItemDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeOrderItemDetails(document.RootElement, options);
        }

        internal static EdgeOrderItemDetails DeserializeEdgeOrderItemDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ProductDetails productDetails = default;
            OrderItemType orderItemType = default;
            Optional<EdgeOrderStageDetails> currentStage = default;
            Optional<IReadOnlyList<EdgeOrderStageDetails>> orderItemStageHistory = default;
            Optional<OrderItemPreferences> preferences = default;
            Optional<ForwardShippingDetails> forwardShippingDetails = default;
            Optional<ReverseShippingDetails> reverseShippingDetails = default;
            Optional<IList<string>> notificationEmailList = default;
            Optional<string> cancellationReason = default;
            Optional<OrderItemCancellationStatus> cancellationStatus = default;
            Optional<EdgeOrderActionStatus> deletionStatus = default;
            Optional<string> returnReason = default;
            Optional<OrderItemReturnStatus> returnStatus = default;
            Optional<ResourceProviderDetails> managementRPDetails = default;
            Optional<IReadOnlyList<ResourceProviderDetails>> managementRPDetailsList = default;
            Optional<ResponseError> error = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("productDetails"u8))
                {
                    productDetails = ProductDetails.DeserializeProductDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("orderItemType"u8))
                {
                    orderItemType = new OrderItemType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("currentStage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentStage = EdgeOrderStageDetails.DeserializeEdgeOrderStageDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("orderItemStageHistory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeOrderStageDetails> array = new List<EdgeOrderStageDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeOrderStageDetails.DeserializeEdgeOrderStageDetails(item));
                    }
                    orderItemStageHistory = array;
                    continue;
                }
                if (property.NameEquals("preferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    preferences = OrderItemPreferences.DeserializeOrderItemPreferences(property.Value);
                    continue;
                }
                if (property.NameEquals("forwardShippingDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    forwardShippingDetails = ForwardShippingDetails.DeserializeForwardShippingDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("reverseShippingDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reverseShippingDetails = ReverseShippingDetails.DeserializeReverseShippingDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("notificationEmailList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    notificationEmailList = array;
                    continue;
                }
                if (property.NameEquals("cancellationReason"u8))
                {
                    cancellationReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cancellationStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cancellationStatus = new OrderItemCancellationStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deletionStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deletionStatus = new EdgeOrderActionStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("returnReason"u8))
                {
                    returnReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("returnStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    returnStatus = new OrderItemReturnStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("managementRpDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managementRPDetails = ResourceProviderDetails.DeserializeResourceProviderDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("managementRpDetailsList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceProviderDetails> array = new List<ResourceProviderDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceProviderDetails.DeserializeResourceProviderDetails(item));
                    }
                    managementRPDetailsList = array;
                    continue;
                }
                if (property.NameEquals("error"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = JsonSerializer.Deserialize<ResponseError>(property.Value.GetRawText());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new EdgeOrderItemDetails(productDetails, orderItemType, currentStage.Value, Optional.ToList(orderItemStageHistory), preferences.Value, forwardShippingDetails.Value, reverseShippingDetails.Value, Optional.ToList(notificationEmailList), cancellationReason.Value, Optional.ToNullable(cancellationStatus), Optional.ToNullable(deletionStatus), returnReason.Value, Optional.ToNullable(returnStatus), managementRPDetails.Value, Optional.ToList(managementRPDetailsList), error.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(ProductDetails))
            {
                builder.Append("  productDetails:");
                AppendChildObject(builder, ProductDetails, options, 2, false);
            }

            if (Optional.IsDefined(OrderItemType))
            {
                builder.Append("  orderItemType:");
                builder.AppendLine($" '{OrderItemType.ToString()}'");
            }

            if (Optional.IsDefined(CurrentStage))
            {
                builder.Append("  currentStage:");
                AppendChildObject(builder, CurrentStage, options, 2, false);
            }

            if (Optional.IsCollectionDefined(OrderItemStageHistory))
            {
                if (OrderItemStageHistory.Any())
                {
                    builder.Append("  orderItemStageHistory:");
                    builder.AppendLine(" [");
                    foreach (var item in OrderItemStageHistory)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(Preferences))
            {
                builder.Append("  preferences:");
                AppendChildObject(builder, Preferences, options, 2, false);
            }

            if (Optional.IsDefined(ForwardShippingDetails))
            {
                builder.Append("  forwardShippingDetails:");
                AppendChildObject(builder, ForwardShippingDetails, options, 2, false);
            }

            if (Optional.IsDefined(ReverseShippingDetails))
            {
                builder.Append("  reverseShippingDetails:");
                AppendChildObject(builder, ReverseShippingDetails, options, 2, false);
            }

            if (Optional.IsCollectionDefined(NotificationEmailList))
            {
                if (NotificationEmailList.Any())
                {
                    builder.Append("  notificationEmailList:");
                    builder.AppendLine(" [");
                    foreach (var item in NotificationEmailList)
                    {
                        if (item == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Contains(Environment.NewLine))
                        {
                            builder.AppendLine("    '''");
                            builder.AppendLine($"{item}'''");
                        }
                        else
                        {
                            builder.AppendLine($"    '{item}'");
                        }
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(CancellationReason))
            {
                builder.Append("  cancellationReason:");
                if (CancellationReason.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CancellationReason}'''");
                }
                else
                {
                    builder.AppendLine($" '{CancellationReason}'");
                }
            }

            if (Optional.IsDefined(CancellationStatus))
            {
                builder.Append("  cancellationStatus:");
                builder.AppendLine($" '{CancellationStatus.Value.ToString()}'");
            }

            if (Optional.IsDefined(DeletionStatus))
            {
                builder.Append("  deletionStatus:");
                builder.AppendLine($" '{DeletionStatus.Value.ToString()}'");
            }

            if (Optional.IsDefined(ReturnReason))
            {
                builder.Append("  returnReason:");
                if (ReturnReason.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReturnReason}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReturnReason}'");
                }
            }

            if (Optional.IsDefined(ReturnStatus))
            {
                builder.Append("  returnStatus:");
                builder.AppendLine($" '{ReturnStatus.Value.ToString()}'");
            }

            if (Optional.IsDefined(FirstOrDefaultManagement))
            {
                builder.Append("  managementRpDetails:");
                AppendChildObject(builder, FirstOrDefaultManagement, options, 2, false);
            }

            if (Optional.IsCollectionDefined(ManagementRPDetailsList))
            {
                if (ManagementRPDetailsList.Any())
                {
                    builder.Append("  managementRpDetailsList:");
                    builder.AppendLine(" [");
                    foreach (var item in ManagementRPDetailsList)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(Error))
            {
                builder.Append("  error:");
                AppendChildObject(builder, Error, options, 2, false);
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<EdgeOrderItemDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeOrderItemDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(EdgeOrderItemDetails)} does not support '{options.Format}' format.");
            }
        }

        EdgeOrderItemDetails IPersistableModel<EdgeOrderItemDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeOrderItemDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeEdgeOrderItemDetails(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(EdgeOrderItemDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeOrderItemDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
