// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Defines the mode of the Order item. </summary>
    public readonly partial struct EdgeOrderItemMode : IEquatable<EdgeOrderItemMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeOrderItemMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeOrderItemMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string DoNotFulfillValue = "DoNotFulfill";

        /// <summary> Default Order mode. </summary>
        public static EdgeOrderItemMode Default { get; } = new EdgeOrderItemMode(DefaultValue);
        /// <summary> Mode in which the Order will not be fulfilled. </summary>
        public static EdgeOrderItemMode DoNotFulfill { get; } = new EdgeOrderItemMode(DoNotFulfillValue);
        /// <summary> Determines if two <see cref="EdgeOrderItemMode"/> values are the same. </summary>
        public static bool operator ==(EdgeOrderItemMode left, EdgeOrderItemMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeOrderItemMode"/> values are not the same. </summary>
        public static bool operator !=(EdgeOrderItemMode left, EdgeOrderItemMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeOrderItemMode"/>. </summary>
        public static implicit operator EdgeOrderItemMode(string value) => new EdgeOrderItemMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeOrderItemMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeOrderItemMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
