// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Type of link. </summary>
    public readonly partial struct LinkType : IEquatable<LinkType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LinkType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LinkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GenericValue = "Generic";
        private const string TermsAndConditionsValue = "TermsAndConditions";
        private const string SpecificationValue = "Specification";
        private const string DocumentationValue = "Documentation";
        private const string KnowMoreValue = "KnowMore";
        private const string SignUpValue = "SignUp";

        /// <summary> Generic link. </summary>
        public static LinkType Generic { get; } = new LinkType(GenericValue);
        /// <summary> Terms and conditions link. </summary>
        public static LinkType TermsAndConditions { get; } = new LinkType(TermsAndConditionsValue);
        /// <summary> Link to product specification. </summary>
        public static LinkType Specification { get; } = new LinkType(SpecificationValue);
        /// <summary> Link to product documentation. </summary>
        public static LinkType Documentation { get; } = new LinkType(DocumentationValue);
        /// <summary> Link to know more. </summary>
        public static LinkType KnowMore { get; } = new LinkType(KnowMoreValue);
        /// <summary> Link to sign up for products. </summary>
        public static LinkType SignUp { get; } = new LinkType(SignUpValue);
        /// <summary> Determines if two <see cref="LinkType"/> values are the same. </summary>
        public static bool operator ==(LinkType left, LinkType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LinkType"/> values are not the same. </summary>
        public static bool operator !=(LinkType left, LinkType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LinkType"/>. </summary>
        public static implicit operator LinkType(string value) => new LinkType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LinkType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LinkType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
