// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> The entity responsible for fulfillment of the item at the given hierarchy level. </summary>
    public readonly partial struct ConfigurationFulfillmentType : IEquatable<ConfigurationFulfillmentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConfigurationFulfillmentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConfigurationFulfillmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MicrosoftValue = "Microsoft";
        private const string ExternalValue = "External";

        /// <summary> The fulfillment (the whole journey of the product offering) is handled by microsoft. </summary>
        public static ConfigurationFulfillmentType Microsoft { get; } = new ConfigurationFulfillmentType(MicrosoftValue);
        /// <summary> The fulfillment (the whole journey of the product offering) is handled by external third party entities. </summary>
        public static ConfigurationFulfillmentType External { get; } = new ConfigurationFulfillmentType(ExternalValue);
        /// <summary> Determines if two <see cref="ConfigurationFulfillmentType"/> values are the same. </summary>
        public static bool operator ==(ConfigurationFulfillmentType left, ConfigurationFulfillmentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConfigurationFulfillmentType"/> values are not the same. </summary>
        public static bool operator !=(ConfigurationFulfillmentType left, ConfigurationFulfillmentType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConfigurationFulfillmentType"/>. </summary>
        public static implicit operator ConfigurationFulfillmentType(string value) => new ConfigurationFulfillmentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConfigurationFulfillmentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConfigurationFulfillmentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
