// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    public partial class HierarchyInformation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ProductFamilyName))
            {
                writer.WritePropertyName("productFamilyName"u8);
                writer.WriteStringValue(ProductFamilyName);
            }
            if (Optional.IsDefined(ProductLineName))
            {
                writer.WritePropertyName("productLineName"u8);
                writer.WriteStringValue(ProductLineName);
            }
            if (Optional.IsDefined(ProductName))
            {
                writer.WritePropertyName("productName"u8);
                writer.WriteStringValue(ProductName);
            }
            if (Optional.IsDefined(ConfigurationName))
            {
                writer.WritePropertyName("configurationName"u8);
                writer.WriteStringValue(ConfigurationName);
            }
            writer.WriteEndObject();
        }

        internal static HierarchyInformation DeserializeHierarchyInformation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> productFamilyName = default;
            Optional<string> productLineName = default;
            Optional<string> productName = default;
            Optional<string> configurationName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("productFamilyName"u8))
                {
                    productFamilyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productLineName"u8))
                {
                    productLineName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productName"u8))
                {
                    productName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configurationName"u8))
                {
                    configurationName = property.Value.GetString();
                    continue;
                }
            }
            return new HierarchyInformation(productFamilyName.Value, productLineName.Value, productName.Value, configurationName.Value);
        }
    }
}
