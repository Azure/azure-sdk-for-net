// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Type of the image. </summary>
    public readonly partial struct ImageType : IEquatable<ImageType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImageType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MainImageValue = "MainImage";
        private const string BulletImageValue = "BulletImage";
        private const string GenericImageValue = "GenericImage";

        /// <summary> Main image. </summary>
        public static ImageType MainImage { get; } = new ImageType(MainImageValue);
        /// <summary> Bullet image. </summary>
        public static ImageType BulletImage { get; } = new ImageType(BulletImageValue);
        /// <summary> Generic image. </summary>
        public static ImageType GenericImage { get; } = new ImageType(GenericImageValue);
        /// <summary> Determines if two <see cref="ImageType"/> values are the same. </summary>
        public static bool operator ==(ImageType left, ImageType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImageType"/> values are not the same. </summary>
        public static bool operator !=(ImageType left, ImageType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ImageType"/>. </summary>
        public static implicit operator ImageType(string value) => new ImageType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImageType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
