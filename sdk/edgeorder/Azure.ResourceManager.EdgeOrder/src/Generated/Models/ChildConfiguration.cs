// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Child configuration object. </summary>
    public partial class ChildConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ChildConfiguration"/>. </summary>
        internal ChildConfiguration()
        {
            Specifications = new ChangeTrackingList<ProductSpecification>();
            ChildConfigurationTypes = new ChangeTrackingList<ChildConfigurationType>();
            GroupedChildConfigurations = new ChangeTrackingList<GroupedChildConfigurations>();
            SupportedTermCommitmentDurations = new ChangeTrackingList<TimeSpan>();
            FilterableProperties = new ChangeTrackingList<FilterableProperty>();
            ImageInformation = new ChangeTrackingList<EdgeOrderProductImageInformation>();
        }

        /// <summary> Initializes a new instance of <see cref="ChildConfiguration"/>. </summary>
        /// <param name="childConfigurationType"> Child configuration type. </param>
        /// <param name="isPartOfBaseConfiguration"> Flag to indicate if the child configuration is part of the base configuration, which means the customer need not pass this configuration in OptInAdditionalConfigurations while placing an order, it will be shipped by default. </param>
        /// <param name="minimumQuantity"> Minimum quantity a customer can order while choosing this configuration. </param>
        /// <param name="maximumQuantity"> Maximum quantity a customer can order while choosing this configuration. </param>
        /// <param name="specifications"> Specifications of the configuration. </param>
        /// <param name="dimensions"> Dimensions of the configuration. </param>
        /// <param name="provisioningSupport"> Determining nature of provisioning that the configuration supports. </param>
        /// <param name="childConfigurationTypes"> Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter. </param>
        /// <param name="groupedChildConfigurations"> Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration. </param>
        /// <param name="supportedTermCommitmentDurations"> The Term Commitment Durations that are supported for a configuration. </param>
        /// <param name="filterableProperties"> List of filters supported for a product. </param>
        /// <param name="displayName"> Display Name for the product system. </param>
        /// <param name="description"> Description related to the product system. </param>
        /// <param name="imageInformation"> Image information for the product system. </param>
        /// <param name="costInformation"> Cost information for the product system. </param>
        /// <param name="availabilityInformation"> Availability information of the product system. </param>
        /// <param name="hierarchyInformation"> Hierarchy information of a product. </param>
        /// <param name="fulfilledBy"> The entity responsible for fulfillment of the item at the given hierarchy level. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ChildConfiguration(ChildConfigurationType? childConfigurationType, bool? isPartOfBaseConfiguration, int? minimumQuantity, int? maximumQuantity, IReadOnlyList<ProductSpecification> specifications, ProductDimensions dimensions, ProvisioningSupport? provisioningSupport, IReadOnlyList<ChildConfigurationType> childConfigurationTypes, IReadOnlyList<GroupedChildConfigurations> groupedChildConfigurations, IReadOnlyList<TimeSpan> supportedTermCommitmentDurations, IReadOnlyList<FilterableProperty> filterableProperties, string displayName, ProductDescription description, IReadOnlyList<EdgeOrderProductImageInformation> imageInformation, EdgeOrderProductCostInformation costInformation, ProductAvailabilityInformation availabilityInformation, HierarchyInformation hierarchyInformation, FulfillmentType? fulfilledBy, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ChildConfigurationType = childConfigurationType;
            IsPartOfBaseConfiguration = isPartOfBaseConfiguration;
            MinimumQuantity = minimumQuantity;
            MaximumQuantity = maximumQuantity;
            Specifications = specifications;
            Dimensions = dimensions;
            ProvisioningSupport = provisioningSupport;
            ChildConfigurationTypes = childConfigurationTypes;
            GroupedChildConfigurations = groupedChildConfigurations;
            SupportedTermCommitmentDurations = supportedTermCommitmentDurations;
            FilterableProperties = filterableProperties;
            DisplayName = displayName;
            Description = description;
            ImageInformation = imageInformation;
            CostInformation = costInformation;
            AvailabilityInformation = availabilityInformation;
            HierarchyInformation = hierarchyInformation;
            FulfilledBy = fulfilledBy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Child configuration type. </summary>
        public ChildConfigurationType? ChildConfigurationType { get; }
        /// <summary> Flag to indicate if the child configuration is part of the base configuration, which means the customer need not pass this configuration in OptInAdditionalConfigurations while placing an order, it will be shipped by default. </summary>
        public bool? IsPartOfBaseConfiguration { get; }
        /// <summary> Minimum quantity a customer can order while choosing this configuration. </summary>
        public int? MinimumQuantity { get; }
        /// <summary> Maximum quantity a customer can order while choosing this configuration. </summary>
        public int? MaximumQuantity { get; }
        /// <summary> Specifications of the configuration. </summary>
        public IReadOnlyList<ProductSpecification> Specifications { get; }
        /// <summary> Dimensions of the configuration. </summary>
        public ProductDimensions Dimensions { get; }
        /// <summary> Determining nature of provisioning that the configuration supports. </summary>
        public ProvisioningSupport? ProvisioningSupport { get; }
        /// <summary> Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter. </summary>
        public IReadOnlyList<ChildConfigurationType> ChildConfigurationTypes { get; }
        /// <summary> Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration. </summary>
        public IReadOnlyList<GroupedChildConfigurations> GroupedChildConfigurations { get; }
        /// <summary> The Term Commitment Durations that are supported for a configuration. </summary>
        public IReadOnlyList<TimeSpan> SupportedTermCommitmentDurations { get; }
        /// <summary> List of filters supported for a product. </summary>
        public IReadOnlyList<FilterableProperty> FilterableProperties { get; }
        /// <summary> Display Name for the product system. </summary>
        public string DisplayName { get; }
        /// <summary> Description related to the product system. </summary>
        public ProductDescription Description { get; }
        /// <summary> Image information for the product system. </summary>
        public IReadOnlyList<EdgeOrderProductImageInformation> ImageInformation { get; }
        /// <summary> Cost information for the product system. </summary>
        public EdgeOrderProductCostInformation CostInformation { get; }
        /// <summary> Availability information of the product system. </summary>
        public ProductAvailabilityInformation AvailabilityInformation { get; }
        /// <summary> Hierarchy information of a product. </summary>
        public HierarchyInformation HierarchyInformation { get; }
        /// <summary> The entity responsible for fulfillment of the item at the given hierarchy level. </summary>
        public FulfillmentType? FulfilledBy { get; }
    }
}
