// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Identification type of the configuration. </summary>
    public readonly partial struct IdentificationType : IEquatable<IdentificationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IdentificationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IdentificationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSupportedValue = "NotSupported";
        private const string SerialNumberValue = "SerialNumber";

        /// <summary> Product does not have any explicit identifier. </summary>
        public static IdentificationType NotSupported { get; } = new IdentificationType(NotSupportedValue);
        /// <summary> Product is identifiable by serial number. </summary>
        public static IdentificationType SerialNumber { get; } = new IdentificationType(SerialNumberValue);
        /// <summary> Determines if two <see cref="IdentificationType"/> values are the same. </summary>
        public static bool operator ==(IdentificationType left, IdentificationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IdentificationType"/> values are not the same. </summary>
        public static bool operator !=(IdentificationType left, IdentificationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IdentificationType"/>. </summary>
        public static implicit operator IdentificationType(string value) => new IdentificationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IdentificationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IdentificationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
