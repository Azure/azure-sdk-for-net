// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Reason why the product is disabled. </summary>
    public readonly partial struct DisabledReason : IEquatable<DisabledReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DisabledReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DisabledReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string CountryValue = "Country";
        private const string RegionValue = "Region";
        private const string FeatureValue = "Feature";
        private const string OfferTypeValue = "OfferType";
        private const string NoSubscriptionInfoValue = "NoSubscriptionInfo";
        private const string NotAvailableValue = "NotAvailable";
        private const string OutOfStockValue = "OutOfStock";

        /// <summary> Not disabled. </summary>
        public static DisabledReason None { get; } = new DisabledReason(NoneValue);
        /// <summary> Not available in the requested country. </summary>
        public static DisabledReason Country { get; } = new DisabledReason(CountryValue);
        /// <summary> Not available to push data to the requested Azure region. </summary>
        public static DisabledReason Region { get; } = new DisabledReason(RegionValue);
        /// <summary> Required features are not enabled. </summary>
        public static DisabledReason Feature { get; } = new DisabledReason(FeatureValue);
        /// <summary> Subscription does not have required offer types. </summary>
        public static DisabledReason OfferType { get; } = new DisabledReason(OfferTypeValue);
        /// <summary> Subscription has not registered to Microsoft.DataBox and Service does not have the subscription notification. </summary>
        public static DisabledReason NoSubscriptionInfo { get; } = new DisabledReason(NoSubscriptionInfoValue);
        /// <summary> The product is not yet available. </summary>
        public static DisabledReason NotAvailable { get; } = new DisabledReason(NotAvailableValue);
        /// <summary> The product is out of stock. </summary>
        public static DisabledReason OutOfStock { get; } = new DisabledReason(OutOfStockValue);
        /// <summary> Determines if two <see cref="DisabledReason"/> values are the same. </summary>
        public static bool operator ==(DisabledReason left, DisabledReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DisabledReason"/> values are not the same. </summary>
        public static bool operator !=(DisabledReason left, DisabledReason right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DisabledReason"/>. </summary>
        public static implicit operator DisabledReason(string value) => new DisabledReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DisabledReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DisabledReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
