// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    public partial class ConfigurationDeviceDetails
    {
        internal static ConfigurationDeviceDetails DeserializeConfigurationDeviceDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ProductDisplayInfo> displayInfo = default;
            Optional<HierarchyInformation> hierarchyInformation = default;
            Optional<int> quantity = default;
            Optional<IdentificationType> identificationType = default;
            Optional<IReadOnlyList<EdgeOrderProductDeviceDetails>> deviceDetails = default;
            Optional<TermCommitmentInformation> termCommitmentInformation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    displayInfo = ProductDisplayInfo.DeserializeProductDisplayInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("hierarchyInformation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hierarchyInformation = HierarchyInformation.DeserializeHierarchyInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("quantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    quantity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("identificationType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identificationType = new IdentificationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deviceDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeOrderProductDeviceDetails> array = new List<EdgeOrderProductDeviceDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeOrderProductDeviceDetails.DeserializeEdgeOrderProductDeviceDetails(item));
                    }
                    deviceDetails = array;
                    continue;
                }
                if (property.NameEquals("termCommitmentInformation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    termCommitmentInformation = TermCommitmentInformation.DeserializeTermCommitmentInformation(property.Value);
                    continue;
                }
            }
            return new ConfigurationDeviceDetails(displayInfo.Value, hierarchyInformation.Value, Optional.ToNullable(quantity), Optional.ToNullable(identificationType), Optional.ToList(deviceDetails), termCommitmentInformation.Value);
        }
    }
}
