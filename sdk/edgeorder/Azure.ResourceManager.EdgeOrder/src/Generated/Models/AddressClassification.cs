// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Type of address based on its usage context. </summary>
    public readonly partial struct AddressClassification : IEquatable<AddressClassification>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AddressClassification"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AddressClassification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ShippingValue = "Shipping";
        private const string SiteValue = "Site";

        /// <summary> Shipping address for the order. </summary>
        public static AddressClassification Shipping { get; } = new AddressClassification(ShippingValue);
        /// <summary> Site Address. </summary>
        public static AddressClassification Site { get; } = new AddressClassification(SiteValue);
        /// <summary> Determines if two <see cref="AddressClassification"/> values are the same. </summary>
        public static bool operator ==(AddressClassification left, AddressClassification right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AddressClassification"/> values are not the same. </summary>
        public static bool operator !=(AddressClassification left, AddressClassification right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AddressClassification"/>. </summary>
        public static implicit operator AddressClassification(string value) => new AddressClassification(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AddressClassification other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AddressClassification other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
