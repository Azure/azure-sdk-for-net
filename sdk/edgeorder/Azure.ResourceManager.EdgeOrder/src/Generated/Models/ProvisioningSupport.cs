// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Determining nature of provisioning that the configuration supports. </summary>
    public readonly partial struct ProvisioningSupport : IEquatable<ProvisioningSupport>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProvisioningSupport"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProvisioningSupport(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CloudBasedValue = "CloudBased";
        private const string ManualValue = "Manual";

        /// <summary> The configuration can be provisioned from the cloud. </summary>
        public static ProvisioningSupport CloudBased { get; } = new ProvisioningSupport(CloudBasedValue);
        /// <summary> The configuration need to be provisioned manually by the end user. </summary>
        public static ProvisioningSupport Manual { get; } = new ProvisioningSupport(ManualValue);
        /// <summary> Determines if two <see cref="ProvisioningSupport"/> values are the same. </summary>
        public static bool operator ==(ProvisioningSupport left, ProvisioningSupport right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProvisioningSupport"/> values are not the same. </summary>
        public static bool operator !=(ProvisioningSupport left, ProvisioningSupport right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProvisioningSupport"/>. </summary>
        public static implicit operator ProvisioningSupport(string value) => new ProvisioningSupport(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProvisioningSupport other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProvisioningSupport other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
