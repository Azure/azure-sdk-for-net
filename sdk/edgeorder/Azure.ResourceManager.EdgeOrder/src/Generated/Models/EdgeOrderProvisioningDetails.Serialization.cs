// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    public partial class EdgeOrderProvisioningDetails : IUtf8JsonSerializable, IJsonModel<EdgeOrderProvisioningDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeOrderProvisioningDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeOrderProvisioningDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeOrderProvisioningDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeOrderProvisioningDetails)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Quantity))
            {
                writer.WritePropertyName("quantity"u8);
                writer.WriteNumberValue(Quantity.Value);
            }
            if (Optional.IsDefined(ProvisioningArmId))
            {
                writer.WritePropertyName("provisioningArmId"u8);
                writer.WriteStringValue(ProvisioningArmId);
            }
            if (Optional.IsDefined(ProvisioningEndPoint))
            {
                writer.WritePropertyName("provisioningEndPoint"u8);
                writer.WriteStringValue(ProvisioningEndPoint);
            }
            if (Optional.IsDefined(SerialNumber))
            {
                writer.WritePropertyName("serialNumber"u8);
                writer.WriteStringValue(SerialNumber);
            }
            if (Optional.IsDefined(VendorName))
            {
                writer.WritePropertyName("vendorName"u8);
                writer.WriteStringValue(VendorName);
            }
            if (Optional.IsDefined(ReadyToConnectArmId))
            {
                writer.WritePropertyName("readyToConnectArmId"u8);
                writer.WriteStringValue(ReadyToConnectArmId);
            }
            if (Optional.IsDefined(ManagementResourceArmId))
            {
                writer.WritePropertyName("managementResourceArmId"u8);
                writer.WriteStringValue(ManagementResourceArmId);
            }
            if (options.Format != "W" && Optional.IsDefined(UniqueDeviceIdentifier))
            {
                writer.WritePropertyName("uniqueDeviceIdentifier"u8);
                writer.WriteStringValue(UniqueDeviceIdentifier);
            }
            if (Optional.IsDefined(AutoProvisioningStatus))
            {
                writer.WritePropertyName("autoProvisioningStatus"u8);
                writer.WriteStringValue(AutoProvisioningStatus.Value.ToString());
            }
            if (Optional.IsDefined(DevicePresenceVerification))
            {
                writer.WritePropertyName("devicePresenceVerification"u8);
                writer.WriteObjectValue(DevicePresenceVerification, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeOrderProvisioningDetails IJsonModel<EdgeOrderProvisioningDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeOrderProvisioningDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeOrderProvisioningDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeOrderProvisioningDetails(document.RootElement, options);
        }

        internal static EdgeOrderProvisioningDetails DeserializeEdgeOrderProvisioningDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? quantity = default;
            ResourceIdentifier provisioningArmId = default;
            string provisioningEndPoint = default;
            string serialNumber = default;
            string vendorName = default;
            ResourceIdentifier readyToConnectArmId = default;
            ResourceIdentifier managementResourceArmId = default;
            string uniqueDeviceIdentifier = default;
            EdgeOrderAutoProvisioningStatus? autoProvisioningStatus = default;
            DevicePresenceVerificationDetails devicePresenceVerification = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("quantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    quantity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("provisioningArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningEndPoint"u8))
                {
                    provisioningEndPoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    serialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vendorName"u8))
                {
                    vendorName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("readyToConnectArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    readyToConnectArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("managementResourceArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managementResourceArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("uniqueDeviceIdentifier"u8))
                {
                    uniqueDeviceIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoProvisioningStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoProvisioningStatus = new EdgeOrderAutoProvisioningStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("devicePresenceVerification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    devicePresenceVerification = DevicePresenceVerificationDetails.DeserializeDevicePresenceVerificationDetails(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeOrderProvisioningDetails(
                quantity,
                provisioningArmId,
                provisioningEndPoint,
                serialNumber,
                vendorName,
                readyToConnectArmId,
                managementResourceArmId,
                uniqueDeviceIdentifier,
                autoProvisioningStatus,
                devicePresenceVerification,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeOrderProvisioningDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeOrderProvisioningDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerEdgeOrderContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeOrderProvisioningDetails)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeOrderProvisioningDetails IPersistableModel<EdgeOrderProvisioningDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeOrderProvisioningDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeOrderProvisioningDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeOrderProvisioningDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeOrderProvisioningDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
