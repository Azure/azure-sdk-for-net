// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeOrder.Models;

namespace Azure.ResourceManager.EdgeOrder
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _addressesClientDiagnostics;
        private AddressesRestOperations _addressesRestClient;
        private ClientDiagnostics _bootstrapConfigurationsClientDiagnostics;
        private BootstrapConfigurationsRestOperations _bootstrapConfigurationsRestClient;
        private ClientDiagnostics _productsAndConfigurationsClientDiagnostics;
        private ProductsAndConfigurationsRestOperations _productsAndConfigurationsRestClient;
        private ClientDiagnostics _orderItemsClientDiagnostics;
        private OrderItemsRestOperations _orderItemsRestClient;
        private ClientDiagnostics _ordersClientDiagnostics;
        private OrdersRestOperations _ordersRestClient;
        private ClientDiagnostics _defaultClientDiagnostics;
        private EdgeOrderManagementRestOperations _defaultRestClient;
        private ClientDiagnostics _uploadClientDiagnostics;
        private UploadRestOperations _uploadRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AddressesClientDiagnostics => _addressesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeOrder", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AddressesRestOperations AddressesRestClient => _addressesRestClient ??= new AddressesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics BootstrapConfigurationsClientDiagnostics => _bootstrapConfigurationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeOrder", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private BootstrapConfigurationsRestOperations BootstrapConfigurationsRestClient => _bootstrapConfigurationsRestClient ??= new BootstrapConfigurationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ProductsAndConfigurationsClientDiagnostics => _productsAndConfigurationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeOrder", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ProductsAndConfigurationsRestOperations ProductsAndConfigurationsRestClient => _productsAndConfigurationsRestClient ??= new ProductsAndConfigurationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics OrderItemsClientDiagnostics => _orderItemsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeOrder", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private OrderItemsRestOperations OrderItemsRestClient => _orderItemsRestClient ??= new OrderItemsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics OrdersClientDiagnostics => _ordersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeOrder", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private OrdersRestOperations OrdersRestClient => _ordersRestClient ??= new OrdersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics DefaultClientDiagnostics => _defaultClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeOrder", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private EdgeOrderManagementRestOperations DefaultRestClient => _defaultRestClient ??= new EdgeOrderManagementRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics UploadClientDiagnostics => _uploadClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeOrder", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private UploadRestOperations UploadRestClient => _uploadRestClient ??= new UploadRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List all the addresses available under the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/addresses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="filter"> $filter is supported to filter based on shipping address properties. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of addresses, which provides the next page in the list of addresses. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeOrderAddress" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeOrderAddress> GetAddressesBySubscriptionAsync(Guid subscriptionId, string filter = null, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => AddressesRestClient.CreateListBySubscriptionRequest(subscriptionId, filter, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => AddressesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId, filter, skipToken, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, EdgeOrderAddress.DeserializeEdgeOrderAddress, AddressesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAddressesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all the addresses available under the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/addresses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="filter"> $filter is supported to filter based on shipping address properties. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of addresses, which provides the next page in the list of addresses. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeOrderAddress" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeOrderAddress> GetAddressesBySubscription(Guid subscriptionId, string filter = null, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => AddressesRestClient.CreateListBySubscriptionRequest(subscriptionId, filter, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => AddressesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId, filter, skipToken, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, EdgeOrderAddress.DeserializeEdgeOrderAddress, AddressesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAddressesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all the addresses available under the given resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="filter"> $filter is supported to filter based on shipping address properties. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of addresses, which provides the next page in the list of addresses. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeOrderAddress" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeOrderAddress> GetAddressesByResourceGroupAsync(Guid subscriptionId, string resourceGroupName, string filter = null, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => AddressesRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName, filter, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => AddressesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName, filter, skipToken, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, EdgeOrderAddress.DeserializeEdgeOrderAddress, AddressesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAddressesByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all the addresses available under the given resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="filter"> $filter is supported to filter based on shipping address properties. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of addresses, which provides the next page in the list of addresses. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeOrderAddress" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeOrderAddress> GetAddressesByResourceGroup(Guid subscriptionId, string resourceGroupName, string filter = null, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => AddressesRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName, filter, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => AddressesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName, filter, skipToken, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, EdgeOrderAddress.DeserializeEdgeOrderAddress, AddressesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAddressesByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get information about the specified address.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeOrderAddress>> GetAddressAsync(Guid subscriptionId, string resourceGroupName, string addressName, CancellationToken cancellationToken = default)
        {
            using var scope = AddressesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAddress");
            scope.Start();
            try
            {
                var response = await AddressesRestClient.GetAsync(subscriptionId, resourceGroupName, addressName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get information about the specified address.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeOrderAddress> GetAddress(Guid subscriptionId, string resourceGroupName, string addressName, CancellationToken cancellationToken = default)
        {
            using var scope = AddressesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAddress");
            scope.Start();
            try
            {
                var response = AddressesRestClient.Get(subscriptionId, resourceGroupName, addressName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new address with the specified parameters. Existing address cannot be updated with this API and should
        /// instead be updated with the Update address API.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="addressResource"> Address details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<EdgeOrderAddress>> CreateAddressAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string addressName, EdgeOrderAddress addressResource, CancellationToken cancellationToken = default)
        {
            using var scope = AddressesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateAddress");
            scope.Start();
            try
            {
                var response = await AddressesRestClient.CreateAsync(subscriptionId, resourceGroupName, addressName, addressResource, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation<EdgeOrderAddress>(new EdgeOrderAddressOperationSource(), AddressesClientDiagnostics, Pipeline, AddressesRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, addressName, addressResource).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new address with the specified parameters. Existing address cannot be updated with this API and should
        /// instead be updated with the Update address API.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="addressResource"> Address details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<EdgeOrderAddress> CreateAddress(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string addressName, EdgeOrderAddress addressResource, CancellationToken cancellationToken = default)
        {
            using var scope = AddressesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateAddress");
            scope.Start();
            try
            {
                var response = AddressesRestClient.Create(subscriptionId, resourceGroupName, addressName, addressResource, cancellationToken);
                var operation = new EdgeOrderArmOperation<EdgeOrderAddress>(new EdgeOrderAddressOperationSource(), AddressesClientDiagnostics, Pipeline, AddressesRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, addressName, addressResource).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an address.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAddressAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string addressName, CancellationToken cancellationToken = default)
        {
            using var scope = AddressesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteAddress");
            scope.Start();
            try
            {
                var response = await AddressesRestClient.DeleteAsync(subscriptionId, resourceGroupName, addressName, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation(AddressesClientDiagnostics, Pipeline, AddressesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, addressName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an address.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteAddress(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string addressName, CancellationToken cancellationToken = default)
        {
            using var scope = AddressesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteAddress");
            scope.Start();
            try
            {
                var response = AddressesRestClient.Delete(subscriptionId, resourceGroupName, addressName, cancellationToken);
                var operation = new EdgeOrderArmOperation(AddressesClientDiagnostics, Pipeline, AddressesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, addressName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the properties of an existing address.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="addressUpdateParameter"> Address update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<EdgeOrderAddress>> UpdateAddressAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string addressName, AddressUpdateParameter addressUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = AddressesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateAddress");
            scope.Start();
            try
            {
                var response = await AddressesRestClient.UpdateAsync(subscriptionId, resourceGroupName, addressName, addressUpdateParameter, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation<EdgeOrderAddress>(new EdgeOrderAddressOperationSource(), AddressesClientDiagnostics, Pipeline, AddressesRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, addressName, addressUpdateParameter, ifMatch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the properties of an existing address.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Addresses_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="addressUpdateParameter"> Address update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<EdgeOrderAddress> UpdateAddress(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string addressName, AddressUpdateParameter addressUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = AddressesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateAddress");
            scope.Start();
            try
            {
                var response = AddressesRestClient.Update(subscriptionId, resourceGroupName, addressName, addressUpdateParameter, ifMatch, cancellationToken);
                var operation = new EdgeOrderArmOperation<EdgeOrderAddress>(new EdgeOrderAddressOperationSource(), AddressesClientDiagnostics, Pipeline, AddressesRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, addressName, addressUpdateParameter, ifMatch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all the bootstrap configurations available under the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/bootstrapConfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="filter"> $filter is supported to filter based on bootstrap configuration properties. Filter supports only equals operation. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of bootstrap configurations, which provides the next page in the list of bootstrap configurations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BootstrapConfigurationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BootstrapConfigurationResource> GetBootstrapConfigurationsBySubscriptionAsync(Guid subscriptionId, string filter = null, int? top = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => BootstrapConfigurationsRestClient.CreateListBySubscriptionRequest(subscriptionId, filter, top, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => BootstrapConfigurationsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId, filter, top, skipToken);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, BootstrapConfigurationResource.DeserializeBootstrapConfigurationResource, BootstrapConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetBootstrapConfigurationsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all the bootstrap configurations available under the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/bootstrapConfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="filter"> $filter is supported to filter based on bootstrap configuration properties. Filter supports only equals operation. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of bootstrap configurations, which provides the next page in the list of bootstrap configurations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BootstrapConfigurationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BootstrapConfigurationResource> GetBootstrapConfigurationsBySubscription(Guid subscriptionId, string filter = null, int? top = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => BootstrapConfigurationsRestClient.CreateListBySubscriptionRequest(subscriptionId, filter, top, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => BootstrapConfigurationsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId, filter, top, skipToken);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, BootstrapConfigurationResource.DeserializeBootstrapConfigurationResource, BootstrapConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetBootstrapConfigurationsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all the bootstrap configurations available under the given resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="filter"> $filter is supported to filter based on bootstrap configuration properties. Filter supports only equals operation. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of bootstrap configurations, which provides the next page in the list of bootstrap configurations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BootstrapConfigurationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BootstrapConfigurationResource> GetBootstrapConfigurationsByResourceGroupAsync(Guid subscriptionId, string resourceGroupName, string filter = null, int? top = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => BootstrapConfigurationsRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName, filter, top, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => BootstrapConfigurationsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName, filter, top, skipToken);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, BootstrapConfigurationResource.DeserializeBootstrapConfigurationResource, BootstrapConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetBootstrapConfigurationsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all the bootstrap configurations available under the given resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="filter"> $filter is supported to filter based on bootstrap configuration properties. Filter supports only equals operation. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of bootstrap configurations, which provides the next page in the list of bootstrap configurations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BootstrapConfigurationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BootstrapConfigurationResource> GetBootstrapConfigurationsByResourceGroup(Guid subscriptionId, string resourceGroupName, string filter = null, int? top = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => BootstrapConfigurationsRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName, filter, top, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => BootstrapConfigurationsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName, filter, top, skipToken);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, BootstrapConfigurationResource.DeserializeBootstrapConfigurationResource, BootstrapConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetBootstrapConfigurationsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get information about the specified bootstrap configuration.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BootstrapConfigurationResource>> GetBootstrapConfigurationAsync(Guid subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = BootstrapConfigurationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetBootstrapConfiguration");
            scope.Start();
            try
            {
                var response = await BootstrapConfigurationsRestClient.GetAsync(subscriptionId, resourceGroupName, name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get information about the specified bootstrap configuration.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BootstrapConfigurationResource> GetBootstrapConfiguration(Guid subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = BootstrapConfigurationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetBootstrapConfiguration");
            scope.Start();
            try
            {
                var response = BootstrapConfigurationsRestClient.Get(subscriptionId, resourceGroupName, name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a bootstrap configuration.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteBootstrapConfigurationAsync(Guid subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = BootstrapConfigurationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteBootstrapConfiguration");
            scope.Start();
            try
            {
                var response = await BootstrapConfigurationsRestClient.DeleteAsync(subscriptionId, resourceGroupName, name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a bootstrap configuration.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteBootstrapConfiguration(Guid subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = BootstrapConfigurationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteBootstrapConfiguration");
            scope.Start();
            try
            {
                var response = BootstrapConfigurationsRestClient.Delete(subscriptionId, resourceGroupName, name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new bootstrap configuration with the specified parameters. Existing bootstrap configuration cannot be updated with this API and should
        /// instead be updated with the Update bootstrap configuration API.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="bootstrapConfigurationResource"> Bootstrap configuration details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<BootstrapConfigurationResource>> CreateBootstrapConfigurationAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string name, BootstrapConfigurationResource bootstrapConfigurationResource, CancellationToken cancellationToken = default)
        {
            using var scope = BootstrapConfigurationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateBootstrapConfiguration");
            scope.Start();
            try
            {
                var response = await BootstrapConfigurationsRestClient.CreateAsync(subscriptionId, resourceGroupName, name, bootstrapConfigurationResource, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation<BootstrapConfigurationResource>(new BootstrapConfigurationResourceOperationSource(), BootstrapConfigurationsClientDiagnostics, Pipeline, BootstrapConfigurationsRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, name, bootstrapConfigurationResource).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new bootstrap configuration with the specified parameters. Existing bootstrap configuration cannot be updated with this API and should
        /// instead be updated with the Update bootstrap configuration API.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="bootstrapConfigurationResource"> Bootstrap configuration details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<BootstrapConfigurationResource> CreateBootstrapConfiguration(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string name, BootstrapConfigurationResource bootstrapConfigurationResource, CancellationToken cancellationToken = default)
        {
            using var scope = BootstrapConfigurationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateBootstrapConfiguration");
            scope.Start();
            try
            {
                var response = BootstrapConfigurationsRestClient.Create(subscriptionId, resourceGroupName, name, bootstrapConfigurationResource, cancellationToken);
                var operation = new EdgeOrderArmOperation<BootstrapConfigurationResource>(new BootstrapConfigurationResourceOperationSource(), BootstrapConfigurationsClientDiagnostics, Pipeline, BootstrapConfigurationsRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, name, bootstrapConfigurationResource).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the properties of an existing bootstrap configuration.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="bootstrapConfigurationUpdateParameter"> Bootstrap configuration update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BootstrapConfigurationResource>> UpdateBootstrapConfigurationAsync(Guid subscriptionId, string resourceGroupName, string name, BootstrapConfigurationUpdateParameter bootstrapConfigurationUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = BootstrapConfigurationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateBootstrapConfiguration");
            scope.Start();
            try
            {
                var response = await BootstrapConfigurationsRestClient.UpdateAsync(subscriptionId, resourceGroupName, name, bootstrapConfigurationUpdateParameter, ifMatch, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the properties of an existing bootstrap configuration.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BootstrapConfigurations_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="bootstrapConfigurationUpdateParameter"> Bootstrap configuration update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BootstrapConfigurationResource> UpdateBootstrapConfiguration(Guid subscriptionId, string resourceGroupName, string name, BootstrapConfigurationUpdateParameter bootstrapConfigurationUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = BootstrapConfigurationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateBootstrapConfiguration");
            scope.Start();
            try
            {
                var response = BootstrapConfigurationsRestClient.Update(subscriptionId, resourceGroupName, name, bootstrapConfigurationUpdateParameter, ifMatch, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List configurations for the given product family, product line and product for the given subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listConfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProductsAndConfigurations_ListConfigurations</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="content"> Filters for showing the configurations. </param>
        /// <param name="skipToken"> $skipToken is supported on list of configurations, which provides the next page in the list of configurations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProductConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProductConfiguration> GetConfigurationsProductsAndConfigurationsAsync(Guid subscriptionId, ConfigurationsContent content, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ProductsAndConfigurationsRestClient.CreateListConfigurationsRequest(subscriptionId, content, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ProductsAndConfigurationsRestClient.CreateListConfigurationsNextPageRequest(nextLink, subscriptionId, content, skipToken);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, ProductConfiguration.DeserializeProductConfiguration, ProductsAndConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetConfigurationsProductsAndConfigurations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List configurations for the given product family, product line and product for the given subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listConfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProductsAndConfigurations_ListConfigurations</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="content"> Filters for showing the configurations. </param>
        /// <param name="skipToken"> $skipToken is supported on list of configurations, which provides the next page in the list of configurations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProductConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProductConfiguration> GetConfigurationsProductsAndConfigurations(Guid subscriptionId, ConfigurationsContent content, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ProductsAndConfigurationsRestClient.CreateListConfigurationsRequest(subscriptionId, content, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ProductsAndConfigurationsRestClient.CreateListConfigurationsNextPageRequest(nextLink, subscriptionId, content, skipToken);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, ProductConfiguration.DeserializeProductConfiguration, ProductsAndConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetConfigurationsProductsAndConfigurations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List product families for the given subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listProductFamilies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProductsAndConfigurations_ListProductFamilies</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="content"> Filters for showing the product families. </param>
        /// <param name="expand"> $expand is supported on configurations parameter for product, which provides details on the configurations for the product. </param>
        /// <param name="skipToken"> $skipToken is supported on list of product families, which provides the next page in the list of product families. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProductFamily" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProductFamily> GetProductFamiliesProductsAndConfigurationsAsync(Guid subscriptionId, ProductFamiliesContent content, string expand = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ProductsAndConfigurationsRestClient.CreateListProductFamiliesRequest(subscriptionId, content, expand, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ProductsAndConfigurationsRestClient.CreateListProductFamiliesNextPageRequest(nextLink, subscriptionId, content, expand, skipToken);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, ProductFamily.DeserializeProductFamily, ProductsAndConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetProductFamiliesProductsAndConfigurations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List product families for the given subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listProductFamilies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProductsAndConfigurations_ListProductFamilies</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="content"> Filters for showing the product families. </param>
        /// <param name="expand"> $expand is supported on configurations parameter for product, which provides details on the configurations for the product. </param>
        /// <param name="skipToken"> $skipToken is supported on list of product families, which provides the next page in the list of product families. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProductFamily" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProductFamily> GetProductFamiliesProductsAndConfigurations(Guid subscriptionId, ProductFamiliesContent content, string expand = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ProductsAndConfigurationsRestClient.CreateListProductFamiliesRequest(subscriptionId, content, expand, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ProductsAndConfigurationsRestClient.CreateListProductFamiliesNextPageRequest(nextLink, subscriptionId, content, expand, skipToken);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, ProductFamily.DeserializeProductFamily, ProductsAndConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetProductFamiliesProductsAndConfigurations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List product families metadata for the given subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/productFamiliesMetadata</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProductsAndConfigurations_ListProductFamiliesMetadata</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="skipToken"> $skipToken is supported on list of product families metadata, which provides the next page in the list of product families metadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProductFamiliesMetadata" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProductFamiliesMetadata> GetProductFamiliesMetadataProductsAndConfigurationsAsync(Guid subscriptionId, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ProductsAndConfigurationsRestClient.CreateListProductFamiliesMetadataRequest(subscriptionId, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ProductsAndConfigurationsRestClient.CreateListProductFamiliesMetadataNextPageRequest(nextLink, subscriptionId, skipToken);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, ProductFamiliesMetadata.DeserializeProductFamiliesMetadata, ProductsAndConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetProductFamiliesMetadataProductsAndConfigurations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List product families metadata for the given subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/productFamiliesMetadata</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProductsAndConfigurations_ListProductFamiliesMetadata</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="skipToken"> $skipToken is supported on list of product families metadata, which provides the next page in the list of product families metadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProductFamiliesMetadata" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProductFamiliesMetadata> GetProductFamiliesMetadataProductsAndConfigurations(Guid subscriptionId, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ProductsAndConfigurationsRestClient.CreateListProductFamiliesMetadataRequest(subscriptionId, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ProductsAndConfigurationsRestClient.CreateListProductFamiliesMetadataNextPageRequest(nextLink, subscriptionId, skipToken);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, ProductFamiliesMetadata.DeserializeProductFamiliesMetadata, ProductsAndConfigurationsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetProductFamiliesMetadataProductsAndConfigurations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List order items at subscription level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orderItems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="filter"> $filter is supported to filter based on order id and order Item Type. Filter supports only equals operation. </param>
        /// <param name="expand"> $expand is supported on parent device details, device details, forward shipping details and reverse shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for order item provides details on the devices of the product, Device Details for order item provides details on the devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and reverse shipping details respectively. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of order items, which provides the next page in the list of order items. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeOrderItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeOrderItem> GetOrderItemsBySubscriptionAsync(Guid subscriptionId, string filter = null, string expand = null, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OrderItemsRestClient.CreateListBySubscriptionRequest(subscriptionId, filter, expand, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OrderItemsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId, filter, expand, skipToken, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, EdgeOrderItem.DeserializeEdgeOrderItem, OrderItemsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetOrderItemsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List order items at subscription level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orderItems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="filter"> $filter is supported to filter based on order id and order Item Type. Filter supports only equals operation. </param>
        /// <param name="expand"> $expand is supported on parent device details, device details, forward shipping details and reverse shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for order item provides details on the devices of the product, Device Details for order item provides details on the devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and reverse shipping details respectively. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of order items, which provides the next page in the list of order items. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeOrderItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeOrderItem> GetOrderItemsBySubscription(Guid subscriptionId, string filter = null, string expand = null, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OrderItemsRestClient.CreateListBySubscriptionRequest(subscriptionId, filter, expand, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OrderItemsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId, filter, expand, skipToken, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, EdgeOrderItem.DeserializeEdgeOrderItem, OrderItemsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetOrderItemsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List order items at resource group level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeOrderItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeOrderItem> GetOrderItemsByResourceGroupAsync(TenantResourceGetOrderItemsByResourceGroupOptions options, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OrderItemsRestClient.CreateListByResourceGroupRequest(options.SubscriptionId, options.ResourceGroupName, options.Filter, options.Expand, options.SkipToken, options.Top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OrderItemsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, options.SubscriptionId, options.ResourceGroupName, options.Filter, options.Expand, options.SkipToken, options.Top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, EdgeOrderItem.DeserializeEdgeOrderItem, OrderItemsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetOrderItemsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List order items at resource group level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeOrderItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeOrderItem> GetOrderItemsByResourceGroup(TenantResourceGetOrderItemsByResourceGroupOptions options, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OrderItemsRestClient.CreateListByResourceGroupRequest(options.SubscriptionId, options.ResourceGroupName, options.Filter, options.Expand, options.SkipToken, options.Top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OrderItemsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, options.SubscriptionId, options.ResourceGroupName, options.Filter, options.Expand, options.SkipToken, options.Top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, EdgeOrderItem.DeserializeEdgeOrderItem, OrderItemsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetOrderItemsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get an order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="expand"> $expand is supported on parent device details, device details, forward shipping details and reverse shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for order item provides details on the devices of the product, Device Details for order item provides details on the devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and reverse shipping details respectively. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeOrderItem>> GetOrderItemAsync(Guid subscriptionId, string resourceGroupName, string orderItemName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOrderItem");
            scope.Start();
            try
            {
                var response = await OrderItemsRestClient.GetAsync(subscriptionId, resourceGroupName, orderItemName, expand, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="expand"> $expand is supported on parent device details, device details, forward shipping details and reverse shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for order item provides details on the devices of the product, Device Details for order item provides details on the devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and reverse shipping details respectively. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeOrderItem> GetOrderItem(Guid subscriptionId, string resourceGroupName, string orderItemName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOrderItem");
            scope.Start();
            try
            {
                var response = OrderItemsRestClient.Get(subscriptionId, resourceGroupName, orderItemName, expand, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create an order item. Existing order item cannot be updated with this api and should instead be updated with the Update order item
        /// API.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="orderItemResource"> Order item details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<EdgeOrderItem>> CreateOrderItemAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string orderItemName, EdgeOrderItem orderItemResource, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrderItem");
            scope.Start();
            try
            {
                var response = await OrderItemsRestClient.CreateAsync(subscriptionId, resourceGroupName, orderItemName, orderItemResource, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation<EdgeOrderItem>(new EdgeOrderItemOperationSource(), OrderItemsClientDiagnostics, Pipeline, OrderItemsRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, orderItemName, orderItemResource).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create an order item. Existing order item cannot be updated with this api and should instead be updated with the Update order item
        /// API.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="orderItemResource"> Order item details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<EdgeOrderItem> CreateOrderItem(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string orderItemName, EdgeOrderItem orderItemResource, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrderItem");
            scope.Start();
            try
            {
                var response = OrderItemsRestClient.Create(subscriptionId, resourceGroupName, orderItemName, orderItemResource, cancellationToken);
                var operation = new EdgeOrderArmOperation<EdgeOrderItem>(new EdgeOrderItemOperationSource(), OrderItemsClientDiagnostics, Pipeline, OrderItemsRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, orderItemName, orderItemResource).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteOrderItemAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string orderItemName, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteOrderItem");
            scope.Start();
            try
            {
                var response = await OrderItemsRestClient.DeleteAsync(subscriptionId, resourceGroupName, orderItemName, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation(OrderItemsClientDiagnostics, Pipeline, OrderItemsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, orderItemName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteOrderItem(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string orderItemName, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteOrderItem");
            scope.Start();
            try
            {
                var response = OrderItemsRestClient.Delete(subscriptionId, resourceGroupName, orderItemName, cancellationToken);
                var operation = new EdgeOrderArmOperation(OrderItemsClientDiagnostics, Pipeline, OrderItemsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, orderItemName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the properties of an existing order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="orderItemUpdateParameter"> Order item update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the order on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<EdgeOrderItem>> UpdateOrderItemAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string orderItemName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateOrderItem");
            scope.Start();
            try
            {
                var response = await OrderItemsRestClient.UpdateAsync(subscriptionId, resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation<EdgeOrderItem>(new EdgeOrderItemOperationSource(), OrderItemsClientDiagnostics, Pipeline, OrderItemsRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the properties of an existing order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="orderItemUpdateParameter"> Order item update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the order on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<EdgeOrderItem> UpdateOrderItem(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string orderItemName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateOrderItem");
            scope.Start();
            try
            {
                var response = OrderItemsRestClient.Update(subscriptionId, resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch, cancellationToken);
                var operation = new EdgeOrderArmOperation<EdgeOrderItem>(new EdgeOrderItemOperationSource(), OrderItemsClientDiagnostics, Pipeline, OrderItemsRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Cancel order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/cancel</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Cancel</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="cancellationReason"> Reason for cancellation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CancelOrderItemAsync(Guid subscriptionId, string resourceGroupName, string orderItemName, EdgeOrderItemCancellationReason cancellationReason, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CancelOrderItem");
            scope.Start();
            try
            {
                var response = await OrderItemsRestClient.CancelAsync(subscriptionId, resourceGroupName, orderItemName, cancellationReason, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Cancel order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/cancel</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Cancel</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="cancellationReason"> Reason for cancellation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CancelOrderItem(Guid subscriptionId, string resourceGroupName, string orderItemName, EdgeOrderItemCancellationReason cancellationReason, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CancelOrderItem");
            scope.Start();
            try
            {
                var response = OrderItemsRestClient.Cancel(subscriptionId, resourceGroupName, orderItemName, cancellationReason, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Return order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/return</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Return</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="content"> Return order item details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> ReturnOrderItemAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string orderItemName, EdgeOrderItemReturnContent content, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.ReturnOrderItem");
            scope.Start();
            try
            {
                var response = await OrderItemsRestClient.ReturnAsync(subscriptionId, resourceGroupName, orderItemName, content, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation(OrderItemsClientDiagnostics, Pipeline, OrderItemsRestClient.CreateReturnRequest(subscriptionId, resourceGroupName, orderItemName, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Return order item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/return</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OrderItems_Return</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="content"> Return order item details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation ReturnOrderItem(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string orderItemName, EdgeOrderItemReturnContent content, CancellationToken cancellationToken = default)
        {
            using var scope = OrderItemsClientDiagnostics.CreateScope("TenantResourceExtensionClient.ReturnOrderItem");
            scope.Start();
            try
            {
                var response = OrderItemsRestClient.Return(subscriptionId, resourceGroupName, orderItemName, content, cancellationToken);
                var operation = new EdgeOrderArmOperation(OrderItemsClientDiagnostics, Pipeline, OrderItemsRestClient.CreateReturnRequest(subscriptionId, resourceGroupName, orderItemName, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List orders at subscription level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orders</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Orders_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of orders, which provides the next page in the list of orders. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.EdgeOrder" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Models.EdgeOrder> GetOrdersBySubscriptionAsync(Guid subscriptionId, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OrdersRestClient.CreateListBySubscriptionRequest(subscriptionId, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OrdersRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId, skipToken, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Models.EdgeOrder.DeserializeEdgeOrder, OrdersClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetOrdersBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List orders at subscription level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orders</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Orders_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of orders, which provides the next page in the list of orders. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.EdgeOrder" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Models.EdgeOrder> GetOrdersBySubscription(Guid subscriptionId, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OrdersRestClient.CreateListBySubscriptionRequest(subscriptionId, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OrdersRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId, skipToken, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Models.EdgeOrder.DeserializeEdgeOrder, OrdersClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetOrdersBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get an order.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/locations/{location}/orders/{orderName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Orders_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="orderName"> The name of the order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.EdgeOrder>> GetOrderAsync(Guid subscriptionId, string resourceGroupName, AzureLocation location, string orderName, CancellationToken cancellationToken = default)
        {
            using var scope = OrdersClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOrder");
            scope.Start();
            try
            {
                var response = await OrdersRestClient.GetAsync(subscriptionId, resourceGroupName, location, orderName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an order.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/locations/{location}/orders/{orderName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Orders_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="orderName"> The name of the order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.EdgeOrder> GetOrder(Guid subscriptionId, string resourceGroupName, AzureLocation location, string orderName, CancellationToken cancellationToken = default)
        {
            using var scope = OrdersClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOrder");
            scope.Start();
            try
            {
                var response = OrdersRestClient.Get(subscriptionId, resourceGroupName, location, orderName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List orders at resource group level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orders</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Orders_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of orders, which provides the next page in the list of orders. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.EdgeOrder" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Models.EdgeOrder> GetOrdersByResourceGroupAsync(Guid subscriptionId, string resourceGroupName, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OrdersRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OrdersRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName, skipToken, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Models.EdgeOrder.DeserializeEdgeOrder, OrdersClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetOrdersByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List orders at resource group level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orders</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Orders_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of orders, which provides the next page in the list of orders. </param>
        /// <param name="top"> $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list will be returned to the API caller. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.EdgeOrder" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Models.EdgeOrder> GetOrdersByResourceGroup(Guid subscriptionId, string resourceGroupName, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OrdersRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OrdersRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName, skipToken, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Models.EdgeOrder.DeserializeEdgeOrder, OrdersClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetOrdersByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Fetches token for this resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}/listToken</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ListToken</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<TokenResponse>> GetTokenAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetToken");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.ListTokenAsync(subscriptionId, resourceGroupName, name, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation<TokenResponse>(new TokenResponseOperationSource(), DefaultClientDiagnostics, Pipeline, DefaultRestClient.CreateListTokenRequest(subscriptionId, resourceGroupName, name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Fetches token for this resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}/listToken</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ListToken</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<TokenResponse> GetToken(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetToken");
            scope.Start();
            try
            {
                var response = DefaultRestClient.ListToken(subscriptionId, resourceGroupName, name, cancellationToken);
                var operation = new EdgeOrderArmOperation<TokenResponse>(new TokenResponseOperationSource(), DefaultClientDiagnostics, Pipeline, DefaultRestClient.CreateListTokenRequest(subscriptionId, resourceGroupName, name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Upload the device artifacts.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}/uploadArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Upload_Artifacts</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="content"> Device Artifacts upload request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<UploadArtifactsResponse>> ArtifactsUploadAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string name, UploadArtifactsContent content, CancellationToken cancellationToken = default)
        {
            using var scope = UploadClientDiagnostics.CreateScope("TenantResourceExtensionClient.ArtifactsUpload");
            scope.Start();
            try
            {
                var response = await UploadRestClient.ArtifactsAsync(subscriptionId, resourceGroupName, name, content, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeOrderArmOperation<UploadArtifactsResponse>(new UploadArtifactsResponseOperationSource(), UploadClientDiagnostics, Pipeline, UploadRestClient.CreateArtifactsRequest(subscriptionId, resourceGroupName, name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Upload the device artifacts.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/bootstrapConfigurations/{name}/uploadArtifacts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Upload_Artifacts</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="name"> The name of the bootstrap configuration. </param>
        /// <param name="content"> Device Artifacts upload request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<UploadArtifactsResponse> ArtifactsUpload(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string name, UploadArtifactsContent content, CancellationToken cancellationToken = default)
        {
            using var scope = UploadClientDiagnostics.CreateScope("TenantResourceExtensionClient.ArtifactsUpload");
            scope.Start();
            try
            {
                var response = UploadRestClient.Artifacts(subscriptionId, resourceGroupName, name, content, cancellationToken);
                var operation = new EdgeOrderArmOperation<UploadArtifactsResponse>(new UploadArtifactsResponseOperationSource(), UploadClientDiagnostics, Pipeline, UploadRestClient.CreateArtifactsRequest(subscriptionId, resourceGroupName, name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
