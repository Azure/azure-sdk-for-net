// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.EdgeOrder.Models;

namespace Azure.ResourceManager.EdgeOrder
{
    /// <summary> The EdgeOrderManagement service client. </summary>
    public partial class EdgeOrderManagementOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal EdgeOrderManagementRestOperations RestClient { get; }

        /// <summary> Initializes a new instance of EdgeOrderManagementOperations for mocking. </summary>
        protected EdgeOrderManagementOperations()
        {
        }

        /// <summary> Initializes a new instance of EdgeOrderManagementOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal EdgeOrderManagementOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2020-12-01-preview")
        {
            RestClient = new EdgeOrderManagementRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets information about the specified address. </summary>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AddressResource>> GetAddressByNameAsync(string addressName, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.GetAddressByName");
            scope.Start();
            try
            {
                return await RestClient.GetAddressByNameAsync(addressName, resourceGroupName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified address. </summary>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AddressResource> GetAddressByName(string addressName, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.GetAddressByName");
            scope.Start();
            try
            {
                return RestClient.GetAddressByName(addressName, resourceGroupName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an order. </summary>
        /// <param name="orderName"> The name of the order. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OrderResource>> GetOrderByNameAsync(string orderName, string resourceGroupName, string location, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.GetOrderByName");
            scope.Start();
            try
            {
                return await RestClient.GetOrderByNameAsync(orderName, resourceGroupName, location, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an order. </summary>
        /// <param name="orderName"> The name of the order. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OrderResource> GetOrderByName(string orderName, string resourceGroupName, string location, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.GetOrderByName");
            scope.Start();
            try
            {
                return RestClient.GetOrderByName(orderName, resourceGroupName, location, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="expand"> $expand is supported on device details parameter for order item, which provides details on the devices of the product. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OrderItemResource>> GetOrderItemByNameAsync(string orderItemName, string resourceGroupName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.GetOrderItemByName");
            scope.Start();
            try
            {
                return await RestClient.GetOrderItemByNameAsync(orderItemName, resourceGroupName, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="expand"> $expand is supported on device details parameter for order item, which provides details on the devices of the product. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OrderItemResource> GetOrderItemByName(string orderItemName, string resourceGroupName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.GetOrderItemByName");
            scope.Start();
            try
            {
                return RestClient.GetOrderItemByName(orderItemName, resourceGroupName, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationReason"> Reason for cancellation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CancelOrderItemAsync(string orderItemName, string resourceGroupName, CancellationReason cancellationReason, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.CancelOrderItem");
            scope.Start();
            try
            {
                return await RestClient.CancelOrderItemAsync(orderItemName, resourceGroupName, cancellationReason, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationReason"> Reason for cancellation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CancelOrderItem(string orderItemName, string resourceGroupName, CancellationReason cancellationReason, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.CancelOrderItem");
            scope.Start();
            try
            {
                return RestClient.CancelOrderItem(orderItemName, resourceGroupName, cancellationReason, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method gets all the operations that are exposed for customer. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Models.Operation> ListOperationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Models.Operation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOperationsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Models.Operation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOperationsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This method gets all the operations that are exposed for customer. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Models.Operation> ListOperations(CancellationToken cancellationToken = default)
        {
            Page<Models.Operation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOperations");
                scope.Start();
                try
                {
                    var response = RestClient.ListOperations(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Models.Operation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOperations");
                scope.Start();
                try
                {
                    var response = RestClient.ListOperationsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all the addresses available under the subscription. </summary>
        /// <param name="filter"> $filter is supported to filter based on shipping address properties. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of addresses, which provides the next page in the list of addresses. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<AddressResource> ListAddressesAtSubscriptionLevelAsync(string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AddressResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListAddressesAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAddressesAtSubscriptionLevelAsync(filter, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AddressResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListAddressesAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAddressesAtSubscriptionLevelNextPageAsync(nextLink, filter, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all the addresses available under the subscription. </summary>
        /// <param name="filter"> $filter is supported to filter based on shipping address properties. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of addresses, which provides the next page in the list of addresses. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<AddressResource> ListAddressesAtSubscriptionLevel(string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<AddressResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListAddressesAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListAddressesAtSubscriptionLevel(filter, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AddressResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListAddressesAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListAddressesAtSubscriptionLevelNextPage(nextLink, filter, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This method provides the list of product families for the given subscription. </summary>
        /// <param name="productFamiliesRequest"> Filters for showing the product families. </param>
        /// <param name="expand"> $expand is supported on configurations parameter for product, which provides details on the configurations for the product. </param>
        /// <param name="skipToken"> $skipToken is supported on list of product families, which provides the next page in the list of product families. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="productFamiliesRequest"/> is null. </exception>
        public virtual AsyncPageable<ProductFamily> ListProductFamiliesAsync(ProductFamiliesRequest productFamiliesRequest, string expand = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (productFamiliesRequest == null)
            {
                throw new ArgumentNullException(nameof(productFamiliesRequest));
            }

            async Task<Page<ProductFamily>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListProductFamilies");
                scope.Start();
                try
                {
                    var response = await RestClient.ListProductFamiliesAsync(productFamiliesRequest, expand, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ProductFamily>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListProductFamilies");
                scope.Start();
                try
                {
                    var response = await RestClient.ListProductFamiliesNextPageAsync(nextLink, productFamiliesRequest, expand, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This method provides the list of product families for the given subscription. </summary>
        /// <param name="productFamiliesRequest"> Filters for showing the product families. </param>
        /// <param name="expand"> $expand is supported on configurations parameter for product, which provides details on the configurations for the product. </param>
        /// <param name="skipToken"> $skipToken is supported on list of product families, which provides the next page in the list of product families. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="productFamiliesRequest"/> is null. </exception>
        public virtual Pageable<ProductFamily> ListProductFamilies(ProductFamiliesRequest productFamiliesRequest, string expand = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (productFamiliesRequest == null)
            {
                throw new ArgumentNullException(nameof(productFamiliesRequest));
            }

            Page<ProductFamily> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListProductFamilies");
                scope.Start();
                try
                {
                    var response = RestClient.ListProductFamilies(productFamiliesRequest, expand, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ProductFamily> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListProductFamilies");
                scope.Start();
                try
                {
                    var response = RestClient.ListProductFamiliesNextPage(nextLink, productFamiliesRequest, expand, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This method provides the list of configurations for the given product family, product line and product under subscription. </summary>
        /// <param name="configurationsRequest"> Filters for showing the configurations. </param>
        /// <param name="skipToken"> $skipToken is supported on list of configurations, which provides the next page in the list of configurations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationsRequest"/> is null. </exception>
        public virtual AsyncPageable<Configuration> ListConfigurationsAsync(ConfigurationsRequest configurationsRequest, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (configurationsRequest == null)
            {
                throw new ArgumentNullException(nameof(configurationsRequest));
            }

            async Task<Page<Configuration>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListConfigurations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListConfigurationsAsync(configurationsRequest, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Configuration>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListConfigurations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListConfigurationsNextPageAsync(nextLink, configurationsRequest, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This method provides the list of configurations for the given product family, product line and product under subscription. </summary>
        /// <param name="configurationsRequest"> Filters for showing the configurations. </param>
        /// <param name="skipToken"> $skipToken is supported on list of configurations, which provides the next page in the list of configurations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationsRequest"/> is null. </exception>
        public virtual Pageable<Configuration> ListConfigurations(ConfigurationsRequest configurationsRequest, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (configurationsRequest == null)
            {
                throw new ArgumentNullException(nameof(configurationsRequest));
            }

            Page<Configuration> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListConfigurations");
                scope.Start();
                try
                {
                    var response = RestClient.ListConfigurations(configurationsRequest, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Configuration> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListConfigurations");
                scope.Start();
                try
                {
                    var response = RestClient.ListConfigurationsNextPage(nextLink, configurationsRequest, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This method provides the list of product families metadata for the given subscription. </summary>
        /// <param name="skipToken"> $skipToken is supported on list of product families metadata, which provides the next page in the list of product families metadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ProductFamiliesMetadataDetails> ListProductFamiliesMetadataAsync(string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ProductFamiliesMetadataDetails>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListProductFamiliesMetadata");
                scope.Start();
                try
                {
                    var response = await RestClient.ListProductFamiliesMetadataAsync(skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ProductFamiliesMetadataDetails>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListProductFamiliesMetadata");
                scope.Start();
                try
                {
                    var response = await RestClient.ListProductFamiliesMetadataNextPageAsync(nextLink, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This method provides the list of product families metadata for the given subscription. </summary>
        /// <param name="skipToken"> $skipToken is supported on list of product families metadata, which provides the next page in the list of product families metadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ProductFamiliesMetadataDetails> ListProductFamiliesMetadata(string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<ProductFamiliesMetadataDetails> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListProductFamiliesMetadata");
                scope.Start();
                try
                {
                    var response = RestClient.ListProductFamiliesMetadata(skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ProductFamiliesMetadataDetails> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListProductFamiliesMetadata");
                scope.Start();
                try
                {
                    var response = RestClient.ListProductFamiliesMetadataNextPage(nextLink, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists order at subscription level. </summary>
        /// <param name="skipToken"> $skipToken is supported on Get list of order, which provides the next page in the list of order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<OrderResource> ListOrderAtSubscriptionLevelAsync(string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<OrderResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOrderAtSubscriptionLevelAsync(skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OrderResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOrderAtSubscriptionLevelNextPageAsync(nextLink, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists order at subscription level. </summary>
        /// <param name="skipToken"> $skipToken is supported on Get list of order, which provides the next page in the list of order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<OrderResource> ListOrderAtSubscriptionLevel(string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<OrderResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListOrderAtSubscriptionLevel(skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OrderResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListOrderAtSubscriptionLevelNextPage(nextLink, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists order at subscription level. </summary>
        /// <param name="filter"> $filter is supported to filter based on order id. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of orders, which provides the next page in the list of order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<OrderItemResource> ListOrderItemsAtSubscriptionLevelAsync(string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<OrderItemResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderItemsAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOrderItemsAtSubscriptionLevelAsync(filter, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OrderItemResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderItemsAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOrderItemsAtSubscriptionLevelNextPageAsync(nextLink, filter, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists order at subscription level. </summary>
        /// <param name="filter"> $filter is supported to filter based on order id. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of orders, which provides the next page in the list of order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<OrderItemResource> ListOrderItemsAtSubscriptionLevel(string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<OrderItemResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderItemsAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListOrderItemsAtSubscriptionLevel(filter, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OrderItemResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderItemsAtSubscriptionLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListOrderItemsAtSubscriptionLevelNextPage(nextLink, filter, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all the addresses available under the given resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="filter"> $filter is supported to filter based on shipping address properties. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of addresses, which provides the next page in the list of address. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual AsyncPageable<AddressResource> ListAddressesAtResourceGroupLevelAsync(string resourceGroupName, string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            async Task<Page<AddressResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListAddressesAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAddressesAtResourceGroupLevelAsync(resourceGroupName, filter, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AddressResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListAddressesAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAddressesAtResourceGroupLevelNextPageAsync(nextLink, resourceGroupName, filter, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all the addresses available under the given resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="filter"> $filter is supported to filter based on shipping address properties. Filter supports only equals operation. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of addresses, which provides the next page in the list of address. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual Pageable<AddressResource> ListAddressesAtResourceGroupLevel(string resourceGroupName, string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            Page<AddressResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListAddressesAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListAddressesAtResourceGroupLevel(resourceGroupName, filter, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AddressResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListAddressesAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListAddressesAtResourceGroupLevelNextPage(nextLink, resourceGroupName, filter, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists order at resource group level. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of order, which provides the next page in the list of order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual AsyncPageable<OrderResource> ListOrderAtResourceGroupLevelAsync(string resourceGroupName, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            async Task<Page<OrderResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOrderAtResourceGroupLevelAsync(resourceGroupName, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OrderResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOrderAtResourceGroupLevelNextPageAsync(nextLink, resourceGroupName, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists order at resource group level. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of order, which provides the next page in the list of order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual Pageable<OrderResource> ListOrderAtResourceGroupLevel(string resourceGroupName, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            Page<OrderResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListOrderAtResourceGroupLevel(resourceGroupName, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OrderResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListOrderAtResourceGroupLevelNextPage(nextLink, resourceGroupName, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists order item at resource group level. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="filter"> $filter is supported to filter based on order id. Filter supports only equals operation. </param>
        /// <param name="expand"> $expand is supported on device details parameter for order item, which provides details on the devices of the product. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of order items, which provides the next page in the list of order items. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual AsyncPageable<OrderItemResource> ListOrderItemsAtResourceGroupLevelAsync(string resourceGroupName, string filter = null, string expand = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            async Task<Page<OrderItemResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderItemsAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOrderItemsAtResourceGroupLevelAsync(resourceGroupName, filter, expand, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OrderItemResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderItemsAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOrderItemsAtResourceGroupLevelNextPageAsync(nextLink, resourceGroupName, filter, expand, skipToken, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists order item at resource group level. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="filter"> $filter is supported to filter based on order id. Filter supports only equals operation. </param>
        /// <param name="expand"> $expand is supported on device details parameter for order item, which provides details on the devices of the product. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of order items, which provides the next page in the list of order items. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual Pageable<OrderItemResource> ListOrderItemsAtResourceGroupLevel(string resourceGroupName, string filter = null, string expand = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            Page<OrderItemResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderItemsAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListOrderItemsAtResourceGroupLevel(resourceGroupName, filter, expand, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OrderItemResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.ListOrderItemsAtResourceGroupLevel");
                scope.Start();
                try
                {
                    var response = RestClient.ListOrderItemsAtResourceGroupLevelNextPage(nextLink, resourceGroupName, filter, expand, skipToken, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Creates a new address with the specified parameters. Existing address cannot be updated with this API and should instead be updated with the Update address API. </summary>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressResource"> Address details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addressName"/>, <paramref name="resourceGroupName"/>, or <paramref name="addressResource"/> is null. </exception>
        public virtual async Task<EdgeOrderManagementCreateAddressOperation> StartCreateAddressAsync(string addressName, string resourceGroupName, AddressResource addressResource, CancellationToken cancellationToken = default)
        {
            if (addressName == null)
            {
                throw new ArgumentNullException(nameof(addressName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (addressResource == null)
            {
                throw new ArgumentNullException(nameof(addressResource));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartCreateAddress");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateAddressAsync(addressName, resourceGroupName, addressResource, cancellationToken).ConfigureAwait(false);
                return new EdgeOrderManagementCreateAddressOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateAddressRequest(addressName, resourceGroupName, addressResource).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new address with the specified parameters. Existing address cannot be updated with this API and should instead be updated with the Update address API. </summary>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressResource"> Address details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addressName"/>, <paramref name="resourceGroupName"/>, or <paramref name="addressResource"/> is null. </exception>
        public virtual EdgeOrderManagementCreateAddressOperation StartCreateAddress(string addressName, string resourceGroupName, AddressResource addressResource, CancellationToken cancellationToken = default)
        {
            if (addressName == null)
            {
                throw new ArgumentNullException(nameof(addressName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (addressResource == null)
            {
                throw new ArgumentNullException(nameof(addressResource));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartCreateAddress");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateAddress(addressName, resourceGroupName, addressResource, cancellationToken);
                return new EdgeOrderManagementCreateAddressOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateAddressRequest(addressName, resourceGroupName, addressResource).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an address. </summary>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addressName"/> or <paramref name="resourceGroupName"/> is null. </exception>
        public virtual async Task<EdgeOrderManagementDeleteAddressByNameOperation> StartDeleteAddressByNameAsync(string addressName, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (addressName == null)
            {
                throw new ArgumentNullException(nameof(addressName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartDeleteAddressByName");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteAddressByNameAsync(addressName, resourceGroupName, cancellationToken).ConfigureAwait(false);
                return new EdgeOrderManagementDeleteAddressByNameOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteAddressByNameRequest(addressName, resourceGroupName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an address. </summary>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addressName"/> or <paramref name="resourceGroupName"/> is null. </exception>
        public virtual EdgeOrderManagementDeleteAddressByNameOperation StartDeleteAddressByName(string addressName, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (addressName == null)
            {
                throw new ArgumentNullException(nameof(addressName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartDeleteAddressByName");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteAddressByName(addressName, resourceGroupName, cancellationToken);
                return new EdgeOrderManagementDeleteAddressByNameOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteAddressByNameRequest(addressName, resourceGroupName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of an existing address. </summary>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressUpdateParameter"> Address update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addressName"/>, <paramref name="resourceGroupName"/>, or <paramref name="addressUpdateParameter"/> is null. </exception>
        public virtual async Task<EdgeOrderManagementUpdateAddressOperation> StartUpdateAddressAsync(string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (addressName == null)
            {
                throw new ArgumentNullException(nameof(addressName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (addressUpdateParameter == null)
            {
                throw new ArgumentNullException(nameof(addressUpdateParameter));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartUpdateAddress");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateAddressAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch, cancellationToken).ConfigureAwait(false);
                return new EdgeOrderManagementUpdateAddressOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateAddressRequest(addressName, resourceGroupName, addressUpdateParameter, ifMatch).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of an existing address. </summary>
        /// <param name="addressName"> The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="addressUpdateParameter"> Address update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addressName"/>, <paramref name="resourceGroupName"/>, or <paramref name="addressUpdateParameter"/> is null. </exception>
        public virtual EdgeOrderManagementUpdateAddressOperation StartUpdateAddress(string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (addressName == null)
            {
                throw new ArgumentNullException(nameof(addressName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (addressUpdateParameter == null)
            {
                throw new ArgumentNullException(nameof(addressUpdateParameter));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartUpdateAddress");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateAddress(addressName, resourceGroupName, addressUpdateParameter, ifMatch, cancellationToken);
                return new EdgeOrderManagementUpdateAddressOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateAddressRequest(addressName, resourceGroupName, addressUpdateParameter, ifMatch).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an order item. Existing order item cannot be updated with this api and should instead be updated with the Update order item API. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemResource"> Order item details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="orderItemName"/>, <paramref name="resourceGroupName"/>, or <paramref name="orderItemResource"/> is null. </exception>
        public virtual async Task<EdgeOrderManagementCreateOrderItemOperation> StartCreateOrderItemAsync(string orderItemName, string resourceGroupName, OrderItemResource orderItemResource, CancellationToken cancellationToken = default)
        {
            if (orderItemName == null)
            {
                throw new ArgumentNullException(nameof(orderItemName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (orderItemResource == null)
            {
                throw new ArgumentNullException(nameof(orderItemResource));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartCreateOrderItem");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateOrderItemAsync(orderItemName, resourceGroupName, orderItemResource, cancellationToken).ConfigureAwait(false);
                return new EdgeOrderManagementCreateOrderItemOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrderItemRequest(orderItemName, resourceGroupName, orderItemResource).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an order item. Existing order item cannot be updated with this api and should instead be updated with the Update order item API. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemResource"> Order item details from request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="orderItemName"/>, <paramref name="resourceGroupName"/>, or <paramref name="orderItemResource"/> is null. </exception>
        public virtual EdgeOrderManagementCreateOrderItemOperation StartCreateOrderItem(string orderItemName, string resourceGroupName, OrderItemResource orderItemResource, CancellationToken cancellationToken = default)
        {
            if (orderItemName == null)
            {
                throw new ArgumentNullException(nameof(orderItemName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (orderItemResource == null)
            {
                throw new ArgumentNullException(nameof(orderItemResource));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartCreateOrderItem");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateOrderItem(orderItemName, resourceGroupName, orderItemResource, cancellationToken);
                return new EdgeOrderManagementCreateOrderItemOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrderItemRequest(orderItemName, resourceGroupName, orderItemResource).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="orderItemName"/> or <paramref name="resourceGroupName"/> is null. </exception>
        public virtual async Task<EdgeOrderManagementDeleteOrderItemByNameOperation> StartDeleteOrderItemByNameAsync(string orderItemName, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (orderItemName == null)
            {
                throw new ArgumentNullException(nameof(orderItemName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartDeleteOrderItemByName");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteOrderItemByNameAsync(orderItemName, resourceGroupName, cancellationToken).ConfigureAwait(false);
                return new EdgeOrderManagementDeleteOrderItemByNameOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteOrderItemByNameRequest(orderItemName, resourceGroupName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="orderItemName"/> or <paramref name="resourceGroupName"/> is null. </exception>
        public virtual EdgeOrderManagementDeleteOrderItemByNameOperation StartDeleteOrderItemByName(string orderItemName, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (orderItemName == null)
            {
                throw new ArgumentNullException(nameof(orderItemName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartDeleteOrderItemByName");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteOrderItemByName(orderItemName, resourceGroupName, cancellationToken);
                return new EdgeOrderManagementDeleteOrderItemByNameOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteOrderItemByNameRequest(orderItemName, resourceGroupName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of an existing order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemUpdateParameter"> order item update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the order on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="orderItemName"/>, <paramref name="resourceGroupName"/>, or <paramref name="orderItemUpdateParameter"/> is null. </exception>
        public virtual async Task<EdgeOrderManagementUpdateOrderItemOperation> StartUpdateOrderItemAsync(string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (orderItemName == null)
            {
                throw new ArgumentNullException(nameof(orderItemName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (orderItemUpdateParameter == null)
            {
                throw new ArgumentNullException(nameof(orderItemUpdateParameter));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartUpdateOrderItem");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateOrderItemAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch, cancellationToken).ConfigureAwait(false);
                return new EdgeOrderManagementUpdateOrderItemOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateOrderItemRequest(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of an existing order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="orderItemUpdateParameter"> order item update parameters from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the order on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="orderItemName"/>, <paramref name="resourceGroupName"/>, or <paramref name="orderItemUpdateParameter"/> is null. </exception>
        public virtual EdgeOrderManagementUpdateOrderItemOperation StartUpdateOrderItem(string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (orderItemName == null)
            {
                throw new ArgumentNullException(nameof(orderItemName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (orderItemUpdateParameter == null)
            {
                throw new ArgumentNullException(nameof(orderItemUpdateParameter));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartUpdateOrderItem");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateOrderItem(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch, cancellationToken);
                return new EdgeOrderManagementUpdateOrderItemOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateOrderItemRequest(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="returnOrderItemDetails"> Return order item CurrentStatus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="orderItemName"/>, <paramref name="resourceGroupName"/>, or <paramref name="returnOrderItemDetails"/> is null. </exception>
        public virtual async Task<EdgeOrderManagementReturnOrderItemOperation> StartReturnOrderItemAsync(string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails, CancellationToken cancellationToken = default)
        {
            if (orderItemName == null)
            {
                throw new ArgumentNullException(nameof(orderItemName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (returnOrderItemDetails == null)
            {
                throw new ArgumentNullException(nameof(returnOrderItemDetails));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartReturnOrderItem");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ReturnOrderItemAsync(orderItemName, resourceGroupName, returnOrderItemDetails, cancellationToken).ConfigureAwait(false);
                return new EdgeOrderManagementReturnOrderItemOperation(_clientDiagnostics, _pipeline, RestClient.CreateReturnOrderItemRequest(orderItemName, resourceGroupName, returnOrderItemDetails).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return order item. </summary>
        /// <param name="orderItemName"> The name of the order item. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="returnOrderItemDetails"> Return order item CurrentStatus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="orderItemName"/>, <paramref name="resourceGroupName"/>, or <paramref name="returnOrderItemDetails"/> is null. </exception>
        public virtual EdgeOrderManagementReturnOrderItemOperation StartReturnOrderItem(string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails, CancellationToken cancellationToken = default)
        {
            if (orderItemName == null)
            {
                throw new ArgumentNullException(nameof(orderItemName));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (returnOrderItemDetails == null)
            {
                throw new ArgumentNullException(nameof(returnOrderItemDetails));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderManagementOperations.StartReturnOrderItem");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ReturnOrderItem(orderItemName, resourceGroupName, returnOrderItemDetails, cancellationToken);
                return new EdgeOrderManagementReturnOrderItemOperation(_clientDiagnostics, _pipeline, RestClient.CreateReturnOrderItemRequest(orderItemName, resourceGroupName, returnOrderItemDetails).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
