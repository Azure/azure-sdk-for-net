// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeOrder;
using Azure.ResourceManager.EdgeOrder.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.EdgeOrder.Samples
{
    public partial class Sample_BootstrapConfigurationResource
    {
        // BootstrapConfigurationsListBySubscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBootstrapConfigurationResources_BootstrapConfigurationsListBySubscription()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsListBySubscription.json
            // this example is just showing the usage of "BootstrapConfigurations_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "YourSubscriptionId";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (BootstrapConfigurationResource item in subscriptionResource.GetBootstrapConfigurationResourcesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BootstrapConfigurationResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BootstrapConfigurationsGet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_BootstrapConfigurationsGet()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsGet.json
            // this example is just showing the usage of "BootstrapConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BootstrapConfigurationResource created on azure
            // for more information of creating BootstrapConfigurationResource, please refer to the document of BootstrapConfigurationResource
            string subscriptionId = "YourSubscriptionId";
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName1";
            ResourceIdentifier bootstrapConfigurationResourceId = BootstrapConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            BootstrapConfigurationResource bootstrapConfigurationResource = client.GetBootstrapConfigurationResource(bootstrapConfigurationResourceId);

            // invoke the operation
            BootstrapConfigurationResource result = await bootstrapConfigurationResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BootstrapConfigurationResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // BootstrapConfigurationsDelete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_BootstrapConfigurationsDelete()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsDelete.json
            // this example is just showing the usage of "BootstrapConfigurations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BootstrapConfigurationResource created on azure
            // for more information of creating BootstrapConfigurationResource, please refer to the document of BootstrapConfigurationResource
            string subscriptionId = "YourSubscriptionId";
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            ResourceIdentifier bootstrapConfigurationResourceId = BootstrapConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            BootstrapConfigurationResource bootstrapConfigurationResource = client.GetBootstrapConfigurationResource(bootstrapConfigurationResourceId);

            // invoke the operation
            await bootstrapConfigurationResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // BootstrapConfigurationsUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_BootstrapConfigurationsUpdate()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsUpdate.json
            // this example is just showing the usage of "BootstrapConfigurations_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BootstrapConfigurationResource created on azure
            // for more information of creating BootstrapConfigurationResource, please refer to the document of BootstrapConfigurationResource
            string subscriptionId = "YourSubscriptionId";
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            ResourceIdentifier bootstrapConfigurationResourceId = BootstrapConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            BootstrapConfigurationResource bootstrapConfigurationResource = client.GetBootstrapConfigurationResource(bootstrapConfigurationResourceId);

            // invoke the operation
            BootstrapConfigurationResourcePatch patch = new BootstrapConfigurationResourcePatch()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
                Identity = new ManagedServiceIdentity("None"),
            };
            BootstrapConfigurationResource result = await bootstrapConfigurationResource.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BootstrapConfigurationResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ListToken
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetToken_ListToken()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListToken.json
            // this example is just showing the usage of "ListToken" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BootstrapConfigurationResource created on azure
            // for more information of creating BootstrapConfigurationResource, please refer to the document of BootstrapConfigurationResource
            string subscriptionId = "YourSubscriptionId";
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            ResourceIdentifier bootstrapConfigurationResourceId = BootstrapConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            BootstrapConfigurationResource bootstrapConfigurationResource = client.GetBootstrapConfigurationResource(bootstrapConfigurationResourceId);

            // invoke the operation
            ArmOperation<TokenResponse> lro = await bootstrapConfigurationResource.GetTokenAsync(WaitUntil.Completed);
            TokenResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // UploadArtifacts
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ArtifactsUpload_UploadArtifacts()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/UploadArtifacts.json
            // this example is just showing the usage of "Upload_Artifacts" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BootstrapConfigurationResource created on azure
            // for more information of creating BootstrapConfigurationResource, please refer to the document of BootstrapConfigurationResource
            string subscriptionId = "YourSubscriptionId";
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            ResourceIdentifier bootstrapConfigurationResourceId = BootstrapConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            BootstrapConfigurationResource bootstrapConfigurationResource = client.GetBootstrapConfigurationResource(bootstrapConfigurationResourceId);

            // invoke the operation
            UploadArtifactsContent content = new UploadArtifactsContent("ZHVtbXlkYXRh", "AB123469");
            ArmOperation<UploadArtifactsResponse> lro = await bootstrapConfigurationResource.ArtifactsUploadAsync(WaitUntil.Completed, content);
            UploadArtifactsResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // DeviceUploadArtifacts
        [NUnit.Framework.Test]
        public async Task DeviceArtifactsUpload1()
        {
            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DeviceCodeCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BootstrapConfigurationResource created on azure
            string subscriptionId = "YourSubscriptionId";
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            ResourceIdentifier bootstrapConfigurationResourceId = BootstrapConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            BootstrapConfigurationResource bootstrapConfigurationResource = client.GetBootstrapConfigurationResource(bootstrapConfigurationResourceId);

            // invoke the operation
            string serialNumber = "AB123469";
            string deviceMetadataContent = File.ReadAllText("C:\\sample-folder\\sample-file");
            ArmOperation<UploadArtifactsResponse> lro = bootstrapConfigurationResource.UploadDeviceArtifacts(serialNumber, deviceMetadataContent, WaitUntil.Completed);
            UploadArtifactsResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // DeviceUploadArtifacts
        [NUnit.Framework.Test]
        public async Task DeviceArtifactsUpload2()
        {
            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BootstrapConfigurationResource created on azure
            ResourceIdentifier bootstrapConfigurationResourceId = ResourceIdentifier.Parse("sample-bootstrap-arm-id");
            BootstrapConfigurationResource bootstrapConfigurationResource = client.GetBootstrapConfigurationResource(bootstrapConfigurationResourceId);

            // invoke the operation
            string serialNumber = "AB123469";
            string deviceMetadataContent = File.ReadAllText("C:\\sample-folder\\sample-file");
            ArmOperation<UploadArtifactsResponse> lro = bootstrapConfigurationResource.UploadDeviceArtifacts(serialNumber, deviceMetadataContent, WaitUntil.Completed);
            UploadArtifactsResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
