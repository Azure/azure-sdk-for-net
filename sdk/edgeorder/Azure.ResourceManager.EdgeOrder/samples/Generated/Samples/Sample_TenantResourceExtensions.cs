// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeOrder;
using Azure.ResourceManager.EdgeOrder.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.EdgeOrder.Samples
{
    public partial class Sample_TenantResourceExtensions
    {
        // ListAddressesAtSubscriptionLevel
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAddressesBySubscription_ListAddressesAtSubscriptionLevel()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListAddressesAtSubscriptionLevel.json
            // this example is just showing the usage of "Addresses_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            await foreach (EdgeOrderAddress item in tenantResource.GetAddressesBySubscriptionAsync(subscriptionId))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ListAddressesAtResourceGroupLevel
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAddressesByResourceGroup_ListAddressesAtResourceGroupLevel()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListAddressesAtResourceGroupLevel.json
            // this example is just showing the usage of "Addresses_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            await foreach (EdgeOrderAddress item in tenantResource.GetAddressesByResourceGroupAsync(subscriptionId, resourceGroupName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GetAddressByName
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAddress_GetAddressByName()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/GetAddressByName.json
            // this example is just showing the usage of "Addresses_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string addressName = "TestAddressName1";
            EdgeOrderAddress result = await tenantResource.GetAddressAsync(subscriptionId, resourceGroupName, addressName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // CreateAddress
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateAddress_CreateAddress()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/CreateAddress.json
            // this example is just showing the usage of "Addresses_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string addressName = "TestAddressName2";
            EdgeOrderAddress addressResource = new EdgeOrderAddress(new AzureLocation("eastus"), new EdgeOrderAddressContactDetails("XXXX XXXX", "0000000000", new string[]
            {
"xxxx@xxxx.xxx"
            })
            {
                PhoneExtension = "",
            })
            {
                ShippingAddress = new EdgeOrderShippingAddress("16 TOWNSEND ST", "US")
                {
                    StreetAddress2 = "UNIT 1",
                    City = "San Francisco",
                    StateOrProvince = "CA",
                    PostalCode = "94107",
                    CompanyName = "Microsoft",
                    AddressType = EdgeOrderAddressType.None,
                },
            };
            ArmOperation<EdgeOrderAddress> lro = await tenantResource.CreateAddressAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, addressName, addressResource);
            EdgeOrderAddress result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // DeleteAddressByName
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteAddress_DeleteAddressByName()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/DeleteAddressByName.json
            // this example is just showing the usage of "Addresses_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string addressName = "TestAddressName1";
            await tenantResource.DeleteAddressAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, addressName);

            Console.WriteLine($"Succeeded");
        }

        // UpdateAddress
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UpdateAddress_UpdateAddress()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/UpdateAddress.json
            // this example is just showing the usage of "Addresses_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string addressName = "TestAddressName2";
            AddressUpdateParameter addressUpdateParameter = new AddressUpdateParameter()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
                ShippingAddress = new EdgeOrderShippingAddress("16 TOWNSEND ST", "US")
                {
                    StreetAddress2 = "UNIT 1",
                    City = "San Francisco",
                    StateOrProvince = "CA",
                    PostalCode = "94107",
                    CompanyName = "Microsoft",
                    AddressType = EdgeOrderAddressType.None,
                },
                ContactDetails = new EdgeOrderAddressContactDetails("YYYY YYYY", "0000000000", new string[]
            {
"xxxx@xxxx.xxx"
            })
                {
                    PhoneExtension = "",
                },
            };
            ArmOperation<EdgeOrderAddress> lro = await tenantResource.UpdateAddressAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, addressName, addressUpdateParameter);
            EdgeOrderAddress result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // BootstrapConfigurationsListBySubscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBootstrapConfigurationsBySubscription_BootstrapConfigurationsListBySubscription()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsListBySubscription.json
            // this example is just showing the usage of "BootstrapConfigurations_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            await foreach (BootstrapConfigurationResource item in tenantResource.GetBootstrapConfigurationsBySubscriptionAsync(subscriptionId))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BootstrapConfigurationsListByResourceGroup
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBootstrapConfigurationsByResourceGroup_BootstrapConfigurationsListByResourceGroup()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsListByResourceGroup.json
            // this example is just showing the usage of "BootstrapConfigurations_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            await foreach (BootstrapConfigurationResource item in tenantResource.GetBootstrapConfigurationsByResourceGroupAsync(subscriptionId, resourceGroupName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BootstrapConfigurationsGet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBootstrapConfiguration_BootstrapConfigurationsGet()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsGet.json
            // this example is just showing the usage of "BootstrapConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName1";
            BootstrapConfigurationResource result = await tenantResource.GetBootstrapConfigurationAsync(subscriptionId, resourceGroupName, name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // BootstrapConfigurationsDelete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteBootstrapConfiguration_BootstrapConfigurationsDelete()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsDelete.json
            // this example is just showing the usage of "BootstrapConfigurations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            await tenantResource.DeleteBootstrapConfigurationAsync(subscriptionId, resourceGroupName, name);

            Console.WriteLine($"Succeeded");
        }

        // BootstrapConfigurationsCreate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateBootstrapConfiguration_BootstrapConfigurationsCreate()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsCreate.json
            // this example is just showing the usage of "BootstrapConfigurations_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            BootstrapConfigurationResource bootstrapConfigurationResource = new BootstrapConfigurationResource(new AzureLocation("eastus"), "/subscription/2ea1a364-b5a1-4576-b6d4-4815d6817067/resourceGroups/rgName/providers/Microsoft.Edge/sites/mySite", 100, DateTimeOffset.Parse("0001-01-01T05:30:00+05:30"))
            {
                Identity = new ManagedServiceIdentity("SystemAssigned"),
            };
            ArmOperation<BootstrapConfigurationResource> lro = await tenantResource.CreateBootstrapConfigurationAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, name, bootstrapConfigurationResource);
            BootstrapConfigurationResource result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // BootstrapConfigurationsUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UpdateBootstrapConfiguration_BootstrapConfigurationsUpdate()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/BootstrapConfigurationsUpdate.json
            // this example is just showing the usage of "BootstrapConfigurations_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            BootstrapConfigurationUpdateParameter bootstrapConfigurationUpdateParameter = new BootstrapConfigurationUpdateParameter()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
                Identity = new ManagedServiceIdentity("None"),
            };
            BootstrapConfigurationResource result = await tenantResource.UpdateBootstrapConfigurationAsync(subscriptionId, resourceGroupName, name, bootstrapConfigurationUpdateParameter);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ListConfigurations
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetConfigurationsProductsAndConfigurations_ListConfigurations()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListConfigurations.json
            // this example is just showing the usage of "ProductsAndConfigurations_ListConfigurations" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            ConfigurationsContent content = new ConfigurationsContent()
            {
                ConfigurationFilter = new ConfigurationFilter(new HierarchyInformation()
                {
                    ProductFamilyName = "azurestackedge",
                    ProductLineName = "azurestackedge",
                    ProductName = "azurestackedgegpu",
                })
                {
                    FilterableProperty =
{
new FilterableProperty(SupportedFilterType.ShipToCountries,new string[]
{
"US"
})
},
                },
            };
            await foreach (ProductConfiguration item in tenantResource.GetConfigurationsProductsAndConfigurationsAsync(subscriptionId, content))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ListProductFamilies
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetProductFamiliesProductsAndConfigurations_ListProductFamilies()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListProductFamilies.json
            // this example is just showing the usage of "ProductsAndConfigurations_ListProductFamilies" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            ProductFamiliesContent content = new ProductFamiliesContent(new Dictionary<string, IList<FilterableProperty>>()
            {
                ["azurestackedge"] = new FilterableProperty[]
            {
new FilterableProperty(SupportedFilterType.ShipToCountries,new string[]
{
"US"
})
            },
            });
            string expand = "configurations";
            await foreach (ProductFamily item in tenantResource.GetProductFamiliesProductsAndConfigurationsAsync(subscriptionId, content, expand: expand))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ListProductFamiliesMetadata
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetProductFamiliesMetadataProductsAndConfigurations_ListProductFamiliesMetadata()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListProductFamiliesMetadata.json
            // this example is just showing the usage of "ProductsAndConfigurations_ListProductFamiliesMetadata" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            await foreach (ProductFamiliesMetadata item in tenantResource.GetProductFamiliesMetadataProductsAndConfigurationsAsync(subscriptionId))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ListOrderItemsAtSubscriptionLevel
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetOrderItemsBySubscription_ListOrderItemsAtSubscriptionLevel()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListOrderItemsAtSubscriptionLevel.json
            // this example is just showing the usage of "OrderItems_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            await foreach (EdgeOrderItem item in tenantResource.GetOrderItemsBySubscriptionAsync(subscriptionId))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ListOrderItemsAtResourceGroupLevel
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetOrderItemsByResourceGroup_ListOrderItemsAtResourceGroupLevel()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListOrderItemsAtResourceGroupLevel.json
            // this example is just showing the usage of "OrderItems_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            TenantResourceGetOrderItemsByResourceGroupOptions options = new TenantResourceGetOrderItemsByResourceGroupOptions(subscriptionId: Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067"), resourceGroupName: "YourResourceGroupName") { };
            await foreach (EdgeOrderItem item in tenantResource.GetOrderItemsByResourceGroupAsync(options))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GetOrderItemByName
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetOrderItem_GetOrderItemByName()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/GetOrderItemByName.json
            // this example is just showing the usage of "OrderItems_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string orderItemName = "TestOrderItemName1";
            EdgeOrderItem result = await tenantResource.GetOrderItemAsync(subscriptionId, resourceGroupName, orderItemName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // CreateOrderItem
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrderItem_CreateOrderItem()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/CreateOrderItem.json
            // this example is just showing the usage of "OrderItems_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string orderItemName = "TestOrderItemName2";
            EdgeOrderItem orderItemResource = new EdgeOrderItem(new AzureLocation("eastus"), new EdgeOrderItemDetails(new ProductDetails(new HierarchyInformation()
            {
                ProductFamilyName = "azurestackedge",
                ProductLineName = "azurestackedge",
                ProductName = "azurestackedgegpu",
                ConfigurationName = "edgep_base",
            }), OrderItemType.Purchase)
            {
                Preferences = new OrderItemPreferences()
                {
                    TransportPreferencesPreferredShipmentType = TransportShipmentType.MicrosoftManaged,
                },
            }, new ResourceIdentifier("/subscriptions/2ea1a364-b5a1-4576-b6d4-4815d6817067/resourceGroups/YourResourceGroupName/providers/Microsoft.EdgeOrder/locations/eastus/orders/TestOrderName2"))
            {
                AddressDetails = new EdgeOrderItemAddressDetails(new EdgeOrderItemAddressProperties(new EdgeOrderAddressContactDetails("XXXX XXXX", "0000000000", new string[]
            {
"xxxx@xxxx.xxx"
            })
                {
                    PhoneExtension = "",
                })
                {
                    ShippingAddress = new EdgeOrderShippingAddress("16 TOWNSEND ST", "US")
                    {
                        StreetAddress2 = "UNIT 1",
                        City = "San Francisco",
                        StateOrProvince = "CA",
                        PostalCode = "94107",
                        CompanyName = "Microsoft",
                        AddressType = EdgeOrderAddressType.None,
                    },
                }),
            };
            ArmOperation<EdgeOrderItem> lro = await tenantResource.CreateOrderItemAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, orderItemName, orderItemResource);
            EdgeOrderItem result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // DeleteOrderItemByName
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteOrderItem_DeleteOrderItemByName()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/DeleteOrderItemByName.json
            // this example is just showing the usage of "OrderItems_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string orderItemName = "TestOrderItemName3";
            await tenantResource.DeleteOrderItemAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, orderItemName);

            Console.WriteLine($"Succeeded");
        }

        // UpdateOrderItem
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UpdateOrderItem_UpdateOrderItem()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/UpdateOrderItem.json
            // this example is just showing the usage of "OrderItems_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string orderItemName = "TestOrderItemName3";
            OrderItemUpdateParameter orderItemUpdateParameter = new OrderItemUpdateParameter()
            {
                Preferences = new OrderItemPreferences()
                {
                    TransportPreferencesPreferredShipmentType = TransportShipmentType.CustomerManaged,
                },
            };
            ArmOperation<EdgeOrderItem> lro = await tenantResource.UpdateOrderItemAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, orderItemName, orderItemUpdateParameter);
            EdgeOrderItem result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // CancelOrderItem
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CancelOrderItem_CancelOrderItem()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/CancelOrderItem.json
            // this example is just showing the usage of "OrderItems_Cancel" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string orderItemName = "TestOrderItemName3";
            EdgeOrderItemCancellationReason cancellationReason = new EdgeOrderItemCancellationReason("Order cancelled");
            await tenantResource.CancelOrderItemAsync(subscriptionId, resourceGroupName, orderItemName, cancellationReason);

            Console.WriteLine($"Succeeded");
        }

        // ReturnOrderItem
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ReturnOrderItem_ReturnOrderItem()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ReturnOrderItem.json
            // this example is just showing the usage of "OrderItems_Return" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string orderItemName = "TestOrderName4";
            EdgeOrderItemReturnContent content = new EdgeOrderItemReturnContent("Order returned");
            await tenantResource.ReturnOrderItemAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, orderItemName, content);

            Console.WriteLine($"Succeeded");
        }

        // ListOrderAtSubscriptionLevel
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetOrdersBySubscription_ListOrderAtSubscriptionLevel()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListOrderAtSubscriptionLevel.json
            // this example is just showing the usage of "Orders_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            await foreach (Models.EdgeOrder item in tenantResource.GetOrdersBySubscriptionAsync(subscriptionId))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GetOrderByName
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetOrder_GetOrderByName()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/GetOrderByName.json
            // this example is just showing the usage of "Orders_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            AzureLocation location = new AzureLocation("eastus");
            string orderName = "TestOrderName3";
            Models.EdgeOrder result = await tenantResource.GetOrderAsync(subscriptionId, resourceGroupName, location, orderName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ListOrderAtResourceGroupLevel
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetOrdersByResourceGroup_ListOrderAtResourceGroupLevel()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListOrderAtResourceGroupLevel.json
            // this example is just showing the usage of "Orders_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            await foreach (Models.EdgeOrder item in tenantResource.GetOrdersByResourceGroupAsync(subscriptionId, resourceGroupName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ListToken
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetToken_ListToken()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/ListToken.json
            // this example is just showing the usage of "ListToken" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            ArmOperation<TokenResponse> lro = await tenantResource.GetTokenAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, name);
            TokenResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // UploadArtifacts
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ArtifactsUpload_UploadArtifacts()
        {
            // Generated from example definition: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/preview/2023-05-01-preview/examples/UploadArtifacts.json
            // this example is just showing the usage of "Upload_Artifacts" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("2ea1a364-b5a1-4576-b6d4-4815d6817067");
            string resourceGroupName = "YourResourceGroupName";
            string name = "TestBootConfigurationName2";
            UploadArtifactsContent content = new UploadArtifactsContent("ZHVtbXlkYXRh", "AB123469");
            ArmOperation<UploadArtifactsResponse> lro = await tenantResource.ArtifactsUploadAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, name, content);
            UploadArtifactsResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
