// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeOrder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EdgeOrderManagementClient.
    /// </summary>
    public static partial class EdgeOrderManagementClientExtensions
    {
            /// <summary>
            /// This method gets all the operations that are exposed for customer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Operation> ListOperations(this IEdgeOrderManagementClient operations)
            {
                return operations.ListOperationsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets all the operations that are exposed for customer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Operation>> ListOperationsAsync(this IEdgeOrderManagementClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOperationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the addresses available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on shipping address properties. Filter
            /// supports only equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of addresses, which provides the next
            /// page in the list of addresses.
            /// </param>
            public static IPage<AddressResource> ListAddressesAtSubscriptionLevel(this IEdgeOrderManagementClient operations, string filter = default(string), string skipToken = default(string))
            {
                return operations.ListAddressesAtSubscriptionLevelAsync(filter, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addresses available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on shipping address properties. Filter
            /// supports only equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of addresses, which provides the next
            /// page in the list of addresses.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AddressResource>> ListAddressesAtSubscriptionLevelAsync(this IEdgeOrderManagementClient operations, string filter = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAddressesAtSubscriptionLevelWithHttpMessagesAsync(filter, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of product families for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productFamiliesRequest'>
            /// Filters for showing the product families.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on configurations parameter for product, which
            /// provides details on the configurations for the product.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of product families, which provides the
            /// next page in the list of product families.
            /// </param>
            public static IPage<ProductFamily> ListProductFamilies(this IEdgeOrderManagementClient operations, ProductFamiliesRequest productFamiliesRequest, string expand = default(string), string skipToken = default(string))
            {
                return operations.ListProductFamiliesAsync(productFamiliesRequest, expand, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of product families for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productFamiliesRequest'>
            /// Filters for showing the product families.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on configurations parameter for product, which
            /// provides details on the configurations for the product.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of product families, which provides the
            /// next page in the list of product families.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductFamily>> ListProductFamiliesAsync(this IEdgeOrderManagementClient operations, ProductFamiliesRequest productFamiliesRequest, string expand = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProductFamiliesWithHttpMessagesAsync(productFamiliesRequest, expand, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of configurations for the given product
            /// family, product line and product under subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationsRequest'>
            /// Filters for showing the configurations.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of configurations, which provides the next
            /// page in the list of configurations.
            /// </param>
            public static IPage<Configuration> ListConfigurations(this IEdgeOrderManagementClient operations, ConfigurationsRequest configurationsRequest, string skipToken = default(string))
            {
                return operations.ListConfigurationsAsync(configurationsRequest, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of configurations for the given product
            /// family, product line and product under subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationsRequest'>
            /// Filters for showing the configurations.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of configurations, which provides the next
            /// page in the list of configurations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Configuration>> ListConfigurationsAsync(this IEdgeOrderManagementClient operations, ConfigurationsRequest configurationsRequest, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationsWithHttpMessagesAsync(configurationsRequest, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of product families metadata for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of product families metadata, which
            /// provides the next page in the list of product families metadata.
            /// </param>
            public static IPage<ProductFamiliesMetadataDetails> ListProductFamiliesMetadata(this IEdgeOrderManagementClient operations, string skipToken = default(string))
            {
                return operations.ListProductFamiliesMetadataAsync(skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of product families metadata for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on list of product families metadata, which
            /// provides the next page in the list of product families metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductFamiliesMetadataDetails>> ListProductFamiliesMetadataAsync(this IEdgeOrderManagementClient operations, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProductFamiliesMetadataWithHttpMessagesAsync(skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order, which provides the next page
            /// in the list of order.
            /// </param>
            public static IPage<OrderResource> ListOrderAtSubscriptionLevel(this IEdgeOrderManagementClient operations, string skipToken = default(string))
            {
                return operations.ListOrderAtSubscriptionLevelAsync(skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order, which provides the next page
            /// in the list of order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderResource>> ListOrderAtSubscriptionLevelAsync(this IEdgeOrderManagementClient operations, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOrderAtSubscriptionLevelWithHttpMessagesAsync(skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on order id. Filter supports only
            /// equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of orders, which provides the next page
            /// in the list of order.
            /// </param>
            public static IPage<OrderItemResource> ListOrderItemsAtSubscriptionLevel(this IEdgeOrderManagementClient operations, string filter = default(string), string skipToken = default(string))
            {
                return operations.ListOrderItemsAtSubscriptionLevelAsync(filter, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on order id. Filter supports only
            /// equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of orders, which provides the next page
            /// in the list of order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderItemResource>> ListOrderItemsAtSubscriptionLevelAsync(this IEdgeOrderManagementClient operations, string filter = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOrderItemsAtSubscriptionLevelWithHttpMessagesAsync(filter, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the addresses available under the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on shipping address properties. Filter
            /// supports only equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of addresses, which provides the next
            /// page in the list of address.
            /// </param>
            public static IPage<AddressResource> ListAddressesAtResourceGroupLevel(this IEdgeOrderManagementClient operations, string resourceGroupName, string filter = default(string), string skipToken = default(string))
            {
                return operations.ListAddressesAtResourceGroupLevelAsync(resourceGroupName, filter, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addresses available under the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on shipping address properties. Filter
            /// supports only equals operation.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of addresses, which provides the next
            /// page in the list of address.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AddressResource>> ListAddressesAtResourceGroupLevelAsync(this IEdgeOrderManagementClient operations, string resourceGroupName, string filter = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAddressesAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, filter, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the specified address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static AddressResource GetAddressByName(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName)
            {
                return operations.GetAddressByNameAsync(addressName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> GetAddressByNameAsync(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAddressByNameWithHttpMessagesAsync(addressName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new address with the specified parameters. Existing address
            /// cannot be updated with this API and should instead be updated with the
            /// Update address API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressResource'>
            /// Address details from request body.
            /// </param>
            public static AddressResource CreateAddress(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, AddressResource addressResource)
            {
                return operations.CreateAddressAsync(addressName, resourceGroupName, addressResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new address with the specified parameters. Existing address
            /// cannot be updated with this API and should instead be updated with the
            /// Update address API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressResource'>
            /// Address details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> CreateAddressAsync(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, AddressResource addressResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAddressWithHttpMessagesAsync(addressName, resourceGroupName, addressResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void DeleteAddressByName(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName)
            {
                operations.DeleteAddressByNameAsync(addressName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAddressByNameAsync(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAddressByNameWithHttpMessagesAsync(addressName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressUpdateParameter'>
            /// Address update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the job on the server matches this value.
            /// </param>
            public static AddressResource UpdateAddress(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = default(string))
            {
                return operations.UpdateAddressAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressUpdateParameter'>
            /// Address update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the job on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> UpdateAddressAsync(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAddressWithHttpMessagesAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order, which provides the next page
            /// in the list of order.
            /// </param>
            public static IPage<OrderResource> ListOrderAtResourceGroupLevel(this IEdgeOrderManagementClient operations, string resourceGroupName, string skipToken = default(string))
            {
                return operations.ListOrderAtResourceGroupLevelAsync(resourceGroupName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order, which provides the next page
            /// in the list of order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderResource>> ListOrderAtResourceGroupLevelAsync(this IEdgeOrderManagementClient operations, string resourceGroupName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOrderAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderName'>
            /// The name of the order
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='location'>
            /// The name of Azure region.
            /// </param>
            public static OrderResource GetOrderByName(this IEdgeOrderManagementClient operations, string orderName, string resourceGroupName, string location)
            {
                return operations.GetOrderByNameAsync(orderName, resourceGroupName, location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderName'>
            /// The name of the order
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='location'>
            /// The name of Azure region.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderResource> GetOrderByNameAsync(this IEdgeOrderManagementClient operations, string orderName, string resourceGroupName, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrderByNameWithHttpMessagesAsync(orderName, resourceGroupName, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order item at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on order id. Filter supports only
            /// equals operation.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on device details parameter for order item, which
            /// provides details on the devices of the product.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order items, which provides the next
            /// page in the list of order items.
            /// </param>
            public static IPage<OrderItemResource> ListOrderItemsAtResourceGroupLevel(this IEdgeOrderManagementClient operations, string resourceGroupName, string filter = default(string), string expand = default(string), string skipToken = default(string))
            {
                return operations.ListOrderItemsAtResourceGroupLevelAsync(resourceGroupName, filter, expand, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order item at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='filter'>
            /// $filter is supported to filter based on order id. Filter supports only
            /// equals operation.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on device details parameter for order item, which
            /// provides details on the devices of the product.
            /// </param>
            /// <param name='skipToken'>
            /// $skipToken is supported on Get list of order items, which provides the next
            /// page in the list of order items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderItemResource>> ListOrderItemsAtResourceGroupLevelAsync(this IEdgeOrderManagementClient operations, string resourceGroupName, string filter = default(string), string expand = default(string), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOrderItemsAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, filter, expand, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on device details parameter for order item, which
            /// provides details on the devices of the product.
            /// </param>
            public static OrderItemResource GetOrderItemByName(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, string expand = default(string))
            {
                return operations.GetOrderItemByNameAsync(orderItemName, resourceGroupName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='expand'>
            /// $expand is supported on device details parameter for order item, which
            /// provides details on the devices of the product.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> GetOrderItemByNameAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrderItemByNameWithHttpMessagesAsync(orderItemName, resourceGroupName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an order item. Existing order item cannot be updated with this api
            /// and should instead be updated with the Update order item API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemResource'>
            /// Order item details from request body.
            /// </param>
            public static OrderItemResource CreateOrderItem(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, OrderItemResource orderItemResource)
            {
                return operations.CreateOrderItemAsync(orderItemName, resourceGroupName, orderItemResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an order item. Existing order item cannot be updated with this api
            /// and should instead be updated with the Update order item API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemResource'>
            /// Order item details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> CreateOrderItemAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, OrderItemResource orderItemResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrderItemWithHttpMessagesAsync(orderItemName, resourceGroupName, orderItemResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void DeleteOrderItemByName(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName)
            {
                operations.DeleteOrderItemByNameAsync(orderItemName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteOrderItemByNameAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteOrderItemByNameWithHttpMessagesAsync(orderItemName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemUpdateParameter'>
            /// order item update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the order on the server matches this value.
            /// </param>
            public static OrderItemResource UpdateOrderItem(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = default(string))
            {
                return operations.UpdateOrderItemAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemUpdateParameter'>
            /// order item update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the order on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> UpdateOrderItemAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateOrderItemWithHttpMessagesAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationReason'>
            /// Reason for cancellation.
            /// </param>
            public static void CancelOrderItem(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, CancellationReason cancellationReason)
            {
                operations.CancelOrderItemAsync(orderItemName, resourceGroupName, cancellationReason).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationReason'>
            /// Reason for cancellation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelOrderItemAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, CancellationReason cancellationReason, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelOrderItemWithHttpMessagesAsync(orderItemName, resourceGroupName, cancellationReason, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='returnOrderItemDetails'>
            /// Return order item CurrentStatus.
            /// </param>
            public static void ReturnOrderItem(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails)
            {
                operations.ReturnOrderItemAsync(orderItemName, resourceGroupName, returnOrderItemDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='returnOrderItemDetails'>
            /// Return order item CurrentStatus.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReturnOrderItemAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReturnOrderItemWithHttpMessagesAsync(orderItemName, resourceGroupName, returnOrderItemDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new address with the specified parameters. Existing address
            /// cannot be updated with this API and should instead be updated with the
            /// Update address API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressResource'>
            /// Address details from request body.
            /// </param>
            public static AddressResource BeginCreateAddress(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, AddressResource addressResource)
            {
                return operations.BeginCreateAddressAsync(addressName, resourceGroupName, addressResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new address with the specified parameters. Existing address
            /// cannot be updated with this API and should instead be updated with the
            /// Update address API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressResource'>
            /// Address details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> BeginCreateAddressAsync(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, AddressResource addressResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateAddressWithHttpMessagesAsync(addressName, resourceGroupName, addressResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void BeginDeleteAddressByName(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName)
            {
                operations.BeginDeleteAddressByNameAsync(addressName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAddressByNameAsync(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteAddressByNameWithHttpMessagesAsync(addressName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressUpdateParameter'>
            /// Address update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the job on the server matches this value.
            /// </param>
            public static AddressResource BeginUpdateAddress(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = default(string))
            {
                return operations.BeginUpdateAddressAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing address.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addressName'>
            /// The name of the address Resource within the specified resource group.
            /// address names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='addressUpdateParameter'>
            /// Address update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the job on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResource> BeginUpdateAddressAsync(this IEdgeOrderManagementClient operations, string addressName, string resourceGroupName, AddressUpdateParameter addressUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateAddressWithHttpMessagesAsync(addressName, resourceGroupName, addressUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an order item. Existing order item cannot be updated with this api
            /// and should instead be updated with the Update order item API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemResource'>
            /// Order item details from request body.
            /// </param>
            public static OrderItemResource BeginCreateOrderItem(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, OrderItemResource orderItemResource)
            {
                return operations.BeginCreateOrderItemAsync(orderItemName, resourceGroupName, orderItemResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an order item. Existing order item cannot be updated with this api
            /// and should instead be updated with the Update order item API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemResource'>
            /// Order item details from request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> BeginCreateOrderItemAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, OrderItemResource orderItemResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrderItemWithHttpMessagesAsync(orderItemName, resourceGroupName, orderItemResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void BeginDeleteOrderItemByName(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName)
            {
                operations.BeginDeleteOrderItemByNameAsync(orderItemName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteOrderItemByNameAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteOrderItemByNameWithHttpMessagesAsync(orderItemName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties of an existing order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemUpdateParameter'>
            /// order item update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the order on the server matches this value.
            /// </param>
            public static OrderItemResource BeginUpdateOrderItem(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = default(string))
            {
                return operations.BeginUpdateOrderItemAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='orderItemUpdateParameter'>
            /// order item update parameters from request body.
            /// </param>
            /// <param name='ifMatch'>
            /// Defines the If-Match condition. The patch will be performed only if the
            /// ETag of the order on the server matches this value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderItemResource> BeginUpdateOrderItemAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, OrderItemUpdateParameter orderItemUpdateParameter, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateOrderItemWithHttpMessagesAsync(orderItemName, resourceGroupName, orderItemUpdateParameter, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='returnOrderItemDetails'>
            /// Return order item CurrentStatus.
            /// </param>
            public static void BeginReturnOrderItem(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails)
            {
                operations.BeginReturnOrderItemAsync(orderItemName, resourceGroupName, returnOrderItemDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return order item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderItemName'>
            /// The name of the order item
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='returnOrderItemDetails'>
            /// Return order item CurrentStatus.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginReturnOrderItemAsync(this IEdgeOrderManagementClient operations, string orderItemName, string resourceGroupName, ReturnOrderItemDetails returnOrderItemDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginReturnOrderItemWithHttpMessagesAsync(orderItemName, resourceGroupName, returnOrderItemDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// This method gets all the operations that are exposed for customer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Operation> ListOperationsNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListOperationsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets all the operations that are exposed for customer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Operation>> ListOperationsNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOperationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the addresses available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AddressResource> ListAddressesAtSubscriptionLevelNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListAddressesAtSubscriptionLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addresses available under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AddressResource>> ListAddressesAtSubscriptionLevelNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAddressesAtSubscriptionLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of product families for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProductFamily> ListProductFamiliesNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListProductFamiliesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of product families for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductFamily>> ListProductFamiliesNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProductFamiliesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of configurations for the given product
            /// family, product line and product under subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Configuration> ListConfigurationsNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListConfigurationsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of configurations for the given product
            /// family, product line and product under subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Configuration>> ListConfigurationsNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of product families metadata for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProductFamiliesMetadataDetails> ListProductFamiliesMetadataNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListProductFamiliesMetadataNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of product families metadata for the given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductFamiliesMetadataDetails>> ListProductFamiliesMetadataNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProductFamiliesMetadataNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrderResource> ListOrderAtSubscriptionLevelNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListOrderAtSubscriptionLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderResource>> ListOrderAtSubscriptionLevelNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOrderAtSubscriptionLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrderItemResource> ListOrderItemsAtSubscriptionLevelNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListOrderItemsAtSubscriptionLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderItemResource>> ListOrderItemsAtSubscriptionLevelNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOrderItemsAtSubscriptionLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the addresses available under the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AddressResource> ListAddressesAtResourceGroupLevelNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListAddressesAtResourceGroupLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addresses available under the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AddressResource>> ListAddressesAtResourceGroupLevelNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAddressesAtResourceGroupLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrderResource> ListOrderAtResourceGroupLevelNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListOrderAtResourceGroupLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderResource>> ListOrderAtResourceGroupLevelNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOrderAtResourceGroupLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists order item at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrderItemResource> ListOrderItemsAtResourceGroupLevelNext(this IEdgeOrderManagementClient operations, string nextPageLink)
            {
                return operations.ListOrderItemsAtResourceGroupLevelNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists order item at resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrderItemResource>> ListOrderItemsAtResourceGroupLevelNextAsync(this IEdgeOrderManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOrderItemsAtResourceGroupLevelNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
