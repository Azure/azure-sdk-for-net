// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeOrder.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Return order item request body
    /// </summary>
    public partial class ReturnOrderItemDetails
    {
        /// <summary>
        /// Initializes a new instance of the ReturnOrderItemDetails class.
        /// </summary>
        public ReturnOrderItemDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReturnOrderItemDetails class.
        /// </summary>
        /// <param name="returnReason">Return Reason.</param>
        /// <param name="returnAddress">customer return address.</param>
        public ReturnOrderItemDetails(string returnReason, AddressProperties returnAddress = default(AddressProperties))
        {
            ReturnAddress = returnAddress;
            ReturnReason = returnReason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets customer return address.
        /// </summary>
        [JsonProperty(PropertyName = "returnAddress")]
        public AddressProperties ReturnAddress { get; set; }

        /// <summary>
        /// Gets or sets return Reason.
        /// </summary>
        [JsonProperty(PropertyName = "returnReason")]
        public string ReturnReason { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ReturnReason == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReturnReason");
            }
            if (ReturnAddress != null)
            {
                ReturnAddress.Validate();
            }
        }
    }
}
