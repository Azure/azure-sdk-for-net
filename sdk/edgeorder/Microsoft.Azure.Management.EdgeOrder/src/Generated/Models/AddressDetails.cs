// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeOrder.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Address details for an order item.
    /// </summary>
    public partial class AddressDetails
    {
        /// <summary>
        /// Initializes a new instance of the AddressDetails class.
        /// </summary>
        public AddressDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddressDetails class.
        /// </summary>
        /// <param name="forwardAddress">Customer address and contact details.
        /// It should be address resource</param>
        /// <param name="returnAddress">Return shipping address</param>
        public AddressDetails(AddressProperties forwardAddress, AddressProperties returnAddress = default(AddressProperties))
        {
            ForwardAddress = forwardAddress;
            ReturnAddress = returnAddress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets customer address and contact details. It should be
        /// address resource
        /// </summary>
        [JsonProperty(PropertyName = "forwardAddress")]
        public AddressProperties ForwardAddress { get; set; }

        /// <summary>
        /// Gets return shipping address
        /// </summary>
        [JsonProperty(PropertyName = "returnAddress")]
        public AddressProperties ReturnAddress { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ForwardAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ForwardAddress");
            }
            if (ForwardAddress != null)
            {
                ForwardAddress.Validate();
            }
            if (ReturnAddress != null)
            {
                ReturnAddress.Validate();
            }
        }
    }
}
