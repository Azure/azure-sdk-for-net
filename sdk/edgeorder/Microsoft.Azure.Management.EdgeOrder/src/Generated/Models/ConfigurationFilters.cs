// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EdgeOrder.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Configuration filters
    /// </summary>
    public partial class ConfigurationFilters
    {
        /// <summary>
        /// Initializes a new instance of the ConfigurationFilters class.
        /// </summary>
        public ConfigurationFilters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConfigurationFilters class.
        /// </summary>
        /// <param name="hierarchyInformation">Product hierarchy
        /// information</param>
        /// <param name="filterableProperty">Filters specific to
        /// product</param>
        public ConfigurationFilters(HierarchyInformation hierarchyInformation, IList<FilterableProperty> filterableProperty = default(IList<FilterableProperty>))
        {
            HierarchyInformation = hierarchyInformation;
            FilterableProperty = filterableProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets product hierarchy information
        /// </summary>
        [JsonProperty(PropertyName = "hierarchyInformation")]
        public HierarchyInformation HierarchyInformation { get; set; }

        /// <summary>
        /// Gets or sets filters specific to product
        /// </summary>
        [JsonProperty(PropertyName = "filterableProperty")]
        public IList<FilterableProperty> FilterableProperty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (HierarchyInformation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HierarchyInformation");
            }
            if (FilterableProperty != null)
            {
                foreach (var element in FilterableProperty)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
