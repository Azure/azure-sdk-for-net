// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.SustainabilityServices
{
    /// <summary> Assessment report version to be used in the calculation. </summary>
    public readonly partial struct ArVersions : IEquatable<ArVersions>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ArVersions"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ArVersions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CustomValue = "Custom";
        private const string AR4Value = "AR4";
        private const string AR5Value = "AR5";
        private const string AR6Value = "AR6";

        /// <summary> Custom. </summary>
        public static ArVersions Custom { get; } = new ArVersions(CustomValue);
        /// <summary> AR4 version. </summary>
        public static ArVersions AR4 { get; } = new ArVersions(AR4Value);
        /// <summary> AR5 version. </summary>
        public static ArVersions AR5 { get; } = new ArVersions(AR5Value);
        /// <summary> AR6 version. </summary>
        public static ArVersions AR6 { get; } = new ArVersions(AR6Value);
        /// <summary> Determines if two <see cref="ArVersions"/> values are the same. </summary>
        public static bool operator ==(ArVersions left, ArVersions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ArVersions"/> values are not the same. </summary>
        public static bool operator !=(ArVersions left, ArVersions right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ArVersions"/>. </summary>
        public static implicit operator ArVersions(string value) => new ArVersions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ArVersions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ArVersions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
