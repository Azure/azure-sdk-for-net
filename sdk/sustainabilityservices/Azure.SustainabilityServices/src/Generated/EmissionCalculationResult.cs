// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.SustainabilityServices
{
    /// <summary> The output of a calculation. </summary>
    public partial class EmissionCalculationResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EmissionCalculationResult"/>. </summary>
        /// <param name="summary"> Calculation summary. </param>
        /// <param name="errorDetails"> Calculation error details. </param>
        /// <param name="activityEmissionOutput"> Calculated emissions from the activities. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summary"/>, <paramref name="errorDetails"/> or <paramref name="activityEmissionOutput"/> is null. </exception>
        internal EmissionCalculationResult(CalculationSummary summary, IEnumerable<CalculationErrorDetails> errorDetails, IEnumerable<ActivityEmissionOutput> activityEmissionOutput)
        {
            Argument.AssertNotNull(summary, nameof(summary));
            Argument.AssertNotNull(errorDetails, nameof(errorDetails));
            Argument.AssertNotNull(activityEmissionOutput, nameof(activityEmissionOutput));

            Summary = summary;
            ErrorDetails = errorDetails.ToList();
            ActivityEmissionOutput = activityEmissionOutput.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="EmissionCalculationResult"/>. </summary>
        /// <param name="summary"> Calculation summary. </param>
        /// <param name="errorDetails"> Calculation error details. </param>
        /// <param name="activityEmissionOutput"> Calculated emissions from the activities. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EmissionCalculationResult(CalculationSummary summary, IReadOnlyList<CalculationErrorDetails> errorDetails, IReadOnlyList<ActivityEmissionOutput> activityEmissionOutput, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Summary = summary;
            ErrorDetails = errorDetails;
            ActivityEmissionOutput = activityEmissionOutput;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EmissionCalculationResult"/> for deserialization. </summary>
        internal EmissionCalculationResult()
        {
        }

        /// <summary> Calculation summary. </summary>
        public CalculationSummary Summary { get; }
        /// <summary> Calculation error details. </summary>
        public IReadOnlyList<CalculationErrorDetails> ErrorDetails { get; }
        /// <summary> Calculated emissions from the activities. </summary>
        public IReadOnlyList<ActivityEmissionOutput> ActivityEmissionOutput { get; }
    }
}
