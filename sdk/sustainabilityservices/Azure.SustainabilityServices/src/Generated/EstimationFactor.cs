// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SustainabilityServices
{
    /// <summary> Estimation factors are used to convert proxy data into activity data that can be used with an emission factor. Typical examples are square footage of real estate to convert to energy or refrigerants, and the number of nights of a hotel stay. </summary>
    public partial class EstimationFactor
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EstimationFactor"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="id"> ID. </param>
        /// <param name="factorLibrary"> Factor library which the estimation factor belongs to. </param>
        /// <param name="factorValue"> Estimation factor value. </param>
        /// <param name="factorValueUnit"> Unit for factor value. </param>
        /// <param name="name"> Estimation factor name. </param>
        /// <param name="unit"> Unit. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/>, <paramref name="factorLibrary"/>, <paramref name="factorValueUnit"/>, <paramref name="name"/> or <paramref name="unit"/> is null. </exception>
        internal EstimationFactor(string entityName, Guid id, LookupField factorLibrary, double factorValue, LookupField factorValueUnit, string name, LookupField unit)
        {
            Argument.AssertNotNull(entityName, nameof(entityName));
            Argument.AssertNotNull(factorLibrary, nameof(factorLibrary));
            Argument.AssertNotNull(factorValueUnit, nameof(factorValueUnit));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(unit, nameof(unit));

            EntityName = entityName;
            Id = id;
            FactorLibrary = factorLibrary;
            FactorValue = factorValue;
            FactorValueUnit = factorValueUnit;
            Name = name;
            Unit = unit;
        }

        /// <summary> Initializes a new instance of <see cref="EstimationFactor"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="id"> ID. </param>
        /// <param name="documentationReference"> Document reference. </param>
        /// <param name="estimationFactorId"> Estimation factor ID. </param>
        /// <param name="factorLibrary"> Factor library which the estimation factor belongs to. </param>
        /// <param name="factorValue"> Estimation factor value. </param>
        /// <param name="factorValueUnit"> Unit for factor value. </param>
        /// <param name="name"> Estimation factor name. </param>
        /// <param name="subtype"> Subtype. </param>
        /// <param name="type"> Type. </param>
        /// <param name="unit"> Unit. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EstimationFactor(string entityName, Guid id, string documentationReference, Guid estimationFactorId, LookupField factorLibrary, double factorValue, LookupField factorValueUnit, string name, string subtype, string type, LookupField unit, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EntityName = entityName;
            Id = id;
            DocumentationReference = documentationReference;
            EstimationFactorId = estimationFactorId;
            FactorLibrary = factorLibrary;
            FactorValue = factorValue;
            FactorValueUnit = factorValueUnit;
            Name = name;
            Subtype = subtype;
            Type = type;
            Unit = unit;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EstimationFactor"/> for deserialization. </summary>
        internal EstimationFactor()
        {
        }

        /// <summary> Entity name. </summary>
        public string EntityName { get; }
        /// <summary> ID. </summary>
        public Guid Id { get; }
        /// <summary> Document reference. </summary>
        public string DocumentationReference { get; }
        /// <summary> Estimation factor ID. </summary>
        public Guid EstimationFactorId { get; }
        /// <summary> Factor library which the estimation factor belongs to. </summary>
        public LookupField FactorLibrary { get; }
        /// <summary> Estimation factor value. </summary>
        public double FactorValue { get; }
        /// <summary> Unit for factor value. </summary>
        public LookupField FactorValueUnit { get; }
        /// <summary> Estimation factor name. </summary>
        public string Name { get; }
        /// <summary> Subtype. </summary>
        public string Subtype { get; }
        /// <summary> Type. </summary>
        public string Type { get; }
        /// <summary> Unit. </summary>
        public LookupField Unit { get; }
    }
}
