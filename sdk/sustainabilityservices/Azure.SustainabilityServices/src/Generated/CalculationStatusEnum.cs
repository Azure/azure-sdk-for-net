// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.SustainabilityServices
{
    /// <summary> Calculation status. </summary>
    public readonly partial struct CalculationStatusEnum : IEquatable<CalculationStatusEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CalculationStatusEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CalculationStatusEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CompletedWithErrorsValue = "CompletedWithErrors";

        /// <summary> Succeeded. </summary>
        public static CalculationStatusEnum Succeeded { get; } = new CalculationStatusEnum(SucceededValue);
        /// <summary> Failed. </summary>
        public static CalculationStatusEnum Failed { get; } = new CalculationStatusEnum(FailedValue);
        /// <summary> Calculation completed with errors. </summary>
        public static CalculationStatusEnum CompletedWithErrors { get; } = new CalculationStatusEnum(CompletedWithErrorsValue);
        /// <summary> Determines if two <see cref="CalculationStatusEnum"/> values are the same. </summary>
        public static bool operator ==(CalculationStatusEnum left, CalculationStatusEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CalculationStatusEnum"/> values are not the same. </summary>
        public static bool operator !=(CalculationStatusEnum left, CalculationStatusEnum right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CalculationStatusEnum"/>. </summary>
        public static implicit operator CalculationStatusEnum(string value) => new CalculationStatusEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CalculationStatusEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CalculationStatusEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
