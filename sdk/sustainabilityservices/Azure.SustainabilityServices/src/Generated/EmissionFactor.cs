// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SustainabilityServices
{
    /// <summary> Conversion factor to convert quantities in activity data into greenhouse gas emissions. </summary>
    public partial class EmissionFactor
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EmissionFactor"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="factorLibrary"> Factor library to which the emission factor belongs to. </param>
        /// <param name="id"> ID. </param>
        /// <param name="name"> Emission factor name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/>, <paramref name="factorLibrary"/> or <paramref name="name"/> is null. </exception>
        internal EmissionFactor(string entityName, LookupField factorLibrary, Guid id, string name)
        {
            Argument.AssertNotNull(entityName, nameof(entityName));
            Argument.AssertNotNull(factorLibrary, nameof(factorLibrary));
            Argument.AssertNotNull(name, nameof(name));

            EntityName = entityName;
            FactorLibrary = factorLibrary;
            Id = id;
            Name = name;
        }

        /// <summary> Initializes a new instance of <see cref="EmissionFactor"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="factorLibrary"> Factor library to which the emission factor belongs to. </param>
        /// <param name="ch4"> CH4 factor value. </param>
        /// <param name="ch4Unit"> Unit for CH4 factor value. </param>
        /// <param name="co2"> CO2 factor value. </param>
        /// <param name="co2Unit"> Unit for CO2 factor value. </param>
        /// <param name="co2e"> CO2e factor value. </param>
        /// <param name="co2eUnit"> Unit for CO2e factor value. </param>
        /// <param name="documentationReference"> Documentation reference. </param>
        /// <param name="emissionFactorId"> Emission factor ID. </param>
        /// <param name="id"> ID. </param>
        /// <param name="hfcs"> HFCs factor value. </param>
        /// <param name="hfcsUnit"> Unit for HFCs factor value. </param>
        /// <param name="isBiofuel"> Is biofuel. </param>
        /// <param name="name"> Emission factor name. </param>
        /// <param name="nf3"> NF3 factor value. </param>
        /// <param name="nf3Unit"> Unit for NF3 factor value. </param>
        /// <param name="n2o"> NO2 factor value. </param>
        /// <param name="n2oUnit"> Unit for N2O factor value. </param>
        /// <param name="otherGhgs"> Other GHG factor value. </param>
        /// <param name="otherGhgsUnit"> Unit for other GHGs factor value. </param>
        /// <param name="pfcs"> PFCs factor value. </param>
        /// <param name="pfcsUnit"> Unit for PFCs factor value. </param>
        /// <param name="sf6"> SF6 factor value. </param>
        /// <param name="sf6Unit"> Unit for SF6 factor value. </param>
        /// <param name="subtype"> Subtype. </param>
        /// <param name="type"> Type. </param>
        /// <param name="unit"> Unit. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EmissionFactor(string entityName, LookupField factorLibrary, double? ch4, LookupField ch4Unit, double? co2, LookupField co2Unit, double? co2e, LookupField co2eUnit, string documentationReference, Guid emissionFactorId, Guid id, double? hfcs, LookupField hfcsUnit, bool? isBiofuel, string name, double? nf3, LookupField nf3Unit, double? n2o, LookupField n2oUnit, double? otherGhgs, LookupField otherGhgsUnit, double? pfcs, LookupField pfcsUnit, double? sf6, LookupField sf6Unit, string subtype, string type, LookupField unit, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EntityName = entityName;
            FactorLibrary = factorLibrary;
            Ch4 = ch4;
            Ch4Unit = ch4Unit;
            Co2 = co2;
            Co2Unit = co2Unit;
            Co2e = co2e;
            Co2eUnit = co2eUnit;
            DocumentationReference = documentationReference;
            EmissionFactorId = emissionFactorId;
            Id = id;
            Hfcs = hfcs;
            HfcsUnit = hfcsUnit;
            IsBiofuel = isBiofuel;
            Name = name;
            Nf3 = nf3;
            Nf3Unit = nf3Unit;
            N2o = n2o;
            N2oUnit = n2oUnit;
            OtherGhgs = otherGhgs;
            OtherGhgsUnit = otherGhgsUnit;
            Pfcs = pfcs;
            PfcsUnit = pfcsUnit;
            Sf6 = sf6;
            Sf6Unit = sf6Unit;
            Subtype = subtype;
            Type = type;
            Unit = unit;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EmissionFactor"/> for deserialization. </summary>
        internal EmissionFactor()
        {
        }

        /// <summary> Entity name. </summary>
        public string EntityName { get; }
        /// <summary> Factor library to which the emission factor belongs to. </summary>
        public LookupField FactorLibrary { get; }
        /// <summary> CH4 factor value. </summary>
        public double? Ch4 { get; }
        /// <summary> Unit for CH4 factor value. </summary>
        public LookupField Ch4Unit { get; }
        /// <summary> CO2 factor value. </summary>
        public double? Co2 { get; }
        /// <summary> Unit for CO2 factor value. </summary>
        public LookupField Co2Unit { get; }
        /// <summary> CO2e factor value. </summary>
        public double? Co2e { get; }
        /// <summary> Unit for CO2e factor value. </summary>
        public LookupField Co2eUnit { get; }
        /// <summary> Documentation reference. </summary>
        public string DocumentationReference { get; }
        /// <summary> Emission factor ID. </summary>
        public Guid EmissionFactorId { get; }
        /// <summary> ID. </summary>
        public Guid Id { get; }
        /// <summary> HFCs factor value. </summary>
        public double? Hfcs { get; }
        /// <summary> Unit for HFCs factor value. </summary>
        public LookupField HfcsUnit { get; }
        /// <summary> Is biofuel. </summary>
        public bool? IsBiofuel { get; }
        /// <summary> Emission factor name. </summary>
        public string Name { get; }
        /// <summary> NF3 factor value. </summary>
        public double? Nf3 { get; }
        /// <summary> Unit for NF3 factor value. </summary>
        public LookupField Nf3Unit { get; }
        /// <summary> NO2 factor value. </summary>
        public double? N2o { get; }
        /// <summary> Unit for N2O factor value. </summary>
        public LookupField N2oUnit { get; }
        /// <summary> Other GHG factor value. </summary>
        public double? OtherGhgs { get; }
        /// <summary> Unit for other GHGs factor value. </summary>
        public LookupField OtherGhgsUnit { get; }
        /// <summary> PFCs factor value. </summary>
        public double? Pfcs { get; }
        /// <summary> Unit for PFCs factor value. </summary>
        public LookupField PfcsUnit { get; }
        /// <summary> SF6 factor value. </summary>
        public double? Sf6 { get; }
        /// <summary> Unit for SF6 factor value. </summary>
        public LookupField Sf6Unit { get; }
        /// <summary> Subtype. </summary>
        public string Subtype { get; }
        /// <summary> Type. </summary>
        public string Type { get; }
        /// <summary> Unit. </summary>
        public LookupField Unit { get; }
    }
}
