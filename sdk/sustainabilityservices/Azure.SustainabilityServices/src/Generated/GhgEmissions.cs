// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SustainabilityServices
{
    /// <summary> Emissions for the activity. </summary>
    public partial class GhgEmissions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GhgEmissions"/>. </summary>
        internal GhgEmissions()
        {
        }

        /// <summary> Initializes a new instance of <see cref="GhgEmissions"/>. </summary>
        /// <param name="ch4"> CH4 emission. </param>
        /// <param name="ch4Unit"> CH4 emissions unit. </param>
        /// <param name="co2"> CO2 emissions. </param>
        /// <param name="co2Unit"> CO2 emissions unit. </param>
        /// <param name="co2e"> CO2e emissions. </param>
        /// <param name="co2eUnit"> CO2e emissions unit. </param>
        /// <param name="co2emt"> CO2emt emissions. </param>
        /// <param name="hfcs"> HFCs emissions. </param>
        /// <param name="hfcsUnit"> HFCs emissions unit. </param>
        /// <param name="n2o"> N2O emissions. </param>
        /// <param name="n2oUnit"> N2O emissions unit. </param>
        /// <param name="nf3"> NF3 emissions. </param>
        /// <param name="nf3Unit"> NF3 emissions unit. </param>
        /// <param name="pfcs"> PFCs emissions. </param>
        /// <param name="pfcsUnit"> PFCs emissions unit. </param>
        /// <param name="otherGhgs"> Other GHG emissions. </param>
        /// <param name="otherGhgsUnit"> Other GHG emissions unit. </param>
        /// <param name="sf6"> SF6 emissions. </param>
        /// <param name="sf6Unit"> SF6 emissions unit. </param>
        /// <param name="isMarketBased"> Is market based. </param>
        /// <param name="isBiogenic"> Is biogenic. </param>
        /// <param name="emissionCalculationModel"> Emission calculation model used for the calculation. </param>
        /// <param name="calculationLibrary"> Factor library used for the calculation. </param>
        /// <param name="emissionFactor"> Emission factor used for the calculation. </param>
        /// <param name="adjustedActualQuantity"> Actual quantity of the activity responsible for the emission. For example, the actual quantity for a business trip involving a hotel stay might be the number of nights stayed multiplied by the estimation factor. </param>
        /// <param name="adjustedActualQuantityUnit"> Actual quantity unit. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GhgEmissions(float? ch4, string ch4Unit, float? co2, string co2Unit, float? co2e, string co2eUnit, float? co2emt, float? hfcs, string hfcsUnit, float? n2o, string n2oUnit, float? nf3, string nf3Unit, float? pfcs, string pfcsUnit, float? otherGhgs, string otherGhgsUnit, float? sf6, string sf6Unit, bool? isMarketBased, bool? isBiogenic, string emissionCalculationModel, string calculationLibrary, string emissionFactor, string adjustedActualQuantity, string adjustedActualQuantityUnit, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Ch4 = ch4;
            Ch4Unit = ch4Unit;
            Co2 = co2;
            Co2Unit = co2Unit;
            Co2e = co2e;
            Co2eUnit = co2eUnit;
            Co2emt = co2emt;
            Hfcs = hfcs;
            HfcsUnit = hfcsUnit;
            N2o = n2o;
            N2oUnit = n2oUnit;
            Nf3 = nf3;
            Nf3Unit = nf3Unit;
            Pfcs = pfcs;
            PfcsUnit = pfcsUnit;
            OtherGhgs = otherGhgs;
            OtherGhgsUnit = otherGhgsUnit;
            Sf6 = sf6;
            Sf6Unit = sf6Unit;
            IsMarketBased = isMarketBased;
            IsBiogenic = isBiogenic;
            EmissionCalculationModel = emissionCalculationModel;
            CalculationLibrary = calculationLibrary;
            EmissionFactor = emissionFactor;
            AdjustedActualQuantity = adjustedActualQuantity;
            AdjustedActualQuantityUnit = adjustedActualQuantityUnit;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> CH4 emission. </summary>
        public float? Ch4 { get; }
        /// <summary> CH4 emissions unit. </summary>
        public string Ch4Unit { get; }
        /// <summary> CO2 emissions. </summary>
        public float? Co2 { get; }
        /// <summary> CO2 emissions unit. </summary>
        public string Co2Unit { get; }
        /// <summary> CO2e emissions. </summary>
        public float? Co2e { get; }
        /// <summary> CO2e emissions unit. </summary>
        public string Co2eUnit { get; }
        /// <summary> CO2emt emissions. </summary>
        public float? Co2emt { get; }
        /// <summary> HFCs emissions. </summary>
        public float? Hfcs { get; }
        /// <summary> HFCs emissions unit. </summary>
        public string HfcsUnit { get; }
        /// <summary> N2O emissions. </summary>
        public float? N2o { get; }
        /// <summary> N2O emissions unit. </summary>
        public string N2oUnit { get; }
        /// <summary> NF3 emissions. </summary>
        public float? Nf3 { get; }
        /// <summary> NF3 emissions unit. </summary>
        public string Nf3Unit { get; }
        /// <summary> PFCs emissions. </summary>
        public float? Pfcs { get; }
        /// <summary> PFCs emissions unit. </summary>
        public string PfcsUnit { get; }
        /// <summary> Other GHG emissions. </summary>
        public float? OtherGhgs { get; }
        /// <summary> Other GHG emissions unit. </summary>
        public string OtherGhgsUnit { get; }
        /// <summary> SF6 emissions. </summary>
        public float? Sf6 { get; }
        /// <summary> SF6 emissions unit. </summary>
        public string Sf6Unit { get; }
        /// <summary> Is market based. </summary>
        public bool? IsMarketBased { get; }
        /// <summary> Is biogenic. </summary>
        public bool? IsBiogenic { get; }
        /// <summary> Emission calculation model used for the calculation. </summary>
        public string EmissionCalculationModel { get; }
        /// <summary> Factor library used for the calculation. </summary>
        public string CalculationLibrary { get; }
        /// <summary> Emission factor used for the calculation. </summary>
        public string EmissionFactor { get; }
        /// <summary> Actual quantity of the activity responsible for the emission. For example, the actual quantity for a business trip involving a hotel stay might be the number of nights stayed multiplied by the estimation factor. </summary>
        public string AdjustedActualQuantity { get; }
        /// <summary> Actual quantity unit. </summary>
        public string AdjustedActualQuantityUnit { get; }
    }
}
