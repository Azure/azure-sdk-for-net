// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.SustainabilityServices
{
    public partial class GhgEmissions : IUtf8JsonSerializable, IJsonModel<GhgEmissions>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<GhgEmissions>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<GhgEmissions>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GhgEmissions>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(GhgEmissions)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Ch4))
            {
                writer.WritePropertyName("ch4"u8);
                writer.WriteNumberValue(Ch4.Value);
            }
            if (Optional.IsDefined(Ch4Unit))
            {
                writer.WritePropertyName("ch4Unit"u8);
                writer.WriteStringValue(Ch4Unit);
            }
            if (Optional.IsDefined(Co2))
            {
                writer.WritePropertyName("co2"u8);
                writer.WriteNumberValue(Co2.Value);
            }
            if (Optional.IsDefined(Co2Unit))
            {
                writer.WritePropertyName("co2Unit"u8);
                writer.WriteStringValue(Co2Unit);
            }
            if (Optional.IsDefined(Co2e))
            {
                writer.WritePropertyName("co2e"u8);
                writer.WriteNumberValue(Co2e.Value);
            }
            if (Optional.IsDefined(Co2eUnit))
            {
                writer.WritePropertyName("co2eUnit"u8);
                writer.WriteStringValue(Co2eUnit);
            }
            if (Optional.IsDefined(Co2emt))
            {
                writer.WritePropertyName("co2emt"u8);
                writer.WriteNumberValue(Co2emt.Value);
            }
            if (Optional.IsDefined(Hfcs))
            {
                writer.WritePropertyName("hfcs"u8);
                writer.WriteNumberValue(Hfcs.Value);
            }
            if (Optional.IsDefined(HfcsUnit))
            {
                writer.WritePropertyName("hfcsUnit"u8);
                writer.WriteStringValue(HfcsUnit);
            }
            if (Optional.IsDefined(N2o))
            {
                writer.WritePropertyName("n2o"u8);
                writer.WriteNumberValue(N2o.Value);
            }
            if (Optional.IsDefined(N2oUnit))
            {
                writer.WritePropertyName("n2oUnit"u8);
                writer.WriteStringValue(N2oUnit);
            }
            if (Optional.IsDefined(Nf3))
            {
                writer.WritePropertyName("nf3"u8);
                writer.WriteNumberValue(Nf3.Value);
            }
            if (Optional.IsDefined(Nf3Unit))
            {
                writer.WritePropertyName("nf3Unit"u8);
                writer.WriteStringValue(Nf3Unit);
            }
            if (Optional.IsDefined(Pfcs))
            {
                writer.WritePropertyName("pfcs"u8);
                writer.WriteNumberValue(Pfcs.Value);
            }
            if (Optional.IsDefined(PfcsUnit))
            {
                writer.WritePropertyName("pfcsUnit"u8);
                writer.WriteStringValue(PfcsUnit);
            }
            if (Optional.IsDefined(OtherGhgs))
            {
                writer.WritePropertyName("otherGhgs"u8);
                writer.WriteNumberValue(OtherGhgs.Value);
            }
            if (Optional.IsDefined(OtherGhgsUnit))
            {
                writer.WritePropertyName("otherGhgsUnit"u8);
                writer.WriteStringValue(OtherGhgsUnit);
            }
            if (Optional.IsDefined(Sf6))
            {
                writer.WritePropertyName("sf6"u8);
                writer.WriteNumberValue(Sf6.Value);
            }
            if (Optional.IsDefined(Sf6Unit))
            {
                writer.WritePropertyName("sf6Unit"u8);
                writer.WriteStringValue(Sf6Unit);
            }
            if (Optional.IsDefined(IsMarketBased))
            {
                writer.WritePropertyName("isMarketBased"u8);
                writer.WriteBooleanValue(IsMarketBased.Value);
            }
            if (Optional.IsDefined(IsBiogenic))
            {
                writer.WritePropertyName("isBiogenic"u8);
                writer.WriteBooleanValue(IsBiogenic.Value);
            }
            if (Optional.IsDefined(EmissionCalculationModel))
            {
                writer.WritePropertyName("emissionCalculationModel"u8);
                writer.WriteStringValue(EmissionCalculationModel);
            }
            if (Optional.IsDefined(CalculationLibrary))
            {
                writer.WritePropertyName("calculationLibrary"u8);
                writer.WriteStringValue(CalculationLibrary);
            }
            if (Optional.IsDefined(EmissionFactor))
            {
                writer.WritePropertyName("emissionFactor"u8);
                writer.WriteStringValue(EmissionFactor);
            }
            if (Optional.IsDefined(AdjustedActualQuantity))
            {
                writer.WritePropertyName("adjustedActualQuantity"u8);
                writer.WriteStringValue(AdjustedActualQuantity);
            }
            if (Optional.IsDefined(AdjustedActualQuantityUnit))
            {
                writer.WritePropertyName("adjustedActualQuantityUnit"u8);
                writer.WriteStringValue(AdjustedActualQuantityUnit);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        GhgEmissions IJsonModel<GhgEmissions>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GhgEmissions>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(GhgEmissions)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeGhgEmissions(document.RootElement, options);
        }

        internal static GhgEmissions DeserializeGhgEmissions(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float? ch4 = default;
            string ch4Unit = default;
            float? co2 = default;
            string co2Unit = default;
            float? co2e = default;
            string co2eUnit = default;
            float? co2emt = default;
            float? hfcs = default;
            string hfcsUnit = default;
            float? n2o = default;
            string n2oUnit = default;
            float? nf3 = default;
            string nf3Unit = default;
            float? pfcs = default;
            string pfcsUnit = default;
            float? otherGhgs = default;
            string otherGhgsUnit = default;
            float? sf6 = default;
            string sf6Unit = default;
            bool? isMarketBased = default;
            bool? isBiogenic = default;
            string emissionCalculationModel = default;
            string calculationLibrary = default;
            string emissionFactor = default;
            string adjustedActualQuantity = default;
            string adjustedActualQuantityUnit = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ch4"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ch4 = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("ch4Unit"u8))
                {
                    ch4Unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("co2"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    co2 = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("co2Unit"u8))
                {
                    co2Unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("co2e"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    co2e = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("co2eUnit"u8))
                {
                    co2eUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("co2emt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    co2emt = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("hfcs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hfcs = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("hfcsUnit"u8))
                {
                    hfcsUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("n2o"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    n2o = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("n2oUnit"u8))
                {
                    n2oUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nf3"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nf3 = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("nf3Unit"u8))
                {
                    nf3Unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pfcs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pfcs = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("pfcsUnit"u8))
                {
                    pfcsUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("otherGhgs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    otherGhgs = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("otherGhgsUnit"u8))
                {
                    otherGhgsUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sf6"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sf6 = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sf6Unit"u8))
                {
                    sf6Unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isMarketBased"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isMarketBased = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isBiogenic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isBiogenic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("emissionCalculationModel"u8))
                {
                    emissionCalculationModel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("calculationLibrary"u8))
                {
                    calculationLibrary = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("emissionFactor"u8))
                {
                    emissionFactor = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adjustedActualQuantity"u8))
                {
                    adjustedActualQuantity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adjustedActualQuantityUnit"u8))
                {
                    adjustedActualQuantityUnit = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new GhgEmissions(
                ch4,
                ch4Unit,
                co2,
                co2Unit,
                co2e,
                co2eUnit,
                co2emt,
                hfcs,
                hfcsUnit,
                n2o,
                n2oUnit,
                nf3,
                nf3Unit,
                pfcs,
                pfcsUnit,
                otherGhgs,
                otherGhgsUnit,
                sf6,
                sf6Unit,
                isMarketBased,
                isBiogenic,
                emissionCalculationModel,
                calculationLibrary,
                emissionFactor,
                adjustedActualQuantity,
                adjustedActualQuantityUnit,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<GhgEmissions>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GhgEmissions>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(GhgEmissions)} does not support writing '{options.Format}' format.");
            }
        }

        GhgEmissions IPersistableModel<GhgEmissions>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GhgEmissions>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeGhgEmissions(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(GhgEmissions)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<GhgEmissions>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static GhgEmissions FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeGhgEmissions(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
