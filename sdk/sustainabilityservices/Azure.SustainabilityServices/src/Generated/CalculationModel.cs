// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SustainabilityServices
{
    /// <summary> Logical representation of the emission calculation that runs the calculation methodology bringing activity data and emission factors together. </summary>
    public partial class CalculationModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CalculationModel"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="emissionCalculationId"> Emission calculation ID. </param>
        /// <param name="emissionSource"> Emission source. </param>
        /// <param name="name"> Calculation model name. </param>
        /// <param name="type"> Model type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/>, <paramref name="emissionSource"/>, <paramref name="name"/> or <paramref name="type"/> is null. </exception>
        internal CalculationModel(string entityName, Guid emissionCalculationId, LookupField emissionSource, string name, string type)
        {
            Argument.AssertNotNull(entityName, nameof(entityName));
            Argument.AssertNotNull(emissionSource, nameof(emissionSource));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(type, nameof(type));

            EntityName = entityName;
            EmissionCalculationId = emissionCalculationId;
            EmissionSource = emissionSource;
            Name = name;
            Type = type;
        }

        /// <summary> Initializes a new instance of <see cref="CalculationModel"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="calculationModelId"> Calculation model ID. </param>
        /// <param name="calculationFlowJson"> Calculation flow json. </param>
        /// <param name="calculationMethod"> Calculation method or model used to calculate emissions, as recommended by protocol. </param>
        /// <param name="dataDefinitionId"> Data definition of source. </param>
        /// <param name="documentationReference"> Document reference. </param>
        /// <param name="emissionCalculationId"> Emission calculation ID. </param>
        /// <param name="emissionSource"> Emission source. </param>
        /// <param name="modelJsonVersion"> Model JSON version. </param>
        /// <param name="name"> Calculation model name. </param>
        /// <param name="sustainabilitymodule"> Sustainability module. </param>
        /// <param name="type"> Model type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CalculationModel(string entityName, Guid calculationModelId, string calculationFlowJson, string calculationMethod, LookupField dataDefinitionId, string documentationReference, Guid emissionCalculationId, LookupField emissionSource, string modelJsonVersion, string name, LookupField sustainabilitymodule, string type, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EntityName = entityName;
            CalculationModelId = calculationModelId;
            CalculationFlowJson = calculationFlowJson;
            CalculationMethod = calculationMethod;
            DataDefinitionId = dataDefinitionId;
            DocumentationReference = documentationReference;
            EmissionCalculationId = emissionCalculationId;
            EmissionSource = emissionSource;
            ModelJsonVersion = modelJsonVersion;
            Name = name;
            Sustainabilitymodule = sustainabilitymodule;
            Type = type;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CalculationModel"/> for deserialization. </summary>
        internal CalculationModel()
        {
        }

        /// <summary> Entity name. </summary>
        public string EntityName { get; }
        /// <summary> Calculation model ID. </summary>
        public Guid CalculationModelId { get; }
        /// <summary> Calculation flow json. </summary>
        public string CalculationFlowJson { get; }
        /// <summary> Calculation method or model used to calculate emissions, as recommended by protocol. </summary>
        public string CalculationMethod { get; }
        /// <summary> Data definition of source. </summary>
        public LookupField DataDefinitionId { get; }
        /// <summary> Document reference. </summary>
        public string DocumentationReference { get; }
        /// <summary> Emission calculation ID. </summary>
        public Guid EmissionCalculationId { get; }
        /// <summary> Emission source. </summary>
        public LookupField EmissionSource { get; }
        /// <summary> Model JSON version. </summary>
        public string ModelJsonVersion { get; }
        /// <summary> Calculation model name. </summary>
        public string Name { get; }
        /// <summary> Sustainability module. </summary>
        public LookupField Sustainabilitymodule { get; }
        /// <summary> Model type. </summary>
        public string Type { get; }
    }
}
