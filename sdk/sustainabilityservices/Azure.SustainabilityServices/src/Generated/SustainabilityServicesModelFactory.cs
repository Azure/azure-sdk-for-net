// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.SustainabilityServices
{
    /// <summary> Model factory for models. </summary>
    public static partial class SustainabilityServicesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.FactorLibrary"/>. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="name"> Factor library name. </param>
        /// <param name="libraryType"> Type of factor library: estimation or emission. </param>
        /// <param name="attribution"> Appropriate acknowledgment to the original content creator when utilizing or distributing their work within the application. </param>
        /// <param name="version"> Factor library version. </param>
        /// <param name="description"> Description of the library. </param>
        /// <param name="datePublished"> Date published. </param>
        /// <param name="documentationReference"> Documentation reference. </param>
        /// <returns> A new <see cref="SustainabilityServices.FactorLibrary"/> instance for mocking. </returns>
        public static FactorLibrary FactorLibrary(Guid factorLibraryId = default, string name = null, string libraryType = null, string attribution = null, string version = null, string description = null, string datePublished = null, string documentationReference = null)
        {
            return new FactorLibrary(
                factorLibraryId,
                name,
                libraryType,
                attribution,
                version,
                description,
                datePublished,
                documentationReference,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.EstimationFactor"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="id"> ID. </param>
        /// <param name="documentationReference"> Document reference. </param>
        /// <param name="estimationFactorId"> Estimation factor ID. </param>
        /// <param name="factorLibrary"> Factor library which the estimation factor belongs to. </param>
        /// <param name="factorValue"> Estimation factor value. </param>
        /// <param name="factorValueUnit"> Unit for factor value. </param>
        /// <param name="name"> Estimation factor name. </param>
        /// <param name="subtype"> Subtype. </param>
        /// <param name="type"> Type. </param>
        /// <param name="unit"> Unit. </param>
        /// <returns> A new <see cref="SustainabilityServices.EstimationFactor"/> instance for mocking. </returns>
        public static EstimationFactor EstimationFactor(string entityName = null, Guid id = default, string documentationReference = null, Guid estimationFactorId = default, LookupField factorLibrary = null, double factorValue = default, LookupField factorValueUnit = null, string name = null, string subtype = null, string type = null, LookupField unit = null)
        {
            return new EstimationFactor(
                entityName,
                id,
                documentationReference,
                estimationFactorId,
                factorLibrary,
                factorValue,
                factorValueUnit,
                name,
                subtype,
                type,
                unit,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.LookupField"/>. </summary>
        /// <param name="id"> Unique ID of the referenced field value. </param>
        /// <param name="logicalName"> Schema name of the referenced table. </param>
        /// <param name="name"> Display name of the referenced field value. </param>
        /// <param name="keyAttributes"> Key attributes of the referenced field. </param>
        /// <param name="rowVersion"> Row version. </param>
        /// <returns> A new <see cref="SustainabilityServices.LookupField"/> instance for mocking. </returns>
        public static LookupField LookupField(Guid id = default, string logicalName = null, string name = null, IReadOnlyDictionary<string, BinaryData> keyAttributes = null, string rowVersion = null)
        {
            keyAttributes ??= new Dictionary<string, BinaryData>();

            return new LookupField(
                id,
                logicalName,
                name,
                keyAttributes,
                rowVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.EmissionFactor"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="factorLibrary"> Factor library to which the emission factor belongs to. </param>
        /// <param name="ch4"> CH4 factor value. </param>
        /// <param name="ch4Unit"> Unit for CH4 factor value. </param>
        /// <param name="co2"> CO2 factor value. </param>
        /// <param name="co2Unit"> Unit for CO2 factor value. </param>
        /// <param name="co2e"> CO2e factor value. </param>
        /// <param name="co2eUnit"> Unit for CO2e factor value. </param>
        /// <param name="documentationReference"> Documentation reference. </param>
        /// <param name="emissionFactorId"> Emission factor ID. </param>
        /// <param name="id"> ID. </param>
        /// <param name="hfcs"> HFCs factor value. </param>
        /// <param name="hfcsUnit"> Unit for HFCs factor value. </param>
        /// <param name="isBiofuel"> Is biofuel. </param>
        /// <param name="name"> Emission factor name. </param>
        /// <param name="nf3"> NF3 factor value. </param>
        /// <param name="nf3Unit"> Unit for NF3 factor value. </param>
        /// <param name="n2o"> NO2 factor value. </param>
        /// <param name="n2oUnit"> Unit for N2O factor value. </param>
        /// <param name="otherGhgs"> Other GHG factor value. </param>
        /// <param name="otherGhgsUnit"> Unit for other GHGs factor value. </param>
        /// <param name="pfcs"> PFCs factor value. </param>
        /// <param name="pfcsUnit"> Unit for PFCs factor value. </param>
        /// <param name="sf6"> SF6 factor value. </param>
        /// <param name="sf6Unit"> Unit for SF6 factor value. </param>
        /// <param name="subtype"> Subtype. </param>
        /// <param name="type"> Type. </param>
        /// <param name="unit"> Unit. </param>
        /// <returns> A new <see cref="SustainabilityServices.EmissionFactor"/> instance for mocking. </returns>
        public static EmissionFactor EmissionFactor(string entityName = null, LookupField factorLibrary = null, double? ch4 = null, LookupField ch4Unit = null, double? co2 = null, LookupField co2Unit = null, double? co2e = null, LookupField co2eUnit = null, string documentationReference = null, Guid emissionFactorId = default, Guid id = default, double? hfcs = null, LookupField hfcsUnit = null, bool? isBiofuel = null, string name = null, double? nf3 = null, LookupField nf3Unit = null, double? n2o = null, LookupField n2oUnit = null, double? otherGhgs = null, LookupField otherGhgsUnit = null, double? pfcs = null, LookupField pfcsUnit = null, double? sf6 = null, LookupField sf6Unit = null, string subtype = null, string type = null, LookupField unit = null)
        {
            return new EmissionFactor(
                entityName,
                factorLibrary,
                ch4,
                ch4Unit,
                co2,
                co2Unit,
                co2e,
                co2eUnit,
                documentationReference,
                emissionFactorId,
                id,
                hfcs,
                hfcsUnit,
                isBiofuel,
                name,
                nf3,
                nf3Unit,
                n2o,
                n2oUnit,
                otherGhgs,
                otherGhgsUnit,
                pfcs,
                pfcsUnit,
                sf6,
                sf6Unit,
                subtype,
                type,
                unit,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.FactorMapping"/>. </summary>
        /// <param name="factorMappingId"> Factor mapping id. </param>
        /// <param name="factorLibrary"> Factor library which this mapping belongs to. </param>
        /// <param name="name"> Name. </param>
        /// <param name="factor"> Factor associated with the factor mapping. </param>
        /// <param name="referenceData1"> Reference data 1. </param>
        /// <param name="referenceData2"> Reference data 2. </param>
        /// <param name="referenceData3"> Reference data 3. </param>
        /// <param name="referenceData4"> Reference data 4. </param>
        /// <returns> A new <see cref="SustainabilityServices.FactorMapping"/> instance for mocking. </returns>
        public static FactorMapping FactorMapping(Guid factorMappingId = default, LookupField factorLibrary = null, string name = null, LookupField factor = null, LookupField referenceData1 = null, LookupField referenceData2 = null, LookupField referenceData3 = null, LookupField referenceData4 = null)
        {
            return new FactorMapping(
                factorMappingId,
                factorLibrary,
                name,
                factor,
                referenceData1,
                referenceData2,
                referenceData3,
                referenceData4,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.CalculationModel"/>. </summary>
        /// <param name="entityName"> Entity name. </param>
        /// <param name="calculationModelId"> Calculation model ID. </param>
        /// <param name="calculationFlowJson"> Calculation flow json. </param>
        /// <param name="calculationMethod"> Calculation method or model used to calculate emissions, as recommended by protocol. </param>
        /// <param name="dataDefinitionId"> Data definition of source. </param>
        /// <param name="documentationReference"> Document reference. </param>
        /// <param name="emissionCalculationId"> Emission calculation ID. </param>
        /// <param name="emissionSource"> Emission source. </param>
        /// <param name="modelJsonVersion"> Model JSON version. </param>
        /// <param name="name"> Calculation model name. </param>
        /// <param name="sustainabilitymodule"> Sustainability module. </param>
        /// <param name="type"> Model type. </param>
        /// <returns> A new <see cref="SustainabilityServices.CalculationModel"/> instance for mocking. </returns>
        public static CalculationModel CalculationModel(string entityName = null, Guid calculationModelId = default, string calculationFlowJson = null, string calculationMethod = null, LookupField dataDefinitionId = null, string documentationReference = null, Guid emissionCalculationId = default, LookupField emissionSource = null, string modelJsonVersion = null, string name = null, LookupField sustainabilitymodule = null, string type = null)
        {
            return new CalculationModel(
                entityName,
                calculationModelId,
                calculationFlowJson,
                calculationMethod,
                dataDefinitionId,
                documentationReference,
                emissionCalculationId,
                emissionSource,
                modelJsonVersion,
                name,
                sustainabilitymodule,
                type,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.ReferenceDataEntities"/>. </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="displayName"> Display name of the entity. Example: Fuel Type. </param>
        /// <param name="schemaName"> Schema name of the entity. </param>
        /// <returns> A new <see cref="SustainabilityServices.ReferenceDataEntities"/> instance for mocking. </returns>
        public static ReferenceDataEntities ReferenceDataEntities(string entityName = null, string displayName = null, string schemaName = null)
        {
            return new ReferenceDataEntities(entityName, displayName, schemaName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.EntityRecord"/>. </summary>
        /// <param name="id"> Record ID. </param>
        /// <param name="data"> Entity data. </param>
        /// <returns> A new <see cref="SustainabilityServices.EntityRecord"/> instance for mocking. </returns>
        public static EntityRecord EntityRecord(Guid id = default, IReadOnlyDictionary<string, BinaryData> data = null)
        {
            data ??= new Dictionary<string, BinaryData>();

            return new EntityRecord(id, data, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.EmissionCalculationResult"/>. </summary>
        /// <param name="summary"> Calculation summary. </param>
        /// <param name="errorDetails"> Calculation error details. </param>
        /// <param name="activityEmissionOutput"> Calculated emissions from the activities. </param>
        /// <returns> A new <see cref="SustainabilityServices.EmissionCalculationResult"/> instance for mocking. </returns>
        public static EmissionCalculationResult EmissionCalculationResult(CalculationSummary summary = null, IEnumerable<CalculationErrorDetails> errorDetails = null, IEnumerable<ActivityEmissionOutput> activityEmissionOutput = null)
        {
            errorDetails ??= new List<CalculationErrorDetails>();
            activityEmissionOutput ??= new List<ActivityEmissionOutput>();

            return new EmissionCalculationResult(summary, errorDetails?.ToList(), activityEmissionOutput?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.CalculationSummary"/>. </summary>
        /// <param name="status"> Calculation status. </param>
        /// <param name="successfulActivities"> Total number of successful activities. </param>
        /// <param name="failedActivities"> Total number of failed activities. </param>
        /// <param name="excludedActivities"> Total number of excluded activities. </param>
        /// <param name="processedActivities"> Total number of processed activities. </param>
        /// <returns> A new <see cref="SustainabilityServices.CalculationSummary"/> instance for mocking. </returns>
        public static CalculationSummary CalculationSummary(CalculationStatusEnum status = default, long successfulActivities = default, long failedActivities = default, long excludedActivities = default, long processedActivities = default)
        {
            return new CalculationSummary(
                status,
                successfulActivities,
                failedActivities,
                excludedActivities,
                processedActivities,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.CalculationErrorDetails"/>. </summary>
        /// <param name="activityId"> Activity ID. </param>
        /// <param name="activityName"> Activity name. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="code"> Error code. </param>
        /// <returns> A new <see cref="SustainabilityServices.CalculationErrorDetails"/> instance for mocking. </returns>
        public static CalculationErrorDetails CalculationErrorDetails(Guid activityId = default, string activityName = null, string message = null, string code = null)
        {
            return new CalculationErrorDetails(activityId, activityName, message, code, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.ActivityEmissionOutput"/>. </summary>
        /// <param name="id"> Activity ID. </param>
        /// <param name="emissions"> Activity emissions for the activity. </param>
        /// <returns> A new <see cref="SustainabilityServices.ActivityEmissionOutput"/> instance for mocking. </returns>
        public static ActivityEmissionOutput ActivityEmissionOutput(Guid id = default, IEnumerable<GhgEmissions> emissions = null)
        {
            emissions ??= new List<GhgEmissions>();

            return new ActivityEmissionOutput(id, emissions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SustainabilityServices.GhgEmissions"/>. </summary>
        /// <param name="ch4"> CH4 emission. </param>
        /// <param name="ch4Unit"> CH4 emissions unit. </param>
        /// <param name="co2"> CO2 emissions. </param>
        /// <param name="co2Unit"> CO2 emissions unit. </param>
        /// <param name="co2e"> CO2e emissions. </param>
        /// <param name="co2eUnit"> CO2e emissions unit. </param>
        /// <param name="co2emt"> CO2emt emissions. </param>
        /// <param name="hfcs"> HFCs emissions. </param>
        /// <param name="hfcsUnit"> HFCs emissions unit. </param>
        /// <param name="n2o"> N2O emissions. </param>
        /// <param name="n2oUnit"> N2O emissions unit. </param>
        /// <param name="nf3"> NF3 emissions. </param>
        /// <param name="nf3Unit"> NF3 emissions unit. </param>
        /// <param name="pfcs"> PFCs emissions. </param>
        /// <param name="pfcsUnit"> PFCs emissions unit. </param>
        /// <param name="otherGhgs"> Other GHG emissions. </param>
        /// <param name="otherGhgsUnit"> Other GHG emissions unit. </param>
        /// <param name="sf6"> SF6 emissions. </param>
        /// <param name="sf6Unit"> SF6 emissions unit. </param>
        /// <param name="isMarketBased"> Is market based. </param>
        /// <param name="isBiogenic"> Is biogenic. </param>
        /// <param name="emissionCalculationModel"> Emission calculation model used for the calculation. </param>
        /// <param name="calculationLibrary"> Factor library used for the calculation. </param>
        /// <param name="emissionFactor"> Emission factor used for the calculation. </param>
        /// <param name="adjustedActualQuantity"> Actual quantity of the activity responsible for the emission. For example, the actual quantity for a business trip involving a hotel stay might be the number of nights stayed multiplied by the estimation factor. </param>
        /// <param name="adjustedActualQuantityUnit"> Actual quantity unit. </param>
        /// <returns> A new <see cref="SustainabilityServices.GhgEmissions"/> instance for mocking. </returns>
        public static GhgEmissions GhgEmissions(float? ch4 = null, string ch4Unit = null, float? co2 = null, string co2Unit = null, float? co2e = null, string co2eUnit = null, float? co2emt = null, float? hfcs = null, string hfcsUnit = null, float? n2o = null, string n2oUnit = null, float? nf3 = null, string nf3Unit = null, float? pfcs = null, string pfcsUnit = null, float? otherGhgs = null, string otherGhgsUnit = null, float? sf6 = null, string sf6Unit = null, bool? isMarketBased = null, bool? isBiogenic = null, string emissionCalculationModel = null, string calculationLibrary = null, string emissionFactor = null, string adjustedActualQuantity = null, string adjustedActualQuantityUnit = null)
        {
            return new GhgEmissions(
                ch4,
                ch4Unit,
                co2,
                co2Unit,
                co2e,
                co2eUnit,
                co2emt,
                hfcs,
                hfcsUnit,
                n2o,
                n2oUnit,
                nf3,
                nf3Unit,
                pfcs,
                pfcsUnit,
                otherGhgs,
                otherGhgsUnit,
                sf6,
                sf6Unit,
                isMarketBased,
                isBiogenic,
                emissionCalculationModel,
                calculationLibrary,
                emissionFactor,
                adjustedActualQuantity,
                adjustedActualQuantityUnit,
                serializedAdditionalRawData: null);
        }
    }
}
