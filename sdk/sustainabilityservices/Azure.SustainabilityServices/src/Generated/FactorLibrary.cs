// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SustainabilityServices
{
    /// <summary> Represents collection of emission and estimation factors. </summary>
    public partial class FactorLibrary
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FactorLibrary"/>. </summary>
        /// <param name="name"> Factor library name. </param>
        /// <param name="libraryType"> Type of factor library: estimation or emission. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="libraryType"/> is null. </exception>
        internal FactorLibrary(string name, string libraryType)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(libraryType, nameof(libraryType));

            Name = name;
            LibraryType = libraryType;
        }

        /// <summary> Initializes a new instance of <see cref="FactorLibrary"/>. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="name"> Factor library name. </param>
        /// <param name="libraryType"> Type of factor library: estimation or emission. </param>
        /// <param name="attribution"> Appropriate acknowledgment to the original content creator when utilizing or distributing their work within the application. </param>
        /// <param name="version"> Factor library version. </param>
        /// <param name="description"> Description of the library. </param>
        /// <param name="datePublished"> Date published. </param>
        /// <param name="documentationReference"> Documentation reference. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FactorLibrary(Guid factorLibraryId, string name, string libraryType, string attribution, string version, string description, string datePublished, string documentationReference, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FactorLibraryId = factorLibraryId;
            Name = name;
            LibraryType = libraryType;
            Attribution = attribution;
            Version = version;
            Description = description;
            DatePublished = datePublished;
            DocumentationReference = documentationReference;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="FactorLibrary"/> for deserialization. </summary>
        internal FactorLibrary()
        {
        }

        /// <summary> Factor library id. </summary>
        public Guid FactorLibraryId { get; }
        /// <summary> Factor library name. </summary>
        public string Name { get; }
        /// <summary> Type of factor library: estimation or emission. </summary>
        public string LibraryType { get; }
        /// <summary> Appropriate acknowledgment to the original content creator when utilizing or distributing their work within the application. </summary>
        public string Attribution { get; }
        /// <summary> Factor library version. </summary>
        public string Version { get; }
        /// <summary> Description of the library. </summary>
        public string Description { get; }
        /// <summary> Date published. </summary>
        public string DatePublished { get; }
        /// <summary> Documentation reference. </summary>
        public string DocumentationReference { get; }
    }
}
