// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.SustainabilityServices
{
    public partial class EmissionFactor : IUtf8JsonSerializable, IJsonModel<EmissionFactor>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EmissionFactor>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EmissionFactor>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EmissionFactor>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EmissionFactor)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("entityName"u8);
            writer.WriteStringValue(EntityName);
            writer.WritePropertyName("factorLibrary"u8);
            writer.WriteObjectValue(FactorLibrary, options);
            if (Optional.IsDefined(Ch4))
            {
                writer.WritePropertyName("ch4"u8);
                writer.WriteNumberValue(Ch4.Value);
            }
            if (Optional.IsDefined(Ch4Unit))
            {
                writer.WritePropertyName("ch4Unit"u8);
                writer.WriteObjectValue(Ch4Unit, options);
            }
            if (Optional.IsDefined(Co2))
            {
                writer.WritePropertyName("co2"u8);
                writer.WriteNumberValue(Co2.Value);
            }
            if (Optional.IsDefined(Co2Unit))
            {
                writer.WritePropertyName("co2Unit"u8);
                writer.WriteObjectValue(Co2Unit, options);
            }
            if (Optional.IsDefined(Co2e))
            {
                writer.WritePropertyName("co2e"u8);
                writer.WriteNumberValue(Co2e.Value);
            }
            if (Optional.IsDefined(Co2eUnit))
            {
                writer.WritePropertyName("co2eUnit"u8);
                writer.WriteObjectValue(Co2eUnit, options);
            }
            if (Optional.IsDefined(DocumentationReference))
            {
                writer.WritePropertyName("documentationReference"u8);
                writer.WriteStringValue(DocumentationReference);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("emissionFactorId"u8);
                writer.WriteStringValue(EmissionFactorId);
            }
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            if (Optional.IsDefined(Hfcs))
            {
                writer.WritePropertyName("hfcs"u8);
                writer.WriteNumberValue(Hfcs.Value);
            }
            if (Optional.IsDefined(HfcsUnit))
            {
                writer.WritePropertyName("hfcsUnit"u8);
                writer.WriteObjectValue(HfcsUnit, options);
            }
            if (Optional.IsDefined(IsBiofuel))
            {
                writer.WritePropertyName("isBiofuel"u8);
                writer.WriteBooleanValue(IsBiofuel.Value);
            }
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(Nf3))
            {
                writer.WritePropertyName("nf3"u8);
                writer.WriteNumberValue(Nf3.Value);
            }
            if (Optional.IsDefined(Nf3Unit))
            {
                writer.WritePropertyName("nf3Unit"u8);
                writer.WriteObjectValue(Nf3Unit, options);
            }
            if (Optional.IsDefined(N2o))
            {
                writer.WritePropertyName("n2o"u8);
                writer.WriteNumberValue(N2o.Value);
            }
            if (Optional.IsDefined(N2oUnit))
            {
                writer.WritePropertyName("n2oUnit"u8);
                writer.WriteObjectValue(N2oUnit, options);
            }
            if (Optional.IsDefined(OtherGhgs))
            {
                writer.WritePropertyName("otherGhgs"u8);
                writer.WriteNumberValue(OtherGhgs.Value);
            }
            if (Optional.IsDefined(OtherGhgsUnit))
            {
                writer.WritePropertyName("otherGhgsUnit"u8);
                writer.WriteObjectValue(OtherGhgsUnit, options);
            }
            if (Optional.IsDefined(Pfcs))
            {
                writer.WritePropertyName("pfcs"u8);
                writer.WriteNumberValue(Pfcs.Value);
            }
            if (Optional.IsDefined(PfcsUnit))
            {
                writer.WritePropertyName("pfcsUnit"u8);
                writer.WriteObjectValue(PfcsUnit, options);
            }
            if (Optional.IsDefined(Sf6))
            {
                writer.WritePropertyName("sf6"u8);
                writer.WriteNumberValue(Sf6.Value);
            }
            if (Optional.IsDefined(Sf6Unit))
            {
                writer.WritePropertyName("sf6Unit"u8);
                writer.WriteObjectValue(Sf6Unit, options);
            }
            if (Optional.IsDefined(Subtype))
            {
                writer.WritePropertyName("subtype"u8);
                writer.WriteStringValue(Subtype);
            }
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Type);
            }
            if (Optional.IsDefined(Unit))
            {
                writer.WritePropertyName("unit"u8);
                writer.WriteObjectValue(Unit, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EmissionFactor IJsonModel<EmissionFactor>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EmissionFactor>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EmissionFactor)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEmissionFactor(document.RootElement, options);
        }

        internal static EmissionFactor DeserializeEmissionFactor(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string entityName = default;
            LookupField factorLibrary = default;
            double? ch4 = default;
            LookupField ch4Unit = default;
            double? co2 = default;
            LookupField co2Unit = default;
            double? co2e = default;
            LookupField co2eUnit = default;
            string documentationReference = default;
            Guid emissionFactorId = default;
            Guid id = default;
            double? hfcs = default;
            LookupField hfcsUnit = default;
            bool? isBiofuel = default;
            string name = default;
            double? nf3 = default;
            LookupField nf3Unit = default;
            double? n2o = default;
            LookupField n2oUnit = default;
            double? otherGhgs = default;
            LookupField otherGhgsUnit = default;
            double? pfcs = default;
            LookupField pfcsUnit = default;
            double? sf6 = default;
            LookupField sf6Unit = default;
            string subtype = default;
            string type = default;
            LookupField unit = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("entityName"u8))
                {
                    entityName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("factorLibrary"u8))
                {
                    factorLibrary = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("ch4"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ch4 = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("ch4Unit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ch4Unit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("co2"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    co2 = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("co2Unit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    co2Unit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("co2e"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    co2e = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("co2eUnit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    co2eUnit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("documentationReference"u8))
                {
                    documentationReference = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("emissionFactorId"u8))
                {
                    emissionFactorId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("hfcs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hfcs = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("hfcsUnit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hfcsUnit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("isBiofuel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isBiofuel = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nf3"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nf3 = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("nf3Unit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nf3Unit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("n2o"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    n2o = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("n2oUnit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    n2oUnit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("otherGhgs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    otherGhgs = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("otherGhgsUnit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    otherGhgsUnit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("pfcs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pfcs = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pfcsUnit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pfcsUnit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("sf6"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sf6 = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("sf6Unit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sf6Unit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("subtype"u8))
                {
                    subtype = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unit = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EmissionFactor(
                entityName,
                factorLibrary,
                ch4,
                ch4Unit,
                co2,
                co2Unit,
                co2e,
                co2eUnit,
                documentationReference,
                emissionFactorId,
                id,
                hfcs,
                hfcsUnit,
                isBiofuel,
                name,
                nf3,
                nf3Unit,
                n2o,
                n2oUnit,
                otherGhgs,
                otherGhgsUnit,
                pfcs,
                pfcsUnit,
                sf6,
                sf6Unit,
                subtype,
                type,
                unit,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EmissionFactor>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EmissionFactor>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(EmissionFactor)} does not support writing '{options.Format}' format.");
            }
        }

        EmissionFactor IPersistableModel<EmissionFactor>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EmissionFactor>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEmissionFactor(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EmissionFactor)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EmissionFactor>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static EmissionFactor FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeEmissionFactor(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
