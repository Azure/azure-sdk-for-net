// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.SustainabilityServices
{
    public partial class CalculationModel : IUtf8JsonSerializable, IJsonModel<CalculationModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CalculationModel>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CalculationModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CalculationModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CalculationModel)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("entityName"u8);
            writer.WriteStringValue(EntityName);
            if (options.Format != "W")
            {
                writer.WritePropertyName("calculationModelId"u8);
                writer.WriteStringValue(CalculationModelId);
            }
            if (Optional.IsDefined(CalculationFlowJson))
            {
                writer.WritePropertyName("calculationFlowJson"u8);
                writer.WriteStringValue(CalculationFlowJson);
            }
            if (Optional.IsDefined(CalculationMethod))
            {
                writer.WritePropertyName("calculationMethod"u8);
                writer.WriteStringValue(CalculationMethod);
            }
            if (Optional.IsDefined(DataDefinitionId))
            {
                writer.WritePropertyName("dataDefinitionId"u8);
                writer.WriteObjectValue(DataDefinitionId, options);
            }
            if (Optional.IsDefined(DocumentationReference))
            {
                writer.WritePropertyName("documentationReference"u8);
                writer.WriteStringValue(DocumentationReference);
            }
            writer.WritePropertyName("emissionCalculationId"u8);
            writer.WriteStringValue(EmissionCalculationId);
            writer.WritePropertyName("emissionSource"u8);
            writer.WriteObjectValue(EmissionSource, options);
            if (Optional.IsDefined(ModelJsonVersion))
            {
                writer.WritePropertyName("modelJsonVersion"u8);
                writer.WriteStringValue(ModelJsonVersion);
            }
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(Sustainabilitymodule))
            {
                writer.WritePropertyName("sustainabilitymodule"u8);
                writer.WriteObjectValue(Sustainabilitymodule, options);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        CalculationModel IJsonModel<CalculationModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CalculationModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CalculationModel)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCalculationModel(document.RootElement, options);
        }

        internal static CalculationModel DeserializeCalculationModel(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string entityName = default;
            Guid calculationModelId = default;
            string calculationFlowJson = default;
            string calculationMethod = default;
            LookupField dataDefinitionId = default;
            string documentationReference = default;
            Guid emissionCalculationId = default;
            LookupField emissionSource = default;
            string modelJsonVersion = default;
            string name = default;
            LookupField sustainabilitymodule = default;
            string type = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("entityName"u8))
                {
                    entityName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("calculationModelId"u8))
                {
                    calculationModelId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("calculationFlowJson"u8))
                {
                    calculationFlowJson = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("calculationMethod"u8))
                {
                    calculationMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataDefinitionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataDefinitionId = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("documentationReference"u8))
                {
                    documentationReference = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("emissionCalculationId"u8))
                {
                    emissionCalculationId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("emissionSource"u8))
                {
                    emissionSource = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("modelJsonVersion"u8))
                {
                    modelJsonVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sustainabilitymodule"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sustainabilitymodule = LookupField.DeserializeLookupField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CalculationModel(
                entityName,
                calculationModelId,
                calculationFlowJson,
                calculationMethod,
                dataDefinitionId,
                documentationReference,
                emissionCalculationId,
                emissionSource,
                modelJsonVersion,
                name,
                sustainabilitymodule,
                type,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CalculationModel>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CalculationModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CalculationModel)} does not support writing '{options.Format}' format.");
            }
        }

        CalculationModel IPersistableModel<CalculationModel>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CalculationModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeCalculationModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CalculationModel)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CalculationModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static CalculationModel FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeCalculationModel(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
