// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.SustainabilityServices
{
    // Data plane generated client.
    /// <summary> The SustainabilityService service client. </summary>
    public partial class SustainabilityServiceClient
    {
        private static readonly string[] AuthorizationScopes = Array.Empty<string>();
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of SustainabilityServiceClient for mocking. </summary>
        protected SustainabilityServiceClient()
        {
        }

        /// <summary> Initializes a new instance of SustainabilityServiceClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SustainabilityServiceClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new SustainabilityServiceClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SustainabilityServiceClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SustainabilityServiceClient(Uri endpoint, TokenCredential credential, SustainabilityServiceClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new SustainabilityServiceClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Gets factor library by id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorLibraryAsync(Guid,CancellationToken)']/*" />
        public virtual async Task<Response<FactorLibrary>> GetFactorLibraryAsync(Guid factorLibraryId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetFactorLibraryAsync(factorLibraryId, context).ConfigureAwait(false);
            return Response.FromValue(FactorLibrary.FromResponse(response), response);
        }

        /// <summary> Gets factor library by id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorLibrary(Guid,CancellationToken)']/*" />
        public virtual Response<FactorLibrary> GetFactorLibrary(Guid factorLibraryId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetFactorLibrary(factorLibraryId, context);
            return Response.FromValue(FactorLibrary.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets factor library by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFactorLibraryAsync(Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorLibraryAsync(Guid,RequestContext)']/*" />
        public virtual async Task<Response> GetFactorLibraryAsync(Guid factorLibraryId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetFactorLibrary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFactorLibraryRequest(factorLibraryId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets factor library by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFactorLibrary(Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorLibrary(Guid,RequestContext)']/*" />
        public virtual Response GetFactorLibrary(Guid factorLibraryId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetFactorLibrary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFactorLibraryRequest(factorLibraryId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets estimation factor by id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="estimationFactorId"> Estimation factor ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEstimationFactorAsync(Guid,Guid,CancellationToken)']/*" />
        public virtual async Task<Response<EstimationFactor>> GetEstimationFactorAsync(Guid factorLibraryId, Guid estimationFactorId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetEstimationFactorAsync(factorLibraryId, estimationFactorId, context).ConfigureAwait(false);
            return Response.FromValue(EstimationFactor.FromResponse(response), response);
        }

        /// <summary> Gets estimation factor by id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="estimationFactorId"> Estimation factor ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEstimationFactor(Guid,Guid,CancellationToken)']/*" />
        public virtual Response<EstimationFactor> GetEstimationFactor(Guid factorLibraryId, Guid estimationFactorId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetEstimationFactor(factorLibraryId, estimationFactorId, context);
            return Response.FromValue(EstimationFactor.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets estimation factor by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEstimationFactorAsync(Guid,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="estimationFactorId"> Estimation factor ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEstimationFactorAsync(Guid,Guid,RequestContext)']/*" />
        public virtual async Task<Response> GetEstimationFactorAsync(Guid factorLibraryId, Guid estimationFactorId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetEstimationFactor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEstimationFactorRequest(factorLibraryId, estimationFactorId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets estimation factor by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEstimationFactor(Guid,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="estimationFactorId"> Estimation factor ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEstimationFactor(Guid,Guid,RequestContext)']/*" />
        public virtual Response GetEstimationFactor(Guid factorLibraryId, Guid estimationFactorId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetEstimationFactor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEstimationFactorRequest(factorLibraryId, estimationFactorId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets emission factor by id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="emissionFactorId"> Emission factor ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEmissionFactorAsync(Guid,Guid,CancellationToken)']/*" />
        public virtual async Task<Response<EmissionFactor>> GetEmissionFactorAsync(Guid factorLibraryId, Guid emissionFactorId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetEmissionFactorAsync(factorLibraryId, emissionFactorId, context).ConfigureAwait(false);
            return Response.FromValue(EmissionFactor.FromResponse(response), response);
        }

        /// <summary> Gets emission factor by id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="emissionFactorId"> Emission factor ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEmissionFactor(Guid,Guid,CancellationToken)']/*" />
        public virtual Response<EmissionFactor> GetEmissionFactor(Guid factorLibraryId, Guid emissionFactorId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetEmissionFactor(factorLibraryId, emissionFactorId, context);
            return Response.FromValue(EmissionFactor.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets emission factor by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEmissionFactorAsync(Guid,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="emissionFactorId"> Emission factor ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEmissionFactorAsync(Guid,Guid,RequestContext)']/*" />
        public virtual async Task<Response> GetEmissionFactorAsync(Guid factorLibraryId, Guid emissionFactorId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetEmissionFactor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEmissionFactorRequest(factorLibraryId, emissionFactorId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets emission factor by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEmissionFactor(Guid,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="emissionFactorId"> Emission factor ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEmissionFactor(Guid,Guid,RequestContext)']/*" />
        public virtual Response GetEmissionFactor(Guid factorLibraryId, Guid emissionFactorId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetEmissionFactor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEmissionFactorRequest(factorLibraryId, emissionFactorId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets factor mapping by id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="factorMappingId"> Factor mapping id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorMappingAsync(Guid,Guid,CancellationToken)']/*" />
        public virtual async Task<Response<FactorMapping>> GetFactorMappingAsync(Guid factorLibraryId, Guid factorMappingId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetFactorMappingAsync(factorLibraryId, factorMappingId, context).ConfigureAwait(false);
            return Response.FromValue(FactorMapping.FromResponse(response), response);
        }

        /// <summary> Gets factor mapping by id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="factorMappingId"> Factor mapping id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorMapping(Guid,Guid,CancellationToken)']/*" />
        public virtual Response<FactorMapping> GetFactorMapping(Guid factorLibraryId, Guid factorMappingId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetFactorMapping(factorLibraryId, factorMappingId, context);
            return Response.FromValue(FactorMapping.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets factor mapping by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFactorMappingAsync(Guid,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="factorMappingId"> Factor mapping id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorMappingAsync(Guid,Guid,RequestContext)']/*" />
        public virtual async Task<Response> GetFactorMappingAsync(Guid factorLibraryId, Guid factorMappingId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetFactorMapping");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFactorMappingRequest(factorLibraryId, factorMappingId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets factor mapping by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFactorMapping(Guid,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="factorMappingId"> Factor mapping id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorMapping(Guid,Guid,RequestContext)']/*" />
        public virtual Response GetFactorMapping(Guid factorLibraryId, Guid factorMappingId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetFactorMapping");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFactorMappingRequest(factorLibraryId, factorMappingId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets calculation model by id. </summary>
        /// <param name="calculationModelId"> Calculation model ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetCalculationModelAsync(Guid,CancellationToken)']/*" />
        public virtual async Task<Response<CalculationModel>> GetCalculationModelAsync(Guid calculationModelId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetCalculationModelAsync(calculationModelId, context).ConfigureAwait(false);
            return Response.FromValue(CalculationModel.FromResponse(response), response);
        }

        /// <summary> Gets calculation model by id. </summary>
        /// <param name="calculationModelId"> Calculation model ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetCalculationModel(Guid,CancellationToken)']/*" />
        public virtual Response<CalculationModel> GetCalculationModel(Guid calculationModelId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetCalculationModel(calculationModelId, context);
            return Response.FromValue(CalculationModel.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets calculation model by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetCalculationModelAsync(Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="calculationModelId"> Calculation model ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetCalculationModelAsync(Guid,RequestContext)']/*" />
        public virtual async Task<Response> GetCalculationModelAsync(Guid calculationModelId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetCalculationModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCalculationModelRequest(calculationModelId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets calculation model by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetCalculationModel(Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="calculationModelId"> Calculation model ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetCalculationModel(Guid,RequestContext)']/*" />
        public virtual Response GetCalculationModel(Guid calculationModelId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetCalculationModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCalculationModelRequest(calculationModelId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets reference data entity record by id. </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="id"> Record ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="entityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetReferenceEntityDataAsync(string,Guid,CancellationToken)']/*" />
        public virtual async Task<Response<EntityRecord>> GetReferenceEntityDataAsync(string entityName, Guid id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(entityName, nameof(entityName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetReferenceEntityDataAsync(entityName, id, context).ConfigureAwait(false);
            return Response.FromValue(EntityRecord.FromResponse(response), response);
        }

        /// <summary> Gets reference data entity record by id. </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="id"> Record ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="entityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetReferenceEntityData(string,Guid,CancellationToken)']/*" />
        public virtual Response<EntityRecord> GetReferenceEntityData(string entityName, Guid id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(entityName, nameof(entityName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetReferenceEntityData(entityName, id, context);
            return Response.FromValue(EntityRecord.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets reference data entity record by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetReferenceEntityDataAsync(string,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="id"> Record ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="entityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetReferenceEntityDataAsync(string,Guid,RequestContext)']/*" />
        public virtual async Task<Response> GetReferenceEntityDataAsync(string entityName, Guid id, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(entityName, nameof(entityName));

            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetReferenceEntityData");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReferenceEntityDataRequest(entityName, id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets reference data entity record by id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetReferenceEntityData(string,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="id"> Record ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="entityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetReferenceEntityData(string,Guid,RequestContext)']/*" />
        public virtual Response GetReferenceEntityData(string entityName, Guid id, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(entityName, nameof(entityName));

            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.GetReferenceEntityData");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReferenceEntityDataRequest(entityName, id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Calculate emissions. </summary>
        /// <param name="calculationModelId"> Calculation model id to be used. Use listCalculationModels API to get the list of all calculation models and choose the appropriate model based on the usecase. </param>
        /// <param name="activities"> List of activities on which the calculation is to be performed. </param>
        /// <param name="timeStamp"> Time stamp. </param>
        /// <param name="arVersion"> Assessment report version to be used in the calculation. If no arVersion is specified in the payload, AR4 version is the default version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="activities"/> is null. </exception>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='CalculateAsync(Guid,IEnumerable{EmissionActivity},DateTimeOffset?,ArVersions?,CancellationToken)']/*" />
        public virtual async Task<Response<EmissionCalculationResult>> CalculateAsync(Guid calculationModelId, IEnumerable<EmissionActivity> activities, DateTimeOffset? timeStamp = null, ArVersions? arVersion = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(activities, nameof(activities));

            CalculateRequest calculateRequest = new CalculateRequest(timeStamp, calculationModelId, arVersion, activities.ToList(), null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CalculateAsync(calculateRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(EmissionCalculationResult.FromResponse(response), response);
        }

        /// <summary> Calculate emissions. </summary>
        /// <param name="calculationModelId"> Calculation model id to be used. Use listCalculationModels API to get the list of all calculation models and choose the appropriate model based on the usecase. </param>
        /// <param name="activities"> List of activities on which the calculation is to be performed. </param>
        /// <param name="timeStamp"> Time stamp. </param>
        /// <param name="arVersion"> Assessment report version to be used in the calculation. If no arVersion is specified in the payload, AR4 version is the default version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="activities"/> is null. </exception>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='Calculate(Guid,IEnumerable{EmissionActivity},DateTimeOffset?,ArVersions?,CancellationToken)']/*" />
        public virtual Response<EmissionCalculationResult> Calculate(Guid calculationModelId, IEnumerable<EmissionActivity> activities, DateTimeOffset? timeStamp = null, ArVersions? arVersion = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(activities, nameof(activities));

            CalculateRequest calculateRequest = new CalculateRequest(timeStamp, calculationModelId, arVersion, activities.ToList(), null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Calculate(calculateRequest.ToRequestContent(), context);
            return Response.FromValue(EmissionCalculationResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Calculate emissions.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CalculateAsync(Guid,IEnumerable{EmissionActivity},DateTimeOffset?,ArVersions?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='CalculateAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CalculateAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.Calculate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCalculateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Calculate emissions.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Calculate(Guid,IEnumerable{EmissionActivity},DateTimeOffset?,ArVersions?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='Calculate(RequestContent,RequestContext)']/*" />
        public virtual Response Calculate(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SustainabilityServiceClient.Calculate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCalculateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists factor libraries. </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorLibrariesAsync(int?,CancellationToken)']/*" />
        public virtual AsyncPageable<FactorLibrary> GetFactorLibrariesAsync(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetFactorLibrariesRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetFactorLibrariesNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => FactorLibrary.DeserializeFactorLibrary(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetFactorLibraries", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists factor libraries. </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorLibraries(int?,CancellationToken)']/*" />
        public virtual Pageable<FactorLibrary> GetFactorLibraries(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetFactorLibrariesRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetFactorLibrariesNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => FactorLibrary.DeserializeFactorLibrary(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetFactorLibraries", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists factor libraries.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFactorLibrariesAsync(int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorLibrariesAsync(int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetFactorLibrariesAsync(int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetFactorLibrariesRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetFactorLibrariesNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetFactorLibraries", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists factor libraries.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFactorLibraries(int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorLibraries(int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetFactorLibraries(int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetFactorLibrariesRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetFactorLibrariesNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetFactorLibraries", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists estimation factors within the given factor library id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEstimationFactorsByFactorLibraryAsync(Guid,int?,CancellationToken)']/*" />
        public virtual AsyncPageable<EstimationFactor> GetEstimationFactorsByFactorLibraryAsync(Guid factorLibraryId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetEstimationFactorsByFactorLibraryRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetEstimationFactorsByFactorLibraryNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => EstimationFactor.DeserializeEstimationFactor(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetEstimationFactorsByFactorLibrary", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists estimation factors within the given factor library id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEstimationFactorsByFactorLibrary(Guid,int?,CancellationToken)']/*" />
        public virtual Pageable<EstimationFactor> GetEstimationFactorsByFactorLibrary(Guid factorLibraryId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetEstimationFactorsByFactorLibraryRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetEstimationFactorsByFactorLibraryNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => EstimationFactor.DeserializeEstimationFactor(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetEstimationFactorsByFactorLibrary", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists estimation factors within the given factor library id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEstimationFactorsByFactorLibraryAsync(Guid,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEstimationFactorsByFactorLibraryAsync(Guid,int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetEstimationFactorsByFactorLibraryAsync(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetEstimationFactorsByFactorLibraryRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetEstimationFactorsByFactorLibraryNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetEstimationFactorsByFactorLibrary", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists estimation factors within the given factor library id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEstimationFactorsByFactorLibrary(Guid,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEstimationFactorsByFactorLibrary(Guid,int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetEstimationFactorsByFactorLibrary(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetEstimationFactorsByFactorLibraryRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetEstimationFactorsByFactorLibraryNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetEstimationFactorsByFactorLibrary", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists emission factors within the given factor library id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEmissionFactorsByFactorLibraryAsync(Guid,int?,CancellationToken)']/*" />
        public virtual AsyncPageable<EmissionFactor> GetEmissionFactorsByFactorLibraryAsync(Guid factorLibraryId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetEmissionFactorsByFactorLibraryRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetEmissionFactorsByFactorLibraryNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => EmissionFactor.DeserializeEmissionFactor(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetEmissionFactorsByFactorLibrary", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists emission factors within the given factor library id. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEmissionFactorsByFactorLibrary(Guid,int?,CancellationToken)']/*" />
        public virtual Pageable<EmissionFactor> GetEmissionFactorsByFactorLibrary(Guid factorLibraryId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetEmissionFactorsByFactorLibraryRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetEmissionFactorsByFactorLibraryNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => EmissionFactor.DeserializeEmissionFactor(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetEmissionFactorsByFactorLibrary", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists emission factors within the given factor library id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEmissionFactorsByFactorLibraryAsync(Guid,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEmissionFactorsByFactorLibraryAsync(Guid,int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetEmissionFactorsByFactorLibraryAsync(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetEmissionFactorsByFactorLibraryRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetEmissionFactorsByFactorLibraryNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetEmissionFactorsByFactorLibrary", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists emission factors within the given factor library id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEmissionFactorsByFactorLibrary(Guid,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetEmissionFactorsByFactorLibrary(Guid,int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetEmissionFactorsByFactorLibrary(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetEmissionFactorsByFactorLibraryRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetEmissionFactorsByFactorLibraryNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetEmissionFactorsByFactorLibrary", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists factor mappings belonging to the factor library. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorMappingsAsync(Guid,int?,CancellationToken)']/*" />
        public virtual AsyncPageable<FactorMapping> GetFactorMappingsAsync(Guid factorLibraryId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetFactorMappingsRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetFactorMappingsNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => FactorMapping.DeserializeFactorMapping(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetFactorMappings", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists factor mappings belonging to the factor library. </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorMappings(Guid,int?,CancellationToken)']/*" />
        public virtual Pageable<FactorMapping> GetFactorMappings(Guid factorLibraryId, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetFactorMappingsRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetFactorMappingsNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => FactorMapping.DeserializeFactorMapping(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetFactorMappings", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists factor mappings belonging to the factor library.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFactorMappingsAsync(Guid,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorMappingsAsync(Guid,int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetFactorMappingsAsync(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetFactorMappingsRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetFactorMappingsNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetFactorMappings", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists factor mappings belonging to the factor library.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFactorMappings(Guid,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="factorLibraryId"> Factor library id. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetFactorMappings(Guid,int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetFactorMappings(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetFactorMappingsRequest(factorLibraryId, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetFactorMappingsNextPageRequest(nextLink, factorLibraryId, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetFactorMappings", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists calculation models for the given activity source. </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetCalculationModelsAsync(int?,CancellationToken)']/*" />
        public virtual AsyncPageable<CalculationModel> GetCalculationModelsAsync(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetCalculationModelsRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetCalculationModelsNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => CalculationModel.DeserializeCalculationModel(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetCalculationModels", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists calculation models for the given activity source. </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetCalculationModels(int?,CancellationToken)']/*" />
        public virtual Pageable<CalculationModel> GetCalculationModels(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetCalculationModelsRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetCalculationModelsNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => CalculationModel.DeserializeCalculationModel(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetCalculationModels", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists calculation models for the given activity source.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetCalculationModelsAsync(int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetCalculationModelsAsync(int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetCalculationModelsAsync(int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetCalculationModelsRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetCalculationModelsNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetCalculationModels", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists calculation models for the given activity source.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetCalculationModels(int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetCalculationModels(int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetCalculationModels(int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetCalculationModelsRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetCalculationModelsNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetCalculationModels", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists reference data entities. </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetReferenceEntitiesAsync(int?,CancellationToken)']/*" />
        public virtual AsyncPageable<ReferenceDataEntities> GetReferenceEntitiesAsync(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetReferenceEntitiesRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetReferenceEntitiesNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => ReferenceDataEntities.DeserializeReferenceDataEntities(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetReferenceEntities", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Lists reference data entities. </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetReferenceEntities(int?,CancellationToken)']/*" />
        public virtual Pageable<ReferenceDataEntities> GetReferenceEntities(int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetReferenceEntitiesRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetReferenceEntitiesNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => ReferenceDataEntities.DeserializeReferenceDataEntities(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetReferenceEntities", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists reference data entities.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetReferenceEntitiesAsync(int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetReferenceEntitiesAsync(int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetReferenceEntitiesAsync(int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetReferenceEntitiesRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetReferenceEntitiesNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetReferenceEntities", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Lists reference data entities.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetReferenceEntities(int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetReferenceEntities(int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetReferenceEntities(int? maxpagesize, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetReferenceEntitiesRequest(pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetReferenceEntitiesNextPageRequest(nextLink, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetReferenceEntities", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Fetch records of the given reference data entity. </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="entityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetAllReferenceEntityDataAsync(string,int?,CancellationToken)']/*" />
        public virtual AsyncPageable<EntityRecord> GetAllReferenceEntityDataAsync(string entityName, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(entityName, nameof(entityName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAllReferenceEntityDataRequest(entityName, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAllReferenceEntityDataNextPageRequest(nextLink, entityName, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => EntityRecord.DeserializeEntityRecord(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetAllReferenceEntityData", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> Fetch records of the given reference data entity. </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="entityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetAllReferenceEntityData(string,int?,CancellationToken)']/*" />
        public virtual Pageable<EntityRecord> GetAllReferenceEntityData(string entityName, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(entityName, nameof(entityName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAllReferenceEntityDataRequest(entityName, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAllReferenceEntityDataNextPageRequest(nextLink, entityName, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => EntityRecord.DeserializeEntityRecord(e), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetAllReferenceEntityData", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Fetch records of the given reference data entity.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAllReferenceEntityDataAsync(string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="entityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetAllReferenceEntityDataAsync(string,int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetAllReferenceEntityDataAsync(string entityName, int? maxpagesize, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(entityName, nameof(entityName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAllReferenceEntityDataRequest(entityName, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAllReferenceEntityDataNextPageRequest(nextLink, entityName, pageSizeHint, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetAllReferenceEntityData", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] Fetch records of the given reference data entity.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAllReferenceEntityData(string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityName"> Logical name of the entity. Example: fueltype. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="entityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SustainabilityServiceClient.xml" path="doc/members/member[@name='GetAllReferenceEntityData(string,int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetAllReferenceEntityData(string entityName, int? maxpagesize, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(entityName, nameof(entityName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAllReferenceEntityDataRequest(entityName, pageSizeHint, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAllReferenceEntityDataNextPageRequest(nextLink, entityName, pageSizeHint, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SustainabilityServiceClient.GetAllReferenceEntityData", "value", "nextLink", maxpagesize, context);
        }

        internal HttpMessage CreateGetFactorLibrariesRequest(int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/factor-libraries", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFactorLibraryRequest(Guid factorLibraryId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/factor-libraries/", false);
            uri.AppendPath(factorLibraryId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetEstimationFactorsByFactorLibraryRequest(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/factor-libraries/", false);
            uri.AppendPath(factorLibraryId, true);
            uri.AppendPath("/estimation-factors", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetEstimationFactorRequest(Guid factorLibraryId, Guid estimationFactorId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/factor-libraries/", false);
            uri.AppendPath(factorLibraryId, true);
            uri.AppendPath("/estimation-factors/", false);
            uri.AppendPath(estimationFactorId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetEmissionFactorsByFactorLibraryRequest(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/factor-libraries/", false);
            uri.AppendPath(factorLibraryId, true);
            uri.AppendPath("/emission-factors", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetEmissionFactorRequest(Guid factorLibraryId, Guid emissionFactorId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/factor-libraries/", false);
            uri.AppendPath(factorLibraryId, true);
            uri.AppendPath("/emission-factors/", false);
            uri.AppendPath(emissionFactorId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFactorMappingsRequest(Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/factor-libraries/", false);
            uri.AppendPath(factorLibraryId, true);
            uri.AppendPath("/factor-mappings", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFactorMappingRequest(Guid factorLibraryId, Guid factorMappingId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/factor-libraries/", false);
            uri.AppendPath(factorLibraryId, true);
            uri.AppendPath("/factor-mappings/", false);
            uri.AppendPath(factorMappingId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCalculationModelsRequest(int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/calculation-models", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCalculationModelRequest(Guid calculationModelId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/calculation-models/", false);
            uri.AppendPath(calculationModelId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetReferenceEntitiesRequest(int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/reference-data", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllReferenceEntityDataRequest(string entityName, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/reference-data/", false);
            uri.AppendPath(entityName, true);
            uri.AppendPath("/entity-records", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetReferenceEntityDataRequest(string entityName, Guid id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/reference-data/", false);
            uri.AppendPath(entityName, true);
            uri.AppendPath("/entity-records/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCalculateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/activities:calculate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetFactorLibrariesNextPageRequest(string nextLink, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetEstimationFactorsByFactorLibraryNextPageRequest(string nextLink, Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetEmissionFactorsByFactorLibraryNextPageRequest(string nextLink, Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFactorMappingsNextPageRequest(string nextLink, Guid factorLibraryId, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCalculationModelsNextPageRequest(string nextLink, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetReferenceEntitiesNextPageRequest(string nextLink, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllReferenceEntityDataNextPageRequest(string nextLink, string entityName, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
