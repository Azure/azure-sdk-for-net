// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.SustainabilityServices
{
    /// <summary> The CalculateRequest. </summary>
    internal partial class CalculateRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CalculateRequest"/>. </summary>
        /// <param name="calculationModelId"> Calculation model id to be used. Use listCalculationModels API to get the list of all calculation models and choose the appropriate model based on the usecase. </param>
        /// <param name="activities"> List of activities on which the calculation is to be performed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="activities"/> is null. </exception>
        internal CalculateRequest(Guid calculationModelId, IEnumerable<EmissionActivity> activities)
        {
            Argument.AssertNotNull(activities, nameof(activities));

            CalculationModelId = calculationModelId;
            Activities = activities.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="CalculateRequest"/>. </summary>
        /// <param name="timeStamp"> Time stamp. </param>
        /// <param name="calculationModelId"> Calculation model id to be used. Use listCalculationModels API to get the list of all calculation models and choose the appropriate model based on the usecase. </param>
        /// <param name="arVersion"> Assessment report version to be used in the calculation. If no arVersion is specified in the payload, AR4 version is the default version. </param>
        /// <param name="activities"> List of activities on which the calculation is to be performed. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CalculateRequest(DateTimeOffset? timeStamp, Guid calculationModelId, ArVersions? arVersion, IReadOnlyList<EmissionActivity> activities, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TimeStamp = timeStamp;
            CalculationModelId = calculationModelId;
            ArVersion = arVersion;
            Activities = activities;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CalculateRequest"/> for deserialization. </summary>
        internal CalculateRequest()
        {
        }

        /// <summary> Time stamp. </summary>
        public DateTimeOffset? TimeStamp { get; }
        /// <summary> Calculation model id to be used. Use listCalculationModels API to get the list of all calculation models and choose the appropriate model based on the usecase. </summary>
        public Guid CalculationModelId { get; }
        /// <summary> Assessment report version to be used in the calculation. If no arVersion is specified in the payload, AR4 version is the default version. </summary>
        public ArVersions? ArVersion { get; }
        /// <summary> List of activities on which the calculation is to be performed. </summary>
        public IReadOnlyList<EmissionActivity> Activities { get; }
    }
}
