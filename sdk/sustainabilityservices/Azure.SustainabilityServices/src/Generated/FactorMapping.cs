// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SustainabilityServices
{
    /// <summary> Factor mapping. </summary>
    public partial class FactorMapping
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FactorMapping"/>. </summary>
        /// <param name="factorLibrary"> Factor library which this mapping belongs to. </param>
        /// <param name="name"> Name. </param>
        /// <param name="factor"> Factor associated with the factor mapping. </param>
        /// <param name="referenceData1"> Reference data 1. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="factorLibrary"/>, <paramref name="name"/>, <paramref name="factor"/> or <paramref name="referenceData1"/> is null. </exception>
        internal FactorMapping(LookupField factorLibrary, string name, LookupField factor, LookupField referenceData1)
        {
            Argument.AssertNotNull(factorLibrary, nameof(factorLibrary));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(factor, nameof(factor));
            Argument.AssertNotNull(referenceData1, nameof(referenceData1));

            FactorLibrary = factorLibrary;
            Name = name;
            Factor = factor;
            ReferenceData1 = referenceData1;
        }

        /// <summary> Initializes a new instance of <see cref="FactorMapping"/>. </summary>
        /// <param name="factorMappingId"> Factor mapping id. </param>
        /// <param name="factorLibrary"> Factor library which this mapping belongs to. </param>
        /// <param name="name"> Name. </param>
        /// <param name="factor"> Factor associated with the factor mapping. </param>
        /// <param name="referenceData1"> Reference data 1. </param>
        /// <param name="referenceData2"> Reference data 2. </param>
        /// <param name="referenceData3"> Reference data 3. </param>
        /// <param name="referenceData4"> Reference data 4. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FactorMapping(Guid factorMappingId, LookupField factorLibrary, string name, LookupField factor, LookupField referenceData1, LookupField referenceData2, LookupField referenceData3, LookupField referenceData4, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FactorMappingId = factorMappingId;
            FactorLibrary = factorLibrary;
            Name = name;
            Factor = factor;
            ReferenceData1 = referenceData1;
            ReferenceData2 = referenceData2;
            ReferenceData3 = referenceData3;
            ReferenceData4 = referenceData4;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="FactorMapping"/> for deserialization. </summary>
        internal FactorMapping()
        {
        }

        /// <summary> Factor mapping id. </summary>
        public Guid FactorMappingId { get; }
        /// <summary> Factor library which this mapping belongs to. </summary>
        public LookupField FactorLibrary { get; }
        /// <summary> Name. </summary>
        public string Name { get; }
        /// <summary> Factor associated with the factor mapping. </summary>
        public LookupField Factor { get; }
        /// <summary> Reference data 1. </summary>
        public LookupField ReferenceData1 { get; }
        /// <summary> Reference data 2. </summary>
        public LookupField ReferenceData2 { get; }
        /// <summary> Reference data 3. </summary>
        public LookupField ReferenceData3 { get; }
        /// <summary> Reference data 4. </summary>
        public LookupField ReferenceData4 { get; }
    }
}
