// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SustainabilityServices
{
    /// <summary> Lookup details. </summary>
    public partial class LookupField
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LookupField"/>. </summary>
        /// <param name="id"> Unique ID of the referenced field value. </param>
        /// <param name="logicalName"> Schema name of the referenced table. </param>
        /// <param name="name"> Display name of the referenced field value. </param>
        /// <param name="keyAttributes"> Key attributes of the referenced field. </param>
        /// <param name="rowVersion"> Row version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logicalName"/>, <paramref name="name"/>, <paramref name="keyAttributes"/> or <paramref name="rowVersion"/> is null. </exception>
        internal LookupField(Guid id, string logicalName, string name, IReadOnlyDictionary<string, BinaryData> keyAttributes, string rowVersion)
        {
            Argument.AssertNotNull(logicalName, nameof(logicalName));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(keyAttributes, nameof(keyAttributes));
            Argument.AssertNotNull(rowVersion, nameof(rowVersion));

            Id = id;
            LogicalName = logicalName;
            Name = name;
            KeyAttributes = keyAttributes;
            RowVersion = rowVersion;
        }

        /// <summary> Initializes a new instance of <see cref="LookupField"/>. </summary>
        /// <param name="id"> Unique ID of the referenced field value. </param>
        /// <param name="logicalName"> Schema name of the referenced table. </param>
        /// <param name="name"> Display name of the referenced field value. </param>
        /// <param name="keyAttributes"> Key attributes of the referenced field. </param>
        /// <param name="rowVersion"> Row version. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LookupField(Guid id, string logicalName, string name, IReadOnlyDictionary<string, BinaryData> keyAttributes, string rowVersion, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            LogicalName = logicalName;
            Name = name;
            KeyAttributes = keyAttributes;
            RowVersion = rowVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LookupField"/> for deserialization. </summary>
        internal LookupField()
        {
        }

        /// <summary> Unique ID of the referenced field value. </summary>
        public Guid Id { get; }
        /// <summary> Schema name of the referenced table. </summary>
        public string LogicalName { get; }
        /// <summary> Display name of the referenced field value. </summary>
        public string Name { get; }
        /// <summary>
        /// Key attributes of the referenced field.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> KeyAttributes { get; }
        /// <summary> Row version. </summary>
        public string RowVersion { get; }
    }
}
