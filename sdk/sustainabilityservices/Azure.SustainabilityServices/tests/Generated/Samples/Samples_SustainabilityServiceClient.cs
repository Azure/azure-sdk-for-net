// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.SustainabilityServices.Samples
{
    public partial class Samples_SustainabilityServiceClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorLibrary_GetFactorLibrary_SustainabilityServiceGetFactorLibraryMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = client.GetFactorLibrary(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("factorLibraryId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("libraryType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorLibrary_GetFactorLibrary_SustainabilityServiceGetFactorLibraryMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = await client.GetFactorLibraryAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("factorLibraryId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("libraryType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorLibrary_GetFactorLibrary_SustainabilityServiceGetFactorLibraryMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<FactorLibrary> response = client.GetFactorLibrary(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorLibrary_GetFactorLibrary_SustainabilityServiceGetFactorLibraryMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<FactorLibrary> response = await client.GetFactorLibraryAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EstimationFactor_GetEstimationFactor_SustainabilityServiceGetEstimationFactorMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = client.GetEstimationFactor(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("entityName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("estimationFactorId").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("factorValue").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("rowVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EstimationFactor_GetEstimationFactor_SustainabilityServiceGetEstimationFactorMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = await client.GetEstimationFactorAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("entityName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("estimationFactorId").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("factorValue").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("unit").GetProperty("rowVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EstimationFactor_GetEstimationFactor_SustainabilityServiceGetEstimationFactorMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EstimationFactor> response = client.GetEstimationFactor(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EstimationFactor_GetEstimationFactor_SustainabilityServiceGetEstimationFactorMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EstimationFactor> response = await client.GetEstimationFactorAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EmissionFactor_GetEmissionFactor_SustainabilityServiceGetEmissionFactorMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = client.GetEmissionFactor(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("entityName").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("emissionFactorId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EmissionFactor_GetEmissionFactor_SustainabilityServiceGetEmissionFactorMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = await client.GetEmissionFactorAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("entityName").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("emissionFactorId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EmissionFactor_GetEmissionFactor_SustainabilityServiceGetEmissionFactorMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EmissionFactor> response = client.GetEmissionFactor(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EmissionFactor_GetEmissionFactor_SustainabilityServiceGetEmissionFactorMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EmissionFactor> response = await client.GetEmissionFactorAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorMapping_GetFactorMapping_SustainabilityServiceGetFactorMappingMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = client.GetFactorMapping(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("factorMappingId").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("rowVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorMapping_GetFactorMapping_SustainabilityServiceGetFactorMappingMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = await client.GetFactorMappingAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("factorMappingId").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("factor").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("referenceData1").GetProperty("rowVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorMapping_GetFactorMapping_SustainabilityServiceGetFactorMappingMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<FactorMapping> response = client.GetFactorMapping(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorMapping_GetFactorMapping_SustainabilityServiceGetFactorMappingMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<FactorMapping> response = await client.GetFactorMappingAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CalculationModel_GetCalculationModel_SustainabilityServiceGetCalculationModelMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = client.GetCalculationModel(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("entityName").ToString());
            Console.WriteLine(result.GetProperty("calculationModelId").ToString());
            Console.WriteLine(result.GetProperty("emissionCalculationId").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CalculationModel_GetCalculationModel_SustainabilityServiceGetCalculationModelMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = await client.GetCalculationModelAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("entityName").ToString());
            Console.WriteLine(result.GetProperty("calculationModelId").ToString());
            Console.WriteLine(result.GetProperty("emissionCalculationId").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("logicalName").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("keyAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("emissionSource").GetProperty("rowVersion").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CalculationModel_GetCalculationModel_SustainabilityServiceGetCalculationModelMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<CalculationModel> response = client.GetCalculationModel(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CalculationModel_GetCalculationModel_SustainabilityServiceGetCalculationModelMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<CalculationModel> response = await client.GetCalculationModelAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EntityRecord_GetReferenceEntityData_SustainabilityServiceGetReferenceEntityRecordMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = client.GetReferenceEntityData("ceh", Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EntityRecord_GetReferenceEntityData_SustainabilityServiceGetReferenceEntityRecordMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response response = await client.GetReferenceEntityDataAsync("ceh", Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EntityRecord_GetReferenceEntityData_SustainabilityServiceGetReferenceEntityRecordMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EntityRecord> response = client.GetReferenceEntityData("ceh", Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EntityRecord_GetReferenceEntityData_SustainabilityServiceGetReferenceEntityRecordMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EntityRecord> response = await client.GetReferenceEntityDataAsync("ceh", Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SustainabilityServiceClient_Calculate_SustainabilityServiceCalculateEmissionsMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                timeStamp = "2025-03-05T07:25:40.609Z",
                calculationModelId = "b7baa418-08be-430b-ae46-769cfdf91949",
                arVersion = "Custom",
                activities = new object[]
            {
new
{
id = "b7baa418-08be-430b-ae46-769cfdf91949",
activityData = new object(),
}
            },
            });
            Response response = client.Calculate(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successfulActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failedActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("excludedActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("processedActivities").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("activityId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("activityName").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("activityEmissionOutput")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("activityEmissionOutput")[0].GetProperty("emissions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SustainabilityServiceClient_Calculate_SustainabilityServiceCalculateEmissionsMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                timeStamp = "2025-03-05T07:25:40.609Z",
                calculationModelId = "b7baa418-08be-430b-ae46-769cfdf91949",
                arVersion = "Custom",
                activities = new object[]
            {
new
{
id = "b7baa418-08be-430b-ae46-769cfdf91949",
activityData = new object(),
}
            },
            });
            Response response = await client.CalculateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successfulActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failedActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("excludedActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("processedActivities").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("activityId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("activityName").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("activityEmissionOutput")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("activityEmissionOutput")[0].GetProperty("emissions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SustainabilityServiceClient_Calculate_SustainabilityServiceCalculateEmissionsMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EmissionCalculationResult> response = client.Calculate(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), new EmissionActivity[]
            {
new EmissionActivity(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), new Dictionary<string, BinaryData>())
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SustainabilityServiceClient_Calculate_SustainabilityServiceCalculateEmissionsMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EmissionCalculationResult> response = await client.CalculateAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), new EmissionActivity[]
            {
new EmissionActivity(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), new Dictionary<string, BinaryData>())
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SustainabilityServiceClient_Calculate_SustainabilityServiceCalculateEmissionsMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                calculationModelId = "b7baa418-08be-430b-ae46-769cfdf91949",
                activities = new object[]
            {
new
{
id = "b7baa418-08be-430b-ae46-769cfdf91949",
activityData = new object(),
}
            },
            });
            Response response = client.Calculate(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successfulActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failedActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("excludedActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("processedActivities").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("activityId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("activityName").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("activityEmissionOutput")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("activityEmissionOutput")[0].GetProperty("emissions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SustainabilityServiceClient_Calculate_SustainabilityServiceCalculateEmissionsMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                calculationModelId = "b7baa418-08be-430b-ae46-769cfdf91949",
                activities = new object[]
            {
new
{
id = "b7baa418-08be-430b-ae46-769cfdf91949",
activityData = new object(),
}
            },
            });
            Response response = await client.CalculateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successfulActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failedActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("excludedActivities").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("processedActivities").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("activityId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("activityName").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("activityEmissionOutput")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("activityEmissionOutput")[0].GetProperty("emissions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SustainabilityServiceClient_Calculate_SustainabilityServiceCalculateEmissionsMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EmissionCalculationResult> response = client.Calculate(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), new EmissionActivity[]
            {
new EmissionActivity(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), new Dictionary<string, BinaryData>())
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SustainabilityServiceClient_Calculate_SustainabilityServiceCalculateEmissionsMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            Response<EmissionCalculationResult> response = await client.CalculateAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), new EmissionActivity[]
            {
new EmissionActivity(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), new Dictionary<string, BinaryData>())
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorLibrary_GetFactorLibraries_SustainabilityServiceListFactorLibrariesMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetFactorLibraries(19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("factorLibraryId").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("libraryType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorLibrary_GetFactorLibraries_SustainabilityServiceListFactorLibrariesMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetFactorLibrariesAsync(19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("factorLibraryId").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("libraryType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorLibrary_GetFactorLibraries_SustainabilityServiceListFactorLibrariesMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (FactorLibrary item in client.GetFactorLibraries())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorLibrary_GetFactorLibraries_SustainabilityServiceListFactorLibrariesMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (FactorLibrary item in client.GetFactorLibrariesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorLibrary_GetFactorLibraries_SustainabilityServiceListFactorLibrariesMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetFactorLibraries(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("factorLibraryId").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("libraryType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorLibrary_GetFactorLibraries_SustainabilityServiceListFactorLibrariesMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetFactorLibrariesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("factorLibraryId").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("libraryType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorLibrary_GetFactorLibraries_SustainabilityServiceListFactorLibrariesMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (FactorLibrary item in client.GetFactorLibraries())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorLibrary_GetFactorLibraries_SustainabilityServiceListFactorLibrariesMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (FactorLibrary item in client.GetFactorLibrariesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EstimationFactor_GetEstimationFactorsByFactorLibrary_SustainabilityServiceListEstimationFactorsByFactorLibraryMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetEstimationFactorsByFactorLibrary(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), 19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("estimationFactorId").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("factorValue").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("rowVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EstimationFactor_GetEstimationFactorsByFactorLibrary_SustainabilityServiceListEstimationFactorsByFactorLibraryMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEstimationFactorsByFactorLibraryAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), 19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("estimationFactorId").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("factorValue").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factorValueUnit").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("unit").GetProperty("rowVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EstimationFactor_GetEstimationFactorsByFactorLibrary_SustainabilityServiceListEstimationFactorsByFactorLibraryMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (EstimationFactor item in client.GetEstimationFactorsByFactorLibrary(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EstimationFactor_GetEstimationFactorsByFactorLibrary_SustainabilityServiceListEstimationFactorsByFactorLibraryMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (EstimationFactor item in client.GetEstimationFactorsByFactorLibraryAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EmissionFactor_GetEmissionFactorsByFactorLibrary_SustainabilityServiceListEmissionFactorsByFactorLibraryMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetEmissionFactorsByFactorLibrary(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), 19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("emissionFactorId").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EmissionFactor_GetEmissionFactorsByFactorLibrary_SustainabilityServiceListEmissionFactorsByFactorLibraryMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEmissionFactorsByFactorLibraryAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), 19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("emissionFactorId").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EmissionFactor_GetEmissionFactorsByFactorLibrary_SustainabilityServiceListEmissionFactorsByFactorLibraryMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (EmissionFactor item in client.GetEmissionFactorsByFactorLibrary(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EmissionFactor_GetEmissionFactorsByFactorLibrary_SustainabilityServiceListEmissionFactorsByFactorLibraryMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (EmissionFactor item in client.GetEmissionFactorsByFactorLibraryAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorMapping_GetFactorMappings_SustainabilityServiceListFactorMappingsMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetFactorMappings(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), 19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("factorMappingId").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("rowVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorMapping_GetFactorMappings_SustainabilityServiceListFactorMappingsMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetFactorMappingsAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949"), 19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("factorMappingId").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factorLibrary").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("factor").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("referenceData1").GetProperty("rowVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FactorMapping_GetFactorMappings_SustainabilityServiceListFactorMappingsMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (FactorMapping item in client.GetFactorMappings(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FactorMapping_GetFactorMappings_SustainabilityServiceListFactorMappingsMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (FactorMapping item in client.GetFactorMappingsAsync(Guid.Parse("b7baa418-08be-430b-ae46-769cfdf91949")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CalculationModel_GetCalculationModels_SustainabilityServiceListCalculationModelsMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetCalculationModels(19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("calculationModelId").ToString());
                Console.WriteLine(result.GetProperty("emissionCalculationId").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CalculationModel_GetCalculationModels_SustainabilityServiceListCalculationModelsMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCalculationModelsAsync(19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("calculationModelId").ToString());
                Console.WriteLine(result.GetProperty("emissionCalculationId").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CalculationModel_GetCalculationModels_SustainabilityServiceListCalculationModelsMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (CalculationModel item in client.GetCalculationModels())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CalculationModel_GetCalculationModels_SustainabilityServiceListCalculationModelsMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (CalculationModel item in client.GetCalculationModelsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CalculationModel_GetCalculationModels_SustainabilityServiceListCalculationModelsMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetCalculationModels(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("calculationModelId").ToString());
                Console.WriteLine(result.GetProperty("emissionCalculationId").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CalculationModel_GetCalculationModels_SustainabilityServiceListCalculationModelsMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCalculationModelsAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("calculationModelId").ToString());
                Console.WriteLine(result.GetProperty("emissionCalculationId").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("logicalName").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("keyAttributes").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("emissionSource").GetProperty("rowVersion").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CalculationModel_GetCalculationModels_SustainabilityServiceListCalculationModelsMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (CalculationModel item in client.GetCalculationModels())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CalculationModel_GetCalculationModels_SustainabilityServiceListCalculationModelsMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (CalculationModel item in client.GetCalculationModelsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReferenceDataEntities_GetReferenceEntities_SustainabilityServiceListReferenceEntitiesMaximumSetGen()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetReferenceEntities(15, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("schemaName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReferenceDataEntities_GetReferenceEntities_SustainabilityServiceListReferenceEntitiesMaximumSetGen_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetReferenceEntitiesAsync(15, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("schemaName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReferenceDataEntities_GetReferenceEntities_SustainabilityServiceListReferenceEntitiesMaximumSetGen_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (ReferenceDataEntities item in client.GetReferenceEntities())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReferenceDataEntities_GetReferenceEntities_SustainabilityServiceListReferenceEntitiesMaximumSetGen_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (ReferenceDataEntities item in client.GetReferenceEntitiesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReferenceDataEntities_GetReferenceEntities_SustainabilityServiceListReferenceEntitiesMinimumSetGen()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetReferenceEntities(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("schemaName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReferenceDataEntities_GetReferenceEntities_SustainabilityServiceListReferenceEntitiesMinimumSetGen_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetReferenceEntitiesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("entityName").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("schemaName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReferenceDataEntities_GetReferenceEntities_SustainabilityServiceListReferenceEntitiesMinimumSetGen_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (ReferenceDataEntities item in client.GetReferenceEntities())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReferenceDataEntities_GetReferenceEntities_SustainabilityServiceListReferenceEntitiesMinimumSetGen_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (ReferenceDataEntities item in client.GetReferenceEntitiesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EntityRecord_GetAllReferenceEntityData_SustainabilityServiceListReferenceEntityRecordsMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllReferenceEntityData("hiahquzdipmrxufnjgbfh", 19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EntityRecord_GetAllReferenceEntityData_SustainabilityServiceListReferenceEntityRecordsMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllReferenceEntityDataAsync("hiahquzdipmrxufnjgbfh", 19, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EntityRecord_GetAllReferenceEntityData_SustainabilityServiceListReferenceEntityRecordsMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (EntityRecord item in client.GetAllReferenceEntityData("hiahquzdipmrxufnjgbfh"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EntityRecord_GetAllReferenceEntityData_SustainabilityServiceListReferenceEntityRecordsMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (EntityRecord item in client.GetAllReferenceEntityDataAsync("hiahquzdipmrxufnjgbfh"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EntityRecord_GetAllReferenceEntityData_SustainabilityServiceListReferenceEntityRecordsMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllReferenceEntityData("jl", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EntityRecord_GetAllReferenceEntityData_SustainabilityServiceListReferenceEntityRecordsMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllReferenceEntityDataAsync("jl", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EntityRecord_GetAllReferenceEntityData_SustainabilityServiceListReferenceEntityRecordsMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            foreach (EntityRecord item in client.GetAllReferenceEntityData("jl"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EntityRecord_GetAllReferenceEntityData_SustainabilityServiceListReferenceEntityRecordsMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SustainabilityServiceClient client = new SustainabilityServiceClient(endpoint, credential);

            await foreach (EntityRecord item in client.GetAllReferenceEntityDataAsync("jl"))
            {
            }
        }
    }
}
