// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Subscription.Models;

namespace Azure.ResourceManager.Subscription
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _subscriptionsClientDiagnostics;
        private SubscriptionsRestOperations _subscriptionsRestClient;
        private ClientDiagnostics _subscriptionClientDiagnostics;
        private SubscriptionRestOperations _subscriptionRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SubscriptionsClientDiagnostics => _subscriptionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Subscription", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SubscriptionsRestOperations SubscriptionsRestClient => _subscriptionsRestClient ??= new SubscriptionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SubscriptionClientDiagnostics => _subscriptionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Subscription", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SubscriptionRestOperations SubscriptionRestClient => _subscriptionRestClient ??= new SubscriptionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list.
        /// Request Path: /subscriptions/{subscriptionId}/locations
        /// Operation Id: Subscriptions_ListLocations
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Location" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Location> GetLocationsSubscriptionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Location>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SubscriptionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLocationsSubscriptions");
                scope.Start();
                try
                {
                    var response = await SubscriptionsRestClient.ListLocationsAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list.
        /// Request Path: /subscriptions/{subscriptionId}/locations
        /// Operation Id: Subscriptions_ListLocations
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Location" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Location> GetLocationsSubscriptions(CancellationToken cancellationToken = default)
        {
            Page<Location> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SubscriptionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLocationsSubscriptions");
                scope.Start();
                try
                {
                    var response = SubscriptionsRestClient.ListLocations(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// The operation to cancel a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Subscription/cancel
        /// Operation Id: Subscription_Cancel
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CanceledSubscriptionId>> CancelSubscriptionAsync(CancellationToken cancellationToken = default)
        {
            using var scope = SubscriptionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CancelSubscription");
            scope.Start();
            try
            {
                var response = await SubscriptionRestClient.CancelAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to cancel a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Subscription/cancel
        /// Operation Id: Subscription_Cancel
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CanceledSubscriptionId> CancelSubscription(CancellationToken cancellationToken = default)
        {
            using var scope = SubscriptionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CancelSubscription");
            scope.Start();
            try
            {
                var response = SubscriptionRestClient.Cancel(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to rename a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Subscription/rename
        /// Operation Id: Subscription_Rename
        /// </summary>
        /// <param name="body"> Subscription Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RenamedSubscriptionId>> RenameSubscriptionAsync(SubscriptionName body, CancellationToken cancellationToken = default)
        {
            using var scope = SubscriptionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.RenameSubscription");
            scope.Start();
            try
            {
                var response = await SubscriptionRestClient.RenameAsync(Id.SubscriptionId, body, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to rename a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Subscription/rename
        /// Operation Id: Subscription_Rename
        /// </summary>
        /// <param name="body"> Subscription Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RenamedSubscriptionId> RenameSubscription(SubscriptionName body, CancellationToken cancellationToken = default)
        {
            using var scope = SubscriptionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.RenameSubscription");
            scope.Start();
            try
            {
                var response = SubscriptionRestClient.Rename(Id.SubscriptionId, body, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to enable a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable
        /// Operation Id: Subscription_Enable
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EnabledSubscriptionId>> EnableSubscriptionAsync(CancellationToken cancellationToken = default)
        {
            using var scope = SubscriptionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.EnableSubscription");
            scope.Start();
            try
            {
                var response = await SubscriptionRestClient.EnableAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to enable a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable
        /// Operation Id: Subscription_Enable
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EnabledSubscriptionId> EnableSubscription(CancellationToken cancellationToken = default)
        {
            using var scope = SubscriptionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.EnableSubscription");
            scope.Start();
            try
            {
                var response = SubscriptionRestClient.Enable(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
