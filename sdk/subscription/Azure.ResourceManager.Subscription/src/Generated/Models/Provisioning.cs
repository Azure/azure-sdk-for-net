// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Subscription.Models
{
    /// <summary> The provisioning state of the resource. </summary>
    public readonly partial struct Provisioning : IEquatable<Provisioning>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Provisioning"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Provisioning(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string AcceptedValue = "Accepted";
        private const string SucceededValue = "Succeeded";

        /// <summary> Pending. </summary>
        public static Provisioning Pending { get; } = new Provisioning(PendingValue);
        /// <summary> Accepted. </summary>
        public static Provisioning Accepted { get; } = new Provisioning(AcceptedValue);
        /// <summary> Succeeded. </summary>
        public static Provisioning Succeeded { get; } = new Provisioning(SucceededValue);
        /// <summary> Determines if two <see cref="Provisioning"/> values are the same. </summary>
        public static bool operator ==(Provisioning left, Provisioning right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Provisioning"/> values are not the same. </summary>
        public static bool operator !=(Provisioning left, Provisioning right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Provisioning"/>. </summary>
        public static implicit operator Provisioning(string value) => new Provisioning(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Provisioning other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Provisioning other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
