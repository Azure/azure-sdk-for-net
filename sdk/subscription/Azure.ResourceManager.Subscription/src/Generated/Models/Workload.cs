// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Subscription.Models
{
    /// <summary> The workload type of the subscription. It can be either Production or DevTest. </summary>
    public readonly partial struct Workload : IEquatable<Workload>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Workload"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Workload(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ProductionValue = "Production";
        private const string DevTestValue = "DevTest";

        /// <summary> Production. </summary>
        public static Workload Production { get; } = new Workload(ProductionValue);
        /// <summary> DevTest. </summary>
        public static Workload DevTest { get; } = new Workload(DevTestValue);
        /// <summary> Determines if two <see cref="Workload"/> values are the same. </summary>
        public static bool operator ==(Workload left, Workload right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Workload"/> values are not the same. </summary>
        public static bool operator !=(Workload left, Workload right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Workload"/>. </summary>
        public static implicit operator Workload(string value) => new Workload(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Workload other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Workload other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
