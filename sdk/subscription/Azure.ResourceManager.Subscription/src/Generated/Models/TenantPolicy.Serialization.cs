// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Subscription.Models
{
    public partial class TenantPolicy
    {
        internal static TenantPolicy DeserializeTenantPolicy(JsonElement element)
        {
            Optional<string> policyId = default;
            Optional<bool> blockSubscriptionsLeavingTenant = default;
            Optional<bool> blockSubscriptionsIntoTenant = default;
            Optional<IReadOnlyList<Guid>> exemptedPrincipals = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("policyId"))
                {
                    policyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("blockSubscriptionsLeavingTenant"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    blockSubscriptionsLeavingTenant = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("blockSubscriptionsIntoTenant"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    blockSubscriptionsIntoTenant = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("exemptedPrincipals"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Guid> array = new List<Guid>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetGuid());
                    }
                    exemptedPrincipals = array;
                    continue;
                }
            }
            return new TenantPolicy(policyId.Value, Optional.ToNullable(blockSubscriptionsLeavingTenant), Optional.ToNullable(blockSubscriptionsIntoTenant), Optional.ToList(exemptedPrincipals));
        }
    }
}
