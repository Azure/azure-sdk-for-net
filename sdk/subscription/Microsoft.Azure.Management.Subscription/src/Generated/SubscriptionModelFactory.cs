// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace SubscriptionClient.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class SubscriptionModelFactory
    {
        /// <summary> Initializes a new instance of CanceledSubscriptionId. </summary>
        /// <param name="value"> The ID of the canceled subscription. </param>
        /// <returns> A new <see cref="Models.CanceledSubscriptionId"/> instance for mocking. </returns>
        public static CanceledSubscriptionId CanceledSubscriptionId(string value = null)
        {
            return new CanceledSubscriptionId(value);
        }

        /// <summary> Initializes a new instance of RenamedSubscriptionId. </summary>
        /// <param name="value"> The ID of the subscriptions that is being renamed. </param>
        /// <returns> A new <see cref="Models.RenamedSubscriptionId"/> instance for mocking. </returns>
        public static RenamedSubscriptionId RenamedSubscriptionId(string value = null)
        {
            return new RenamedSubscriptionId(value);
        }

        /// <summary> Initializes a new instance of EnabledSubscriptionId. </summary>
        /// <param name="value"> The ID of the subscriptions that is being enabled. </param>
        /// <returns> A new <see cref="Models.EnabledSubscriptionId"/> instance for mocking. </returns>
        public static EnabledSubscriptionId EnabledSubscriptionId(string value = null)
        {
            return new EnabledSubscriptionId(value);
        }

        /// <summary> Initializes a new instance of Operation. </summary>
        /// <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
        /// <param name="isDataAction"> Indicates whether the operation is a data action. </param>
        /// <param name="display"> The object that represents the operation. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, bool? isDataAction = null, OperationDisplay display = null)
        {
            return new Operation(name, isDataAction, display);
        }

        /// <summary> Initializes a new instance of OperationDisplay. </summary>
        /// <param name="provider"> Service provider: Microsoft.Subscription. </param>
        /// <param name="resource"> Resource on which the operation is performed: Profile, endpoint, etc. </param>
        /// <param name="operation"> Operation type: Read, write, delete, etc. </param>
        /// <param name="description"> Localized friendly description for the operation. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description);
        }

        /// <summary> Initializes a new instance of SubscriptionAliasResponse. </summary>
        /// <param name="id"> Fully qualified ID for the alias resource. </param>
        /// <param name="name"> Alias ID. </param>
        /// <param name="type"> Resource type, Microsoft.Subscription/aliases. </param>
        /// <param name="properties"> Subscription Alias response properties. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <returns> A new <see cref="Models.SubscriptionAliasResponse"/> instance for mocking. </returns>
        public static SubscriptionAliasResponse SubscriptionAliasResponse(string id = null, string name = null, string type = null, SubscriptionAliasResponseProperties properties = null, SystemData systemData = null)
        {
            return new SubscriptionAliasResponse(id, name, type, properties, systemData);
        }

        /// <summary> Initializes a new instance of SubscriptionAliasResponseProperties. </summary>
        /// <param name="subscriptionId"> Newly created subscription Id. </param>
        /// <param name="displayName"> The display name of the subscription. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <param name="acceptOwnershipUrl"> Url to accept ownership of the subscription. </param>
        /// <param name="acceptOwnershipState"> The accept ownership state of the resource. </param>
        /// <param name="billingScope">
        /// Billing scope of the subscription.
        /// For CustomerLed and FieldLed - /billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}
        /// For PartnerLed - /billingAccounts/{billingAccountName}/customers/{customerName}
        /// For Legacy EA - /billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}
        /// </param>
        /// <param name="workload"> The workload type of the subscription. It can be either Production or DevTest. </param>
        /// <param name="resellerId"> Reseller Id. </param>
        /// <param name="subscriptionOwnerId"> Owner Id of the subscription. </param>
        /// <param name="managementGroupId"> The Management Group Id. </param>
        /// <param name="tags"> Tags for the subscription. </param>
        /// <returns> A new <see cref="Models.SubscriptionAliasResponseProperties"/> instance for mocking. </returns>
        public static SubscriptionAliasResponseProperties SubscriptionAliasResponseProperties(string subscriptionId = null, string displayName = null, ProvisioningState? provisioningState = null, string acceptOwnershipUrl = null, AcceptOwnership? acceptOwnershipState = null, string billingScope = null, Workload? workload = null, string resellerId = null, string subscriptionOwnerId = null, string managementGroupId = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SubscriptionAliasResponseProperties(subscriptionId, displayName, provisioningState, acceptOwnershipUrl, acceptOwnershipState, billingScope, workload, resellerId, subscriptionOwnerId, managementGroupId, tags);
        }

        /// <summary> Initializes a new instance of SystemData. </summary>
        /// <param name="createdBy"> The identity that created the resource. </param>
        /// <param name="createdByType"> The type of identity that created the resource. </param>
        /// <param name="createdAt"> The timestamp of resource creation (UTC). </param>
        /// <param name="lastModifiedBy"> The identity that last modified the resource. </param>
        /// <param name="lastModifiedByType"> The type of identity that last modified the resource. </param>
        /// <param name="lastModifiedAt"> The timestamp of resource last modification (UTC). </param>
        /// <returns> A new <see cref="Models.SystemData"/> instance for mocking. </returns>
        public static SystemData SystemData(string createdBy = null, CreatedByType? createdByType = null, DateTimeOffset? createdAt = null, string lastModifiedBy = null, CreatedByType? lastModifiedByType = null, DateTimeOffset? lastModifiedAt = null)
        {
            return new SystemData(createdBy, createdByType, createdAt, lastModifiedBy, lastModifiedByType, lastModifiedAt);
        }

        /// <summary> Initializes a new instance of SubscriptionAliasListResult. </summary>
        /// <param name="value"> The list of alias. </param>
        /// <param name="nextLink"> The link (url) to the next page of results. </param>
        /// <returns> A new <see cref="Models.SubscriptionAliasListResult"/> instance for mocking. </returns>
        public static SubscriptionAliasListResult SubscriptionAliasListResult(IEnumerable<SubscriptionAliasResponse> value = null, string nextLink = null)
        {
            value ??= new List<SubscriptionAliasResponse>();

            return new SubscriptionAliasListResult(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of AcceptOwnershipStatusResponse. </summary>
        /// <param name="subscriptionId"> Newly created subscription Id. </param>
        /// <param name="acceptOwnershipState"> The accept ownership state of the resource. </param>
        /// <param name="billingOwner"> UPN of the billing owner. </param>
        /// <param name="subscriptionTenantId"> Tenant Id of the subscription. </param>
        /// <param name="displayName"> The display name of the subscription. </param>
        /// <param name="tags"> Tags for the subscription. </param>
        /// <returns> A new <see cref="Models.AcceptOwnershipStatusResponse"/> instance for mocking. </returns>
        public static AcceptOwnershipStatusResponse AcceptOwnershipStatusResponse(string subscriptionId = null, AcceptOwnership? acceptOwnershipState = null, string billingOwner = null, string subscriptionTenantId = null, string displayName = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AcceptOwnershipStatusResponse(subscriptionId, acceptOwnershipState, billingOwner, subscriptionTenantId, displayName, tags);
        }

        /// <summary> Initializes a new instance of GetTenantPolicyResponse. </summary>
        /// <param name="id"> Policy Id. </param>
        /// <param name="name"> Policy name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="properties"> Tenant policy properties. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <returns> A new <see cref="Models.GetTenantPolicyResponse"/> instance for mocking. </returns>
        public static GetTenantPolicyResponse GetTenantPolicyResponse(string id = null, string name = null, string type = null, TenantPolicy properties = null, SystemData systemData = null)
        {
            return new GetTenantPolicyResponse(id, name, type, properties, systemData);
        }

        /// <summary> Initializes a new instance of TenantPolicy. </summary>
        /// <param name="policyId"> Policy Id. </param>
        /// <param name="blockSubscriptionsLeavingTenant"> Blocks the leaving of subscriptions from user&apos;s tenant. </param>
        /// <param name="blockSubscriptionsIntoTenant"> Blocks the entering of subscriptions into user&apos;s tenant. </param>
        /// <param name="exemptedPrincipals"> List of user objectIds that are exempted from the set subscription tenant policies for the user&apos;s tenant. </param>
        /// <returns> A new <see cref="Models.TenantPolicy"/> instance for mocking. </returns>
        public static TenantPolicy TenantPolicy(string policyId = null, bool? blockSubscriptionsLeavingTenant = null, bool? blockSubscriptionsIntoTenant = null, IEnumerable<Guid> exemptedPrincipals = null)
        {
            exemptedPrincipals ??= new List<Guid>();

            return new TenantPolicy(policyId, blockSubscriptionsLeavingTenant, blockSubscriptionsIntoTenant, exemptedPrincipals?.ToList());
        }

        /// <summary> Initializes a new instance of BillingAccountPoliciesResponse. </summary>
        /// <param name="id"> Fully qualified ID for the policy. </param>
        /// <param name="name"> Policy name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="properties"> Billing account policies response properties. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <returns> A new <see cref="Models.BillingAccountPoliciesResponse"/> instance for mocking. </returns>
        public static BillingAccountPoliciesResponse BillingAccountPoliciesResponse(string id = null, string name = null, string type = null, BillingAccountPoliciesResponseProperties properties = null, SystemData systemData = null)
        {
            return new BillingAccountPoliciesResponse(id, name, type, properties, systemData);
        }

        /// <summary> Initializes a new instance of BillingAccountPoliciesResponseProperties. </summary>
        /// <param name="serviceTenants"> Service tenant for the billing account. </param>
        /// <param name="allowTransfers"> Determine if the transfers are allowed for the billing account. </param>
        /// <returns> A new <see cref="Models.BillingAccountPoliciesResponseProperties"/> instance for mocking. </returns>
        public static BillingAccountPoliciesResponseProperties BillingAccountPoliciesResponseProperties(IEnumerable<ServiceTenantResponse> serviceTenants = null, bool? allowTransfers = null)
        {
            serviceTenants ??= new List<ServiceTenantResponse>();

            return new BillingAccountPoliciesResponseProperties(serviceTenants?.ToList(), allowTransfers);
        }

        /// <summary> Initializes a new instance of ServiceTenantResponse. </summary>
        /// <param name="tenantId"> Service tenant id. </param>
        /// <param name="tenantName"> Service tenant name. </param>
        /// <returns> A new <see cref="Models.ServiceTenantResponse"/> instance for mocking. </returns>
        public static ServiceTenantResponse ServiceTenantResponse(string tenantId = null, string tenantName = null)
        {
            return new ServiceTenantResponse(tenantId, tenantName);
        }
    }
}
