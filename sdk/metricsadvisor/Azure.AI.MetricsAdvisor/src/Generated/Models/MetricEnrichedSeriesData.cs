// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> The SeriesResult. </summary>
    public partial class MetricEnrichedSeriesData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MetricEnrichedSeriesData"/>. </summary>
        /// <param name="series"></param>
        /// <param name="timestamps"> timestamps of the series. </param>
        /// <param name="metricValues"> values of the series. </param>
        /// <param name="isAnomaly"> whether points of the series are anomalies. </param>
        /// <param name="periods"> period calculated on each point of the series. </param>
        /// <param name="expectedMetricValues"> expected values of the series given by smart detector. </param>
        /// <param name="lowerBoundaryValues"> lower boundary list of the series given by smart detector. </param>
        /// <param name="upperBoundaryValues"> upper boundary list of the series given by smart detector. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MetricEnrichedSeriesData(SeriesIdentity series, IReadOnlyList<DateTimeOffset> timestamps, IReadOnlyList<double> metricValues, IReadOnlyList<bool?> isAnomaly, IReadOnlyList<int?> periods, IReadOnlyList<double?> expectedMetricValues, IReadOnlyList<double?> lowerBoundaryValues, IReadOnlyList<double?> upperBoundaryValues, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Series = series;
            Timestamps = timestamps;
            MetricValues = metricValues;
            IsAnomaly = isAnomaly;
            Periods = periods;
            ExpectedMetricValues = expectedMetricValues;
            LowerBoundaryValues = lowerBoundaryValues;
            UpperBoundaryValues = upperBoundaryValues;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MetricEnrichedSeriesData"/> for deserialization. </summary>
        internal MetricEnrichedSeriesData()
        {
        }
    }
}
