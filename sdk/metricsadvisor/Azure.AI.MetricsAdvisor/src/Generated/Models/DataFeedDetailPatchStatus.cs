// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> data feed status. </summary>
    internal readonly partial struct DataFeedDetailPatchStatus : IEquatable<DataFeedDetailPatchStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DataFeedDetailPatchStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataFeedDetailPatchStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string PausedValue = "Paused";

        /// <summary> Active. </summary>
        public static DataFeedDetailPatchStatus Active { get; } = new DataFeedDetailPatchStatus(ActiveValue);
        /// <summary> Paused. </summary>
        public static DataFeedDetailPatchStatus Paused { get; } = new DataFeedDetailPatchStatus(PausedValue);
        /// <summary> Determines if two <see cref="DataFeedDetailPatchStatus"/> values are the same. </summary>
        public static bool operator ==(DataFeedDetailPatchStatus left, DataFeedDetailPatchStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataFeedDetailPatchStatus"/> values are not the same. </summary>
        public static bool operator !=(DataFeedDetailPatchStatus left, DataFeedDetailPatchStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataFeedDetailPatchStatus"/>. </summary>
        public static implicit operator DataFeedDetailPatchStatus(string value) => new DataFeedDetailPatchStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataFeedDetailPatchStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataFeedDetailPatchStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
