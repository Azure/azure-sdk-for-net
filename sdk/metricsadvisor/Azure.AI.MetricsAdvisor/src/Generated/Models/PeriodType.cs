// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> the type of setting period. </summary>
    public readonly partial struct PeriodType : IEquatable<PeriodType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="PeriodType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PeriodType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutoDetectValue = "AutoDetect";
        private const string AssignValueValue = "AssignValue";

        /// <summary> AutoDetect. </summary>
        public static PeriodType AutoDetect { get; } = new PeriodType(AutoDetectValue);
        /// <summary> AssignValue. </summary>
        public static PeriodType AssignValue { get; } = new PeriodType(AssignValueValue);
        /// <summary> Determines if two <see cref="PeriodType"/> values are the same. </summary>
        public static bool operator ==(PeriodType left, PeriodType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PeriodType"/> values are not the same. </summary>
        public static bool operator !=(PeriodType left, PeriodType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PeriodType"/>. </summary>
        public static implicit operator PeriodType(string value) => new PeriodType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PeriodType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PeriodType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
