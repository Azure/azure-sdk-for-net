// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.MetricsAdvisor.Models
{
    internal partial class HookInfoPatch : IUtf8JsonSerializable, IJsonModel<HookInfoPatch>
    {
        void IJsonModel<HookInfoPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HookInfoPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(HookInfoPatch)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("hookType"u8);
            writer.WriteStringValue(HookType.ToString());
            if (Optional.IsDefined(HookName))
            {
                writer.WritePropertyName("hookName"u8);
                writer.WriteStringValue(HookName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(ExternalLink))
            {
                writer.WritePropertyName("externalLink"u8);
                writer.WriteStringValue(ExternalLink);
            }
            if (Optional.IsCollectionDefined(Admins))
            {
                writer.WritePropertyName("admins"u8);
                writer.WriteStartArray();
                foreach (var item in Admins)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        HookInfoPatch IJsonModel<HookInfoPatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HookInfoPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(HookInfoPatch)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHookInfoPatch(document.RootElement, options);
        }

        internal static HookInfoPatch DeserializeHookInfoPatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("hookType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "Email": return EmailHookInfoPatch.DeserializeEmailHookInfoPatch(element);
                    case "Webhook": return WebhookHookInfoPatch.DeserializeWebhookHookInfoPatch(element);
                }
            }
            return UnknownHookInfoPatch.DeserializeUnknownHookInfoPatch(element);
        }

        BinaryData IPersistableModel<HookInfoPatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HookInfoPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new InvalidOperationException($"The model {nameof(HookInfoPatch)} does not support '{options.Format}' format.");
            }
        }

        HookInfoPatch IPersistableModel<HookInfoPatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HookInfoPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeHookInfoPatch(document.RootElement, options);
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(HookInfoPatch)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<HookInfoPatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
