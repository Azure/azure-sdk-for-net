// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> The AnomalyProperty. </summary>
    internal partial class AnomalyProperty
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AnomalyProperty"/>. </summary>
        /// <param name="anomalySeverity"> anomaly severity. </param>
        /// <param name="value"> value of the anomaly. </param>
        internal AnomalyProperty(AnomalySeverity anomalySeverity, double value)
        {
            AnomalySeverity = anomalySeverity;
            Value = value;
        }

        /// <summary> Initializes a new instance of <see cref="AnomalyProperty"/>. </summary>
        /// <param name="anomalySeverity"> anomaly severity. </param>
        /// <param name="anomalyStatus">
        /// anomaly status
        ///
        /// only return for alerting anomaly result
        /// </param>
        /// <param name="value"> value of the anomaly. </param>
        /// <param name="expectedValue"> expected value of the anomaly given by smart detector. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AnomalyProperty(AnomalySeverity anomalySeverity, AnomalyStatus? anomalyStatus, double value, double? expectedValue, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AnomalySeverity = anomalySeverity;
            AnomalyStatus = anomalyStatus;
            Value = value;
            ExpectedValue = expectedValue;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AnomalyProperty"/> for deserialization. </summary>
        internal AnomalyProperty()
        {
        }

        /// <summary> anomaly severity. </summary>
        public AnomalySeverity AnomalySeverity { get; }
        /// <summary>
        /// anomaly status
        ///
        /// only return for alerting anomaly result
        /// </summary>
        public AnomalyStatus? AnomalyStatus { get; }
        /// <summary> value of the anomaly. </summary>
        public double Value { get; }
        /// <summary> expected value of the anomaly given by smart detector. </summary>
        public double? ExpectedValue { get; }
    }
}
