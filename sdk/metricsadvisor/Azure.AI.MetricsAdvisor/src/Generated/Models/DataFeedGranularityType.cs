// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> The Granularity. </summary>
    public readonly partial struct DataFeedGranularityType : IEquatable<DataFeedGranularityType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DataFeedGranularityType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataFeedGranularityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string YearlyValue = "Yearly";
        private const string MonthlyValue = "Monthly";
        private const string WeeklyValue = "Weekly";
        private const string DailyValue = "Daily";
        private const string HourlyValue = "Hourly";
        private const string MinutelyValue = "Minutely";
        private const string SecondlyValue = "Secondly";
        private const string CustomValue = "Custom";

        /// <summary> Yearly. </summary>
        public static DataFeedGranularityType Yearly { get; } = new DataFeedGranularityType(YearlyValue);
        /// <summary> Monthly. </summary>
        public static DataFeedGranularityType Monthly { get; } = new DataFeedGranularityType(MonthlyValue);
        /// <summary> Weekly. </summary>
        public static DataFeedGranularityType Weekly { get; } = new DataFeedGranularityType(WeeklyValue);
        /// <summary> Daily. </summary>
        public static DataFeedGranularityType Daily { get; } = new DataFeedGranularityType(DailyValue);
        /// <summary> Hourly. </summary>
        public static DataFeedGranularityType Hourly { get; } = new DataFeedGranularityType(HourlyValue);
        /// <summary> Minutely. </summary>
        public static DataFeedGranularityType Minutely { get; } = new DataFeedGranularityType(MinutelyValue);
        /// <summary> Secondly. </summary>
        public static DataFeedGranularityType Secondly { get; } = new DataFeedGranularityType(SecondlyValue);
        /// <summary> Custom. </summary>
        public static DataFeedGranularityType Custom { get; } = new DataFeedGranularityType(CustomValue);
        /// <summary> Determines if two <see cref="DataFeedGranularityType"/> values are the same. </summary>
        public static bool operator ==(DataFeedGranularityType left, DataFeedGranularityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataFeedGranularityType"/> values are not the same. </summary>
        public static bool operator !=(DataFeedGranularityType left, DataFeedGranularityType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataFeedGranularityType"/>. </summary>
        public static implicit operator DataFeedGranularityType(string value) => new DataFeedGranularityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataFeedGranularityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataFeedGranularityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
