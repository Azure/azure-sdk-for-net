// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> The WebhookHookParameterPatch. </summary>
    internal partial class WebhookHookParameterPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WebhookHookParameterPatch"/>. </summary>
        public WebhookHookParameterPatch()
        {
            Headers = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="WebhookHookParameterPatch"/>. </summary>
        /// <param name="endpoint"> API address, will be called when alert is triggered, only support POST method via SSL. </param>
        /// <param name="username"> (Deprecated) The username, if using basic authentication. </param>
        /// <param name="password"> (Deprecated) The password, if using basic authentication. </param>
        /// <param name="headers"> custom headers in api call. </param>
        /// <param name="certificateKey"> The certificate key, if using client certificate. </param>
        /// <param name="certificatePassword"> The certificate password, if using client certificate. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WebhookHookParameterPatch(string endpoint, string username, string password, IDictionary<string, string> headers, string certificateKey, string certificatePassword, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Endpoint = endpoint;
            Username = username;
            Password = password;
            Headers = headers;
            CertificateKey = certificateKey;
            CertificatePassword = certificatePassword;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> API address, will be called when alert is triggered, only support POST method via SSL. </summary>
        public string Endpoint { get; set; }
        /// <summary> (Deprecated) The username, if using basic authentication. </summary>
        public string Username { get; set; }
        /// <summary> (Deprecated) The password, if using basic authentication. </summary>
        public string Password { get; set; }
        /// <summary> The certificate key, if using client certificate. </summary>
        public string CertificateKey { get; set; }
        /// <summary> The certificate password, if using client certificate. </summary>
        public string CertificatePassword { get; set; }
    }
}
