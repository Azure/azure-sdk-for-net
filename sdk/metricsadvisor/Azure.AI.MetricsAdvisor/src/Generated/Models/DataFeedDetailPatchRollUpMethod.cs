// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> roll up method. </summary>
    internal readonly partial struct DataFeedDetailPatchRollUpMethod : IEquatable<DataFeedDetailPatchRollUpMethod>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DataFeedDetailPatchRollUpMethod"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataFeedDetailPatchRollUpMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string SumValue = "Sum";
        private const string MaxValue = "Max";
        private const string MinValue = "Min";
        private const string AvgValue = "Avg";
        private const string CountValue = "Count";

        /// <summary> None. </summary>
        public static DataFeedDetailPatchRollUpMethod None { get; } = new DataFeedDetailPatchRollUpMethod(NoneValue);
        /// <summary> Sum. </summary>
        public static DataFeedDetailPatchRollUpMethod Sum { get; } = new DataFeedDetailPatchRollUpMethod(SumValue);
        /// <summary> Max. </summary>
        public static DataFeedDetailPatchRollUpMethod Max { get; } = new DataFeedDetailPatchRollUpMethod(MaxValue);
        /// <summary> Min. </summary>
        public static DataFeedDetailPatchRollUpMethod Min { get; } = new DataFeedDetailPatchRollUpMethod(MinValue);
        /// <summary> Avg. </summary>
        public static DataFeedDetailPatchRollUpMethod Avg { get; } = new DataFeedDetailPatchRollUpMethod(AvgValue);
        /// <summary> Count. </summary>
        public static DataFeedDetailPatchRollUpMethod Count { get; } = new DataFeedDetailPatchRollUpMethod(CountValue);
        /// <summary> Determines if two <see cref="DataFeedDetailPatchRollUpMethod"/> values are the same. </summary>
        public static bool operator ==(DataFeedDetailPatchRollUpMethod left, DataFeedDetailPatchRollUpMethod right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataFeedDetailPatchRollUpMethod"/> values are not the same. </summary>
        public static bool operator !=(DataFeedDetailPatchRollUpMethod left, DataFeedDetailPatchRollUpMethod right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataFeedDetailPatchRollUpMethod"/>. </summary>
        public static implicit operator DataFeedDetailPatchRollUpMethod(string value) => new DataFeedDetailPatchRollUpMethod(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataFeedDetailPatchRollUpMethod other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataFeedDetailPatchRollUpMethod other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
