// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.AI.MetricsAdvisor.Models
{
    internal partial class AnomalyAlertingConfigurationPatch : IUtf8JsonSerializable, IModelJsonSerializable<AnomalyAlertingConfigurationPatch>
    {
        void IModelJsonSerializable<AnomalyAlertingConfigurationPatch>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AnomalyAlertingConfigurationPatch>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(CrossMetricsOperator))
            {
                writer.WritePropertyName("crossMetricsOperator"u8);
                writer.WriteStringValue(CrossMetricsOperator.Value.ToString());
            }
            if (Optional.IsCollectionDefined(SplitAlertByDimensions))
            {
                writer.WritePropertyName("splitAlertByDimensions"u8);
                writer.WriteStartArray();
                foreach (var item in SplitAlertByDimensions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HookIds))
            {
                writer.WritePropertyName("hookIds"u8);
                writer.WriteStartArray();
                foreach (var item in HookIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MetricAlertingConfigurations))
            {
                writer.WritePropertyName("metricAlertingConfigurations"u8);
                writer.WriteStartArray();
                foreach (var item in MetricAlertingConfigurations)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MetricAlertConfiguration>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AnomalyAlertingConfigurationPatch DeserializeAnomalyAlertingConfigurationPatch(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<string> description = default;
            Optional<MetricAlertConfigurationsOperator> crossMetricsOperator = default;
            Optional<IList<string>> splitAlertByDimensions = default;
            Optional<IList<Guid>> hookIds = default;
            Optional<IList<MetricAlertConfiguration>> metricAlertingConfigurations = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("crossMetricsOperator"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    crossMetricsOperator = new MetricAlertConfigurationsOperator(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("splitAlertByDimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    splitAlertByDimensions = array;
                    continue;
                }
                if (property.NameEquals("hookIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Guid> array = new List<Guid>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetGuid());
                    }
                    hookIds = array;
                    continue;
                }
                if (property.NameEquals("metricAlertingConfigurations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MetricAlertConfiguration> array = new List<MetricAlertConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetricAlertConfiguration.DeserializeMetricAlertConfiguration(item));
                    }
                    metricAlertingConfigurations = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AnomalyAlertingConfigurationPatch(name.Value, description.Value, Optional.ToNullable(crossMetricsOperator), Optional.ToList(splitAlertByDimensions), Optional.ToList(hookIds), Optional.ToList(metricAlertingConfigurations), rawData);
        }

        AnomalyAlertingConfigurationPatch IModelJsonSerializable<AnomalyAlertingConfigurationPatch>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AnomalyAlertingConfigurationPatch>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAnomalyAlertingConfigurationPatch(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AnomalyAlertingConfigurationPatch>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AnomalyAlertingConfigurationPatch>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AnomalyAlertingConfigurationPatch IModelSerializable<AnomalyAlertingConfigurationPatch>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AnomalyAlertingConfigurationPatch>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAnomalyAlertingConfigurationPatch(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AnomalyAlertingConfigurationPatch"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AnomalyAlertingConfigurationPatch"/> to convert. </param>
        public static implicit operator RequestContent(AnomalyAlertingConfigurationPatch model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AnomalyAlertingConfigurationPatch"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AnomalyAlertingConfigurationPatch(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAnomalyAlertingConfigurationPatch(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
