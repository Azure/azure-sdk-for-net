// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary>
    /// cross metrics operator
    /// 
    /// 
    /// 
    /// should be specified when setting up multiple metric alerting configurations.
    /// </summary>
    public readonly partial struct MetricAnomalyAlertConfigurationsOperator : IEquatable<MetricAnomalyAlertConfigurationsOperator>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MetricAnomalyAlertConfigurationsOperator"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MetricAnomalyAlertConfigurationsOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AndValue = "AND";
        private const string OrValue = "OR";
        private const string XorValue = "XOR";
        /// <summary> Determines if two <see cref="MetricAnomalyAlertConfigurationsOperator"/> values are the same. </summary>
        public static bool operator ==(MetricAnomalyAlertConfigurationsOperator left, MetricAnomalyAlertConfigurationsOperator right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MetricAnomalyAlertConfigurationsOperator"/> values are not the same. </summary>
        public static bool operator !=(MetricAnomalyAlertConfigurationsOperator left, MetricAnomalyAlertConfigurationsOperator right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MetricAnomalyAlertConfigurationsOperator"/>. </summary>
        public static implicit operator MetricAnomalyAlertConfigurationsOperator(string value) => new MetricAnomalyAlertConfigurationsOperator(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MetricAnomalyAlertConfigurationsOperator other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MetricAnomalyAlertConfigurationsOperator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
