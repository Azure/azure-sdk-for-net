// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary>
    /// condition operator
    /// 
    /// 
    /// 
    /// should be specified when combining multiple detection conditions.
    /// </summary>
    public readonly partial struct DetectionConditionsOperator : IEquatable<DetectionConditionsOperator>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DetectionConditionsOperator"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DetectionConditionsOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AndValue = "AND";
        private const string OrValue = "OR";
        /// <summary> Determines if two <see cref="DetectionConditionsOperator"/> values are the same. </summary>
        public static bool operator ==(DetectionConditionsOperator left, DetectionConditionsOperator right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DetectionConditionsOperator"/> values are not the same. </summary>
        public static bool operator !=(DetectionConditionsOperator left, DetectionConditionsOperator right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DetectionConditionsOperator"/>. </summary>
        public static implicit operator DetectionConditionsOperator(string value) => new DetectionConditionsOperator(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DetectionConditionsOperator other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DetectionConditionsOperator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
