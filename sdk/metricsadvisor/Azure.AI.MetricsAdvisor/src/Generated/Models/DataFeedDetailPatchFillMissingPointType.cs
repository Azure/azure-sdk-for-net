// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> the type of fill missing point for anomaly detection. </summary>
    internal readonly partial struct DataFeedDetailPatchFillMissingPointType : IEquatable<DataFeedDetailPatchFillMissingPointType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DataFeedDetailPatchFillMissingPointType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataFeedDetailPatchFillMissingPointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SmartFillingValue = "SmartFilling";
        private const string PreviousValueValue = "PreviousValue";
        private const string CustomValueValue = "CustomValue";
        private const string NoFillingValue = "NoFilling";

        /// <summary> SmartFilling. </summary>
        public static DataFeedDetailPatchFillMissingPointType SmartFilling { get; } = new DataFeedDetailPatchFillMissingPointType(SmartFillingValue);
        /// <summary> PreviousValue. </summary>
        public static DataFeedDetailPatchFillMissingPointType PreviousValue { get; } = new DataFeedDetailPatchFillMissingPointType(PreviousValueValue);
        /// <summary> CustomValue. </summary>
        public static DataFeedDetailPatchFillMissingPointType CustomValue { get; } = new DataFeedDetailPatchFillMissingPointType(CustomValueValue);
        /// <summary> NoFilling. </summary>
        public static DataFeedDetailPatchFillMissingPointType NoFilling { get; } = new DataFeedDetailPatchFillMissingPointType(NoFillingValue);
        /// <summary> Determines if two <see cref="DataFeedDetailPatchFillMissingPointType"/> values are the same. </summary>
        public static bool operator ==(DataFeedDetailPatchFillMissingPointType left, DataFeedDetailPatchFillMissingPointType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataFeedDetailPatchFillMissingPointType"/> values are not the same. </summary>
        public static bool operator !=(DataFeedDetailPatchFillMissingPointType left, DataFeedDetailPatchFillMissingPointType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataFeedDetailPatchFillMissingPointType"/>. </summary>
        public static implicit operator DataFeedDetailPatchFillMissingPointType(string value) => new DataFeedDetailPatchFillMissingPointType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataFeedDetailPatchFillMissingPointType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataFeedDetailPatchFillMissingPointType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
