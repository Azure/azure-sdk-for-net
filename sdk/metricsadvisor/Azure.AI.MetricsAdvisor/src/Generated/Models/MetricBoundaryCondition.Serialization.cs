// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.AI.MetricsAdvisor.Models
{
    public partial class MetricBoundaryCondition : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(LowerBound))
            {
                writer.WritePropertyName("lower"u8);
                writer.WriteNumberValue(LowerBound.Value);
            }
            if (Core.Optional.IsDefined(UpperBound))
            {
                writer.WritePropertyName("upper"u8);
                writer.WriteNumberValue(UpperBound.Value);
            }
            writer.WritePropertyName("direction"u8);
            writer.WriteStringValue(Direction.ToString());
            if (Core.Optional.IsDefined(MeasureType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(MeasureType.Value.ToString());
            }
            if (Core.Optional.IsDefined(CompanionMetricId))
            {
                writer.WritePropertyName("metricId"u8);
                writer.WriteStringValue(CompanionMetricId);
            }
            if (Core.Optional.IsDefined(ShouldAlertIfDataPointMissing))
            {
                writer.WritePropertyName("triggerForMissing"u8);
                writer.WriteBooleanValue(ShouldAlertIfDataPointMissing.Value);
            }
            writer.WriteEndObject();
        }

        internal static MetricBoundaryCondition DeserializeMetricBoundaryCondition(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<double> lower = default;
            Core.Optional<double> upper = default;
            BoundaryDirection direction = default;
            Core.Optional<BoundaryMeasureType> type = default;
            Core.Optional<string> metricId = default;
            Core.Optional<bool> triggerForMissing = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lower"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lower = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("upper"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    upper = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("direction"u8))
                {
                    direction = new BoundaryDirection(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new BoundaryMeasureType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("metricId"u8))
                {
                    metricId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("triggerForMissing"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    triggerForMissing = property.Value.GetBoolean();
                    continue;
                }
            }
            return new MetricBoundaryCondition(Core.Optional.ToNullable(lower), Core.Optional.ToNullable(upper), direction, Core.Optional.ToNullable(type), metricId.Value, Core.Optional.ToNullable(triggerForMissing));
        }
    }
}
