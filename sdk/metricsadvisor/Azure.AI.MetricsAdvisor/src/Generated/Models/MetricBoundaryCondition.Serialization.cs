// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.AI.MetricsAdvisor.Models
{
    public partial class MetricBoundaryCondition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(LowerBound))
            {
                writer.WritePropertyName("lower");
                writer.WriteNumberValue(LowerBound.Value);
            }
            if (Optional.IsDefined(UpperBound))
            {
                writer.WritePropertyName("upper");
                writer.WriteNumberValue(UpperBound.Value);
            }
            writer.WritePropertyName("direction");
            writer.WriteStringValue(Direction.ToString());
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type.Value.ToString());
            }
            if (Optional.IsDefined(CompanionMetricId))
            {
                writer.WritePropertyName("metricId");
                writer.WriteStringValue(CompanionMetricId);
            }
            if (Optional.IsDefined(TriggerForMissing))
            {
                writer.WritePropertyName("triggerForMissing");
                writer.WriteBooleanValue(TriggerForMissing.Value);
            }
            writer.WriteEndObject();
        }

        internal static MetricBoundaryCondition DeserializeMetricBoundaryCondition(JsonElement element)
        {
            Optional<double> lower = default;
            Optional<double> upper = default;
            BoundaryDirection direction = default;
            Optional<ValueType> type = default;
            Optional<string> metricId = default;
            Optional<bool> triggerForMissing = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lower"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lower = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("upper"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    upper = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("direction"))
                {
                    direction = new BoundaryDirection(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    type = new ValueType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("metricId"))
                {
                    metricId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("triggerForMissing"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    triggerForMissing = property.Value.GetBoolean();
                    continue;
                }
            }
            return new MetricBoundaryCondition(Optional.ToNullable(lower), Optional.ToNullable(upper), direction, Optional.ToNullable(type), metricId.Value, Optional.ToNullable(triggerForMissing));
        }
    }
}
