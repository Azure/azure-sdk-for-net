// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> The ChangeThresholdConditionPatch. </summary>
    internal partial class ChangeThresholdConditionPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ChangeThresholdConditionPatch"/>. </summary>
        public ChangeThresholdConditionPatch()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ChangeThresholdConditionPatch"/>. </summary>
        /// <param name="changePercentage"> change percentage, value range : [0, +∞). </param>
        /// <param name="shiftPoint"> shift point, value range : [1, +∞). </param>
        /// <param name="withinRange">
        /// if the withinRange = true, detected data is abnormal when the value falls in the range, in this case anomalyDetectorDirection must be Both
        /// if the withinRange = false, detected data is abnormal when the value falls out of the range
        /// </param>
        /// <param name="anomalyDetectorDirection"> detection direction. </param>
        /// <param name="suppressCondition"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ChangeThresholdConditionPatch(double? changePercentage, int? shiftPoint, bool? withinRange, AnomalyDetectorDirection? anomalyDetectorDirection, SuppressConditionPatch suppressCondition, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ChangePercentage = changePercentage;
            ShiftPoint = shiftPoint;
            WithinRange = withinRange;
            AnomalyDetectorDirection = anomalyDetectorDirection;
            SuppressCondition = suppressCondition;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> change percentage, value range : [0, +∞). </summary>
        public double? ChangePercentage { get; set; }
        /// <summary> shift point, value range : [1, +∞). </summary>
        public int? ShiftPoint { get; set; }
        /// <summary>
        /// if the withinRange = true, detected data is abnormal when the value falls in the range, in this case anomalyDetectorDirection must be Both
        /// if the withinRange = false, detected data is abnormal when the value falls out of the range
        /// </summary>
        public bool? WithinRange { get; set; }
        /// <summary> detection direction. </summary>
        public AnomalyDetectorDirection? AnomalyDetectorDirection { get; set; }
        /// <summary> Gets or sets the suppress condition. </summary>
        public SuppressConditionPatch SuppressCondition { get; set; }
    }
}
