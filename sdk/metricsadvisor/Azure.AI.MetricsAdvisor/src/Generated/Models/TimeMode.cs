// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> time mode. </summary>
    public readonly partial struct TimeMode : IEquatable<TimeMode>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TimeMode"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TimeMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AnomalyTimeValue = "AnomalyTime";
        private const string CreatedTimeValue = "CreatedTime";
        private const string ModifiedTimeValue = "ModifiedTime";

        /// <summary> AnomalyTime. </summary>
        public static TimeMode AnomalyTime { get; } = new TimeMode(AnomalyTimeValue);
        /// <summary> CreatedTime. </summary>
        public static TimeMode CreatedTime { get; } = new TimeMode(CreatedTimeValue);
        /// <summary> ModifiedTime. </summary>
        public static TimeMode ModifiedTime { get; } = new TimeMode(ModifiedTimeValue);
        /// <summary> Determines if two <see cref="TimeMode"/> values are the same. </summary>
        public static bool operator ==(TimeMode left, TimeMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TimeMode"/> values are not the same. </summary>
        public static bool operator !=(TimeMode left, TimeMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TimeMode"/>. </summary>
        public static implicit operator TimeMode(string value) => new TimeMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TimeMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TimeMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
