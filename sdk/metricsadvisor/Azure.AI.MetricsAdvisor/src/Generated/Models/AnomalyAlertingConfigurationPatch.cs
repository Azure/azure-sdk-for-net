// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> The AnomalyAlertingConfigurationPatch. </summary>
    internal partial class AnomalyAlertingConfigurationPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AnomalyAlertingConfigurationPatch"/>. </summary>
        public AnomalyAlertingConfigurationPatch()
        {
            SplitAlertByDimensions = new ChangeTrackingList<string>();
            HookIds = new ChangeTrackingList<Guid>();
            MetricAlertingConfigurations = new ChangeTrackingList<MetricAlertConfiguration>();
        }

        /// <summary> Initializes a new instance of <see cref="AnomalyAlertingConfigurationPatch"/>. </summary>
        /// <param name="name"> Anomaly alerting configuration name. </param>
        /// <param name="description"> anomaly alerting configuration description. </param>
        /// <param name="crossMetricsOperator"> cross metrics operator. </param>
        /// <param name="splitAlertByDimensions"> dimensions used to split alert. </param>
        /// <param name="hookIds"> hook unique ids. </param>
        /// <param name="metricAlertingConfigurations"> Anomaly alerting configurations. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AnomalyAlertingConfigurationPatch(string name, string description, MetricAlertConfigurationsOperator? crossMetricsOperator, IList<string> splitAlertByDimensions, IList<Guid> hookIds, IList<MetricAlertConfiguration> metricAlertingConfigurations, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Description = description;
            CrossMetricsOperator = crossMetricsOperator;
            SplitAlertByDimensions = splitAlertByDimensions;
            HookIds = hookIds;
            MetricAlertingConfigurations = metricAlertingConfigurations;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Anomaly alerting configuration name. </summary>
        public string Name { get; set; }
        /// <summary> anomaly alerting configuration description. </summary>
        public string Description { get; set; }
        /// <summary> cross metrics operator. </summary>
        public MetricAlertConfigurationsOperator? CrossMetricsOperator { get; set; }
    }
}
