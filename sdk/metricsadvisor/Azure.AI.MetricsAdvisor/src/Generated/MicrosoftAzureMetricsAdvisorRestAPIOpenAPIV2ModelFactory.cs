// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.AI.MetricsAdvisor;
using Azure.AI.MetricsAdvisor.Administration;

namespace Azure.AI.MetricsAdvisor.Models
{
    /// <summary> Model factory for generated models. </summary>
    internal static partial class MicrosoftAzureMetricsAdvisorRestAPIOpenAPIV2ModelFactory
    {
        /// <summary> Initializes a new instance of AnomalyAlertConfiguration. </summary>
        /// <param name="id"> anomaly alerting configuration unique id. </param>
        /// <param name="name"> anomaly alerting configuration name. </param>
        /// <param name="description"> anomaly alerting configuration description. </param>
        /// <param name="crossMetricsOperator">
        /// cross metrics operator
        /// 
        /// should be specified when setting up multiple metric alerting configurations
        /// </param>
        /// <param name="dimensionsToSplitAlert"> dimensions used to split alert. </param>
        /// <param name="idsOfHooksToAlert"> hook unique ids. </param>
        /// <param name="metricAlertConfigurations"> Anomaly alerting configurations. </param>
        /// <returns> A new <see cref="Models.AnomalyAlertConfiguration"/> instance for mocking. </returns>
        public static AnomalyAlertConfiguration AnomalyAlertConfiguration(string id = null, string name = null, string description = null, MetricAlertConfigurationsOperator? crossMetricsOperator = null, IEnumerable<string> dimensionsToSplitAlert = null, IEnumerable<string> idsOfHooksToAlert = null, IEnumerable<MetricAlertConfiguration> metricAlertConfigurations = null)
        {
            dimensionsToSplitAlert ??= new List<string>();
            idsOfHooksToAlert ??= new List<string>();
            metricAlertConfigurations ??= new List<MetricAlertConfiguration>();

            return new AnomalyAlertConfiguration(id, name, description, crossMetricsOperator, dimensionsToSplitAlert?.ToList(), idsOfHooksToAlert?.ToList(), metricAlertConfigurations?.ToList());
        }

        /// <summary> Initializes a new instance of MetricAlertConfiguration. </summary>
        /// <param name="detectionConfigurationId"> Anomaly detection configuration unique id. </param>
        /// <param name="anomalyScopeType"> Anomaly scope. </param>
        /// <param name="useDetectionResultToFilterAnomalies"> Negation operation. </param>
        /// <param name="dimensionAnomalyScope"></param>
        /// <param name="topNAnomalyScope"></param>
        /// <param name="severityFilter"></param>
        /// <param name="alertSnoozeCondition"></param>
        /// <param name="valueFilter"></param>
        /// <returns> A new <see cref="Models.MetricAlertConfiguration"/> instance for mocking. </returns>
        public static MetricAlertConfiguration MetricAlertConfiguration(string detectionConfigurationId = null, MetricAnomalyAlertScopeType anomalyScopeType = default, bool? useDetectionResultToFilterAnomalies = null, DimensionKey dimensionAnomalyScope = null, TopNGroupScope topNAnomalyScope = null, SeverityCondition severityFilter = null, MetricAnomalyAlertSnoozeCondition alertSnoozeCondition = null, MetricBoundaryCondition valueFilter = null)
        {
            return new MetricAlertConfiguration(detectionConfigurationId, anomalyScopeType, useDetectionResultToFilterAnomalies, dimensionAnomalyScope, topNAnomalyScope, severityFilter, alertSnoozeCondition, valueFilter);
        }

        /// <summary> Initializes a new instance of MetricBoundaryCondition. </summary>
        /// <param name="lowerBound">
        /// lower bound
        /// 
        /// should be specified when direction is Both or Down
        /// </param>
        /// <param name="upperBound">
        /// upper bound
        /// 
        /// should be specified when direction is Both or Up
        /// </param>
        /// <param name="direction"> value filter direction. </param>
        /// <param name="measureType"> data used to implement value filter. </param>
        /// <param name="companionMetricId"> the other metric unique id used for value filter. </param>
        /// <param name="shouldAlertIfDataPointMissing">
        /// trigger alert when the corresponding point is missing in the other metric
        /// 
        /// should be specified only when using other metric to filter
        /// </param>
        /// <returns> A new <see cref="Models.MetricBoundaryCondition"/> instance for mocking. </returns>
        public static MetricBoundaryCondition MetricBoundaryCondition(double? lowerBound = null, double? upperBound = null, BoundaryDirection direction = default, BoundaryMeasureType? measureType = null, string companionMetricId = null, bool? shouldAlertIfDataPointMissing = null)
        {
            return new MetricBoundaryCondition(lowerBound, upperBound, direction, measureType, companionMetricId, shouldAlertIfDataPointMissing);
        }

        /// <summary> Initializes a new instance of AnomalyAlert. </summary>
        /// <param name="id"> alert id. </param>
        /// <param name="timestamp"> anomaly time. </param>
        /// <param name="createdOn"> created time. </param>
        /// <param name="lastModified"> modified time. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <returns> A new <see cref="Models.AnomalyAlert"/> instance for mocking. </returns>
        public static AnomalyAlert AnomalyAlert(string id = null, DateTimeOffset timestamp = default, DateTimeOffset createdOn = default, DateTimeOffset lastModified = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            return new AnomalyAlert(id, timestamp, createdOn, lastModified);
        }

        /// <summary> Initializes a new instance of AnomalyDetectionConfiguration. </summary>
        /// <param name="id"> anomaly detection configuration unique id. </param>
        /// <param name="name"> anomaly detection configuration name. </param>
        /// <param name="description"> anomaly detection configuration description. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="wholeSeriesDetectionConditions"></param>
        /// <param name="seriesGroupDetectionConditions"> detection configuration for series group. </param>
        /// <param name="seriesDetectionConditions"> detection configuration for specific series. </param>
        /// <returns> A new <see cref="Models.AnomalyDetectionConfiguration"/> instance for mocking. </returns>
        public static AnomalyDetectionConfiguration AnomalyDetectionConfiguration(string id = null, string name = null, string description = null, string metricId = null, MetricWholeSeriesDetectionCondition wholeSeriesDetectionConditions = null, IEnumerable<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions = null, IEnumerable<MetricSingleSeriesDetectionCondition> seriesDetectionConditions = null)
        {
            seriesGroupDetectionConditions ??= new List<MetricSeriesGroupDetectionCondition>();
            seriesDetectionConditions ??= new List<MetricSingleSeriesDetectionCondition>();

            return new AnomalyDetectionConfiguration(id, name, description, metricId, wholeSeriesDetectionConditions, seriesGroupDetectionConditions?.ToList(), seriesDetectionConditions?.ToList());
        }

        /// <summary> Initializes a new instance of MetricWholeSeriesDetectionCondition. </summary>
        /// <param name="conditionOperator">
        /// condition operator
        /// 
        /// should be specified when combining multiple detection conditions
        /// </param>
        /// <param name="smartDetectionCondition"></param>
        /// <param name="hardThresholdCondition"></param>
        /// <param name="changeThresholdCondition"></param>
        /// <returns> A new <see cref="Models.MetricWholeSeriesDetectionCondition"/> instance for mocking. </returns>
        public static MetricWholeSeriesDetectionCondition MetricWholeSeriesDetectionCondition(DetectionConditionOperator? conditionOperator = null, SmartDetectionCondition smartDetectionCondition = null, HardThresholdCondition hardThresholdCondition = null, ChangeThresholdCondition changeThresholdCondition = null)
        {
            return new MetricWholeSeriesDetectionCondition(conditionOperator, smartDetectionCondition, hardThresholdCondition, changeThresholdCondition);
        }

        /// <summary> Initializes a new instance of HardThresholdCondition. </summary>
        /// <param name="lowerBound">
        /// lower bound
        /// 
        /// should be specified when anomalyDetectorDirection is Both or Down
        /// </param>
        /// <param name="upperBound">
        /// upper bound
        /// 
        /// should be specified when anomalyDetectorDirection is Both or Up
        /// </param>
        /// <param name="anomalyDetectorDirection"> detection direction. </param>
        /// <param name="suppressCondition"></param>
        /// <returns> A new <see cref="Models.HardThresholdCondition"/> instance for mocking. </returns>
        public static HardThresholdCondition HardThresholdCondition(double? lowerBound = null, double? upperBound = null, AnomalyDetectorDirection anomalyDetectorDirection = default, SuppressCondition suppressCondition = null)
        {
            return new HardThresholdCondition(lowerBound, upperBound, anomalyDetectorDirection, suppressCondition);
        }

        /// <summary> Initializes a new instance of MetricSeriesGroupDetectionCondition. </summary>
        /// <param name="conditionOperator">
        /// condition operator
        /// 
        /// should be specified when combining multiple detection conditions
        /// </param>
        /// <param name="smartDetectionCondition"></param>
        /// <param name="hardThresholdCondition"></param>
        /// <param name="changeThresholdCondition"></param>
        /// <param name="seriesGroupKey"></param>
        /// <returns> A new <see cref="Models.MetricSeriesGroupDetectionCondition"/> instance for mocking. </returns>
        public static MetricSeriesGroupDetectionCondition MetricSeriesGroupDetectionCondition(DetectionConditionOperator? conditionOperator = null, SmartDetectionCondition smartDetectionCondition = null, HardThresholdCondition hardThresholdCondition = null, ChangeThresholdCondition changeThresholdCondition = null, DimensionKey seriesGroupKey = null)
        {
            return new MetricSeriesGroupDetectionCondition(conditionOperator, smartDetectionCondition, hardThresholdCondition, changeThresholdCondition, seriesGroupKey);
        }

        /// <summary> Initializes a new instance of IncidentRootCause. </summary>
        /// <param name="seriesKey"></param>
        /// <param name="paths"> drilling down path from query anomaly to root cause. </param>
        /// <param name="contributionScore"> score of the root cause. </param>
        /// <param name="description"> description of the root cause. </param>
        /// <returns> A new <see cref="Models.IncidentRootCause"/> instance for mocking. </returns>
        public static IncidentRootCause IncidentRootCause(DimensionKey seriesKey = null, IEnumerable<string> paths = null, double contributionScore = default, string description = null)
        {
            paths ??= new List<string>();

            return new IncidentRootCause(seriesKey, paths?.ToList(), contributionScore, description);
        }

        /// <summary> Initializes a new instance of DataSourceCredentialEntity. </summary>
        /// <param name="credentialKind"> Type of data source credential. </param>
        /// <param name="id"> Unique id of data source credential. </param>
        /// <param name="name"> Name of data source credential. </param>
        /// <param name="description"> Description of data source credential. </param>
        /// <returns> A new <see cref="Administration.DataSourceCredentialEntity"/> instance for mocking. </returns>
        public static DataSourceCredentialEntity DataSourceCredentialEntity(string credentialKind = null, string id = null, string name = null, string description = null)
        {
            return new UnknownDataSourceCredential(credentialKind, id, name, description);
        }

        /// <summary> Initializes a new instance of DataFeedMetric. </summary>
        /// <param name="id"> metric id. </param>
        /// <param name="name"> metric name. </param>
        /// <param name="displayName"> metric display name. </param>
        /// <param name="description"> metric description. </param>
        /// <returns> A new <see cref="Models.DataFeedMetric"/> instance for mocking. </returns>
        public static DataFeedMetric DataFeedMetric(string id = null, string name = null, string displayName = null, string description = null)
        {
            return new DataFeedMetric(id, name, displayName, description);
        }

        /// <summary> Initializes a new instance of DataFeedDimension. </summary>
        /// <param name="name"> dimension name. </param>
        /// <param name="displayName"> dimension display name. </param>
        /// <returns> A new <see cref="Models.DataFeedDimension"/> instance for mocking. </returns>
        public static DataFeedDimension DataFeedDimension(string name = null, string displayName = null)
        {
            return new DataFeedDimension(name, displayName);
        }

        /// <summary> Initializes a new instance of MetricFeedback. </summary>
        /// <param name="feedbackKind"> feedback type. </param>
        /// <param name="id"> feedback unique id. </param>
        /// <param name="createdOn"> feedback created time. </param>
        /// <param name="userPrincipal"> user who gives this feedback. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="dimensionFilter"></param>
        /// <returns> A new <see cref="MetricsAdvisor.MetricFeedback"/> instance for mocking. </returns>
        public static MetricFeedback MetricFeedback(string feedbackKind = null, string id = null, DateTimeOffset? createdOn = null, string userPrincipal = null, string metricId = null, FeedbackFilter dimensionFilter = null)
        {
            return new UnknownMetricFeedback(feedbackKind, id, createdOn, userPrincipal, metricId, dimensionFilter);
        }

        /// <summary> Initializes a new instance of NotificationHook. </summary>
        /// <param name="hookKind"> hook type. </param>
        /// <param name="id"> Hook unique id. </param>
        /// <param name="name"> hook unique name. </param>
        /// <param name="description"> hook description. </param>
        /// <param name="internalExternalLink"> hook external link. </param>
        /// <param name="administrators"> hook administrators. </param>
        /// <returns> A new <see cref="Administration.NotificationHook"/> instance for mocking. </returns>
        public static NotificationHook NotificationHook(string hookKind = null, string id = null, string name = null, string description = null, string internalExternalLink = null, IEnumerable<string> administrators = null)
        {
            administrators ??= new List<string>();

            return new UnknownHookInfo(hookKind, id, name, description, internalExternalLink, administrators?.ToList());
        }

        /// <summary> Initializes a new instance of DataFeedIngestionStatus. </summary>
        /// <param name="timestamp"> data slice timestamp. </param>
        /// <param name="status"> latest ingestion task status for this data slice. </param>
        /// <param name="message"> the trimmed message of last ingestion job. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Models.DataFeedIngestionStatus"/> instance for mocking. </returns>
        public static DataFeedIngestionStatus DataFeedIngestionStatus(DateTimeOffset timestamp = default, IngestionStatusType status = default, string message = null)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new DataFeedIngestionStatus(timestamp, status, message);
        }

        /// <summary> Initializes a new instance of DataFeedIngestionProgress. </summary>
        /// <param name="latestSuccessTimestamp">
        /// the timestamp of latest success ingestion job.
        /// null indicates not available
        /// </param>
        /// <param name="latestActiveTimestamp">
        /// the timestamp of latest ingestion job with status update.
        /// null indicates not available
        /// </param>
        /// <returns> A new <see cref="Models.DataFeedIngestionProgress"/> instance for mocking. </returns>
        public static DataFeedIngestionProgress DataFeedIngestionProgress(DateTimeOffset? latestSuccessTimestamp = null, DateTimeOffset? latestActiveTimestamp = null)
        {
            return new DataFeedIngestionProgress(latestSuccessTimestamp, latestActiveTimestamp);
        }

        /// <summary> Initializes a new instance of MetricSeriesData. </summary>
        /// <param name="definition"></param>
        /// <param name="timestamps"> timestamps of the data related to this time series. </param>
        /// <param name="metricValues"> values of the data related to this time series. </param>
        /// <returns> A new <see cref="Models.MetricSeriesData"/> instance for mocking. </returns>
        public static MetricSeriesData MetricSeriesData(MetricSeriesDefinition definition = null, IEnumerable<DateTimeOffset> timestamps = null, IEnumerable<double> metricValues = null)
        {
            timestamps ??= new List<DateTimeOffset>();
            metricValues ??= new List<double>();

            return new MetricSeriesData(definition, timestamps?.ToList(), metricValues?.ToList());
        }

        /// <summary> Initializes a new instance of MetricSeriesDefinition. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="dimension"> dimension name and value pair. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="metricId"/> or <paramref name="dimension"/> is null. </exception>
        /// <returns> A new <see cref="Models.MetricSeriesDefinition"/> instance for mocking. </returns>
        public static MetricSeriesDefinition MetricSeriesDefinition(string metricId = null, IReadOnlyDictionary<string, string> dimension = null)
        {
            if (metricId == null)
            {
                throw new ArgumentNullException(nameof(metricId));
            }
            dimension ??= new Dictionary<string, string>();

            return new MetricSeriesDefinition(metricId, dimension);
        }

        /// <summary> Initializes a new instance of EnrichmentStatus. </summary>
        /// <param name="timestamp"> data slice timestamp. </param>
        /// <param name="status"> latest enrichment status for this data slice. </param>
        /// <param name="message"> the trimmed message describes details of the enrichment status. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="status"/> or <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Models.EnrichmentStatus"/> instance for mocking. </returns>
        public static EnrichmentStatus EnrichmentStatus(DateTimeOffset timestamp = default, string status = null, string message = null)
        {
            if (status == null)
            {
                throw new ArgumentNullException(nameof(status));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new EnrichmentStatus(timestamp, status, message);
        }
    }
}
