// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.GuestConfiguration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Configuration setting of LCM (Local Configuration Manager).
    /// </summary>
    public partial class ConfigurationSetting
    {
        /// <summary>
        /// Initializes a new instance of the ConfigurationSetting class.
        /// </summary>
        public ConfigurationSetting()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConfigurationSetting class.
        /// </summary>
        /// <param name="configurationMode">Specifies how the LCM(Local
        /// Configuration Manager) actually applies the configuration to the
        /// target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and
        /// ApplyAndAutoCorrect. Possible values include: 'ApplyOnly',
        /// 'ApplyAndMonitor', 'ApplyAndAutoCorrect'</param>
        /// <param name="allowModuleOverwrite">If true - new configurations
        /// downloaded from the pull service are allowed to overwrite the old
        /// ones on the target node. Otherwise, false. Possible values include:
        /// 'True', 'False'</param>
        /// <param name="actionAfterReboot">Specifies what happens after a
        /// reboot during the application of a configuration. The possible
        /// values are ContinueConfiguration and StopConfiguration. Possible
        /// values include: 'ContinueConfiguration',
        /// 'StopConfiguration'</param>
        /// <param name="refreshFrequencyMins">The time interval, in minutes,
        /// at which the LCM checks a pull service to get updated
        /// configurations. This value is ignored if the LCM is not configured
        /// in pull mode. The default value is 30.</param>
        /// <param name="rebootIfNeeded">Set this to true to automatically
        /// reboot the node after a configuration that requires reboot is
        /// applied. Otherwise, you will have to manually reboot the node for
        /// any configuration that requires it. The default value is false. To
        /// use this setting when a reboot condition is enacted by something
        /// other than DSC (such as Windows Installer), combine this setting
        /// with the xPendingReboot module. Possible values include: 'True',
        /// 'False'</param>
        /// <param name="configurationModeFrequencyMins">How often, in minutes,
        /// the current configuration is checked and applied. This property is
        /// ignored if the ConfigurationMode property is set to ApplyOnly. The
        /// default value is 15.</param>
        public ConfigurationSetting(string configurationMode = default(string), string allowModuleOverwrite = default(string), string actionAfterReboot = default(string), double? refreshFrequencyMins = default(double?), string rebootIfNeeded = default(string), double? configurationModeFrequencyMins = default(double?))
        {
            ConfigurationMode = configurationMode;
            AllowModuleOverwrite = allowModuleOverwrite;
            ActionAfterReboot = actionAfterReboot;
            RefreshFrequencyMins = refreshFrequencyMins;
            RebootIfNeeded = rebootIfNeeded;
            ConfigurationModeFrequencyMins = configurationModeFrequencyMins;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets specifies how the LCM(Local Configuration Manager) actually
        /// applies the configuration to the target nodes. Possible values are
        /// ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect. Possible
        /// values include: 'ApplyOnly', 'ApplyAndMonitor',
        /// 'ApplyAndAutoCorrect'
        /// </summary>
        [JsonProperty(PropertyName = "configurationMode")]
        public string ConfigurationMode { get; private set; }

        /// <summary>
        /// Gets or sets if true - new configurations downloaded from the pull
        /// service are allowed to overwrite the old ones on the target node.
        /// Otherwise, false. Possible values include: 'True', 'False'
        /// </summary>
        [JsonProperty(PropertyName = "allowModuleOverwrite")]
        public string AllowModuleOverwrite { get; set; }

        /// <summary>
        /// Gets specifies what happens after a reboot during the application
        /// of a configuration. The possible values are ContinueConfiguration
        /// and StopConfiguration. Possible values include:
        /// 'ContinueConfiguration', 'StopConfiguration'
        /// </summary>
        [JsonProperty(PropertyName = "actionAfterReboot")]
        public string ActionAfterReboot { get; private set; }

        /// <summary>
        /// Gets the time interval, in minutes, at which the LCM checks a pull
        /// service to get updated configurations. This value is ignored if the
        /// LCM is not configured in pull mode. The default value is 30.
        /// </summary>
        [JsonProperty(PropertyName = "refreshFrequencyMins")]
        public double? RefreshFrequencyMins { get; private set; }

        /// <summary>
        /// Gets set this to true to automatically reboot the node after a
        /// configuration that requires reboot is applied. Otherwise, you will
        /// have to manually reboot the node for any configuration that
        /// requires it. The default value is false. To use this setting when a
        /// reboot condition is enacted by something other than DSC (such as
        /// Windows Installer), combine this setting with the xPendingReboot
        /// module. Possible values include: 'True', 'False'
        /// </summary>
        [JsonProperty(PropertyName = "rebootIfNeeded")]
        public string RebootIfNeeded { get; private set; }

        /// <summary>
        /// Gets how often, in minutes, the current configuration is checked
        /// and applied. This property is ignored if the ConfigurationMode
        /// property is set to ApplyOnly. The default value is 15.
        /// </summary>
        [JsonProperty(PropertyName = "configurationModeFrequencyMins")]
        public double? ConfigurationModeFrequencyMins { get; private set; }

    }
}
