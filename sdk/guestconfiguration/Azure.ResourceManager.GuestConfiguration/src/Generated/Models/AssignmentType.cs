// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.GuestConfiguration.Models
{
    /// <summary> Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor. </summary>
    public readonly partial struct AssignmentType : IEquatable<AssignmentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssignmentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssignmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AuditValue = "Audit";
        private const string DeployAndAutoCorrectValue = "DeployAndAutoCorrect";
        private const string ApplyAndAutoCorrectValue = "ApplyAndAutoCorrect";
        private const string ApplyAndMonitorValue = "ApplyAndMonitor";

        /// <summary> Audit. </summary>
        public static AssignmentType Audit { get; } = new AssignmentType(AuditValue);
        /// <summary> DeployAndAutoCorrect. </summary>
        public static AssignmentType DeployAndAutoCorrect { get; } = new AssignmentType(DeployAndAutoCorrectValue);
        /// <summary> ApplyAndAutoCorrect. </summary>
        public static AssignmentType ApplyAndAutoCorrect { get; } = new AssignmentType(ApplyAndAutoCorrectValue);
        /// <summary> ApplyAndMonitor. </summary>
        public static AssignmentType ApplyAndMonitor { get; } = new AssignmentType(ApplyAndMonitorValue);
        /// <summary> Determines if two <see cref="AssignmentType"/> values are the same. </summary>
        public static bool operator ==(AssignmentType left, AssignmentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssignmentType"/> values are not the same. </summary>
        public static bool operator !=(AssignmentType left, AssignmentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AssignmentType"/>. </summary>
        public static implicit operator AssignmentType(string value) => new AssignmentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssignmentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssignmentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
