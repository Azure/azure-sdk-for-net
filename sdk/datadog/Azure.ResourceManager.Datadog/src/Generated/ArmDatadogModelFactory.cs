// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Datadog.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDatadogModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.DatadogAgreementResourceProperties"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Represents the properties of the resource. </param>
        /// <returns> A new <see cref="Models.DatadogAgreementResourceProperties"/> instance for mocking. </returns>
        public static DatadogAgreementResourceProperties DatadogAgreementResourceProperties(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DatadogAgreementProperties properties = null)
        {
            return new DatadogAgreementResourceProperties(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Datadog.DatadogMonitorResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Properties specific to the monitor resource. </param>
        /// <param name="skuName"> Represents the SKU of a resource. </param>
        /// <param name="identity"> Gets or sets the identity. Current supported identity types: SystemAssigned, UserAssigned. </param>
        /// <returns> A new <see cref="Datadog.DatadogMonitorResourceData"/> instance for mocking. </returns>
        public static DatadogMonitorResourceData DatadogMonitorResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, MonitorProperties properties = null, string skuName = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DatadogMonitorResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                skuName != null ? new ResourceSku(skuName, serializedAdditionalRawData: null) : null,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MonitorProperties"/>. </summary>
        /// <param name="provisioningState"></param>
        /// <param name="monitoringStatus"> Flag specifying if the resource monitoring is enabled or disabled. </param>
        /// <param name="marketplaceSubscriptionStatus"> Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. </param>
        /// <param name="datadogOrganizationProperties"> Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well. </param>
        /// <param name="userInfo"> Includes name, email and optionally, phone number. User Information can't be null. </param>
        /// <param name="liftrResourceCategory"></param>
        /// <param name="liftrResourcePreference"> The priority of the resource. </param>
        /// <returns> A new <see cref="Models.MonitorProperties"/> instance for mocking. </returns>
        public static MonitorProperties MonitorProperties(ProvisioningState? provisioningState = null, MonitoringStatus? monitoringStatus = null, MarketplaceSubscriptionStatus? marketplaceSubscriptionStatus = null, DatadogOrganizationProperties datadogOrganizationProperties = null, UserInfo userInfo = null, LiftrResourceCategory? liftrResourceCategory = null, int? liftrResourcePreference = null)
        {
            return new MonitorProperties(
                provisioningState,
                monitoringStatus,
                marketplaceSubscriptionStatus,
                datadogOrganizationProperties,
                userInfo,
                liftrResourceCategory,
                liftrResourcePreference,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatadogCreateResourceSupportedResponseResult"/>. </summary>
        /// <param name="properties"> Represents the properties of the resource. </param>
        /// <returns> A new <see cref="Models.DatadogCreateResourceSupportedResponseResult"/> instance for mocking. </returns>
        public static DatadogCreateResourceSupportedResponseResult DatadogCreateResourceSupportedResponseResult(CreateResourceSupportedProperties properties = null)
        {
            return new DatadogCreateResourceSupportedResponseResult(properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateResourceSupportedProperties"/>. </summary>
        /// <param name="name"> The ARM id of the subscription. </param>
        /// <param name="creationSupported"> Indicates if selected subscription supports Datadog resource creation, if not it is already being monitored for the selected organization via multi subscription feature. </param>
        /// <returns> A new <see cref="Models.CreateResourceSupportedProperties"/> instance for mocking. </returns>
        public static CreateResourceSupportedProperties CreateResourceSupportedProperties(string name = null, bool? creationSupported = null)
        {
            return new CreateResourceSupportedProperties(name, creationSupported, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatadogBillingInfoResponseResult"/>. </summary>
        /// <param name="marketplaceSaasInfo"> Marketplace Subscription details. </param>
        /// <param name="partnerBillingEntity"> Partner Billing Entity details: Organization Info. </param>
        /// <returns> A new <see cref="Models.DatadogBillingInfoResponseResult"/> instance for mocking. </returns>
        public static DatadogBillingInfoResponseResult DatadogBillingInfoResponseResult(MarketplaceSaaSInfo marketplaceSaasInfo = null, PartnerBillingEntity partnerBillingEntity = null)
        {
            return new DatadogBillingInfoResponseResult(marketplaceSaasInfo, partnerBillingEntity, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceSaaSInfo"/>. </summary>
        /// <param name="marketplaceSubscriptionId"> Marketplace Subscription Id. This is a GUID-formatted string. </param>
        /// <param name="marketplaceName"> Marketplace Subscription Details: SAAS Name. </param>
        /// <param name="marketplaceStatus"> Marketplace Subscription Details: SaaS Subscription Status. </param>
        /// <param name="billedAzureSubscriptionId"> The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into. </param>
        /// <param name="subscribed"> Flag specifying if the Marketplace status is subscribed or not. </param>
        /// <returns> A new <see cref="Models.MarketplaceSaaSInfo"/> instance for mocking. </returns>
        public static MarketplaceSaaSInfo MarketplaceSaaSInfo(string marketplaceSubscriptionId = null, string marketplaceName = null, string marketplaceStatus = null, string billedAzureSubscriptionId = null, bool? subscribed = null)
        {
            return new MarketplaceSaaSInfo(
                marketplaceSubscriptionId,
                marketplaceName,
                marketplaceStatus,
                billedAzureSubscriptionId,
                subscribed,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PartnerBillingEntity"/>. </summary>
        /// <param name="id"> The Datadog Organization Id. </param>
        /// <param name="name"> The Datadog Organization Name. </param>
        /// <param name="partnerEntityUri"> Link to the datadog organization page. </param>
        /// <returns> A new <see cref="Models.PartnerBillingEntity"/> instance for mocking. </returns>
        public static PartnerBillingEntity PartnerBillingEntity(string id = null, string name = null, Uri partnerEntityUri = null)
        {
            return new PartnerBillingEntity(id, name, partnerEntityUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatadogHost"/>. </summary>
        /// <param name="name"> The name of the host. </param>
        /// <param name="aliases"> The aliases for the host installed via the Datadog agent. </param>
        /// <param name="apps"> The Datadog integrations reporting metrics for the host. </param>
        /// <param name="meta"></param>
        /// <returns> A new <see cref="Models.DatadogHost"/> instance for mocking. </returns>
        public static DatadogHost DatadogHost(string name = null, IEnumerable<string> aliases = null, IEnumerable<string> apps = null, DatadogHostMetadata meta = null)
        {
            aliases ??= new List<string>();
            apps ??= new List<string>();

            return new DatadogHost(name, aliases?.ToList(), apps?.ToList(), meta, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatadogHostMetadata"/>. </summary>
        /// <param name="agentVersion"> The agent version. </param>
        /// <param name="installMethod"></param>
        /// <param name="logsAgentTransport"></param>
        /// <returns> A new <see cref="Models.DatadogHostMetadata"/> instance for mocking. </returns>
        public static DatadogHostMetadata DatadogHostMetadata(string agentVersion = null, DatadogInstallMethod installMethod = null, string logsAgentTransport = null)
        {
            return new DatadogHostMetadata(agentVersion, installMethod, logsAgentTransport != null ? new DatadogLogsAgent(logsAgentTransport, serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatadogInstallMethod"/>. </summary>
        /// <param name="tool"> The tool. </param>
        /// <param name="toolVersion"> The tool version. </param>
        /// <param name="installerVersion"> The installer version. </param>
        /// <returns> A new <see cref="Models.DatadogInstallMethod"/> instance for mocking. </returns>
        public static DatadogInstallMethod DatadogInstallMethod(string tool = null, string toolVersion = null, string installerVersion = null)
        {
            return new DatadogInstallMethod(tool, toolVersion, installerVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LinkedInfo"/>. </summary>
        /// <param name="id"> The ARM id of the linked resource. </param>
        /// <param name="location"> The location of the linked resource. </param>
        /// <returns> A new <see cref="Models.LinkedInfo"/> instance for mocking. </returns>
        public static LinkedInfo LinkedInfo(string id = null, AzureLocation? location = null)
        {
            return new LinkedInfo(id, location, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MonitoredResourceContent"/>. </summary>
        /// <param name="id"> The ARM id of the resource. </param>
        /// <param name="sendingMetrics"> Flag indicating if resource is sending metrics to Datadog. </param>
        /// <param name="reasonForMetricsStatus"> Reason for why the resource is sending metrics (or why it is not sending). </param>
        /// <param name="sendingLogs"> Flag indicating if resource is sending logs to Datadog. </param>
        /// <param name="reasonForLogsStatus"> Reason for why the resource is sending logs (or why it is not sending). </param>
        /// <returns> A new <see cref="Models.MonitoredResourceContent"/> instance for mocking. </returns>
        public static MonitoredResourceContent MonitoredResourceContent(string id = null, bool? sendingMetrics = null, string reasonForMetricsStatus = null, bool? sendingLogs = null, string reasonForLogsStatus = null)
        {
            return new MonitoredResourceContent(
                id,
                sendingMetrics,
                reasonForMetricsStatus,
                sendingLogs,
                reasonForLogsStatus,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Datadog.MonitoredSubscriptionPropertyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The request to update subscriptions needed to be monitored by the Datadog monitor resource. </param>
        /// <returns> A new <see cref="Datadog.MonitoredSubscriptionPropertyData"/> instance for mocking. </returns>
        public static MonitoredSubscriptionPropertyData MonitoredSubscriptionPropertyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SubscriptionList properties = null)
        {
            return new MonitoredSubscriptionPropertyData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MonitoringTagRulesProperties"/>. </summary>
        /// <param name="provisioningState"></param>
        /// <param name="logRules"> Set of rules for sending logs for the Monitor resource. </param>
        /// <param name="metricRulesFilteringTags"> Set of rules for sending metrics for the Monitor resource. </param>
        /// <param name="automuting"> Configuration to enable/disable auto-muting flag. </param>
        /// <param name="customMetrics"> Configuration to enable/disable custom metrics. If enabled, custom metrics from app insights will be sent. </param>
        /// <returns> A new <see cref="Models.MonitoringTagRulesProperties"/> instance for mocking. </returns>
        public static MonitoringTagRulesProperties MonitoringTagRulesProperties(ProvisioningState? provisioningState = null, LogRules logRules = null, IEnumerable<FilteringTag> metricRulesFilteringTags = null, bool? automuting = null, bool? customMetrics = null)
        {
            metricRulesFilteringTags ??= new List<FilteringTag>();

            return new MonitoringTagRulesProperties(
                provisioningState,
                logRules,
                metricRulesFilteringTags != null ? new MetricRules(metricRulesFilteringTags?.ToList(), serializedAdditionalRawData: null) : null,
                automuting,
                customMetrics,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatadogSetPasswordLink"/>. </summary>
        /// <param name="setPasswordLink"></param>
        /// <returns> A new <see cref="Models.DatadogSetPasswordLink"/> instance for mocking. </returns>
        public static DatadogSetPasswordLink DatadogSetPasswordLink(string setPasswordLink = null)
        {
            return new DatadogSetPasswordLink(setPasswordLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Datadog.DatadogSingleSignOnResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Datadog.DatadogSingleSignOnResourceData"/> instance for mocking. </returns>
        public static DatadogSingleSignOnResourceData DatadogSingleSignOnResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DatadogSingleSignOnProperties properties = null)
        {
            return new DatadogSingleSignOnResourceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatadogSingleSignOnProperties"/>. </summary>
        /// <param name="provisioningState"></param>
        /// <param name="singleSignOnState"> Various states of the SSO resource. </param>
        /// <param name="enterpriseAppId"> The Id of the Enterprise App used for Single sign-on. </param>
        /// <param name="singleSignOnUri"> The login URL specific to this Datadog Organization. </param>
        /// <returns> A new <see cref="Models.DatadogSingleSignOnProperties"/> instance for mocking. </returns>
        public static DatadogSingleSignOnProperties DatadogSingleSignOnProperties(ProvisioningState? provisioningState = null, SingleSignOnState? singleSignOnState = null, string enterpriseAppId = null, Uri singleSignOnUri = null)
        {
            return new DatadogSingleSignOnProperties(provisioningState, singleSignOnState, enterpriseAppId, singleSignOnUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Datadog.MonitoringTagRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Definition of the properties for a TagRules resource. </param>
        /// <returns> A new <see cref="Datadog.MonitoringTagRuleData"/> instance for mocking. </returns>
        public static MonitoringTagRuleData MonitoringTagRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MonitoringTagRulesProperties properties = null)
        {
            return new MonitoringTagRuleData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }
    }
}
