// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Datadog.Models
{
    public partial class DatadogOrganizationProperties : IUtf8JsonSerializable, IModelJsonSerializable<DatadogOrganizationProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DatadogOrganizationProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DatadogOrganizationProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<DatadogOrganizationProperties>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(LinkingAuthCode))
            {
                writer.WritePropertyName("linkingAuthCode"u8);
                writer.WriteStringValue(LinkingAuthCode);
            }
            if (Optional.IsDefined(LinkingClientId))
            {
                writer.WritePropertyName("linkingClientId"u8);
                writer.WriteStringValue(LinkingClientId);
            }
            if (Optional.IsDefined(RedirectUri))
            {
                writer.WritePropertyName("redirectUri"u8);
                writer.WriteStringValue(RedirectUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ApiKey))
            {
                writer.WritePropertyName("apiKey"u8);
                writer.WriteStringValue(ApiKey);
            }
            if (Optional.IsDefined(ApplicationKey))
            {
                writer.WritePropertyName("applicationKey"u8);
                writer.WriteStringValue(ApplicationKey);
            }
            if (Optional.IsDefined(EnterpriseAppId))
            {
                writer.WritePropertyName("enterpriseAppId"u8);
                writer.WriteStringValue(EnterpriseAppId);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static DatadogOrganizationProperties DeserializeDatadogOrganizationProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<string> id = default;
            Optional<string> linkingAuthCode = default;
            Optional<string> linkingClientId = default;
            Optional<Uri> redirectUri = default;
            Optional<string> apiKey = default;
            Optional<string> applicationKey = default;
            Optional<string> enterpriseAppId = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("linkingAuthCode"u8))
                {
                    linkingAuthCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("linkingClientId"u8))
                {
                    linkingClientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("redirectUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    redirectUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("apiKey"u8))
                {
                    apiKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationKey"u8))
                {
                    applicationKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enterpriseAppId"u8))
                {
                    enterpriseAppId = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new DatadogOrganizationProperties(name.Value, id.Value, linkingAuthCode.Value, linkingClientId.Value, redirectUri.Value, apiKey.Value, applicationKey.Value, enterpriseAppId.Value, rawData);
        }

        DatadogOrganizationProperties IModelJsonSerializable<DatadogOrganizationProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<DatadogOrganizationProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDatadogOrganizationProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DatadogOrganizationProperties>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<DatadogOrganizationProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        DatadogOrganizationProperties IModelSerializable<DatadogOrganizationProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<DatadogOrganizationProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeDatadogOrganizationProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="DatadogOrganizationProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="DatadogOrganizationProperties"/> to convert. </param>
        public static implicit operator RequestContent(DatadogOrganizationProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="DatadogOrganizationProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator DatadogOrganizationProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeDatadogOrganizationProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
