// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.ContainerRegistry.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The platform object describes the platform which the image in the
    /// manifest runs on. A full list of valid operating system and
    /// architecture values are listed in the Go language documentation for
    /// $GOOS and $GOARCH
    /// </summary>
    public partial class Platform
    {
        /// <summary>
        /// Initializes a new instance of the Platform class.
        /// </summary>
        public Platform()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Platform class.
        /// </summary>
        /// <param name="architecture">Specifies the CPU architecture, for
        /// example amd64 or ppc64le.</param>
        /// <param name="os">The os field specifies the operating system, for
        /// example linux or windows.</param>
        /// <param name="osversion">The optional os.version field specifies the
        /// operating system version, for example 10.0.10586.</param>
        /// <param name="osfeatures">The optional os.features field specifies
        /// an array of strings, each listing a required OS feature (for
        /// example on Windows win32k</param>
        /// <param name="variant">The optional variant field specifies a
        /// variant of the CPU, for example armv6l to specify a particular CPU
        /// variant of the ARM CPU.</param>
        /// <param name="features">The optional features field specifies an
        /// array of strings, each listing a required CPU feature (for example
        /// sse4 or aes</param>
        public Platform(string architecture = default(string), string os = default(string), string osversion = default(string), IList<string> osfeatures = default(IList<string>), string variant = default(string), IList<string> features = default(IList<string>))
        {
            Architecture = architecture;
            Os = os;
            Osversion = osversion;
            Osfeatures = osfeatures;
            Variant = variant;
            Features = features;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the CPU architecture, for example amd64 or
        /// ppc64le.
        /// </summary>
        [JsonProperty(PropertyName = "architecture")]
        public string Architecture { get; set; }

        /// <summary>
        /// Gets or sets the os field specifies the operating system, for
        /// example linux or windows.
        /// </summary>
        [JsonProperty(PropertyName = "os")]
        public string Os { get; set; }

        /// <summary>
        /// Gets or sets the optional os.version field specifies the operating
        /// system version, for example 10.0.10586.
        /// </summary>
        [JsonProperty(PropertyName = "os.version")]
        public string Osversion { get; set; }

        /// <summary>
        /// Gets or sets the optional os.features field specifies an array of
        /// strings, each listing a required OS feature (for example on Windows
        /// win32k
        /// </summary>
        [JsonProperty(PropertyName = "os.features")]
        public IList<string> Osfeatures { get; set; }

        /// <summary>
        /// Gets or sets the optional variant field specifies a variant of the
        /// CPU, for example armv6l to specify a particular CPU variant of the
        /// ARM CPU.
        /// </summary>
        [JsonProperty(PropertyName = "variant")]
        public string Variant { get; set; }

        /// <summary>
        /// Gets or sets the optional features field specifies an array of
        /// strings, each listing a required CPU feature (for example sse4 or
        /// aes
        /// </summary>
        [JsonProperty(PropertyName = "features")]
        public IList<string> Features { get; set; }

    }
}
