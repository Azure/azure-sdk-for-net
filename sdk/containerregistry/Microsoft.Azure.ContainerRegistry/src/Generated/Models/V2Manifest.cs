// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.ContainerRegistry.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Returns the requested Docker V2 Manifest file
    /// </summary>
    public partial class V2Manifest : Manifest
    {
        /// <summary>
        /// Initializes a new instance of the V2Manifest class.
        /// </summary>
        public V2Manifest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V2Manifest class.
        /// </summary>
        /// <param name="schemaVersion">Schema version</param>
        /// <param name="mediaType">Media type for this Manifest</param>
        /// <param name="config">V2 image config descriptor</param>
        /// <param name="layers">List of V2 image layer information</param>
        public V2Manifest(int? schemaVersion = default(int?), string mediaType = default(string), Descriptor config = default(Descriptor), IList<Descriptor> layers = default(IList<Descriptor>))
            : base(schemaVersion)
        {
            MediaType = mediaType;
            Config = config;
            Layers = layers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets media type for this Manifest
        /// </summary>
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Gets or sets V2 image config descriptor
        /// </summary>
        [JsonProperty(PropertyName = "config")]
        public Descriptor Config { get; set; }

        /// <summary>
        /// Gets or sets list of V2 image layer information
        /// </summary>
        [JsonProperty(PropertyName = "layers")]
        public IList<Descriptor> Layers { get; set; }

    }
}
