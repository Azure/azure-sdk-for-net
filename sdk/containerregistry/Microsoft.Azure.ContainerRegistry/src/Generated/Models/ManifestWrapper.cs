// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.ContainerRegistry.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Returns the requested manifest file
    /// </summary>
    public partial class ManifestWrapper : Manifest
    {
        /// <summary>
        /// Initializes a new instance of the ManifestWrapper class.
        /// </summary>
        public ManifestWrapper()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManifestWrapper class.
        /// </summary>
        /// <param name="schemaVersion">Schema version</param>
        /// <param name="mediaType">Media type for this Manifest</param>
        /// <param name="manifests">(ManifestList, OCIIndex) List of V2 image
        /// layer information</param>
        /// <param name="config">(V2, OCI) Image config descriptor</param>
        /// <param name="layers">(V2, OCI) List of V2 image layer
        /// information</param>
        /// <param name="annotations">(OCI, OCIIndex) Additional
        /// metadata</param>
        /// <param name="architecture">(V1) CPU architecture</param>
        /// <param name="name">(V1) Image name</param>
        /// <param name="tag">(V1) Image tag</param>
        /// <param name="fsLayers">(V1) List of layer information</param>
        /// <param name="history">(V1) Image history</param>
        /// <param name="signatures">(V1) Image signature</param>
        public ManifestWrapper(int? schemaVersion = default(int?), string mediaType = default(string), IList<ManifestListAttributes> manifests = default(IList<ManifestListAttributes>), Descriptor config = default(Descriptor), IList<Descriptor> layers = default(IList<Descriptor>), Annotations annotations = default(Annotations), string architecture = default(string), string name = default(string), string tag = default(string), IList<FsLayer> fsLayers = default(IList<FsLayer>), IList<History> history = default(IList<History>), IList<ImageSignature> signatures = default(IList<ImageSignature>))
            : base(schemaVersion)
        {
            MediaType = mediaType;
            Manifests = manifests;
            Config = config;
            Layers = layers;
            Annotations = annotations;
            Architecture = architecture;
            Name = name;
            Tag = tag;
            FsLayers = fsLayers;
            History = history;
            Signatures = signatures;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets media type for this Manifest
        /// </summary>
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Gets or sets (ManifestList, OCIIndex) List of V2 image layer
        /// information
        /// </summary>
        [JsonProperty(PropertyName = "manifests")]
        public IList<ManifestListAttributes> Manifests { get; set; }

        /// <summary>
        /// Gets or sets (V2, OCI) Image config descriptor
        /// </summary>
        [JsonProperty(PropertyName = "config")]
        public Descriptor Config { get; set; }

        /// <summary>
        /// Gets or sets (V2, OCI) List of V2 image layer information
        /// </summary>
        [JsonProperty(PropertyName = "layers")]
        public IList<Descriptor> Layers { get; set; }

        /// <summary>
        /// Gets or sets (OCI, OCIIndex) Additional metadata
        /// </summary>
        [JsonProperty(PropertyName = "annotations")]
        public Annotations Annotations { get; set; }

        /// <summary>
        /// Gets or sets (V1) CPU architecture
        /// </summary>
        [JsonProperty(PropertyName = "architecture")]
        public string Architecture { get; set; }

        /// <summary>
        /// Gets or sets (V1) Image name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets (V1) Image tag
        /// </summary>
        [JsonProperty(PropertyName = "tag")]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or sets (V1) List of layer information
        /// </summary>
        [JsonProperty(PropertyName = "fsLayers")]
        public IList<FsLayer> FsLayers { get; set; }

        /// <summary>
        /// Gets or sets (V1) Image history
        /// </summary>
        [JsonProperty(PropertyName = "history")]
        public IList<History> History { get; set; }

        /// <summary>
        /// Gets or sets (V1) Image signature
        /// </summary>
        [JsonProperty(PropertyName = "signatures")]
        public IList<ImageSignature> Signatures { get; set; }

    }
}
