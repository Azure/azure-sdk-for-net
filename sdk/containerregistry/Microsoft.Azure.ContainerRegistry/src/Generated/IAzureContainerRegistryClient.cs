// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.ContainerRegistry
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Metadata API definition for the Azure Container Registry runtime
    /// </summary>
    public partial interface IAzureContainerRegistryClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        ServiceClientCredentials Credentials { get; }

        /// <summary>
        /// Registry login URL
        /// </summary>
        string LoginUri { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// value is 30.
        /// </summary>
        int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When
        /// set to true a unique x-ms-client-request-id value is generated and
        /// included in each request. Default is true.
        /// </summary>
        bool? GenerateClientRequestId { get; set; }


        /// <summary>
        /// Tells whether this Docker Registry instance supports Docker
        /// Registry HTTP API v2
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object>> CheckV2SupportWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pulls the image manifest file associated with the specified name
        /// and reference. Reference may be a tag or a digest
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='reference'>
        /// A tag or a digest, pointing to a specific image
        /// </param>
        /// <param name='accept'>
        /// Accept header string delimited by comma. For example,
        /// application/vnd.docker.distribution.manifest.v2+json
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Manifest>> GetManifestWithHttpMessagesAsync(string name, string reference, string accept = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Put the manifest identified by `name` and `reference` where
        /// `reference` can be a tag or digest.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='reference'>
        /// A tag or a digest, pointing to a specific image
        /// </param>
        /// <param name='payload'>
        /// Manifest body, can take v1 or v2 values depending on accept header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object,CreateManifestHeaders>> CreateManifestWithHttpMessagesAsync(string name, string reference, Manifest payload, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete the manifest identified by `name` and `reference`. Note that
        /// a manifest can _only_ be deleted by `digest`.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='reference'>
        /// A tag or a digest, pointing to a specific image
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> DeleteManifestWithHttpMessagesAsync(string name, string reference, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the blob from the registry identified by digest.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='digest'>
        /// Digest of a BLOB
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Stream,GetBlobHeaders>> GetBlobWithHttpMessagesAsync(string name, string digest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Same as GET, except only the headers are returned.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='digest'>
        /// Digest of a BLOB
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<CheckBlobExistenceHeaders>> CheckBlobExistenceWithHttpMessagesAsync(string name, string digest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='digest'>
        /// Digest of a BLOB
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Stream,DeleteBlobHeaders>> DeleteBlobWithHttpMessagesAsync(string name, string digest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mount a blob identified by the `mount` parameter from another
        /// repository.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='fromParameter'>
        /// Name of the source repository.
        /// </param>
        /// <param name='mount'>
        /// Digest of blob to mount from the source repository.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<StartBlobUploadHeaders>> StartBlobUploadWithHttpMessagesAsync(string name, string fromParameter, string mount, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve status of upload identified by uuid. The primary purpose
        /// of this endpoint is to resolve the current status of a resumable
        /// upload.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='uuid'>
        /// A uuid identifying the upload.
        /// </param>
        /// <param name='_state'>
        /// Acquired from NextLink
        /// </param>
        /// <param name='_nouploadcache'>
        /// Acquired from NextLink
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<GetBlobUploadStatusSpecifiedHeaders>> GetBlobUploadStatusSpecifiedWithHttpMessagesAsync(string name, string uuid, string _state = default(string), bool? _nouploadcache = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload a stream of data without completing the upload. (Complete
        /// path definition)
        /// </summary>
        /// <param name='value'>
        /// </param>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='uuid'>
        /// A uuid identifying the upload.
        /// </param>
        /// <param name='_state'>
        /// Acquired from NextLink
        /// </param>
        /// <param name='_nouploadcache'>
        /// Acquired from NextLink
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<UploadBlobContentSpecifiedHeaders>> UploadBlobContentSpecifiedWithHttpMessagesAsync(Stream value, string name, string uuid, string _state = default(string), bool? _nouploadcache = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Complete the upload, providing all the data in the body, if
        /// necessary. A request without a body will just complete the upload
        /// with previously uploaded content.
        /// </summary>
        /// <param name='digest'>
        /// Digest of a BLOB
        /// </param>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='uuid'>
        /// A uuid identifying the upload.
        /// </param>
        /// <param name='_state'>
        /// Acquired from NextLink
        /// </param>
        /// <param name='_nouploadcache'>
        /// Acquired from NextLink
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<EndBlobUploadSpecifiedHeaders>> EndBlobUploadSpecifiedWithHttpMessagesAsync(string digest, string name, string uuid, string _state = default(string), bool? _nouploadcache = default(bool?), Stream value = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel outstanding upload processes, releasing associated
        /// resources. If this is not called, the unfinished uploads will
        /// eventually timeout.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='uuid'>
        /// A uuid identifying the upload.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> CancelBlobUploadWithHttpMessagesAsync(string name, string uuid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload a stream of data without completing the upload.
        /// </summary>
        /// <param name='value'>
        /// </param>
        /// <param name='location'>
        /// Link acquired from upload start or previous chunk. Note, do not
        /// include initial / (must do substring(1) )
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<UploadBlobContentFromNextHeaders>> UploadBlobContentFromNextWithHttpMessagesAsync(Stream value, string location, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Complete the upload, providing all the data in the body, if
        /// necessary. A request without a body will just complete the upload
        /// with previously uploaded content.
        /// </summary>
        /// <param name='digest'>
        /// Digest of a BLOB
        /// </param>
        /// <param name='location'>
        /// Link acquired from upload start or previous chunk. Note, do not
        /// include initial / (must do substring(1) )
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<EndBlobUploadFromNextHeaders>> EndBlobUploadFromNextWithHttpMessagesAsync(string digest, string location, Stream value = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve status of upload identified by uuid. The primary purpose
        /// of this endpoint is to resolve the current status of a resumable
        /// upload.
        /// </summary>
        /// <param name='location'>
        /// Link acquired from upload start or previous chunk. Note, do not
        /// include initial / (must do substring(1) )
        /// </param>
        /// <param name='_state'>
        /// Acquired from NextLink
        /// </param>
        /// <param name='_nouploadcache'>
        /// Acquired from NextLink
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<GetBlobUploadStatusFromNextHeaders>> GetBlobUploadStatusFromNextWithHttpMessagesAsync(string location, string _state = default(string), bool? _nouploadcache = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List repositories
        /// </summary>
        /// <param name='last'>
        /// Query parameter for the last item in previous query. Result set
        /// will include values lexically after last.
        /// </param>
        /// <param name='n'>
        /// query parameter for max number of items
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Repositories,GetRepositoryListHeaders>> GetRepositoryListWithHttpMessagesAsync(string last = default(string), int? n = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get repository attributes
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<RepositoryAttributes>> GetRepositoryAttributesWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete the repository identified by `name`
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DeletedRepository>> DeleteRepositoryWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the attribute identified by `name` where `reference` is the
        /// name of the repository.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='value'>
        /// Repository attribute value
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> UpdateRepositoryAttributesWithHttpMessagesAsync(string name, ChangeableAttributes value = default(ChangeableAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List tags of a repository
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='last'>
        /// Query parameter for the last item in previous query. Result set
        /// will include values lexically after last.
        /// </param>
        /// <param name='n'>
        /// query parameter for max number of items
        /// </param>
        /// <param name='orderby'>
        /// orderby query parameter
        /// </param>
        /// <param name='digest'>
        /// filter by digest
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<TagList>> GetTagListWithHttpMessagesAsync(string name, string last = default(string), int? n = default(int?), string orderby = default(string), string digest = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get tag attributes by tag
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='reference'>
        /// Tag name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<TagAttributes>> GetTagAttributesWithHttpMessagesAsync(string name, string reference, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update tag attributes
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='reference'>
        /// Tag or digest of the target manifest
        /// </param>
        /// <param name='value'>
        /// Repository attribute value
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> UpdateTagAttributesWithHttpMessagesAsync(string name, string reference, ChangeableAttributes value = default(ChangeableAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete tag
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='reference'>
        /// Tag or digest of the target manifest
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> DeleteTagWithHttpMessagesAsync(string name, string reference, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List manifests of a repository
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='last'>
        /// Query parameter for the last item in previous query. Result set
        /// will include values lexically after last.
        /// </param>
        /// <param name='n'>
        /// query parameter for max number of items
        /// </param>
        /// <param name='orderby'>
        /// orderby query parameter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<AcrManifests>> GetManifestListWithHttpMessagesAsync(string name, string last = default(string), int? n = default(int?), string orderby = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get manifest attributes
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='reference'>
        /// A tag or a digest, pointing to a specific image
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ManifestAttributes>> GetManifestAttributesWithHttpMessagesAsync(string name, string reference, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update attributes of a manifest
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='reference'>
        /// A tag or a digest, pointing to a specific image
        /// </param>
        /// <param name='value'>
        /// Repository attribute value
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> UpdateManifestAttributesWithHttpMessagesAsync(string name, string reference, ChangeableAttributes value = default(ChangeableAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Exchange AAD tokens for an ACR refresh Token
        /// </summary>
        /// <param name='grantType'>
        /// Can take a value of access_token_refresh_token, or access_token, or
        /// refresh_token. Possible values include:
        /// 'access_token_refresh_token', 'access_token', 'refresh_token'
        /// </param>
        /// <param name='service'>
        /// Indicates the name of your Azure container registry.
        /// </param>
        /// <param name='tenant'>
        /// AAD tenant associated to the AAD credentials.
        /// </param>
        /// <param name='refreshToken'>
        /// AAD refresh token, mandatory when grant_type is
        /// access_token_refresh_token or refresh_token
        /// </param>
        /// <param name='accessToken'>
        /// AAD access token, mandatory when grant_type is
        /// access_token_refresh_token or access_token.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<RefreshToken>> GetRefreshTokenFromExchangeWithHttpMessagesAsync(string grantType, string service, string tenant = default(string), string refreshToken = default(string), string accessToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Exchange ACR Refresh token for an ACR Access Token
        /// </summary>
        /// <param name='service'>
        /// Indicates the name of your Azure container registry.
        /// </param>
        /// <param name='scope'>
        /// Which is expected to be a valid scope, and can be specified more
        /// than once for multiple scope requests. You obtained this from the
        /// Www-Authenticate response header from the challenge.
        /// </param>
        /// <param name='refreshToken'>
        /// Must be a valid ACR refresh token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<AccessToken>> GetAccessTokenWithHttpMessagesAsync(string service, string scope, string refreshToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Exchange Username, Password and Scope an ACR Access Token
        /// </summary>
        /// <param name='service'>
        /// Indicates the name of your Azure container registry.
        /// </param>
        /// <param name='scope'>
        /// Expected to be a valid scope, and can be specified more than once
        /// for multiple scope requests. You can obtain this from the
        /// Www-Authenticate response header from the challenge.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<AccessToken>> GetAccessTokenFromLoginWithHttpMessagesAsync(string service, string scope, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiate a resumable blob upload with an empty request body.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='resumable'>
        /// Initiate Resumable Blob Upload
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<StartEmptyResumableBlobUploadHeaders>> StartEmptyResumableBlobUploadWithHttpMessagesAsync(string name, string resumable = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload a chunk of data to specified upload without completing the
        /// upload. The data will be uploaded to the specified Content Range.
        /// </summary>
        /// <param name='value'>
        /// </param>
        /// <param name='contentRange'>
        /// Range of bytes identifying the desired block of content represented
        /// by the body. Start must the end offset retrieved via status check
        /// plus one. Note that this is a non-standard use of the
        /// `Content-Range` header.
        /// </param>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='uuid'>
        /// A uuid identifying the upload.
        /// </param>
        /// <param name='chunk'>
        /// Initiate Chunk Blob Upload
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<UploadBlobContentChunkHeaders>> UploadBlobContentChunkWithHttpMessagesAsync(Stream value, string contentRange, string name, string uuid, string chunk = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the blob from the registry identified by `digest`. This
        /// endpoint may also support RFC7233 compliant range requests. Support
        /// can be detected by issuing a HEAD request. If the header
        /// `Accept-Range: bytes` is returned, range requests can be used to
        /// fetch partial content.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='digest'>
        /// Digest of a BLOB
        /// </param>
        /// <param name='range'>
        /// Format : bytes=&lt;start&gt;-&lt;end&gt;,  HTTP Range header
        /// specifying blob chunk.
        /// </param>
        /// <param name='part'>
        /// Acquire only part of a blob. This endpoint may also support RFC7233
        /// compliant range requests. Support can be detected by issuing a HEAD
        /// request. If the header `Accept-Range: bytes` is returned, range
        /// requests can be used to fetch partial content
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Stream,GetBlobPartHeaders>> GetBlobPartWithHttpMessagesAsync(string name, string digest, string range, string part = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Same as GET, except only the headers are returned.
        /// </summary>
        /// <param name='name'>
        /// Name of the image (including the namespace)
        /// </param>
        /// <param name='digest'>
        /// Digest of a BLOB
        /// </param>
        /// <param name='range'>
        /// Format : bytes=&lt;start&gt;-&lt;end&gt;,  HTTP Range header
        /// specifying blob chunk.
        /// </param>
        /// <param name='part'>
        /// Acquire only part of a blob. This endpoint may also support RFC7233
        /// compliant range requests. Support can be detected by issuing a HEAD
        /// request. If the header `Accept-Range: bytes` is returned, range
        /// requests can be used to fetch partial content
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationHeaderResponse<CheckBlobPartExistenceHeaders>> CheckBlobPartExistenceWithHttpMessagesAsync(string name, string digest, string range, string part = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
