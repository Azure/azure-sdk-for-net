// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.ContainerRegistry
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BlobOperations.
    /// </summary>
    public static partial class BlobOperationsExtensions
    {
            /// <summary>
            /// Retrieve the blob from the registry identified by digest.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the image (including the namespace)
            /// </param>
            /// <param name='digest'>
            /// Digest of a BLOB
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetAsync(this IBlobOperations operations, string name, string digest, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetWithHttpMessagesAsync(name, digest, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Same as GET, except only the headers are returned.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the image (including the namespace)
            /// </param>
            /// <param name='digest'>
            /// Digest of a BLOB
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobCheckHeaders> CheckAsync(this IBlobOperations operations, string name, string digest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckWithHttpMessagesAsync(name, digest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Removes an already uploaded blob.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the image (including the namespace)
            /// </param>
            /// <param name='digest'>
            /// Digest of a BLOB
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> DeleteAsync(this IBlobOperations operations, string name, string digest, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.DeleteWithHttpMessagesAsync(name, digest, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Mount a blob identified by the `mount` parameter from another repository.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the image (including the namespace)
            /// </param>
            /// <param name='fromParameter'>
            /// Name of the source repository.
            /// </param>
            /// <param name='mount'>
            /// Digest of blob to mount from the source repository.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobMountHeaders> MountAsync(this IBlobOperations operations, string name, string fromParameter, string mount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MountWithHttpMessagesAsync(name, fromParameter, mount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieve status of upload identified by uuid. The primary purpose of this
            /// endpoint is to resolve the current status of a resumable upload.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Link acquired from upload start or previous chunk. Note, do not include
            /// initial / (must do substring(1) )
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobGetStatusHeaders> GetStatusAsync(this IBlobOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Upload a stream of data without completing the upload.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// Raw data of blob
            /// </param>
            /// <param name='location'>
            /// Link acquired from upload start or previous chunk. Note, do not include
            /// initial / (must do substring(1) )
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobUploadHeaders> UploadAsync(this IBlobOperations operations, Stream value, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadWithHttpMessagesAsync(value, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Complete the upload, providing all the data in the body, if necessary. A
            /// request without a body will just complete the upload with previously
            /// uploaded content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digest'>
            /// Digest of a BLOB
            /// </param>
            /// <param name='location'>
            /// Link acquired from upload start or previous chunk. Note, do not include
            /// initial / (must do substring(1) )
            /// </param>
            /// <param name='value'>
            /// Optional raw data of blob
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobEndUploadHeaders> EndUploadAsync(this IBlobOperations operations, string digest, string location, Stream value = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EndUploadWithHttpMessagesAsync(digest, location, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Cancel outstanding upload processes, releasing associated resources. If
            /// this is not called, the unfinished uploads will eventually timeout.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Link acquired from upload start or previous chunk. Note, do not include
            /// initial / (must do substring(1) )
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelUploadAsync(this IBlobOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelUploadWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Initiate a resumable blob upload with an empty request body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the image (including the namespace)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobStartUploadHeaders> StartUploadAsync(this IBlobOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartUploadWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieve the blob from the registry identified by `digest`. This endpoint
            /// may also support RFC7233 compliant range requests. Support can be detected
            /// by issuing a HEAD request. If the header `Accept-Range: bytes` is returned,
            /// range requests can be used to fetch partial content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the image (including the namespace)
            /// </param>
            /// <param name='digest'>
            /// Digest of a BLOB
            /// </param>
            /// <param name='range'>
            /// Format : bytes=&lt;start&gt;-&lt;end&gt;,  HTTP Range header specifying
            /// blob chunk.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetChunkAsync(this IBlobOperations operations, string name, string digest, string range, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetChunkWithHttpMessagesAsync(name, digest, range, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Same as GET, except only the headers are returned.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the image (including the namespace)
            /// </param>
            /// <param name='digest'>
            /// Digest of a BLOB
            /// </param>
            /// <param name='range'>
            /// Format : bytes=&lt;start&gt;-&lt;end&gt;,  HTTP Range header specifying
            /// blob chunk.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobCheckChunkHeaders> CheckChunkAsync(this IBlobOperations operations, string name, string digest, string range, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckChunkWithHttpMessagesAsync(name, digest, range, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
