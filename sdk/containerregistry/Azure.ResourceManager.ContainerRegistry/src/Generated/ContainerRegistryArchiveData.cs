// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.ContainerRegistry.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ContainerRegistry
{
    /// <summary>
    /// A class representing the ContainerRegistryArchive data model.
    /// An object that represents a archive for a container registry.
    /// </summary>
    public partial class ContainerRegistryArchiveData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ContainerRegistryArchiveData"/>. </summary>
        public ContainerRegistryArchiveData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ContainerRegistryArchiveData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="packageSource"> The package source of the archive. </param>
        /// <param name="publishedVersion"> The published version of the archive. </param>
        /// <param name="repositoryEndpointPrefix"></param>
        /// <param name="repositoryEndpoint"></param>
        /// <param name="provisioningState"> The provisioning state of the archive at the time the operation was called. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ContainerRegistryArchiveData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ArchivePackageSourceProperties packageSource, string publishedVersion, string repositoryEndpointPrefix, string repositoryEndpoint, ContainerRegistryProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            PackageSource = packageSource;
            PublishedVersion = publishedVersion;
            RepositoryEndpointPrefix = repositoryEndpointPrefix;
            RepositoryEndpoint = repositoryEndpoint;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The package source of the archive. </summary>
        [WirePath("properties.packageSource")]
        public ArchivePackageSourceProperties PackageSource { get; set; }
        /// <summary> The published version of the archive. </summary>
        [WirePath("properties.publishedVersion")]
        public string PublishedVersion { get; set; }
        /// <summary> Gets or sets the repository endpoint prefix. </summary>
        [WirePath("properties.repositoryEndpointPrefix")]
        public string RepositoryEndpointPrefix { get; set; }
        /// <summary> Gets the repository endpoint. </summary>
        [WirePath("properties.repositoryEndpoint")]
        public string RepositoryEndpoint { get; }
        /// <summary> The provisioning state of the archive at the time the operation was called. </summary>
        [WirePath("properties.provisioningState")]
        public ContainerRegistryProvisioningState? ProvisioningState { get; }
    }
}
