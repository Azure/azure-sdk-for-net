// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.ContainerRegistry.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ContainerRegistry
{
    /// <summary> A class representing the Registry data model. </summary>
    public partial class RegistryData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of RegistryData. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The SKU of the container registry. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sku"/> is null. </exception>
        public RegistryData(AzureLocation location, ContainerRegistrySku sku) : base(location)
        {
            if (sku == null)
            {
                throw new ArgumentNullException(nameof(sku));
            }

            Sku = sku;
            DataEndpointHostNames = new ChangeTrackingList<string>();
            PrivateEndpointConnections = new ChangeTrackingList<ContainerRegistryPrivateEndpointConnectionData>();
        }

        /// <summary> Initializes a new instance of RegistryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The SKU of the container registry. </param>
        /// <param name="identity"> The identity of the container registry. </param>
        /// <param name="loginServer"> The URL that can be used to log into the container registry. </param>
        /// <param name="creationOn"> The creation date of the container registry in ISO8601 format. </param>
        /// <param name="provisioningState"> The provisioning state of the container registry at the time the operation was called. </param>
        /// <param name="status"> The status of the container registry at the time the operation was called. </param>
        /// <param name="adminUserEnabled"> The value that indicates whether the admin user is enabled. </param>
        /// <param name="networkRuleSet"> The network rule set for a container registry. </param>
        /// <param name="policies"> The policies for a container registry. </param>
        /// <param name="encryption"> The encryption settings of container registry. </param>
        /// <param name="dataEndpointEnabled"> Enable a single data endpoint per region for serving data. </param>
        /// <param name="dataEndpointHostNames"> List of host names that will serve data when dataEndpointEnabled is true. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections for a container registry. </param>
        /// <param name="publicNetworkAccess"> Whether or not public network access is allowed for the container registry. </param>
        /// <param name="networkRuleBypassOptions"> Whether to allow trusted Azure services to access a network restricted registry. </param>
        /// <param name="zoneRedundancy"> Whether or not zone redundancy is enabled for this container registry. </param>
        internal RegistryData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ContainerRegistrySku sku, IdentityProperties identity, string loginServer, DateTimeOffset? creationOn, ProvisioningState? provisioningState, Status status, bool? adminUserEnabled, NetworkRuleSet networkRuleSet, Policies policies, EncryptionProperty encryption, bool? dataEndpointEnabled, IReadOnlyList<string> dataEndpointHostNames, IReadOnlyList<ContainerRegistryPrivateEndpointConnectionData> privateEndpointConnections, PublicNetworkAccess? publicNetworkAccess, NetworkRuleBypassOption? networkRuleBypassOptions, ZoneRedundancy? zoneRedundancy) : base(id, name, resourceType, systemData, tags, location)
        {
            Sku = sku;
            Identity = identity;
            LoginServer = loginServer;
            CreationOn = creationOn;
            ProvisioningState = provisioningState;
            Status = status;
            AdminUserEnabled = adminUserEnabled;
            NetworkRuleSet = networkRuleSet;
            Policies = policies;
            Encryption = encryption;
            DataEndpointEnabled = dataEndpointEnabled;
            DataEndpointHostNames = dataEndpointHostNames;
            PrivateEndpointConnections = privateEndpointConnections;
            PublicNetworkAccess = publicNetworkAccess;
            NetworkRuleBypassOptions = networkRuleBypassOptions;
            ZoneRedundancy = zoneRedundancy;
        }

        /// <summary> The SKU of the container registry. </summary>
        public ContainerRegistrySku Sku { get; set; }
        /// <summary> The identity of the container registry. </summary>
        public IdentityProperties Identity { get; set; }
        /// <summary> The URL that can be used to log into the container registry. </summary>
        public string LoginServer { get; }
        /// <summary> The creation date of the container registry in ISO8601 format. </summary>
        public DateTimeOffset? CreationOn { get; }
        /// <summary> The provisioning state of the container registry at the time the operation was called. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The status of the container registry at the time the operation was called. </summary>
        public Status Status { get; }
        /// <summary> The value that indicates whether the admin user is enabled. </summary>
        public bool? AdminUserEnabled { get; set; }
        /// <summary> The network rule set for a container registry. </summary>
        public NetworkRuleSet NetworkRuleSet { get; set; }
        /// <summary> The policies for a container registry. </summary>
        public Policies Policies { get; set; }
        /// <summary> The encryption settings of container registry. </summary>
        public EncryptionProperty Encryption { get; set; }
        /// <summary> Enable a single data endpoint per region for serving data. </summary>
        public bool? DataEndpointEnabled { get; set; }
        /// <summary> List of host names that will serve data when dataEndpointEnabled is true. </summary>
        public IReadOnlyList<string> DataEndpointHostNames { get; }
        /// <summary> List of private endpoint connections for a container registry. </summary>
        public IReadOnlyList<ContainerRegistryPrivateEndpointConnectionData> PrivateEndpointConnections { get; }
        /// <summary> Whether or not public network access is allowed for the container registry. </summary>
        public PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary> Whether to allow trusted Azure services to access a network restricted registry. </summary>
        public NetworkRuleBypassOption? NetworkRuleBypassOptions { get; set; }
        /// <summary> Whether or not zone redundancy is enabled for this container registry. </summary>
        public ZoneRedundancy? ZoneRedundancy { get; set; }
    }
}
