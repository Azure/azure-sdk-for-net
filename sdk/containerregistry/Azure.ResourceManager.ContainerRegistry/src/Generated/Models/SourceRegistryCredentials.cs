// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> Describes the credential parameters for accessing the source registry. </summary>
    public partial class SourceRegistryCredentials
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SourceRegistryCredentials"/>. </summary>
        public SourceRegistryCredentials()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SourceRegistryCredentials"/>. </summary>
        /// <param name="identity">
        /// The Entra identity used for source registry login.
        /// The value is `[system]` for system-assigned managed identity, `[caller]` for caller identity,
        /// and client ID for user-assigned managed identity.
        /// </param>
        /// <param name="loginMode">
        /// The authentication mode which determines the source registry login scope. The credentials for the source registry
        /// will be generated using the given scope. These credentials will be used to login to
        /// the source registry during the run.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SourceRegistryCredentials(string identity, SourceRegistryLoginMode? loginMode, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Identity = identity;
            LoginMode = loginMode;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The Entra identity used for source registry login.
        /// The value is `[system]` for system-assigned managed identity, `[caller]` for caller identity,
        /// and client ID for user-assigned managed identity.
        /// </summary>
        [WirePath("identity")]
        public string Identity { get; set; }
        /// <summary>
        /// The authentication mode which determines the source registry login scope. The credentials for the source registry
        /// will be generated using the given scope. These credentials will be used to login to
        /// the source registry during the run.
        /// </summary>
        [WirePath("loginMode")]
        public SourceRegistryLoginMode? LoginMode { get; set; }
    }
}
