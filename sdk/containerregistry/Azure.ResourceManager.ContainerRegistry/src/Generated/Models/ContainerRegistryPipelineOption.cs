// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The ContainerRegistryPipelineOption. </summary>
    public readonly partial struct ContainerRegistryPipelineOption : IEquatable<ContainerRegistryPipelineOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContainerRegistryPipelineOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContainerRegistryPipelineOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OverwriteTagsValue = "OverwriteTags";
        private const string OverwriteBlobsValue = "OverwriteBlobs";
        private const string DeleteSourceBlobOnSuccessValue = "DeleteSourceBlobOnSuccess";
        private const string ContinueOnErrorsValue = "ContinueOnErrors";

        /// <summary> OverwriteTags. </summary>
        public static ContainerRegistryPipelineOption OverwriteTags { get; } = new ContainerRegistryPipelineOption(OverwriteTagsValue);
        /// <summary> OverwriteBlobs. </summary>
        public static ContainerRegistryPipelineOption OverwriteBlobs { get; } = new ContainerRegistryPipelineOption(OverwriteBlobsValue);
        /// <summary> DeleteSourceBlobOnSuccess. </summary>
        public static ContainerRegistryPipelineOption DeleteSourceBlobOnSuccess { get; } = new ContainerRegistryPipelineOption(DeleteSourceBlobOnSuccessValue);
        /// <summary> ContinueOnErrors. </summary>
        public static ContainerRegistryPipelineOption ContinueOnErrors { get; } = new ContainerRegistryPipelineOption(ContinueOnErrorsValue);
        /// <summary> Determines if two <see cref="ContainerRegistryPipelineOption"/> values are the same. </summary>
        public static bool operator ==(ContainerRegistryPipelineOption left, ContainerRegistryPipelineOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContainerRegistryPipelineOption"/> values are not the same. </summary>
        public static bool operator !=(ContainerRegistryPipelineOption left, ContainerRegistryPipelineOption right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ContainerRegistryPipelineOption"/>. </summary>
        public static implicit operator ContainerRegistryPipelineOption(string value) => new ContainerRegistryPipelineOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContainerRegistryPipelineOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContainerRegistryPipelineOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
