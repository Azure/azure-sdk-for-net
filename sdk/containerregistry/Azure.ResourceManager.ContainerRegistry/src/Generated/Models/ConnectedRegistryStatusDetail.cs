// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The status detail properties of the connected registry. </summary>
    public partial class ConnectedRegistryStatusDetail
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConnectedRegistryStatusDetail"/>. </summary>
        internal ConnectedRegistryStatusDetail()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ConnectedRegistryStatusDetail"/>. </summary>
        /// <param name="statusDetailType"> The component of the connected registry corresponding to the status. </param>
        /// <param name="code"> The code of the status. </param>
        /// <param name="description"> The description of the status. </param>
        /// <param name="timestamp"> The timestamp of the status. </param>
        /// <param name="correlationId"> The correlation ID of the status. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConnectedRegistryStatusDetail(string statusDetailType, string code, string description, DateTimeOffset? timestamp, Guid? correlationId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StatusDetailType = statusDetailType;
            Code = code;
            Description = description;
            Timestamp = timestamp;
            CorrelationId = correlationId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The component of the connected registry corresponding to the status. </summary>
        [WirePath("type")]
        public string StatusDetailType { get; }
        /// <summary> The code of the status. </summary>
        [WirePath("code")]
        public string Code { get; }
        /// <summary> The description of the status. </summary>
        [WirePath("description")]
        public string Description { get; }
        /// <summary> The timestamp of the status. </summary>
        [WirePath("timestamp")]
        public DateTimeOffset? Timestamp { get; }
        /// <summary> The correlation ID of the status. </summary>
        [WirePath("correlationId")]
        public Guid? CorrelationId { get; }
    }
}
