// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    public partial class SourceTriggerDescriptor : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(EventType))
            {
                writer.WritePropertyName("eventType");
                writer.WriteStringValue(EventType);
            }
            if (Optional.IsDefined(CommitId))
            {
                writer.WritePropertyName("commitId");
                writer.WriteStringValue(CommitId);
            }
            if (Optional.IsDefined(PullRequestId))
            {
                writer.WritePropertyName("pullRequestId");
                writer.WriteStringValue(PullRequestId);
            }
            if (Optional.IsDefined(RepositoryUri))
            {
                writer.WritePropertyName("repositoryUrl");
                writer.WriteStringValue(RepositoryUri.AbsoluteUri);
            }
            if (Optional.IsDefined(BranchName))
            {
                writer.WritePropertyName("branchName");
                writer.WriteStringValue(BranchName);
            }
            if (Optional.IsDefined(ProviderType))
            {
                writer.WritePropertyName("providerType");
                writer.WriteStringValue(ProviderType);
            }
            writer.WriteEndObject();
        }

        internal static SourceTriggerDescriptor DeserializeSourceTriggerDescriptor(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> eventType = default;
            Optional<string> commitId = default;
            Optional<string> pullRequestId = default;
            Optional<Uri> repositoryUrl = default;
            Optional<string> branchName = default;
            Optional<string> providerType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventType"))
                {
                    eventType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("commitId"))
                {
                    commitId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pullRequestId"))
                {
                    pullRequestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("repositoryUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        repositoryUrl = null;
                        continue;
                    }
                    repositoryUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("branchName"))
                {
                    branchName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerType"))
                {
                    providerType = property.Value.GetString();
                    continue;
                }
            }
            return new SourceTriggerDescriptor(id.Value, eventType.Value, commitId.Value, pullRequestId.Value, repositoryUrl.Value, branchName.Value, providerType.Value);
        }
    }
}
