// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The PipelineOption. </summary>
    public readonly partial struct PipelineOption : IEquatable<PipelineOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PipelineOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PipelineOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OverwriteTagsValue = "OverwriteTags";
        private const string OverwriteBlobsValue = "OverwriteBlobs";
        private const string DeleteSourceBlobOnSuccessValue = "DeleteSourceBlobOnSuccess";
        private const string ContinueOnErrorsValue = "ContinueOnErrors";

        /// <summary> OverwriteTags. </summary>
        public static PipelineOption OverwriteTags { get; } = new PipelineOption(OverwriteTagsValue);
        /// <summary> OverwriteBlobs. </summary>
        public static PipelineOption OverwriteBlobs { get; } = new PipelineOption(OverwriteBlobsValue);
        /// <summary> DeleteSourceBlobOnSuccess. </summary>
        public static PipelineOption DeleteSourceBlobOnSuccess { get; } = new PipelineOption(DeleteSourceBlobOnSuccessValue);
        /// <summary> ContinueOnErrors. </summary>
        public static PipelineOption ContinueOnErrors { get; } = new PipelineOption(ContinueOnErrorsValue);
        /// <summary> Determines if two <see cref="PipelineOption"/> values are the same. </summary>
        public static bool operator ==(PipelineOption left, PipelineOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PipelineOption"/> values are not the same. </summary>
        public static bool operator !=(PipelineOption left, PipelineOption right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PipelineOption"/>. </summary>
        public static implicit operator PipelineOption(string value) => new PipelineOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PipelineOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PipelineOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
