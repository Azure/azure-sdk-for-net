// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The request properties provided for a pipeline run. </summary>
    public partial class ConnectedRegistryPipelineRunContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConnectedRegistryPipelineRunContent"/>. </summary>
        public ConnectedRegistryPipelineRunContent()
        {
            Artifacts = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="ConnectedRegistryPipelineRunContent"/>. </summary>
        /// <param name="pipelineResourceId"> The resource ID of the pipeline to run. </param>
        /// <param name="artifacts">
        /// List of source artifacts to be transferred by the pipeline.
        /// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        /// Specify an image by tag ('hello-world:latest').
        /// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        /// </param>
        /// <param name="source"> The source properties of the pipeline run. </param>
        /// <param name="target"> The target properties of the pipeline run. </param>
        /// <param name="catalogDigest"> The digest of the tar used to transfer the artifacts. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConnectedRegistryPipelineRunContent(ResourceIdentifier pipelineResourceId, IList<string> artifacts, ContainerRegistryPipelineRunSourceProperties source, ContainerRegistryPipelineRunTargetProperties target, string catalogDigest, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PipelineResourceId = pipelineResourceId;
            Artifacts = artifacts;
            Source = source;
            Target = target;
            CatalogDigest = catalogDigest;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource ID of the pipeline to run. </summary>
        [WirePath("pipelineResourceId")]
        public ResourceIdentifier PipelineResourceId { get; set; }
        /// <summary>
        /// List of source artifacts to be transferred by the pipeline.
        /// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        /// Specify an image by tag ('hello-world:latest').
        /// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        /// </summary>
        [WirePath("artifacts")]
        public IList<string> Artifacts { get; }
        /// <summary> The source properties of the pipeline run. </summary>
        [WirePath("source")]
        public ContainerRegistryPipelineRunSourceProperties Source { get; set; }
        /// <summary> The target properties of the pipeline run. </summary>
        [WirePath("target")]
        public ContainerRegistryPipelineRunTargetProperties Target { get; set; }
        /// <summary> The digest of the tar used to transfer the artifacts. </summary>
        [WirePath("catalogDigest")]
        public string CatalogDigest { get; set; }
    }
}
