// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    public partial class TaskRunRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("taskId");
            writer.WriteStringValue(TaskId);
            if (Optional.IsDefined(OverrideTaskStepProperties))
            {
                writer.WritePropertyName("overrideTaskStepProperties");
                writer.WriteObjectValue(OverrideTaskStepProperties);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(RunRequestType);
            if (Optional.IsDefined(IsArchiveEnabled))
            {
                writer.WritePropertyName("isArchiveEnabled");
                writer.WriteBooleanValue(IsArchiveEnabled.Value);
            }
            if (Optional.IsDefined(AgentPoolName))
            {
                writer.WritePropertyName("agentPoolName");
                writer.WriteStringValue(AgentPoolName);
            }
            if (Optional.IsDefined(LogTemplate))
            {
                writer.WritePropertyName("logTemplate");
                writer.WriteStringValue(LogTemplate);
            }
            writer.WriteEndObject();
        }

        internal static TaskRunRequest DeserializeTaskRunRequest(JsonElement element)
        {
            string taskId = default;
            Optional<OverrideTaskStepProperties> overrideTaskStepProperties = default;
            string type = default;
            Optional<bool> isArchiveEnabled = default;
            Optional<string> agentPoolName = default;
            Optional<string> logTemplate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("taskId"))
                {
                    taskId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("overrideTaskStepProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    overrideTaskStepProperties = OverrideTaskStepProperties.DeserializeOverrideTaskStepProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isArchiveEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isArchiveEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("agentPoolName"))
                {
                    agentPoolName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logTemplate"))
                {
                    logTemplate = property.Value.GetString();
                    continue;
                }
            }
            return new TaskRunRequest(type, Optional.ToNullable(isArchiveEnabled), agentPoolName.Value, logTemplate.Value, taskId, overrideTaskStepProperties.Value);
        }
    }
}
