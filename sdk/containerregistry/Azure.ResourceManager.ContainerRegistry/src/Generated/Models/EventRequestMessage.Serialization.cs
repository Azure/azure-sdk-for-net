// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    public partial class EventRequestMessage
    {
        internal static EventRequestMessage DeserializeEventRequestMessage(JsonElement element)
        {
            Optional<EventContent> content = default;
            Optional<IReadOnlyDictionary<string, string>> headers = default;
            Optional<string> method = default;
            Optional<Uri> requestUri = default;
            Optional<string> version = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("content"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    content = EventContent.DeserializeEventContent(property.Value);
                    continue;
                }
                if (property.NameEquals("headers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    headers = dictionary;
                    continue;
                }
                if (property.NameEquals("method"))
                {
                    method = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requestUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestUri = null;
                        continue;
                    }
                    requestUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
            }
            return new EventRequestMessage(content.Value, Optional.ToDictionary(headers), method.Value, requestUri.Value, version.Value);
        }
    }
}
