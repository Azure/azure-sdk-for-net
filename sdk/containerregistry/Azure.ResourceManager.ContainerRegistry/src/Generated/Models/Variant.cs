// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> Variant of the CPU. </summary>
    public readonly partial struct Variant : IEquatable<Variant>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Variant"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Variant(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string V6Value = "v6";
        private const string V7Value = "v7";
        private const string V8Value = "v8";

        /// <summary> v6. </summary>
        public static Variant V6 { get; } = new Variant(V6Value);
        /// <summary> v7. </summary>
        public static Variant V7 { get; } = new Variant(V7Value);
        /// <summary> v8. </summary>
        public static Variant V8 { get; } = new Variant(V8Value);
        /// <summary> Determines if two <see cref="Variant"/> values are the same. </summary>
        public static bool operator ==(Variant left, Variant right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Variant"/> values are not the same. </summary>
        public static bool operator !=(Variant left, Variant right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Variant"/>. </summary>
        public static implicit operator Variant(string value) => new Variant(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Variant other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Variant other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
