// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
namespace Azure.ResourceManager.Network.Models
{
    public partial class NetworkVerifierWorkspacePatch : IUtf8JsonSerializable, IJsonModel<NetworkVerifierWorkspacePatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<NetworkVerifierWorkspacePatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<NetworkVerifierWorkspacePatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.ResourceManager.ContainerRegistry.Models
{
    public partial class ConnectedRegistrySyncUpdateProperties : IUtf8JsonSerializable, IJsonModel<ConnectedRegistrySyncUpdateProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConnectedRegistrySyncUpdateProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ConnectedRegistrySyncUpdateProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<NetworkVerifierWorkspacePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkVerifierWorkspacePatch)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
========
            var format = options.Format == "W" ? ((IPersistableModel<ConnectedRegistrySyncUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConnectedRegistrySyncUpdateProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Schedule))
            {
                writer.WritePropertyName("schedule"u8);
                writer.WriteStringValue(Schedule);
            }
            if (Optional.IsDefined(SyncWindow))
            {
                writer.WritePropertyName("syncWindow"u8);
                writer.WriteStringValue(SyncWindow.Value, "P");
            }
            if (Optional.IsDefined(MessageTtl))
            {
                writer.WritePropertyName("messageTtl"u8);
                writer.WriteStringValue(MessageTtl.Value, "P");
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs
            }
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
        NetworkVerifierWorkspacePatch IJsonModel<NetworkVerifierWorkspacePatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkVerifierWorkspacePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkVerifierWorkspacePatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeNetworkVerifierWorkspacePatch(document.RootElement, options);
        }

        internal static NetworkVerifierWorkspacePatch DeserializeNetworkVerifierWorkspacePatch(JsonElement element, ModelReaderWriterOptions options = null)
========
        ConnectedRegistrySyncUpdateProperties IJsonModel<ConnectedRegistrySyncUpdateProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConnectedRegistrySyncUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConnectedRegistrySyncUpdateProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConnectedRegistrySyncUpdateProperties(document.RootElement, options);
        }

        internal static ConnectedRegistrySyncUpdateProperties DeserializeConnectedRegistrySyncUpdateProperties(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
            IDictionary<string, string> tags = default;
            VerifierWorkspaceUpdateProperties properties = default;
========
            string schedule = default;
            TimeSpan? syncWindow = default;
            TimeSpan? messageTtl = default;
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
                if (property.NameEquals("tags"u8))
========
                if (property.NameEquals("schedule"u8))
                {
                    schedule = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("syncWindow"u8))
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    syncWindow = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("messageTtl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = VerifierWorkspaceUpdateProperties.DeserializeVerifierWorkspaceUpdateProperties(property.Value, options);
========
                    messageTtl = property.Value.GetTimeSpan("P");
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
            return new NetworkVerifierWorkspacePatch(tags ?? new ChangeTrackingDictionary<string, string>(), properties, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<NetworkVerifierWorkspacePatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkVerifierWorkspacePatch>)this).GetFormatFromOptions(options) : options.Format;
========
            return new ConnectedRegistrySyncUpdateProperties(schedule, syncWindow, messageTtl, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConnectedRegistrySyncUpdateProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConnectedRegistrySyncUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
                    throw new FormatException($"The model {nameof(NetworkVerifierWorkspacePatch)} does not support writing '{options.Format}' format.");
            }
        }

        NetworkVerifierWorkspacePatch IPersistableModel<NetworkVerifierWorkspacePatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkVerifierWorkspacePatch>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(ConnectedRegistrySyncUpdateProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ConnectedRegistrySyncUpdateProperties IPersistableModel<ConnectedRegistrySyncUpdateProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConnectedRegistrySyncUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs

            switch (format)
            {
                case "J":
                    {
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/NetworkVerifierWorkspacePatch.Serialization.cs
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeNetworkVerifierWorkspacePatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(NetworkVerifierWorkspacePatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<NetworkVerifierWorkspacePatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
========
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeConnectedRegistrySyncUpdateProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ConnectedRegistrySyncUpdateProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConnectedRegistrySyncUpdateProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ConnectedRegistrySyncUpdateProperties.Serialization.cs
    }
}
