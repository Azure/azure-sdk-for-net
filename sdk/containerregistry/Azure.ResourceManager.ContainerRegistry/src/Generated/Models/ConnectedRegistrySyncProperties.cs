// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The sync properties of the connected registry with its parent. </summary>
    public partial class ConnectedRegistrySyncProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConnectedRegistrySyncProperties"/>. </summary>
        /// <param name="tokenId"> The resource ID of the ACR token used to authenticate the connected registry to its parent during sync. </param>
        /// <param name="messageTtl"> The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tokenId"/> is null. </exception>
        public ConnectedRegistrySyncProperties(ResourceIdentifier tokenId, TimeSpan messageTtl)
        {
            Argument.AssertNotNull(tokenId, nameof(tokenId));

            TokenId = tokenId;
            MessageTtl = messageTtl;
        }

        /// <summary> Initializes a new instance of <see cref="ConnectedRegistrySyncProperties"/>. </summary>
        /// <param name="tokenId"> The resource ID of the ACR token used to authenticate the connected registry to its parent during sync. </param>
        /// <param name="schedule"> The cron expression indicating the schedule that the connected registry will sync with its parent. </param>
        /// <param name="syncWindow"> The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601. </param>
        /// <param name="messageTtl"> The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601. </param>
        /// <param name="lastSyncOn"> The last time a sync occurred between the connected registry and its parent. </param>
        /// <param name="gatewayEndpoint"> The gateway endpoint used by the connected registry to communicate with its parent. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConnectedRegistrySyncProperties(ResourceIdentifier tokenId, string schedule, TimeSpan? syncWindow, TimeSpan messageTtl, DateTimeOffset? lastSyncOn, string gatewayEndpoint, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TokenId = tokenId;
            Schedule = schedule;
            SyncWindow = syncWindow;
            MessageTtl = messageTtl;
            LastSyncOn = lastSyncOn;
            GatewayEndpoint = gatewayEndpoint;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ConnectedRegistrySyncProperties"/> for deserialization. </summary>
        internal ConnectedRegistrySyncProperties()
        {
        }

        /// <summary> The resource ID of the ACR token used to authenticate the connected registry to its parent during sync. </summary>
        [WirePath("tokenId")]
        public ResourceIdentifier TokenId { get; set; }
        /// <summary> The cron expression indicating the schedule that the connected registry will sync with its parent. </summary>
        [WirePath("schedule")]
        public string Schedule { get; set; }
        /// <summary> The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601. </summary>
        [WirePath("syncWindow")]
        public TimeSpan? SyncWindow { get; set; }
        /// <summary> The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601. </summary>
        [WirePath("messageTtl")]
        public TimeSpan MessageTtl { get; set; }
        /// <summary> The last time a sync occurred between the connected registry and its parent. </summary>
        [WirePath("lastSyncTime")]
        public DateTimeOffset? LastSyncOn { get; }
        /// <summary> The gateway endpoint used by the connected registry to communicate with its parent. </summary>
        [WirePath("gatewayEndpoint")]
        public string GatewayEndpoint { get; }
    }
}
