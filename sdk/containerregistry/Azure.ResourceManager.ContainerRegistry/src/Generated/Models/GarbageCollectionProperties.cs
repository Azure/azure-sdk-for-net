// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DeleteDeploymentDetails.cs
namespace Azure.AI.Language.Text.Authoring.Models
{
    /// <summary> Represents the options for deleting a project deployment. </summary>
    public partial class DeleteDeploymentDetails
========
namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The garbage collection properties of the connected registry. </summary>
    public partial class GarbageCollectionProperties
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/GarbageCollectionProperties.cs
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DeleteDeploymentDetails.cs
        /// <summary> Initializes a new instance of <see cref="DeleteDeploymentDetails"/>. </summary>
        public DeleteDeploymentDetails()
========
        /// <summary> Initializes a new instance of <see cref="GarbageCollectionProperties"/>. </summary>
        public GarbageCollectionProperties()
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/GarbageCollectionProperties.cs
        {
            AssignedResourceIds = new ChangeTrackingList<string>();
        }

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DeleteDeploymentDetails.cs
        /// <summary> Initializes a new instance of <see cref="DeleteDeploymentDetails"/>. </summary>
        /// <param name="assignedResourceIds"> Represents the resource IDs to delete the deployment from. If not provided, the deployment will be rolled out from all the resources it is deployed to. If provided, it will delete the deployment only from the specified assigned resources, and leave it for the rest. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DeleteDeploymentDetails(IList<string> assignedResourceIds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AssignedResourceIds = assignedResourceIds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Represents the resource IDs to delete the deployment from. If not provided, the deployment will be rolled out from all the resources it is deployed to. If provided, it will delete the deployment only from the specified assigned resources, and leave it for the rest. </summary>
        public IList<string> AssignedResourceIds { get; }
========
        /// <summary> Initializes a new instance of <see cref="GarbageCollectionProperties"/>. </summary>
        /// <param name="enabled"> Indicates whether garbage collection is enabled for the connected registry. </param>
        /// <param name="schedule"> The cron expression indicating the schedule that the connected registry will run garbage collection. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GarbageCollectionProperties(bool? enabled, string schedule, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Enabled = enabled;
            Schedule = schedule;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Indicates whether garbage collection is enabled for the connected registry. </summary>
        [WirePath("enabled")]
        public bool? Enabled { get; set; }
        /// <summary> The cron expression indicating the schedule that the connected registry will run garbage collection. </summary>
        [WirePath("schedule")]
        public string Schedule { get; set; }
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/GarbageCollectionProperties.cs
    }
}
