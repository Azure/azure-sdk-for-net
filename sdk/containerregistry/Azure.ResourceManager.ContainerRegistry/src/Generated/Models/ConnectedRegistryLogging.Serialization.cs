// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    public partial class ConnectedRegistryLogging : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(LogLevel))
            {
                writer.WritePropertyName("logLevel");
                writer.WriteStringValue(LogLevel.Value.ToString());
            }
            if (Optional.IsDefined(AuditLogStatus))
            {
                writer.WritePropertyName("auditLogStatus");
                writer.WriteStringValue(AuditLogStatus.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static ConnectedRegistryLogging DeserializeConnectedRegistryLogging(JsonElement element)
        {
            Optional<ConnectedRegistryLogLevel> logLevel = default;
            Optional<ConnectedRegistryAuditLogStatus> auditLogStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("logLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    logLevel = new ConnectedRegistryLogLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("auditLogStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    auditLogStatus = new ConnectedRegistryAuditLogStatus(property.Value.GetString());
                    continue;
                }
            }
            return new ConnectedRegistryLogging(Optional.ToNullable(logLevel), Optional.ToNullable(auditLogStatus));
        }
    }
}
