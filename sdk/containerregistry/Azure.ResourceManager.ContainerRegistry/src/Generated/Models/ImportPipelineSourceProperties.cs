// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The properties of the import pipeline source. </summary>
    public partial class ImportPipelineSourceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ImportPipelineSourceProperties"/>. </summary>
        /// <param name="keyVaultUri"> They key vault secret uri to obtain the source storage SAS token. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultUri"/> is null. </exception>
        public ImportPipelineSourceProperties(Uri keyVaultUri)
        {
            Argument.AssertNotNull(keyVaultUri, nameof(keyVaultUri));

            KeyVaultUri = keyVaultUri;
        }

        /// <summary> Initializes a new instance of <see cref="ImportPipelineSourceProperties"/>. </summary>
        /// <param name="containerRegistryPipelineSourceType"> The type of source for the import pipeline. </param>
        /// <param name="uri">
        /// The source uri of the import pipeline.
        /// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
        /// When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
        /// </param>
        /// <param name="keyVaultUri"> They key vault secret uri to obtain the source storage SAS token. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ImportPipelineSourceProperties(ContainerRegistryPipelineSourceType? containerRegistryPipelineSourceType, Uri uri, Uri keyVaultUri, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ContainerRegistryPipelineSourceType = containerRegistryPipelineSourceType;
            Uri = uri;
            KeyVaultUri = keyVaultUri;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ImportPipelineSourceProperties"/> for deserialization. </summary>
        internal ImportPipelineSourceProperties()
        {
        }

        /// <summary> The type of source for the import pipeline. </summary>
        [WirePath("type")]
        public ContainerRegistryPipelineSourceType? ContainerRegistryPipelineSourceType { get; set; }
        /// <summary>
        /// The source uri of the import pipeline.
        /// When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
        /// When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
        /// </summary>
        [WirePath("uri")]
        public Uri Uri { get; set; }
        /// <summary> They key vault secret uri to obtain the source storage SAS token. </summary>
        [WirePath("keyVaultUri")]
        public Uri KeyVaultUri { get; set; }
    }
}
