// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class CosmosDBVectorEmbedding : IUtf8JsonSerializable, IJsonModel<CosmosDBVectorEmbedding>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CosmosDBVectorEmbedding>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CosmosDBVectorEmbedding>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.ResourceManager.ContainerRegistry.Models
{
    public partial class ContainerRegistrySoftDeletePolicy : IUtf8JsonSerializable, IJsonModel<ContainerRegistrySoftDeletePolicy>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContainerRegistrySoftDeletePolicy>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ContainerRegistrySoftDeletePolicy>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<CosmosDBVectorEmbedding>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CosmosDBVectorEmbedding)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("path"u8);
            writer.WriteStringValue(Path);
            writer.WritePropertyName("dataType"u8);
            writer.WriteStringValue(DataType.ToString());
            writer.WritePropertyName("distanceFunction"u8);
            writer.WriteStringValue(DistanceFunction.ToString());
            writer.WritePropertyName("dimensions"u8);
            writer.WriteNumberValue(Dimensions);
========
            var format = options.Format == "W" ? ((IPersistableModel<ContainerRegistrySoftDeletePolicy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerRegistrySoftDeletePolicy)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(RetentionDays))
            {
                writer.WritePropertyName("retentionDays"u8);
                writer.WriteNumberValue(RetentionDays.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastUpdatedOn))
            {
                writer.WritePropertyName("lastUpdatedTime"u8);
                writer.WriteStringValue(LastUpdatedOn.Value, "O");
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
        CosmosDBVectorEmbedding IJsonModel<CosmosDBVectorEmbedding>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CosmosDBVectorEmbedding>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CosmosDBVectorEmbedding)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCosmosDBVectorEmbedding(document.RootElement, options);
        }

        internal static CosmosDBVectorEmbedding DeserializeCosmosDBVectorEmbedding(JsonElement element, ModelReaderWriterOptions options = null)
========
        ContainerRegistrySoftDeletePolicy IJsonModel<ContainerRegistrySoftDeletePolicy>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerRegistrySoftDeletePolicy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerRegistrySoftDeletePolicy)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerRegistrySoftDeletePolicy(document.RootElement, options);
        }

        internal static ContainerRegistrySoftDeletePolicy DeserializeContainerRegistrySoftDeletePolicy(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
            string path = default;
            CosmosDBVectorDataType dataType = default;
            VectorDistanceFunction distanceFunction = default;
            int dimensions = default;
========
            int? retentionDays = default;
            DateTimeOffset? lastUpdatedTime = default;
            ContainerRegistryPolicyStatus? status = default;
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
                if (property.NameEquals("path"u8))
                {
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataType"u8))
                {
                    dataType = new CosmosDBVectorDataType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("distanceFunction"u8))
                {
                    distanceFunction = new VectorDistanceFunction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dimensions"u8))
                {
                    dimensions = property.Value.GetInt32();
========
                if (property.NameEquals("retentionDays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retentionDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lastUpdatedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastUpdatedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new ContainerRegistryPolicyStatus(property.Value.GetString());
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
            return new CosmosDBVectorEmbedding(path, dataType, distanceFunction, dimensions, serializedAdditionalRawData);
========
            return new ContainerRegistrySoftDeletePolicy(retentionDays, lastUpdatedTime, status, serializedAdditionalRawData);
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Path), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  path: ");
========
            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RetentionDays), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  retentionDays: ");
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
                builder.AppendLine(propertyOverride);
            }
            else
            {
<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
                if (Optional.IsDefined(Path))
                {
                    builder.Append("  path: ");
                    if (Path.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Path}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Path}'");
                    }
========
                if (Optional.IsDefined(RetentionDays))
                {
                    builder.Append("  retentionDays: ");
                    builder.AppendLine($"{RetentionDays.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(LastUpdatedOn), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  lastUpdatedTime: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(LastUpdatedOn))
                {
                    builder.Append("  lastUpdatedTime: ");
                    var formattedDateTimeString = TypeFormatters.ToString(LastUpdatedOn.Value, "o");
                    builder.AppendLine($"'{formattedDateTimeString}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Status), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  status: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Status))
                {
                    builder.Append("  status: ");
                    builder.AppendLine($"'{Status.Value.ToString()}'");
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DataType), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  dataType: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                builder.Append("  dataType: ");
                builder.AppendLine($"'{DataType.ToString()}'");
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DistanceFunction), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  distanceFunction: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                builder.Append("  distanceFunction: ");
                builder.AppendLine($"'{DistanceFunction.ToString()}'");
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Dimensions), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  dimensions: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                builder.Append("  dimensions: ");
                builder.AppendLine($"{Dimensions}");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
        BinaryData IPersistableModel<CosmosDBVectorEmbedding>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CosmosDBVectorEmbedding>)this).GetFormatFromOptions(options) : options.Format;
========
        BinaryData IPersistableModel<ContainerRegistrySoftDeletePolicy>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerRegistrySoftDeletePolicy>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
                    throw new FormatException($"The model {nameof(CosmosDBVectorEmbedding)} does not support writing '{options.Format}' format.");
            }
        }

        CosmosDBVectorEmbedding IPersistableModel<CosmosDBVectorEmbedding>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CosmosDBVectorEmbedding>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(ContainerRegistrySoftDeletePolicy)} does not support writing '{options.Format}' format.");
            }
        }

        ContainerRegistrySoftDeletePolicy IPersistableModel<ContainerRegistrySoftDeletePolicy>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerRegistrySoftDeletePolicy>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs

            switch (format)
            {
                case "J":
                    {
<<<<<<<< HEAD:sdk/cosmosdb/Azure.ResourceManager.CosmosDB/src/Generated/Models/CosmosDBVectorEmbedding.Serialization.cs
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCosmosDBVectorEmbedding(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CosmosDBVectorEmbedding)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CosmosDBVectorEmbedding>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
========
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeContainerRegistrySoftDeletePolicy(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContainerRegistrySoftDeletePolicy)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContainerRegistrySoftDeletePolicy>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> main:sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/src/Generated/Models/ContainerRegistrySoftDeletePolicy.Serialization.cs
    }
}
