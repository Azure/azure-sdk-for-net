// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The OS architecture. </summary>
    public readonly partial struct Architecture : IEquatable<Architecture>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Architecture"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Architecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Amd64Value = "amd64";
        private const string X86Value = "x86";
        private const string ThreeHundredEightySixValue = "386";
        private const string ArmValue = "arm";
        private const string Arm64Value = "arm64";

        /// <summary> amd64. </summary>
        public static Architecture Amd64 { get; } = new Architecture(Amd64Value);
        /// <summary> x86. </summary>
        public static Architecture X86 { get; } = new Architecture(X86Value);
        /// <summary> 386. </summary>
        public static Architecture ThreeHundredEightySix { get; } = new Architecture(ThreeHundredEightySixValue);
        /// <summary> arm. </summary>
        public static Architecture Arm { get; } = new Architecture(ArmValue);
        /// <summary> arm64. </summary>
        public static Architecture Arm64 { get; } = new Architecture(Arm64Value);
        /// <summary> Determines if two <see cref="Architecture"/> values are the same. </summary>
        public static bool operator ==(Architecture left, Architecture right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Architecture"/> values are not the same. </summary>
        public static bool operator !=(Architecture left, Architecture right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Architecture"/>. </summary>
        public static implicit operator Architecture(string value) => new Architecture(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Architecture other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Architecture other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
