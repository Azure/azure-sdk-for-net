// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    public partial class ConnectedRegistrySyncProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("tokenId");
            writer.WriteStringValue(TokenId);
            if (Optional.IsDefined(Schedule))
            {
                writer.WritePropertyName("schedule");
                writer.WriteStringValue(Schedule);
            }
            if (Optional.IsDefined(SyncWindow))
            {
                writer.WritePropertyName("syncWindow");
                writer.WriteStringValue(SyncWindow.Value, "P");
            }
            writer.WritePropertyName("messageTtl");
            writer.WriteStringValue(MessageTtl, "P");
            writer.WriteEndObject();
        }

        internal static ConnectedRegistrySyncProperties DeserializeConnectedRegistrySyncProperties(JsonElement element)
        {
            ResourceIdentifier tokenId = default;
            Optional<string> schedule = default;
            Optional<TimeSpan> syncWindow = default;
            TimeSpan messageTtl = default;
            Optional<DateTimeOffset> lastSyncTime = default;
            Optional<string> gatewayEndpoint = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tokenId"))
                {
                    tokenId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("schedule"))
                {
                    schedule = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("syncWindow"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    syncWindow = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("messageTtl"))
                {
                    messageTtl = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("lastSyncTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastSyncTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("gatewayEndpoint"))
                {
                    gatewayEndpoint = property.Value.GetString();
                    continue;
                }
            }
            return new ConnectedRegistrySyncProperties(tokenId, schedule.Value, Optional.ToNullable(syncWindow), messageTtl, Optional.ToNullable(lastSyncTime), gatewayEndpoint.Value);
        }
    }
}
