// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    public partial class PipelineRunContent : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PipelineResourceId))
            {
                writer.WritePropertyName("pipelineResourceId");
                writer.WriteStringValue(PipelineResourceId);
            }
            if (Optional.IsCollectionDefined(Artifacts))
            {
                writer.WritePropertyName("artifacts");
                writer.WriteStartArray();
                foreach (var item in Artifacts)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source");
                writer.WriteObjectValue(Source);
            }
            if (Optional.IsDefined(Target))
            {
                writer.WritePropertyName("target");
                writer.WriteObjectValue(Target);
            }
            if (Optional.IsDefined(CatalogDigest))
            {
                writer.WritePropertyName("catalogDigest");
                writer.WriteStringValue(CatalogDigest);
            }
            writer.WriteEndObject();
        }

        internal static PipelineRunContent DeserializePipelineRunContent(JsonElement element)
        {
            Optional<ResourceIdentifier> pipelineResourceId = default;
            Optional<IList<string>> artifacts = default;
            Optional<PipelineRunSourceProperties> source = default;
            Optional<PipelineRunTargetProperties> target = default;
            Optional<string> catalogDigest = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("pipelineResourceId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pipelineResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("artifacts"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    artifacts = array;
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    source = PipelineRunSourceProperties.DeserializePipelineRunSourceProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("target"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    target = PipelineRunTargetProperties.DeserializePipelineRunTargetProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("catalogDigest"))
                {
                    catalogDigest = property.Value.GetString();
                    continue;
                }
            }
            return new PipelineRunContent(pipelineResourceId.Value, Optional.ToList(artifacts), source.Value, target.Value, catalogDigest.Value);
        }
    }
}
