// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The image update trigger that caused a build. </summary>
    public partial class ContainerRegistryImageUpdateTrigger
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ContainerRegistryImageUpdateTrigger"/>. </summary>
        public ContainerRegistryImageUpdateTrigger()
        {
            Images = new ChangeTrackingList<ContainerRegistryImageDescriptor>();
        }

        /// <summary> Initializes a new instance of <see cref="ContainerRegistryImageUpdateTrigger"/>. </summary>
        /// <param name="id"> The unique ID of the trigger. </param>
        /// <param name="timestamp"> The timestamp when the image update happened. </param>
        /// <param name="images"> The list of image updates that caused the build. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ContainerRegistryImageUpdateTrigger(Guid? id, DateTimeOffset? timestamp, IList<ContainerRegistryImageDescriptor> images, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Timestamp = timestamp;
            Images = images;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The unique ID of the trigger. </summary>
        public Guid? Id { get; set; }
        /// <summary> The timestamp when the image update happened. </summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary> The list of image updates that caused the build. </summary>
        public IList<ContainerRegistryImageDescriptor> Images { get; }
    }
}
