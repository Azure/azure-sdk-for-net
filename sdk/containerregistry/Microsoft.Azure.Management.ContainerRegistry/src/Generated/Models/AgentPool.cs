// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The agentpool that has the ARM resource and properties.
    /// The agentpool will have all information to create an agent pool.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AgentPool : Resource
    {
        /// <summary>
        /// Initializes a new instance of the AgentPool class.
        /// </summary>
        public AgentPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AgentPool class.
        /// </summary>
        /// <param name="location">The location of the resource. This cannot be
        /// changed after the resource is created.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="count">The count of agent machine</param>
        /// <param name="tier">The Tier of agent machine</param>
        /// <param name="os">The OS of agent machine. Possible values include:
        /// 'Windows', 'Linux'</param>
        /// <param name="virtualNetworkSubnetResourceId">The Virtual Network
        /// Subnet Resource Id of the agent machine</param>
        /// <param name="provisioningState">The provisioning state of this
        /// agent pool. Possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Failed', 'Canceled'</param>
        public AgentPool(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), int? count = default(int?), string tier = default(string), string os = default(string), string virtualNetworkSubnetResourceId = default(string), string provisioningState = default(string))
            : base(location, id, name, type, tags)
        {
            Count = count;
            Tier = tier;
            Os = os;
            VirtualNetworkSubnetResourceId = virtualNetworkSubnetResourceId;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the count of agent machine
        /// </summary>
        [JsonProperty(PropertyName = "properties.count")]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or sets the Tier of agent machine
        /// </summary>
        [JsonProperty(PropertyName = "properties.tier")]
        public string Tier { get; set; }

        /// <summary>
        /// Gets or sets the OS of agent machine. Possible values include:
        /// 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.os")]
        public string Os { get; set; }

        /// <summary>
        /// Gets or sets the Virtual Network Subnet Resource Id of the agent
        /// machine
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualNetworkSubnetResourceId")]
        public string VirtualNetworkSubnetResourceId { get; set; }

        /// <summary>
        /// Gets the provisioning state of this agent pool. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
