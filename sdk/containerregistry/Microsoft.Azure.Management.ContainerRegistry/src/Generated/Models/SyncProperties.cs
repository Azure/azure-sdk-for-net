// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The sync properties of the connected registry with its parent.
    /// </summary>
    public partial class SyncProperties
    {
        /// <summary>
        /// Initializes a new instance of the SyncProperties class.
        /// </summary>
        public SyncProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SyncProperties class.
        /// </summary>
        /// <param name="tokenId">The resource ID of the ACR token used to
        /// authenticate the connected registry to its parent during
        /// sync.</param>
        /// <param name="messageTtl">The period of time for which a message is
        /// available to sync before it is expired. Specify the duration using
        /// the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.</param>
        /// <param name="schedule">The cron expression indicating the schedule
        /// that the connected registry will sync with its parent.</param>
        /// <param name="syncWindow">The time window during which sync is
        /// enabled for each schedule occurrence. Specify the duration using
        /// the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.</param>
        /// <param name="lastSyncTime">The last time a sync occurred between
        /// the connected registry and its parent.</param>
        /// <param name="gatewayEndpoint">The gateway endpoint used by the
        /// connected registry to communicate with its parent.</param>
        public SyncProperties(string tokenId, System.TimeSpan messageTtl, string schedule = default(string), System.TimeSpan? syncWindow = default(System.TimeSpan?), System.DateTime? lastSyncTime = default(System.DateTime?), string gatewayEndpoint = default(string))
        {
            TokenId = tokenId;
            Schedule = schedule;
            SyncWindow = syncWindow;
            MessageTtl = messageTtl;
            LastSyncTime = lastSyncTime;
            GatewayEndpoint = gatewayEndpoint;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource ID of the ACR token used to authenticate
        /// the connected registry to its parent during sync.
        /// </summary>
        [JsonProperty(PropertyName = "tokenId")]
        public string TokenId { get; set; }

        /// <summary>
        /// Gets or sets the cron expression indicating the schedule that the
        /// connected registry will sync with its parent.
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public string Schedule { get; set; }

        /// <summary>
        /// Gets or sets the time window during which sync is enabled for each
        /// schedule occurrence. Specify the duration using the format
        /// P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        /// </summary>
        [JsonProperty(PropertyName = "syncWindow")]
        public System.TimeSpan? SyncWindow { get; set; }

        /// <summary>
        /// Gets or sets the period of time for which a message is available to
        /// sync before it is expired. Specify the duration using the format
        /// P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
        /// </summary>
        [JsonProperty(PropertyName = "messageTtl")]
        public System.TimeSpan MessageTtl { get; set; }

        /// <summary>
        /// Gets the last time a sync occurred between the connected registry
        /// and its parent.
        /// </summary>
        [JsonProperty(PropertyName = "lastSyncTime")]
        public System.DateTime? LastSyncTime { get; private set; }

        /// <summary>
        /// Gets the gateway endpoint used by the connected registry to
        /// communicate with its parent.
        /// </summary>
        [JsonProperty(PropertyName = "gatewayEndpoint")]
        public string GatewayEndpoint { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TokenId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TokenId");
            }
        }
    }
}
