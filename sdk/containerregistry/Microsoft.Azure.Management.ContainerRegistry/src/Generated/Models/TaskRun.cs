// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The task run that has the ARM resource and properties.
    /// The task run will have the information of request and result of a run.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class TaskRun : Resource
    {
        /// <summary>
        /// Initializes a new instance of the TaskRun class.
        /// </summary>
        public TaskRun()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TaskRun class.
        /// </summary>
        /// <param name="location">The location of the resource. This cannot be
        /// changed after the resource is created.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="identity">Identity for the resource.</param>
        /// <param name="provisioningState">The provisioning state of this task
        /// run. Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'</param>
        /// <param name="runRequest">The request (parameters) for the
        /// run</param>
        /// <param name="runResult">The result of this task run</param>
        /// <param name="forceUpdateTag">How the run should be forced to rerun
        /// even if the run request configuration has not changed</param>
        public TaskRun(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IdentityProperties identity = default(IdentityProperties), string provisioningState = default(string), RunRequest runRequest = default(RunRequest), Run runResult = default(Run), string forceUpdateTag = default(string))
            : base(location, id, name, type, tags)
        {
            Identity = identity;
            ProvisioningState = provisioningState;
            RunRequest = runRequest;
            RunResult = runResult;
            ForceUpdateTag = forceUpdateTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identity for the resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityProperties Identity { get; set; }

        /// <summary>
        /// Gets the provisioning state of this task run. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the request (parameters) for the run
        /// </summary>
        [JsonProperty(PropertyName = "properties.runRequest")]
        public RunRequest RunRequest { get; set; }

        /// <summary>
        /// Gets the result of this task run
        /// </summary>
        [JsonProperty(PropertyName = "properties.runResult")]
        public Run RunResult { get; private set; }

        /// <summary>
        /// Gets or sets how the run should be forced to rerun even if the run
        /// request configuration has not changed
        /// </summary>
        [JsonProperty(PropertyName = "properties.forceUpdateTag")]
        public string ForceUpdateTag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (RunResult != null)
            {
                RunResult.Validate();
            }
        }
    }
}
