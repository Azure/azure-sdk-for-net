// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters for updating a container registry.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RegistryUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the RegistryUpdateParameters class.
        /// </summary>
        public RegistryUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegistryUpdateParameters class.
        /// </summary>
        /// <param name="tags">The tags for the container registry.</param>
        /// <param name="sku">The SKU of the container registry.</param>
        /// <param name="identity">The identity of the container
        /// registry.</param>
        /// <param name="adminUserEnabled">The value that indicates whether the
        /// admin user is enabled.</param>
        /// <param name="networkRuleSet">The network rule set for a container
        /// registry.</param>
        /// <param name="policies">The policies for a container
        /// registry.</param>
        /// <param name="encryption">The encryption settings of container
        /// registry.</param>
        /// <param name="dataEndpointEnabled">Enable a single data endpoint per
        /// region for serving data.</param>
        /// <param name="publicNetworkAccess">Whether or not public network
        /// access is allowed for the container registry. Possible values
        /// include: 'Enabled', 'Disabled'</param>
        public RegistryUpdateParameters(IDictionary<string, string> tags = default(IDictionary<string, string>), Sku sku = default(Sku), IdentityProperties identity = default(IdentityProperties), bool? adminUserEnabled = default(bool?), NetworkRuleSet networkRuleSet = default(NetworkRuleSet), Policies policies = default(Policies), EncryptionProperty encryption = default(EncryptionProperty), bool? dataEndpointEnabled = default(bool?), string publicNetworkAccess = default(string))
        {
            Tags = tags;
            Sku = sku;
            Identity = identity;
            AdminUserEnabled = adminUserEnabled;
            NetworkRuleSet = networkRuleSet;
            Policies = policies;
            Encryption = encryption;
            DataEndpointEnabled = dataEndpointEnabled;
            PublicNetworkAccess = publicNetworkAccess;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the tags for the container registry.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the SKU of the container registry.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets the identity of the container registry.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityProperties Identity { get; set; }

        /// <summary>
        /// Gets or sets the value that indicates whether the admin user is
        /// enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.adminUserEnabled")]
        public bool? AdminUserEnabled { get; set; }

        /// <summary>
        /// Gets or sets the network rule set for a container registry.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkRuleSet")]
        public NetworkRuleSet NetworkRuleSet { get; set; }

        /// <summary>
        /// Gets or sets the policies for a container registry.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policies")]
        public Policies Policies { get; set; }

        /// <summary>
        /// Gets or sets the encryption settings of container registry.
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryption")]
        public EncryptionProperty Encryption { get; set; }

        /// <summary>
        /// Gets or sets enable a single data endpoint per region for serving
        /// data.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataEndpointEnabled")]
        public bool? DataEndpointEnabled { get; set; }

        /// <summary>
        /// Gets or sets whether or not public network access is allowed for
        /// the container registry. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (NetworkRuleSet != null)
            {
                NetworkRuleSet.Validate();
            }
        }
    }
}
