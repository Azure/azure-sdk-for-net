// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// IP rule with specific IP or IP range in CIDR format.
    /// </summary>
    public partial class IPRule
    {
        /// <summary>
        /// Initializes a new instance of the IPRule class.
        /// </summary>
        public IPRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IPRule class.
        /// </summary>
        /// <param name="iPAddressOrRange">Specifies the IP or IP range in CIDR
        /// format. Only IPV4 address is allowed.</param>
        /// <param name="action">The action of IP ACL rule. Possible values
        /// include: 'Allow'</param>
        public IPRule(string iPAddressOrRange, string action = default(string))
        {
            Action = action;
            IPAddressOrRange = iPAddressOrRange;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the action of IP ACL rule. Possible values include:
        /// 'Allow'
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets specifies the IP or IP range in CIDR format. Only IPV4
        /// address is allowed.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string IPAddressOrRange { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IPAddressOrRange == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IPAddressOrRange");
            }
        }
    }
}
