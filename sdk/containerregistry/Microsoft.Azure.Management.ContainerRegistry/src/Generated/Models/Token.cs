// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An object that represents a token for a container registry.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Token : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Token class.
        /// </summary>
        public Token()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Token class.
        /// </summary>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="creationDate">The creation date of scope map.</param>
        /// <param name="provisioningState">Provisioning state of the resource.
        /// Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'</param>
        /// <param name="scopeMapId">The resource ID of the scope map to which
        /// the token will be associated with.</param>
        /// <param name="credentials">The credentials that can be used for
        /// authenticating the token.</param>
        /// <param name="status">The status of the token example enabled or
        /// disabled. Possible values include: 'enabled', 'disabled'</param>
        public Token(string id = default(string), string name = default(string), string type = default(string), System.DateTime? creationDate = default(System.DateTime?), string provisioningState = default(string), string scopeMapId = default(string), TokenCredentialsProperties credentials = default(TokenCredentialsProperties), string status = default(string))
            : base(id, name, type)
        {
            CreationDate = creationDate;
            ProvisioningState = provisioningState;
            ScopeMapId = scopeMapId;
            Credentials = credentials;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the creation date of scope map.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets provisioning state of the resource. Possible values include:
        /// 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the resource ID of the scope map to which the token
        /// will be associated with.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scopeMapId")]
        public string ScopeMapId { get; set; }

        /// <summary>
        /// Gets or sets the credentials that can be used for authenticating
        /// the token.
        /// </summary>
        [JsonProperty(PropertyName = "properties.credentials")]
        public TokenCredentialsProperties Credentials { get; set; }

        /// <summary>
        /// Gets or sets the status of the token example enabled or disabled.
        /// Possible values include: 'enabled', 'disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

    }
}
