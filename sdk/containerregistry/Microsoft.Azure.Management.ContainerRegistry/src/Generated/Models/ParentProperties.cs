// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties of the connected registry parent.
    /// </summary>
    public partial class ParentProperties
    {
        /// <summary>
        /// Initializes a new instance of the ParentProperties class.
        /// </summary>
        public ParentProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ParentProperties class.
        /// </summary>
        /// <param name="syncProperties">The sync properties of the connected
        /// registry with its parent.</param>
        /// <param name="id">The resource ID of the parent to which the
        /// connected registry will be associated.</param>
        public ParentProperties(SyncProperties syncProperties, string id = default(string))
        {
            Id = id;
            SyncProperties = syncProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource ID of the parent to which the connected
        /// registry will be associated.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the sync properties of the connected registry with its
        /// parent.
        /// </summary>
        [JsonProperty(PropertyName = "syncProperties")]
        public SyncProperties SyncProperties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SyncProperties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SyncProperties");
            }
            if (SyncProperties != null)
            {
                SyncProperties.Validate();
            }
        }
    }
}
