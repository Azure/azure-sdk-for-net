// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An object that represents an export pipeline for a container registry.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ExportPipeline : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ExportPipeline class.
        /// </summary>
        public ExportPipeline()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExportPipeline class.
        /// </summary>
        /// <param name="target">The target properties of the export
        /// pipeline.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="location">The location of the export pipeline.</param>
        /// <param name="identity">The identity of the export pipeline.</param>
        /// <param name="options">The list of all options configured for the
        /// pipeline.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// pipeline at the time the operation was called. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'</param>
        public ExportPipeline(ExportPipelineTargetProperties target, string id = default(string), string name = default(string), string type = default(string), string location = default(string), IdentityProperties identity = default(IdentityProperties), IList<string> options = default(IList<string>), string provisioningState = default(string))
            : base(id, name, type)
        {
            Location = location;
            Identity = identity;
            Target = target;
            Options = options;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the location of the export pipeline.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the identity of the export pipeline.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityProperties Identity { get; set; }

        /// <summary>
        /// Gets or sets the target properties of the export pipeline.
        /// </summary>
        [JsonProperty(PropertyName = "properties.target")]
        public ExportPipelineTargetProperties Target { get; set; }

        /// <summary>
        /// Gets or sets the list of all options configured for the pipeline.
        /// </summary>
        [JsonProperty(PropertyName = "properties.options")]
        public IList<string> Options { get; set; }

        /// <summary>
        /// Gets the provisioning state of the pipeline at the time the
        /// operation was called. Possible values include: 'Creating',
        /// 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Target == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Target");
            }
            if (Target != null)
            {
                Target.Validate();
            }
        }
    }
}
