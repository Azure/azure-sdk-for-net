// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class OverrideTaskStepProperties
    {
        /// <summary>
        /// Initializes a new instance of the OverrideTaskStepProperties class.
        /// </summary>
        public OverrideTaskStepProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OverrideTaskStepProperties class.
        /// </summary>
        /// <param name="contextPath">The source context against which run has
        /// to be queued.</param>
        /// <param name="file">The file against which run has to be
        /// queued.</param>
        /// <param name="arguments">Gets or sets the collection of override
        /// arguments to be used when
        /// executing a build step.</param>
        /// <param name="target">The name of the target build stage for the
        /// docker build.</param>
        /// <param name="values">The collection of overridable values that can
        /// be passed when running a Task.</param>
        /// <param name="updateTriggerToken">Base64 encoded update trigger
        /// token that will be attached with the base image trigger
        /// webhook.</param>
        public OverrideTaskStepProperties(string contextPath = default(string), string file = default(string), IList<Argument> arguments = default(IList<Argument>), string target = default(string), IList<SetValue> values = default(IList<SetValue>), string updateTriggerToken = default(string))
        {
            ContextPath = contextPath;
            File = file;
            Arguments = arguments;
            Target = target;
            Values = values;
            UpdateTriggerToken = updateTriggerToken;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the source context against which run has to be queued.
        /// </summary>
        [JsonProperty(PropertyName = "contextPath")]
        public string ContextPath { get; set; }

        /// <summary>
        /// Gets or sets the file against which run has to be queued.
        /// </summary>
        [JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// Gets or sets the collection of override arguments to be used when
        /// executing a build step.
        /// </summary>
        [JsonProperty(PropertyName = "arguments")]
        public IList<Argument> Arguments { get; set; }

        /// <summary>
        /// Gets or sets the name of the target build stage for the docker
        /// build.
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public string Target { get; set; }

        /// <summary>
        /// Gets or sets the collection of overridable values that can be
        /// passed when running a Task.
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public IList<SetValue> Values { get; set; }

        /// <summary>
        /// Gets or sets base64 encoded update trigger token that will be
        /// attached with the base image trigger webhook.
        /// </summary>
        [JsonProperty(PropertyName = "updateTriggerToken")]
        public string UpdateTriggerToken { get; set; }

    }
}
