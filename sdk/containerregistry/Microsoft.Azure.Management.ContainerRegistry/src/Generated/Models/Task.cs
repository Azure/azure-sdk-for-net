// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The task that has the ARM resource and task properties.
    /// The task will have all information to schedule a run against it.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Task : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Task class.
        /// </summary>
        public Task()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Task class.
        /// </summary>
        /// <param name="location">The location of the resource. This cannot be
        /// changed after the resource is created.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="systemData">Metadata pertaining to creation and last
        /// modification of the resource.</param>
        /// <param name="identity">Identity for the resource.</param>
        /// <param name="provisioningState">The provisioning state of the task.
        /// Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'</param>
        /// <param name="creationDate">The creation date of task.</param>
        /// <param name="status">The current status of task. Possible values
        /// include: 'Disabled', 'Enabled'</param>
        /// <param name="platform">The platform properties against which the
        /// run has to happen.</param>
        /// <param name="agentConfiguration">The machine configuration of the
        /// run agent.</param>
        /// <param name="agentPoolName">The dedicated agent pool for the
        /// task.</param>
        /// <param name="timeout">Run timeout in seconds.</param>
        /// <param name="step">The properties of a task step.</param>
        /// <param name="trigger">The properties that describe all triggers for
        /// the task.</param>
        /// <param name="credentials">The properties that describes a set of
        /// credentials that will be used when this run is invoked.</param>
        /// <param name="logTemplate">The template that describes the
        /// repository and tag information for run log artifact.</param>
        /// <param name="isSystemTask">The value of this property indicates
        /// whether the task resource is system task or not.</param>
        public Task(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), SystemData systemData = default(SystemData), IdentityProperties identity = default(IdentityProperties), string provisioningState = default(string), System.DateTime? creationDate = default(System.DateTime?), string status = default(string), PlatformProperties platform = default(PlatformProperties), AgentProperties agentConfiguration = default(AgentProperties), string agentPoolName = default(string), int? timeout = default(int?), TaskStepProperties step = default(TaskStepProperties), TriggerProperties trigger = default(TriggerProperties), Credentials credentials = default(Credentials), string logTemplate = default(string), bool? isSystemTask = default(bool?))
            : base(location, id, name, type, tags, systemData)
        {
            Identity = identity;
            ProvisioningState = provisioningState;
            CreationDate = creationDate;
            Status = status;
            Platform = platform;
            AgentConfiguration = agentConfiguration;
            AgentPoolName = agentPoolName;
            Timeout = timeout;
            Step = step;
            Trigger = trigger;
            Credentials = credentials;
            LogTemplate = logTemplate;
            IsSystemTask = isSystemTask;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identity for the resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityProperties Identity { get; set; }

        /// <summary>
        /// Gets the provisioning state of the task. Possible values include:
        /// 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the creation date of task.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets or sets the current status of task. Possible values include:
        /// 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the platform properties against which the run has to
        /// happen.
        /// </summary>
        [JsonProperty(PropertyName = "properties.platform")]
        public PlatformProperties Platform { get; set; }

        /// <summary>
        /// Gets or sets the machine configuration of the run agent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.agentConfiguration")]
        public AgentProperties AgentConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the dedicated agent pool for the task.
        /// </summary>
        [JsonProperty(PropertyName = "properties.agentPoolName")]
        public string AgentPoolName { get; set; }

        /// <summary>
        /// Gets or sets run timeout in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeout")]
        public int? Timeout { get; set; }

        /// <summary>
        /// Gets or sets the properties of a task step.
        /// </summary>
        [JsonProperty(PropertyName = "properties.step")]
        public TaskStepProperties Step { get; set; }

        /// <summary>
        /// Gets or sets the properties that describe all triggers for the
        /// task.
        /// </summary>
        [JsonProperty(PropertyName = "properties.trigger")]
        public TriggerProperties Trigger { get; set; }

        /// <summary>
        /// Gets or sets the properties that describes a set of credentials
        /// that will be used when this run is invoked.
        /// </summary>
        [JsonProperty(PropertyName = "properties.credentials")]
        public Credentials Credentials { get; set; }

        /// <summary>
        /// Gets or sets the template that describes the repository and tag
        /// information for run log artifact.
        /// </summary>
        [JsonProperty(PropertyName = "properties.logTemplate")]
        public string LogTemplate { get; set; }

        /// <summary>
        /// Gets or sets the value of this property indicates whether the task
        /// resource is system task or not.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isSystemTask")]
        public bool? IsSystemTask { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Platform != null)
            {
                Platform.Validate();
            }
            if (Timeout > 28800)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Timeout", 28800);
            }
            if (Timeout < 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Timeout", 300);
            }
            if (Trigger != null)
            {
                Trigger.Validate();
            }
        }
    }
}
