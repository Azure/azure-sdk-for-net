// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An object that represents a scope map for a container registry.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ScopeMap : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ScopeMap class.
        /// </summary>
        public ScopeMap()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScopeMap class.
        /// </summary>
        /// <param name="actions">The list of scoped permissions for registry
        /// artifacts.
        /// E.g. repositories/repository-name/content/read,
        /// repositories/repository-name/metadata/write</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="description">The user friendly description of the
        /// scope map.</param>
        /// <param name="scopeMapType">The type of the scope map. E.g. BuildIn
        /// scope map.</param>
        /// <param name="creationDate">The creation date of scope map.</param>
        /// <param name="provisioningState">Provisioning state of the resource.
        /// Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'</param>
        public ScopeMap(IList<string> actions, string id = default(string), string name = default(string), string type = default(string), string description = default(string), string scopeMapType = default(string), System.DateTime? creationDate = default(System.DateTime?), string provisioningState = default(string))
            : base(id, name, type)
        {
            Description = description;
            ScopeMapType = scopeMapType;
            CreationDate = creationDate;
            ProvisioningState = provisioningState;
            Actions = actions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the user friendly description of the scope map.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets the type of the scope map. E.g. BuildIn scope map.
        /// </summary>
        [JsonProperty(PropertyName = "properties.type")]
        public string ScopeMapType { get; private set; }

        /// <summary>
        /// Gets the creation date of scope map.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets provisioning state of the resource. Possible values include:
        /// 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the list of scoped permissions for registry artifacts.
        /// E.g. repositories/repository-name/content/read,
        /// repositories/repository-name/metadata/write
        /// </summary>
        [JsonProperty(PropertyName = "properties.actions")]
        public IList<string> Actions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Actions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Actions");
            }
        }
    }
}
