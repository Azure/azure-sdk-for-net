// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;

    /// <summary>
    /// Extension methods for ConnectedRegistriesOperations.
    /// </summary>
    public static partial class ConnectedRegistriesOperationsExtensions
    {
            /// <summary>
            /// Lists all connected registries for the specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='filter'>
            /// An OData filter expression that describes a subset of connectedRegistries
            /// to return. The parameters that can be filtered are parent.id (the resource
            /// id of the connectedRegistry parent), mode, and connectionState. The
            /// supported operator is eq.
            /// </param>
            public static IPage<ConnectedRegistry> List(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string filter = default(string))
            {
                return operations.ListAsync(resourceGroupName, registryName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all connected registries for the specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='filter'>
            /// An OData filter expression that describes a subset of connectedRegistries
            /// to return. The parameters that can be filtered are parent.id (the resource
            /// id of the connectedRegistry parent), mode, and connectionState. The
            /// supported operator is eq.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IPage<ConnectedRegistry>> ListAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, registryName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the properties of the connected registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            public static ConnectedRegistry Get(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName)
            {
                return operations.GetAsync(resourceGroupName, registryName, connectedRegistryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the properties of the connected registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectedRegistry> GetAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a connected registry for a container registry with the specified
            /// parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='connectedRegistryCreateParameters'>
            /// The parameters for creating a connectedRegistry.
            /// </param>
            public static ConnectedRegistry Create(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, ConnectedRegistry connectedRegistryCreateParameters)
            {
                return operations.CreateAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a connected registry for a container registry with the specified
            /// parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='connectedRegistryCreateParameters'>
            /// The parameters for creating a connectedRegistry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectedRegistry> CreateAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, ConnectedRegistry connectedRegistryCreateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connected registry from a container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            public static void Delete(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName)
            {
                operations.DeleteAsync(resourceGroupName, registryName, connectedRegistryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connected registry from a container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a connected registry with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='connectedRegistryUpdateParameters'>
            /// The parameters for updating a connectedRegistry.
            /// </param>
            public static ConnectedRegistry Update(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters)
            {
                return operations.UpdateAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a connected registry with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='connectedRegistryUpdateParameters'>
            /// The parameters for updating a connectedRegistry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectedRegistry> UpdateAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deactivates the connected registry instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            public static void Deactivate(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName)
            {
                operations.DeactivateAsync(resourceGroupName, registryName, connectedRegistryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivates the connected registry instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeactivateAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeactivateWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a connected registry for a container registry with the specified
            /// parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='connectedRegistryCreateParameters'>
            /// The parameters for creating a connectedRegistry.
            /// </param>
            public static ConnectedRegistry BeginCreate(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, ConnectedRegistry connectedRegistryCreateParameters)
            {
                return operations.BeginCreateAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a connected registry for a container registry with the specified
            /// parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='connectedRegistryCreateParameters'>
            /// The parameters for creating a connectedRegistry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectedRegistry> BeginCreateAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, ConnectedRegistry connectedRegistryCreateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connected registry from a container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            public static void BeginDelete(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName)
            {
                operations.BeginDeleteAsync(resourceGroupName, registryName, connectedRegistryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connected registry from a container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a connected registry with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='connectedRegistryUpdateParameters'>
            /// The parameters for updating a connectedRegistry.
            /// </param>
            public static ConnectedRegistry BeginUpdate(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a connected registry with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='connectedRegistryUpdateParameters'>
            /// The parameters for updating a connectedRegistry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectedRegistry> BeginUpdateAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deactivates the connected registry instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            public static void BeginDeactivate(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName)
            {
                operations.BeginDeactivateAsync(resourceGroupName, registryName, connectedRegistryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivates the connected registry instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='connectedRegistryName'>
            /// The name of the connected registry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeactivateAsync(this IConnectedRegistriesOperations operations, string resourceGroupName, string registryName, string connectedRegistryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeactivateWithHttpMessagesAsync(resourceGroupName, registryName, connectedRegistryName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all connected registries for the specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ConnectedRegistry> ListNext(this IConnectedRegistriesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all connected registries for the specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IPage<ConnectedRegistry>> ListNextAsync(this IConnectedRegistriesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
