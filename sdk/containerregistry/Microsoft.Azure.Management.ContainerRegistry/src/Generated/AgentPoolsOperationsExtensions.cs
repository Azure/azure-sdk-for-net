// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;

    /// <summary>
    /// Extension methods for AgentPoolsOperations.
    /// </summary>
    public static partial class AgentPoolsOperationsExtensions
    {
            /// <summary>
            /// Gets the detailed information for a given agent pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            public static AgentPool Get(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName)
            {
                return operations.GetAsync(resourceGroupName, registryName, agentPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the detailed information for a given agent pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AgentPool> GetAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, registryName, agentPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an agent pool for a container registry with the specified
            /// parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='agentPool'>
            /// The parameters of an agent pool that needs to scheduled.
            /// </param>
            public static AgentPool Create(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, AgentPool agentPool)
            {
                return operations.CreateAsync(resourceGroupName, registryName, agentPoolName, agentPool).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an agent pool for a container registry with the specified
            /// parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='agentPool'>
            /// The parameters of an agent pool that needs to scheduled.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AgentPool> CreateAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, AgentPool agentPool, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, registryName, agentPoolName, agentPool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified agent pool resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            public static void Delete(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName)
            {
                operations.DeleteAsync(resourceGroupName, registryName, agentPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified agent pool resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, registryName, agentPoolName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an agent pool with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='count'>
            /// The count of agent machine
            /// </param>
            /// <param name='tags'>
            /// The ARM resource tags.
            /// </param>
            public static AgentPool Update(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, int? count = default(int?), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, registryName, agentPoolName, count, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an agent pool with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='count'>
            /// The count of agent machine
            /// </param>
            /// <param name='tags'>
            /// The ARM resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AgentPool> UpdateAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, int? count = default(int?), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, registryName, agentPoolName, count, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the agent pools for a specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            public static IPage<AgentPool> List(this IAgentPoolsOperations operations, string resourceGroupName, string registryName)
            {
                return operations.ListAsync(resourceGroupName, registryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the agent pools for a specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IPage<AgentPool>> ListAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, registryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the count of queued runs for a given agent pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            public static AgentPoolQueueStatus GetQueueStatus(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName)
            {
                return operations.GetQueueStatusAsync(resourceGroupName, registryName, agentPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the count of queued runs for a given agent pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AgentPoolQueueStatus> GetQueueStatusAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueueStatusWithHttpMessagesAsync(resourceGroupName, registryName, agentPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an agent pool for a container registry with the specified
            /// parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='agentPool'>
            /// The parameters of an agent pool that needs to scheduled.
            /// </param>
            public static AgentPool BeginCreate(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, AgentPool agentPool)
            {
                return operations.BeginCreateAsync(resourceGroupName, registryName, agentPoolName, agentPool).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an agent pool for a container registry with the specified
            /// parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='agentPool'>
            /// The parameters of an agent pool that needs to scheduled.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AgentPool> BeginCreateAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, AgentPool agentPool, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, registryName, agentPoolName, agentPool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified agent pool resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            public static void BeginDelete(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName)
            {
                operations.BeginDeleteAsync(resourceGroupName, registryName, agentPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified agent pool resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, registryName, agentPoolName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an agent pool with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='count'>
            /// The count of agent machine
            /// </param>
            /// <param name='tags'>
            /// The ARM resource tags.
            /// </param>
            public static AgentPool BeginUpdate(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, int? count = default(int?), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.BeginUpdateAsync(resourceGroupName, registryName, agentPoolName, count, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an agent pool with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='agentPoolName'>
            /// The name of the agent pool.
            /// </param>
            /// <param name='count'>
            /// The count of agent machine
            /// </param>
            /// <param name='tags'>
            /// The ARM resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AgentPool> BeginUpdateAsync(this IAgentPoolsOperations operations, string resourceGroupName, string registryName, string agentPoolName, int? count = default(int?), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, registryName, agentPoolName, count, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the agent pools for a specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AgentPool> ListNext(this IAgentPoolsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the agent pools for a specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IPage<AgentPool>> ListNextAsync(this IAgentPoolsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
