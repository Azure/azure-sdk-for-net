// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;

    /// <summary>
    /// Extension methods for PipelineRunsOperations.
    /// </summary>
    public static partial class PipelineRunsOperationsExtensions
    {
            /// <summary>
            /// Gets the detailed information for a given pipeline run.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            public static PipelineRun Get(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName)
            {
                return operations.GetAsync(resourceGroupName, registryName, pipelineRunName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the detailed information for a given pipeline run.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PipelineRun> GetAsync(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, registryName, pipelineRunName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a pipeline run for a container registry with the specified
            /// parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='request'>
            /// The request parameters for a pipeline run.
            /// </param>
            /// <param name='forceUpdateTag'>
            /// How the pipeline run should be forced to recreate even if the pipeline run
            /// configuration has not changed.
            /// </param>
            public static PipelineRun Create(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName, PipelineRunRequest request = default(PipelineRunRequest), string forceUpdateTag = default(string))
            {
                return operations.CreateAsync(resourceGroupName, registryName, pipelineRunName, request, forceUpdateTag).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a pipeline run for a container registry with the specified
            /// parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='request'>
            /// The request parameters for a pipeline run.
            /// </param>
            /// <param name='forceUpdateTag'>
            /// How the pipeline run should be forced to recreate even if the pipeline run
            /// configuration has not changed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PipelineRun> CreateAsync(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName, PipelineRunRequest request = default(PipelineRunRequest), string forceUpdateTag = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, registryName, pipelineRunName, request, forceUpdateTag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a pipeline run from a container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            public static void Delete(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName)
            {
                operations.DeleteAsync(resourceGroupName, registryName, pipelineRunName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a pipeline run from a container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, registryName, pipelineRunName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the pipeline runs for the specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            public static IPage<PipelineRun> List(this IPipelineRunsOperations operations, string resourceGroupName, string registryName)
            {
                return operations.ListAsync(resourceGroupName, registryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the pipeline runs for the specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IPage<PipelineRun>> ListAsync(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, registryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a pipeline run for a container registry with the specified
            /// parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='request'>
            /// The request parameters for a pipeline run.
            /// </param>
            /// <param name='forceUpdateTag'>
            /// How the pipeline run should be forced to recreate even if the pipeline run
            /// configuration has not changed.
            /// </param>
            public static PipelineRun BeginCreate(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName, PipelineRunRequest request = default(PipelineRunRequest), string forceUpdateTag = default(string))
            {
                return operations.BeginCreateAsync(resourceGroupName, registryName, pipelineRunName, request, forceUpdateTag).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a pipeline run for a container registry with the specified
            /// parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='request'>
            /// The request parameters for a pipeline run.
            /// </param>
            /// <param name='forceUpdateTag'>
            /// How the pipeline run should be forced to recreate even if the pipeline run
            /// configuration has not changed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PipelineRun> BeginCreateAsync(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName, PipelineRunRequest request = default(PipelineRunRequest), string forceUpdateTag = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, registryName, pipelineRunName, request, forceUpdateTag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a pipeline run from a container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            public static void BeginDelete(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName)
            {
                operations.BeginDeleteAsync(resourceGroupName, registryName, pipelineRunName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a pipeline run from a container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='registryName'>
            /// The name of the container registry.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteAsync(this IPipelineRunsOperations operations, string resourceGroupName, string registryName, string pipelineRunName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, registryName, pipelineRunName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the pipeline runs for the specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PipelineRun> ListNext(this IPipelineRunsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the pipeline runs for the specified container registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IPage<PipelineRun>> ListNextAsync(this IPipelineRunsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
