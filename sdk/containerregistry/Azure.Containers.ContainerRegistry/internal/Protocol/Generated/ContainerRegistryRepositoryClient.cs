// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace Azure.Containers.ContainerRegistry.Protocol
{
    /// <summary> The ContainerRegistryRepository service client. </summary>
    public partial class ContainerRegistryRepositoryClient
    {
        /// <summary>
        /// </summary>
        protected HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://management.core.windows.net/.default" };
        private string url;

        /// <summary> Initializes a new instance of ContainerRegistryRepositoryClient for mocking. </summary>
        protected ContainerRegistryRepositoryClient()
        {
        }

        /// <summary> Initializes a new instance of ContainerRegistryRepositoryClient. </summary>
        /// <param name="url"> Registry login URL. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        internal ContainerRegistryRepositoryClient(string url, TokenCredential credential, ContainerRegistryProtocolClientOptions options = null)
        {
            if (url == null)
            {
                throw new ArgumentNullException(nameof(url));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new ContainerRegistryProtocolClientOptions();
            Pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, AuthorizationScopes));
            this.url = url;
        }

        /// <summary> Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="accept"> Accept header string delimited by comma. For example, application/vnd.docker.distribution.manifest.v2+json. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetManifestAsync(RequestContent requestBody, string name, string reference, string accept = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetManifestRequest(requestBody, name, reference, accept);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="accept"> Accept header string delimited by comma. For example, application/vnd.docker.distribution.manifest.v2+json. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetManifest(RequestContent requestBody, string name, string reference, string accept = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetManifestRequest(requestBody, name, reference, accept);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetManifest"/> and <see cref="GetManifestAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="accept"> Accept header string delimited by comma. For example, application/vnd.docker.distribution.manifest.v2+json. </param>
        protected Request CreateGetManifestRequest(RequestContent requestBody, string name, string reference, string accept = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            if (accept != null)
            {
                request.Headers.Add("accept", accept);
            }
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateManifestAsync(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateManifestRequest(requestBody, name, reference);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateManifest(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateManifestRequest(requestBody, name, reference);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateManifest"/> and <see cref="CreateManifestAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        protected Request CreateCreateManifestRequest(RequestContent requestBody, string name, string reference)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/vnd.docker.distribution.manifest.v2+json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Digest of a BLOB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteManifestAsync(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteManifestRequest(requestBody, name, reference);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Digest of a BLOB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteManifest(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteManifestRequest(requestBody, name, reference);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteManifest"/> and <see cref="DeleteManifestAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Digest of a BLOB. </param>
        protected Request CreateDeleteManifestRequest(RequestContent requestBody, string name, string reference)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get repository attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetPropertiesAsync(RequestContent requestBody, string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetPropertiesRequest(requestBody, name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get repository attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetProperties(RequestContent requestBody, string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetPropertiesRequest(requestBody, name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetProperties"/> and <see cref="GetPropertiesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        protected Request CreateGetPropertiesRequest(RequestContent requestBody, string name)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update the attribute identified by `name` where `reference` is the name of the repository. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SetPropertiesAsync(RequestContent requestBody, string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateSetPropertiesRequest(requestBody, name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update the attribute identified by `name` where `reference` is the name of the repository. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SetProperties(RequestContent requestBody, string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateSetPropertiesRequest(requestBody, name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="SetProperties"/> and <see cref="SetPropertiesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        protected Request CreateSetPropertiesRequest(RequestContent requestBody, string name)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> List tags of a repository. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="digest"> filter by digest. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTagsAsync(RequestContent requestBody, string name, string last = null, int? n = null, string orderby = null, string digest = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTagsRequest(requestBody, name, last, n, orderby, digest);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List tags of a repository. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="digest"> filter by digest. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTags(RequestContent requestBody, string name, string last = null, int? n = null, string orderby = null, string digest = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTagsRequest(requestBody, name, last, n, orderby, digest);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTags"/> and <see cref="GetTagsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="digest"> filter by digest. </param>
        protected Request CreateGetTagsRequest(RequestContent requestBody, string name, string last = null, int? n = null, string orderby = null, string digest = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_tags", false);
            if (last != null)
            {
                uri.AppendQuery("last", last, true);
            }
            if (n != null)
            {
                uri.AppendQuery("n", n.Value, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("orderby", orderby, true);
            }
            if (digest != null)
            {
                uri.AppendQuery("digest", digest, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get tag attributes by tag. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTagPropertiesAsync(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTagPropertiesRequest(requestBody, name, reference);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get tag attributes by tag. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTagProperties(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTagPropertiesRequest(requestBody, name, reference);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTagProperties"/> and <see cref="GetTagPropertiesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        protected Request CreateGetTagPropertiesRequest(RequestContent requestBody, string name, string reference)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update tag attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateTagAttributesAsync(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateTagAttributesRequest(requestBody, name, reference);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update tag attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateTagAttributes(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateTagAttributesRequest(requestBody, name, reference);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateTagAttributes"/> and <see cref="UpdateTagAttributesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        protected Request CreateUpdateTagAttributesRequest(RequestContent requestBody, string name, string reference)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete tag. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteTagAsync(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTagRequest(requestBody, name, reference);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete tag. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteTag(RequestContent requestBody, string name, string reference, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTagRequest(requestBody, name, reference);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteTag"/> and <see cref="DeleteTagAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        protected Request CreateDeleteTagRequest(RequestContent requestBody, string name, string reference)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> List manifests of a repository. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetManifestsAsync(RequestContent requestBody, string name, string last = null, int? n = null, string orderby = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetManifestsRequest(requestBody, name, last, n, orderby);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List manifests of a repository. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetManifests(RequestContent requestBody, string name, string last = null, int? n = null, string orderby = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetManifestsRequest(requestBody, name, last, n, orderby);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetManifests"/> and <see cref="GetManifestsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        protected Request CreateGetManifestsRequest(RequestContent requestBody, string name, string last = null, int? n = null, string orderby = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_manifests", false);
            if (last != null)
            {
                uri.AppendQuery("last", last, true);
            }
            if (n != null)
            {
                uri.AppendQuery("n", n.Value, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("orderby", orderby, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get manifest attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetRegistryArtifactPropertiesAsync(RequestContent requestBody, string name, string digest, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRegistryArtifactPropertiesRequest(requestBody, name, digest);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get manifest attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetRegistryArtifactProperties(RequestContent requestBody, string name, string digest, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRegistryArtifactPropertiesRequest(requestBody, name, digest);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetRegistryArtifactProperties"/> and <see cref="GetRegistryArtifactPropertiesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        protected Request CreateGetRegistryArtifactPropertiesRequest(RequestContent requestBody, string name, string digest)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_manifests/", false);
            uri.AppendPath(digest, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update attributes of a manifest. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateManifestAttributesAsync(RequestContent requestBody, string name, string digest, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateManifestAttributesRequest(requestBody, name, digest);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update attributes of a manifest. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateManifestAttributes(RequestContent requestBody, string name, string digest, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateManifestAttributesRequest(requestBody, name, digest);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateManifestAttributes"/> and <see cref="UpdateManifestAttributesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        protected Request CreateUpdateManifestAttributesRequest(RequestContent requestBody, string name, string digest)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_manifests/", false);
            uri.AppendPath(digest, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
    }
}
