// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Containers.ContainerRegistry
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class ContainerRegistryModelFactory
    {
        /// <summary> Initializes new instance of RepositoryProperties class. </summary>
        /// <param name="registryLoginServer"> Registry login server name.  This is likely to be similar to {registry-name}.azurecr.io. </param>
        /// <param name="name"> Image name. </param>
        /// <param name="createdOn"> Image created time. </param>
        /// <param name="lastUpdatedOn"> Image last update time. </param>
        /// <param name="manifestCount"> Number of the manifests. </param>
        /// <param name="tagCount"> Number of the tags. </param>
        /// <param name="canDelete"> Delete enabled. </param>
        /// <param name="canWrite"> Write enabled. </param>
        /// <param name="canList"> List enabled. </param>
        /// <param name="canRead"> Read enabled. </param>
        /// <param name="teleportEnabled"> Enables Teleport functionality on new images in the repository improving Container startup performance. </param>
        /// <returns> A new <see cref="ContainerRegistry.RepositoryProperties"/> instance for mocking. </returns>
        public static RepositoryProperties RepositoryProperties(string registryLoginServer = default, string name = default, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, int manifestCount = default, int tagCount = default, bool? canDelete = default, bool? canWrite = default, bool? canList = default, bool? canRead = default, bool? teleportEnabled = default)
        {
            return new RepositoryProperties(registryLoginServer, name, createdOn, lastUpdatedOn, manifestCount, tagCount, canDelete, canWrite, canList, canRead, teleportEnabled);
        }

        /// <summary> Initializes new instance of DeleteRepositoryResult class. </summary>
        /// <param name="deletedManifests"> SHA of the deleted image. </param>
        /// <param name="deletedTags"> Tag of the deleted image. </param>
        /// <returns> A new <see cref="ContainerRegistry.DeleteRepositoryResult"/> instance for mocking. </returns>
        public static DeleteRepositoryResult DeleteRepositoryResult(IReadOnlyList<string> deletedManifests = default, IReadOnlyList<string> deletedTags = default)
        {
            deletedManifests ??= new List<string>();
            deletedTags ??= new List<string>();
            return new DeleteRepositoryResult(deletedManifests, deletedTags);
        }

        /// <summary> Initializes new instance of ArtifactTagProperties class. </summary>
        /// <param name="registryLoginServer"> Registry login server name.  This is likely to be similar to {registry-name}.azurecr.io. </param>
        /// <param name="repositoryName"> Image name. </param>
        /// <param name="name"> Tag name. </param>
        /// <param name="digest"> Tag digest. </param>
        /// <param name="createdOn"> Tag created time. </param>
        /// <param name="lastUpdatedOn"> Tag last update time. </param>
        /// <param name="canDelete"> Delete enabled. </param>
        /// <param name="canWrite"> Write enabled. </param>
        /// <param name="canList"> List enabled. </param>
        /// <param name="canRead"> Read enabled. </param>
        /// <returns> A new <see cref="ContainerRegistry.ArtifactTagProperties"/> instance for mocking. </returns>
        public static ArtifactTagProperties ArtifactTagProperties(string registryLoginServer = default, string repositoryName = default, string name = default, string digest = default, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, bool? canDelete = default, bool? canWrite = default, bool? canList = default, bool? canRead = default)
        {
            return new ArtifactTagProperties(registryLoginServer, repositoryName, name, digest, createdOn, lastUpdatedOn, canDelete, canWrite, canList, canRead);
        }

        /// <summary> Initializes new instance of ArtifactManifestReference class. </summary>
        /// <param name="digest"> Manifest digest. </param>
        /// <param name="architecture"> CPU architecture. </param>
        /// <param name="operatingSystem"> Operating system. </param>
        /// <returns> A new <see cref="ContainerRegistry.ArtifactManifestReference"/> instance for mocking. </returns>
        public static ArtifactManifestReference ArtifactManifestReference(string digest = default, ArtifactArchitecture architecture = default, ArtifactOperatingSystem operatingSystem = default)
        {
            return new ArtifactManifestReference(digest, architecture, operatingSystem);
        }

        /// <summary> Initializes new instance of ArtifactManifestProperties class. </summary>
        /// <param name="registryLoginServer"> Registry login server name.  This is likely to be similar to {registry-name}.azurecr.io. </param>
        /// <param name="repositoryName"> Repository name. </param>
        /// <param name="digest"> Manifest. </param>
        /// <param name="size"> Image size. </param>
        /// <param name="createdOn"> Created time. </param>
        /// <param name="lastUpdatedOn"> Last update time. </param>
        /// <param name="architecture"> CPU architecture. </param>
        /// <param name="operatingSystem"> Operating system. </param>
        /// <param name="manifestReferences"> List of manifests referenced by this manifest list.  List will be empty if this manifest is not a manifest list. </param>
        /// <param name="tags"> List of tags. </param>
        /// <param name="canDelete"> Delete enabled. </param>
        /// <param name="canWrite"> Write enabled. </param>
        /// <param name="canList"> List enabled. </param>
        /// <param name="canRead"> Read enabled. </param>
        /// <param name="quarantineState"> Quarantine state. </param>
        /// <param name="quarantineDetails"> Quarantine details. </param>
        /// <returns> A new <see cref="ContainerRegistry.ArtifactManifestProperties"/> instance for mocking. </returns>
        public static ArtifactManifestProperties ArtifactManifestProperties(string registryLoginServer = default, string repositoryName = default, string digest = default, long? size = default, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, ArtifactArchitecture? architecture = default, ArtifactOperatingSystem? operatingSystem = default, IReadOnlyList<ArtifactManifestReference> manifestReferences = default, IReadOnlyList<string> tags = default, bool? canDelete = default, bool? canWrite = default, bool? canList = default, bool? canRead = default, string quarantineState = default, string quarantineDetails = default)
        {
            manifestReferences ??= new List<ArtifactManifestReference>();
            tags ??= new List<string>();
            return new ArtifactManifestProperties(registryLoginServer, repositoryName, digest, size, createdOn, lastUpdatedOn, architecture, operatingSystem, manifestReferences, tags, canDelete, canWrite, canList, canRead, quarantineState, quarantineDetails);
        }
    }
}
