// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Containers.ContainerRegistry
{
    public partial class OciAnnotations : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("org.opencontainers.image.created"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (Core.Optional.IsDefined(Authors))
            {
                writer.WritePropertyName("org.opencontainers.image.authors"u8);
                writer.WriteStringValue(Authors);
            }
            if (Core.Optional.IsDefined(Url))
            {
                writer.WritePropertyName("org.opencontainers.image.url"u8);
                writer.WriteStringValue(Url.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(Documentation))
            {
                writer.WritePropertyName("org.opencontainers.image.documentation"u8);
                writer.WriteStringValue(Documentation.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(Source))
            {
                writer.WritePropertyName("org.opencontainers.image.source"u8);
                writer.WriteStringValue(Source.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(Version))
            {
                writer.WritePropertyName("org.opencontainers.image.version"u8);
                writer.WriteStringValue(Version);
            }
            if (Core.Optional.IsDefined(Revision))
            {
                writer.WritePropertyName("org.opencontainers.image.revision"u8);
                writer.WriteStringValue(Revision);
            }
            if (Core.Optional.IsDefined(Vendor))
            {
                writer.WritePropertyName("org.opencontainers.image.vendor"u8);
                writer.WriteStringValue(Vendor);
            }
            if (Core.Optional.IsDefined(Licenses))
            {
                writer.WritePropertyName("org.opencontainers.image.licenses"u8);
                writer.WriteStringValue(Licenses);
            }
            if (Core.Optional.IsDefined(Name))
            {
                writer.WritePropertyName("org.opencontainers.image.ref.name"u8);
                writer.WriteStringValue(Name);
            }
            if (Core.Optional.IsDefined(Title))
            {
                writer.WritePropertyName("org.opencontainers.image.title"u8);
                writer.WriteStringValue(Title);
            }
            if (Core.Optional.IsDefined(Description))
            {
                writer.WritePropertyName("org.opencontainers.image.description"u8);
                writer.WriteStringValue(Description);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static OciAnnotations DeserializeOciAnnotations(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<DateTimeOffset> orgOpencontainersImageCreated = default;
            Core.Optional<string> orgOpencontainersImageAuthors = default;
            Core.Optional<Uri> orgOpencontainersImageUrl = default;
            Core.Optional<Uri> orgOpencontainersImageDocumentation = default;
            Core.Optional<Uri> orgOpencontainersImageSource = default;
            Core.Optional<string> orgOpencontainersImageVersion = default;
            Core.Optional<string> orgOpencontainersImageRevision = default;
            Core.Optional<string> orgOpencontainersImageVendor = default;
            Core.Optional<string> orgOpencontainersImageLicenses = default;
            Core.Optional<string> orgOpencontainersImageRefName = default;
            Core.Optional<string> orgOpencontainersImageTitle = default;
            Core.Optional<string> orgOpencontainersImageDescription = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("org.opencontainers.image.created"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    orgOpencontainersImageCreated = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.authors"u8))
                {
                    orgOpencontainersImageAuthors = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.url"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    orgOpencontainersImageUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.documentation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    orgOpencontainersImageDocumentation = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.source"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    orgOpencontainersImageSource = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.version"u8))
                {
                    orgOpencontainersImageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.revision"u8))
                {
                    orgOpencontainersImageRevision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.vendor"u8))
                {
                    orgOpencontainersImageVendor = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.licenses"u8))
                {
                    orgOpencontainersImageLicenses = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.ref.name"u8))
                {
                    orgOpencontainersImageRefName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.title"u8))
                {
                    orgOpencontainersImageTitle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.description"u8))
                {
                    orgOpencontainersImageDescription = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new OciAnnotations(Core.Optional.ToNullable(orgOpencontainersImageCreated), orgOpencontainersImageAuthors.Value, orgOpencontainersImageUrl.Value, orgOpencontainersImageDocumentation.Value, orgOpencontainersImageSource.Value, orgOpencontainersImageVersion.Value, orgOpencontainersImageRevision.Value, orgOpencontainersImageVendor.Value, orgOpencontainersImageLicenses.Value, orgOpencontainersImageRefName.Value, orgOpencontainersImageTitle.Value, orgOpencontainersImageDescription.Value, additionalProperties);
        }
    }
}
