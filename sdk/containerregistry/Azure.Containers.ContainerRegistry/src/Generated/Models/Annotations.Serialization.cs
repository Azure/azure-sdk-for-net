// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Containers.ContainerRegistry
{
    public partial class Annotations : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Created))
            {
                writer.WritePropertyName("org.opencontainers.image.created");
                writer.WriteStringValue(Created.Value, "O");
            }
            if (Optional.IsDefined(Authors))
            {
                writer.WritePropertyName("org.opencontainers.image.authors");
                writer.WriteStringValue(Authors);
            }
            if (Optional.IsDefined(Url))
            {
                writer.WritePropertyName("org.opencontainers.image.url");
                writer.WriteStringValue(Url);
            }
            if (Optional.IsDefined(Documentation))
            {
                writer.WritePropertyName("org.opencontainers.image.documentation");
                writer.WriteStringValue(Documentation);
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("org.opencontainers.image.source");
                writer.WriteStringValue(Source);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("org.opencontainers.image.version");
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(Revision))
            {
                writer.WritePropertyName("org.opencontainers.image.revision");
                writer.WriteStringValue(Revision);
            }
            if (Optional.IsDefined(Vendor))
            {
                writer.WritePropertyName("org.opencontainers.image.vendor");
                writer.WriteStringValue(Vendor);
            }
            if (Optional.IsDefined(Licenses))
            {
                writer.WritePropertyName("org.opencontainers.image.licenses");
                writer.WriteStringValue(Licenses);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("org.opencontainers.image.ref.name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("org.opencontainers.image.title");
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("org.opencontainers.image.description");
                writer.WriteStringValue(Description);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static Annotations DeserializeAnnotations(JsonElement element)
        {
            Optional<DateTimeOffset> orgOpencontainersImageCreated = default;
            Optional<string> orgOpencontainersImageAuthors = default;
            Optional<string> orgOpencontainersImageUrl = default;
            Optional<string> orgOpencontainersImageDocumentation = default;
            Optional<string> orgOpencontainersImageSource = default;
            Optional<string> orgOpencontainersImageVersion = default;
            Optional<string> orgOpencontainersImageRevision = default;
            Optional<string> orgOpencontainersImageVendor = default;
            Optional<string> orgOpencontainersImageLicenses = default;
            Optional<string> orgOpencontainersImageRefName = default;
            Optional<string> orgOpencontainersImageTitle = default;
            Optional<string> orgOpencontainersImageDescription = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("org.opencontainers.image.created"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    orgOpencontainersImageCreated = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.authors"))
                {
                    orgOpencontainersImageAuthors = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.url"))
                {
                    orgOpencontainersImageUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.documentation"))
                {
                    orgOpencontainersImageDocumentation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.source"))
                {
                    orgOpencontainersImageSource = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.version"))
                {
                    orgOpencontainersImageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.revision"))
                {
                    orgOpencontainersImageRevision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.vendor"))
                {
                    orgOpencontainersImageVendor = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.licenses"))
                {
                    orgOpencontainersImageLicenses = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.ref.name"))
                {
                    orgOpencontainersImageRefName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.title"))
                {
                    orgOpencontainersImageTitle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("org.opencontainers.image.description"))
                {
                    orgOpencontainersImageDescription = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new Annotations(Optional.ToNullable(orgOpencontainersImageCreated), orgOpencontainersImageAuthors.Value, orgOpencontainersImageUrl.Value, orgOpencontainersImageDocumentation.Value, orgOpencontainersImageSource.Value, orgOpencontainersImageVersion.Value, orgOpencontainersImageRevision.Value, orgOpencontainersImageVendor.Value, orgOpencontainersImageLicenses.Value, orgOpencontainersImageRefName.Value, orgOpencontainersImageTitle.Value, orgOpencontainersImageDescription.Value, additionalProperties);
        }
    }
}
