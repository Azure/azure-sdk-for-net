// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Containers.ContainerRegistry.Models
{
    /// <summary> Additional information provided through arbitrary metadata. </summary>
    internal partial class Annotations : IReadOnlyDictionary<string, object>
    {
        /// <summary> Initializes a new instance of Annotations. </summary>
        internal Annotations()
        {
            AdditionalProperties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6). </summary>
        public DateTimeOffset? Created { get; }
        /// <summary> Contact details of the people or organization responsible for the image. </summary>
        public string Authors { get; }
        /// <summary> URL to find more information on the image. </summary>
        public string Url { get; }
        /// <summary> URL to get documentation on the image. </summary>
        public string Documentation { get; }
        /// <summary> URL to get source code for building the image. </summary>
        public string Source { get; }
        /// <summary> Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible. </summary>
        public string Version { get; }
        /// <summary> Source control revision identifier for the packaged software. </summary>
        public string Revision { get; }
        /// <summary> Name of the distributing entity, organization or individual. </summary>
        public string Vendor { get; }
        /// <summary> License(s) under which contained software is distributed as an SPDX License Expression. </summary>
        public string Licenses { get; }
        /// <summary> Name of the reference for a target. </summary>
        public string Name { get; }
        /// <summary> Human-readable title of the image. </summary>
        public string Title { get; }
        /// <summary> Human-readable description of the software packaged in the image. </summary>
        public string Description { get; }
        internal IReadOnlyDictionary<string, object> AdditionalProperties { get; }
        /// <inheritdoc />
        public IEnumerator<KeyValuePair<string, object>> GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        public bool TryGetValue(string key, out object value) => AdditionalProperties.TryGetValue(key, out value);
        /// <inheritdoc />
        public bool ContainsKey(string key) => AdditionalProperties.ContainsKey(key);
        /// <inheritdoc />
        public IEnumerable<string> Keys => AdditionalProperties.Keys;
        /// <inheritdoc />
        public IEnumerable<object> Values => AdditionalProperties.Values;
        /// <inheritdoc cref="IReadOnlyCollection{T}.Count"/>
        int IReadOnlyCollection<KeyValuePair<string, object>>.Count => AdditionalProperties.Count;
        /// <inheritdoc />
        public object this[string key]
        {
            get => AdditionalProperties[key];
        }
    }
}
