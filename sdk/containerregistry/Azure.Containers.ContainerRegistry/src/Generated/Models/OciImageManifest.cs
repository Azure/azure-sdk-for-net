// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Containers.ContainerRegistry
{
    /// <summary> Returns the requested OCI Manifest file. </summary>
    public partial class OciImageManifest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OciImageManifest"/>. </summary>
        /// <param name="schemaVersion"> Schema version. </param>
        public OciImageManifest(int schemaVersion)
        {
            Layers = new ChangeTrackingList<OciDescriptor>();
            SchemaVersion = schemaVersion;
        }

        /// <summary> Initializes a new instance of <see cref="OciImageManifest"/>. </summary>
        /// <param name="configuration"> V2 image config descriptor. </param>
        /// <param name="layers"> List of V2 image layer information. </param>
        /// <param name="annotations"> Additional information provided through arbitrary metadata. </param>
        /// <param name="schemaVersion"> Schema version. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OciImageManifest(OciDescriptor configuration, IList<OciDescriptor> layers, OciAnnotations annotations, int schemaVersion, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Configuration = configuration;
            Layers = layers;
            Annotations = annotations;
            SchemaVersion = schemaVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="OciImageManifest"/> for deserialization. </summary>
        internal OciImageManifest()
        {
        }

        /// <summary> V2 image config descriptor. </summary>
        public OciDescriptor Configuration { get; set; }
        /// <summary> List of V2 image layer information. </summary>
        public IList<OciDescriptor> Layers { get; }
        /// <summary> Additional information provided through arbitrary metadata. </summary>
        public OciAnnotations Annotations { get; set; }
        /// <summary> Schema version. </summary>
        public int SchemaVersion { get; set; }
    }
}
