// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Containers.ContainerRegistry
{
    internal partial class JWKHeader : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Crv))
            {
                writer.WritePropertyName("crv");
                writer.WriteStringValue(Crv);
            }
            if (Optional.IsDefined(Kid))
            {
                writer.WritePropertyName("kid");
                writer.WriteStringValue(Kid);
            }
            if (Optional.IsDefined(Kty))
            {
                writer.WritePropertyName("kty");
                writer.WriteStringValue(Kty);
            }
            if (Optional.IsDefined(X))
            {
                writer.WritePropertyName("x");
                writer.WriteStringValue(X);
            }
            if (Optional.IsDefined(Y))
            {
                writer.WritePropertyName("y");
                writer.WriteStringValue(Y);
            }
            writer.WriteEndObject();
        }

        internal static JWKHeader DeserializeJWKHeader(JsonElement element)
        {
            Optional<string> crv = default;
            Optional<string> kid = default;
            Optional<string> kty = default;
            Optional<string> x = default;
            Optional<string> y = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("crv"))
                {
                    crv = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kid"))
                {
                    kid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kty"))
                {
                    kty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("x"))
                {
                    x = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("y"))
                {
                    y = property.Value.GetString();
                    continue;
                }
            }
            return new JWKHeader(crv.Value, kid.Value, kty.Value, x.Value, y.Value);
        }
    }
}
