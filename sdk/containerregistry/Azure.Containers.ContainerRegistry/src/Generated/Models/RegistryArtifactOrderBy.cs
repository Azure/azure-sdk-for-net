// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Containers.ContainerRegistry
{
    /// <summary> Sort options for ordering registry artifacts in a collection. </summary>
    public readonly partial struct RegistryArtifactOrderBy : IEquatable<RegistryArtifactOrderBy>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="RegistryArtifactOrderBy"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RegistryArtifactOrderBy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LastUpdatedOnDescendingValue = "timedesc";
        private const string LastUpdatedOnAscendingValue = "timeasc";

        /// <summary> Order registry artifacts by LastUpdatedOn field, from most recently updated to least recently updated. </summary>
        public static RegistryArtifactOrderBy LastUpdatedOnDescending { get; } = new RegistryArtifactOrderBy(LastUpdatedOnDescendingValue);
        /// <summary> Order  registry artifacts by LastUpdatedOn field, from least recently updated to most recently updated. </summary>
        public static RegistryArtifactOrderBy LastUpdatedOnAscending { get; } = new RegistryArtifactOrderBy(LastUpdatedOnAscendingValue);
        /// <summary> Determines if two <see cref="RegistryArtifactOrderBy"/> values are the same. </summary>
        public static bool operator ==(RegistryArtifactOrderBy left, RegistryArtifactOrderBy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RegistryArtifactOrderBy"/> values are not the same. </summary>
        public static bool operator !=(RegistryArtifactOrderBy left, RegistryArtifactOrderBy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RegistryArtifactOrderBy"/>. </summary>
        public static implicit operator RegistryArtifactOrderBy(string value) => new RegistryArtifactOrderBy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RegistryArtifactOrderBy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RegistryArtifactOrderBy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
