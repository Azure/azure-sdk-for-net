// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Containers.ContainerRegistry;
using Azure.Core;

namespace Azure.Containers.ContainerRegistry.Specialized
{
    internal partial class ArtifactManifest
    {
        internal static ArtifactManifest DeserializeArtifactManifest(JsonElement element)
        {
            if (element.TryGetProperty("mediaType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "ManifestWrapper": return ManifestWrapper.DeserializeManifestWrapper(element);
                    case "application/vnd.docker.distribution.manifest.list.v2+json": return ManifestList.DeserializeManifestList(element);
                    case "application/vnd.docker.distribution.manifest.v1+json": return V1Manifest.DeserializeV1Manifest(element);
                    case "application/vnd.docker.distribution.manifest.v2+json": return V2Manifest.DeserializeV2Manifest(element);
                    case "application/vnd.oci.image.index.v1+json": return OCIIndex.DeserializeOCIIndex(element);
                    case "application/vnd.oci.image.manifest.v1+json": return OciManifest.DeserializeOciManifest(element);
                }
            }
            int schemaVersion = default;
            string mediaType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("schemaVersion"))
                {
                    schemaVersion = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("mediaType"))
                {
                    mediaType = property.Value.GetString();
                    continue;
                }
            }
            return new ArtifactManifest(schemaVersion, mediaType);
        }
    }
}
