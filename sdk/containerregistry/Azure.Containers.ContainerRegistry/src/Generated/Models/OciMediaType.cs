// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Containers.ContainerRegistry
{
    /// <summary> The OciMediaType. </summary>
    public readonly partial struct OciMediaType : IEquatable<OciMediaType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OciMediaType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OciMediaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ContentDescriptorValue = "application/vnd.oci.descriptor.v1+json";
        private const string ImageManifestValue = "application/vnd.oci.image.manifest.v1+json";
        private const string ImageConfigValue = "application/vnd.oci.image.config.v1+json";
        private const string ImageLayerValue = "application/vnd.oci.image.layer.v1.tar";

        /// <summary> application/vnd.oci.descriptor.v1+json. </summary>
        public static OciMediaType ContentDescriptor { get; } = new OciMediaType(ContentDescriptorValue);
        /// <summary> application/vnd.oci.image.manifest.v1+json. </summary>
        public static OciMediaType ImageManifest { get; } = new OciMediaType(ImageManifestValue);
        /// <summary> application/vnd.oci.image.config.v1+json. </summary>
        public static OciMediaType ImageConfig { get; } = new OciMediaType(ImageConfigValue);
        /// <summary> application/vnd.oci.image.layer.v1.tar. </summary>
        public static OciMediaType ImageLayer { get; } = new OciMediaType(ImageLayerValue);
        /// <summary> Determines if two <see cref="OciMediaType"/> values are the same. </summary>
        public static bool operator ==(OciMediaType left, OciMediaType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OciMediaType"/> values are not the same. </summary>
        public static bool operator !=(OciMediaType left, OciMediaType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OciMediaType"/>. </summary>
        public static implicit operator OciMediaType(string value) => new OciMediaType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OciMediaType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OciMediaType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
