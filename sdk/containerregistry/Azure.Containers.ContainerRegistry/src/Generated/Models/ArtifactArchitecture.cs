// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Containers.ContainerRegistry
{
    /// <summary> The ArtifactArchitecture. </summary>
    public readonly partial struct ArtifactArchitecture : IEquatable<ArtifactArchitecture>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ArtifactArchitecture"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ArtifactArchitecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string I386Value = "386";
        private const string Amd64Value = "amd64";
        private const string ArmValue = "arm";
        private const string Arm64Value = "arm64";
        private const string Mips64Value = "mips64";
        private const string Mips64LeValue = "mips64le";
        private const string Ppc641EValue = "ppc641e";
        private const string Riscv64Value = "riscv64";
        private const string S390XValue = "s390x";

        /// <summary> 386. </summary>
        public static ArtifactArchitecture I386 { get; } = new ArtifactArchitecture(I386Value);
        /// <summary> amd64. </summary>
        public static ArtifactArchitecture Amd64 { get; } = new ArtifactArchitecture(Amd64Value);
        /// <summary> arm. </summary>
        public static ArtifactArchitecture Arm { get; } = new ArtifactArchitecture(ArmValue);
        /// <summary> arm64. </summary>
        public static ArtifactArchitecture Arm64 { get; } = new ArtifactArchitecture(Arm64Value);
        /// <summary> mips64. </summary>
        public static ArtifactArchitecture Mips64 { get; } = new ArtifactArchitecture(Mips64Value);
        /// <summary> mips64le. </summary>
        public static ArtifactArchitecture Mips64Le { get; } = new ArtifactArchitecture(Mips64LeValue);
        /// <summary> ppc641e. </summary>
        public static ArtifactArchitecture Ppc641E { get; } = new ArtifactArchitecture(Ppc641EValue);
        /// <summary> riscv64. </summary>
        public static ArtifactArchitecture Riscv64 { get; } = new ArtifactArchitecture(Riscv64Value);
        /// <summary> s390x. </summary>
        public static ArtifactArchitecture S390X { get; } = new ArtifactArchitecture(S390XValue);
        /// <summary> Determines if two <see cref="ArtifactArchitecture"/> values are the same. </summary>
        public static bool operator ==(ArtifactArchitecture left, ArtifactArchitecture right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ArtifactArchitecture"/> values are not the same. </summary>
        public static bool operator !=(ArtifactArchitecture left, ArtifactArchitecture right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ArtifactArchitecture"/>. </summary>
        public static implicit operator ArtifactArchitecture(string value) => new ArtifactArchitecture(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ArtifactArchitecture other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ArtifactArchitecture other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
