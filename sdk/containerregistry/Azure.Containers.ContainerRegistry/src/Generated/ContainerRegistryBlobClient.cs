// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Containers.ContainerRegistry;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Containers.ContainerRegistry.Specialized
{
    // Data plane generated client. The ContainerRegistryBlob service client.
    /// <summary> The ContainerRegistryBlob service client. </summary>
    public partial class ContainerRegistryBlobClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _url;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ContainerRegistryBlobClient. </summary>
        /// <param name="url"> Registry login URL. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        public ContainerRegistryBlobClient(string url) : this(url, new ContainerRegistryClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ContainerRegistryBlobClient. </summary>
        /// <param name="url"> Registry login URL. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        public ContainerRegistryBlobClient(string url, ContainerRegistryClientOptions options)
        {
            Argument.AssertNotNull(url, nameof(url));
            options ??= new ContainerRegistryClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _url = url;
        }

        /// <summary> Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="accept"> Accept header string delimited by comma. For example, application/vnd.docker.distribution.manifest.v2+json. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifestAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.GetManifestAsync("<name>", "<reference>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetManifestAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.GetManifestAsync("<name>", "<reference>", "<accept>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os.version").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os.features")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("variant").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("features")[0].ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("urls")[0].ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("urls")[0].ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").ToString());
        /// Console.WriteLine(result.GetProperty("fsLayers")[0].GetProperty("blobSum").ToString());
        /// Console.WriteLine(result.GetProperty("history")[0].GetProperty("v1Compatibility").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("crv").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("kid").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("kty").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("x").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("y").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("alg").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("signature").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("protected").ToString());
        /// Console.WriteLine(result.GetProperty("schemaVersion").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ManifestWrapper</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. (ManifestList, OCIIndex) List of V2 image layer information
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. (V2, OCI) Image config descriptor
        ///   layers: [Descriptor], # Optional. (V2, OCI) List of V2 image layer information
        ///   annotations: Annotations, # Optional. (OCI, OCIIndex) Additional metadata
        ///   architecture: string, # Optional. (V1) CPU architecture
        ///   name: string, # Optional. (V1) Image name
        ///   tag: string, # Optional. (V1) Image tag
        ///   fsLayers: [
        ///     {
        ///       blobSum: string, # Optional. SHA of an image layer
        ///     }
        ///   ], # Optional. (V1) List of layer information
        ///   history: [
        ///     {
        ///       v1Compatibility: string, # Optional. The raw v1 compatibility information
        ///     }
        ///   ], # Optional. (V1) Image history
        ///   signatures: [
        ///     {
        ///       header: {
        ///         jwk: {
        ///           crv: string, # Optional. crv value
        ///           kid: string, # Optional. kid value
        ///           kty: string, # Optional. kty value
        ///           x: string, # Optional. x value
        ///           y: string, # Optional. y value
        ///         }, # Optional. JSON web key parameter
        ///         alg: string, # Optional. The algorithm used to sign or encrypt the JWT
        ///       }, # Optional. A JSON web signature
        ///       signature: string, # Optional. A signature for the image manifest, signed by a libtrust private key
        ///       protected: string, # Optional. The signed protected header
        ///     }
        ///   ], # Optional. (V1) Image signature
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetManifestAsync(string name, string reference, string accept = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.GetManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManifestRequest(name, reference, accept, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="accept"> Accept header string delimited by comma. For example, application/vnd.docker.distribution.manifest.v2+json. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifest with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.GetManifest("<name>", "<reference>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetManifest with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.GetManifest("<name>", "<reference>", "<accept>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os.version").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os.features")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("variant").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("features")[0].ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("urls")[0].ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("urls")[0].ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").ToString());
        /// Console.WriteLine(result.GetProperty("fsLayers")[0].GetProperty("blobSum").ToString());
        /// Console.WriteLine(result.GetProperty("history")[0].GetProperty("v1Compatibility").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("crv").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("kid").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("kty").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("x").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("y").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("alg").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("signature").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("protected").ToString());
        /// Console.WriteLine(result.GetProperty("schemaVersion").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ManifestWrapper</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. (ManifestList, OCIIndex) List of V2 image layer information
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. (V2, OCI) Image config descriptor
        ///   layers: [Descriptor], # Optional. (V2, OCI) List of V2 image layer information
        ///   annotations: Annotations, # Optional. (OCI, OCIIndex) Additional metadata
        ///   architecture: string, # Optional. (V1) CPU architecture
        ///   name: string, # Optional. (V1) Image name
        ///   tag: string, # Optional. (V1) Image tag
        ///   fsLayers: [
        ///     {
        ///       blobSum: string, # Optional. SHA of an image layer
        ///     }
        ///   ], # Optional. (V1) List of layer information
        ///   history: [
        ///     {
        ///       v1Compatibility: string, # Optional. The raw v1 compatibility information
        ///     }
        ///   ], # Optional. (V1) Image history
        ///   signatures: [
        ///     {
        ///       header: {
        ///         jwk: {
        ///           crv: string, # Optional. crv value
        ///           kid: string, # Optional. kid value
        ///           kty: string, # Optional. kty value
        ///           x: string, # Optional. x value
        ///           y: string, # Optional. y value
        ///         }, # Optional. JSON web key parameter
        ///         alg: string, # Optional. The algorithm used to sign or encrypt the JWT
        ///       }, # Optional. A JSON web signature
        ///       signature: string, # Optional. A signature for the image manifest, signed by a libtrust private key
        ///       protected: string, # Optional. The signed protected header
        ///     }
        ///   ], # Optional. (V1) Image signature
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetManifest(string name, string reference, string accept = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.GetManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManifestRequest(name, reference, accept, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> The manifest&apos;s Content-Type. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="reference"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateManifestAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = await client.CreateManifestAsync("<name>", "<reference>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CreateManifestAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = await client.CreateManifestAsync("<name>", "<reference>", RequestContent.Create(data), "<contentType>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CreateManifestAsync(string name, string reference, RequestContent content, string contentType = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CreateManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateManifestRequest(name, reference, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> The manifest&apos;s Content-Type. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="reference"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateManifest with required parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = client.CreateManifest("<name>", "<reference>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CreateManifest with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = client.CreateManifest("<name>", "<reference>", RequestContent.Create(data), "<contentType>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CreateManifest(string name, string reference, RequestContent content, string contentType = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CreateManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateManifestRequest(name, reference, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteManifestAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.DeleteManifestAsync("<name>", "<reference>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteManifestAsync(string name, string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.DeleteManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteManifestRequest(name, reference, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteManifest with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.DeleteManifest("<name>", "<reference>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteManifest(string name, string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.DeleteManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteManifestRequest(name, reference, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve the blob from the registry identified by digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetBlobAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.GetBlobAsync("<name>", "<digest>");
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetBlobAsync(string name, string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.GetBlob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBlobRequest(name, digest, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve the blob from the registry identified by digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetBlob with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.GetBlob("<name>", "<digest>");
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual Response GetBlob(string name, string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.GetBlob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBlobRequest(name, digest, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Same as GET, except only the headers are returned. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckBlobExistsAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.CheckBlobExistsAsync("<name>", "<digest>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CheckBlobExistsAsync(string name, string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CheckBlobExists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckBlobExistsRequest(name, digest, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Same as GET, except only the headers are returned. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckBlobExists with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.CheckBlobExists("<name>", "<digest>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CheckBlobExists(string name, string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CheckBlobExists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckBlobExistsRequest(name, digest, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes an already uploaded blob. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteBlobAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.DeleteBlobAsync("<name>", "<digest>");
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteBlobAsync(string name, string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.DeleteBlob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteBlobRequest(name, digest, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes an already uploaded blob. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteBlob with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.DeleteBlob("<name>", "<digest>");
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual Response DeleteBlob(string name, string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.DeleteBlob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteBlobRequest(name, digest, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Mount a blob identified by the `mount` parameter from another repository. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="from"> Name of the source repository. </param>
        /// <param name="mount"> Digest of blob to mount from the source repository. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="from"/> or <paramref name="mount"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call MountBlobAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.MountBlobAsync("<name>", "<from>", "<mount>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> MountBlobAsync(string name, string @from, string mount, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNull(@from, nameof(@from));
            Argument.AssertNotNull(mount, nameof(mount));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.MountBlob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateMountBlobRequest(name, @from, mount, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Mount a blob identified by the `mount` parameter from another repository. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="from"> Name of the source repository. </param>
        /// <param name="mount"> Digest of blob to mount from the source repository. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="from"/> or <paramref name="mount"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call MountBlob with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.MountBlob("<name>", "<from>", "<mount>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response MountBlob(string name, string @from, string mount, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNull(@from, nameof(@from));
            Argument.AssertNotNull(mount, nameof(mount));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.MountBlob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateMountBlobRequest(name, @from, mount, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the current status of a resumable upload. </summary>
        /// <param name="nextLink"> Link acquired from upload start or previous chunk. Note, do not include initial / (must do substring(1) ). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetUploadStatusAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.GetUploadStatusAsync("<nextLink>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetUploadStatusAsync(string nextLink, RequestContext context = null)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.GetUploadStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUploadStatusRequest(nextLink, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the current status of a resumable upload. </summary>
        /// <param name="nextLink"> Link acquired from upload start or previous chunk. Note, do not include initial / (must do substring(1) ). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetUploadStatus with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.GetUploadStatus("<nextLink>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response GetUploadStatus(string nextLink, RequestContext context = null)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.GetUploadStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUploadStatusRequest(nextLink, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a stream of data without completing the upload. </summary>
        /// <param name="nextLink"> Link acquired from upload start or previous chunk. Note, do not include initial / (must do substring(1) ). </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UploadChunkAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = await client.UploadChunkAsync("<nextLink>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> UploadChunkAsync(string nextLink, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.UploadChunk");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUploadChunkRequest(nextLink, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a stream of data without completing the upload. </summary>
        /// <param name="nextLink"> Link acquired from upload start or previous chunk. Note, do not include initial / (must do substring(1) ). </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UploadChunk with required parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = client.UploadChunk("<nextLink>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response UploadChunk(string nextLink, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.UploadChunk");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUploadChunkRequest(nextLink, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Complete the upload, providing all the data in the body, if necessary. A request without a body will just complete the upload with previously uploaded content. </summary>
        /// <param name="nextLink"> Link acquired from upload start or previous chunk. Note, do not include initial / (must do substring(1) ). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CompleteUploadAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = await client.CompleteUploadAsync("<nextLink>", "<digest>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CompleteUploadAsync(string nextLink, string digest, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CompleteUpload");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCompleteUploadRequest(nextLink, digest, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Complete the upload, providing all the data in the body, if necessary. A request without a body will just complete the upload with previously uploaded content. </summary>
        /// <param name="nextLink"> Link acquired from upload start or previous chunk. Note, do not include initial / (must do substring(1) ). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CompleteUpload with required parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = client.CompleteUpload("<nextLink>", "<digest>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CompleteUpload(string nextLink, string digest, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CompleteUpload");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCompleteUploadRequest(nextLink, digest, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished uploads will eventually timeout. </summary>
        /// <param name="nextLink"> Link acquired from upload start or previous chunk. Note, do not include initial / (must do substring(1) ). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CancelUploadAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.CancelUploadAsync("<nextLink>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CancelUploadAsync(string nextLink, RequestContext context = null)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CancelUpload");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelUploadRequest(nextLink, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished uploads will eventually timeout. </summary>
        /// <param name="nextLink"> Link acquired from upload start or previous chunk. Note, do not include initial / (must do substring(1) ). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CancelUpload with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.CancelUpload("<nextLink>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CancelUpload(string nextLink, RequestContext context = null)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CancelUpload");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelUploadRequest(nextLink, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiate a resumable blob upload with an empty request body. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call StartUploadAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.StartUploadAsync("<name>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> StartUploadAsync(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.StartUpload");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartUploadRequest(name, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiate a resumable blob upload with an empty request body. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call StartUpload with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.StartUpload("<name>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response StartUpload(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.StartUpload");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartUploadRequest(name, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233 compliant range requests. Support can be detected by issuing a HEAD request. If the header `Accept-Range: bytes` is returned, range requests can be used to fetch partial content. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="range"> Format : bytes=&lt;start&gt;-&lt;end&gt;,  HTTP Range header specifying blob chunk. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="digest"/> or <paramref name="range"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetChunkAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.GetChunkAsync("<name>", "<digest>", "<range>");
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetChunkAsync(string name, string digest, string range, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));
            Argument.AssertNotNull(range, nameof(range));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.GetChunk");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetChunkRequest(name, digest, range, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233 compliant range requests. Support can be detected by issuing a HEAD request. If the header `Accept-Range: bytes` is returned, range requests can be used to fetch partial content. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="range"> Format : bytes=&lt;start&gt;-&lt;end&gt;,  HTTP Range header specifying blob chunk. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="digest"/> or <paramref name="range"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetChunk with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.GetChunk("<name>", "<digest>", "<range>");
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual Response GetChunk(string name, string digest, string range, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));
            Argument.AssertNotNull(range, nameof(range));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.GetChunk");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetChunkRequest(name, digest, range, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Same as GET, except only the headers are returned. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="range"> Format : bytes=&lt;start&gt;-&lt;end&gt;,  HTTP Range header specifying blob chunk. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="digest"/> or <paramref name="range"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckChunkExistsAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = await client.CheckChunkExistsAsync("<name>", "<digest>", "<range>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CheckChunkExistsAsync(string name, string digest, string range, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));
            Argument.AssertNotNull(range, nameof(range));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CheckChunkExists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckChunkExistsRequest(name, digest, range, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Same as GET, except only the headers are returned. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="range"> Format : bytes=&lt;start&gt;-&lt;end&gt;,  HTTP Range header specifying blob chunk. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="digest"/> or <paramref name="range"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckChunkExists with required parameters.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryBlobClient("<url>");
        /// 
        /// Response response = client.CheckChunkExists("<name>", "<digest>", "<range>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CheckChunkExists(string name, string digest, string range, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));
            Argument.AssertNotNull(range, nameof(range));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryBlobClient.CheckChunkExists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckChunkExistsRequest(name, digest, range, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetManifestRequest(string name, string reference, string accept, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            if (accept != null)
            {
                request.Headers.Add("accept", accept);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateManifestRequest(string name, string reference, RequestContent content, string contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (contentType != null)
            {
                request.Headers.Add("Content-Type", contentType);
            }
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteManifestRequest(string name, string reference, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBlobRequest(string name, string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200307);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/blobs/", false);
            uri.AppendPath(digest, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/octet-stream");
            return message;
        }

        internal HttpMessage CreateCheckBlobExistsRequest(string name, string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200307);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/blobs/", false);
            uri.AppendPath(digest, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteBlobRequest(string name, string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/blobs/", false);
            uri.AppendPath(digest, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/octet-stream");
            return message;
        }

        internal HttpMessage CreateMountBlobRequest(string name, string @from, string mount, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/blobs/uploads/", false);
            uri.AppendQuery("from", @from, true);
            uri.AppendQuery("mount", mount, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetUploadStatusRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUploadChunkRequest(string nextLink, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCompleteUploadRequest(string nextLink, string digest, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/", false);
            uri.AppendRawNextLink(nextLink, false);
            uri.AppendQuery("digest", digest, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCancelUploadRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStartUploadRequest(string name, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/blobs/uploads/", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetChunkRequest(string name, string digest, string range, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier206);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/blobs/", false);
            uri.AppendPath(digest, true);
            request.Uri = uri;
            request.Headers.Add("Range", range);
            request.Headers.Add("Accept", "application/octet-stream");
            return message;
        }

        internal HttpMessage CreateCheckChunkExistsRequest(string name, string digest, string range, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/blobs/", false);
            uri.AppendPath(digest, true);
            request.Uri = uri;
            request.Headers.Add("Range", range);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier202404;
        private static ResponseClassifier ResponseClassifier202404 => _responseClassifier202404 ??= new StatusCodeClassifier(stackalloc ushort[] { 202, 404 });
        private static ResponseClassifier _responseClassifier200307;
        private static ResponseClassifier ResponseClassifier200307 => _responseClassifier200307 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 307 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier206;
        private static ResponseClassifier ResponseClassifier206 => _responseClassifier206 ??= new StatusCodeClassifier(stackalloc ushort[] { 206 });
    }
}
