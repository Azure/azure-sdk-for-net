// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Containers.ContainerRegistry
{
    // Data plane generated sub-client. The RegistryArtifact sub-client.
    /// <summary> The RegistryArtifact sub-client. </summary>
    public partial class RegistryArtifact
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _repository;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of RegistryArtifact. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Registry login URL. </param>
        /// <param name="repository"> Name of the image (including the namespace). </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal RegistryArtifact(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string repository, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _endpoint = endpoint;
            _repository = repository;
            _apiVersion = apiVersion;
        }

        /// <summary> Get tag attributes by tag. </summary>
        /// <param name="reference"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTagPropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// Response response = await client.GetTagPropertiesAsync("<reference>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactTagProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   tag: {
        ///     name: string, # Required. Tag name
        ///     digest: string, # Required. Tag digest
        ///     createdTime: string (ISO 8601 Format), # Required. Tag created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Tag last update time
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Required. Writeable properties of the resource
        ///   }, # Required. List of tag attribute details
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTagPropertiesAsync(string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.GetTagProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTagPropertiesRequest(reference, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get tag attributes by tag. </summary>
        /// <param name="reference"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTagProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// Response response = client.GetTagProperties("<reference>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactTagProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   tag: {
        ///     name: string, # Required. Tag name
        ///     digest: string, # Required. Tag digest
        ///     createdTime: string (ISO 8601 Format), # Required. Tag created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Tag last update time
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Required. Writeable properties of the resource
        ///   }, # Required. List of tag attribute details
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTagProperties(string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.GetTagProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTagPropertiesRequest(reference, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update tag attributes. </summary>
        /// <param name="reference"> Tag name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateTagPropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateTagPropertiesAsync("<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateTagPropertiesAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = await client.UpdateTagPropertiesAsync("<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TagWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactTagProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   tag: {
        ///     name: string, # Required. Tag name
        ///     digest: string, # Required. Tag digest
        ///     createdTime: string (ISO 8601 Format), # Required. Tag created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Tag last update time
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Required. Writeable properties of the resource
        ///   }, # Required. List of tag attribute details
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateTagPropertiesAsync(string reference, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.UpdateTagProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateTagPropertiesRequest(reference, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update tag attributes. </summary>
        /// <param name="reference"> Tag name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateTagProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateTagProperties("<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateTagProperties with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = client.UpdateTagProperties("<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TagWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactTagProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   tag: {
        ///     name: string, # Required. Tag name
        ///     digest: string, # Required. Tag digest
        ///     createdTime: string (ISO 8601 Format), # Required. Tag created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Tag last update time
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Required. Writeable properties of the resource
        ///   }, # Required. List of tag attribute details
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateTagProperties(string reference, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.UpdateTagProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateTagPropertiesRequest(reference, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete tag. </summary>
        /// <param name="reference"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTagAsync with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// Response response = await client.DeleteTagAsync("<reference>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteTagAsync(string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.DeleteTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTagRequest(reference, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete tag. </summary>
        /// <param name="reference"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTag with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// Response response = client.DeleteTag("<reference>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteTag(string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.DeleteTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTagRequest(reference, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get manifest attributes. </summary>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifestPropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// Response response = await client.GetManifestPropertiesAsync("<digest>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("imageSize").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactManifestProperties</c>:
        /// <code>{
        ///   registry: string, # Optional. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Optional. Repository name
        ///   manifest: {
        ///     digest: string, # Required. Manifest
        ///     imageSize: number, # Optional. Image size
        ///     createdTime: string (ISO 8601 Format), # Required. Created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///     architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///     os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     references: [
        ///       {
        ///         digest: string, # Required. Manifest digest
        ///         architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///         os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///       }
        ///     ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///     tags: [string], # Optional. List of tags
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Optional. Writeable properties of the resource
        ///   }, # Required. Manifest attributes
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetManifestPropertiesAsync(string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.GetManifestProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManifestPropertiesRequest(digest, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get manifest attributes. </summary>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifestProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// Response response = client.GetManifestProperties("<digest>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("imageSize").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactManifestProperties</c>:
        /// <code>{
        ///   registry: string, # Optional. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Optional. Repository name
        ///   manifest: {
        ///     digest: string, # Required. Manifest
        ///     imageSize: number, # Optional. Image size
        ///     createdTime: string (ISO 8601 Format), # Required. Created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///     architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///     os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     references: [
        ///       {
        ///         digest: string, # Required. Manifest digest
        ///         architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///         os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///       }
        ///     ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///     tags: [string], # Optional. List of tags
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Optional. Writeable properties of the resource
        ///   }, # Required. Manifest attributes
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetManifestProperties(string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.GetManifestProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManifestPropertiesRequest(digest, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update properties of a manifest. </summary>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateManifestPropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateManifestPropertiesAsync("<digest>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateManifestPropertiesAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = await client.UpdateManifestPropertiesAsync("<digest>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("imageSize").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ManifestWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactManifestProperties</c>:
        /// <code>{
        ///   registry: string, # Optional. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Optional. Repository name
        ///   manifest: {
        ///     digest: string, # Required. Manifest
        ///     imageSize: number, # Optional. Image size
        ///     createdTime: string (ISO 8601 Format), # Required. Created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///     architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///     os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     references: [
        ///       {
        ///         digest: string, # Required. Manifest digest
        ///         architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///         os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///       }
        ///     ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///     tags: [string], # Optional. List of tags
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Optional. Writeable properties of the resource
        ///   }, # Required. Manifest attributes
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateManifestPropertiesAsync(string digest, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.UpdateManifestProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateManifestPropertiesRequest(digest, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update properties of a manifest. </summary>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateManifestProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateManifestProperties("<digest>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateManifestProperties with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = client.UpdateManifestProperties("<digest>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("imageSize").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ManifestWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactManifestProperties</c>:
        /// <code>{
        ///   registry: string, # Optional. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Optional. Repository name
        ///   manifest: {
        ///     digest: string, # Required. Manifest
        ///     imageSize: number, # Optional. Image size
        ///     createdTime: string (ISO 8601 Format), # Required. Created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///     architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///     os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     references: [
        ///       {
        ///         digest: string, # Required. Manifest digest
        ///         architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///         os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///       }
        ///     ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///     tags: [string], # Optional. List of tags
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Optional. Writeable properties of the resource
        ///   }, # Required. Manifest attributes
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateManifestProperties(string digest, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("RegistryArtifact.UpdateManifestProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateManifestPropertiesRequest(digest, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List tags of a repository. </summary>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="digest"> filter by digest. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllTagPropertiesAsync and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// await foreach (var data in client.GetAllTagPropertiesAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetAllTagPropertiesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// await foreach (var data in client.GetAllTagPropertiesAsync("<last>", 1234, "<orderby>", "<digest>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// }
        /// ]]></code>
        /// </example>
        public virtual AsyncPageable<BinaryData> GetAllTagPropertiesAsync(string last = null, int? n = null, string orderby = null, string digest = null, RequestContext context = null)
        {
            return GetAllTagPropertiesImplementationAsync("RegistryArtifact.GetAllTagProperties", last, n, orderby, digest, context);
        }

        private AsyncPageable<BinaryData> GetAllTagPropertiesImplementationAsync(string diagnosticsScopeName, string last, int? n, string orderby, string digest, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllTagPropertiesRequest(last, n, orderby, digest, context)
                        : CreateGetAllTagPropertiesNextPageRequest(nextLink, last, n, orderby, digest, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "tags", "link", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List tags of a repository. </summary>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="digest"> filter by digest. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllTagProperties and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// foreach (var data in client.GetAllTagProperties())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetAllTagProperties with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ContainerRegistryClient(endpoint).GetRegistryArtifactClient("<repository>");
        /// 
        /// foreach (var data in client.GetAllTagProperties("<last>", 1234, "<orderby>", "<digest>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// }
        /// ]]></code>
        /// </example>
        public virtual Pageable<BinaryData> GetAllTagProperties(string last = null, int? n = null, string orderby = null, string digest = null, RequestContext context = null)
        {
            return GetAllTagPropertiesImplementation("RegistryArtifact.GetAllTagProperties", last, n, orderby, digest, context);
        }

        private Pageable<BinaryData> GetAllTagPropertiesImplementation(string diagnosticsScopeName, string last, int? n, string orderby, string digest, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllTagPropertiesRequest(last, n, orderby, digest, context)
                        : CreateGetAllTagPropertiesNextPageRequest(nextLink, last, n, orderby, digest, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "tags", "link");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetAllTagPropertiesRequest(string last, int? n, string orderby, string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(_repository, true);
            uri.AppendPath("/_tags", false);
            if (last != null)
            {
                uri.AppendQuery("last", last, true);
            }
            if (n != null)
            {
                uri.AppendQuery("n", n.Value, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("orderby", orderby, true);
            }
            if (digest != null)
            {
                uri.AppendQuery("digest", digest, true);
            }
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTagPropertiesRequest(string reference, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(_repository, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateTagPropertiesRequest(string reference, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(_repository, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTagRequest(string reference, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(_repository, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetManifestPropertiesRequest(string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(_repository, true);
            uri.AppendPath("/_manifests/", false);
            uri.AppendPath(digest, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateManifestPropertiesRequest(string digest, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(_repository, true);
            uri.AppendPath("/_manifests/", false);
            uri.AppendPath(digest, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAllTagPropertiesNextPageRequest(string nextLink, string last, int? n, string orderby, string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202404;
        private static ResponseClassifier ResponseClassifier202404 => _responseClassifier202404 ??= new StatusCodeClassifier(stackalloc ushort[] { 202, 404 });
    }
}
