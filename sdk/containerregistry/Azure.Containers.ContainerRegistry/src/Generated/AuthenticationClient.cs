// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace Azure.Containers.ContainerRegistry
{
    /// <summary> The Authentication service client. </summary>
    internal partial class AuthenticationClient
    {
        protected HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://management.core.windows.net/.default" };
        private string url;

        /// <summary> Initializes a new instance of AuthenticationClient for mocking. </summary>
        protected AuthenticationClient()
        {
        }

        /// <summary> Initializes a new instance of AuthenticationClient. </summary>
        /// <param name="url"> Registry login URL. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        internal AuthenticationClient(string url, TokenCredential credential, ContainerRegistryClientOptions options = null)
        {
            if (url == null)
            {
                throw new ArgumentNullException(nameof(url));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new ContainerRegistryClientOptions();
            Pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, AuthorizationScopes));
            this.url = url;
        }

        /// <summary> Exchange AAD tokens for an ACR refresh Token. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ExchangeAadAccessTokenForAcrRefreshTokenAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateExchangeAadAccessTokenForAcrRefreshTokenRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Exchange AAD tokens for an ACR refresh Token. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ExchangeAadAccessTokenForAcrRefreshToken(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateExchangeAadAccessTokenForAcrRefreshTokenRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="ExchangeAadAccessTokenForAcrRefreshToken"/> and <see cref="ExchangeAadAccessTokenForAcrRefreshTokenAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateExchangeAadAccessTokenForAcrRefreshTokenRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/oauth2/exchange", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Exchange ACR Refresh token for an ACR Access Token. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ExchangeAcrRefreshTokenForAcrAccessTokenAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateExchangeAcrRefreshTokenForAcrAccessTokenRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Exchange ACR Refresh token for an ACR Access Token. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ExchangeAcrRefreshTokenForAcrAccessToken(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateExchangeAcrRefreshTokenForAcrAccessTokenRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="ExchangeAcrRefreshTokenForAcrAccessToken"/> and <see cref="ExchangeAcrRefreshTokenForAcrAccessTokenAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateExchangeAcrRefreshTokenForAcrAccessTokenRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(url, false);
            uri.AppendPath("/oauth2/token", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
            request.Content = requestBody;
            return request;
        }
    }
}
