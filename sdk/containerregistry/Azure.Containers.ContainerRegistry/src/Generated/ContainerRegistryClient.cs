// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Containers.ContainerRegistry
{
    // Data plane generated client. The ContainerRegistry service client.
    /// <summary> The ContainerRegistry service client. </summary>
    public partial class ContainerRegistryClient
    {
        private readonly string _url;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ContainerRegistryClient. </summary>
        /// <param name="url"> Registry login URL. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        public ContainerRegistryClient(string url) : this(url, new ContainerRegistryClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ContainerRegistryClient. </summary>
        /// <param name="url"> Registry login URL. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        public ContainerRegistryClient(string url, ContainerRegistryClientOptions options)
        {
            Argument.AssertNotNull(url, nameof(url));
            options ??= new ContainerRegistryClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _url = url;
            _apiVersion = options.Version;
        }

        /// <summary> Tells whether this Docker Registry instance supports Docker Registry HTTP API v2. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckDockerV2SupportAsync.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryClient("<url>");
        /// 
        /// Response response = await client.CheckDockerV2SupportAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        internal virtual async Task<Response> CheckDockerV2SupportAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.CheckDockerV2Support");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckDockerV2SupportRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tells whether this Docker Registry instance supports Docker Registry HTTP API v2. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckDockerV2Support.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryClient("<url>");
        /// 
        /// Response response = client.CheckDockerV2Support();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        internal virtual Response CheckDockerV2Support(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.CheckDockerV2Support");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckDockerV2SupportRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List repositories. </summary>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRepositoryNamesAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryClient("<url>");
        /// 
        /// await foreach (var data in client.GetRepositoryNamesAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetRepositoryNamesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryClient("<url>");
        /// 
        /// await foreach (var data in client.GetRepositoryNamesAsync("<last>", 1234))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// </example>
        public virtual AsyncPageable<BinaryData> GetRepositoryNamesAsync(string last = null, int? n = null, RequestContext context = null)
        {
            return GetRepositoryNamesImplementationAsync("ContainerRegistryClient.GetRepositoryNames", last, n, context);
        }

        private AsyncPageable<BinaryData> GetRepositoryNamesImplementationAsync(string diagnosticsScopeName, string last, int? n, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetRepositoryNamesRequest(last, n, context)
                        : CreateGetRepositoryNamesNextPageRequest(nextLink, last, n, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "repositories", "link", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List repositories. </summary>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRepositoryNames and parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryClient("<url>");
        /// 
        /// foreach (var data in client.GetRepositoryNames())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetRepositoryNames with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ContainerRegistryClient("<url>");
        /// 
        /// foreach (var data in client.GetRepositoryNames("<last>", 1234))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// </example>
        public virtual Pageable<BinaryData> GetRepositoryNames(string last = null, int? n = null, RequestContext context = null)
        {
            return GetRepositoryNamesImplementation("ContainerRegistryClient.GetRepositoryNames", last, n, context);
        }

        private Pageable<BinaryData> GetRepositoryNamesImplementation(string diagnosticsScopeName, string last, int? n, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetRepositoryNamesRequest(last, n, context)
                        : CreateGetRepositoryNamesNextPageRequest(nextLink, last, n, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "repositories", "link");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        private ContainerRepository _cachedContainerRepository;
        private RegistryArtifact _cachedRegistryArtifact;

        /// <summary> Initializes a new instance of ContainerRepository. </summary>
        public virtual ContainerRepository GetContainerRepositoryClient()
        {
            return Volatile.Read(ref _cachedContainerRepository) ?? Interlocked.CompareExchange(ref _cachedContainerRepository, new ContainerRepository(ClientDiagnostics, _pipeline, _url, _apiVersion), null) ?? _cachedContainerRepository;
        }

        /// <summary> Initializes a new instance of RegistryArtifact. </summary>
        public virtual RegistryArtifact GetRegistryArtifactClient()
        {
            return Volatile.Read(ref _cachedRegistryArtifact) ?? Interlocked.CompareExchange(ref _cachedRegistryArtifact, new RegistryArtifact(ClientDiagnostics, _pipeline, _url, _apiVersion), null) ?? _cachedRegistryArtifact;
        }

        internal HttpMessage CreateCheckDockerV2SupportRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRepositoryNamesRequest(string last, int? n, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/_catalog", false);
            if (last != null)
            {
                uri.AppendQuery("last", last, true);
            }
            if (n != null)
            {
                uri.AppendQuery("n", n.Value, true);
            }
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRepositoryNamesNextPageRequest(string nextLink, string last, int? n, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
