// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeUpdates.Models;

namespace Azure.ResourceManager.EdgeUpdates
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.EdgeUpdates. </summary>
    public static partial class EdgeUpdatesExtensions
    {
        private static ArmResourceExtensionClient GetArmResourceExtensionClient(ArmResource resource)
        {
            return resource.GetCachedClient(client =>
            {
                return new ArmResourceExtensionClient(client, resource.Id);
            });
        }

        private static ArmResourceExtensionClient GetArmResourceExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new ArmResourceExtensionClient(client, scope);
            });
        }

        /// <summary>
        /// List Update resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static AsyncPageable<Update> GetUpdatesAsync(this ArmClient client, ResourceIdentifier scope, CancellationToken cancellationToken = default)
        {
            return GetArmResourceExtensionClient(client, scope).GetUpdatesAsync(cancellationToken);
        }

        /// <summary>
        /// List Update resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Pageable<Update> GetUpdates(this ArmClient client, ResourceIdentifier scope, CancellationToken cancellationToken = default)
        {
            return GetArmResourceExtensionClient(client, scope).GetUpdates(cancellationToken);
        }

        /// <summary>
        /// Get a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> is null. </exception>
        public static async Task<Response<Update>> GetUpdateAsync(this ArmClient client, ResourceIdentifier scope, string updateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(updateName, nameof(updateName));

            return await GetArmResourceExtensionClient(client, scope).GetUpdateAsync(updateName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> is null. </exception>
        public static Response<Update> GetUpdate(this ArmClient client, ResourceIdentifier scope, string updateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(updateName, nameof(updateName));

            return GetArmResourceExtensionClient(client, scope).GetUpdate(updateName, cancellationToken);
        }

        /// <summary>
        /// Create a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_CreateOrModify</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="resource"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> or <paramref name="resource"/> is null. </exception>
        public static async Task<ArmOperation<Update>> CreateOrModifyUpdateAsync(this ArmClient client, ResourceIdentifier scope, WaitUntil waitUntil, string updateName, Update resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(updateName, nameof(updateName));
            Argument.AssertNotNull(resource, nameof(resource));

            return await GetArmResourceExtensionClient(client, scope).CreateOrModifyUpdateAsync(waitUntil, updateName, resource, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_CreateOrModify</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="resource"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> or <paramref name="resource"/> is null. </exception>
        public static ArmOperation<Update> CreateOrModifyUpdate(this ArmClient client, ResourceIdentifier scope, WaitUntil waitUntil, string updateName, Update resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(updateName, nameof(updateName));
            Argument.AssertNotNull(resource, nameof(resource));

            return GetArmResourceExtensionClient(client, scope).CreateOrModifyUpdate(waitUntil, updateName, resource, cancellationToken);
        }

        /// <summary>
        /// Update a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Modify</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="properties"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> or <paramref name="properties"/> is null. </exception>
        public static async Task<Response<Update>> ModifyUpdateAsync(this ArmClient client, ResourceIdentifier scope, string updateName, UpdateUpdate properties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(updateName, nameof(updateName));
            Argument.AssertNotNull(properties, nameof(properties));

            return await GetArmResourceExtensionClient(client, scope).ModifyUpdateAsync(updateName, properties, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Modify</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="properties"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> or <paramref name="properties"/> is null. </exception>
        public static Response<Update> ModifyUpdate(this ArmClient client, ResourceIdentifier scope, string updateName, UpdateUpdate properties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(updateName, nameof(updateName));
            Argument.AssertNotNull(properties, nameof(properties));

            return GetArmResourceExtensionClient(client, scope).ModifyUpdate(updateName, properties, cancellationToken);
        }

        /// <summary>
        /// Delete a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> is null. </exception>
        public static async Task<ArmOperation> DeleteUpdateAsync(this ArmClient client, ResourceIdentifier scope, WaitUntil waitUntil, string updateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(updateName, nameof(updateName));

            return await GetArmResourceExtensionClient(client, scope).DeleteUpdateAsync(waitUntil, updateName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> is null. </exception>
        public static ArmOperation DeleteUpdate(this ArmClient client, ResourceIdentifier scope, WaitUntil waitUntil, string updateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(updateName, nameof(updateName));

            return GetArmResourceExtensionClient(client, scope).DeleteUpdate(waitUntil, updateName, cancellationToken);
        }
    }
}
