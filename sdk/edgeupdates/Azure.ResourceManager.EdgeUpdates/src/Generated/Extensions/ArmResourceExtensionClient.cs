// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeUpdates.Models;

namespace Azure.ResourceManager.EdgeUpdates
{
    /// <summary> A class to add extension methods to ArmResource. </summary>
    internal partial class ArmResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _updatesClientDiagnostics;
        private UpdatesRestOperations _updatesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ArmResourceExtensionClient"/> class for mocking. </summary>
        protected ArmResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ArmResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ArmResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics UpdatesClientDiagnostics => _updatesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeUpdates", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private UpdatesRestOperations UpdatesRestClient => _updatesRestClient ??= new UpdatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List Update resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Update" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Update> GetUpdatesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => UpdatesRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => UpdatesRestClient.CreateListNextPageRequest(nextLink, Id);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Update.DeserializeUpdate, UpdatesClientDiagnostics, Pipeline, "ArmResourceExtensionClient.GetUpdates", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Update resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Update" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Update> GetUpdates(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => UpdatesRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => UpdatesRestClient.CreateListNextPageRequest(nextLink, Id);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Update.DeserializeUpdate, UpdatesClientDiagnostics, Pipeline, "ArmResourceExtensionClient.GetUpdates", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Update>> GetUpdateAsync(string updateName, CancellationToken cancellationToken = default)
        {
            using var scope = UpdatesClientDiagnostics.CreateScope("ArmResourceExtensionClient.GetUpdate");
            scope.Start();
            try
            {
                var response = await UpdatesRestClient.GetAsync(Id, updateName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Update> GetUpdate(string updateName, CancellationToken cancellationToken = default)
        {
            using var scope = UpdatesClientDiagnostics.CreateScope("ArmResourceExtensionClient.GetUpdate");
            scope.Start();
            try
            {
                var response = UpdatesRestClient.Get(Id, updateName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_CreateOrModify</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="resource"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Update>> CreateOrModifyUpdateAsync(WaitUntil waitUntil, string updateName, Update resource, CancellationToken cancellationToken = default)
        {
            using var scope = UpdatesClientDiagnostics.CreateScope("ArmResourceExtensionClient.CreateOrModifyUpdate");
            scope.Start();
            try
            {
                var response = await UpdatesRestClient.CreateOrModifyAsync(Id, updateName, resource, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeUpdatesArmOperation<Update>(new UpdateOperationSource(), UpdatesClientDiagnostics, Pipeline, UpdatesRestClient.CreateCreateOrModifyRequest(Id, updateName, resource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_CreateOrModify</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="resource"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Update> CreateOrModifyUpdate(WaitUntil waitUntil, string updateName, Update resource, CancellationToken cancellationToken = default)
        {
            using var scope = UpdatesClientDiagnostics.CreateScope("ArmResourceExtensionClient.CreateOrModifyUpdate");
            scope.Start();
            try
            {
                var response = UpdatesRestClient.CreateOrModify(Id, updateName, resource, cancellationToken);
                var operation = new EdgeUpdatesArmOperation<Update>(new UpdateOperationSource(), UpdatesClientDiagnostics, Pipeline, UpdatesRestClient.CreateCreateOrModifyRequest(Id, updateName, resource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Modify</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="properties"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Update>> ModifyUpdateAsync(string updateName, UpdateUpdate properties, CancellationToken cancellationToken = default)
        {
            using var scope = UpdatesClientDiagnostics.CreateScope("ArmResourceExtensionClient.ModifyUpdate");
            scope.Start();
            try
            {
                var response = await UpdatesRestClient.ModifyAsync(Id, updateName, properties, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Modify</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="properties"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Update> ModifyUpdate(string updateName, UpdateUpdate properties, CancellationToken cancellationToken = default)
        {
            using var scope = UpdatesClientDiagnostics.CreateScope("ArmResourceExtensionClient.ModifyUpdate");
            scope.Start();
            try
            {
                var response = UpdatesRestClient.Modify(Id, updateName, properties, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteUpdateAsync(WaitUntil waitUntil, string updateName, CancellationToken cancellationToken = default)
        {
            using var scope = UpdatesClientDiagnostics.CreateScope("ArmResourceExtensionClient.DeleteUpdate");
            scope.Start();
            try
            {
                var response = await UpdatesRestClient.DeleteAsync(Id, updateName, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeUpdatesArmOperation(UpdatesClientDiagnostics, Pipeline, UpdatesRestClient.CreateDeleteRequest(Id, updateName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteUpdate(WaitUntil waitUntil, string updateName, CancellationToken cancellationToken = default)
        {
            using var scope = UpdatesClientDiagnostics.CreateScope("ArmResourceExtensionClient.DeleteUpdate");
            scope.Start();
            try
            {
                var response = UpdatesRestClient.Delete(Id, updateName, cancellationToken);
                var operation = new EdgeUpdatesArmOperation(UpdatesClientDiagnostics, Pipeline, UpdatesRestClient.CreateDeleteRequest(Id, updateName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
