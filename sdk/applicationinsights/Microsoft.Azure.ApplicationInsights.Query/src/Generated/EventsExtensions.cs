// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.ApplicationInsights.Query
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Events.
    /// </summary>
    public static partial class EventsExtensions
    {
            /// <summary>
            /// Execute OData query
            /// </summary>
            /// <remarks>
            /// Executes an OData query for events
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// ID of the application. This is Application ID from the API Access settings
            /// blade in the Azure portal.
            /// </param>
            /// <param name='eventType'>
            /// The type of events to query; either a standard event type (`traces`,
            /// `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
            /// `availabilityResults`) or `$all` to query across all event types. Possible
            /// values include: '$all', 'traces', 'customEvents', 'pageViews',
            /// 'browserTimings', 'requests', 'dependencies', 'exceptions',
            /// 'availabilityResults', 'performanceCounters', 'customMetrics'
            /// </param>
            /// <param name='timespan'>
            /// Optional. The timespan over which to retrieve events. This is an ISO8601
            /// time period value.  This timespan is applied in addition to any that are
            /// specified in the Odata expression.
            /// </param>
            /// <param name='filter'>
            /// An expression used to filter the returned events
            /// </param>
            /// <param name='search'>
            /// A free-text search expression to match for whether a particular event
            /// should be returned
            /// </param>
            /// <param name='orderby'>
            /// A comma-separated list of properties with \"asc\" (the default) or \"desc\"
            /// to control the order of returned events
            /// </param>
            /// <param name='select'>
            /// Limits the properties to just those requested on each returned event
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning events
            /// </param>
            /// <param name='top'>
            /// The number of events to return
            /// </param>
            /// <param name='format'>
            /// Format for the returned events
            /// </param>
            /// <param name='count'>
            /// Request a count of matching items included with the returned events
            /// </param>
            /// <param name='apply'>
            /// An expression used for aggregation over returned events
            /// </param>
            public static EventsResults GetByType(this IEvents operations, string appId, string eventType, string timespan = default(string), string filter = default(string), string search = default(string), string orderby = default(string), string select = default(string), int? skip = default(int?), int? top = default(int?), string format = default(string), bool? count = default(bool?), string apply = default(string))
            {
                return operations.GetByTypeAsync(appId, eventType, timespan, filter, search, orderby, select, skip, top, format, count, apply).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute OData query
            /// </summary>
            /// <remarks>
            /// Executes an OData query for events
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// ID of the application. This is Application ID from the API Access settings
            /// blade in the Azure portal.
            /// </param>
            /// <param name='eventType'>
            /// The type of events to query; either a standard event type (`traces`,
            /// `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
            /// `availabilityResults`) or `$all` to query across all event types. Possible
            /// values include: '$all', 'traces', 'customEvents', 'pageViews',
            /// 'browserTimings', 'requests', 'dependencies', 'exceptions',
            /// 'availabilityResults', 'performanceCounters', 'customMetrics'
            /// </param>
            /// <param name='timespan'>
            /// Optional. The timespan over which to retrieve events. This is an ISO8601
            /// time period value.  This timespan is applied in addition to any that are
            /// specified in the Odata expression.
            /// </param>
            /// <param name='filter'>
            /// An expression used to filter the returned events
            /// </param>
            /// <param name='search'>
            /// A free-text search expression to match for whether a particular event
            /// should be returned
            /// </param>
            /// <param name='orderby'>
            /// A comma-separated list of properties with \"asc\" (the default) or \"desc\"
            /// to control the order of returned events
            /// </param>
            /// <param name='select'>
            /// Limits the properties to just those requested on each returned event
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning events
            /// </param>
            /// <param name='top'>
            /// The number of events to return
            /// </param>
            /// <param name='format'>
            /// Format for the returned events
            /// </param>
            /// <param name='count'>
            /// Request a count of matching items included with the returned events
            /// </param>
            /// <param name='apply'>
            /// An expression used for aggregation over returned events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventsResults> GetByTypeAsync(this IEvents operations, string appId, string eventType, string timespan = default(string), string filter = default(string), string search = default(string), string orderby = default(string), string select = default(string), int? skip = default(int?), int? top = default(int?), string format = default(string), bool? count = default(bool?), string apply = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByTypeWithHttpMessagesAsync(appId, eventType, timespan, filter, search, orderby, select, skip, top, format, count, apply, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an event
            /// </summary>
            /// <remarks>
            /// Gets the data for a single event
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// ID of the application. This is Application ID from the API Access settings
            /// blade in the Azure portal.
            /// </param>
            /// <param name='eventType'>
            /// The type of events to query; either a standard event type (`traces`,
            /// `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
            /// `availabilityResults`) or `$all` to query across all event types. Possible
            /// values include: '$all', 'traces', 'customEvents', 'pageViews',
            /// 'browserTimings', 'requests', 'dependencies', 'exceptions',
            /// 'availabilityResults', 'performanceCounters', 'customMetrics'
            /// </param>
            /// <param name='eventId'>
            /// ID of event.
            /// </param>
            /// <param name='timespan'>
            /// Optional. The timespan over which to retrieve events. This is an ISO8601
            /// time period value.  This timespan is applied in addition to any that are
            /// specified in the Odata expression.
            /// </param>
            public static EventsResults Get(this IEvents operations, string appId, string eventType, string eventId, string timespan = default(string))
            {
                return operations.GetAsync(appId, eventType, eventId, timespan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an event
            /// </summary>
            /// <remarks>
            /// Gets the data for a single event
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// ID of the application. This is Application ID from the API Access settings
            /// blade in the Azure portal.
            /// </param>
            /// <param name='eventType'>
            /// The type of events to query; either a standard event type (`traces`,
            /// `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
            /// `availabilityResults`) or `$all` to query across all event types. Possible
            /// values include: '$all', 'traces', 'customEvents', 'pageViews',
            /// 'browserTimings', 'requests', 'dependencies', 'exceptions',
            /// 'availabilityResults', 'performanceCounters', 'customMetrics'
            /// </param>
            /// <param name='eventId'>
            /// ID of event.
            /// </param>
            /// <param name='timespan'>
            /// Optional. The timespan over which to retrieve events. This is an ISO8601
            /// time period value.  This timespan is applied in addition to any that are
            /// specified in the Odata expression.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventsResults> GetAsync(this IEvents operations, string appId, string eventType, string eventId, string timespan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(appId, eventType, eventId, timespan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get OData metadata
            /// </summary>
            /// <remarks>
            /// Gets OData EDMX metadata describing the event data model
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// ID of the application. This is Application ID from the API Access settings
            /// blade in the Azure portal.
            /// </param>
            public static object GetOdataMetadata(this IEvents operations, string appId)
            {
                return operations.GetOdataMetadataAsync(appId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get OData metadata
            /// </summary>
            /// <remarks>
            /// Gets OData EDMX metadata describing the event data model
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// ID of the application. This is Application ID from the API Access settings
            /// blade in the Azure portal.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOdataMetadataAsync(this IEvents operations, string appId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOdataMetadataWithHttpMessagesAsync(appId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
