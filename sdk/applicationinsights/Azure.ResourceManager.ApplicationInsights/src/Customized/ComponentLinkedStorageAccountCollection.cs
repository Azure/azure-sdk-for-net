// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApplicationInsights.Models;

namespace Azure.ResourceManager.ApplicationInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="ComponentLinkedStorageAccountResource" /> and their operations.
    /// Each <see cref="ComponentLinkedStorageAccountResource" /> in the collection will belong to the same instance of <see cref="ApplicationInsightsComponentResource" />.
    /// To get a <see cref="ComponentLinkedStorageAccountCollection" /> instance call the GetComponentLinkedStorageAccounts method from an instance of <see cref="ApplicationInsightsComponentResource" />.
    /// </summary>
    public partial class ComponentLinkedStorageAccountCollection : ArmCollection
    {
        /// <summary>
        /// Return the ComponentLinkedStorageAccountCollection with the given resource name instead of current instance for backward compatibility
        /// </summary>
        /// <param name="resourceName"></param>
        /// <returns></returns>
        private ComponentLinkedStorageAccountCollection GetCollectionWithGivenResourceName(string resourceName)
        {
            var id = ApplicationInsightsComponentResource.CreateResourceIdentifier(this.Id.SubscriptionId, this.Id.ResourceGroupName, resourceName);
            var component = this.Client.GetApplicationInsightsComponentResource(id);
            return component.GetComponentLinkedStorageAccounts();
        }

        /// <summary>
        /// Replace current linked storage account for an Application Insights component.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComponentLinkedStorageAccounts_CreateAndUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="resourceName"> The name of the Application Insights component resource. </param>
        /// <param name="storageType"> The type of the Application Insights component data source for the linked storage account. </param>
        /// <param name="data"> Properties that need to be specified to update linked storage accounts for an Application Insights component. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        [Obsolete("This method is obsolete and will be removed in a future release", false)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public virtual async Task<ArmOperation<ComponentLinkedStorageAccountResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string resourceName, StorageType storageType, ComponentLinkedStorageAccountData data, CancellationToken cancellationToken = default)
        {
            var collection = this.GetCollectionWithGivenResourceName(resourceName);
            return await collection.CreateOrUpdateAsync(waitUntil, storageType, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Replace current linked storage account for an Application Insights component.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComponentLinkedStorageAccounts_CreateAndUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="resourceName"> The name of the Application Insights component resource. </param>
        /// <param name="storageType"> The type of the Application Insights component data source for the linked storage account. </param>
        /// <param name="data"> Properties that need to be specified to update linked storage accounts for an Application Insights component. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        [Obsolete("This method is obsolete and will be removed in a future release", false)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public virtual ArmOperation<ComponentLinkedStorageAccountResource> CreateOrUpdate(WaitUntil waitUntil, string resourceName, StorageType storageType, ComponentLinkedStorageAccountData data, CancellationToken cancellationToken = default)
        {
            return this.CreateOrUpdateAsync(waitUntil, resourceName, storageType, data, cancellationToken).Result;
        }

        /// <summary>
        /// Returns the current linked storage settings for an Application Insights component.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComponentLinkedStorageAccounts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the Application Insights component resource. </param>
        /// <param name="storageType"> The type of the Application Insights component data source for the linked storage account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [Obsolete("This method is obsolete and will be removed in a future release", false)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public virtual async Task<Response<ComponentLinkedStorageAccountResource>> GetAsync(string resourceName, StorageType storageType, CancellationToken cancellationToken = default)
        {
            var collection = this.GetCollectionWithGivenResourceName(resourceName);
            return await collection.GetAsync(storageType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns the current linked storage settings for an Application Insights component.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComponentLinkedStorageAccounts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the Application Insights component resource. </param>
        /// <param name="storageType"> The type of the Application Insights component data source for the linked storage account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [Obsolete("This method is obsolete and will be removed in a future release", false)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public virtual Response<ComponentLinkedStorageAccountResource> Get(string resourceName, StorageType storageType, CancellationToken cancellationToken = default)
        {
            return this.GetAsync(resourceName, storageType, cancellationToken).Result;
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComponentLinkedStorageAccounts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the Application Insights component resource. </param>
        /// <param name="storageType"> The type of the Application Insights component data source for the linked storage account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [Obsolete("This method is obsolete and will be removed in a future release", false)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public virtual async Task<Response<bool>> ExistsAsync(string resourceName, StorageType storageType, CancellationToken cancellationToken = default)
        {
            var collection = this.GetCollectionWithGivenResourceName(resourceName);
            return await collection.ExistsAsync(storageType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComponentLinkedStorageAccounts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the Application Insights component resource. </param>
        /// <param name="storageType"> The type of the Application Insights component data source for the linked storage account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [Obsolete("This method is obsolete and will be removed in a future release", false)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public virtual Response<bool> Exists(string resourceName, StorageType storageType, CancellationToken cancellationToken = default)
        {
            return this.ExistsAsync(resourceName, storageType, cancellationToken).Result;
        }
    }
}
