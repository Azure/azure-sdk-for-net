// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.ApplicationInsights.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApplicationInsights
{
    /// <summary>
    /// A class representing the WebTest data model.
    /// An Application Insights WebTest definition.
    /// Serialized Name: WebTest
    /// </summary>
    public partial class WebTestData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of WebTestData. </summary>
        /// <param name="location"> The location. </param>
        public WebTestData(AzureLocation location) : base(location)
        {
            Locations = new ChangeTrackingList<WebTestGeolocation>();
        }

        /// <summary> Initializes a new instance of WebTestData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind">
        /// The kind of WebTest that this web test watches. Choices are ping, multistep and standard.
        /// Serialized Name: WebTest.kind
        /// </param>
        /// <param name="syntheticMonitorId">
        /// Unique ID of this WebTest. This is typically the same value as the Name field.
        /// Serialized Name: WebTest.properties.SyntheticMonitorId
        /// </param>
        /// <param name="webTestName">
        /// User defined name if this WebTest.
        /// Serialized Name: WebTest.properties.Name
        /// </param>
        /// <param name="description">
        /// User defined description for this WebTest.
        /// Serialized Name: WebTest.properties.Description
        /// </param>
        /// <param name="isEnabled">
        /// Is the test actively being monitored.
        /// Serialized Name: WebTest.properties.Enabled
        /// </param>
        /// <param name="frequencyInSeconds">
        /// Interval in seconds between test runs for this WebTest. Default value is 300.
        /// Serialized Name: WebTest.properties.Frequency
        /// </param>
        /// <param name="timeoutInSeconds">
        /// Seconds until this WebTest will timeout and fail. Default value is 30.
        /// Serialized Name: WebTest.properties.Timeout
        /// </param>
        /// <param name="webTestKind">
        /// The kind of web test this is, valid choices are ping, multistep and standard.
        /// Serialized Name: WebTest.properties.Kind
        /// </param>
        /// <param name="isRetryEnabled">
        /// Allow for retries should this WebTest fail.
        /// Serialized Name: WebTest.properties.RetryEnabled
        /// </param>
        /// <param name="locations">
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// Serialized Name: WebTest.properties.Locations
        /// </param>
        /// <param name="configuration">
        /// An XML configuration specification for a WebTest.
        /// Serialized Name: WebTest.properties.Configuration
        /// </param>
        /// <param name="provisioningState">
        /// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
        /// Serialized Name: WebTest.properties.provisioningState
        /// </param>
        /// <param name="request">
        /// The collection of request properties
        /// Serialized Name: WebTest.properties.Request
        /// </param>
        /// <param name="validationRules">
        /// The collection of validation rule properties
        /// Serialized Name: WebTest.properties.ValidationRules
        /// </param>
        internal WebTestData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, WebTestKind? kind, string syntheticMonitorId, string webTestName, string description, bool? isEnabled, int? frequencyInSeconds, int? timeoutInSeconds, WebTestKind? webTestKind, bool? isRetryEnabled, IList<WebTestGeolocation> locations, WebTestPropertiesConfiguration configuration, string provisioningState, WebTestPropertiesRequest request, WebTestPropertiesValidationRules validationRules) : base(id, name, resourceType, systemData, tags, location)
        {
            Kind = kind;
            SyntheticMonitorId = syntheticMonitorId;
            WebTestName = webTestName;
            Description = description;
            IsEnabled = isEnabled;
            FrequencyInSeconds = frequencyInSeconds;
            TimeoutInSeconds = timeoutInSeconds;
            WebTestKind = webTestKind;
            IsRetryEnabled = isRetryEnabled;
            Locations = locations;
            Configuration = configuration;
            ProvisioningState = provisioningState;
            Request = request;
            ValidationRules = validationRules;
        }

        /// <summary>
        /// The kind of WebTest that this web test watches. Choices are ping, multistep and standard.
        /// Serialized Name: WebTest.kind
        /// </summary>
        public WebTestKind? Kind { get; set; }
        /// <summary>
        /// Unique ID of this WebTest. This is typically the same value as the Name field.
        /// Serialized Name: WebTest.properties.SyntheticMonitorId
        /// </summary>
        public string SyntheticMonitorId { get; set; }
        /// <summary>
        /// User defined name if this WebTest.
        /// Serialized Name: WebTest.properties.Name
        /// </summary>
        public string WebTestName { get; set; }
        /// <summary>
        /// User defined description for this WebTest.
        /// Serialized Name: WebTest.properties.Description
        /// </summary>
        public string Description { get; set; }
        /// <summary>
        /// Is the test actively being monitored.
        /// Serialized Name: WebTest.properties.Enabled
        /// </summary>
        public bool? IsEnabled { get; set; }
        /// <summary>
        /// Interval in seconds between test runs for this WebTest. Default value is 300.
        /// Serialized Name: WebTest.properties.Frequency
        /// </summary>
        public int? FrequencyInSeconds { get; set; }
        /// <summary>
        /// Seconds until this WebTest will timeout and fail. Default value is 30.
        /// Serialized Name: WebTest.properties.Timeout
        /// </summary>
        public int? TimeoutInSeconds { get; set; }
        /// <summary>
        /// The kind of web test this is, valid choices are ping, multistep and standard.
        /// Serialized Name: WebTest.properties.Kind
        /// </summary>
        public WebTestKind? WebTestKind { get; set; }
        /// <summary>
        /// Allow for retries should this WebTest fail.
        /// Serialized Name: WebTest.properties.RetryEnabled
        /// </summary>
        public bool? IsRetryEnabled { get; set; }
        /// <summary>
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// Serialized Name: WebTest.properties.Locations
        /// </summary>
        public IList<WebTestGeolocation> Locations { get; }
        /// <summary>
        /// An XML configuration specification for a WebTest.
        /// Serialized Name: WebTest.properties.Configuration
        /// </summary>
        internal WebTestPropertiesConfiguration Configuration { get; set; }
        /// <summary>
        /// The XML specification of a WebTest to run against an application.
        /// Serialized Name: WebTestPropertiesConfiguration.WebTest
        /// </summary>
        public string WebTest
        {
            get => Configuration is null ? default : Configuration.WebTest;
            set
            {
                if (Configuration is null)
                    Configuration = new WebTestPropertiesConfiguration();
                Configuration.WebTest = value;
            }
        }

        /// <summary>
        /// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
        /// Serialized Name: WebTest.properties.provisioningState
        /// </summary>
        public string ProvisioningState { get; }
        /// <summary>
        /// The collection of request properties
        /// Serialized Name: WebTest.properties.Request
        /// </summary>
        public WebTestPropertiesRequest Request { get; set; }
        /// <summary>
        /// The collection of validation rule properties
        /// Serialized Name: WebTest.properties.ValidationRules
        /// </summary>
        public WebTestPropertiesValidationRules ValidationRules { get; set; }
    }
}
