// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    public partial class ApplicationInsightsComponentFavorite : IUtf8JsonSerializable, IJsonModel<ApplicationInsightsComponentFavorite>, IPersistableModel<ApplicationInsightsComponentFavorite>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ApplicationInsightsComponentFavorite>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ApplicationInsightsComponentFavorite>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationInsightsComponentFavorite>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApplicationInsightsComponentFavorite)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("Name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Config))
            {
                writer.WritePropertyName("Config"u8);
                writer.WriteStringValue(Config);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("Version"u8);
                writer.WriteStringValue(Version);
            }
            if (options.Format != "W" && Optional.IsDefined(FavoriteId))
            {
                writer.WritePropertyName("FavoriteId"u8);
                writer.WriteStringValue(FavoriteId);
            }
            if (Optional.IsDefined(FavoriteType))
            {
                writer.WritePropertyName("FavoriteType"u8);
                writer.WriteStringValue(FavoriteType.Value.ToSerialString());
            }
            if (Optional.IsDefined(SourceType))
            {
                writer.WritePropertyName("SourceType"u8);
                writer.WriteStringValue(SourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeModified))
            {
                writer.WritePropertyName("TimeModified"u8);
                writer.WriteStringValue(TimeModified);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("Tags"u8);
                writer.WriteStartArray();
                foreach (var item in Tags)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Category))
            {
                writer.WritePropertyName("Category"u8);
                writer.WriteStringValue(Category);
            }
            if (Optional.IsDefined(IsGeneratedFromTemplate))
            {
                writer.WritePropertyName("IsGeneratedFromTemplate"u8);
                writer.WriteBooleanValue(IsGeneratedFromTemplate.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(UserId))
            {
                writer.WritePropertyName("UserId"u8);
                writer.WriteStringValue(UserId);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ApplicationInsightsComponentFavorite IJsonModel<ApplicationInsightsComponentFavorite>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationInsightsComponentFavorite>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApplicationInsightsComponentFavorite)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeApplicationInsightsComponentFavorite(document.RootElement, options);
        }

        internal static ApplicationInsightsComponentFavorite DeserializeApplicationInsightsComponentFavorite(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<string> config = default;
            Optional<string> version = default;
            Optional<string> favoriteId = default;
            Optional<FavoriteType> favoriteType = default;
            Optional<string> sourceType = default;
            Optional<string> timeModified = default;
            Optional<IList<string>> tags = default;
            Optional<string> category = default;
            Optional<bool> isGeneratedFromTemplate = default;
            Optional<string> userId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Config"u8))
                {
                    config = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("FavoriteId"u8))
                {
                    favoriteId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("FavoriteType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    favoriteType = property.Value.GetString().ToFavoriteType();
                    continue;
                }
                if (property.NameEquals("SourceType"u8))
                {
                    sourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("TimeModified"u8))
                {
                    timeModified = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    tags = array;
                    continue;
                }
                if (property.NameEquals("Category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("IsGeneratedFromTemplate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isGeneratedFromTemplate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("UserId"u8))
                {
                    userId = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ApplicationInsightsComponentFavorite(name.Value, config.Value, version.Value, favoriteId.Value, Optional.ToNullable(favoriteType), sourceType.Value, timeModified.Value, Optional.ToList(tags), category.Value, Optional.ToNullable(isGeneratedFromTemplate), userId.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Name))
            {
                builder.Append("  Name:");
                builder.AppendLine($" '{Name}'");
            }

            if (Optional.IsDefined(Config))
            {
                builder.Append("  Config:");
                builder.AppendLine($" '{Config}'");
            }

            if (Optional.IsDefined(Version))
            {
                builder.Append("  Version:");
                builder.AppendLine($" '{Version}'");
            }

            if (Optional.IsDefined(FavoriteId))
            {
                builder.Append("  FavoriteId:");
                builder.AppendLine($" '{FavoriteId}'");
            }

            if (Optional.IsDefined(FavoriteType))
            {
                builder.Append("  FavoriteType:");
                builder.AppendLine($" '{FavoriteType.ToString()}'");
            }

            if (Optional.IsDefined(SourceType))
            {
                builder.Append("  SourceType:");
                builder.AppendLine($" '{SourceType}'");
            }

            if (Optional.IsDefined(TimeModified))
            {
                builder.Append("  TimeModified:");
                builder.AppendLine($" '{TimeModified}'");
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                builder.Append("  Tags:");
                builder.AppendLine(" [");
                foreach (var item in Tags)
                {
                    if (item == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($"    '{item}'");
                }
                builder.AppendLine("  ]");
            }

            if (Optional.IsDefined(Category))
            {
                builder.Append("  Category:");
                builder.AppendLine($" '{Category}'");
            }

            if (Optional.IsDefined(IsGeneratedFromTemplate))
            {
                builder.Append("  IsGeneratedFromTemplate:");
                var boolValue = IsGeneratedFromTemplate.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(UserId))
            {
                builder.Append("  UserId:");
                builder.AppendLine($" '{UserId}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }

        BinaryData IPersistableModel<ApplicationInsightsComponentFavorite>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationInsightsComponentFavorite>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ApplicationInsightsComponentFavorite)} does not support '{options.Format}' format.");
            }
        }

        ApplicationInsightsComponentFavorite IPersistableModel<ApplicationInsightsComponentFavorite>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationInsightsComponentFavorite>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeApplicationInsightsComponentFavorite(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(ApplicationInsightsComponentFavorite)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ApplicationInsightsComponentFavorite>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
