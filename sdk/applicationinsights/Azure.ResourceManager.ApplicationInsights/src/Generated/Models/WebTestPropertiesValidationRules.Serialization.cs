// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    public partial class WebTestPropertiesValidationRules : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ContentValidation))
            {
                writer.WritePropertyName("ContentValidation"u8);
                writer.WriteObjectValue(ContentValidation);
            }
            if (Core.Optional.IsDefined(CheckSsl))
            {
                writer.WritePropertyName("SSLCheck"u8);
                writer.WriteBooleanValue(CheckSsl.Value);
            }
            if (Core.Optional.IsDefined(SSLCertRemainingLifetimeCheck))
            {
                writer.WritePropertyName("SSLCertRemainingLifetimeCheck"u8);
                writer.WriteNumberValue(SSLCertRemainingLifetimeCheck.Value);
            }
            if (Core.Optional.IsDefined(ExpectedHttpStatusCode))
            {
                writer.WritePropertyName("ExpectedHttpStatusCode"u8);
                writer.WriteNumberValue(ExpectedHttpStatusCode.Value);
            }
            if (Core.Optional.IsDefined(IgnoreHttpStatusCode))
            {
                writer.WritePropertyName("IgnoreHttpStatusCode"u8);
                writer.WriteBooleanValue(IgnoreHttpStatusCode.Value);
            }
            writer.WriteEndObject();
        }

        internal static WebTestPropertiesValidationRules DeserializeWebTestPropertiesValidationRules(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<WebTestPropertiesValidationRulesContentValidation> contentValidation = default;
            Core.Optional<bool> sslCheck = default;
            Core.Optional<int> sslCertRemainingLifetimeCheck = default;
            Core.Optional<int> expectedHttpStatusCode = default;
            Core.Optional<bool> ignoreHttpStatusCode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ContentValidation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    contentValidation = WebTestPropertiesValidationRulesContentValidation.DeserializeWebTestPropertiesValidationRulesContentValidation(property.Value);
                    continue;
                }
                if (property.NameEquals("SSLCheck"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCheck = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("SSLCertRemainingLifetimeCheck"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCertRemainingLifetimeCheck = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ExpectedHttpStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expectedHttpStatusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("IgnoreHttpStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ignoreHttpStatusCode = property.Value.GetBoolean();
                    continue;
                }
            }
            return new WebTestPropertiesValidationRules(contentValidation.Value, Core.Optional.ToNullable(sslCheck), Core.Optional.ToNullable(sslCertRemainingLifetimeCheck), Core.Optional.ToNullable(expectedHttpStatusCode), Core.Optional.ToNullable(ignoreHttpStatusCode));
        }
    }
}
