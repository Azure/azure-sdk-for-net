// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    public partial class WebTestPropertiesValidationRules : IUtf8JsonSerializable, IJsonModel<WebTestPropertiesValidationRules>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<WebTestPropertiesValidationRules>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<WebTestPropertiesValidationRules>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ContentValidation))
            {
                writer.WritePropertyName("ContentValidation"u8);
                writer.WriteObjectValue(ContentValidation);
            }
            if (Optional.IsDefined(CheckSsl))
            {
                writer.WritePropertyName("SSLCheck"u8);
                writer.WriteBooleanValue(CheckSsl.Value);
            }
            if (Optional.IsDefined(SSLCertRemainingLifetimeCheck))
            {
                writer.WritePropertyName("SSLCertRemainingLifetimeCheck"u8);
                writer.WriteNumberValue(SSLCertRemainingLifetimeCheck.Value);
            }
            if (Optional.IsDefined(ExpectedHttpStatusCode))
            {
                writer.WritePropertyName("ExpectedHttpStatusCode"u8);
                writer.WriteNumberValue(ExpectedHttpStatusCode.Value);
            }
            if (Optional.IsDefined(IgnoreHttpStatusCode))
            {
                writer.WritePropertyName("IgnoreHttpStatusCode"u8);
                writer.WriteBooleanValue(IgnoreHttpStatusCode.Value);
            }
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        WebTestPropertiesValidationRules IJsonModel<WebTestPropertiesValidationRules>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(WebTestPropertiesValidationRules)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWebTestPropertiesValidationRules(document.RootElement, options);
        }

        internal static WebTestPropertiesValidationRules DeserializeWebTestPropertiesValidationRules(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<WebTestPropertiesValidationRulesContentValidation> contentValidation = default;
            Optional<bool> sslCheck = default;
            Optional<int> sslCertRemainingLifetimeCheck = default;
            Optional<int> expectedHttpStatusCode = default;
            Optional<bool> ignoreHttpStatusCode = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ContentValidation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    contentValidation = WebTestPropertiesValidationRulesContentValidation.DeserializeWebTestPropertiesValidationRulesContentValidation(property.Value);
                    continue;
                }
                if (property.NameEquals("SSLCheck"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCheck = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("SSLCertRemainingLifetimeCheck"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCertRemainingLifetimeCheck = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ExpectedHttpStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expectedHttpStatusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("IgnoreHttpStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ignoreHttpStatusCode = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format == ModelReaderWriterFormat.Json)
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new WebTestPropertiesValidationRules(contentValidation.Value, Optional.ToNullable(sslCheck), Optional.ToNullable(sslCertRemainingLifetimeCheck), Optional.ToNullable(expectedHttpStatusCode), Optional.ToNullable(ignoreHttpStatusCode), serializedAdditionalRawData);
        }

        BinaryData IModel<WebTestPropertiesValidationRules>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(WebTestPropertiesValidationRules)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        WebTestPropertiesValidationRules IModel<WebTestPropertiesValidationRules>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(WebTestPropertiesValidationRules)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeWebTestPropertiesValidationRules(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<WebTestPropertiesValidationRules>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
