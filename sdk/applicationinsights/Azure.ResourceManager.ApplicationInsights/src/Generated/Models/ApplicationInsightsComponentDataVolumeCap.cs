// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    /// <summary>
    /// An Application Insights component daily data volume cap
    /// Serialized Name: ApplicationInsightsComponentDataVolumeCap
    /// </summary>
    public partial class ApplicationInsightsComponentDataVolumeCap
    {
        /// <summary> Initializes a new instance of ApplicationInsightsComponentDataVolumeCap. </summary>
        public ApplicationInsightsComponentDataVolumeCap()
        {
        }

        /// <summary> Initializes a new instance of ApplicationInsightsComponentDataVolumeCap. </summary>
        /// <param name="cap">
        /// Daily data volume cap in GB.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.Cap
        /// </param>
        /// <param name="resetTime">
        /// Daily data volume cap UTC reset hour.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.ResetTime
        /// </param>
        /// <param name="warningThreshold">
        /// Reserved, not used for now.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.WarningThreshold
        /// </param>
        /// <param name="isStopSendNotificationWhenHitThreshold">
        /// Reserved, not used for now.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.StopSendNotificationWhenHitThreshold
        /// </param>
        /// <param name="isStopSendNotificationWhenHitCap">
        /// Do not send a notification email when the daily data volume cap is met.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.StopSendNotificationWhenHitCap
        /// </param>
        /// <param name="maxHistoryCap">
        /// Maximum daily data volume cap that the user can set for this component.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.MaxHistoryCap
        /// </param>
        internal ApplicationInsightsComponentDataVolumeCap(float? cap, int? resetTime, int? warningThreshold, bool? isStopSendNotificationWhenHitThreshold, bool? isStopSendNotificationWhenHitCap, float? maxHistoryCap)
        {
            Cap = cap;
            ResetTime = resetTime;
            WarningThreshold = warningThreshold;
            IsStopSendNotificationWhenHitThreshold = isStopSendNotificationWhenHitThreshold;
            IsStopSendNotificationWhenHitCap = isStopSendNotificationWhenHitCap;
            MaxHistoryCap = maxHistoryCap;
        }

        /// <summary>
        /// Daily data volume cap in GB.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.Cap
        /// </summary>
        public float? Cap { get; set; }
        /// <summary>
        /// Daily data volume cap UTC reset hour.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.ResetTime
        /// </summary>
        public int? ResetTime { get; }
        /// <summary>
        /// Reserved, not used for now.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.WarningThreshold
        /// </summary>
        public int? WarningThreshold { get; set; }
        /// <summary>
        /// Reserved, not used for now.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.StopSendNotificationWhenHitThreshold
        /// </summary>
        public bool? IsStopSendNotificationWhenHitThreshold { get; set; }
        /// <summary>
        /// Do not send a notification email when the daily data volume cap is met.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.StopSendNotificationWhenHitCap
        /// </summary>
        public bool? IsStopSendNotificationWhenHitCap { get; set; }
        /// <summary>
        /// Maximum daily data volume cap that the user can set for this component.
        /// Serialized Name: ApplicationInsightsComponentDataVolumeCap.MaxHistoryCap
        /// </summary>
        public float? MaxHistoryCap { get; }
    }
}
