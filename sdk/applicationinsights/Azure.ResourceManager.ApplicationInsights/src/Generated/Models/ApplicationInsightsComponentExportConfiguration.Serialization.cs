// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    public partial class ApplicationInsightsComponentExportConfiguration : IUtf8JsonSerializable, IJsonModel<ApplicationInsightsComponentExportConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ApplicationInsightsComponentExportConfiguration>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ApplicationInsightsComponentExportConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ApplicationInsightsComponentExportConfiguration>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ApplicationInsightsComponentExportConfiguration>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ExportId))
                {
                    writer.WritePropertyName("ExportId"u8);
                    writer.WriteStringValue(ExportId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(InstrumentationKey))
                {
                    writer.WritePropertyName("InstrumentationKey"u8);
                    writer.WriteStringValue(InstrumentationKey);
                }
            }
            if (Optional.IsDefined(RecordTypes))
            {
                writer.WritePropertyName("RecordTypes"u8);
                writer.WriteStringValue(RecordTypes);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ApplicationName))
                {
                    writer.WritePropertyName("ApplicationName"u8);
                    writer.WriteStringValue(ApplicationName);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(SubscriptionId))
                {
                    writer.WritePropertyName("SubscriptionId"u8);
                    writer.WriteStringValue(SubscriptionId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ResourceGroup))
                {
                    writer.WritePropertyName("ResourceGroup"u8);
                    writer.WriteStringValue(ResourceGroup);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DestinationStorageSubscriptionId))
                {
                    writer.WritePropertyName("DestinationStorageSubscriptionId"u8);
                    writer.WriteStringValue(DestinationStorageSubscriptionId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DestinationStorageLocationId))
                {
                    writer.WritePropertyName("DestinationStorageLocationId"u8);
                    writer.WriteStringValue(DestinationStorageLocationId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DestinationAccountId))
                {
                    writer.WritePropertyName("DestinationAccountId"u8);
                    writer.WriteStringValue(DestinationAccountId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DestinationType))
                {
                    writer.WritePropertyName("DestinationType"u8);
                    writer.WriteStringValue(DestinationType);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(IsUserEnabled))
                {
                    writer.WritePropertyName("IsUserEnabled"u8);
                    writer.WriteStringValue(IsUserEnabled);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LastUserUpdate))
                {
                    writer.WritePropertyName("LastUserUpdate"u8);
                    writer.WriteStringValue(LastUserUpdate);
                }
            }
            if (Optional.IsDefined(NotificationQueueEnabled))
            {
                writer.WritePropertyName("NotificationQueueEnabled"u8);
                writer.WriteStringValue(NotificationQueueEnabled);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ExportStatus))
                {
                    writer.WritePropertyName("ExportStatus"u8);
                    writer.WriteStringValue(ExportStatus);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LastSuccessTime))
                {
                    writer.WritePropertyName("LastSuccessTime"u8);
                    writer.WriteStringValue(LastSuccessTime);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LastGapTime))
                {
                    writer.WritePropertyName("LastGapTime"u8);
                    writer.WriteStringValue(LastGapTime);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(PermanentErrorReason))
                {
                    writer.WritePropertyName("PermanentErrorReason"u8);
                    writer.WriteStringValue(PermanentErrorReason);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(StorageName))
                {
                    writer.WritePropertyName("StorageName"u8);
                    writer.WriteStringValue(StorageName);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ContainerName))
                {
                    writer.WritePropertyName("ContainerName"u8);
                    writer.WriteStringValue(ContainerName);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ApplicationInsightsComponentExportConfiguration IJsonModel<ApplicationInsightsComponentExportConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ApplicationInsightsComponentExportConfiguration)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeApplicationInsightsComponentExportConfiguration(document.RootElement, options);
        }

        internal static ApplicationInsightsComponentExportConfiguration DeserializeApplicationInsightsComponentExportConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> exportId = default;
            Optional<string> instrumentationKey = default;
            Optional<string> recordTypes = default;
            Optional<string> applicationName = default;
            Optional<string> subscriptionId = default;
            Optional<string> resourceGroup = default;
            Optional<string> destinationStorageSubscriptionId = default;
            Optional<string> destinationStorageLocationId = default;
            Optional<string> destinationAccountId = default;
            Optional<string> destinationType = default;
            Optional<string> isUserEnabled = default;
            Optional<string> lastUserUpdate = default;
            Optional<string> notificationQueueEnabled = default;
            Optional<string> exportStatus = default;
            Optional<string> lastSuccessTime = default;
            Optional<string> lastGapTime = default;
            Optional<string> permanentErrorReason = default;
            Optional<string> storageName = default;
            Optional<string> containerName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ExportId"u8))
                {
                    exportId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("InstrumentationKey"u8))
                {
                    instrumentationKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("RecordTypes"u8))
                {
                    recordTypes = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ApplicationName"u8))
                {
                    applicationName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("SubscriptionId"u8))
                {
                    subscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ResourceGroup"u8))
                {
                    resourceGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DestinationStorageSubscriptionId"u8))
                {
                    destinationStorageSubscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DestinationStorageLocationId"u8))
                {
                    destinationStorageLocationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DestinationAccountId"u8))
                {
                    destinationAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DestinationType"u8))
                {
                    destinationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("IsUserEnabled"u8))
                {
                    isUserEnabled = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("LastUserUpdate"u8))
                {
                    lastUserUpdate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("NotificationQueueEnabled"u8))
                {
                    notificationQueueEnabled = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ExportStatus"u8))
                {
                    exportStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("LastSuccessTime"u8))
                {
                    lastSuccessTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("LastGapTime"u8))
                {
                    lastGapTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("PermanentErrorReason"u8))
                {
                    permanentErrorReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("StorageName"u8))
                {
                    storageName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ContainerName"u8))
                {
                    containerName = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ApplicationInsightsComponentExportConfiguration(exportId.Value, instrumentationKey.Value, recordTypes.Value, applicationName.Value, subscriptionId.Value, resourceGroup.Value, destinationStorageSubscriptionId.Value, destinationStorageLocationId.Value, destinationAccountId.Value, destinationType.Value, isUserEnabled.Value, lastUserUpdate.Value, notificationQueueEnabled.Value, exportStatus.Value, lastSuccessTime.Value, lastGapTime.Value, permanentErrorReason.Value, storageName.Value, containerName.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ApplicationInsightsComponentExportConfiguration>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ApplicationInsightsComponentExportConfiguration)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ApplicationInsightsComponentExportConfiguration IPersistableModel<ApplicationInsightsComponentExportConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ApplicationInsightsComponentExportConfiguration)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeApplicationInsightsComponentExportConfiguration(document.RootElement, options);
        }

        string IPersistableModel<ApplicationInsightsComponentExportConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
