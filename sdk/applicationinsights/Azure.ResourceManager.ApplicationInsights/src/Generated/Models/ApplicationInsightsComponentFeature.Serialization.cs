// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    public partial class ApplicationInsightsComponentFeature
    {
        internal static ApplicationInsightsComponentFeature DeserializeApplicationInsightsComponentFeature(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> featureName = default;
            Optional<string> meterId = default;
            Optional<string> meterRateFrequency = default;
            Optional<string> resouceId = default;
            Optional<bool> isHidden = default;
            Optional<IReadOnlyList<ApplicationInsightsComponentFeatureCapability>> capabilities = default;
            Optional<string> title = default;
            Optional<bool> isMainFeature = default;
            Optional<string> supportedAddonFeatures = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("FeatureName"u8))
                {
                    featureName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("MeterId"u8))
                {
                    meterId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("MeterRateFrequency"u8))
                {
                    meterRateFrequency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ResouceId"u8))
                {
                    resouceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("IsHidden"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isHidden = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("Capabilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ApplicationInsightsComponentFeatureCapability> array = new List<ApplicationInsightsComponentFeatureCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ApplicationInsightsComponentFeatureCapability.DeserializeApplicationInsightsComponentFeatureCapability(item));
                    }
                    capabilities = array;
                    continue;
                }
                if (property.NameEquals("Title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("IsMainFeature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isMainFeature = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("SupportedAddonFeatures"u8))
                {
                    supportedAddonFeatures = property.Value.GetString();
                    continue;
                }
            }
            return new ApplicationInsightsComponentFeature(featureName.Value, meterId.Value, meterRateFrequency.Value, resouceId.Value, Optional.ToNullable(isHidden), Optional.ToList(capabilities), title.Value, Optional.ToNullable(isMainFeature), supportedAddonFeatures.Value);
        }
    }
}
