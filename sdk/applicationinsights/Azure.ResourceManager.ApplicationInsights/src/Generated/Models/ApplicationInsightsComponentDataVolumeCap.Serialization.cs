// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    public partial class ApplicationInsightsComponentDataVolumeCap : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Cap))
            {
                writer.WritePropertyName("Cap"u8);
                writer.WriteNumberValue(Cap.Value);
            }
            if (Core.Optional.IsDefined(WarningThreshold))
            {
                writer.WritePropertyName("WarningThreshold"u8);
                writer.WriteNumberValue(WarningThreshold.Value);
            }
            if (Core.Optional.IsDefined(IsStopSendNotificationWhenHitThreshold))
            {
                writer.WritePropertyName("StopSendNotificationWhenHitThreshold"u8);
                writer.WriteBooleanValue(IsStopSendNotificationWhenHitThreshold.Value);
            }
            if (Core.Optional.IsDefined(IsStopSendNotificationWhenHitCap))
            {
                writer.WritePropertyName("StopSendNotificationWhenHitCap"u8);
                writer.WriteBooleanValue(IsStopSendNotificationWhenHitCap.Value);
            }
            writer.WriteEndObject();
        }

        internal static ApplicationInsightsComponentDataVolumeCap DeserializeApplicationInsightsComponentDataVolumeCap(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<float> cap = default;
            Core.Optional<int> resetTime = default;
            Core.Optional<int> warningThreshold = default;
            Core.Optional<bool> stopSendNotificationWhenHitThreshold = default;
            Core.Optional<bool> stopSendNotificationWhenHitCap = default;
            Core.Optional<float> maxHistoryCap = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Cap"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cap = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("ResetTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resetTime = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("WarningThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    warningThreshold = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("StopSendNotificationWhenHitThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stopSendNotificationWhenHitThreshold = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("StopSendNotificationWhenHitCap"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stopSendNotificationWhenHitCap = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("MaxHistoryCap"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxHistoryCap = property.Value.GetSingle();
                    continue;
                }
            }
            return new ApplicationInsightsComponentDataVolumeCap(Core.Optional.ToNullable(cap), Core.Optional.ToNullable(resetTime), Core.Optional.ToNullable(warningThreshold), Core.Optional.ToNullable(stopSendNotificationWhenHitThreshold), Core.Optional.ToNullable(stopSendNotificationWhenHitCap), Core.Optional.ToNullable(maxHistoryCap));
        }
    }
}
