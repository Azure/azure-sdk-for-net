// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    public partial class Annotation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AnnotationName))
            {
                writer.WritePropertyName("AnnotationName"u8);
                writer.WriteStringValue(AnnotationName);
            }
            if (Optional.IsDefined(Category))
            {
                writer.WritePropertyName("Category"u8);
                writer.WriteStringValue(Category);
            }
            if (Optional.IsDefined(EventOn))
            {
                writer.WritePropertyName("EventTime"u8);
                writer.WriteStringValue(EventOn.Value, "O");
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("Id"u8);
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("Properties"u8);
                writer.WriteStringValue(Properties);
            }
            if (Optional.IsDefined(RelatedAnnotation))
            {
                writer.WritePropertyName("RelatedAnnotation"u8);
                writer.WriteStringValue(RelatedAnnotation);
            }
            writer.WriteEndObject();
        }

        internal static Annotation DeserializeAnnotation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> annotationName = default;
            Optional<string> category = default;
            Optional<DateTimeOffset> eventTime = default;
            Optional<string> id = default;
            Optional<string> properties = default;
            Optional<string> relatedAnnotation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("AnnotationName"u8))
                {
                    annotationName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("EventTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eventTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("Id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Properties"u8))
                {
                    properties = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("RelatedAnnotation"u8))
                {
                    relatedAnnotation = property.Value.GetString();
                    continue;
                }
            }
            return new Annotation(annotationName.Value, category.Value, Optional.ToNullable(eventTime), id.Value, properties.Value, relatedAnnotation.Value);
        }
    }
}
