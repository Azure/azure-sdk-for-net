// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    /// <summary> The ItemTypeParameter. </summary>
    public readonly partial struct ItemTypeParameter : IEquatable<ItemTypeParameter>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ItemTypeParameter"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ItemTypeParameter(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "none";
        private const string QueryValue = "query";
        private const string FunctionValue = "function";
        private const string FolderValue = "folder";
        private const string RecentValue = "recent";

        /// <summary> none. </summary>
        public static ItemTypeParameter None { get; } = new ItemTypeParameter(NoneValue);
        /// <summary> query. </summary>
        public static ItemTypeParameter Query { get; } = new ItemTypeParameter(QueryValue);
        /// <summary> function. </summary>
        public static ItemTypeParameter Function { get; } = new ItemTypeParameter(FunctionValue);
        /// <summary> folder. </summary>
        public static ItemTypeParameter Folder { get; } = new ItemTypeParameter(FolderValue);
        /// <summary> recent. </summary>
        public static ItemTypeParameter Recent { get; } = new ItemTypeParameter(RecentValue);
        /// <summary> Determines if two <see cref="ItemTypeParameter"/> values are the same. </summary>
        public static bool operator ==(ItemTypeParameter left, ItemTypeParameter right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ItemTypeParameter"/> values are not the same. </summary>
        public static bool operator !=(ItemTypeParameter left, ItemTypeParameter right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ItemTypeParameter"/>. </summary>
        public static implicit operator ItemTypeParameter(string value) => new ItemTypeParameter(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ItemTypeParameter other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ItemTypeParameter other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
