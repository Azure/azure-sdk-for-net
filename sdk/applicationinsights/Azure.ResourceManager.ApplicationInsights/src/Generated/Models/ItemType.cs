// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApplicationInsights.Models
{
    /// <summary> Enum indicating the type of the Analytics item. </summary>
    public readonly partial struct ItemType : IEquatable<ItemType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ItemType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "none";
        private const string QueryValue = "query";
        private const string RecentValue = "recent";
        private const string FunctionValue = "function";

        /// <summary> none. </summary>
        public static ItemType None { get; } = new ItemType(NoneValue);
        /// <summary> query. </summary>
        public static ItemType Query { get; } = new ItemType(QueryValue);
        /// <summary> recent. </summary>
        public static ItemType Recent { get; } = new ItemType(RecentValue);
        /// <summary> function. </summary>
        public static ItemType Function { get; } = new ItemType(FunctionValue);
        /// <summary> Determines if two <see cref="ItemType"/> values are the same. </summary>
        public static bool operator ==(ItemType left, ItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ItemType"/> values are not the same. </summary>
        public static bool operator !=(ItemType left, ItemType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ItemType"/>. </summary>
        public static implicit operator ItemType(string value) => new ItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
