// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApplicationInsights.Management
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApplicationInsightsManagementClient.
    /// </summary>
    public static partial class ApplicationInsightsManagementClientExtensions
    {
            /// <summary>
            /// Returns a file test result for the matching test
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='webTestName'>
            /// The name of the Application Insights webtest resource.
            /// </param>
            /// <param name='geoLocationId'>
            /// The location ID where the webtest was physically run.
            /// </param>
            /// <param name='timeStamp'>
            /// The posix (epoch) time stamp for the webtest result.
            /// </param>
            /// <param name='downloadAs'>
            /// The format to use when returning the webtest result. Possible values
            /// include: 'WebTestResult', 'Json'
            /// </param>
            /// <param name='testSuccessfulCriteria'>
            /// The success state criteria for the webtest result.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            public static TestResultFileResponse GetTestResultFile(this IApplicationInsightsManagementClient operations, string resourceGroupName, string webTestName, string geoLocationId, long timeStamp, string downloadAs, bool? testSuccessfulCriteria = default(bool?), string continuationToken = default(string))
            {
                return operations.GetTestResultFileAsync(resourceGroupName, webTestName, geoLocationId, timeStamp, downloadAs, testSuccessfulCriteria, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a file test result for the matching test
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='webTestName'>
            /// The name of the Application Insights webtest resource.
            /// </param>
            /// <param name='geoLocationId'>
            /// The location ID where the webtest was physically run.
            /// </param>
            /// <param name='timeStamp'>
            /// The posix (epoch) time stamp for the webtest result.
            /// </param>
            /// <param name='downloadAs'>
            /// The format to use when returning the webtest result. Possible values
            /// include: 'WebTestResult', 'Json'
            /// </param>
            /// <param name='testSuccessfulCriteria'>
            /// The success state criteria for the webtest result.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestResultFileResponse> GetTestResultFileAsync(this IApplicationInsightsManagementClient operations, string resourceGroupName, string webTestName, string geoLocationId, long timeStamp, string downloadAs, bool? testSuccessfulCriteria = default(bool?), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestResultFileWithHttpMessagesAsync(resourceGroupName, webTestName, geoLocationId, timeStamp, downloadAs, testSuccessfulCriteria, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
