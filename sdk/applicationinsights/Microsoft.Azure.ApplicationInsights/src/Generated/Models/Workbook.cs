// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApplicationInsights.Management.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An Application Insights workbook definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Workbook : WorkbookResource
    {
        /// <summary>
        /// Initializes a new instance of the Workbook class.
        /// </summary>
        public Workbook()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Workbook class.
        /// </summary>
        /// <param name="workbookName">The user-defined name of the
        /// workbook.</param>
        /// <param name="serializedData">Configuration of this particular
        /// workbook. Configuration data is a string containing valid
        /// JSON</param>
        /// <param name="workbookId">Internally assigned unique id of the
        /// workbook definition.</param>
        /// <param name="sharedTypeKind">Enum indicating if this workbook
        /// definition is owned by a specific user or is shared between all
        /// users with access to the Application Insights component. Possible
        /// values include: 'user', 'shared'</param>
        /// <param name="category">Workbook category, as defined by the user at
        /// creation time.</param>
        /// <param name="userId">Unique user id of the specific user that owns
        /// this workbook.</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="kind">The kind of workbook. Choices are user and
        /// shared. Possible values include: 'user', 'shared'</param>
        /// <param name="version">This instance's version of the data model.
        /// This can change as new features are added that can be marked
        /// workbook.</param>
        /// <param name="timeModified">Date and time in UTC of the last
        /// modification that was made to this workbook definition.</param>
        /// <param name="workbookTags">A list of 0 or more tags that are
        /// associated with this workbook definition</param>
        /// <param name="sourceResourceId">Optional resourceId for a source
        /// resource.</param>
        public Workbook(string workbookName, string serializedData, string workbookId, string sharedTypeKind, string category, string userId, string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string kind = default(string), string version = default(string), string timeModified = default(string), IList<string> workbookTags = default(IList<string>), string sourceResourceId = default(string))
            : base(id, name, type, location, tags)
        {
            Kind = kind;
            WorkbookName = workbookName;
            SerializedData = serializedData;
            Version = version;
            WorkbookId = workbookId;
            SharedTypeKind = sharedTypeKind;
            TimeModified = timeModified;
            Category = category;
            WorkbookTags = workbookTags;
            UserId = userId;
            SourceResourceId = sourceResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the kind of workbook. Choices are user and shared.
        /// Possible values include: 'user', 'shared'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets the user-defined name of the workbook.
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string WorkbookName { get; set; }

        /// <summary>
        /// Gets or sets configuration of this particular workbook.
        /// Configuration data is a string containing valid JSON
        /// </summary>
        [JsonProperty(PropertyName = "properties.serializedData")]
        public string SerializedData { get; set; }

        /// <summary>
        /// Gets or sets this instance's version of the data model. This can
        /// change as new features are added that can be marked workbook.
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets internally assigned unique id of the workbook
        /// definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.workbookId")]
        public string WorkbookId { get; set; }

        /// <summary>
        /// Gets or sets enum indicating if this workbook definition is owned
        /// by a specific user or is shared between all users with access to
        /// the Application Insights component. Possible values include:
        /// 'user', 'shared'
        /// </summary>
        [JsonProperty(PropertyName = "properties.kind")]
        public string SharedTypeKind { get; set; }

        /// <summary>
        /// Gets date and time in UTC of the last modification that was made to
        /// this workbook definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeModified")]
        public string TimeModified { get; private set; }

        /// <summary>
        /// Gets or sets workbook category, as defined by the user at creation
        /// time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets a list of 0 or more tags that are associated with this
        /// workbook definition
        /// </summary>
        [JsonProperty(PropertyName = "properties.tags")]
        public IList<string> WorkbookTags { get; set; }

        /// <summary>
        /// Gets or sets unique user id of the specific user that owns this
        /// workbook.
        /// </summary>
        [JsonProperty(PropertyName = "properties.userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets optional resourceId for a source resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceResourceId")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WorkbookName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WorkbookName");
            }
            if (SerializedData == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SerializedData");
            }
            if (WorkbookId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WorkbookId");
            }
            if (SharedTypeKind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SharedTypeKind");
            }
            if (Category == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Category");
            }
            if (UserId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserId");
            }
        }
    }
}
