// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.NetApp
{
    /// <summary>
    /// A class representing a collection of <see cref="SubscriptionQuotaItemResource" /> and their operations.
    /// Each <see cref="SubscriptionQuotaItemResource" /> in the collection will belong to the same instance of <see cref="SubscriptionResource" />.
    /// To get a <see cref="SubscriptionQuotaItemCollection" /> instance call the GetSubscriptionQuotaItems method from an instance of <see cref="SubscriptionResource" />.
    /// </summary>
    public partial class SubscriptionQuotaItemCollection : ArmCollection, IEnumerable<SubscriptionQuotaItemResource>, IAsyncEnumerable<SubscriptionQuotaItemResource>
    {
        private readonly ClientDiagnostics _subscriptionQuotaItemNetAppResourceQuotaLimitsClientDiagnostics;
        private readonly NetAppResourceQuotaLimitsRestOperations _subscriptionQuotaItemNetAppResourceQuotaLimitsRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionQuotaItemCollection"/> class for mocking. </summary>
        protected SubscriptionQuotaItemCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionQuotaItemCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The location. </param>
        internal SubscriptionQuotaItemCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _subscriptionQuotaItemNetAppResourceQuotaLimitsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.NetApp", SubscriptionQuotaItemResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SubscriptionQuotaItemResource.ResourceType, out string subscriptionQuotaItemNetAppResourceQuotaLimitsApiVersion);
            _subscriptionQuotaItemNetAppResourceQuotaLimitsRestClient = new NetAppResourceQuotaLimitsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, subscriptionQuotaItemNetAppResourceQuotaLimitsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get the default and current subscription quota limit
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits/{quotaLimitName}
        /// Operation Id: NetAppResourceQuotaLimits_Get
        /// </summary>
        /// <param name="quotaLimitName"> The name of the Quota Limit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="quotaLimitName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="quotaLimitName"/> is null. </exception>
        public virtual async Task<Response<SubscriptionQuotaItemResource>> GetAsync(string quotaLimitName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(quotaLimitName, nameof(quotaLimitName));

            using var scope = _subscriptionQuotaItemNetAppResourceQuotaLimitsClientDiagnostics.CreateScope("SubscriptionQuotaItemCollection.Get");
            scope.Start();
            try
            {
                var response = await _subscriptionQuotaItemNetAppResourceQuotaLimitsRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), quotaLimitName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionQuotaItemResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the default and current subscription quota limit
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits/{quotaLimitName}
        /// Operation Id: NetAppResourceQuotaLimits_Get
        /// </summary>
        /// <param name="quotaLimitName"> The name of the Quota Limit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="quotaLimitName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="quotaLimitName"/> is null. </exception>
        public virtual Response<SubscriptionQuotaItemResource> Get(string quotaLimitName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(quotaLimitName, nameof(quotaLimitName));

            using var scope = _subscriptionQuotaItemNetAppResourceQuotaLimitsClientDiagnostics.CreateScope("SubscriptionQuotaItemCollection.Get");
            scope.Start();
            try
            {
                var response = _subscriptionQuotaItemNetAppResourceQuotaLimitsRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), quotaLimitName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionQuotaItemResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the default and current limits for quotas
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits
        /// Operation Id: NetAppResourceQuotaLimits_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SubscriptionQuotaItemResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SubscriptionQuotaItemResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SubscriptionQuotaItemResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _subscriptionQuotaItemNetAppResourceQuotaLimitsClientDiagnostics.CreateScope("SubscriptionQuotaItemCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _subscriptionQuotaItemNetAppResourceQuotaLimitsRestClient.ListAsync(Id.SubscriptionId, new AzureLocation(_location), cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionQuotaItemResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get the default and current limits for quotas
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits
        /// Operation Id: NetAppResourceQuotaLimits_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SubscriptionQuotaItemResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SubscriptionQuotaItemResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<SubscriptionQuotaItemResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _subscriptionQuotaItemNetAppResourceQuotaLimitsClientDiagnostics.CreateScope("SubscriptionQuotaItemCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _subscriptionQuotaItemNetAppResourceQuotaLimitsRestClient.List(Id.SubscriptionId, new AzureLocation(_location), cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionQuotaItemResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits/{quotaLimitName}
        /// Operation Id: NetAppResourceQuotaLimits_Get
        /// </summary>
        /// <param name="quotaLimitName"> The name of the Quota Limit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="quotaLimitName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="quotaLimitName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string quotaLimitName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(quotaLimitName, nameof(quotaLimitName));

            using var scope = _subscriptionQuotaItemNetAppResourceQuotaLimitsClientDiagnostics.CreateScope("SubscriptionQuotaItemCollection.Exists");
            scope.Start();
            try
            {
                var response = await _subscriptionQuotaItemNetAppResourceQuotaLimitsRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), quotaLimitName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits/{quotaLimitName}
        /// Operation Id: NetAppResourceQuotaLimits_Get
        /// </summary>
        /// <param name="quotaLimitName"> The name of the Quota Limit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="quotaLimitName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="quotaLimitName"/> is null. </exception>
        public virtual Response<bool> Exists(string quotaLimitName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(quotaLimitName, nameof(quotaLimitName));

            using var scope = _subscriptionQuotaItemNetAppResourceQuotaLimitsClientDiagnostics.CreateScope("SubscriptionQuotaItemCollection.Exists");
            scope.Start();
            try
            {
                var response = _subscriptionQuotaItemNetAppResourceQuotaLimitsRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), quotaLimitName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SubscriptionQuotaItemResource> IEnumerable<SubscriptionQuotaItemResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SubscriptionQuotaItemResource> IAsyncEnumerable<SubscriptionQuotaItemResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
