// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NetApp.Models;

namespace Azure.ResourceManager.NetApp
{
    /// <summary>
    /// A class representing the NetAppBackup data model.
    /// Backup under a Backup Vault
    /// Serialized Name: Backup
    /// </summary>
    public partial class NetAppBackupData : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="NetAppBackupData"/>. </summary>
        /// <param name="volumeResourceId">
        /// ResourceId used to identify the Volume
        /// Serialized Name: Backup.properties.volumeResourceId
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeResourceId"/> is null. </exception>
        public NetAppBackupData(ResourceIdentifier volumeResourceId)
        {
            Argument.AssertNotNull(volumeResourceId, nameof(volumeResourceId));

            VolumeResourceId = volumeResourceId;
        }

        /// <summary> Initializes a new instance of <see cref="NetAppBackupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="backupId">
        /// UUID v4 used to identify the Backup
        /// Serialized Name: Backup.properties.backupId
        /// </param>
        /// <param name="createdOn">
        /// The creation date of the backup
        /// Serialized Name: Backup.properties.creationDate
        /// </param>
        /// <param name="provisioningState">
        /// Azure lifecycle management
        /// Serialized Name: Backup.properties.provisioningState
        /// </param>
        /// <param name="size">
        /// Size of backup in bytes
        /// Serialized Name: Backup.properties.size
        /// </param>
        /// <param name="label">
        /// Label for backup
        /// Serialized Name: Backup.properties.label
        /// </param>
        /// <param name="backupType">
        /// Type of backup Manual or Scheduled
        /// Serialized Name: Backup.properties.backupType
        /// </param>
        /// <param name="failureReason">
        /// Failure reason
        /// Serialized Name: Backup.properties.failureReason
        /// </param>
        /// <param name="volumeResourceId">
        /// ResourceId used to identify the Volume
        /// Serialized Name: Backup.properties.volumeResourceId
        /// </param>
        /// <param name="useExistingSnapshot">
        /// Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups
        /// Serialized Name: Backup.properties.useExistingSnapshot
        /// </param>
        /// <param name="snapshotName">
        /// The name of the snapshot
        /// Serialized Name: Backup.properties.snapshotName
        /// </param>
        /// <param name="backupPolicyResourceId">
        /// ResourceId used to identify the backup policy
        /// Serialized Name: Backup.properties.backupPolicyResourceId
        /// </param>
        internal NetAppBackupData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string backupId, DateTimeOffset? createdOn, string provisioningState, long? size, string label, NetAppBackupType? backupType, string failureReason, ResourceIdentifier volumeResourceId, bool? useExistingSnapshot, string snapshotName, string backupPolicyResourceId) : base(id, name, resourceType, systemData)
        {
            BackupId = backupId;
            CreatedOn = createdOn;
            ProvisioningState = provisioningState;
            Size = size;
            Label = label;
            BackupType = backupType;
            FailureReason = failureReason;
            VolumeResourceId = volumeResourceId;
            UseExistingSnapshot = useExistingSnapshot;
            SnapshotName = snapshotName;
            BackupPolicyResourceId = backupPolicyResourceId;
        }
        /// <summary>
        /// ResourceId used to identify the Volume
        /// Serialized Name: Backup.properties.volumeResourceId
        /// </summary>
        public ResourceIdentifier VolumeResourceId { get; set; }
        /// <summary>
        /// The name of the snapshot
        /// Serialized Name: Backup.properties.snapshotName
        /// </summary>
        public string SnapshotName { get; set; }
        /// <summary>
        /// ResourceId used to identify the backup policy
        /// Serialized Name: Backup.properties.backupPolicyResourceId
        /// </summary>
        public string BackupPolicyResourceId { get; }
    }
}
