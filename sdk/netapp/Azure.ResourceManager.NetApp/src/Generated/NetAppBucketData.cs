// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NetApp.Models;

namespace Azure.ResourceManager.NetApp
{
    /// <summary>
    /// A class representing the NetAppBucket data model.
    /// Bucket resource
    /// Serialized Name: Bucket
    /// </summary>
    public partial class NetAppBucketData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetAppBucketData"/>. </summary>
        public NetAppBucketData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NetAppBucketData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="path">
        /// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
        /// Serialized Name: Bucket.properties.path
        /// </param>
        /// <param name="fileSystemUser">
        /// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
        /// Serialized Name: Bucket.properties.fileSystemUser
        /// </param>
        /// <param name="provisioningState">
        /// Provisioning state of the resource
        /// Serialized Name: Bucket.properties.provisioningState
        /// </param>
        /// <param name="status">
        /// The bucket credentials status. There states:
        ///
        /// "NoCredentialsSet": Access and Secret key pair have not been generated.
        /// "CredentialsExpired": Access and Secret key pair have expired.
        /// "Active": The certificate has been installed and credentials are unexpired.
        /// Serialized Name: Bucket.properties.status
        /// </param>
        /// <param name="server">
        /// Properties of the server managing the lifecycle of volume buckets
        /// Serialized Name: Bucket.properties.server
        /// </param>
        /// <param name="permissions">
        /// Access permissions for the bucket. Either ReadOnly or ReadWrite. The default is ReadOnly if no value is provided during bucket creation.
        /// Serialized Name: Bucket.properties.permissions
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetAppBucketData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string path, BucketFileSystemUser fileSystemUser, NetAppProvisioningState? provisioningState, BucketCredentialStatus? status, NetAppBucketServerProperties server, NetAppBucketPermission? permissions, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Path = path;
            FileSystemUser = fileSystemUser;
            ProvisioningState = provisioningState;
            Status = status;
            Server = server;
            Permissions = permissions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
        /// Serialized Name: Bucket.properties.path
        /// </summary>
        public string Path { get; set; }
        /// <summary>
        /// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
        /// Serialized Name: Bucket.properties.fileSystemUser
        /// </summary>
        public BucketFileSystemUser FileSystemUser { get; set; }
        /// <summary>
        /// Provisioning state of the resource
        /// Serialized Name: Bucket.properties.provisioningState
        /// </summary>
        public NetAppProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// The bucket credentials status. There states:
        ///
        /// "NoCredentialsSet": Access and Secret key pair have not been generated.
        /// "CredentialsExpired": Access and Secret key pair have expired.
        /// "Active": The certificate has been installed and credentials are unexpired.
        /// Serialized Name: Bucket.properties.status
        /// </summary>
        public BucketCredentialStatus? Status { get; }
        /// <summary>
        /// Properties of the server managing the lifecycle of volume buckets
        /// Serialized Name: Bucket.properties.server
        /// </summary>
        public NetAppBucketServerProperties Server { get; set; }
        /// <summary>
        /// Access permissions for the bucket. Either ReadOnly or ReadWrite. The default is ReadOnly if no value is provided during bucket creation.
        /// Serialized Name: Bucket.properties.permissions
        /// </summary>
        public NetAppBucketPermission? Permissions { get; set; }
    }
}
