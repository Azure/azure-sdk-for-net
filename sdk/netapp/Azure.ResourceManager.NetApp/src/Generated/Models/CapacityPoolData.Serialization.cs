// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NetApp.Models;

namespace Azure.ResourceManager.NetApp
{
    public partial class CapacityPoolData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var item in Tags)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("size");
            writer.WriteNumberValue(Size);
            writer.WritePropertyName("serviceLevel");
            writer.WriteStringValue(ServiceLevel.ToString());
            if (Optional.IsDefined(QosType))
            {
                writer.WritePropertyName("qosType");
                writer.WriteStringValue(QosType.Value.ToString());
            }
            if (Optional.IsDefined(CoolAccess))
            {
                writer.WritePropertyName("coolAccess");
                writer.WriteBooleanValue(CoolAccess.Value);
            }
            if (Optional.IsDefined(EncryptionType))
            {
                if (EncryptionType != null)
                {
                    writer.WritePropertyName("encryptionType");
                    writer.WriteStringValue(EncryptionType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("encryptionType");
                }
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static CapacityPoolData DeserializeCapacityPoolData(JsonElement element)
        {
            Optional<string> etag = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            Optional<string> poolId = default;
            long size = default;
            ServiceLevel serviceLevel = default;
            Optional<string> provisioningState = default;
            Optional<float> totalThroughputMibps = default;
            Optional<float> utilizedThroughputMibps = default;
            Optional<QosType> qosType = default;
            Optional<bool> coolAccess = default;
            Optional<EncryptionType?> encryptionType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("poolId"))
                        {
                            poolId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("size"))
                        {
                            size = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("serviceLevel"))
                        {
                            serviceLevel = new ServiceLevel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("totalThroughputMibps"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            totalThroughputMibps = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("utilizedThroughputMibps"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            utilizedThroughputMibps = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("qosType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            qosType = new QosType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("coolAccess"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            coolAccess = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("encryptionType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                encryptionType = null;
                                continue;
                            }
                            encryptionType = new EncryptionType(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new CapacityPoolData(id, name, type, systemData, tags, location, etag.Value, poolId.Value, size, serviceLevel, provisioningState.Value, Optional.ToNullable(totalThroughputMibps), Optional.ToNullable(utilizedThroughputMibps), Optional.ToNullable(qosType), Optional.ToNullable(coolAccess), Optional.ToNullable(encryptionType));
        }
    }
}
