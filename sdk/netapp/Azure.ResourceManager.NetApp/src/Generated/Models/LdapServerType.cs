// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary> The type of the LDAP server. </summary>
    public readonly partial struct LdapServerType : IEquatable<LdapServerType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LdapServerType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LdapServerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveDirectoryValue = "ActiveDirectory";
        private const string OpenLdapValue = "OpenLDAP";

        /// <summary> The volume should use Active Directory for LDAP connections. </summary>
        public static LdapServerType ActiveDirectory { get; } = new LdapServerType(ActiveDirectoryValue);
        /// <summary> The volume should use OpenLDAP for LDAP connections. </summary>
        public static LdapServerType OpenLdap { get; } = new LdapServerType(OpenLdapValue);
        /// <summary> Determines if two <see cref="LdapServerType"/> values are the same. </summary>
        public static bool operator ==(LdapServerType left, LdapServerType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LdapServerType"/> values are not the same. </summary>
        public static bool operator !=(LdapServerType left, LdapServerType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LdapServerType"/>. </summary>
        public static implicit operator LdapServerType(string value) => new LdapServerType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LdapServerType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LdapServerType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
