// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetApp.Models
{
    public partial class NetAppKeyVaultProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("keyVaultUri");
            writer.WriteStringValue(KeyVaultUri.AbsoluteUri);
            writer.WritePropertyName("keyName");
            writer.WriteStringValue(KeyName);
            writer.WritePropertyName("keyVaultResourceId");
            writer.WriteStringValue(KeyVaultResourceId);
            writer.WriteEndObject();
        }

        internal static NetAppKeyVaultProperties DeserializeNetAppKeyVaultProperties(JsonElement element)
        {
            Optional<string> keyVaultId = default;
            Uri keyVaultUri = default;
            string keyName = default;
            string keyVaultResourceId = default;
            Optional<NetAppKeyVaultStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("keyVaultId"))
                {
                    keyVaultId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyVaultUri"))
                {
                    keyVaultUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("keyName"))
                {
                    keyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyVaultResourceId"))
                {
                    keyVaultResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new NetAppKeyVaultStatus(property.Value.GetString());
                    continue;
                }
            }
            return new NetAppKeyVaultProperties(keyVaultId.Value, keyVaultUri, keyName, keyVaultResourceId, Optional.ToNullable(status));
        }
    }
}
