// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary>
    /// Active Directory
    /// Serialized Name: ActiveDirectory
    /// </summary>
    public partial class NetAppAccountActiveDirectory
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetAppAccountActiveDirectory"/>. </summary>
        public NetAppAccountActiveDirectory()
        {
            BackupOperators = new ChangeTrackingList<string>();
            Administrators = new ChangeTrackingList<string>();
            SecurityOperators = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="NetAppAccountActiveDirectory"/>. </summary>
        /// <param name="activeDirectoryId">
        /// Id of the Active Directory
        /// Serialized Name: ActiveDirectory.activeDirectoryId
        /// </param>
        /// <param name="username">
        /// A domain user account with permission to create machine accounts
        /// Serialized Name: ActiveDirectory.username
        /// </param>
        /// <param name="password">
        /// Plain text password of Active Directory domain administrator, value is masked in the response
        /// Serialized Name: ActiveDirectory.password
        /// </param>
        /// <param name="domain">
        /// Name of the Active Directory domain
        /// Serialized Name: ActiveDirectory.domain
        /// </param>
        /// <param name="dns">
        /// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
        /// Serialized Name: ActiveDirectory.dns
        /// </param>
        /// <param name="status">
        /// Status of the Active Directory
        /// Serialized Name: ActiveDirectory.status
        /// </param>
        /// <param name="statusDetails">
        /// Any details in regards to the Status of the Active Directory
        /// Serialized Name: ActiveDirectory.statusDetails
        /// </param>
        /// <param name="smbServerName">
        /// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
        /// Serialized Name: ActiveDirectory.smbServerName
        /// </param>
        /// <param name="organizationalUnit">
        /// The Organizational Unit (OU) within the Windows Active Directory
        /// Serialized Name: ActiveDirectory.organizationalUnit
        /// </param>
        /// <param name="site">
        /// The Active Directory site the service will limit Domain Controller discovery to
        /// Serialized Name: ActiveDirectory.site
        /// </param>
        /// <param name="backupOperators">
        /// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
        /// Serialized Name: ActiveDirectory.backupOperators
        /// </param>
        /// <param name="administrators">
        /// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
        /// Serialized Name: ActiveDirectory.administrators
        /// </param>
        /// <param name="kdcIP">
        /// kdc server IP address for the active directory machine. This optional parameter is used only while creating kerberos volume.
        /// Serialized Name: ActiveDirectory.kdcIP
        /// </param>
        /// <param name="adName">
        /// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
        /// Serialized Name: ActiveDirectory.adName
        /// </param>
        /// <param name="serverRootCACertificate">
        /// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
        /// Serialized Name: ActiveDirectory.serverRootCACertificate
        /// </param>
        /// <param name="isAesEncryptionEnabled">
        /// If enabled, AES encryption will be enabled for SMB communication.
        /// Serialized Name: ActiveDirectory.aesEncryption
        /// </param>
        /// <param name="isLdapSigningEnabled">
        /// Specifies whether or not the LDAP traffic needs to be signed.
        /// Serialized Name: ActiveDirectory.ldapSigning
        /// </param>
        /// <param name="securityOperators">
        /// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
        /// Serialized Name: ActiveDirectory.securityOperators
        /// </param>
        /// <param name="isLdapOverTlsEnabled">
        /// Specifies whether or not the LDAP traffic needs to be secured via TLS.
        /// Serialized Name: ActiveDirectory.ldapOverTLS
        /// </param>
        /// <param name="allowLocalNfsUsersWithLdap">
        ///  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
        /// Serialized Name: ActiveDirectory.allowLocalNfsUsersWithLdap
        /// </param>
        /// <param name="encryptDCConnections">
        /// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
        /// Serialized Name: ActiveDirectory.encryptDCConnections
        /// </param>
        /// <param name="ldapSearchScope">
        /// LDAP Search scope options
        /// Serialized Name: ActiveDirectory.ldapSearchScope
        /// </param>
        /// <param name="preferredServersForLdapClient">
        /// Comma separated list of IPv4 addresses of preferred servers for LDAP client. At most two comma separated IPv4 addresses can be passed.
        /// Serialized Name: ActiveDirectory.preferredServersForLdapClient
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetAppAccountActiveDirectory(string activeDirectoryId, string username, string password, string domain, string dns, NetAppAccountActiveDirectoryStatus? status, string statusDetails, string smbServerName, string organizationalUnit, string site, IList<string> backupOperators, IList<string> administrators, IPAddress kdcIP, string adName, string serverRootCACertificate, bool? isAesEncryptionEnabled, bool? isLdapSigningEnabled, IList<string> securityOperators, bool? isLdapOverTlsEnabled, bool? allowLocalNfsUsersWithLdap, bool? encryptDCConnections, NetAppLdapSearchScopeConfiguration ldapSearchScope, string preferredServersForLdapClient, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ActiveDirectoryId = activeDirectoryId;
            Username = username;
            Password = password;
            Domain = domain;
            Dns = dns;
            Status = status;
            StatusDetails = statusDetails;
            SmbServerName = smbServerName;
            OrganizationalUnit = organizationalUnit;
            Site = site;
            BackupOperators = backupOperators;
            Administrators = administrators;
            KdcIP = kdcIP;
            AdName = adName;
            ServerRootCACertificate = serverRootCACertificate;
            IsAesEncryptionEnabled = isAesEncryptionEnabled;
            IsLdapSigningEnabled = isLdapSigningEnabled;
            SecurityOperators = securityOperators;
            IsLdapOverTlsEnabled = isLdapOverTlsEnabled;
            AllowLocalNfsUsersWithLdap = allowLocalNfsUsersWithLdap;
            EncryptDCConnections = encryptDCConnections;
            LdapSearchScope = ldapSearchScope;
            PreferredServersForLdapClient = preferredServersForLdapClient;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Id of the Active Directory
        /// Serialized Name: ActiveDirectory.activeDirectoryId
        /// </summary>
        public string ActiveDirectoryId { get; set; }
        /// <summary>
        /// A domain user account with permission to create machine accounts
        /// Serialized Name: ActiveDirectory.username
        /// </summary>
        public string Username { get; set; }
        /// <summary>
        /// Plain text password of Active Directory domain administrator, value is masked in the response
        /// Serialized Name: ActiveDirectory.password
        /// </summary>
        public string Password { get; set; }
        /// <summary>
        /// Name of the Active Directory domain
        /// Serialized Name: ActiveDirectory.domain
        /// </summary>
        public string Domain { get; set; }
        /// <summary>
        /// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
        /// Serialized Name: ActiveDirectory.dns
        /// </summary>
        public string Dns { get; set; }
        /// <summary>
        /// Status of the Active Directory
        /// Serialized Name: ActiveDirectory.status
        /// </summary>
        public NetAppAccountActiveDirectoryStatus? Status { get; }
        /// <summary>
        /// Any details in regards to the Status of the Active Directory
        /// Serialized Name: ActiveDirectory.statusDetails
        /// </summary>
        public string StatusDetails { get; }
        /// <summary>
        /// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
        /// Serialized Name: ActiveDirectory.smbServerName
        /// </summary>
        public string SmbServerName { get; set; }
        /// <summary>
        /// The Organizational Unit (OU) within the Windows Active Directory
        /// Serialized Name: ActiveDirectory.organizationalUnit
        /// </summary>
        public string OrganizationalUnit { get; set; }
        /// <summary>
        /// The Active Directory site the service will limit Domain Controller discovery to
        /// Serialized Name: ActiveDirectory.site
        /// </summary>
        public string Site { get; set; }
        /// <summary>
        /// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
        /// Serialized Name: ActiveDirectory.backupOperators
        /// </summary>
        public IList<string> BackupOperators { get; }
        /// <summary>
        /// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
        /// Serialized Name: ActiveDirectory.administrators
        /// </summary>
        public IList<string> Administrators { get; }
        /// <summary>
        /// kdc server IP address for the active directory machine. This optional parameter is used only while creating kerberos volume.
        /// Serialized Name: ActiveDirectory.kdcIP
        /// </summary>
        public IPAddress KdcIP { get; set; }
        /// <summary>
        /// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
        /// Serialized Name: ActiveDirectory.adName
        /// </summary>
        public string AdName { get; set; }
        /// <summary>
        /// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
        /// Serialized Name: ActiveDirectory.serverRootCACertificate
        /// </summary>
        public string ServerRootCACertificate { get; set; }
        /// <summary>
        /// If enabled, AES encryption will be enabled for SMB communication.
        /// Serialized Name: ActiveDirectory.aesEncryption
        /// </summary>
        public bool? IsAesEncryptionEnabled { get; set; }
        /// <summary>
        /// Specifies whether or not the LDAP traffic needs to be signed.
        /// Serialized Name: ActiveDirectory.ldapSigning
        /// </summary>
        public bool? IsLdapSigningEnabled { get; set; }
        /// <summary>
        /// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
        /// Serialized Name: ActiveDirectory.securityOperators
        /// </summary>
        public IList<string> SecurityOperators { get; }
        /// <summary>
        /// Specifies whether or not the LDAP traffic needs to be secured via TLS.
        /// Serialized Name: ActiveDirectory.ldapOverTLS
        /// </summary>
        public bool? IsLdapOverTlsEnabled { get; set; }
        /// <summary>
        ///  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
        /// Serialized Name: ActiveDirectory.allowLocalNfsUsersWithLdap
        /// </summary>
        public bool? AllowLocalNfsUsersWithLdap { get; set; }
        /// <summary>
        /// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
        /// Serialized Name: ActiveDirectory.encryptDCConnections
        /// </summary>
        public bool? EncryptDCConnections { get; set; }
        /// <summary>
        /// LDAP Search scope options
        /// Serialized Name: ActiveDirectory.ldapSearchScope
        /// </summary>
        public NetAppLdapSearchScopeConfiguration LdapSearchScope { get; set; }
        /// <summary>
        /// Comma separated list of IPv4 addresses of preferred servers for LDAP client. At most two comma separated IPv4 addresses can be passed.
        /// Serialized Name: ActiveDirectory.preferredServersForLdapClient
        /// </summary>
        public string PreferredServersForLdapClient { get; set; }
    }
}
