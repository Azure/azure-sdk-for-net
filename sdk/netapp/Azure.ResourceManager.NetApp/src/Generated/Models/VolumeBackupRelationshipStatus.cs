// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary> Status of the volume backup relationship. </summary>
    public readonly partial struct VolumeBackupRelationshipStatus : IEquatable<VolumeBackupRelationshipStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VolumeBackupRelationshipStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VolumeBackupRelationshipStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IdleValue = "Idle";
        private const string TransferringValue = "Transferring";
        private const string FailedValue = "Failed";
        private const string UnknownValue = "Unknown";

        /// <summary> Idle. </summary>
        public static VolumeBackupRelationshipStatus Idle { get; } = new VolumeBackupRelationshipStatus(IdleValue);
        /// <summary> Transferring. </summary>
        public static VolumeBackupRelationshipStatus Transferring { get; } = new VolumeBackupRelationshipStatus(TransferringValue);
        /// <summary> Failed. </summary>
        public static VolumeBackupRelationshipStatus Failed { get; } = new VolumeBackupRelationshipStatus(FailedValue);
        /// <summary> Unknown. </summary>
        public static VolumeBackupRelationshipStatus Unknown { get; } = new VolumeBackupRelationshipStatus(UnknownValue);
        /// <summary> Determines if two <see cref="VolumeBackupRelationshipStatus"/> values are the same. </summary>
        public static bool operator ==(VolumeBackupRelationshipStatus left, VolumeBackupRelationshipStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VolumeBackupRelationshipStatus"/> values are not the same. </summary>
        public static bool operator !=(VolumeBackupRelationshipStatus left, VolumeBackupRelationshipStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VolumeBackupRelationshipStatus"/>. </summary>
        public static implicit operator VolumeBackupRelationshipStatus(string value) => new VolumeBackupRelationshipStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VolumeBackupRelationshipStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VolumeBackupRelationshipStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
