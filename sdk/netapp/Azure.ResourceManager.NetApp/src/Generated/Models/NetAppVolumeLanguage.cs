// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary> Language supported for volume. </summary>
    public readonly partial struct NetAppVolumeLanguage : IEquatable<NetAppVolumeLanguage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NetAppVolumeLanguage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NetAppVolumeLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CUtf8Value = "c.utf-8";
        private const string Utf8Mb4Value = "utf8mb4";
        private const string ArValue = "ar";
        private const string ArUtf8Value = "ar.utf-8";
        private const string HrValue = "hr";
        private const string HrUtf8Value = "hr.utf-8";
        private const string CsValue = "cs";
        private const string CsUtf8Value = "cs.utf-8";
        private const string DaValue = "da";
        private const string DaUtf8Value = "da.utf-8";
        private const string NlValue = "nl";
        private const string NlUtf8Value = "nl.utf-8";
        private const string EnValue = "en";
        private const string EnUtf8Value = "en.utf-8";
        private const string FiValue = "fi";
        private const string FiUtf8Value = "fi.utf-8";
        private const string FrValue = "fr";
        private const string FrUtf8Value = "fr.utf-8";
        private const string DeValue = "de";
        private const string DeUtf8Value = "de.utf-8";
        private const string HeValue = "he";
        private const string HeUtf8Value = "he.utf-8";
        private const string HuValue = "hu";
        private const string HuUtf8Value = "hu.utf-8";
        private const string ItValue = "it";
        private const string ItUtf8Value = "it.utf-8";
        private const string JaValue = "ja";
        private const string JaUtf8Value = "ja.utf-8";
        private const string JaV1Value = "ja-v1";
        private const string JaV1Utf8Value = "ja-v1.utf-8";
        private const string JaJpPckValue = "ja-jp.pck";
        private const string JaJpPckUtf8Value = "ja-jp.pck.utf-8";
        private const string JaJp932Value = "ja-jp.932";
        private const string JaJp932Utf8Value = "ja-jp.932.utf-8";
        private const string JaJpPckV2Value = "ja-jp.pck-v2";
        private const string JaJpPckV2Utf8Value = "ja-jp.pck-v2.utf-8";
        private const string KoValue = "ko";
        private const string KoUtf8Value = "ko.utf-8";
        private const string NoValue = "no";
        private const string NoUtf8Value = "no.utf-8";
        private const string PlValue = "pl";
        private const string PlUtf8Value = "pl.utf-8";
        private const string PtValue = "pt";
        private const string PtUtf8Value = "pt.utf-8";
        private const string CValue = "c";
        private const string RoValue = "ro";
        private const string RoUtf8Value = "ro.utf-8";
        private const string RuValue = "ru";
        private const string RuUtf8Value = "ru.utf-8";
        private const string ZhValue = "zh";
        private const string ZhUtf8Value = "zh.utf-8";
        private const string ZhGbkValue = "zh.gbk";
        private const string ZhGbkUtf8Value = "zh.gbk.utf-8";
        private const string ZhTwBig5Value = "zh-tw.big5";
        private const string ZhTwBig5Utf8Value = "zh-tw.big5.utf-8";
        private const string ZhTwValue = "zh-tw";
        private const string ZhTwUtf8Value = "zh-tw.utf-8";
        private const string SkValue = "sk";
        private const string SkUtf8Value = "sk.utf-8";
        private const string SlValue = "sl";
        private const string SlUtf8Value = "sl.utf-8";
        private const string EsValue = "es";
        private const string EsUtf8Value = "es.utf-8";
        private const string SvValue = "sv";
        private const string SvUtf8Value = "sv.utf-8";
        private const string TrValue = "tr";
        private const string TrUtf8Value = "tr.utf-8";
        private const string EnUsValue = "en-us";
        private const string EnUsUtf8Value = "en-us.utf-8";

        /// <summary> Posix with UTF-8. </summary>
        public static NetAppVolumeLanguage CUtf8 { get; } = new NetAppVolumeLanguage(CUtf8Value);
        /// <summary> UTF-8 with 4 byte character support. </summary>
        public static NetAppVolumeLanguage Utf8Mb4 { get; } = new NetAppVolumeLanguage(Utf8Mb4Value);
        /// <summary> Arabic - Deprecated. </summary>
        public static NetAppVolumeLanguage Ar { get; } = new NetAppVolumeLanguage(ArValue);
        /// <summary> Arabic with UTF-8. </summary>
        public static NetAppVolumeLanguage ArUtf8 { get; } = new NetAppVolumeLanguage(ArUtf8Value);
        /// <summary> Croatian - Deprecated. </summary>
        public static NetAppVolumeLanguage Hr { get; } = new NetAppVolumeLanguage(HrValue);
        /// <summary> Croatian with UTF-8. </summary>
        public static NetAppVolumeLanguage HrUtf8 { get; } = new NetAppVolumeLanguage(HrUtf8Value);
        /// <summary> Czech - Deprecated. </summary>
        public static NetAppVolumeLanguage Cs { get; } = new NetAppVolumeLanguage(CsValue);
        /// <summary> Czech with UTF-8. </summary>
        public static NetAppVolumeLanguage CsUtf8 { get; } = new NetAppVolumeLanguage(CsUtf8Value);
        /// <summary> Danish - Deprecated. </summary>
        public static NetAppVolumeLanguage Da { get; } = new NetAppVolumeLanguage(DaValue);
        /// <summary> Danish with UTF-8. </summary>
        public static NetAppVolumeLanguage DaUtf8 { get; } = new NetAppVolumeLanguage(DaUtf8Value);
        /// <summary> Dutch - Deprecated. </summary>
        public static NetAppVolumeLanguage Nl { get; } = new NetAppVolumeLanguage(NlValue);
        /// <summary> Dutch with UTF-8. </summary>
        public static NetAppVolumeLanguage NlUtf8 { get; } = new NetAppVolumeLanguage(NlUtf8Value);
        /// <summary> English - Deprecated. </summary>
        public static NetAppVolumeLanguage En { get; } = new NetAppVolumeLanguage(EnValue);
        /// <summary> English with UTF-8. </summary>
        public static NetAppVolumeLanguage EnUtf8 { get; } = new NetAppVolumeLanguage(EnUtf8Value);
        /// <summary> Finnish - Deprecated. </summary>
        public static NetAppVolumeLanguage Fi { get; } = new NetAppVolumeLanguage(FiValue);
        /// <summary> Finnish with UTF-8. </summary>
        public static NetAppVolumeLanguage FiUtf8 { get; } = new NetAppVolumeLanguage(FiUtf8Value);
        /// <summary> French - Deprecated. </summary>
        public static NetAppVolumeLanguage Fr { get; } = new NetAppVolumeLanguage(FrValue);
        /// <summary> French with UTF-8. </summary>
        public static NetAppVolumeLanguage FrUtf8 { get; } = new NetAppVolumeLanguage(FrUtf8Value);
        /// <summary> German - Deprecated. </summary>
        public static NetAppVolumeLanguage De { get; } = new NetAppVolumeLanguage(DeValue);
        /// <summary> German with UTF-8. </summary>
        public static NetAppVolumeLanguage DeUtf8 { get; } = new NetAppVolumeLanguage(DeUtf8Value);
        /// <summary> Hebrew - Deprecated. </summary>
        public static NetAppVolumeLanguage He { get; } = new NetAppVolumeLanguage(HeValue);
        /// <summary> Hebrew with UTF-8. </summary>
        public static NetAppVolumeLanguage HeUtf8 { get; } = new NetAppVolumeLanguage(HeUtf8Value);
        /// <summary> Hungarian - Deprecated. </summary>
        public static NetAppVolumeLanguage Hu { get; } = new NetAppVolumeLanguage(HuValue);
        /// <summary> Hungarian with UTF-8. </summary>
        public static NetAppVolumeLanguage HuUtf8 { get; } = new NetAppVolumeLanguage(HuUtf8Value);
        /// <summary> Italian - Deprecated. </summary>
        public static NetAppVolumeLanguage It { get; } = new NetAppVolumeLanguage(ItValue);
        /// <summary> Italian with UTF-8. </summary>
        public static NetAppVolumeLanguage ItUtf8 { get; } = new NetAppVolumeLanguage(ItUtf8Value);
        /// <summary> Japanese euc-j - Deprecated. </summary>
        public static NetAppVolumeLanguage Ja { get; } = new NetAppVolumeLanguage(JaValue);
        /// <summary> Japanese euc-j with UTF-8. </summary>
        public static NetAppVolumeLanguage JaUtf8 { get; } = new NetAppVolumeLanguage(JaUtf8Value);
        /// <summary> Japanese euc-j - Deprecated. </summary>
        public static NetAppVolumeLanguage JaV1 { get; } = new NetAppVolumeLanguage(JaV1Value);
        /// <summary> Japanese euc-j with UTF-8. </summary>
        public static NetAppVolumeLanguage JaV1Utf8 { get; } = new NetAppVolumeLanguage(JaV1Utf8Value);
        /// <summary> Japanese pck. </summary>
        public static NetAppVolumeLanguage JaJpPck { get; } = new NetAppVolumeLanguage(JaJpPckValue);
        /// <summary> Japanese pck with UTF-8 - Deprecated. </summary>
        public static NetAppVolumeLanguage JaJpPckUtf8 { get; } = new NetAppVolumeLanguage(JaJpPckUtf8Value);
        /// <summary> Japanese cp932. </summary>
        public static NetAppVolumeLanguage JaJp932 { get; } = new NetAppVolumeLanguage(JaJp932Value);
        /// <summary> Japanese cp932 with UTF-8 - Deprecated. </summary>
        public static NetAppVolumeLanguage JaJp932Utf8 { get; } = new NetAppVolumeLanguage(JaJp932Utf8Value);
        /// <summary> Japanese pck - sjis. </summary>
        public static NetAppVolumeLanguage JaJpPckV2 { get; } = new NetAppVolumeLanguage(JaJpPckV2Value);
        /// <summary> Japanese pck - sjis with UTF-8 - Deprecated. </summary>
        public static NetAppVolumeLanguage JaJpPckV2Utf8 { get; } = new NetAppVolumeLanguage(JaJpPckV2Utf8Value);
        /// <summary> Korean - Deprecated. </summary>
        public static NetAppVolumeLanguage Ko { get; } = new NetAppVolumeLanguage(KoValue);
        /// <summary> Korean with UTF-8. </summary>
        public static NetAppVolumeLanguage KoUtf8 { get; } = new NetAppVolumeLanguage(KoUtf8Value);
        /// <summary> Norwegian - Deprecated. </summary>
        public static NetAppVolumeLanguage No { get; } = new NetAppVolumeLanguage(NoValue);
        /// <summary> Norwegian with UTF-8. </summary>
        public static NetAppVolumeLanguage NoUtf8 { get; } = new NetAppVolumeLanguage(NoUtf8Value);
        /// <summary> Polish - Deprecated. </summary>
        public static NetAppVolumeLanguage Pl { get; } = new NetAppVolumeLanguage(PlValue);
        /// <summary> Polish with UTF-8. </summary>
        public static NetAppVolumeLanguage PlUtf8 { get; } = new NetAppVolumeLanguage(PlUtf8Value);
        /// <summary> Portuguese - Deprecated. </summary>
        public static NetAppVolumeLanguage Pt { get; } = new NetAppVolumeLanguage(PtValue);
        /// <summary> Portuguese with UTF-8. </summary>
        public static NetAppVolumeLanguage PtUtf8 { get; } = new NetAppVolumeLanguage(PtUtf8Value);
        /// <summary> Posix - Deprecated. </summary>
        public static NetAppVolumeLanguage C { get; } = new NetAppVolumeLanguage(CValue);
        /// <summary> Romanian - Deprecated. </summary>
        public static NetAppVolumeLanguage Ro { get; } = new NetAppVolumeLanguage(RoValue);
        /// <summary> Romanian with UTF-8. </summary>
        public static NetAppVolumeLanguage RoUtf8 { get; } = new NetAppVolumeLanguage(RoUtf8Value);
        /// <summary> Russian - Deprecated. </summary>
        public static NetAppVolumeLanguage Ru { get; } = new NetAppVolumeLanguage(RuValue);
        /// <summary> Russian with UTF-8. </summary>
        public static NetAppVolumeLanguage RuUtf8 { get; } = new NetAppVolumeLanguage(RuUtf8Value);
        /// <summary> Simplified Chinese - Deprecated. </summary>
        public static NetAppVolumeLanguage Zh { get; } = new NetAppVolumeLanguage(ZhValue);
        /// <summary> Simplified Chinese with UTF-8. </summary>
        public static NetAppVolumeLanguage ZhUtf8 { get; } = new NetAppVolumeLanguage(ZhUtf8Value);
        /// <summary> Simplified gbk Chinese. </summary>
        public static NetAppVolumeLanguage ZhGbk { get; } = new NetAppVolumeLanguage(ZhGbkValue);
        /// <summary> Simplified gbk Chinese with UTF-8 - Deprecated. </summary>
        public static NetAppVolumeLanguage ZhGbkUtf8 { get; } = new NetAppVolumeLanguage(ZhGbkUtf8Value);
        /// <summary> Traditional Chinese BIG 5. </summary>
        public static NetAppVolumeLanguage ZhTwBig5 { get; } = new NetAppVolumeLanguage(ZhTwBig5Value);
        /// <summary> Traditional Chinese BIG 5 with UTF-8 - Deprecated. </summary>
        public static NetAppVolumeLanguage ZhTwBig5Utf8 { get; } = new NetAppVolumeLanguage(ZhTwBig5Utf8Value);
        /// <summary> Traditional Chinese EUC-TW. </summary>
        public static NetAppVolumeLanguage ZhTw { get; } = new NetAppVolumeLanguage(ZhTwValue);
        /// <summary> Traditional Chinese EUC-TW with UTF-8 - Deprecated. </summary>
        public static NetAppVolumeLanguage ZhTwUtf8 { get; } = new NetAppVolumeLanguage(ZhTwUtf8Value);
        /// <summary> Slovak - Deprecated. </summary>
        public static NetAppVolumeLanguage Sk { get; } = new NetAppVolumeLanguage(SkValue);
        /// <summary> Slovak with UTF-8. </summary>
        public static NetAppVolumeLanguage SkUtf8 { get; } = new NetAppVolumeLanguage(SkUtf8Value);
        /// <summary> Slovenian - Deprecated. </summary>
        public static NetAppVolumeLanguage Sl { get; } = new NetAppVolumeLanguage(SlValue);
        /// <summary> Slovenian with UTF-8. </summary>
        public static NetAppVolumeLanguage SlUtf8 { get; } = new NetAppVolumeLanguage(SlUtf8Value);
        /// <summary> Spanish - Deprecated. </summary>
        public static NetAppVolumeLanguage Es { get; } = new NetAppVolumeLanguage(EsValue);
        /// <summary> Spanish with UTF-8. </summary>
        public static NetAppVolumeLanguage EsUtf8 { get; } = new NetAppVolumeLanguage(EsUtf8Value);
        /// <summary> Swedish - Deprecated. </summary>
        public static NetAppVolumeLanguage Sv { get; } = new NetAppVolumeLanguage(SvValue);
        /// <summary> Swedish with UTF-8. </summary>
        public static NetAppVolumeLanguage SvUtf8 { get; } = new NetAppVolumeLanguage(SvUtf8Value);
        /// <summary> Turkish - Deprecated. </summary>
        public static NetAppVolumeLanguage Tr { get; } = new NetAppVolumeLanguage(TrValue);
        /// <summary> Turkish with UTF-8. </summary>
        public static NetAppVolumeLanguage TrUtf8 { get; } = new NetAppVolumeLanguage(TrUtf8Value);
        /// <summary> US English - Deprecated. </summary>
        public static NetAppVolumeLanguage EnUs { get; } = new NetAppVolumeLanguage(EnUsValue);
        /// <summary> US English with UTF-8. </summary>
        public static NetAppVolumeLanguage EnUsUtf8 { get; } = new NetAppVolumeLanguage(EnUsUtf8Value);
        /// <summary> Determines if two <see cref="NetAppVolumeLanguage"/> values are the same. </summary>
        public static bool operator ==(NetAppVolumeLanguage left, NetAppVolumeLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NetAppVolumeLanguage"/> values are not the same. </summary>
        public static bool operator !=(NetAppVolumeLanguage left, NetAppVolumeLanguage right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="NetAppVolumeLanguage"/>. </summary>
        public static implicit operator NetAppVolumeLanguage(string value) => new NetAppVolumeLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NetAppVolumeLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NetAppVolumeLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
