// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary>
    /// Bucket resource
    /// Serialized Name: BucketPatch
    /// </summary>
    public partial class NetAppBucketPatch : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetAppBucketPatch"/>. </summary>
        public NetAppBucketPatch()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NetAppBucketPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="path">
        /// The volume path mounted inside the bucket.
        /// Serialized Name: BucketPatch.properties.path
        /// </param>
        /// <param name="fileSystemUser">
        /// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
        /// Serialized Name: BucketPatch.properties.fileSystemUser
        /// </param>
        /// <param name="provisioningState">
        /// Provisioning state of the resource
        /// Serialized Name: BucketPatch.properties.provisioningState
        /// </param>
        /// <param name="server">
        /// Properties of the server managing the lifecycle of volume buckets
        /// Serialized Name: BucketPatch.properties.server
        /// </param>
        /// <param name="permissions">
        /// Access permissions for the bucket. Either ReadOnly or ReadWrite.
        /// Serialized Name: BucketPatch.properties.permissions
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetAppBucketPatch(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string path, BucketFileSystemUser fileSystemUser, NetAppProvisioningState? provisioningState, NetAppBucketServerPatchProperties server, NetAppBucketPatchPermission? permissions, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Path = path;
            FileSystemUser = fileSystemUser;
            ProvisioningState = provisioningState;
            Server = server;
            Permissions = permissions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The volume path mounted inside the bucket.
        /// Serialized Name: BucketPatch.properties.path
        /// </summary>
        public string Path { get; set; }
        /// <summary>
        /// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
        /// Serialized Name: BucketPatch.properties.fileSystemUser
        /// </summary>
        public BucketFileSystemUser FileSystemUser { get; set; }
        /// <summary>
        /// Provisioning state of the resource
        /// Serialized Name: BucketPatch.properties.provisioningState
        /// </summary>
        public NetAppProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// Properties of the server managing the lifecycle of volume buckets
        /// Serialized Name: BucketPatch.properties.server
        /// </summary>
        public NetAppBucketServerPatchProperties Server { get; set; }
        /// <summary>
        /// Access permissions for the bucket. Either ReadOnly or ReadWrite.
        /// Serialized Name: BucketPatch.properties.permissions
        /// </summary>
        public NetAppBucketPatchPermission? Permissions { get; set; }
    }
}
