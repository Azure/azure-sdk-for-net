// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary> Encryption transition request. </summary>
    public partial class NetAppEncryptionTransitionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetAppEncryptionTransitionContent"/>. </summary>
        /// <param name="virtualNetworkId"> Identifier for the virtual network. </param>
        /// <param name="privateEndpointId"> Identifier of the private endpoint to reach the Azure Key Vault. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualNetworkId"/> or <paramref name="privateEndpointId"/> is null. </exception>
        public NetAppEncryptionTransitionContent(ResourceIdentifier virtualNetworkId, ResourceIdentifier privateEndpointId)
        {
            Argument.AssertNotNull(virtualNetworkId, nameof(virtualNetworkId));
            Argument.AssertNotNull(privateEndpointId, nameof(privateEndpointId));

            VirtualNetworkId = virtualNetworkId;
            PrivateEndpointId = privateEndpointId;
        }

        /// <summary> Initializes a new instance of <see cref="NetAppEncryptionTransitionContent"/>. </summary>
        /// <param name="virtualNetworkId"> Identifier for the virtual network. </param>
        /// <param name="privateEndpointId"> Identifier of the private endpoint to reach the Azure Key Vault. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetAppEncryptionTransitionContent(ResourceIdentifier virtualNetworkId, ResourceIdentifier privateEndpointId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            VirtualNetworkId = virtualNetworkId;
            PrivateEndpointId = privateEndpointId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NetAppEncryptionTransitionContent"/> for deserialization. </summary>
        internal NetAppEncryptionTransitionContent()
        {
        }

        /// <summary> Identifier for the virtual network. </summary>
        public ResourceIdentifier VirtualNetworkId { get; }
        /// <summary> Identifier of the private endpoint to reach the Azure Key Vault. </summary>
        public ResourceIdentifier PrivateEndpointId { get; }
    }
}
