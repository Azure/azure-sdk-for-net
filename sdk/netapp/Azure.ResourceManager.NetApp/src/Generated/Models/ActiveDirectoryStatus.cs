// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary> Status of the Active Directory. </summary>
    public readonly partial struct ActiveDirectoryStatus : IEquatable<ActiveDirectoryStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ActiveDirectoryStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ActiveDirectoryStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "Created";
        private const string InUseValue = "InUse";
        private const string DeletedValue = "Deleted";
        private const string ErrorValue = "Error";
        private const string UpdatingValue = "Updating";

        /// <summary> Active Directory created but not in use. </summary>
        public static ActiveDirectoryStatus Created { get; } = new ActiveDirectoryStatus(CreatedValue);
        /// <summary> Active Directory in use by SMB Volume. </summary>
        public static ActiveDirectoryStatus InUse { get; } = new ActiveDirectoryStatus(InUseValue);
        /// <summary> Active Directory Deleted. </summary>
        public static ActiveDirectoryStatus Deleted { get; } = new ActiveDirectoryStatus(DeletedValue);
        /// <summary> Error with the Active Directory. </summary>
        public static ActiveDirectoryStatus Error { get; } = new ActiveDirectoryStatus(ErrorValue);
        /// <summary> Active Directory Updating. </summary>
        public static ActiveDirectoryStatus Updating { get; } = new ActiveDirectoryStatus(UpdatingValue);
        /// <summary> Determines if two <see cref="ActiveDirectoryStatus"/> values are the same. </summary>
        public static bool operator ==(ActiveDirectoryStatus left, ActiveDirectoryStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ActiveDirectoryStatus"/> values are not the same. </summary>
        public static bool operator !=(ActiveDirectoryStatus left, ActiveDirectoryStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ActiveDirectoryStatus"/>. </summary>
        public static implicit operator ActiveDirectoryStatus(string value) => new ActiveDirectoryStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ActiveDirectoryStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ActiveDirectoryStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
