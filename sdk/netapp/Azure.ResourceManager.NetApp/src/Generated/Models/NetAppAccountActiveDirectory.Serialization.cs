// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetApp.Models
{
    public partial class NetAppAccountActiveDirectory : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ActiveDirectoryId))
            {
                if (ActiveDirectoryId != null)
                {
                    writer.WritePropertyName("activeDirectoryId"u8);
                    writer.WriteStringValue(ActiveDirectoryId);
                }
                else
                {
                    writer.WriteNull("activeDirectoryId");
                }
            }
            if (Core.Optional.IsDefined(Username))
            {
                writer.WritePropertyName("username"u8);
                writer.WriteStringValue(Username);
            }
            if (Core.Optional.IsDefined(Password))
            {
                writer.WritePropertyName("password"u8);
                writer.WriteStringValue(Password);
            }
            if (Core.Optional.IsDefined(Domain))
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
            if (Core.Optional.IsDefined(Dns))
            {
                writer.WritePropertyName("dns"u8);
                writer.WriteStringValue(Dns);
            }
            if (Core.Optional.IsDefined(SmbServerName))
            {
                writer.WritePropertyName("smbServerName"u8);
                writer.WriteStringValue(SmbServerName);
            }
            if (Core.Optional.IsDefined(OrganizationalUnit))
            {
                writer.WritePropertyName("organizationalUnit"u8);
                writer.WriteStringValue(OrganizationalUnit);
            }
            if (Core.Optional.IsDefined(Site))
            {
                writer.WritePropertyName("site"u8);
                writer.WriteStringValue(Site);
            }
            if (Core.Optional.IsCollectionDefined(BackupOperators))
            {
                writer.WritePropertyName("backupOperators"u8);
                writer.WriteStartArray();
                foreach (var item in BackupOperators)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(Administrators))
            {
                writer.WritePropertyName("administrators"u8);
                writer.WriteStartArray();
                foreach (var item in Administrators)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(KdcIP))
            {
                writer.WritePropertyName("kdcIP"u8);
                writer.WriteStringValue(KdcIP.ToString());
            }
            if (Core.Optional.IsDefined(AdName))
            {
                writer.WritePropertyName("adName"u8);
                writer.WriteStringValue(AdName);
            }
            if (Core.Optional.IsDefined(ServerRootCACertificate))
            {
                writer.WritePropertyName("serverRootCACertificate"u8);
                writer.WriteStringValue(ServerRootCACertificate);
            }
            if (Core.Optional.IsDefined(IsAesEncryptionEnabled))
            {
                writer.WritePropertyName("aesEncryption"u8);
                writer.WriteBooleanValue(IsAesEncryptionEnabled.Value);
            }
            if (Core.Optional.IsDefined(IsLdapSigningEnabled))
            {
                writer.WritePropertyName("ldapSigning"u8);
                writer.WriteBooleanValue(IsLdapSigningEnabled.Value);
            }
            if (Core.Optional.IsCollectionDefined(SecurityOperators))
            {
                writer.WritePropertyName("securityOperators"u8);
                writer.WriteStartArray();
                foreach (var item in SecurityOperators)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(IsLdapOverTlsEnabled))
            {
                writer.WritePropertyName("ldapOverTLS"u8);
                writer.WriteBooleanValue(IsLdapOverTlsEnabled.Value);
            }
            if (Core.Optional.IsDefined(AllowLocalNfsUsersWithLdap))
            {
                writer.WritePropertyName("allowLocalNfsUsersWithLdap"u8);
                writer.WriteBooleanValue(AllowLocalNfsUsersWithLdap.Value);
            }
            if (Core.Optional.IsDefined(EncryptDCConnections))
            {
                writer.WritePropertyName("encryptDCConnections"u8);
                writer.WriteBooleanValue(EncryptDCConnections.Value);
            }
            if (Core.Optional.IsDefined(LdapSearchScope))
            {
                writer.WritePropertyName("ldapSearchScope"u8);
                writer.WriteObjectValue(LdapSearchScope);
            }
            if (Core.Optional.IsDefined(PreferredServersForLdapClient))
            {
                writer.WritePropertyName("preferredServersForLdapClient"u8);
                writer.WriteStringValue(PreferredServersForLdapClient);
            }
            writer.WriteEndObject();
        }

        internal static NetAppAccountActiveDirectory DeserializeNetAppAccountActiveDirectory(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> activeDirectoryId = default;
            Core.Optional<string> username = default;
            Core.Optional<string> password = default;
            Core.Optional<string> domain = default;
            Core.Optional<string> dns = default;
            Core.Optional<NetAppAccountActiveDirectoryStatus> status = default;
            Core.Optional<string> statusDetails = default;
            Core.Optional<string> smbServerName = default;
            Core.Optional<string> organizationalUnit = default;
            Core.Optional<string> site = default;
            Core.Optional<IList<string>> backupOperators = default;
            Core.Optional<IList<string>> administrators = default;
            Core.Optional<IPAddress> kdcIP = default;
            Core.Optional<string> adName = default;
            Core.Optional<string> serverRootCACertificate = default;
            Core.Optional<bool> aesEncryption = default;
            Core.Optional<bool> ldapSigning = default;
            Core.Optional<IList<string>> securityOperators = default;
            Core.Optional<bool> ldapOverTls = default;
            Core.Optional<bool> allowLocalNfsUsersWithLdap = default;
            Core.Optional<bool> encryptDCConnections = default;
            Core.Optional<NetAppLdapSearchScopeConfiguration> ldapSearchScope = default;
            Core.Optional<string> preferredServersForLdapClient = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("activeDirectoryId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        activeDirectoryId = null;
                        continue;
                    }
                    activeDirectoryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("username"u8))
                {
                    username = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("password"u8))
                {
                    password = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domain"u8))
                {
                    domain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dns"u8))
                {
                    dns = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new NetAppAccountActiveDirectoryStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("statusDetails"u8))
                {
                    statusDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("smbServerName"u8))
                {
                    smbServerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationalUnit"u8))
                {
                    organizationalUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("site"u8))
                {
                    site = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backupOperators"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    backupOperators = array;
                    continue;
                }
                if (property.NameEquals("administrators"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    administrators = array;
                    continue;
                }
                if (property.NameEquals("kdcIP"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kdcIP = IPAddress.Parse(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("adName"u8))
                {
                    adName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverRootCACertificate"u8))
                {
                    serverRootCACertificate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aesEncryption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    aesEncryption = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ldapSigning"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ldapSigning = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("securityOperators"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    securityOperators = array;
                    continue;
                }
                if (property.NameEquals("ldapOverTLS"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ldapOverTls = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("allowLocalNfsUsersWithLdap"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowLocalNfsUsersWithLdap = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("encryptDCConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    encryptDCConnections = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ldapSearchScope"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ldapSearchScope = NetAppLdapSearchScopeConfiguration.DeserializeNetAppLdapSearchScopeConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("preferredServersForLdapClient"u8))
                {
                    preferredServersForLdapClient = property.Value.GetString();
                    continue;
                }
            }
            return new NetAppAccountActiveDirectory(activeDirectoryId.Value, username.Value, password.Value, domain.Value, dns.Value, Core.Optional.ToNullable(status), statusDetails.Value, smbServerName.Value, organizationalUnit.Value, site.Value, Core.Optional.ToList(backupOperators), Core.Optional.ToList(administrators), kdcIP.Value, adName.Value, serverRootCACertificate.Value, Core.Optional.ToNullable(aesEncryption), Core.Optional.ToNullable(ldapSigning), Core.Optional.ToList(securityOperators), Core.Optional.ToNullable(ldapOverTls), Core.Optional.ToNullable(allowLocalNfsUsersWithLdap), Core.Optional.ToNullable(encryptDCConnections), ldapSearchScope.Value, preferredServersForLdapClient.Value);
        }
    }
}
