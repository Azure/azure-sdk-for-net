// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary> Language supported for volume. </summary>
    public readonly partial struct VolumeLanguage : IEquatable<VolumeLanguage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VolumeLanguage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VolumeLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CUtf8Value = "c.utf-8";
        private const string Utf8Mb4Value = "utf8mb4";
        private const string ArValue = "ar";
        private const string ArUtf8Value = "ar.utf-8";
        private const string HrValue = "hr";
        private const string HrUtf8Value = "hr.utf-8";
        private const string CsValue = "cs";
        private const string CsUtf8Value = "cs.utf-8";
        private const string DaValue = "da";
        private const string DaUtf8Value = "da.utf-8";
        private const string NlValue = "nl";
        private const string NlUtf8Value = "nl.utf-8";
        private const string EnValue = "en";
        private const string EnUtf8Value = "en.utf-8";
        private const string FiValue = "fi";
        private const string FiUtf8Value = "fi.utf-8";
        private const string FrValue = "fr";
        private const string FrUtf8Value = "fr.utf-8";
        private const string DeValue = "de";
        private const string DeUtf8Value = "de.utf-8";
        private const string HeValue = "he";
        private const string HeUtf8Value = "he.utf-8";
        private const string HuValue = "hu";
        private const string HuUtf8Value = "hu.utf-8";
        private const string ItValue = "it";
        private const string ItUtf8Value = "it.utf-8";
        private const string JaValue = "ja";
        private const string JaUtf8Value = "ja.utf-8";
        private const string JaV1Value = "ja-v1";
        private const string JaV1Utf8Value = "ja-v1.utf-8";
        private const string JaJpPckValue = "ja-jp.pck";
        private const string JaJpPckUtf8Value = "ja-jp.pck.utf-8";
        private const string JaJp932Value = "ja-jp.932";
        private const string JaJp932Utf8Value = "ja-jp.932.utf-8";
        private const string JaJpPckV2Value = "ja-jp.pck-v2";
        private const string JaJpPckV2Utf8Value = "ja-jp.pck-v2.utf-8";
        private const string KoValue = "ko";
        private const string KoUtf8Value = "ko.utf-8";
        private const string NoValue = "no";
        private const string NoUtf8Value = "no.utf-8";
        private const string PlValue = "pl";
        private const string PlUtf8Value = "pl.utf-8";
        private const string PtValue = "pt";
        private const string PtUtf8Value = "pt.utf-8";
        private const string CValue = "c";
        private const string RoValue = "ro";
        private const string RoUtf8Value = "ro.utf-8";
        private const string RuValue = "ru";
        private const string RuUtf8Value = "ru.utf-8";
        private const string ZhValue = "zh";
        private const string ZhUtf8Value = "zh.utf-8";
        private const string ZhGbkValue = "zh.gbk";
        private const string ZhGbkUtf8Value = "zh.gbk.utf-8";
        private const string ZhTwBig5Value = "zh-tw.big5";
        private const string ZhTwBig5Utf8Value = "zh-tw.big5.utf-8";
        private const string ZhTwValue = "zh-tw";
        private const string ZhTwUtf8Value = "zh-tw.utf-8";
        private const string SkValue = "sk";
        private const string SkUtf8Value = "sk.utf-8";
        private const string SlValue = "sl";
        private const string SlUtf8Value = "sl.utf-8";
        private const string EsValue = "es";
        private const string EsUtf8Value = "es.utf-8";
        private const string SvValue = "sv";
        private const string SvUtf8Value = "sv.utf-8";
        private const string TrValue = "tr";
        private const string TrUtf8Value = "tr.utf-8";
        private const string EnUsValue = "en-us";
        private const string EnUsUtf8Value = "en-us.utf-8";

        /// <summary> Posix with UTF-8. </summary>
        public static VolumeLanguage CUtf8 { get; } = new VolumeLanguage(CUtf8Value);
        /// <summary> UTF-8 with 4 byte character support. </summary>
        public static VolumeLanguage Utf8Mb4 { get; } = new VolumeLanguage(Utf8Mb4Value);
        /// <summary> Arabic - Deprecated. </summary>
        public static VolumeLanguage Ar { get; } = new VolumeLanguage(ArValue);
        /// <summary> Arabic with UTF-8. </summary>
        public static VolumeLanguage ArUtf8 { get; } = new VolumeLanguage(ArUtf8Value);
        /// <summary> Croatian - Deprecated. </summary>
        public static VolumeLanguage Hr { get; } = new VolumeLanguage(HrValue);
        /// <summary> Croatian with UTF-8. </summary>
        public static VolumeLanguage HrUtf8 { get; } = new VolumeLanguage(HrUtf8Value);
        /// <summary> Czech - Deprecated. </summary>
        public static VolumeLanguage Cs { get; } = new VolumeLanguage(CsValue);
        /// <summary> Czech with UTF-8. </summary>
        public static VolumeLanguage CsUtf8 { get; } = new VolumeLanguage(CsUtf8Value);
        /// <summary> Danish - Deprecated. </summary>
        public static VolumeLanguage Da { get; } = new VolumeLanguage(DaValue);
        /// <summary> Danish with UTF-8. </summary>
        public static VolumeLanguage DaUtf8 { get; } = new VolumeLanguage(DaUtf8Value);
        /// <summary> Dutch - Deprecated. </summary>
        public static VolumeLanguage Nl { get; } = new VolumeLanguage(NlValue);
        /// <summary> Dutch with UTF-8. </summary>
        public static VolumeLanguage NlUtf8 { get; } = new VolumeLanguage(NlUtf8Value);
        /// <summary> English - Deprecated. </summary>
        public static VolumeLanguage En { get; } = new VolumeLanguage(EnValue);
        /// <summary> English with UTF-8. </summary>
        public static VolumeLanguage EnUtf8 { get; } = new VolumeLanguage(EnUtf8Value);
        /// <summary> Finnish - Deprecated. </summary>
        public static VolumeLanguage Fi { get; } = new VolumeLanguage(FiValue);
        /// <summary> Finnish with UTF-8. </summary>
        public static VolumeLanguage FiUtf8 { get; } = new VolumeLanguage(FiUtf8Value);
        /// <summary> French - Deprecated. </summary>
        public static VolumeLanguage Fr { get; } = new VolumeLanguage(FrValue);
        /// <summary> French with UTF-8. </summary>
        public static VolumeLanguage FrUtf8 { get; } = new VolumeLanguage(FrUtf8Value);
        /// <summary> German - Deprecated. </summary>
        public static VolumeLanguage De { get; } = new VolumeLanguage(DeValue);
        /// <summary> German with UTF-8. </summary>
        public static VolumeLanguage DeUtf8 { get; } = new VolumeLanguage(DeUtf8Value);
        /// <summary> Hebrew - Deprecated. </summary>
        public static VolumeLanguage He { get; } = new VolumeLanguage(HeValue);
        /// <summary> Hebrew with UTF-8. </summary>
        public static VolumeLanguage HeUtf8 { get; } = new VolumeLanguage(HeUtf8Value);
        /// <summary> Hungarian - Deprecated. </summary>
        public static VolumeLanguage Hu { get; } = new VolumeLanguage(HuValue);
        /// <summary> Hungarian with UTF-8. </summary>
        public static VolumeLanguage HuUtf8 { get; } = new VolumeLanguage(HuUtf8Value);
        /// <summary> Italian - Deprecated. </summary>
        public static VolumeLanguage It { get; } = new VolumeLanguage(ItValue);
        /// <summary> Italian with UTF-8. </summary>
        public static VolumeLanguage ItUtf8 { get; } = new VolumeLanguage(ItUtf8Value);
        /// <summary> Japanese euc-j - Deprecated. </summary>
        public static VolumeLanguage Ja { get; } = new VolumeLanguage(JaValue);
        /// <summary> Japanese euc-j with UTF-8. </summary>
        public static VolumeLanguage JaUtf8 { get; } = new VolumeLanguage(JaUtf8Value);
        /// <summary> Japanese euc-j - Deprecated. </summary>
        public static VolumeLanguage JaV1 { get; } = new VolumeLanguage(JaV1Value);
        /// <summary> Japanese euc-j with UTF-8. </summary>
        public static VolumeLanguage JaV1Utf8 { get; } = new VolumeLanguage(JaV1Utf8Value);
        /// <summary> Japanese pck. </summary>
        public static VolumeLanguage JaJpPck { get; } = new VolumeLanguage(JaJpPckValue);
        /// <summary> Japanese pck with UTF-8 - Deprecated. </summary>
        public static VolumeLanguage JaJpPckUtf8 { get; } = new VolumeLanguage(JaJpPckUtf8Value);
        /// <summary> Japanese cp932. </summary>
        public static VolumeLanguage JaJp932 { get; } = new VolumeLanguage(JaJp932Value);
        /// <summary> Japanese cp932 with UTF-8 - Deprecated. </summary>
        public static VolumeLanguage JaJp932Utf8 { get; } = new VolumeLanguage(JaJp932Utf8Value);
        /// <summary> Japanese pck - sjis. </summary>
        public static VolumeLanguage JaJpPckV2 { get; } = new VolumeLanguage(JaJpPckV2Value);
        /// <summary> Japanese pck - sjis with UTF-8 - Deprecated. </summary>
        public static VolumeLanguage JaJpPckV2Utf8 { get; } = new VolumeLanguage(JaJpPckV2Utf8Value);
        /// <summary> Korean - Deprecated. </summary>
        public static VolumeLanguage Ko { get; } = new VolumeLanguage(KoValue);
        /// <summary> Korean with UTF-8. </summary>
        public static VolumeLanguage KoUtf8 { get; } = new VolumeLanguage(KoUtf8Value);
        /// <summary> Norwegian - Deprecated. </summary>
        public static VolumeLanguage No { get; } = new VolumeLanguage(NoValue);
        /// <summary> Norwegian with UTF-8. </summary>
        public static VolumeLanguage NoUtf8 { get; } = new VolumeLanguage(NoUtf8Value);
        /// <summary> Polish - Deprecated. </summary>
        public static VolumeLanguage Pl { get; } = new VolumeLanguage(PlValue);
        /// <summary> Polish with UTF-8. </summary>
        public static VolumeLanguage PlUtf8 { get; } = new VolumeLanguage(PlUtf8Value);
        /// <summary> Portuguese - Deprecated. </summary>
        public static VolumeLanguage Pt { get; } = new VolumeLanguage(PtValue);
        /// <summary> Portuguese with UTF-8. </summary>
        public static VolumeLanguage PtUtf8 { get; } = new VolumeLanguage(PtUtf8Value);
        /// <summary> Posix - Deprecated. </summary>
        public static VolumeLanguage C { get; } = new VolumeLanguage(CValue);
        /// <summary> Romanian - Deprecated. </summary>
        public static VolumeLanguage Ro { get; } = new VolumeLanguage(RoValue);
        /// <summary> Romanian with UTF-8. </summary>
        public static VolumeLanguage RoUtf8 { get; } = new VolumeLanguage(RoUtf8Value);
        /// <summary> Russian - Deprecated. </summary>
        public static VolumeLanguage Ru { get; } = new VolumeLanguage(RuValue);
        /// <summary> Russian with UTF-8. </summary>
        public static VolumeLanguage RuUtf8 { get; } = new VolumeLanguage(RuUtf8Value);
        /// <summary> Simplified Chinese - Deprecated. </summary>
        public static VolumeLanguage Zh { get; } = new VolumeLanguage(ZhValue);
        /// <summary> Simplified Chinese with UTF-8. </summary>
        public static VolumeLanguage ZhUtf8 { get; } = new VolumeLanguage(ZhUtf8Value);
        /// <summary> Simplified gbk Chinese. </summary>
        public static VolumeLanguage ZhGbk { get; } = new VolumeLanguage(ZhGbkValue);
        /// <summary> Simplified gbk Chinese with UTF-8 - Deprecated. </summary>
        public static VolumeLanguage ZhGbkUtf8 { get; } = new VolumeLanguage(ZhGbkUtf8Value);
        /// <summary> Traditional Chinese BIG 5. </summary>
        public static VolumeLanguage ZhTwBig5 { get; } = new VolumeLanguage(ZhTwBig5Value);
        /// <summary> Traditional Chinese BIG 5 with UTF-8 - Deprecated. </summary>
        public static VolumeLanguage ZhTwBig5Utf8 { get; } = new VolumeLanguage(ZhTwBig5Utf8Value);
        /// <summary> Traditional Chinese EUC-TW. </summary>
        public static VolumeLanguage ZhTw { get; } = new VolumeLanguage(ZhTwValue);
        /// <summary> Traditional Chinese EUC-TW with UTF-8 - Deprecated. </summary>
        public static VolumeLanguage ZhTwUtf8 { get; } = new VolumeLanguage(ZhTwUtf8Value);
        /// <summary> Slovak - Deprecated. </summary>
        public static VolumeLanguage Sk { get; } = new VolumeLanguage(SkValue);
        /// <summary> Slovak with UTF-8. </summary>
        public static VolumeLanguage SkUtf8 { get; } = new VolumeLanguage(SkUtf8Value);
        /// <summary> Slovenian - Deprecated. </summary>
        public static VolumeLanguage Sl { get; } = new VolumeLanguage(SlValue);
        /// <summary> Slovenian with UTF-8. </summary>
        public static VolumeLanguage SlUtf8 { get; } = new VolumeLanguage(SlUtf8Value);
        /// <summary> Spanish - Deprecated. </summary>
        public static VolumeLanguage Es { get; } = new VolumeLanguage(EsValue);
        /// <summary> Spanish with UTF-8. </summary>
        public static VolumeLanguage EsUtf8 { get; } = new VolumeLanguage(EsUtf8Value);
        /// <summary> Swedish - Deprecated. </summary>
        public static VolumeLanguage Sv { get; } = new VolumeLanguage(SvValue);
        /// <summary> Swedish with UTF-8. </summary>
        public static VolumeLanguage SvUtf8 { get; } = new VolumeLanguage(SvUtf8Value);
        /// <summary> Turkish - Deprecated. </summary>
        public static VolumeLanguage Tr { get; } = new VolumeLanguage(TrValue);
        /// <summary> Turkish with UTF-8. </summary>
        public static VolumeLanguage TrUtf8 { get; } = new VolumeLanguage(TrUtf8Value);
        /// <summary> US English - Deprecated. </summary>
        public static VolumeLanguage EnUs { get; } = new VolumeLanguage(EnUsValue);
        /// <summary> US English with UTF-8. </summary>
        public static VolumeLanguage EnUsUtf8 { get; } = new VolumeLanguage(EnUsUtf8Value);
        /// <summary> Determines if two <see cref="VolumeLanguage"/> values are the same. </summary>
        public static bool operator ==(VolumeLanguage left, VolumeLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VolumeLanguage"/> values are not the same. </summary>
        public static bool operator !=(VolumeLanguage left, VolumeLanguage right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VolumeLanguage"/>. </summary>
        public static implicit operator VolumeLanguage(string value) => new VolumeLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VolumeLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VolumeLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
