// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary>
    /// Quota report record properties
    /// Serialized Name: QuotaReport
    /// </summary>
    public partial class NetAppVolumeQuotaReport
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetAppVolumeQuotaReport"/>. </summary>
        internal NetAppVolumeQuotaReport()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NetAppVolumeQuotaReport"/>. </summary>
        /// <param name="quotaType">
        /// Type of quota
        /// Serialized Name: QuotaReport.quotaType
        /// </param>
        /// <param name="quotaTarget">
        /// UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount where name='user-name' get sid&gt;
        /// Serialized Name: QuotaReport.quotaTarget
        /// </param>
        /// <param name="quotaLimitUsedInKiBs">
        /// Specifies the current usage in kibibytes for the user/group quota.
        /// Serialized Name: QuotaReport.quotaLimitUsedInKiBs
        /// </param>
        /// <param name="quotaLimitTotalInKiBs">
        /// Specifies the total size limit in kibibytes for the user/group quota.
        /// Serialized Name: QuotaReport.quotaLimitTotalInKiBs
        /// </param>
        /// <param name="percentageUsed">
        /// Percentage of used size compared to total size.
        /// Serialized Name: QuotaReport.percentageUsed
        /// </param>
        /// <param name="isDerivedQuota">
        /// Flag to indicate whether the quota is derived from default quota.
        /// Serialized Name: QuotaReport.isDerivedQuota
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetAppVolumeQuotaReport(NetAppVolumeQuotaType? quotaType, string quotaTarget, long? quotaLimitUsedInKiBs, long? quotaLimitTotalInKiBs, float? percentageUsed, bool? isDerivedQuota, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            QuotaType = quotaType;
            QuotaTarget = quotaTarget;
            QuotaLimitUsedInKiBs = quotaLimitUsedInKiBs;
            QuotaLimitTotalInKiBs = quotaLimitTotalInKiBs;
            PercentageUsed = percentageUsed;
            IsDerivedQuota = isDerivedQuota;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Type of quota
        /// Serialized Name: QuotaReport.quotaType
        /// </summary>
        public NetAppVolumeQuotaType? QuotaType { get; }
        /// <summary>
        /// UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount where name='user-name' get sid&gt;
        /// Serialized Name: QuotaReport.quotaTarget
        /// </summary>
        public string QuotaTarget { get; }
        /// <summary>
        /// Specifies the current usage in kibibytes for the user/group quota.
        /// Serialized Name: QuotaReport.quotaLimitUsedInKiBs
        /// </summary>
        public long? QuotaLimitUsedInKiBs { get; }
        /// <summary>
        /// Specifies the total size limit in kibibytes for the user/group quota.
        /// Serialized Name: QuotaReport.quotaLimitTotalInKiBs
        /// </summary>
        public long? QuotaLimitTotalInKiBs { get; }
        /// <summary>
        /// Percentage of used size compared to total size.
        /// Serialized Name: QuotaReport.percentageUsed
        /// </summary>
        public float? PercentageUsed { get; }
        /// <summary>
        /// Flag to indicate whether the quota is derived from default quota.
        /// Serialized Name: QuotaReport.isDerivedQuota
        /// </summary>
        public bool? IsDerivedQuota { get; }
    }
}
