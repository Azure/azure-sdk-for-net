// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.NetApp.Models
{
    internal static partial class BucketProvisioningStateExtensions
    {
        public static string ToSerialString(this BucketProvisioningState value) => value switch
        {
            BucketProvisioningState.Accepted => "Accepted",
            BucketProvisioningState.Creating => "Creating",
            BucketProvisioningState.Patching => "Patching",
            BucketProvisioningState.Deleting => "Deleting",
            BucketProvisioningState.Moving => "Moving",
            BucketProvisioningState.Failed => "Failed",
            BucketProvisioningState.Succeeded => "Succeeded",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown BucketProvisioningState value.")
        };

        public static BucketProvisioningState ToBucketProvisioningState(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Accepted")) return BucketProvisioningState.Accepted;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Creating")) return BucketProvisioningState.Creating;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Patching")) return BucketProvisioningState.Patching;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Deleting")) return BucketProvisioningState.Deleting;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Moving")) return BucketProvisioningState.Moving;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Failed")) return BucketProvisioningState.Failed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Succeeded")) return BucketProvisioningState.Succeeded;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown BucketProvisioningState value.");
        }
    }
}
