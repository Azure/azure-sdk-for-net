// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetApp.Models
{
    public partial class MonthlySchedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SnapshotsToKeep))
            {
                writer.WritePropertyName("snapshotsToKeep");
                writer.WriteNumberValue(SnapshotsToKeep.Value);
            }
            if (Optional.IsDefined(DaysOfMonth))
            {
                writer.WritePropertyName("daysOfMonth");
                writer.WriteStringValue(DaysOfMonth);
            }
            if (Optional.IsDefined(Hour))
            {
                writer.WritePropertyName("hour");
                writer.WriteNumberValue(Hour.Value);
            }
            if (Optional.IsDefined(Minute))
            {
                writer.WritePropertyName("minute");
                writer.WriteNumberValue(Minute.Value);
            }
            if (Optional.IsDefined(UsedBytes))
            {
                writer.WritePropertyName("usedBytes");
                writer.WriteNumberValue(UsedBytes.Value);
            }
            writer.WriteEndObject();
        }

        internal static MonthlySchedule DeserializeMonthlySchedule(JsonElement element)
        {
            Optional<int> snapshotsToKeep = default;
            Optional<string> daysOfMonth = default;
            Optional<int> hour = default;
            Optional<int> minute = default;
            Optional<long> usedBytes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("snapshotsToKeep"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    snapshotsToKeep = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("daysOfMonth"))
                {
                    daysOfMonth = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hour"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hour = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minute"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minute = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("usedBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    usedBytes = property.Value.GetInt64();
                    continue;
                }
            }
            return new MonthlySchedule(Optional.ToNullable(snapshotsToKeep), daysOfMonth.Value, Optional.ToNullable(hour), Optional.ToNullable(minute), Optional.ToNullable(usedBytes));
        }
    }
}
