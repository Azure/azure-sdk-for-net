// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary>
    /// The bucket credentials status. There states:
    ///
    /// "NoCredentialsSet": Access and Secret key pair have not been generated.
    /// "CredentialsExpired": Access and Secret key pair have expired.
    /// "Active": The certificate has been installed and credentials are unexpired.
    /// </summary>
    public readonly partial struct NetAppBucketCredentialStatus : IEquatable<NetAppBucketCredentialStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NetAppBucketCredentialStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NetAppBucketCredentialStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoCredentialsSetValue = "NoCredentialsSet";
        private const string CredentialsExpiredValue = "CredentialsExpired";
        private const string ActiveValue = "Active";

        /// <summary> Access and Secret key pair have not been generated. </summary>
        public static NetAppBucketCredentialStatus NoCredentialsSet { get; } = new NetAppBucketCredentialStatus(NoCredentialsSetValue);
        /// <summary> Access and Secret key pair have expired. </summary>
        public static NetAppBucketCredentialStatus CredentialsExpired { get; } = new NetAppBucketCredentialStatus(CredentialsExpiredValue);
        /// <summary> The certificate has been installed on the bucket server and the bucket credentials are unexpired. </summary>
        public static NetAppBucketCredentialStatus Active { get; } = new NetAppBucketCredentialStatus(ActiveValue);
        /// <summary> Determines if two <see cref="NetAppBucketCredentialStatus"/> values are the same. </summary>
        public static bool operator ==(NetAppBucketCredentialStatus left, NetAppBucketCredentialStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NetAppBucketCredentialStatus"/> values are not the same. </summary>
        public static bool operator !=(NetAppBucketCredentialStatus left, NetAppBucketCredentialStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="NetAppBucketCredentialStatus"/>. </summary>
        public static implicit operator NetAppBucketCredentialStatus(string value) => new NetAppBucketCredentialStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NetAppBucketCredentialStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NetAppBucketCredentialStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
