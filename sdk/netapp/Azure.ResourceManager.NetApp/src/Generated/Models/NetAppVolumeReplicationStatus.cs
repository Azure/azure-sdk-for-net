// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary>
    /// Replication status
    /// Serialized Name: ReplicationStatus
    /// </summary>
    public partial class NetAppVolumeReplicationStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetAppVolumeReplicationStatus"/>. </summary>
        internal NetAppVolumeReplicationStatus()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NetAppVolumeReplicationStatus"/>. </summary>
        /// <param name="isHealthy">
        /// Replication health check
        /// Serialized Name: ReplicationStatus.healthy
        /// </param>
        /// <param name="relationshipStatus">
        /// Status of the mirror relationship
        /// Serialized Name: ReplicationStatus.relationshipStatus
        /// </param>
        /// <param name="mirrorState">
        /// The status of the replication
        /// Serialized Name: ReplicationStatus.mirrorState
        /// </param>
        /// <param name="totalProgress">
        /// The progress of the replication
        /// Serialized Name: ReplicationStatus.totalProgress
        /// </param>
        /// <param name="errorMessage">
        /// Displays error message if the replication is in an error state
        /// Serialized Name: ReplicationStatus.errorMessage
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetAppVolumeReplicationStatus(bool? isHealthy, NetAppRelationshipStatus? relationshipStatus, NetAppMirrorState? mirrorState, string totalProgress, string errorMessage, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IsHealthy = isHealthy;
            RelationshipStatus = relationshipStatus;
            MirrorState = mirrorState;
            TotalProgress = totalProgress;
            ErrorMessage = errorMessage;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Replication health check
        /// Serialized Name: ReplicationStatus.healthy
        /// </summary>
        public bool? IsHealthy { get; }
        /// <summary>
        /// Status of the mirror relationship
        /// Serialized Name: ReplicationStatus.relationshipStatus
        /// </summary>
        public NetAppRelationshipStatus? RelationshipStatus { get; }
        /// <summary>
        /// The status of the replication
        /// Serialized Name: ReplicationStatus.mirrorState
        /// </summary>
        public NetAppMirrorState? MirrorState { get; }
        /// <summary>
        /// The progress of the replication
        /// Serialized Name: ReplicationStatus.totalProgress
        /// </summary>
        public string TotalProgress { get; }
        /// <summary>
        /// Displays error message if the replication is in an error state
        /// Serialized Name: ReplicationStatus.errorMessage
        /// </summary>
        public string ErrorMessage { get; }
    }
}
