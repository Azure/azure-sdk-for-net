// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.NetApp.Models
{
    public partial class NetAppVolumeExportPolicyRule : IUtf8JsonSerializable, IModelJsonSerializable<NetAppVolumeExportPolicyRule>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<NetAppVolumeExportPolicyRule>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<NetAppVolumeExportPolicyRule>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(RuleIndex))
            {
                writer.WritePropertyName("ruleIndex"u8);
                writer.WriteNumberValue(RuleIndex.Value);
            }
            if (Optional.IsDefined(IsUnixReadOnly))
            {
                writer.WritePropertyName("unixReadOnly"u8);
                writer.WriteBooleanValue(IsUnixReadOnly.Value);
            }
            if (Optional.IsDefined(IsUnixReadWrite))
            {
                writer.WritePropertyName("unixReadWrite"u8);
                writer.WriteBooleanValue(IsUnixReadWrite.Value);
            }
            if (Optional.IsDefined(IsKerberos5ReadOnly))
            {
                writer.WritePropertyName("kerberos5ReadOnly"u8);
                writer.WriteBooleanValue(IsKerberos5ReadOnly.Value);
            }
            if (Optional.IsDefined(IsKerberos5ReadWrite))
            {
                writer.WritePropertyName("kerberos5ReadWrite"u8);
                writer.WriteBooleanValue(IsKerberos5ReadWrite.Value);
            }
            if (Optional.IsDefined(IsKerberos5iReadOnly))
            {
                writer.WritePropertyName("kerberos5iReadOnly"u8);
                writer.WriteBooleanValue(IsKerberos5iReadOnly.Value);
            }
            if (Optional.IsDefined(IsKerberos5iReadWrite))
            {
                writer.WritePropertyName("kerberos5iReadWrite"u8);
                writer.WriteBooleanValue(IsKerberos5iReadWrite.Value);
            }
            if (Optional.IsDefined(IsKerberos5pReadOnly))
            {
                writer.WritePropertyName("kerberos5pReadOnly"u8);
                writer.WriteBooleanValue(IsKerberos5pReadOnly.Value);
            }
            if (Optional.IsDefined(IsKerberos5pReadWrite))
            {
                writer.WritePropertyName("kerberos5pReadWrite"u8);
                writer.WriteBooleanValue(IsKerberos5pReadWrite.Value);
            }
            if (Optional.IsDefined(AllowCifsProtocol))
            {
                writer.WritePropertyName("cifs"u8);
                writer.WriteBooleanValue(AllowCifsProtocol.Value);
            }
            if (Optional.IsDefined(AllowNfsV3Protocol))
            {
                writer.WritePropertyName("nfsv3"u8);
                writer.WriteBooleanValue(AllowNfsV3Protocol.Value);
            }
            if (Optional.IsDefined(AllowNfsV41Protocol))
            {
                writer.WritePropertyName("nfsv41"u8);
                writer.WriteBooleanValue(AllowNfsV41Protocol.Value);
            }
            if (Optional.IsDefined(AllowedClients))
            {
                writer.WritePropertyName("allowedClients"u8);
                writer.WriteStringValue(AllowedClients);
            }
            if (Optional.IsDefined(HasRootAccess))
            {
                writer.WritePropertyName("hasRootAccess"u8);
                writer.WriteBooleanValue(HasRootAccess.Value);
            }
            if (Optional.IsDefined(ChownMode))
            {
                writer.WritePropertyName("chownMode"u8);
                writer.WriteStringValue(ChownMode.Value.ToString());
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static NetAppVolumeExportPolicyRule DeserializeNetAppVolumeExportPolicyRule(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> ruleIndex = default;
            Optional<bool> unixReadOnly = default;
            Optional<bool> unixReadWrite = default;
            Optional<bool> kerberos5ReadOnly = default;
            Optional<bool> kerberos5ReadWrite = default;
            Optional<bool> kerberos5iReadOnly = default;
            Optional<bool> kerberos5iReadWrite = default;
            Optional<bool> kerberos5pReadOnly = default;
            Optional<bool> kerberos5pReadWrite = default;
            Optional<bool> cifs = default;
            Optional<bool> nfsv3 = default;
            Optional<bool> nfsv41 = default;
            Optional<string> allowedClients = default;
            Optional<bool> hasRootAccess = default;
            Optional<NetAppChownMode> chownMode = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ruleIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ruleIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("unixReadOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unixReadOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("unixReadWrite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unixReadWrite = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kerberos5ReadOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kerberos5ReadOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kerberos5ReadWrite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kerberos5ReadWrite = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kerberos5iReadOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kerberos5iReadOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kerberos5iReadWrite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kerberos5iReadWrite = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kerberos5pReadOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kerberos5pReadOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kerberos5pReadWrite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kerberos5pReadWrite = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cifs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cifs = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("nfsv3"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nfsv3 = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("nfsv41"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nfsv41 = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("allowedClients"u8))
                {
                    allowedClients = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasRootAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasRootAccess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("chownMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    chownMode = new NetAppChownMode(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new NetAppVolumeExportPolicyRule(Optional.ToNullable(ruleIndex), Optional.ToNullable(unixReadOnly), Optional.ToNullable(unixReadWrite), Optional.ToNullable(kerberos5ReadOnly), Optional.ToNullable(kerberos5ReadWrite), Optional.ToNullable(kerberos5iReadOnly), Optional.ToNullable(kerberos5iReadWrite), Optional.ToNullable(kerberos5pReadOnly), Optional.ToNullable(kerberos5pReadWrite), Optional.ToNullable(cifs), Optional.ToNullable(nfsv3), Optional.ToNullable(nfsv41), allowedClients.Value, Optional.ToNullable(hasRootAccess), Optional.ToNullable(chownMode), rawData);
        }

        NetAppVolumeExportPolicyRule IModelJsonSerializable<NetAppVolumeExportPolicyRule>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeNetAppVolumeExportPolicyRule(doc.RootElement, options);
        }

        BinaryData IModelSerializable<NetAppVolumeExportPolicyRule>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        NetAppVolumeExportPolicyRule IModelSerializable<NetAppVolumeExportPolicyRule>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeNetAppVolumeExportPolicyRule(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="NetAppVolumeExportPolicyRule"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="NetAppVolumeExportPolicyRule"/> to convert. </param>
        public static implicit operator RequestContent(NetAppVolumeExportPolicyRule model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="NetAppVolumeExportPolicyRule"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator NetAppVolumeExportPolicyRule(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeNetAppVolumeExportPolicyRule(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
