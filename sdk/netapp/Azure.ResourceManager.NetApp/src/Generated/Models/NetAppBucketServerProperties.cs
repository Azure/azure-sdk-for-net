// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary>
    /// Properties of the server managing the lifecycle of volume buckets
    /// Serialized Name: BucketServerProperties
    /// </summary>
    public partial class NetAppBucketServerProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetAppBucketServerProperties"/>. </summary>
        public NetAppBucketServerProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NetAppBucketServerProperties"/>. </summary>
        /// <param name="fqdn">
        /// The host part of the bucket URL, resolving to the bucket IP address and allowed by the server certificate.
        /// Serialized Name: BucketServerProperties.fqdn
        /// </param>
        /// <param name="certificateCommonName">
        /// Certificate Common Name taken from the certificate installed on the bucket server
        /// Serialized Name: BucketServerProperties.certificateCommonName
        /// </param>
        /// <param name="certificateExpiryOn">
        /// The bucket server's certificate expiry date.
        /// Serialized Name: BucketServerProperties.certificateExpiryDate
        /// </param>
        /// <param name="ipAddress">
        /// The bucket server's IPv4 address
        /// Serialized Name: BucketServerProperties.ipAddress
        /// </param>
        /// <param name="certificateObject">
        /// A base64-encoded PEM file, which includes both the bucket server's certificate and private key. It is used to authenticate the user and allows access to volume data in a read-only manner.
        /// Serialized Name: BucketServerProperties.certificateObject
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetAppBucketServerProperties(string fqdn, string certificateCommonName, DateTimeOffset? certificateExpiryOn, string ipAddress, string certificateObject, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Fqdn = fqdn;
            CertificateCommonName = certificateCommonName;
            CertificateExpiryOn = certificateExpiryOn;
            IPAddress = ipAddress;
            CertificateObject = certificateObject;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The host part of the bucket URL, resolving to the bucket IP address and allowed by the server certificate.
        /// Serialized Name: BucketServerProperties.fqdn
        /// </summary>
        public string Fqdn { get; set; }
        /// <summary>
        /// Certificate Common Name taken from the certificate installed on the bucket server
        /// Serialized Name: BucketServerProperties.certificateCommonName
        /// </summary>
        public string CertificateCommonName { get; }
        /// <summary>
        /// The bucket server's certificate expiry date.
        /// Serialized Name: BucketServerProperties.certificateExpiryDate
        /// </summary>
        public DateTimeOffset? CertificateExpiryOn { get; }
        /// <summary>
        /// The bucket server's IPv4 address
        /// Serialized Name: BucketServerProperties.ipAddress
        /// </summary>
        public string IPAddress { get; }
        /// <summary>
        /// A base64-encoded PEM file, which includes both the bucket server's certificate and private key. It is used to authenticate the user and allows access to volume data in a read-only manner.
        /// Serialized Name: BucketServerProperties.certificateObject
        /// </summary>
        public string CertificateObject { get; set; }
    }
}
