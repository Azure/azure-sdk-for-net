// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetApp.Models
{
    /// <summary> Property that only applies to external replications. Provides a machine-readable value for the status of the external replication setup. </summary>
    public readonly partial struct ExternalReplicationSetupStatus : IEquatable<ExternalReplicationSetupStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExternalReplicationSetupStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExternalReplicationSetupStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ClusterPeerRequiredValue = "ClusterPeerRequired";
        private const string ClusterPeerPendingValue = "ClusterPeerPending";
        private const string VServerPeerRequiredValue = "VServerPeerRequired";
        private const string ReplicationCreateRequiredValue = "ReplicationCreateRequired";
        private const string NoActionRequiredValue = "NoActionRequired";

        /// <summary> Your cluster needs to be peered by using the 'peerExternalCluster' action. </summary>
        public static ExternalReplicationSetupStatus ClusterPeerRequired { get; } = new ExternalReplicationSetupStatus(ClusterPeerRequiredValue);
        /// <summary> The peering needs to be accepted on your cluster before the setup can proceed. </summary>
        public static ExternalReplicationSetupStatus ClusterPeerPending { get; } = new ExternalReplicationSetupStatus(ClusterPeerPendingValue);
        /// <summary> Need to call 'authorizeExternalReplication' and accept the returned 'vserver peer accept' command on your cluster to finish setting up the external replication. </summary>
        public static ExternalReplicationSetupStatus VServerPeerRequired { get; } = new ExternalReplicationSetupStatus(VServerPeerRequiredValue);
        /// <summary> Need to call 'authorizeExternalReplication' to finish setting up the external replication. </summary>
        public static ExternalReplicationSetupStatus ReplicationCreateRequired { get; } = new ExternalReplicationSetupStatus(ReplicationCreateRequiredValue);
        /// <summary> External Replication setup is complete, you can now monitor the 'mirrorState' in the replication status for the health of the replication. </summary>
        public static ExternalReplicationSetupStatus NoActionRequired { get; } = new ExternalReplicationSetupStatus(NoActionRequiredValue);
        /// <summary> Determines if two <see cref="ExternalReplicationSetupStatus"/> values are the same. </summary>
        public static bool operator ==(ExternalReplicationSetupStatus left, ExternalReplicationSetupStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExternalReplicationSetupStatus"/> values are not the same. </summary>
        public static bool operator !=(ExternalReplicationSetupStatus left, ExternalReplicationSetupStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ExternalReplicationSetupStatus"/>. </summary>
        public static implicit operator ExternalReplicationSetupStatus(string value) => new ExternalReplicationSetupStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExternalReplicationSetupStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExternalReplicationSetupStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
