// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Restore payload for Single File Snapshot Restore
    /// </summary>
    public partial class SnapshotRestoreFiles : IResource
    {
        /// <summary>
        /// Initializes a new instance of the SnapshotRestoreFiles class.
        /// </summary>
        public SnapshotRestoreFiles()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SnapshotRestoreFiles class.
        /// </summary>
        /// <param name="filePaths">List of files to be restored</param>
        /// <param name="destinationPath">Destination folder where the files
        /// will be restored</param>
        public SnapshotRestoreFiles(IList<string> filePaths, string destinationPath = default(string))
        {
            FilePaths = filePaths;
            DestinationPath = destinationPath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of files to be restored
        /// </summary>
        [JsonProperty(PropertyName = "filePaths")]
        public IList<string> FilePaths { get; set; }

        /// <summary>
        /// Gets or sets destination folder where the files will be restored
        /// </summary>
        [JsonProperty(PropertyName = "destinationPath")]
        public string DestinationPath { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FilePaths == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FilePaths");
            }
            if (FilePaths != null)
            {
                if (FilePaths.Count > 10)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "FilePaths", 10);
                }
                if (FilePaths.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "FilePaths", 1);
                }
            }
        }
    }
}
