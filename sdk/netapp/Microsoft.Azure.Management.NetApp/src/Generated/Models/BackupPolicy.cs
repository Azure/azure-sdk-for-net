// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Backup policy information
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class BackupPolicy : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the BackupPolicy class.
        /// </summary>
        public BackupPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackupPolicy class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        /// <param name="backupPolicyId">Backup Policy Resource ID</param>
        /// <param name="provisioningState">Azure lifecycle management</param>
        /// <param name="dailyBackupsToKeep">Daily backups count to
        /// keep</param>
        /// <param name="weeklyBackupsToKeep">Weekly backups count to
        /// keep</param>
        /// <param name="monthlyBackupsToKeep">Monthly backups count to
        /// keep</param>
        /// <param name="volumesAssigned">Volumes using current backup
        /// policy</param>
        /// <param name="enabled">The property to decide policy is enabled or
        /// not</param>
        /// <param name="volumeBackups">A list of volumes assigned to this
        /// policy</param>
        public BackupPolicy(string location, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), string backupPolicyId = default(string), string provisioningState = default(string), int? dailyBackupsToKeep = default(int?), int? weeklyBackupsToKeep = default(int?), int? monthlyBackupsToKeep = default(int?), int? volumesAssigned = default(int?), bool? enabled = default(bool?), IList<VolumeBackups> volumeBackups = default(IList<VolumeBackups>))
            : base(location, id, name, type, systemData, tags)
        {
            Etag = etag;
            BackupPolicyId = backupPolicyId;
            ProvisioningState = provisioningState;
            DailyBackupsToKeep = dailyBackupsToKeep;
            WeeklyBackupsToKeep = weeklyBackupsToKeep;
            MonthlyBackupsToKeep = monthlyBackupsToKeep;
            VolumesAssigned = volumesAssigned;
            Enabled = enabled;
            VolumeBackups = volumeBackups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets backup Policy Resource ID
        /// </summary>
        [JsonProperty(PropertyName = "properties.backupPolicyId")]
        public string BackupPolicyId { get; private set; }

        /// <summary>
        /// Gets azure lifecycle management
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets daily backups count to keep
        /// </summary>
        [JsonProperty(PropertyName = "properties.dailyBackupsToKeep")]
        public int? DailyBackupsToKeep { get; set; }

        /// <summary>
        /// Gets or sets weekly backups count to keep
        /// </summary>
        [JsonProperty(PropertyName = "properties.weeklyBackupsToKeep")]
        public int? WeeklyBackupsToKeep { get; set; }

        /// <summary>
        /// Gets or sets monthly backups count to keep
        /// </summary>
        [JsonProperty(PropertyName = "properties.monthlyBackupsToKeep")]
        public int? MonthlyBackupsToKeep { get; set; }

        /// <summary>
        /// Gets volumes using current backup policy
        /// </summary>
        [JsonProperty(PropertyName = "properties.volumesAssigned")]
        public int? VolumesAssigned { get; private set; }

        /// <summary>
        /// Gets or sets the property to decide policy is enabled or not
        /// </summary>
        [JsonProperty(PropertyName = "properties.enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets a list of volumes assigned to this policy
        /// </summary>
        [JsonProperty(PropertyName = "properties.volumeBackups")]
        public IList<VolumeBackups> VolumeBackups { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
