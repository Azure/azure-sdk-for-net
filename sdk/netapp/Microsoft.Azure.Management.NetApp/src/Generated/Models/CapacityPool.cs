// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Capacity pool resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CapacityPool : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the CapacityPool class.
        /// </summary>
        public CapacityPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CapacityPool class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="size">size</param>
        /// <param name="serviceLevel">serviceLevel</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        /// <param name="poolId">poolId</param>
        /// <param name="provisioningState">Azure lifecycle management</param>
        /// <param name="totalThroughputMibps">Total throughput of pool in
        /// MiB/s</param>
        /// <param name="utilizedThroughputMibps">Utilized throughput of pool
        /// in MiB/s</param>
        /// <param name="qosType">qosType</param>
        /// <param name="coolAccess">If enabled (true) the pool can contain
        /// cool Access enabled volumes.</param>
        /// <param name="encryptionType">encryptionType</param>
        public CapacityPool(string location, long size, string serviceLevel, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), string poolId = default(string), string provisioningState = default(string), double? totalThroughputMibps = default(double?), double? utilizedThroughputMibps = default(double?), string qosType = default(string), bool? coolAccess = default(bool?), string encryptionType = default(string))
            : base(location, id, name, type, systemData, tags)
        {
            Etag = etag;
            PoolId = poolId;
            Size = size;
            ServiceLevel = serviceLevel;
            ProvisioningState = provisioningState;
            TotalThroughputMibps = totalThroughputMibps;
            UtilizedThroughputMibps = utilizedThroughputMibps;
            QosType = qosType;
            CoolAccess = coolAccess;
            EncryptionType = encryptionType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets poolId
        /// </summary>
        /// <remarks>
        /// UUID v4 used to identify the Pool
        /// </remarks>
        [JsonProperty(PropertyName = "properties.poolId")]
        public string PoolId { get; private set; }

        /// <summary>
        /// Gets or sets size
        /// </summary>
        /// <remarks>
        /// Provisioned size of the pool (in bytes). Allowed values are in 1TiB
        /// chunks (value must be multiply of 4398046511104).
        /// </remarks>
        [JsonProperty(PropertyName = "properties.size")]
        public long Size { get; set; }

        /// <summary>
        /// Gets or sets serviceLevel
        /// </summary>
        /// <remarks>
        /// Possible values include: 'Standard', 'Premium', 'Ultra',
        /// 'StandardZRS'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.serviceLevel")]
        public string ServiceLevel { get; set; }

        /// <summary>
        /// Gets azure lifecycle management
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets total throughput of pool in MiB/s
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalThroughputMibps")]
        public double? TotalThroughputMibps { get; private set; }

        /// <summary>
        /// Gets utilized throughput of pool in MiB/s
        /// </summary>
        [JsonProperty(PropertyName = "properties.utilizedThroughputMibps")]
        public double? UtilizedThroughputMibps { get; private set; }

        /// <summary>
        /// Gets or sets qosType
        /// </summary>
        /// <remarks>
        /// The qos type of the pool. Possible values include: 'Auto', 'Manual'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.qosType")]
        public string QosType { get; set; }

        /// <summary>
        /// Gets or sets if enabled (true) the pool can contain cool Access
        /// enabled volumes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.coolAccess")]
        public bool? CoolAccess { get; set; }

        /// <summary>
        /// Gets or sets encryptionType
        /// </summary>
        /// <remarks>
        /// Encryption type of the capacity pool, set encryption type for data
        /// at rest for this pool and all volumes in it. This value can only be
        /// set when creating new pool. Possible values include: 'Single',
        /// 'Double'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.encryptionType")]
        public string EncryptionType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ServiceLevel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServiceLevel");
            }
            if (PoolId != null)
            {
                if (PoolId.Length > 36)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PoolId", 36);
                }
                if (PoolId.Length < 36)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PoolId", 36);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(PoolId, "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "PoolId", "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$");
                }
            }
        }
    }
}
