// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Quota Rule of a Volume
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VolumeQuotaRule : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the VolumeQuotaRule class.
        /// </summary>
        public VolumeQuotaRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VolumeQuotaRule class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="provisioningState">Possible values include:
        /// 'Accepted', 'Creating', 'Patching', 'Deleting', 'Moving', 'Failed',
        /// 'Succeeded'</param>
        /// <param name="quotaSizeInKiBs">Size of quota</param>
        /// <param name="quotaType">quotaType</param>
        /// <param name="quotaTarget">UserID/GroupID/SID based on the quota
        /// target type. UserID and groupID can be found by running ‘id’ or
        /// ‘getent’ command for the user or group and SID can be found by
        /// running &lt;wmic useraccount where name='user-name' get
        /// sid&gt;</param>
        public VolumeQuotaRule(string location, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), ProvisioningState? provisioningState = default(ProvisioningState?), long? quotaSizeInKiBs = default(long?), string quotaType = default(string), string quotaTarget = default(string))
            : base(location, id, name, type, systemData, tags)
        {
            ProvisioningState = provisioningState;
            QuotaSizeInKiBs = quotaSizeInKiBs;
            QuotaType = quotaType;
            QuotaTarget = quotaTarget;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Accepted', 'Creating',
        /// 'Patching', 'Deleting', 'Moving', 'Failed', 'Succeeded'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets size of quota
        /// </summary>
        [JsonProperty(PropertyName = "properties.quotaSizeInKiBs")]
        public long? QuotaSizeInKiBs { get; set; }

        /// <summary>
        /// Gets or sets quotaType
        /// </summary>
        /// <remarks>
        /// Type of quota. Possible values include: 'DefaultUserQuota',
        /// 'DefaultGroupQuota', 'IndividualUserQuota', 'IndividualGroupQuota'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.quotaType")]
        public string QuotaType { get; set; }

        /// <summary>
        /// Gets or sets userID/GroupID/SID based on the quota target type.
        /// UserID and groupID can be found by running ‘id’ or ‘getent’ command
        /// for the user or group and SID can be found by running &amp;lt;wmic
        /// useraccount where name='user-name' get sid&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "properties.quotaTarget")]
        public string QuotaTarget { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
