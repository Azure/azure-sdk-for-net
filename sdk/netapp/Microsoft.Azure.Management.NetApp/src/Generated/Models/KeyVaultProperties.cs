// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of key vault.
    /// </summary>
    public partial class KeyVaultProperties
    {
        /// <summary>
        /// Initializes a new instance of the KeyVaultProperties class.
        /// </summary>
        public KeyVaultProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KeyVaultProperties class.
        /// </summary>
        /// <param name="keyVaultUri">The Uri of KeyVault.</param>
        /// <param name="keyName">The name of KeyVault key.</param>
        /// <param name="keyVaultResourceId">The resource ID of
        /// KeyVault.</param>
        /// <param name="keyVaultId">UUID v4 used to identify the Azure Key
        /// Vault configuration</param>
        /// <param name="status">Status of the KeyVault connection. Possible
        /// values include: 'Created', 'InUse', 'Deleted', 'Error',
        /// 'Updating'</param>
        public KeyVaultProperties(string keyVaultUri, string keyName, string keyVaultResourceId, string keyVaultId = default(string), string status = default(string))
        {
            KeyVaultId = keyVaultId;
            KeyVaultUri = keyVaultUri;
            KeyName = keyName;
            KeyVaultResourceId = keyVaultResourceId;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets UUID v4 used to identify the Azure Key Vault configuration
        /// </summary>
        [JsonProperty(PropertyName = "keyVaultId")]
        public string KeyVaultId { get; private set; }

        /// <summary>
        /// Gets or sets the Uri of KeyVault.
        /// </summary>
        [JsonProperty(PropertyName = "keyVaultUri")]
        public string KeyVaultUri { get; set; }

        /// <summary>
        /// Gets or sets the name of KeyVault key.
        /// </summary>
        [JsonProperty(PropertyName = "keyName")]
        public string KeyName { get; set; }

        /// <summary>
        /// Gets or sets the resource ID of KeyVault.
        /// </summary>
        [JsonProperty(PropertyName = "keyVaultResourceId")]
        public string KeyVaultResourceId { get; set; }

        /// <summary>
        /// Gets status of the KeyVault connection. Possible values include:
        /// 'Created', 'InUse', 'Deleted', 'Error', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KeyVaultUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyVaultUri");
            }
            if (KeyName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyName");
            }
            if (KeyVaultResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyVaultResourceId");
            }
            if (KeyVaultId != null)
            {
                if (KeyVaultId.Length > 36)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "KeyVaultId", 36);
                }
                if (KeyVaultId.Length < 36)
                {
                    throw new ValidationException(ValidationRules.MinLength, "KeyVaultId", 36);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(KeyVaultId, "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "KeyVaultId", "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$");
                }
            }
        }
    }
}
