// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AccountBackupsOperations.
    /// </summary>
    public static partial class AccountBackupsOperationsExtensions
    {
            /// <summary>
            /// List Backups for a Netapp Account
            /// </summary>
            /// <remarks>
            /// List all Backups for a Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            public static BackupsList List(this IAccountBackupsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Backups for a Netapp Account
            /// </summary>
            /// <remarks>
            /// List all Backups for a Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupsList> ListAsync(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Backup for a Netapp Account
            /// </summary>
            /// <remarks>
            /// Get Backup for a Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupName'>
            /// The name of the backup
            /// </param>
            public static Backup Get(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName)
            {
                return operations.GetAsync(resourceGroupName, accountName, backupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Backup for a Netapp Account
            /// </summary>
            /// <remarks>
            /// Get Backup for a Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupName'>
            /// The name of the backup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Backup> GetAsync(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, backupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Backup for a Netapp Account
            /// </summary>
            /// <remarks>
            /// Delete Backup for a Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupName'>
            /// The name of the backup
            /// </param>
            public static void Delete(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, backupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Backup for a Netapp Account
            /// </summary>
            /// <remarks>
            /// Delete Backup for a Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupName'>
            /// The name of the backup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete Backup for a Netapp Account
            /// </summary>
            /// <remarks>
            /// Delete Backup for a Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupName'>
            /// The name of the backup
            /// </param>
            public static void BeginDelete(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName)
            {
                operations.BeginDeleteAsync(resourceGroupName, accountName, backupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Backup for a Netapp Account
            /// </summary>
            /// <remarks>
            /// Delete Backup for a Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupName'>
            /// The name of the backup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
