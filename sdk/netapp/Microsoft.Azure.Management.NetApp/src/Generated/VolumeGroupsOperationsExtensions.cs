// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VolumeGroupsOperations.
    /// </summary>
    public static partial class VolumeGroupsOperationsExtensions
    {
            /// <summary>
            /// Describe all volume groups
            /// </summary>
            /// <remarks>
            /// List all volume groups for given account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            public static IEnumerable<VolumeGroup> ListByNetAppAccount(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListByNetAppAccountAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Describe all volume groups
            /// </summary>
            /// <remarks>
            /// List all volume groups for given account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<VolumeGroup>> ListByNetAppAccountAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNetAppAccountWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Describe a Volume Group
            /// </summary>
            /// <remarks>
            /// Get details of the specified volume group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            public static VolumeGroupDetails Get(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName)
            {
                return operations.GetAsync(resourceGroupName, accountName, volumeGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Describe a Volume Group
            /// </summary>
            /// <remarks>
            /// Get details of the specified volume group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VolumeGroupDetails> GetAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, volumeGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create the specified volume group and volumes. Creating volume group will
            /// create all the volumes specified in request body implicitly. Once volumes
            /// are created using volume group, those will be treated as regular volumes
            /// thereafter.
            /// </summary>
            /// <remarks>
            /// Create a volume group along with specified volumes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Volume Group object supplied in the body of the operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            public static VolumeGroupDetails Create(this IVolumeGroupsOperations operations, VolumeGroupDetails body, string resourceGroupName, string accountName, string volumeGroupName)
            {
                return operations.CreateAsync(body, resourceGroupName, accountName, volumeGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create the specified volume group and volumes. Creating volume group will
            /// create all the volumes specified in request body implicitly. Once volumes
            /// are created using volume group, those will be treated as regular volumes
            /// thereafter.
            /// </summary>
            /// <remarks>
            /// Create a volume group along with specified volumes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Volume Group object supplied in the body of the operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VolumeGroupDetails> CreateAsync(this IVolumeGroupsOperations operations, VolumeGroupDetails body, string resourceGroupName, string accountName, string volumeGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, resourceGroupName, accountName, volumeGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a volume group
            /// </summary>
            /// <remarks>
            /// Delete the specified volume group only if there are no volumes under volume
            /// group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            public static void Delete(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, volumeGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a volume group
            /// </summary>
            /// <remarks>
            /// Delete the specified volume group only if there are no volumes under volume
            /// group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, volumeGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create the specified volume group and volumes. Creating volume group will
            /// create all the volumes specified in request body implicitly. Once volumes
            /// are created using volume group, those will be treated as regular volumes
            /// thereafter.
            /// </summary>
            /// <remarks>
            /// Create a volume group along with specified volumes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Volume Group object supplied in the body of the operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            public static VolumeGroupDetails BeginCreate(this IVolumeGroupsOperations operations, VolumeGroupDetails body, string resourceGroupName, string accountName, string volumeGroupName)
            {
                return operations.BeginCreateAsync(body, resourceGroupName, accountName, volumeGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create the specified volume group and volumes. Creating volume group will
            /// create all the volumes specified in request body implicitly. Once volumes
            /// are created using volume group, those will be treated as regular volumes
            /// thereafter.
            /// </summary>
            /// <remarks>
            /// Create a volume group along with specified volumes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Volume Group object supplied in the body of the operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VolumeGroupDetails> BeginCreateAsync(this IVolumeGroupsOperations operations, VolumeGroupDetails body, string resourceGroupName, string accountName, string volumeGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(body, resourceGroupName, accountName, volumeGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a volume group
            /// </summary>
            /// <remarks>
            /// Delete the specified volume group only if there are no volumes under volume
            /// group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            public static void BeginDelete(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName)
            {
                operations.BeginDeleteAsync(resourceGroupName, accountName, volumeGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a volume group
            /// </summary>
            /// <remarks>
            /// Delete the specified volume group only if there are no volumes under volume
            /// group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='volumeGroupName'>
            /// The name of the volumeGroup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, volumeGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
