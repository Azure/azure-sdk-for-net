// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BackupPoliciesOperations.
    /// </summary>
    public static partial class BackupPoliciesOperationsExtensions
    {
            /// <summary>
            /// List backup policies
            /// </summary>
            /// <remarks>
            /// List backup policies for Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            public static IEnumerable<BackupPolicy> List(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List backup policies
            /// </summary>
            /// <remarks>
            /// List backup policies for Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<BackupPolicy>> ListAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a backup Policy
            /// </summary>
            /// <remarks>
            /// Get a particular backup Policy
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            public static BackupPolicy Get(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName)
            {
                return operations.GetAsync(resourceGroupName, accountName, backupPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a backup Policy
            /// </summary>
            /// <remarks>
            /// Get a particular backup Policy
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupPolicy> GetAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a backup policy
            /// </summary>
            /// <remarks>
            /// Create a backup policy for Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='body'>
            /// Backup policy object supplied in the body of the operation.
            /// </param>
            public static BackupPolicy Create(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicy body)
            {
                return operations.CreateAsync(resourceGroupName, accountName, backupPolicyName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a backup policy
            /// </summary>
            /// <remarks>
            /// Create a backup policy for Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='body'>
            /// Backup policy object supplied in the body of the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupPolicy> CreateAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicy body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a backup policy
            /// </summary>
            /// <remarks>
            /// Patch a backup policy for Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='body'>
            /// Backup policy object supplied in the body of the operation.
            /// </param>
            public static BackupPolicy Update(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicyPatch body)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, backupPolicyName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a backup policy
            /// </summary>
            /// <remarks>
            /// Patch a backup policy for Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='body'>
            /// Backup policy object supplied in the body of the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupPolicy> UpdateAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicyPatch body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a backup policy
            /// </summary>
            /// <remarks>
            /// Delete backup policy
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            public static void Delete(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, backupPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a backup policy
            /// </summary>
            /// <remarks>
            /// Delete backup policy
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a backup policy
            /// </summary>
            /// <remarks>
            /// Create a backup policy for Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='body'>
            /// Backup policy object supplied in the body of the operation.
            /// </param>
            public static BackupPolicy BeginCreate(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicy body)
            {
                return operations.BeginCreateAsync(resourceGroupName, accountName, backupPolicyName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a backup policy
            /// </summary>
            /// <remarks>
            /// Create a backup policy for Netapp Account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='body'>
            /// Backup policy object supplied in the body of the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupPolicy> BeginCreateAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicy body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a backup policy
            /// </summary>
            /// <remarks>
            /// Delete backup policy
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            public static void BeginDelete(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName)
            {
                operations.BeginDeleteAsync(resourceGroupName, accountName, backupPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a backup policy
            /// </summary>
            /// <remarks>
            /// Delete backup policy
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the NetApp account
            /// </param>
            /// <param name='backupPolicyName'>
            /// Backup policy Name which uniquely identify backup policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
