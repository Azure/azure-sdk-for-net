// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.CosmosDBForPostgreSql.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CosmosDBForPostgreSql
{
    /// <summary>
    /// A class representing the CosmosDBForPostgreSqlClusterServer data model.
    /// Represents a server in a cluster.
    /// </summary>
    public partial class CosmosDBForPostgreSqlClusterServerData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CosmosDBForPostgreSqlClusterServerData"/>. </summary>
        internal CosmosDBForPostgreSqlClusterServerData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBForPostgreSqlClusterServerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="fullyQualifiedDomainName"> The fully qualified domain name of a server. </param>
        /// <param name="role"> The role of server in the cluster. </param>
        /// <param name="state"> A state of a cluster/server that is visible to user. </param>
        /// <param name="haState"> A state of HA feature for the cluster. </param>
        /// <param name="availabilityZone"> Availability Zone information of the server. </param>
        /// <param name="postgresqlVersion"> The major PostgreSQL version of server. </param>
        /// <param name="citusVersion"> The Citus extension version of server. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CosmosDBForPostgreSqlClusterServerData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string fullyQualifiedDomainName, CosmosDBForPostgreSqlServerRole? role, string state, string haState, string availabilityZone, string postgresqlVersion, string citusVersion, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            Role = role;
            State = state;
            HaState = haState;
            AvailabilityZone = availabilityZone;
            PostgresqlVersion = postgresqlVersion;
            CitusVersion = citusVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The fully qualified domain name of a server. </summary>
        public string FullyQualifiedDomainName { get; }
        /// <summary> The role of server in the cluster. </summary>
        public CosmosDBForPostgreSqlServerRole? Role { get; }
        /// <summary> A state of a cluster/server that is visible to user. </summary>
        public string State { get; }
        /// <summary> A state of HA feature for the cluster. </summary>
        public string HaState { get; }
        /// <summary> Availability Zone information of the server. </summary>
        public string AvailabilityZone { get; }
        /// <summary> The major PostgreSQL version of server. </summary>
        public string PostgresqlVersion { get; }
        /// <summary> The Citus extension version of server. </summary>
        public string CitusVersion { get; }
    }
}
