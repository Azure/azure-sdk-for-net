// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SqlVirtualMachine.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A SQL Server availability group listener.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AvailabilityGroupListener : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the AvailabilityGroupListener class.
        /// </summary>
        public AvailabilityGroupListener()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AvailabilityGroupListener class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="provisioningState">Provisioning state to track the
        /// async operation status.</param>
        /// <param name="availabilityGroupName">Name of the availability
        /// group.</param>
        /// <param name="loadBalancerConfigurations">List of load balancer
        /// configurations for an availability group listener.</param>
        /// <param name="createDefaultAvailabilityGroupIfNotExist">Create a
        /// default availability group if it does not exist.</param>
        /// <param name="port">Listener port.</param>
        public AvailabilityGroupListener(string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), string availabilityGroupName = default(string), IList<LoadBalancerConfiguration> loadBalancerConfigurations = default(IList<LoadBalancerConfiguration>), bool? createDefaultAvailabilityGroupIfNotExist = default(bool?), int? port = default(int?))
            : base(id, name, type)
        {
            ProvisioningState = provisioningState;
            AvailabilityGroupName = availabilityGroupName;
            LoadBalancerConfigurations = loadBalancerConfigurations;
            CreateDefaultAvailabilityGroupIfNotExist = createDefaultAvailabilityGroupIfNotExist;
            Port = port;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state to track the async operation status.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets name of the availability group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityGroupName")]
        public string AvailabilityGroupName { get; set; }

        /// <summary>
        /// Gets or sets list of load balancer configurations for an
        /// availability group listener.
        /// </summary>
        [JsonProperty(PropertyName = "properties.loadBalancerConfigurations")]
        public IList<LoadBalancerConfiguration> LoadBalancerConfigurations { get; set; }

        /// <summary>
        /// Gets or sets create a default availability group if it does not
        /// exist.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createDefaultAvailabilityGroupIfNotExist")]
        public bool? CreateDefaultAvailabilityGroupIfNotExist { get; set; }

        /// <summary>
        /// Gets or sets listener port.
        /// </summary>
        [JsonProperty(PropertyName = "properties.port")]
        public int? Port { get; set; }

    }
}
