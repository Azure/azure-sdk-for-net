// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SqlVirtualMachine.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Storage Configurations for SQL Data, Log and TempDb.
    /// </summary>
    public partial class StorageConfigurationSettings
    {
        /// <summary>
        /// Initializes a new instance of the StorageConfigurationSettings
        /// class.
        /// </summary>
        public StorageConfigurationSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageConfigurationSettings
        /// class.
        /// </summary>
        /// <param name="sqlDataSettings">SQL Server Data Storage
        /// Settings.</param>
        /// <param name="sqlLogSettings">SQL Server Log Storage
        /// Settings.</param>
        /// <param name="sqlTempDbSettings">SQL Server TempDb Storage
        /// Settings.</param>
        /// <param name="diskConfigurationType">Disk configuration to apply to
        /// SQL Server. Possible values include: 'NEW', 'EXTEND', 'ADD'</param>
        /// <param name="storageWorkloadType">Storage workload type. Possible
        /// values include: 'GENERAL', 'OLTP', 'DW'</param>
        public StorageConfigurationSettings(SQLStorageSettings sqlDataSettings = default(SQLStorageSettings), SQLStorageSettings sqlLogSettings = default(SQLStorageSettings), SQLStorageSettings sqlTempDbSettings = default(SQLStorageSettings), string diskConfigurationType = default(string), string storageWorkloadType = default(string))
        {
            SqlDataSettings = sqlDataSettings;
            SqlLogSettings = sqlLogSettings;
            SqlTempDbSettings = sqlTempDbSettings;
            DiskConfigurationType = diskConfigurationType;
            StorageWorkloadType = storageWorkloadType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets SQL Server Data Storage Settings.
        /// </summary>
        [JsonProperty(PropertyName = "sqlDataSettings")]
        public SQLStorageSettings SqlDataSettings { get; set; }

        /// <summary>
        /// Gets or sets SQL Server Log Storage Settings.
        /// </summary>
        [JsonProperty(PropertyName = "sqlLogSettings")]
        public SQLStorageSettings SqlLogSettings { get; set; }

        /// <summary>
        /// Gets or sets SQL Server TempDb Storage Settings.
        /// </summary>
        [JsonProperty(PropertyName = "sqlTempDbSettings")]
        public SQLStorageSettings SqlTempDbSettings { get; set; }

        /// <summary>
        /// Gets or sets disk configuration to apply to SQL Server. Possible
        /// values include: 'NEW', 'EXTEND', 'ADD'
        /// </summary>
        [JsonProperty(PropertyName = "diskConfigurationType")]
        public string DiskConfigurationType { get; set; }

        /// <summary>
        /// Gets or sets storage workload type. Possible values include:
        /// 'GENERAL', 'OLTP', 'DW'
        /// </summary>
        [JsonProperty(PropertyName = "storageWorkloadType")]
        public string StorageWorkloadType { get; set; }

    }
}
