// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SqlVirtualMachine;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class SqlVirtualMachineModelFactory
    {
        /// <summary> Initializes a new instance of AvailabilityGroupListenerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state to track the async operation status. </param>
        /// <param name="availabilityGroupName"> Name of the availability group. </param>
        /// <param name="loadBalancerConfigurations"> List of load balancer configurations for an availability group listener. </param>
        /// <param name="multiSubnetIPConfigurations"> List of multi subnet IP configurations for an AG listener. </param>
        /// <param name="createDefaultAvailabilityGroupIfNotExist"> Create a default availability group if it does not exist. </param>
        /// <param name="port"> Listener port. </param>
        /// <param name="availabilityGroupReplicas"> Availability Group configuration. </param>
        /// <returns> A new <see cref="SqlVirtualMachine.AvailabilityGroupListenerData"/> instance for mocking. </returns>
        public static AvailabilityGroupListenerData AvailabilityGroupListenerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, string availabilityGroupName = null, IEnumerable<AvailabilityGroupListenerLoadBalancerConfiguration> loadBalancerConfigurations = null, IEnumerable<MultiSubnetIPConfiguration> multiSubnetIPConfigurations = null, bool? createDefaultAvailabilityGroupIfNotExist = null, int? port = null, IEnumerable<AvailabilityGroupReplica> availabilityGroupReplicas = null)
        {
            loadBalancerConfigurations ??= new List<AvailabilityGroupListenerLoadBalancerConfiguration>();
            multiSubnetIPConfigurations ??= new List<MultiSubnetIPConfiguration>();
            availabilityGroupReplicas ??= new List<AvailabilityGroupReplica>();

            return new AvailabilityGroupListenerData(id, name, resourceType, systemData, provisioningState, availabilityGroupName, loadBalancerConfigurations?.ToList(), multiSubnetIPConfigurations?.ToList(), createDefaultAvailabilityGroupIfNotExist, port, availabilityGroupReplicas != null ? new AvailabilityGroupConfiguration(availabilityGroupReplicas?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of AvailabilityGroupListenerLoadBalancerConfiguration. </summary>
        /// <param name="privateIPAddress"> Private IP address. </param>
        /// <param name="publicIPAddressResourceId"> Resource id of the public IP. </param>
        /// <param name="loadBalancerResourceId"> Resource id of the load balancer. </param>
        /// <param name="probePort"> Probe port. </param>
        /// <param name="sqlVmInstances"> List of the SQL virtual machine instance resource id&apos;s that are enrolled into the availability group listener. </param>
        /// <returns> A new <see cref="Models.AvailabilityGroupListenerLoadBalancerConfiguration"/> instance for mocking. </returns>
        public static AvailabilityGroupListenerLoadBalancerConfiguration AvailabilityGroupListenerLoadBalancerConfiguration(AvailabilityGroupListenerPrivateIPAddress privateIPAddress = null, ResourceIdentifier publicIPAddressResourceId = null, ResourceIdentifier loadBalancerResourceId = null, int? probePort = null, IEnumerable<ResourceIdentifier> sqlVmInstances = null)
        {
            sqlVmInstances ??= new List<ResourceIdentifier>();

            return new AvailabilityGroupListenerLoadBalancerConfiguration(privateIPAddress, publicIPAddressResourceId, loadBalancerResourceId, probePort, sqlVmInstances?.ToList());
        }

        /// <summary> Initializes a new instance of AvailabilityGroupListenerPrivateIPAddress. </summary>
        /// <param name="ipAddress"> Private IP address bound to the availability group listener. </param>
        /// <param name="subnetResourceId"> Subnet used to include private IP. </param>
        /// <returns> A new <see cref="Models.AvailabilityGroupListenerPrivateIPAddress"/> instance for mocking. </returns>
        public static AvailabilityGroupListenerPrivateIPAddress AvailabilityGroupListenerPrivateIPAddress(IPAddress ipAddress = null, ResourceIdentifier subnetResourceId = null)
        {
            return new AvailabilityGroupListenerPrivateIPAddress(ipAddress, subnetResourceId);
        }

        /// <summary> Initializes a new instance of AvailabilityGroupReplica. </summary>
        /// <param name="sqlVmInstanceId"> Sql VirtualMachine Instance Id. </param>
        /// <param name="role"> Replica Role in availability group. </param>
        /// <param name="commit"> Replica commit mode in availability group. </param>
        /// <param name="failover"> Replica failover mode in availability group. </param>
        /// <param name="readableSecondary"> Replica readable secondary mode in availability group. </param>
        /// <returns> A new <see cref="Models.AvailabilityGroupReplica"/> instance for mocking. </returns>
        public static AvailabilityGroupReplica AvailabilityGroupReplica(ResourceIdentifier sqlVmInstanceId = null, AvailabilityGroupReplicaRole? role = null, AvailabilityGroupReplicaCommitMode? commit = null, AvailabilityGroupReplicaFailoverMode? failover = null, ReadableSecondaryMode? readableSecondary = null)
        {
            return new AvailabilityGroupReplica(sqlVmInstanceId, role, commit, failover, readableSecondary);
        }

        /// <summary> Initializes a new instance of SqlVmGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> Provisioning state to track the async operation status. </param>
        /// <param name="sqlImageOffer"> SQL image offer. Examples may include SQL2016-WS2016, SQL2017-WS2016. </param>
        /// <param name="sqlImageSku"> SQL image sku. </param>
        /// <param name="scaleType"> Scale type. </param>
        /// <param name="clusterManagerType"> Type of cluster manager: Windows Server Failover Cluster (WSFC), implied by the scale type of the group and the OS type. </param>
        /// <param name="clusterConfiguration"> Cluster type. </param>
        /// <param name="windowsServerFailoverClusterDomainProfile"> Cluster Active Directory domain profile. </param>
        /// <returns> A new <see cref="SqlVirtualMachine.SqlVmGroupData"/> instance for mocking. </returns>
        public static SqlVmGroupData SqlVmGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string provisioningState = null, string sqlImageOffer = null, SqlVmGroupImageSku? sqlImageSku = null, SqlVmGroupScaleType? scaleType = null, SqlVmClusterManagerType? clusterManagerType = null, SqlVmClusterConfiguration? clusterConfiguration = null, WindowsServerFailoverClusterDomainProfile windowsServerFailoverClusterDomainProfile = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SqlVmGroupData(id, name, resourceType, systemData, tags, location, provisioningState, sqlImageOffer, sqlImageSku, scaleType, clusterManagerType, clusterConfiguration, windowsServerFailoverClusterDomainProfile);
        }

        /// <summary> Initializes a new instance of WindowsServerFailoverClusterDomainProfile. </summary>
        /// <param name="domainFqdn"> Fully qualified name of the domain. </param>
        /// <param name="organizationalUnitPath"> Organizational Unit path in which the nodes and cluster will be present. </param>
        /// <param name="clusterBootstrapAccount"> Account name used for creating cluster (at minimum needs permissions to &apos;Create Computer Objects&apos; in domain). </param>
        /// <param name="clusterOperatorAccount"> Account name used for operating cluster i.e. will be part of administrators group on all the participating virtual machines in the cluster. </param>
        /// <param name="sqlServiceAccount"> Account name under which SQL service will run on all participating SQL virtual machines in the cluster. </param>
        /// <param name="fileShareWitnessPath"> Optional path for fileshare witness. </param>
        /// <param name="storageAccountUri"> Fully qualified ARM resource id of the witness storage account. </param>
        /// <param name="storageAccountPrimaryKey"> Primary key of the witness storage account. </param>
        /// <param name="clusterSubnetType"> Cluster subnet type. </param>
        /// <returns> A new <see cref="Models.WindowsServerFailoverClusterDomainProfile"/> instance for mocking. </returns>
        public static WindowsServerFailoverClusterDomainProfile WindowsServerFailoverClusterDomainProfile(string domainFqdn = null, string organizationalUnitPath = null, string clusterBootstrapAccount = null, string clusterOperatorAccount = null, string sqlServiceAccount = null, string fileShareWitnessPath = null, Uri storageAccountUri = null, string storageAccountPrimaryKey = null, SqlVmClusterSubnetType? clusterSubnetType = null)
        {
            return new WindowsServerFailoverClusterDomainProfile(domainFqdn, organizationalUnitPath, clusterBootstrapAccount, clusterOperatorAccount, sqlServiceAccount, fileShareWitnessPath, storageAccountUri, storageAccountPrimaryKey, clusterSubnetType);
        }

        /// <summary> Initializes a new instance of SqlVmData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Azure Active Directory identity of the server. Current supported identity types: None, SystemAssigned. </param>
        /// <param name="virtualMachineResourceId"> ARM Resource id of underlying virtual machine created from SQL marketplace image. </param>
        /// <param name="provisioningState"> Provisioning state to track the async operation status. </param>
        /// <param name="sqlImageOffer"> SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016. </param>
        /// <param name="sqlServerLicenseType"> SQL Server license type. </param>
        /// <param name="sqlManagement"> SQL Server Management type. </param>
        /// <param name="sqlImageSku"> SQL Server edition type. </param>
        /// <param name="sqlVmGroupResourceId"> ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of. </param>
        /// <param name="windowsServerFailoverClusterDomainCredentials"> Domain credentials for setting up Windows Server Failover Cluster for SQL availability group. </param>
        /// <param name="windowsServerFailoverClusterStaticIP"> Domain credentials for setting up Windows Server Failover Cluster for SQL availability group. </param>
        /// <param name="autoPatchingSettings"> Auto patching settings for applying critical security updates to SQL virtual machine. </param>
        /// <param name="autoBackupSettings"> Auto backup settings for SQL Server. </param>
        /// <param name="keyVaultCredentialSettings"> Key vault credential settings. </param>
        /// <param name="serverConfigurationsManagementSettings"> SQL Server configuration management settings. </param>
        /// <param name="storageConfigurationSettings"> Storage Configuration Settings. </param>
        /// <param name="assessmentSettings"> Assessment Settings. </param>
        /// <returns> A new <see cref="SqlVirtualMachine.SqlVmData"/> instance for mocking. </returns>
        public static SqlVmData SqlVmData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ResourceIdentifier virtualMachineResourceId = null, string provisioningState = null, string sqlImageOffer = null, SqlServerLicenseType? sqlServerLicenseType = null, SqlManagementMode? sqlManagement = null, SqlImageSku? sqlImageSku = null, ResourceIdentifier sqlVmGroupResourceId = null, WindowsServerFailoverClusterDomainCredentials windowsServerFailoverClusterDomainCredentials = null, IPAddress windowsServerFailoverClusterStaticIP = null, SqlVmAutoPatchingSettings autoPatchingSettings = null, SqlVmAutoBackupSettings autoBackupSettings = null, SqlVmKeyVaultCredentialSettings keyVaultCredentialSettings = null, SqlServerConfigurationsManagementSettings serverConfigurationsManagementSettings = null, SqlVmStorageConfigurationSettings storageConfigurationSettings = null, SqlVmAssessmentSettings assessmentSettings = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SqlVmData(id, name, resourceType, systemData, tags, location, identity, virtualMachineResourceId, provisioningState, sqlImageOffer, sqlServerLicenseType, sqlManagement, sqlImageSku, sqlVmGroupResourceId, windowsServerFailoverClusterDomainCredentials, windowsServerFailoverClusterStaticIP, autoPatchingSettings, autoBackupSettings, keyVaultCredentialSettings, serverConfigurationsManagementSettings, storageConfigurationSettings, assessmentSettings);
        }

        /// <summary> Initializes a new instance of WindowsServerFailoverClusterDomainCredentials. </summary>
        /// <param name="clusterBootstrapAccountPassword"> Cluster bootstrap account password. </param>
        /// <param name="clusterOperatorAccountPassword"> Cluster operator account password. </param>
        /// <param name="sqlServiceAccountPassword"> SQL service account password. </param>
        /// <returns> A new <see cref="Models.WindowsServerFailoverClusterDomainCredentials"/> instance for mocking. </returns>
        public static WindowsServerFailoverClusterDomainCredentials WindowsServerFailoverClusterDomainCredentials(string clusterBootstrapAccountPassword = null, string clusterOperatorAccountPassword = null, string sqlServiceAccountPassword = null)
        {
            return new WindowsServerFailoverClusterDomainCredentials(clusterBootstrapAccountPassword, clusterOperatorAccountPassword, sqlServiceAccountPassword);
        }

        /// <summary> Initializes a new instance of SqlVmAutoPatchingSettings. </summary>
        /// <param name="isEnabled"> Enable or disable autopatching on SQL virtual machine. </param>
        /// <param name="dayOfWeek"> Day of week to apply the patch on. </param>
        /// <param name="maintenanceWindowStartingHour"> Hour of the day when patching is initiated. Local VM time. </param>
        /// <param name="maintenanceWindowDurationInMinutes"> Duration of patching. </param>
        /// <returns> A new <see cref="Models.SqlVmAutoPatchingSettings"/> instance for mocking. </returns>
        public static SqlVmAutoPatchingSettings SqlVmAutoPatchingSettings(bool? isEnabled = null, SqlVmAutoPatchingDayOfWeek? dayOfWeek = null, int? maintenanceWindowStartingHour = null, int? maintenanceWindowDurationInMinutes = null)
        {
            return new SqlVmAutoPatchingSettings(isEnabled, dayOfWeek, maintenanceWindowStartingHour, maintenanceWindowDurationInMinutes);
        }

        /// <summary> Initializes a new instance of SqlVmAutoBackupSettings. </summary>
        /// <param name="isEnabled"> Enable or disable autobackup on SQL virtual machine. </param>
        /// <param name="isEncryptionEnabled"> Enable or disable encryption for backup on SQL virtual machine. </param>
        /// <param name="retentionPeriodInDays"> Retention period of backup: 1-90 days. </param>
        /// <param name="storageAccountUri"> Storage account url where backup will be taken to. </param>
        /// <param name="storageContainerName"> Storage container name where backup will be taken to. </param>
        /// <param name="storageAccessKey"> Storage account key where backup will be taken to. </param>
        /// <param name="password"> Password for encryption on backup. </param>
        /// <param name="areSystemDbsIncludedInBackup"> Include or exclude system databases from auto backup. </param>
        /// <param name="backupScheduleType"> Backup schedule type. </param>
        /// <param name="fullBackupFrequency"> Frequency of full backups. In both cases, full backups begin during the next scheduled time window. </param>
        /// <param name="daysOfWeek"> Days of the week for the backups when FullBackupFrequency is set to Weekly. </param>
        /// <param name="fullBackupStartHour"> Start time of a given day during which full backups can take place. 0-23 hours. </param>
        /// <param name="fullBackupWindowHours"> Duration of the time window of a given day during which full backups can take place. 1-23 hours. </param>
        /// <param name="logBackupFrequency"> Frequency of log backups. 5-60 minutes. </param>
        /// <returns> A new <see cref="Models.SqlVmAutoBackupSettings"/> instance for mocking. </returns>
        public static SqlVmAutoBackupSettings SqlVmAutoBackupSettings(bool? isEnabled = null, bool? isEncryptionEnabled = null, int? retentionPeriodInDays = null, Uri storageAccountUri = null, string storageContainerName = null, string storageAccessKey = null, string password = null, bool? areSystemDbsIncludedInBackup = null, SqVmBackupScheduleType? backupScheduleType = null, SqlVmFullBackupFrequency? fullBackupFrequency = null, IEnumerable<SqlVmAutoBackupDayOfWeek> daysOfWeek = null, int? fullBackupStartHour = null, int? fullBackupWindowHours = null, int? logBackupFrequency = null)
        {
            daysOfWeek ??= new List<SqlVmAutoBackupDayOfWeek>();

            return new SqlVmAutoBackupSettings(isEnabled, isEncryptionEnabled, retentionPeriodInDays, storageAccountUri, storageContainerName, storageAccessKey, password, areSystemDbsIncludedInBackup, backupScheduleType, fullBackupFrequency, daysOfWeek?.ToList(), fullBackupStartHour, fullBackupWindowHours, logBackupFrequency);
        }

        /// <summary> Initializes a new instance of SqlVmKeyVaultCredentialSettings. </summary>
        /// <param name="isEnabled"> Enable or disable key vault credential setting. </param>
        /// <param name="credentialName"> Credential name. </param>
        /// <param name="azureKeyVaultUri"> Azure Key Vault url. </param>
        /// <param name="servicePrincipalName"> Service principal name to access key vault. </param>
        /// <param name="servicePrincipalSecret"> Service principal name secret to access key vault. </param>
        /// <returns> A new <see cref="Models.SqlVmKeyVaultCredentialSettings"/> instance for mocking. </returns>
        public static SqlVmKeyVaultCredentialSettings SqlVmKeyVaultCredentialSettings(bool? isEnabled = null, string credentialName = null, Uri azureKeyVaultUri = null, string servicePrincipalName = null, string servicePrincipalSecret = null)
        {
            return new SqlVmKeyVaultCredentialSettings(isEnabled, credentialName, azureKeyVaultUri, servicePrincipalName, servicePrincipalSecret);
        }

        /// <summary> Initializes a new instance of SqlServerConfigurationsManagementSettings. </summary>
        /// <param name="sqlConnectivityUpdateSettings"> SQL connectivity type settings. </param>
        /// <param name="sqlWorkloadType"> SQL workload type settings. </param>
        /// <param name="sqlStorageUpdateSettings"> SQL storage update settings. </param>
        /// <param name="isRServicesEnabled"> Additional SQL feature settings. </param>
        /// <param name="sqlInstanceSettings"> SQL Instance settings. </param>
        /// <returns> A new <see cref="Models.SqlServerConfigurationsManagementSettings"/> instance for mocking. </returns>
        public static SqlServerConfigurationsManagementSettings SqlServerConfigurationsManagementSettings(SqlConnectivityUpdateSettings sqlConnectivityUpdateSettings = null, SqlWorkloadType? sqlWorkloadType = null, SqlStorageUpdateSettings sqlStorageUpdateSettings = null, bool? isRServicesEnabled = null, SqlInstanceSettings sqlInstanceSettings = null)
        {
            return new SqlServerConfigurationsManagementSettings(sqlConnectivityUpdateSettings, sqlWorkloadType != null ? new SqlWorkloadTypeUpdateSettings(sqlWorkloadType) : null, sqlStorageUpdateSettings, isRServicesEnabled != null ? new AdditionalFeaturesServerConfigurations(isRServicesEnabled) : null, sqlInstanceSettings);
        }

        /// <summary> Initializes a new instance of SqlConnectivityUpdateSettings. </summary>
        /// <param name="connectivityType"> SQL Server connectivity option. </param>
        /// <param name="port"> SQL Server port. </param>
        /// <param name="sqlAuthUpdateUserName"> SQL Server sysadmin login to create. </param>
        /// <param name="sqlAuthUpdatePassword"> SQL Server sysadmin login password. </param>
        /// <returns> A new <see cref="Models.SqlConnectivityUpdateSettings"/> instance for mocking. </returns>
        public static SqlConnectivityUpdateSettings SqlConnectivityUpdateSettings(SqlServerConnectivityType? connectivityType = null, int? port = null, string sqlAuthUpdateUserName = null, string sqlAuthUpdatePassword = null)
        {
            return new SqlConnectivityUpdateSettings(connectivityType, port, sqlAuthUpdateUserName, sqlAuthUpdatePassword);
        }

        /// <summary> Initializes a new instance of SqlStorageUpdateSettings. </summary>
        /// <param name="diskCount"> Virtual machine disk count. </param>
        /// <param name="startingDeviceId"> Device id of the first disk to be updated. </param>
        /// <param name="diskConfigurationType"> Disk configuration to apply to SQL Server. </param>
        /// <returns> A new <see cref="Models.SqlStorageUpdateSettings"/> instance for mocking. </returns>
        public static SqlStorageUpdateSettings SqlStorageUpdateSettings(int? diskCount = null, int? startingDeviceId = null, SqlVmDiskConfigurationType? diskConfigurationType = null)
        {
            return new SqlStorageUpdateSettings(diskCount, startingDeviceId, diskConfigurationType);
        }

        /// <summary> Initializes a new instance of SqlInstanceSettings. </summary>
        /// <param name="collation"> SQL Server Collation. </param>
        /// <param name="maxDop"> SQL Server MAXDOP. </param>
        /// <param name="isOptimizeForAdHocWorkloadsEnabled"> SQL Server Optimize for Adhoc workloads. </param>
        /// <param name="minServerMemoryInMB"> SQL Server minimum memory. </param>
        /// <param name="maxServerMemoryInMB"> SQL Server maximum memory. </param>
        /// <param name="isLpimEnabled"> SQL Server LPIM. </param>
        /// <param name="isIfiEnabled"> SQL Server IFI. </param>
        /// <returns> A new <see cref="Models.SqlInstanceSettings"/> instance for mocking. </returns>
        public static SqlInstanceSettings SqlInstanceSettings(string collation = null, int? maxDop = null, bool? isOptimizeForAdHocWorkloadsEnabled = null, int? minServerMemoryInMB = null, int? maxServerMemoryInMB = null, bool? isLpimEnabled = null, bool? isIfiEnabled = null)
        {
            return new SqlInstanceSettings(collation, maxDop, isOptimizeForAdHocWorkloadsEnabled, minServerMemoryInMB, maxServerMemoryInMB, isLpimEnabled, isIfiEnabled);
        }

        /// <summary> Initializes a new instance of SqlVmStorageConfigurationSettings. </summary>
        /// <param name="sqlDataSettings"> SQL Server Data Storage Settings. </param>
        /// <param name="sqlLogSettings"> SQL Server Log Storage Settings. </param>
        /// <param name="sqlTempDBSettings"> SQL Server TempDb Storage Settings. </param>
        /// <param name="isSqlSystemDBOnDataDisk"> SQL Server SystemDb Storage on DataPool if true. </param>
        /// <param name="diskConfigurationType"> Disk configuration to apply to SQL Server. </param>
        /// <param name="storageWorkloadType"> Storage workload type. </param>
        /// <returns> A new <see cref="Models.SqlVmStorageConfigurationSettings"/> instance for mocking. </returns>
        public static SqlVmStorageConfigurationSettings SqlVmStorageConfigurationSettings(SqlStorageSettings sqlDataSettings = null, SqlStorageSettings sqlLogSettings = null, SqlTempDBSettings sqlTempDBSettings = null, bool? isSqlSystemDBOnDataDisk = null, SqlVmDiskConfigurationType? diskConfigurationType = null, SqlVmStorageWorkloadType? storageWorkloadType = null)
        {
            return new SqlVmStorageConfigurationSettings(sqlDataSettings, sqlLogSettings, sqlTempDBSettings, isSqlSystemDBOnDataDisk, diskConfigurationType, storageWorkloadType);
        }

        /// <summary> Initializes a new instance of SqlStorageSettings. </summary>
        /// <param name="luns"> Logical Unit Numbers for the disks. </param>
        /// <param name="defaultFilePath"> SQL Server default file path. </param>
        /// <returns> A new <see cref="Models.SqlStorageSettings"/> instance for mocking. </returns>
        public static SqlStorageSettings SqlStorageSettings(IEnumerable<int> luns = null, string defaultFilePath = null)
        {
            luns ??= new List<int>();

            return new SqlStorageSettings(luns?.ToList(), defaultFilePath);
        }

        /// <summary> Initializes a new instance of SqlTempDBSettings. </summary>
        /// <param name="dataFileSize"> SQL Server tempdb data file size. </param>
        /// <param name="dataGrowth"> SQL Server tempdb data file autoGrowth size. </param>
        /// <param name="logFileSize"> SQL Server tempdb log file size. </param>
        /// <param name="logGrowth"> SQL Server tempdb log file autoGrowth size. </param>
        /// <param name="dataFileCount"> SQL Server tempdb data file count. </param>
        /// <param name="persistFolder"> SQL Server tempdb persist folder choice. </param>
        /// <param name="persistFolderPath"> SQL Server tempdb persist folder location. </param>
        /// <param name="logicalUnitNumbers"> Logical Unit Numbers for the disks. </param>
        /// <param name="defaultFilePath"> SQL Server default file path. </param>
        /// <returns> A new <see cref="Models.SqlTempDBSettings"/> instance for mocking. </returns>
        public static SqlTempDBSettings SqlTempDBSettings(int? dataFileSize = null, int? dataGrowth = null, int? logFileSize = null, int? logGrowth = null, int? dataFileCount = null, bool? persistFolder = null, string persistFolderPath = null, IEnumerable<int> logicalUnitNumbers = null, string defaultFilePath = null)
        {
            logicalUnitNumbers ??= new List<int>();

            return new SqlTempDBSettings(dataFileSize, dataGrowth, logFileSize, logGrowth, dataFileCount, persistFolder, persistFolderPath, logicalUnitNumbers?.ToList(), defaultFilePath);
        }

        /// <summary> Initializes a new instance of SqlVmAssessmentSettings. </summary>
        /// <param name="isEnabled"> Enable or disable assessment feature on SQL virtual machine. </param>
        /// <param name="runImmediately"> Run assessment immediately on SQL virtual machine. </param>
        /// <param name="schedule"> Schedule for Assessment. </param>
        /// <returns> A new <see cref="Models.SqlVmAssessmentSettings"/> instance for mocking. </returns>
        public static SqlVmAssessmentSettings SqlVmAssessmentSettings(bool? isEnabled = null, bool? runImmediately = null, SqlVmAssessmentSchedule schedule = null)
        {
            return new SqlVmAssessmentSettings(isEnabled, runImmediately, schedule);
        }

        /// <summary> Initializes a new instance of SqlVmAssessmentSchedule. </summary>
        /// <param name="isEnabled"> Enable or disable assessment schedule on SQL virtual machine. </param>
        /// <param name="weeklyInterval"> Number of weeks to schedule between 2 assessment runs. Takes value from 1-6. </param>
        /// <param name="monthlyOccurrence"> Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek day of the month. </param>
        /// <param name="dayOfWeek"> Day of the week to run assessment. </param>
        /// <param name="startTime"> Time of the day in HH:mm format. Eg. 17:30. </param>
        /// <returns> A new <see cref="Models.SqlVmAssessmentSchedule"/> instance for mocking. </returns>
        public static SqlVmAssessmentSchedule SqlVmAssessmentSchedule(bool? isEnabled = null, int? weeklyInterval = null, int? monthlyOccurrence = null, SqlVmAssessmentDayOfWeek? dayOfWeek = null, string startTime = null)
        {
            return new SqlVmAssessmentSchedule(isEnabled, weeklyInterval, monthlyOccurrence, dayOfWeek, startTime);
        }
    }
}
