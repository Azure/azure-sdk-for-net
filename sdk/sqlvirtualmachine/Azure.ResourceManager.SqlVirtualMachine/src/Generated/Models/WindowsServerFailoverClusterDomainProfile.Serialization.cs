// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class WindowsServerFailoverClusterDomainProfile : IUtf8JsonSerializable, IModelJsonSerializable<WindowsServerFailoverClusterDomainProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<WindowsServerFailoverClusterDomainProfile>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<WindowsServerFailoverClusterDomainProfile>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(DomainFqdn))
            {
                writer.WritePropertyName("domainFqdn"u8);
                writer.WriteStringValue(DomainFqdn);
            }
            if (Optional.IsDefined(OrganizationalUnitPath))
            {
                writer.WritePropertyName("ouPath"u8);
                writer.WriteStringValue(OrganizationalUnitPath);
            }
            if (Optional.IsDefined(ClusterBootstrapAccount))
            {
                writer.WritePropertyName("clusterBootstrapAccount"u8);
                writer.WriteStringValue(ClusterBootstrapAccount);
            }
            if (Optional.IsDefined(ClusterOperatorAccount))
            {
                writer.WritePropertyName("clusterOperatorAccount"u8);
                writer.WriteStringValue(ClusterOperatorAccount);
            }
            if (Optional.IsDefined(SqlServiceAccount))
            {
                writer.WritePropertyName("sqlServiceAccount"u8);
                writer.WriteStringValue(SqlServiceAccount);
            }
            if (Optional.IsDefined(FileShareWitnessPath))
            {
                writer.WritePropertyName("fileShareWitnessPath"u8);
                writer.WriteStringValue(FileShareWitnessPath);
            }
            if (Optional.IsDefined(StorageAccountUri))
            {
                writer.WritePropertyName("storageAccountUrl"u8);
                writer.WriteStringValue(StorageAccountUri.AbsoluteUri);
            }
            if (Optional.IsDefined(StorageAccountPrimaryKey))
            {
                writer.WritePropertyName("storageAccountPrimaryKey"u8);
                writer.WriteStringValue(StorageAccountPrimaryKey);
            }
            if (Optional.IsDefined(ClusterSubnetType))
            {
                writer.WritePropertyName("clusterSubnetType"u8);
                writer.WriteStringValue(ClusterSubnetType.Value.ToString());
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static WindowsServerFailoverClusterDomainProfile DeserializeWindowsServerFailoverClusterDomainProfile(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> domainFqdn = default;
            Optional<string> ouPath = default;
            Optional<string> clusterBootstrapAccount = default;
            Optional<string> clusterOperatorAccount = default;
            Optional<string> sqlServiceAccount = default;
            Optional<string> fileShareWitnessPath = default;
            Optional<Uri> storageAccountUrl = default;
            Optional<string> storageAccountPrimaryKey = default;
            Optional<SqlVmClusterSubnetType> clusterSubnetType = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("domainFqdn"u8))
                {
                    domainFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ouPath"u8))
                {
                    ouPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterBootstrapAccount"u8))
                {
                    clusterBootstrapAccount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterOperatorAccount"u8))
                {
                    clusterOperatorAccount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlServiceAccount"u8))
                {
                    sqlServiceAccount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileShareWitnessPath"u8))
                {
                    fileShareWitnessPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageAccountUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageAccountUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageAccountPrimaryKey"u8))
                {
                    storageAccountPrimaryKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterSubnetType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clusterSubnetType = new SqlVmClusterSubnetType(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new WindowsServerFailoverClusterDomainProfile(domainFqdn.Value, ouPath.Value, clusterBootstrapAccount.Value, clusterOperatorAccount.Value, sqlServiceAccount.Value, fileShareWitnessPath.Value, storageAccountUrl.Value, storageAccountPrimaryKey.Value, Optional.ToNullable(clusterSubnetType), rawData);
        }

        WindowsServerFailoverClusterDomainProfile IModelJsonSerializable<WindowsServerFailoverClusterDomainProfile>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeWindowsServerFailoverClusterDomainProfile(doc.RootElement, options);
        }

        BinaryData IModelSerializable<WindowsServerFailoverClusterDomainProfile>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        WindowsServerFailoverClusterDomainProfile IModelSerializable<WindowsServerFailoverClusterDomainProfile>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeWindowsServerFailoverClusterDomainProfile(doc.RootElement, options);
        }

        public static implicit operator RequestContent(WindowsServerFailoverClusterDomainProfile model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator WindowsServerFailoverClusterDomainProfile(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeWindowsServerFailoverClusterDomainProfile(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
