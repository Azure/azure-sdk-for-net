// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class WindowsServerFailoverClusterDomainProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DomainFqdn))
            {
                writer.WritePropertyName("domainFqdn");
                writer.WriteStringValue(DomainFqdn);
            }
            if (Optional.IsDefined(OrganizationalUnitPath))
            {
                writer.WritePropertyName("ouPath");
                writer.WriteStringValue(OrganizationalUnitPath);
            }
            if (Optional.IsDefined(ClusterBootstrapAccount))
            {
                writer.WritePropertyName("clusterBootstrapAccount");
                writer.WriteStringValue(ClusterBootstrapAccount);
            }
            if (Optional.IsDefined(ClusterOperatorAccount))
            {
                writer.WritePropertyName("clusterOperatorAccount");
                writer.WriteStringValue(ClusterOperatorAccount);
            }
            if (Optional.IsDefined(SqlServiceAccount))
            {
                writer.WritePropertyName("sqlServiceAccount");
                writer.WriteStringValue(SqlServiceAccount);
            }
            if (Optional.IsDefined(FileShareWitnessPath))
            {
                writer.WritePropertyName("fileShareWitnessPath");
                writer.WriteStringValue(FileShareWitnessPath);
            }
            if (Optional.IsDefined(StorageAccountUri))
            {
                writer.WritePropertyName("storageAccountUrl");
                writer.WriteStringValue(StorageAccountUri.AbsoluteUri);
            }
            if (Optional.IsDefined(StorageAccountPrimaryKey))
            {
                writer.WritePropertyName("storageAccountPrimaryKey");
                writer.WriteStringValue(StorageAccountPrimaryKey);
            }
            if (Optional.IsDefined(ClusterSubnetType))
            {
                writer.WritePropertyName("clusterSubnetType");
                writer.WriteStringValue(ClusterSubnetType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static WindowsServerFailoverClusterDomainProfile DeserializeWindowsServerFailoverClusterDomainProfile(JsonElement element)
        {
            Optional<string> domainFqdn = default;
            Optional<string> ouPath = default;
            Optional<string> clusterBootstrapAccount = default;
            Optional<string> clusterOperatorAccount = default;
            Optional<string> sqlServiceAccount = default;
            Optional<string> fileShareWitnessPath = default;
            Optional<Uri> storageAccountUrl = default;
            Optional<string> storageAccountPrimaryKey = default;
            Optional<SqlVmClusterSubnetType> clusterSubnetType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("domainFqdn"))
                {
                    domainFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ouPath"))
                {
                    ouPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterBootstrapAccount"))
                {
                    clusterBootstrapAccount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterOperatorAccount"))
                {
                    clusterOperatorAccount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlServiceAccount"))
                {
                    sqlServiceAccount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileShareWitnessPath"))
                {
                    fileShareWitnessPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageAccountUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storageAccountUrl = null;
                        continue;
                    }
                    storageAccountUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageAccountPrimaryKey"))
                {
                    storageAccountPrimaryKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterSubnetType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterSubnetType = new SqlVmClusterSubnetType(property.Value.GetString());
                    continue;
                }
            }
            return new WindowsServerFailoverClusterDomainProfile(domainFqdn.Value, ouPath.Value, clusterBootstrapAccount.Value, clusterOperatorAccount.Value, sqlServiceAccount.Value, fileShareWitnessPath.Value, storageAccountUrl.Value, storageAccountPrimaryKey.Value, Optional.ToNullable(clusterSubnetType));
        }
    }
}
