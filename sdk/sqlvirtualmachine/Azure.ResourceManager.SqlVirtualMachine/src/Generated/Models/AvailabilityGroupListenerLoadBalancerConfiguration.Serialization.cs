// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class AvailabilityGroupListenerLoadBalancerConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PrivateIPAddress))
            {
                writer.WritePropertyName("privateIpAddress");
                writer.WriteObjectValue(PrivateIPAddress);
            }
            if (Optional.IsDefined(PublicIPAddressResourceId))
            {
                writer.WritePropertyName("publicIpAddressResourceId");
                writer.WriteStringValue(PublicIPAddressResourceId);
            }
            if (Optional.IsDefined(LoadBalancerResourceId))
            {
                writer.WritePropertyName("loadBalancerResourceId");
                writer.WriteStringValue(LoadBalancerResourceId);
            }
            if (Optional.IsDefined(ProbePort))
            {
                writer.WritePropertyName("probePort");
                writer.WriteNumberValue(ProbePort.Value);
            }
            if (Optional.IsCollectionDefined(SqlVmInstances))
            {
                writer.WritePropertyName("sqlVirtualMachineInstances");
                writer.WriteStartArray();
                foreach (var item in SqlVmInstances)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AvailabilityGroupListenerLoadBalancerConfiguration DeserializeAvailabilityGroupListenerLoadBalancerConfiguration(JsonElement element)
        {
            Optional<AvailabilityGroupListenerPrivateIPAddress> privateIPAddress = default;
            Optional<ResourceIdentifier> publicIPAddressResourceId = default;
            Optional<ResourceIdentifier> loadBalancerResourceId = default;
            Optional<int> probePort = default;
            Optional<IList<ResourceIdentifier>> sqlVmInstances = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("privateIpAddress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    privateIPAddress = AvailabilityGroupListenerPrivateIPAddress.DeserializeAvailabilityGroupListenerPrivateIPAddress(property.Value);
                    continue;
                }
                if (property.NameEquals("publicIpAddressResourceId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    publicIPAddressResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("loadBalancerResourceId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    loadBalancerResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("probePort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    probePort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sqlVirtualMachineInstances"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new ResourceIdentifier(item.GetString()));
                    }
                    sqlVmInstances = array;
                    continue;
                }
            }
            return new AvailabilityGroupListenerLoadBalancerConfiguration(privateIPAddress.Value, publicIPAddressResourceId.Value, loadBalancerResourceId.Value, Optional.ToNullable(probePort), Optional.ToList(sqlVmInstances));
        }
    }
}
