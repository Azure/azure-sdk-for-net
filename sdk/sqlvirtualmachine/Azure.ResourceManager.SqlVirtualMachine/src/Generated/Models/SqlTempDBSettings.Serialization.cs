// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class SqlTempDBSettings : IUtf8JsonSerializable, IModelJsonSerializable<SqlTempDBSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SqlTempDBSettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SqlTempDBSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(DataFileSize))
            {
                writer.WritePropertyName("dataFileSize"u8);
                writer.WriteNumberValue(DataFileSize.Value);
            }
            if (Optional.IsDefined(DataGrowth))
            {
                writer.WritePropertyName("dataGrowth"u8);
                writer.WriteNumberValue(DataGrowth.Value);
            }
            if (Optional.IsDefined(LogFileSize))
            {
                writer.WritePropertyName("logFileSize"u8);
                writer.WriteNumberValue(LogFileSize.Value);
            }
            if (Optional.IsDefined(LogGrowth))
            {
                writer.WritePropertyName("logGrowth"u8);
                writer.WriteNumberValue(LogGrowth.Value);
            }
            if (Optional.IsDefined(DataFileCount))
            {
                writer.WritePropertyName("dataFileCount"u8);
                writer.WriteNumberValue(DataFileCount.Value);
            }
            if (Optional.IsDefined(PersistFolder))
            {
                writer.WritePropertyName("persistFolder"u8);
                writer.WriteBooleanValue(PersistFolder.Value);
            }
            if (Optional.IsDefined(PersistFolderPath))
            {
                writer.WritePropertyName("persistFolderPath"u8);
                writer.WriteStringValue(PersistFolderPath);
            }
            if (Optional.IsCollectionDefined(LogicalUnitNumbers))
            {
                writer.WritePropertyName("luns"u8);
                writer.WriteStartArray();
                foreach (var item in LogicalUnitNumbers)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DefaultFilePath))
            {
                writer.WritePropertyName("defaultFilePath"u8);
                writer.WriteStringValue(DefaultFilePath);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SqlTempDBSettings DeserializeSqlTempDBSettings(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> dataFileSize = default;
            Optional<int> dataGrowth = default;
            Optional<int> logFileSize = default;
            Optional<int> logGrowth = default;
            Optional<int> dataFileCount = default;
            Optional<bool> persistFolder = default;
            Optional<string> persistFolderPath = default;
            Optional<IList<int>> luns = default;
            Optional<string> defaultFilePath = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dataFileSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataFileSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dataGrowth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataGrowth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("logFileSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logFileSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("logGrowth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logGrowth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dataFileCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataFileCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("persistFolder"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    persistFolder = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("persistFolderPath"u8))
                {
                    persistFolderPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("luns"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    luns = array;
                    continue;
                }
                if (property.NameEquals("defaultFilePath"u8))
                {
                    defaultFilePath = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SqlTempDBSettings(Optional.ToNullable(dataFileSize), Optional.ToNullable(dataGrowth), Optional.ToNullable(logFileSize), Optional.ToNullable(logGrowth), Optional.ToNullable(dataFileCount), Optional.ToNullable(persistFolder), persistFolderPath.Value, Optional.ToList(luns), defaultFilePath.Value, rawData);
        }

        SqlTempDBSettings IModelJsonSerializable<SqlTempDBSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSqlTempDBSettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SqlTempDBSettings>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SqlTempDBSettings IModelSerializable<SqlTempDBSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSqlTempDBSettings(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="SqlTempDBSettings"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="SqlTempDBSettings"/> to convert. </param>
        public static implicit operator RequestContent(SqlTempDBSettings model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="SqlTempDBSettings"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator SqlTempDBSettings(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSqlTempDBSettings(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
