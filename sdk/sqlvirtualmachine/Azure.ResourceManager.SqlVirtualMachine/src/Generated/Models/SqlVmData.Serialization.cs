// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SqlVirtualMachine.Models;

namespace Azure.ResourceManager.SqlVirtualMachine
{
    public partial class SqlVmData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity");
                JsonSerializer.Serialize(writer, Identity);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(VirtualMachineResourceId))
            {
                writer.WritePropertyName("virtualMachineResourceId");
                writer.WriteStringValue(VirtualMachineResourceId);
            }
            if (Optional.IsDefined(SqlImageOffer))
            {
                writer.WritePropertyName("sqlImageOffer");
                writer.WriteStringValue(SqlImageOffer);
            }
            if (Optional.IsDefined(SqlServerLicenseType))
            {
                writer.WritePropertyName("sqlServerLicenseType");
                writer.WriteStringValue(SqlServerLicenseType.Value.ToString());
            }
            if (Optional.IsDefined(SqlManagement))
            {
                writer.WritePropertyName("sqlManagement");
                writer.WriteStringValue(SqlManagement.Value.ToString());
            }
            if (Optional.IsDefined(SqlImageSku))
            {
                writer.WritePropertyName("sqlImageSku");
                writer.WriteStringValue(SqlImageSku.Value.ToString());
            }
            if (Optional.IsDefined(SqlVmGroupResourceId))
            {
                writer.WritePropertyName("sqlVirtualMachineGroupResourceId");
                writer.WriteStringValue(SqlVmGroupResourceId);
            }
            if (Optional.IsDefined(WindowsServerFailoverClusterDomainCredentials))
            {
                writer.WritePropertyName("wsfcDomainCredentials");
                writer.WriteObjectValue(WindowsServerFailoverClusterDomainCredentials);
            }
            if (Optional.IsDefined(WindowsServerFailoverClusterStaticIP))
            {
                writer.WritePropertyName("wsfcStaticIp");
                writer.WriteStringValue(WindowsServerFailoverClusterStaticIP.ToString());
            }
            if (Optional.IsDefined(AutoPatchingSettings))
            {
                writer.WritePropertyName("autoPatchingSettings");
                writer.WriteObjectValue(AutoPatchingSettings);
            }
            if (Optional.IsDefined(AutoBackupSettings))
            {
                writer.WritePropertyName("autoBackupSettings");
                writer.WriteObjectValue(AutoBackupSettings);
            }
            if (Optional.IsDefined(KeyVaultCredentialSettings))
            {
                writer.WritePropertyName("keyVaultCredentialSettings");
                writer.WriteObjectValue(KeyVaultCredentialSettings);
            }
            if (Optional.IsDefined(ServerConfigurationsManagementSettings))
            {
                writer.WritePropertyName("serverConfigurationsManagementSettings");
                writer.WriteObjectValue(ServerConfigurationsManagementSettings);
            }
            if (Optional.IsDefined(StorageConfigurationSettings))
            {
                writer.WritePropertyName("storageConfigurationSettings");
                writer.WriteObjectValue(StorageConfigurationSettings);
            }
            if (Optional.IsDefined(AssessmentSettings))
            {
                writer.WritePropertyName("assessmentSettings");
                writer.WriteObjectValue(AssessmentSettings);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SqlVmData DeserializeSqlVmData(JsonElement element)
        {
            Optional<ManagedServiceIdentity> identity = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<ResourceIdentifier> virtualMachineResourceId = default;
            Optional<string> provisioningState = default;
            Optional<string> sqlImageOffer = default;
            Optional<SqlServerLicenseType> sqlServerLicenseType = default;
            Optional<SqlManagementMode> sqlManagement = default;
            Optional<SqlImageSku> sqlImageSku = default;
            Optional<ResourceIdentifier> sqlVmGroupResourceId = default;
            Optional<WindowsServerFailoverClusterDomainCredentials> windowsServerFailoverClusterDomainCredentials = default;
            Optional<IPAddress> windowsServerFailoverClusterStaticIP = default;
            Optional<SqlVmAutoPatchingSettings> autoPatchingSettings = default;
            Optional<SqlVmAutoBackupSettings> autoBackupSettings = default;
            Optional<SqlVmKeyVaultCredentialSettings> keyVaultCredentialSettings = default;
            Optional<SqlServerConfigurationsManagementSettings> serverConfigurationsManagementSettings = default;
            Optional<SqlVmStorageConfigurationSettings> storageConfigurationSettings = default;
            Optional<SqlVmAssessmentSettings> assessmentSettings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("virtualMachineResourceId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            virtualMachineResourceId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlImageOffer"))
                        {
                            sqlImageOffer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlServerLicenseType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            sqlServerLicenseType = new SqlServerLicenseType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlManagement"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            sqlManagement = new SqlManagementMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlImageSku"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            sqlImageSku = new SqlImageSku(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlVirtualMachineGroupResourceId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            sqlVmGroupResourceId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("wsfcDomainCredentials"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            windowsServerFailoverClusterDomainCredentials = WindowsServerFailoverClusterDomainCredentials.DeserializeWindowsServerFailoverClusterDomainCredentials(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("wsfcStaticIp"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            windowsServerFailoverClusterStaticIP = IPAddress.Parse(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("autoPatchingSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            autoPatchingSettings = SqlVmAutoPatchingSettings.DeserializeSqlVmAutoPatchingSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("autoBackupSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            autoBackupSettings = SqlVmAutoBackupSettings.DeserializeSqlVmAutoBackupSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("keyVaultCredentialSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            keyVaultCredentialSettings = SqlVmKeyVaultCredentialSettings.DeserializeSqlVmKeyVaultCredentialSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("serverConfigurationsManagementSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            serverConfigurationsManagementSettings = SqlServerConfigurationsManagementSettings.DeserializeSqlServerConfigurationsManagementSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("storageConfigurationSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            storageConfigurationSettings = SqlVmStorageConfigurationSettings.DeserializeSqlVmStorageConfigurationSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("assessmentSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            assessmentSettings = SqlVmAssessmentSettings.DeserializeSqlVmAssessmentSettings(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SqlVmData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, identity, virtualMachineResourceId.Value, provisioningState.Value, sqlImageOffer.Value, Optional.ToNullable(sqlServerLicenseType), Optional.ToNullable(sqlManagement), Optional.ToNullable(sqlImageSku), sqlVmGroupResourceId.Value, windowsServerFailoverClusterDomainCredentials.Value, windowsServerFailoverClusterStaticIP.Value, autoPatchingSettings.Value, autoBackupSettings.Value, keyVaultCredentialSettings.Value, serverConfigurationsManagementSettings.Value, storageConfigurationSettings.Value, assessmentSettings.Value);
        }
    }
}
