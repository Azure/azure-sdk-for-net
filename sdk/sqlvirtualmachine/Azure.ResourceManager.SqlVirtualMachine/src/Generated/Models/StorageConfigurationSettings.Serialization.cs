// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class StorageConfigurationSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SqlDataSettings))
            {
                writer.WritePropertyName("sqlDataSettings");
                writer.WriteObjectValue(SqlDataSettings);
            }
            if (Optional.IsDefined(SqlLogSettings))
            {
                writer.WritePropertyName("sqlLogSettings");
                writer.WriteObjectValue(SqlLogSettings);
            }
            if (Optional.IsDefined(SqlTempDbSettings))
            {
                writer.WritePropertyName("sqlTempDbSettings");
                writer.WriteObjectValue(SqlTempDbSettings);
            }
            if (Optional.IsDefined(SqlSystemDbOnDataDisk))
            {
                writer.WritePropertyName("sqlSystemDbOnDataDisk");
                writer.WriteBooleanValue(SqlSystemDbOnDataDisk.Value);
            }
            if (Optional.IsDefined(DiskConfigurationType))
            {
                writer.WritePropertyName("diskConfigurationType");
                writer.WriteStringValue(DiskConfigurationType.Value.ToString());
            }
            if (Optional.IsDefined(StorageWorkloadType))
            {
                writer.WritePropertyName("storageWorkloadType");
                writer.WriteStringValue(StorageWorkloadType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static StorageConfigurationSettings DeserializeStorageConfigurationSettings(JsonElement element)
        {
            Optional<SQLStorageSettings> sqlDataSettings = default;
            Optional<SQLStorageSettings> sqlLogSettings = default;
            Optional<SQLTempDbSettings> sqlTempDbSettings = default;
            Optional<bool> sqlSystemDbOnDataDisk = default;
            Optional<DiskConfigurationType> diskConfigurationType = default;
            Optional<StorageWorkloadType> storageWorkloadType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sqlDataSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sqlDataSettings = SQLStorageSettings.DeserializeSQLStorageSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("sqlLogSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sqlLogSettings = SQLStorageSettings.DeserializeSQLStorageSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("sqlTempDbSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sqlTempDbSettings = SQLTempDbSettings.DeserializeSQLTempDbSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("sqlSystemDbOnDataDisk"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sqlSystemDbOnDataDisk = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("diskConfigurationType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diskConfigurationType = new DiskConfigurationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageWorkloadType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    storageWorkloadType = new StorageWorkloadType(property.Value.GetString());
                    continue;
                }
            }
            return new StorageConfigurationSettings(sqlDataSettings.Value, sqlLogSettings.Value, sqlTempDbSettings.Value, Optional.ToNullable(sqlSystemDbOnDataDisk), Optional.ToNullable(diskConfigurationType), Optional.ToNullable(storageWorkloadType));
        }
    }
}
