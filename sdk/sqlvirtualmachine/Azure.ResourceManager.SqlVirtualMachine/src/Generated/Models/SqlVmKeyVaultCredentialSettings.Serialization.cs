// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class SqlVmKeyVaultCredentialSettings : IUtf8JsonSerializable, IModelJsonSerializable<SqlVmKeyVaultCredentialSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SqlVmKeyVaultCredentialSettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SqlVmKeyVaultCredentialSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SqlVmKeyVaultCredentialSettings>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("enable"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(CredentialName))
            {
                writer.WritePropertyName("credentialName"u8);
                writer.WriteStringValue(CredentialName);
            }
            if (Optional.IsDefined(AzureKeyVaultUri))
            {
                writer.WritePropertyName("azureKeyVaultUrl"u8);
                writer.WriteStringValue(AzureKeyVaultUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ServicePrincipalName))
            {
                writer.WritePropertyName("servicePrincipalName"u8);
                writer.WriteStringValue(ServicePrincipalName);
            }
            if (Optional.IsDefined(ServicePrincipalSecret))
            {
                writer.WritePropertyName("servicePrincipalSecret"u8);
                writer.WriteStringValue(ServicePrincipalSecret);
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SqlVmKeyVaultCredentialSettings DeserializeSqlVmKeyVaultCredentialSettings(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> enable = default;
            Optional<string> credentialName = default;
            Optional<Uri> azureKeyVaultUrl = default;
            Optional<string> servicePrincipalName = default;
            Optional<string> servicePrincipalSecret = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("credentialName"u8))
                {
                    credentialName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("azureKeyVaultUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureKeyVaultUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("servicePrincipalName"u8))
                {
                    servicePrincipalName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("servicePrincipalSecret"u8))
                {
                    servicePrincipalSecret = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SqlVmKeyVaultCredentialSettings(Optional.ToNullable(enable), credentialName.Value, azureKeyVaultUrl.Value, servicePrincipalName.Value, servicePrincipalSecret.Value, serializedAdditionalRawData);
        }

        SqlVmKeyVaultCredentialSettings IModelJsonSerializable<SqlVmKeyVaultCredentialSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SqlVmKeyVaultCredentialSettings>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSqlVmKeyVaultCredentialSettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SqlVmKeyVaultCredentialSettings>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SqlVmKeyVaultCredentialSettings>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SqlVmKeyVaultCredentialSettings IModelSerializable<SqlVmKeyVaultCredentialSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SqlVmKeyVaultCredentialSettings>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSqlVmKeyVaultCredentialSettings(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="SqlVmKeyVaultCredentialSettings"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="SqlVmKeyVaultCredentialSettings"/> to convert. </param>
        public static implicit operator RequestContent(SqlVmKeyVaultCredentialSettings model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="SqlVmKeyVaultCredentialSettings"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator SqlVmKeyVaultCredentialSettings(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSqlVmKeyVaultCredentialSettings(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
