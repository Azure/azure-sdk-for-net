// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class SqlVmAutoBackupSettings : IUtf8JsonSerializable, IJsonModel<SqlVmAutoBackupSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SqlVmAutoBackupSettings>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<SqlVmAutoBackupSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<SqlVmAutoBackupSettings>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<SqlVmAutoBackupSettings>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("enable"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(IsEncryptionEnabled))
            {
                writer.WritePropertyName("enableEncryption"u8);
                writer.WriteBooleanValue(IsEncryptionEnabled.Value);
            }
            if (Optional.IsDefined(RetentionPeriodInDays))
            {
                writer.WritePropertyName("retentionPeriod"u8);
                writer.WriteNumberValue(RetentionPeriodInDays.Value);
            }
            if (Optional.IsDefined(StorageAccountUri))
            {
                writer.WritePropertyName("storageAccountUrl"u8);
                writer.WriteStringValue(StorageAccountUri.AbsoluteUri);
            }
            if (Optional.IsDefined(StorageContainerName))
            {
                writer.WritePropertyName("storageContainerName"u8);
                writer.WriteStringValue(StorageContainerName);
            }
            if (Optional.IsDefined(StorageAccessKey))
            {
                writer.WritePropertyName("storageAccessKey"u8);
                writer.WriteStringValue(StorageAccessKey);
            }
            if (Optional.IsDefined(Password))
            {
                writer.WritePropertyName("password"u8);
                writer.WriteStringValue(Password);
            }
            if (Optional.IsDefined(AreSystemDbsIncludedInBackup))
            {
                writer.WritePropertyName("backupSystemDbs"u8);
                writer.WriteBooleanValue(AreSystemDbsIncludedInBackup.Value);
            }
            if (Optional.IsDefined(BackupScheduleType))
            {
                writer.WritePropertyName("backupScheduleType"u8);
                writer.WriteStringValue(BackupScheduleType.Value.ToString());
            }
            if (Optional.IsDefined(FullBackupFrequency))
            {
                writer.WritePropertyName("fullBackupFrequency"u8);
                writer.WriteStringValue(FullBackupFrequency.Value.ToString());
            }
            if (Optional.IsCollectionDefined(DaysOfWeek))
            {
                writer.WritePropertyName("daysOfWeek"u8);
                writer.WriteStartArray();
                foreach (var item in DaysOfWeek)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FullBackupStartHour))
            {
                writer.WritePropertyName("fullBackupStartTime"u8);
                writer.WriteNumberValue(FullBackupStartHour.Value);
            }
            if (Optional.IsDefined(FullBackupWindowHours))
            {
                writer.WritePropertyName("fullBackupWindowHours"u8);
                writer.WriteNumberValue(FullBackupWindowHours.Value);
            }
            if (Optional.IsDefined(LogBackupFrequency))
            {
                writer.WritePropertyName("logBackupFrequency"u8);
                writer.WriteNumberValue(LogBackupFrequency.Value);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SqlVmAutoBackupSettings IJsonModel<SqlVmAutoBackupSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SqlVmAutoBackupSettings)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSqlVmAutoBackupSettings(document.RootElement, options);
        }

        internal static SqlVmAutoBackupSettings DeserializeSqlVmAutoBackupSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> enable = default;
            Optional<bool> enableEncryption = default;
            Optional<int> retentionPeriod = default;
            Optional<Uri> storageAccountUrl = default;
            Optional<string> storageContainerName = default;
            Optional<string> storageAccessKey = default;
            Optional<string> password = default;
            Optional<bool> backupSystemDbs = default;
            Optional<SqVmBackupScheduleType> backupScheduleType = default;
            Optional<SqlVmFullBackupFrequency> fullBackupFrequency = default;
            Optional<IList<SqlVmAutoBackupDayOfWeek>> daysOfWeek = default;
            Optional<int> fullBackupStartTime = default;
            Optional<int> fullBackupWindowHours = default;
            Optional<int> logBackupFrequency = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableEncryption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableEncryption = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("retentionPeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retentionPeriod = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("storageAccountUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageAccountUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageContainerName"u8))
                {
                    storageContainerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageAccessKey"u8))
                {
                    storageAccessKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("password"u8))
                {
                    password = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backupSystemDbs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupSystemDbs = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("backupScheduleType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupScheduleType = new SqVmBackupScheduleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fullBackupFrequency"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fullBackupFrequency = new SqlVmFullBackupFrequency(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("daysOfWeek"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SqlVmAutoBackupDayOfWeek> array = new List<SqlVmAutoBackupDayOfWeek>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SqlVmAutoBackupDayOfWeek(item.GetString()));
                    }
                    daysOfWeek = array;
                    continue;
                }
                if (property.NameEquals("fullBackupStartTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fullBackupStartTime = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fullBackupWindowHours"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fullBackupWindowHours = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("logBackupFrequency"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logBackupFrequency = property.Value.GetInt32();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SqlVmAutoBackupSettings(Optional.ToNullable(enable), Optional.ToNullable(enableEncryption), Optional.ToNullable(retentionPeriod), storageAccountUrl.Value, storageContainerName.Value, storageAccessKey.Value, password.Value, Optional.ToNullable(backupSystemDbs), Optional.ToNullable(backupScheduleType), Optional.ToNullable(fullBackupFrequency), Optional.ToList(daysOfWeek), Optional.ToNullable(fullBackupStartTime), Optional.ToNullable(fullBackupWindowHours), Optional.ToNullable(logBackupFrequency), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SqlVmAutoBackupSettings>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SqlVmAutoBackupSettings)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        SqlVmAutoBackupSettings IPersistableModel<SqlVmAutoBackupSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SqlVmAutoBackupSettings)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeSqlVmAutoBackupSettings(document.RootElement, options);
        }

        string IPersistableModel<SqlVmAutoBackupSettings>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
