// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class SqlConnectivityUpdateSettings : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ConnectivityType))
            {
                writer.WritePropertyName("connectivityType"u8);
                writer.WriteStringValue(ConnectivityType.Value.ToString());
            }
            if (Core.Optional.IsDefined(Port))
            {
                writer.WritePropertyName("port"u8);
                writer.WriteNumberValue(Port.Value);
            }
            if (Core.Optional.IsDefined(SqlAuthUpdateUserName))
            {
                writer.WritePropertyName("sqlAuthUpdateUserName"u8);
                writer.WriteStringValue(SqlAuthUpdateUserName);
            }
            if (Core.Optional.IsDefined(SqlAuthUpdatePassword))
            {
                writer.WritePropertyName("sqlAuthUpdatePassword"u8);
                writer.WriteStringValue(SqlAuthUpdatePassword);
            }
            writer.WriteEndObject();
        }

        internal static SqlConnectivityUpdateSettings DeserializeSqlConnectivityUpdateSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<SqlServerConnectivityType> connectivityType = default;
            Core.Optional<int> port = default;
            Core.Optional<string> sqlAuthUpdateUserName = default;
            Core.Optional<string> sqlAuthUpdatePassword = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("connectivityType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectivityType = new SqlServerConnectivityType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("port"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    port = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sqlAuthUpdateUserName"u8))
                {
                    sqlAuthUpdateUserName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlAuthUpdatePassword"u8))
                {
                    sqlAuthUpdatePassword = property.Value.GetString();
                    continue;
                }
            }
            return new SqlConnectivityUpdateSettings(Core.Optional.ToNullable(connectivityType), Core.Optional.ToNullable(port), sqlAuthUpdateUserName.Value, sqlAuthUpdatePassword.Value);
        }
    }
}
