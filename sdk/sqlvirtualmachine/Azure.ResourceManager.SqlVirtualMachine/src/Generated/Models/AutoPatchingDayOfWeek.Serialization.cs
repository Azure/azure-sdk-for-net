// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    internal static partial class AutoPatchingDayOfWeekExtensions
    {
        public static string ToSerialString(this AutoPatchingDayOfWeek value) => value switch
        {
            AutoPatchingDayOfWeek.Everyday => "Everyday",
            AutoPatchingDayOfWeek.Monday => "Monday",
            AutoPatchingDayOfWeek.Tuesday => "Tuesday",
            AutoPatchingDayOfWeek.Wednesday => "Wednesday",
            AutoPatchingDayOfWeek.Thursday => "Thursday",
            AutoPatchingDayOfWeek.Friday => "Friday",
            AutoPatchingDayOfWeek.Saturday => "Saturday",
            AutoPatchingDayOfWeek.Sunday => "Sunday",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AutoPatchingDayOfWeek value.")
        };

        public static AutoPatchingDayOfWeek ToAutoPatchingDayOfWeek(this string value)
        {
            if (string.Equals(value, "Everyday", StringComparison.InvariantCultureIgnoreCase)) return AutoPatchingDayOfWeek.Everyday;
            if (string.Equals(value, "Monday", StringComparison.InvariantCultureIgnoreCase)) return AutoPatchingDayOfWeek.Monday;
            if (string.Equals(value, "Tuesday", StringComparison.InvariantCultureIgnoreCase)) return AutoPatchingDayOfWeek.Tuesday;
            if (string.Equals(value, "Wednesday", StringComparison.InvariantCultureIgnoreCase)) return AutoPatchingDayOfWeek.Wednesday;
            if (string.Equals(value, "Thursday", StringComparison.InvariantCultureIgnoreCase)) return AutoPatchingDayOfWeek.Thursday;
            if (string.Equals(value, "Friday", StringComparison.InvariantCultureIgnoreCase)) return AutoPatchingDayOfWeek.Friday;
            if (string.Equals(value, "Saturday", StringComparison.InvariantCultureIgnoreCase)) return AutoPatchingDayOfWeek.Saturday;
            if (string.Equals(value, "Sunday", StringComparison.InvariantCultureIgnoreCase)) return AutoPatchingDayOfWeek.Sunday;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AutoPatchingDayOfWeek value.");
        }
    }
}
