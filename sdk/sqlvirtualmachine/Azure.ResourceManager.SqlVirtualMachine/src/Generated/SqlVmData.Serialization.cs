// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SqlVirtualMachine.Models;

namespace Azure.ResourceManager.SqlVirtualMachine
{
    public partial class SqlVmData : IUtf8JsonSerializable, IJsonModel<SqlVmData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SqlVmData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SqlVmData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlVmData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SqlVmData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Identity != null)
            {
                writer.WritePropertyName("identity"u8);
                JsonSerializer.Serialize(writer, Identity);
            }
            if (!(Tags is ChangeTrackingDictionary<string, string> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && SystemData != null)
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (VirtualMachineResourceId != null)
            {
                writer.WritePropertyName("virtualMachineResourceId"u8);
                writer.WriteStringValue(VirtualMachineResourceId);
            }
            if (options.Format != "W" && ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState);
            }
            if (SqlImageOffer != null)
            {
                writer.WritePropertyName("sqlImageOffer"u8);
                writer.WriteStringValue(SqlImageOffer);
            }
            if (SqlServerLicenseType.HasValue)
            {
                writer.WritePropertyName("sqlServerLicenseType"u8);
                writer.WriteStringValue(SqlServerLicenseType.Value.ToString());
            }
            if (SqlManagement.HasValue)
            {
                writer.WritePropertyName("sqlManagement"u8);
                writer.WriteStringValue(SqlManagement.Value.ToString());
            }
            if (SqlImageSku.HasValue)
            {
                writer.WritePropertyName("sqlImageSku"u8);
                writer.WriteStringValue(SqlImageSku.Value.ToString());
            }
            if (SqlVmGroupResourceId != null)
            {
                writer.WritePropertyName("sqlVirtualMachineGroupResourceId"u8);
                writer.WriteStringValue(SqlVmGroupResourceId);
            }
            if (WindowsServerFailoverClusterDomainCredentials != null)
            {
                writer.WritePropertyName("wsfcDomainCredentials"u8);
                writer.WriteObjectValue(WindowsServerFailoverClusterDomainCredentials);
            }
            if (WindowsServerFailoverClusterStaticIP != null)
            {
                writer.WritePropertyName("wsfcStaticIp"u8);
                writer.WriteStringValue(WindowsServerFailoverClusterStaticIP.ToString());
            }
            if (AutoPatchingSettings != null)
            {
                writer.WritePropertyName("autoPatchingSettings"u8);
                writer.WriteObjectValue(AutoPatchingSettings);
            }
            if (AutoBackupSettings != null)
            {
                writer.WritePropertyName("autoBackupSettings"u8);
                writer.WriteObjectValue(AutoBackupSettings);
            }
            if (KeyVaultCredentialSettings != null)
            {
                writer.WritePropertyName("keyVaultCredentialSettings"u8);
                writer.WriteObjectValue(KeyVaultCredentialSettings);
            }
            if (ServerConfigurationsManagementSettings != null)
            {
                writer.WritePropertyName("serverConfigurationsManagementSettings"u8);
                writer.WriteObjectValue(ServerConfigurationsManagementSettings);
            }
            if (StorageConfigurationSettings != null)
            {
                writer.WritePropertyName("storageConfigurationSettings"u8);
                writer.WriteObjectValue(StorageConfigurationSettings);
            }
            if (AssessmentSettings != null)
            {
                writer.WritePropertyName("assessmentSettings"u8);
                writer.WriteObjectValue(AssessmentSettings);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SqlVmData IJsonModel<SqlVmData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlVmData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SqlVmData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSqlVmData(document.RootElement, options);
        }

        internal static SqlVmData DeserializeSqlVmData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ManagedServiceIdentity> identity = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<ResourceIdentifier> virtualMachineResourceId = default;
            Optional<string> provisioningState = default;
            Optional<string> sqlImageOffer = default;
            Optional<SqlServerLicenseType> sqlServerLicenseType = default;
            Optional<SqlManagementMode> sqlManagement = default;
            Optional<SqlImageSku> sqlImageSku = default;
            Optional<ResourceIdentifier> sqlVmGroupResourceId = default;
            Optional<WindowsServerFailoverClusterDomainCredentials> windowsServerFailoverClusterDomainCredentials = default;
            Optional<IPAddress> windowsServerFailoverClusterStaticIP = default;
            Optional<SqlVmAutoPatchingSettings> autoPatchingSettings = default;
            Optional<SqlVmAutoBackupSettings> autoBackupSettings = default;
            Optional<SqlVmKeyVaultCredentialSettings> keyVaultCredentialSettings = default;
            Optional<SqlServerConfigurationsManagementSettings> serverConfigurationsManagementSettings = default;
            Optional<SqlVmStorageConfigurationSettings> storageConfigurationSettings = default;
            Optional<SqlVmAssessmentSettings> assessmentSettings = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("virtualMachineResourceId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            virtualMachineResourceId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlImageOffer"u8))
                        {
                            sqlImageOffer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlServerLicenseType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sqlServerLicenseType = new SqlServerLicenseType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlManagement"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sqlManagement = new SqlManagementMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlImageSku"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sqlImageSku = new SqlImageSku(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlVirtualMachineGroupResourceId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sqlVmGroupResourceId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("wsfcDomainCredentials"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            windowsServerFailoverClusterDomainCredentials = WindowsServerFailoverClusterDomainCredentials.DeserializeWindowsServerFailoverClusterDomainCredentials(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("wsfcStaticIp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            windowsServerFailoverClusterStaticIP = IPAddress.Parse(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("autoPatchingSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autoPatchingSettings = SqlVmAutoPatchingSettings.DeserializeSqlVmAutoPatchingSettings(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("autoBackupSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autoBackupSettings = SqlVmAutoBackupSettings.DeserializeSqlVmAutoBackupSettings(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("keyVaultCredentialSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            keyVaultCredentialSettings = SqlVmKeyVaultCredentialSettings.DeserializeSqlVmKeyVaultCredentialSettings(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("serverConfigurationsManagementSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            serverConfigurationsManagementSettings = SqlServerConfigurationsManagementSettings.DeserializeSqlServerConfigurationsManagementSettings(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("storageConfigurationSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            storageConfigurationSettings = SqlVmStorageConfigurationSettings.DeserializeSqlVmStorageConfigurationSettings(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("assessmentSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessmentSettings = SqlVmAssessmentSettings.DeserializeSqlVmAssessmentSettings(property0.Value, options);
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SqlVmData(
                id,
                name,
                type,
                systemData.Value,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                identity,
                virtualMachineResourceId.Value,
                provisioningState.Value,
                sqlImageOffer.Value,
                Optional.ToNullable(sqlServerLicenseType),
                Optional.ToNullable(sqlManagement),
                Optional.ToNullable(sqlImageSku),
                sqlVmGroupResourceId.Value,
                windowsServerFailoverClusterDomainCredentials.Value,
                windowsServerFailoverClusterStaticIP.Value,
                autoPatchingSettings.Value,
                autoBackupSettings.Value,
                keyVaultCredentialSettings.Value,
                serverConfigurationsManagementSettings.Value,
                storageConfigurationSettings.Value,
                assessmentSettings.Value,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SqlVmData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlVmData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SqlVmData)} does not support '{options.Format}' format.");
            }
        }

        SqlVmData IPersistableModel<SqlVmData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlVmData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSqlVmData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SqlVmData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SqlVmData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
