// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StorageCache.Models;

namespace Azure.ResourceManager.StorageCache
{
    public partial class AutoExportJobData : IUtf8JsonSerializable, IJsonModel<AutoExportJobData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AutoExportJobData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AutoExportJobData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoExportJobData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutoExportJobData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(AdminStatus))
            {
                writer.WritePropertyName("adminStatus"u8);
                writer.WriteStringValue(AdminStatus.Value.ToString());
            }
            if (Optional.IsCollectionDefined(AutoExportPrefixes))
            {
                writer.WritePropertyName("autoExportPrefixes"u8);
                writer.WriteStartArray();
                foreach (var item in AutoExportPrefixes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("status"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(StatusCode))
            {
                writer.WritePropertyName("statusCode"u8);
                writer.WriteStringValue(StatusCode);
            }
            if (options.Format != "W" && Optional.IsDefined(StatusMessage))
            {
                writer.WritePropertyName("statusMessage"u8);
                writer.WriteStringValue(StatusMessage);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalFilesExported))
            {
                writer.WritePropertyName("totalFilesExported"u8);
                writer.WriteNumberValue(TotalFilesExported.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalMiBExported))
            {
                writer.WritePropertyName("totalMiBExported"u8);
                writer.WriteNumberValue(TotalMiBExported.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalFilesFailed))
            {
                writer.WritePropertyName("totalFilesFailed"u8);
                writer.WriteNumberValue(TotalFilesFailed.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ExportIterationCount))
            {
                writer.WritePropertyName("exportIterationCount"u8);
                writer.WriteNumberValue(ExportIterationCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastSuccessfulIterationCompletionTimeUTC))
            {
                writer.WritePropertyName("lastSuccessfulIterationCompletionTimeUTC"u8);
                writer.WriteStringValue(LastSuccessfulIterationCompletionTimeUTC.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentIterationFilesDiscovered))
            {
                writer.WritePropertyName("currentIterationFilesDiscovered"u8);
                writer.WriteNumberValue(CurrentIterationFilesDiscovered.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentIterationMiBDiscovered))
            {
                writer.WritePropertyName("currentIterationMiBDiscovered"u8);
                writer.WriteNumberValue(CurrentIterationMiBDiscovered.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentIterationFilesExported))
            {
                writer.WritePropertyName("currentIterationFilesExported"u8);
                writer.WriteNumberValue(CurrentIterationFilesExported.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentIterationMiBExported))
            {
                writer.WritePropertyName("currentIterationMiBExported"u8);
                writer.WriteNumberValue(CurrentIterationMiBExported.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentIterationFilesFailed))
            {
                writer.WritePropertyName("currentIterationFilesFailed"u8);
                writer.WriteNumberValue(CurrentIterationFilesFailed.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastStartedTimeUTC))
            {
                writer.WritePropertyName("lastStartedTimeUTC"u8);
                writer.WriteStringValue(LastStartedTimeUTC.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastCompletionTimeUTC))
            {
                writer.WritePropertyName("lastCompletionTimeUTC"u8);
                writer.WriteStringValue(LastCompletionTimeUTC.Value, "O");
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        AutoExportJobData IJsonModel<AutoExportJobData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoExportJobData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutoExportJobData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutoExportJobData(document.RootElement, options);
        }

        internal static AutoExportJobData DeserializeAutoExportJobData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            AutoExportJobProvisioningStateType? provisioningState = default;
            AutoExportJobAdminStatus? adminStatus = default;
            IList<string> autoExportPrefixes = default;
            AutoExportStatusType? state = default;
            string statusCode = default;
            string statusMessage = default;
            long? totalFilesExported = default;
            long? totalMiBExported = default;
            long? totalFilesFailed = default;
            int? exportIterationCount = default;
            DateTimeOffset? lastSuccessfulIterationCompletionTimeUTC = default;
            long? currentIterationFilesDiscovered = default;
            long? currentIterationMiBDiscovered = default;
            long? currentIterationFilesExported = default;
            long? currentIterationMiBExported = default;
            long? currentIterationFilesFailed = default;
            DateTimeOffset? lastStartedTimeUTC = default;
            DateTimeOffset? lastCompletionTimeUTC = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerStorageCacheContext.Default);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new AutoExportJobProvisioningStateType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("adminStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            adminStatus = new AutoExportJobAdminStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("autoExportPrefixes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            autoExportPrefixes = array;
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("state"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    state = new AutoExportStatusType(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("statusCode"u8))
                                {
                                    statusCode = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("statusMessage"u8))
                                {
                                    statusMessage = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("totalFilesExported"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    totalFilesExported = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("totalMiBExported"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    totalMiBExported = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("totalFilesFailed"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    totalFilesFailed = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("exportIterationCount"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    exportIterationCount = property1.Value.GetInt32();
                                    continue;
                                }
                                if (property1.NameEquals("lastSuccessfulIterationCompletionTimeUTC"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    lastSuccessfulIterationCompletionTimeUTC = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("currentIterationFilesDiscovered"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    currentIterationFilesDiscovered = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("currentIterationMiBDiscovered"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    currentIterationMiBDiscovered = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("currentIterationFilesExported"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    currentIterationFilesExported = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("currentIterationMiBExported"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    currentIterationMiBExported = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("currentIterationFilesFailed"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    currentIterationFilesFailed = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("lastStartedTimeUTC"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    lastStartedTimeUTC = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("lastCompletionTimeUTC"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    lastCompletionTimeUTC = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AutoExportJobData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                provisioningState,
                adminStatus,
                autoExportPrefixes ?? new ChangeTrackingList<string>(),
                state,
                statusCode,
                statusMessage,
                totalFilesExported,
                totalMiBExported,
                totalFilesFailed,
                exportIterationCount,
                lastSuccessfulIterationCompletionTimeUTC,
                currentIterationFilesDiscovered,
                currentIterationMiBDiscovered,
                currentIterationFilesExported,
                currentIterationMiBExported,
                currentIterationFilesFailed,
                lastStartedTimeUTC,
                lastCompletionTimeUTC,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AutoExportJobData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoExportJobData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerStorageCacheContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AutoExportJobData)} does not support writing '{options.Format}' format.");
            }
        }

        AutoExportJobData IPersistableModel<AutoExportJobData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoExportJobData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAutoExportJobData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutoExportJobData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AutoExportJobData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
