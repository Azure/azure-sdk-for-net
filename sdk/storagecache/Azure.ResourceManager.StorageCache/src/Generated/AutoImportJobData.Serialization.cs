// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StorageCache.Models;

namespace Azure.ResourceManager.StorageCache
{
    public partial class AutoImportJobData : IUtf8JsonSerializable, IJsonModel<AutoImportJobData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AutoImportJobData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AutoImportJobData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoImportJobData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutoImportJobData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(AdminStatus))
            {
                writer.WritePropertyName("adminStatus"u8);
                writer.WriteStringValue(AdminStatus.Value.ToString());
            }
            if (Optional.IsCollectionDefined(AutoImportPrefixes))
            {
                writer.WritePropertyName("autoImportPrefixes"u8);
                writer.WriteStartArray();
                foreach (var item in AutoImportPrefixes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ConflictResolutionMode))
            {
                writer.WritePropertyName("conflictResolutionMode"u8);
                writer.WriteStringValue(ConflictResolutionMode.Value.ToString());
            }
            if (Optional.IsDefined(EnableDeletions))
            {
                writer.WritePropertyName("enableDeletions"u8);
                writer.WriteBooleanValue(EnableDeletions.Value);
            }
            if (Optional.IsDefined(MaximumErrors))
            {
                writer.WritePropertyName("maximumErrors"u8);
                writer.WriteNumberValue(MaximumErrors.Value);
            }
            writer.WritePropertyName("status"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(StatusCode))
            {
                writer.WritePropertyName("statusCode"u8);
                writer.WriteStringValue(StatusCode);
            }
            if (options.Format != "W" && Optional.IsDefined(StatusMessage))
            {
                writer.WritePropertyName("statusMessage"u8);
                writer.WriteStringValue(StatusMessage);
            }
            if (options.Format != "W" && Optional.IsDefined(ScanStartOn))
            {
                writer.WritePropertyName("scanStartTime"u8);
                writer.WriteStringValue(ScanStartOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ScanEndOn))
            {
                writer.WritePropertyName("scanEndTime"u8);
                writer.WriteStringValue(ScanEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(TotalBlobsWalked))
            {
                writer.WritePropertyName("totalBlobsWalked"u8);
                writer.WriteNumberValue(TotalBlobsWalked.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RateOfBlobWalk))
            {
                writer.WritePropertyName("rateOfBlobWalk"u8);
                writer.WriteNumberValue(RateOfBlobWalk.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalBlobsImported))
            {
                writer.WritePropertyName("totalBlobsImported"u8);
                writer.WriteNumberValue(TotalBlobsImported.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RateOfBlobImport))
            {
                writer.WritePropertyName("rateOfBlobImport"u8);
                writer.WriteNumberValue(RateOfBlobImport.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ImportedFiles))
            {
                writer.WritePropertyName("importedFiles"u8);
                writer.WriteNumberValue(ImportedFiles.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ImportedDirectories))
            {
                writer.WritePropertyName("importedDirectories"u8);
                writer.WriteNumberValue(ImportedDirectories.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ImportedSymlinks))
            {
                writer.WritePropertyName("importedSymlinks"u8);
                writer.WriteNumberValue(ImportedSymlinks.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PreexistingFiles))
            {
                writer.WritePropertyName("preexistingFiles"u8);
                writer.WriteNumberValue(PreexistingFiles.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PreexistingDirectories))
            {
                writer.WritePropertyName("preexistingDirectories"u8);
                writer.WriteNumberValue(PreexistingDirectories.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PreexistingSymlinks))
            {
                writer.WritePropertyName("preexistingSymlinks"u8);
                writer.WriteNumberValue(PreexistingSymlinks.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalErrors))
            {
                writer.WritePropertyName("totalErrors"u8);
                writer.WriteNumberValue(TotalErrors.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalConflicts))
            {
                writer.WritePropertyName("totalConflicts"u8);
                writer.WriteNumberValue(TotalConflicts.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BlobSyncEvents))
            {
                writer.WritePropertyName("blobSyncEvents"u8);
                writer.WriteObjectValue(BlobSyncEvents, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LastStartedTimeUTC))
            {
                writer.WritePropertyName("lastStartedTimeUTC"u8);
                writer.WriteStringValue(LastStartedTimeUTC.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastCompletionTimeUTC))
            {
                writer.WritePropertyName("lastCompletionTimeUTC"u8);
                writer.WriteStringValue(LastCompletionTimeUTC.Value, "O");
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        AutoImportJobData IJsonModel<AutoImportJobData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoImportJobData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutoImportJobData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutoImportJobData(document.RootElement, options);
        }

        internal static AutoImportJobData DeserializeAutoImportJobData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            AutoImportJobPropertiesProvisioningState? provisioningState = default;
            AutoImportJobPropertiesAdminStatus? adminStatus = default;
            IList<string> autoImportPrefixes = default;
            ConflictResolutionMode? conflictResolutionMode = default;
            bool? enableDeletions = default;
            long? maximumErrors = default;
            AutoImportJobState? state = default;
            string statusCode = default;
            string statusMessage = default;
            DateTimeOffset? scanStartTime = default;
            DateTimeOffset? scanEndTime = default;
            long? totalBlobsWalked = default;
            long? rateOfBlobWalk = default;
            long? totalBlobsImported = default;
            long? rateOfBlobImport = default;
            long? importedFiles = default;
            long? importedDirectories = default;
            long? importedSymlinks = default;
            long? preexistingFiles = default;
            long? preexistingDirectories = default;
            long? preexistingSymlinks = default;
            long? totalErrors = default;
            long? totalConflicts = default;
            AutoImportJobPropertiesStatusBlobSyncEvents blobSyncEvents = default;
            DateTimeOffset? lastStartedTimeUTC = default;
            DateTimeOffset? lastCompletionTimeUTC = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerStorageCacheContext.Default);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new AutoImportJobPropertiesProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("adminStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            adminStatus = new AutoImportJobPropertiesAdminStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("autoImportPrefixes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            autoImportPrefixes = array;
                            continue;
                        }
                        if (property0.NameEquals("conflictResolutionMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            conflictResolutionMode = new ConflictResolutionMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enableDeletions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableDeletions = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("maximumErrors"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maximumErrors = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("state"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    state = new AutoImportJobState(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("statusCode"u8))
                                {
                                    statusCode = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("statusMessage"u8))
                                {
                                    statusMessage = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("scanStartTime"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    scanStartTime = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("scanEndTime"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    scanEndTime = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("totalBlobsWalked"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    totalBlobsWalked = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("rateOfBlobWalk"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    rateOfBlobWalk = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("totalBlobsImported"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    totalBlobsImported = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("rateOfBlobImport"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    rateOfBlobImport = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("importedFiles"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    importedFiles = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("importedDirectories"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    importedDirectories = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("importedSymlinks"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    importedSymlinks = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("preexistingFiles"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    preexistingFiles = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("preexistingDirectories"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    preexistingDirectories = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("preexistingSymlinks"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    preexistingSymlinks = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("totalErrors"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    totalErrors = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("totalConflicts"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    totalConflicts = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("blobSyncEvents"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    blobSyncEvents = AutoImportJobPropertiesStatusBlobSyncEvents.DeserializeAutoImportJobPropertiesStatusBlobSyncEvents(property1.Value, options);
                                    continue;
                                }
                                if (property1.NameEquals("lastStartedTimeUTC"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    lastStartedTimeUTC = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("lastCompletionTimeUTC"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    lastCompletionTimeUTC = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AutoImportJobData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                provisioningState,
                adminStatus,
                autoImportPrefixes ?? new ChangeTrackingList<string>(),
                conflictResolutionMode,
                enableDeletions,
                maximumErrors,
                state,
                statusCode,
                statusMessage,
                scanStartTime,
                scanEndTime,
                totalBlobsWalked,
                rateOfBlobWalk,
                totalBlobsImported,
                rateOfBlobImport,
                importedFiles,
                importedDirectories,
                importedSymlinks,
                preexistingFiles,
                preexistingDirectories,
                preexistingSymlinks,
                totalErrors,
                totalConflicts,
                blobSyncEvents,
                lastStartedTimeUTC,
                lastCompletionTimeUTC,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AutoImportJobData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoImportJobData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerStorageCacheContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AutoImportJobData)} does not support writing '{options.Format}' format.");
            }
        }

        AutoImportJobData IPersistableModel<AutoImportJobData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoImportJobData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAutoImportJobData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutoImportJobData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AutoImportJobData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
