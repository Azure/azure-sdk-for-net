// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.StorageCache
{
    /// <summary>
    /// A class representing a collection of <see cref="AutoImportJobResource"/> and their operations.
    /// Each <see cref="AutoImportJobResource"/> in the collection will belong to the same instance of <see cref="AmlFileSystemResource"/>.
    /// To get an <see cref="AutoImportJobCollection"/> instance call the GetAutoImportJobs method from an instance of <see cref="AmlFileSystemResource"/>.
    /// </summary>
    public partial class AutoImportJobCollection : ArmCollection, IEnumerable<AutoImportJobResource>, IAsyncEnumerable<AutoImportJobResource>
    {
        private readonly ClientDiagnostics _autoImportJobautoImportJobsClientDiagnostics;
        private readonly AutoImportJobsRestOperations _autoImportJobautoImportJobsRestClient;

        /// <summary> Initializes a new instance of the <see cref="AutoImportJobCollection"/> class for mocking. </summary>
        protected AutoImportJobCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AutoImportJobCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AutoImportJobCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _autoImportJobautoImportJobsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.StorageCache", AutoImportJobResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AutoImportJobResource.ResourceType, out string autoImportJobautoImportJobsApiVersion);
            _autoImportJobautoImportJobsRestClient = new AutoImportJobsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, autoImportJobautoImportJobsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != AmlFileSystemResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, AmlFileSystemResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update an auto import job.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="autoImportJobName"> Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric. </param>
        /// <param name="data"> Object containing the user-selectable properties of the auto import job. If read-only properties are included, they must match the existing values of those properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoImportJobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoImportJobName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<AutoImportJobResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string autoImportJobName, AutoImportJobData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoImportJobName, nameof(autoImportJobName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _autoImportJobautoImportJobsClientDiagnostics.CreateScope("AutoImportJobCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _autoImportJobautoImportJobsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, data, cancellationToken).ConfigureAwait(false);
                var operation = new StorageCacheArmOperation<AutoImportJobResource>(new AutoImportJobOperationSource(Client), _autoImportJobautoImportJobsClientDiagnostics, Pipeline, _autoImportJobautoImportJobsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update an auto import job.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="autoImportJobName"> Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric. </param>
        /// <param name="data"> Object containing the user-selectable properties of the auto import job. If read-only properties are included, they must match the existing values of those properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoImportJobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoImportJobName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<AutoImportJobResource> CreateOrUpdate(WaitUntil waitUntil, string autoImportJobName, AutoImportJobData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoImportJobName, nameof(autoImportJobName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _autoImportJobautoImportJobsClientDiagnostics.CreateScope("AutoImportJobCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _autoImportJobautoImportJobsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, data, cancellationToken);
                var operation = new StorageCacheArmOperation<AutoImportJobResource>(new AutoImportJobOperationSource(Client), _autoImportJobautoImportJobsClientDiagnostics, Pipeline, _autoImportJobautoImportJobsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns an auto import job.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="autoImportJobName"> Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoImportJobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoImportJobName"/> is null. </exception>
        public virtual async Task<Response<AutoImportJobResource>> GetAsync(string autoImportJobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoImportJobName, nameof(autoImportJobName));

            using var scope = _autoImportJobautoImportJobsClientDiagnostics.CreateScope("AutoImportJobCollection.Get");
            scope.Start();
            try
            {
                var response = await _autoImportJobautoImportJobsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AutoImportJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns an auto import job.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="autoImportJobName"> Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoImportJobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoImportJobName"/> is null. </exception>
        public virtual Response<AutoImportJobResource> Get(string autoImportJobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoImportJobName, nameof(autoImportJobName));

            using var scope = _autoImportJobautoImportJobsClientDiagnostics.CreateScope("AutoImportJobCollection.Get");
            scope.Start();
            try
            {
                var response = _autoImportJobautoImportJobsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AutoImportJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the auto import jobs the user has access to under an AML File System.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_ListByAmlFileSystem</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutoImportJobResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutoImportJobResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _autoImportJobautoImportJobsRestClient.CreateListByAmlFileSystemRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _autoImportJobautoImportJobsRestClient.CreateListByAmlFileSystemNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new AutoImportJobResource(Client, AutoImportJobData.DeserializeAutoImportJobData(e)), _autoImportJobautoImportJobsClientDiagnostics, Pipeline, "AutoImportJobCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Returns all the auto import jobs the user has access to under an AML File System.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_ListByAmlFileSystem</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutoImportJobResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutoImportJobResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _autoImportJobautoImportJobsRestClient.CreateListByAmlFileSystemRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _autoImportJobautoImportJobsRestClient.CreateListByAmlFileSystemNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new AutoImportJobResource(Client, AutoImportJobData.DeserializeAutoImportJobData(e)), _autoImportJobautoImportJobsClientDiagnostics, Pipeline, "AutoImportJobCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="autoImportJobName"> Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoImportJobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoImportJobName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string autoImportJobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoImportJobName, nameof(autoImportJobName));

            using var scope = _autoImportJobautoImportJobsClientDiagnostics.CreateScope("AutoImportJobCollection.Exists");
            scope.Start();
            try
            {
                var response = await _autoImportJobautoImportJobsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="autoImportJobName"> Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoImportJobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoImportJobName"/> is null. </exception>
        public virtual Response<bool> Exists(string autoImportJobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoImportJobName, nameof(autoImportJobName));

            using var scope = _autoImportJobautoImportJobsClientDiagnostics.CreateScope("AutoImportJobCollection.Exists");
            scope.Start();
            try
            {
                var response = _autoImportJobautoImportJobsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="autoImportJobName"> Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoImportJobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoImportJobName"/> is null. </exception>
        public virtual async Task<NullableResponse<AutoImportJobResource>> GetIfExistsAsync(string autoImportJobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoImportJobName, nameof(autoImportJobName));

            using var scope = _autoImportJobautoImportJobsClientDiagnostics.CreateScope("AutoImportJobCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _autoImportJobautoImportJobsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<AutoImportJobResource>(response.GetRawResponse());
                return Response.FromValue(new AutoImportJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>autoImportJobs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AutoImportJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="autoImportJobName"> Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="autoImportJobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="autoImportJobName"/> is null. </exception>
        public virtual NullableResponse<AutoImportJobResource> GetIfExists(string autoImportJobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autoImportJobName, nameof(autoImportJobName));

            using var scope = _autoImportJobautoImportJobsClientDiagnostics.CreateScope("AutoImportJobCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _autoImportJobautoImportJobsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, autoImportJobName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<AutoImportJobResource>(response.GetRawResponse());
                return Response.FromValue(new AutoImportJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AutoImportJobResource> IEnumerable<AutoImportJobResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AutoImportJobResource> IAsyncEnumerable<AutoImportJobResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
