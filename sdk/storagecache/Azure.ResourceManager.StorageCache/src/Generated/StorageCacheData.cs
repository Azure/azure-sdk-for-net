// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StorageCache.Models;

namespace Azure.ResourceManager.StorageCache
{
    /// <summary> A class representing the StorageCache data model. </summary>
    public partial class StorageCacheData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of StorageCacheData. </summary>
        /// <param name="location"> The location. </param>
        public StorageCacheData(AzureLocation location) : base(location)
        {
            MountAddresses = new ChangeTrackingList<IPAddress>();
            Zones = new ChangeTrackingList<string>();
            PrimingJobs = new ChangeTrackingList<PrimingJob>();
            SpaceAllocation = new ChangeTrackingList<StorageTargetSpaceAllocation>();
        }

        /// <summary> Initializes a new instance of StorageCacheData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity">
        /// The identity of the cache, if configured.
        /// Serialized Name: Cache.identity
        /// </param>
        /// <param name="sku">
        /// SKU for the Cache.
        /// Serialized Name: Cache.sku
        /// </param>
        /// <param name="cacheSizeGB">
        /// The size of this Cache, in GB.
        /// Serialized Name: Cache.properties.cacheSizeGB
        /// </param>
        /// <param name="health">
        /// Health of the Cache.
        /// Serialized Name: Cache.properties.health
        /// </param>
        /// <param name="mountAddresses">
        /// Array of IP addresses that can be used by clients mounting this Cache.
        /// Serialized Name: Cache.properties.mountAddresses
        /// </param>
        /// <param name="provisioningState">
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// Serialized Name: Cache.properties.provisioningState
        /// </param>
        /// <param name="subnet">
        /// Subnet used for the Cache.
        /// Serialized Name: Cache.properties.subnet
        /// </param>
        /// <param name="upgradeStatus">
        /// Upgrade status of the Cache.
        /// Serialized Name: Cache.properties.upgradeStatus
        /// </param>
        /// <param name="upgradeSettings">
        /// Upgrade settings of the Cache.
        /// Serialized Name: Cache.properties.upgradeSettings
        /// </param>
        /// <param name="networkSettings">
        /// Specifies network settings of the cache.
        /// Serialized Name: Cache.properties.networkSettings
        /// </param>
        /// <param name="encryptionSettings">
        /// Specifies encryption settings of the cache.
        /// Serialized Name: Cache.properties.encryptionSettings
        /// </param>
        /// <param name="securitySettings">
        /// Specifies security settings of the cache.
        /// Serialized Name: Cache.properties.securitySettings
        /// </param>
        /// <param name="directoryServicesSettings">
        /// Specifies Directory Services settings of the cache.
        /// Serialized Name: Cache.properties.directoryServicesSettings
        /// </param>
        /// <param name="zones">
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// Serialized Name: Cache.properties.zones
        /// </param>
        /// <param name="primingJobs">
        /// Specifies the priming jobs defined in the cache.
        /// Serialized Name: Cache.properties.primingJobs
        /// </param>
        /// <param name="spaceAllocation">
        /// Specifies the space allocation percentage for each storage target in the cache.
        /// Serialized Name: Cache.properties.spaceAllocation
        /// </param>
        internal StorageCacheData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ManagedServiceIdentity identity, StorageCacheSkuInfo sku, int? cacheSizeGB, StorageCacheHealth health, IReadOnlyList<IPAddress> mountAddresses, StorageCacheProvisioningStateType? provisioningState, ResourceIdentifier subnet, StorageCacheUpgradeStatus upgradeStatus, StorageCacheUpgradeSettings upgradeSettings, StorageCacheNetworkSettings networkSettings, StorageCacheEncryptionSettings encryptionSettings, StorageCacheSecuritySettings securitySettings, StorageCacheDirectorySettings directoryServicesSettings, IList<string> zones, IReadOnlyList<PrimingJob> primingJobs, IReadOnlyList<StorageTargetSpaceAllocation> spaceAllocation) : base(id, name, resourceType, systemData, tags, location)
        {
            Identity = identity;
            Sku = sku;
            CacheSizeGB = cacheSizeGB;
            Health = health;
            MountAddresses = mountAddresses;
            ProvisioningState = provisioningState;
            Subnet = subnet;
            UpgradeStatus = upgradeStatus;
            UpgradeSettings = upgradeSettings;
            NetworkSettings = networkSettings;
            EncryptionSettings = encryptionSettings;
            SecuritySettings = securitySettings;
            DirectoryServicesSettings = directoryServicesSettings;
            Zones = zones;
            PrimingJobs = primingJobs;
            SpaceAllocation = spaceAllocation;
        }

        /// <summary>
        /// The identity of the cache, if configured.
        /// Serialized Name: Cache.identity
        /// </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// SKU for the Cache.
        /// Serialized Name: Cache.sku
        /// </summary>
        internal StorageCacheSkuInfo Sku { get; set; }
        /// <summary>
        /// SKU name for this Cache.
        /// Serialized Name: CacheSku.name
        /// </summary>
        public string SkuName
        {
            get => Sku is null ? default : Sku.Name;
            set
            {
                if (Sku is null)
                    Sku = new StorageCacheSkuInfo();
                Sku.Name = value;
            }
        }

        /// <summary>
        /// The size of this Cache, in GB.
        /// Serialized Name: Cache.properties.cacheSizeGB
        /// </summary>
        public int? CacheSizeGB { get; set; }
        /// <summary>
        /// Health of the Cache.
        /// Serialized Name: Cache.properties.health
        /// </summary>
        public StorageCacheHealth Health { get; }
        /// <summary>
        /// Array of IP addresses that can be used by clients mounting this Cache.
        /// Serialized Name: Cache.properties.mountAddresses
        /// </summary>
        public IReadOnlyList<IPAddress> MountAddresses { get; }
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// Serialized Name: Cache.properties.provisioningState
        /// </summary>
        public StorageCacheProvisioningStateType? ProvisioningState { get; }
        /// <summary>
        /// Subnet used for the Cache.
        /// Serialized Name: Cache.properties.subnet
        /// </summary>
        public ResourceIdentifier Subnet { get; set; }
        /// <summary>
        /// Upgrade status of the Cache.
        /// Serialized Name: Cache.properties.upgradeStatus
        /// </summary>
        public StorageCacheUpgradeStatus UpgradeStatus { get; }
        /// <summary>
        /// Upgrade settings of the Cache.
        /// Serialized Name: Cache.properties.upgradeSettings
        /// </summary>
        public StorageCacheUpgradeSettings UpgradeSettings { get; set; }
        /// <summary>
        /// Specifies network settings of the cache.
        /// Serialized Name: Cache.properties.networkSettings
        /// </summary>
        public StorageCacheNetworkSettings NetworkSettings { get; set; }
        /// <summary>
        /// Specifies encryption settings of the cache.
        /// Serialized Name: Cache.properties.encryptionSettings
        /// </summary>
        public StorageCacheEncryptionSettings EncryptionSettings { get; set; }
        /// <summary>
        /// Specifies security settings of the cache.
        /// Serialized Name: Cache.properties.securitySettings
        /// </summary>
        internal StorageCacheSecuritySettings SecuritySettings { get; set; }
        /// <summary>
        /// NFS access policies defined for this cache.
        /// Serialized Name: CacheSecuritySettings.accessPolicies
        /// </summary>
        public IList<NfsAccessPolicy> SecurityAccessPolicies
        {
            get
            {
                if (SecuritySettings is null)
                    SecuritySettings = new StorageCacheSecuritySettings();
                return SecuritySettings.AccessPolicies;
            }
        }

        /// <summary>
        /// Specifies Directory Services settings of the cache.
        /// Serialized Name: Cache.properties.directoryServicesSettings
        /// </summary>
        public StorageCacheDirectorySettings DirectoryServicesSettings { get; set; }
        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// Serialized Name: Cache.properties.zones
        /// </summary>
        public IList<string> Zones { get; }
        /// <summary>
        /// Specifies the priming jobs defined in the cache.
        /// Serialized Name: Cache.properties.primingJobs
        /// </summary>
        public IReadOnlyList<PrimingJob> PrimingJobs { get; }
        /// <summary>
        /// Specifies the space allocation percentage for each storage target in the cache.
        /// Serialized Name: Cache.properties.spaceAllocation
        /// </summary>
        public IReadOnlyList<StorageTargetSpaceAllocation> SpaceAllocation { get; }
    }
}
