// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageCache.Models
{
    public partial class CacheUpgradeStatus
    {
        internal static CacheUpgradeStatus DeserializeCacheUpgradeStatus(JsonElement element)
        {
            Optional<string> currentFirmwareVersion = default;
            Optional<FirmwareStatusType> firmwareUpdateStatus = default;
            Optional<DateTimeOffset> firmwareUpdateDeadline = default;
            Optional<DateTimeOffset> lastFirmwareUpdate = default;
            Optional<string> pendingFirmwareVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("currentFirmwareVersion"))
                {
                    currentFirmwareVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firmwareUpdateStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    firmwareUpdateStatus = new FirmwareStatusType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("firmwareUpdateDeadline"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    firmwareUpdateDeadline = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastFirmwareUpdate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastFirmwareUpdate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("pendingFirmwareVersion"))
                {
                    pendingFirmwareVersion = property.Value.GetString();
                    continue;
                }
            }
            return new CacheUpgradeStatus(currentFirmwareVersion.Value, Optional.ToNullable(firmwareUpdateStatus), Optional.ToNullable(firmwareUpdateDeadline), Optional.ToNullable(lastFirmwareUpdate), pendingFirmwareVersion.Value);
        }
    }
}
