// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StorageCache.Models
{
    /// <summary> The operational state of auto export. InProgress indicates the export is running.  Disabling indicates the user has requested to disable the export but the disabling is still in progress. Disabled indicates auto export has been disabled.  DisableFailed indicates the disabling has failed.  Failed means the export was unable to continue, due to a fatal error. </summary>
    public readonly partial struct AutoExportStatusType : IEquatable<AutoExportStatusType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AutoExportStatusType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AutoExportStatusType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InProgressValue = "InProgress";
        private const string DisablingValue = "Disabling";
        private const string DisabledValue = "Disabled";
        private const string DisableFailedValue = "DisableFailed";
        private const string FailedValue = "Failed";

        /// <summary> InProgress. </summary>
        public static AutoExportStatusType InProgress { get; } = new AutoExportStatusType(InProgressValue);
        /// <summary> Disabling. </summary>
        public static AutoExportStatusType Disabling { get; } = new AutoExportStatusType(DisablingValue);
        /// <summary> Disabled. </summary>
        public static AutoExportStatusType Disabled { get; } = new AutoExportStatusType(DisabledValue);
        /// <summary> DisableFailed. </summary>
        public static AutoExportStatusType DisableFailed { get; } = new AutoExportStatusType(DisableFailedValue);
        /// <summary> Failed. </summary>
        public static AutoExportStatusType Failed { get; } = new AutoExportStatusType(FailedValue);
        /// <summary> Determines if two <see cref="AutoExportStatusType"/> values are the same. </summary>
        public static bool operator ==(AutoExportStatusType left, AutoExportStatusType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AutoExportStatusType"/> values are not the same. </summary>
        public static bool operator !=(AutoExportStatusType left, AutoExportStatusType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AutoExportStatusType"/>. </summary>
        public static implicit operator AutoExportStatusType(string value) => new AutoExportStatusType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AutoExportStatusType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AutoExportStatusType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
