// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageCache.Models
{
    public partial class CacheUpgradeSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(UpgradeScheduleEnabled))
            {
                writer.WritePropertyName("upgradeScheduleEnabled");
                writer.WriteBooleanValue(UpgradeScheduleEnabled.Value);
            }
            if (Optional.IsDefined(ScheduledOn))
            {
                writer.WritePropertyName("scheduledTime");
                writer.WriteStringValue(ScheduledOn.Value, "O");
            }
            writer.WriteEndObject();
        }

        internal static CacheUpgradeSettings DeserializeCacheUpgradeSettings(JsonElement element)
        {
            Optional<bool> upgradeScheduleEnabled = default;
            Optional<DateTimeOffset> scheduledTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("upgradeScheduleEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    upgradeScheduleEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("scheduledTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scheduledTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new CacheUpgradeSettings(Optional.ToNullable(upgradeScheduleEnabled), Optional.ToNullable(scheduledTime));
        }
    }
}
