// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageCache.Models
{
    public partial class AmlFileSystemRootSquashSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode"u8);
                writer.WriteStringValue(Mode.Value.ToString());
            }
            if (Optional.IsDefined(NoSquashNidLists))
            {
                writer.WritePropertyName("noSquashNidLists"u8);
                writer.WriteStringValue(NoSquashNidLists);
            }
            if (Optional.IsDefined(SquashUID))
            {
                writer.WritePropertyName("squashUID"u8);
                writer.WriteNumberValue(SquashUID.Value);
            }
            if (Optional.IsDefined(SquashGID))
            {
                writer.WritePropertyName("squashGID"u8);
                writer.WriteNumberValue(SquashGID.Value);
            }
            writer.WriteEndObject();
        }

        internal static AmlFileSystemRootSquashSettings DeserializeAmlFileSystemRootSquashSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<AmlFileSystemSquashMode> mode = default;
            Optional<string> noSquashNidLists = default;
            Optional<long> squashUID = default;
            Optional<long> squashGID = default;
            Optional<string> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("mode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new AmlFileSystemSquashMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("noSquashNidLists"u8))
                {
                    noSquashNidLists = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("squashUID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    squashUID = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("squashGID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    squashGID = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
            }
            return new AmlFileSystemRootSquashSettings(Optional.ToNullable(mode), noSquashNidLists.Value, Optional.ToNullable(squashUID), Optional.ToNullable(squashGID), status.Value);
        }
    }
}
