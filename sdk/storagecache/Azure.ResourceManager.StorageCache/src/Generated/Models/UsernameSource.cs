// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StorageCache.Models
{
    /// <summary> This setting determines how the cache gets username and group names for clients. </summary>
    public readonly partial struct UsernameSource : IEquatable<UsernameSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UsernameSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UsernameSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ADValue = "AD";
        private const string LdapValue = "LDAP";
        private const string FileValue = "File";
        private const string NoneValue = "None";

        /// <summary> AD. </summary>
        public static UsernameSource AD { get; } = new UsernameSource(ADValue);
        /// <summary> LDAP. </summary>
        public static UsernameSource Ldap { get; } = new UsernameSource(LdapValue);
        /// <summary> File. </summary>
        public static UsernameSource File { get; } = new UsernameSource(FileValue);
        /// <summary> None. </summary>
        public static UsernameSource None { get; } = new UsernameSource(NoneValue);
        /// <summary> Determines if two <see cref="UsernameSource"/> values are the same. </summary>
        public static bool operator ==(UsernameSource left, UsernameSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UsernameSource"/> values are not the same. </summary>
        public static bool operator !=(UsernameSource left, UsernameSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UsernameSource"/>. </summary>
        public static implicit operator UsernameSource(string value) => new UsernameSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UsernameSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UsernameSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
