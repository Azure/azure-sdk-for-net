// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageCache.Models
{
    public partial class AutoImportJobPropertiesStatusBlobSyncEvents : IUtf8JsonSerializable, IJsonModel<AutoImportJobPropertiesStatusBlobSyncEvents>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AutoImportJobPropertiesStatusBlobSyncEvents>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AutoImportJobPropertiesStatusBlobSyncEvents>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoImportJobPropertiesStatusBlobSyncEvents>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutoImportJobPropertiesStatusBlobSyncEvents)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ImportedFiles))
            {
                writer.WritePropertyName("importedFiles"u8);
                writer.WriteNumberValue(ImportedFiles.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ImportedDirectories))
            {
                writer.WritePropertyName("importedDirectories"u8);
                writer.WriteNumberValue(ImportedDirectories.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ImportedSymlinks))
            {
                writer.WritePropertyName("importedSymlinks"u8);
                writer.WriteNumberValue(ImportedSymlinks.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PreexistingFiles))
            {
                writer.WritePropertyName("preexistingFiles"u8);
                writer.WriteNumberValue(PreexistingFiles.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PreexistingDirectories))
            {
                writer.WritePropertyName("preexistingDirectories"u8);
                writer.WriteNumberValue(PreexistingDirectories.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PreexistingSymlinks))
            {
                writer.WritePropertyName("preexistingSymlinks"u8);
                writer.WriteNumberValue(PreexistingSymlinks.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalBlobsImported))
            {
                writer.WritePropertyName("totalBlobsImported"u8);
                writer.WriteNumberValue(TotalBlobsImported.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RateOfBlobImport))
            {
                writer.WritePropertyName("rateOfBlobImport"u8);
                writer.WriteNumberValue(RateOfBlobImport.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalErrors))
            {
                writer.WritePropertyName("totalErrors"u8);
                writer.WriteNumberValue(TotalErrors.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalConflicts))
            {
                writer.WritePropertyName("totalConflicts"u8);
                writer.WriteNumberValue(TotalConflicts.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Deletions))
            {
                writer.WritePropertyName("deletions"u8);
                writer.WriteNumberValue(Deletions.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastChangeFeedEventConsumedOn))
            {
                writer.WritePropertyName("lastChangeFeedEventConsumedTime"u8);
                writer.WriteStringValue(LastChangeFeedEventConsumedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastTimeFullySynchronized))
            {
                writer.WritePropertyName("lastTimeFullySynchronized"u8);
                writer.WriteStringValue(LastTimeFullySynchronized.Value, "O");
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        AutoImportJobPropertiesStatusBlobSyncEvents IJsonModel<AutoImportJobPropertiesStatusBlobSyncEvents>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoImportJobPropertiesStatusBlobSyncEvents>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutoImportJobPropertiesStatusBlobSyncEvents)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutoImportJobPropertiesStatusBlobSyncEvents(document.RootElement, options);
        }

        internal static AutoImportJobPropertiesStatusBlobSyncEvents DeserializeAutoImportJobPropertiesStatusBlobSyncEvents(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long? importedFiles = default;
            long? importedDirectories = default;
            long? importedSymlinks = default;
            long? preexistingFiles = default;
            long? preexistingDirectories = default;
            long? preexistingSymlinks = default;
            long? totalBlobsImported = default;
            long? rateOfBlobImport = default;
            long? totalErrors = default;
            long? totalConflicts = default;
            long? deletions = default;
            DateTimeOffset? lastChangeFeedEventConsumedTime = default;
            DateTimeOffset? lastTimeFullySynchronized = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("importedFiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    importedFiles = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("importedDirectories"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    importedDirectories = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("importedSymlinks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    importedSymlinks = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("preexistingFiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    preexistingFiles = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("preexistingDirectories"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    preexistingDirectories = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("preexistingSymlinks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    preexistingSymlinks = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalBlobsImported"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalBlobsImported = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rateOfBlobImport"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rateOfBlobImport = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalErrors = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalConflicts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalConflicts = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("deletions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deletions = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("lastChangeFeedEventConsumedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastChangeFeedEventConsumedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastTimeFullySynchronized"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastTimeFullySynchronized = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AutoImportJobPropertiesStatusBlobSyncEvents(
                importedFiles,
                importedDirectories,
                importedSymlinks,
                preexistingFiles,
                preexistingDirectories,
                preexistingSymlinks,
                totalBlobsImported,
                rateOfBlobImport,
                totalErrors,
                totalConflicts,
                deletions,
                lastChangeFeedEventConsumedTime,
                lastTimeFullySynchronized,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AutoImportJobPropertiesStatusBlobSyncEvents>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoImportJobPropertiesStatusBlobSyncEvents>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerStorageCacheContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AutoImportJobPropertiesStatusBlobSyncEvents)} does not support writing '{options.Format}' format.");
            }
        }

        AutoImportJobPropertiesStatusBlobSyncEvents IPersistableModel<AutoImportJobPropertiesStatusBlobSyncEvents>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutoImportJobPropertiesStatusBlobSyncEvents>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAutoImportJobPropertiesStatusBlobSyncEvents(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutoImportJobPropertiesStatusBlobSyncEvents)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AutoImportJobPropertiesStatusBlobSyncEvents>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
