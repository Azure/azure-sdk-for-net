// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageCache.Models
{
    public partial class CacheDirectorySettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ActiveDirectory))
            {
                writer.WritePropertyName("activeDirectory");
                writer.WriteObjectValue(ActiveDirectory);
            }
            if (Optional.IsDefined(UsernameDownload))
            {
                writer.WritePropertyName("usernameDownload");
                writer.WriteObjectValue(UsernameDownload);
            }
            writer.WriteEndObject();
        }

        internal static CacheDirectorySettings DeserializeCacheDirectorySettings(JsonElement element)
        {
            Optional<CacheActiveDirectorySettings> activeDirectory = default;
            Optional<CacheUsernameDownloadSettings> usernameDownload = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("activeDirectory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    activeDirectory = CacheActiveDirectorySettings.DeserializeCacheActiveDirectorySettings(property.Value);
                    continue;
                }
                if (property.NameEquals("usernameDownload"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    usernameDownload = CacheUsernameDownloadSettings.DeserializeCacheUsernameDownloadSettings(property.Value);
                    continue;
                }
            }
            return new CacheDirectorySettings(activeDirectory.Value, usernameDownload.Value);
        }
    }
}
