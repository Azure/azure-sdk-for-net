// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.StorageCache.Models
{
    /// <summary> The storage account blob change feed status of the auto import job. </summary>
    public partial class AutoImportJobPropertiesStatusBlobSyncEvents
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AutoImportJobPropertiesStatusBlobSyncEvents"/>. </summary>
        internal AutoImportJobPropertiesStatusBlobSyncEvents()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AutoImportJobPropertiesStatusBlobSyncEvents"/>. </summary>
        /// <param name="importedFiles"> Number of files imported during auto import. </param>
        /// <param name="importedDirectories"> Number of directories imported during auto import. </param>
        /// <param name="importedSymlinks"> Number of symlinks imported during auto import. </param>
        /// <param name="preexistingFiles"> Number of preexisting files during auto import. </param>
        /// <param name="preexistingDirectories"> Number of preexisting directories during auto import. </param>
        /// <param name="preexistingSymlinks"> Number of preexisting symlinks during auto import. </param>
        /// <param name="totalBlobsImported"> Total number of blobs imported during auto import. </param>
        /// <param name="rateOfBlobImport"> Rate of blob import per second during auto import. </param>
        /// <param name="totalErrors"> Total errors encountered during auto import. </param>
        /// <param name="totalConflicts"> Total conflicts encountered during auto import. </param>
        /// <param name="deletions"> Number of deletions during auto import. </param>
        /// <param name="lastChangeFeedEventConsumedOn"> Date and time of the last Change Feed event consumed. </param>
        /// <param name="lastTimeFullySynchronized"> Date and time when last fully synchronized. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AutoImportJobPropertiesStatusBlobSyncEvents(long? importedFiles, long? importedDirectories, long? importedSymlinks, long? preexistingFiles, long? preexistingDirectories, long? preexistingSymlinks, long? totalBlobsImported, long? rateOfBlobImport, long? totalErrors, long? totalConflicts, long? deletions, DateTimeOffset? lastChangeFeedEventConsumedOn, DateTimeOffset? lastTimeFullySynchronized, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ImportedFiles = importedFiles;
            ImportedDirectories = importedDirectories;
            ImportedSymlinks = importedSymlinks;
            PreexistingFiles = preexistingFiles;
            PreexistingDirectories = preexistingDirectories;
            PreexistingSymlinks = preexistingSymlinks;
            TotalBlobsImported = totalBlobsImported;
            RateOfBlobImport = rateOfBlobImport;
            TotalErrors = totalErrors;
            TotalConflicts = totalConflicts;
            Deletions = deletions;
            LastChangeFeedEventConsumedOn = lastChangeFeedEventConsumedOn;
            LastTimeFullySynchronized = lastTimeFullySynchronized;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Number of files imported during auto import. </summary>
        public long? ImportedFiles { get; }
        /// <summary> Number of directories imported during auto import. </summary>
        public long? ImportedDirectories { get; }
        /// <summary> Number of symlinks imported during auto import. </summary>
        public long? ImportedSymlinks { get; }
        /// <summary> Number of preexisting files during auto import. </summary>
        public long? PreexistingFiles { get; }
        /// <summary> Number of preexisting directories during auto import. </summary>
        public long? PreexistingDirectories { get; }
        /// <summary> Number of preexisting symlinks during auto import. </summary>
        public long? PreexistingSymlinks { get; }
        /// <summary> Total number of blobs imported during auto import. </summary>
        public long? TotalBlobsImported { get; }
        /// <summary> Rate of blob import per second during auto import. </summary>
        public long? RateOfBlobImport { get; }
        /// <summary> Total errors encountered during auto import. </summary>
        public long? TotalErrors { get; }
        /// <summary> Total conflicts encountered during auto import. </summary>
        public long? TotalConflicts { get; }
        /// <summary> Number of deletions during auto import. </summary>
        public long? Deletions { get; }
        /// <summary> Date and time of the last Change Feed event consumed. </summary>
        public DateTimeOffset? LastChangeFeedEventConsumedOn { get; }
        /// <summary> Date and time when last fully synchronized. </summary>
        public DateTimeOffset? LastTimeFullySynchronized { get; }
    }
}
