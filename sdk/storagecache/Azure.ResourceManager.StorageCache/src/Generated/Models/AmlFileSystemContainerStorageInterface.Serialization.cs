// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageCache.Models
{
    public partial class AmlFileSystemContainerStorageInterface : IUtf8JsonSerializable, IJsonModel<AmlFileSystemContainerStorageInterface>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AmlFileSystemContainerStorageInterface>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<AmlFileSystemContainerStorageInterface>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(PersistentVolumeClaim))
                {
                    writer.WritePropertyName("persistentVolumeClaim"u8);
                    writer.WriteStringValue(PersistentVolumeClaim);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(PersistentVolume))
                {
                    writer.WritePropertyName("persistentVolume"u8);
                    writer.WriteStringValue(PersistentVolume);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(StorageClass))
                {
                    writer.WritePropertyName("storageClass"u8);
                    writer.WriteStringValue(StorageClass);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AmlFileSystemContainerStorageInterface IJsonModel<AmlFileSystemContainerStorageInterface>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AmlFileSystemContainerStorageInterface)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAmlFileSystemContainerStorageInterface(document.RootElement, options);
        }

        internal static AmlFileSystemContainerStorageInterface DeserializeAmlFileSystemContainerStorageInterface(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> persistentVolumeClaim = default;
            Optional<string> persistentVolume = default;
            Optional<string> storageClass = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("persistentVolumeClaim"u8))
                {
                    persistentVolumeClaim = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("persistentVolume"u8))
                {
                    persistentVolume = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageClass"u8))
                {
                    storageClass = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelReaderWriterFormat.Json)
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new AmlFileSystemContainerStorageInterface(persistentVolumeClaim.Value, persistentVolume.Value, storageClass.Value, serializedAdditionalRawData);
        }

        BinaryData IModel<AmlFileSystemContainerStorageInterface>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AmlFileSystemContainerStorageInterface)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        AmlFileSystemContainerStorageInterface IModel<AmlFileSystemContainerStorageInterface>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AmlFileSystemContainerStorageInterface)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeAmlFileSystemContainerStorageInterface(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<AmlFileSystemContainerStorageInterface>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
