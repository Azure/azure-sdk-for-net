// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageCache.Models
{
    public partial class NfsAccessRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("scope");
            writer.WriteStringValue(Scope.ToString());
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter");
                writer.WriteStringValue(Filter);
            }
            writer.WritePropertyName("access");
            writer.WriteStringValue(Access.ToString());
            if (Optional.IsDefined(Suid))
            {
                writer.WritePropertyName("suid");
                writer.WriteBooleanValue(Suid.Value);
            }
            if (Optional.IsDefined(SubmountAccess))
            {
                writer.WritePropertyName("submountAccess");
                writer.WriteBooleanValue(SubmountAccess.Value);
            }
            if (Optional.IsDefined(RootSquash))
            {
                writer.WritePropertyName("rootSquash");
                writer.WriteBooleanValue(RootSquash.Value);
            }
            if (Optional.IsDefined(AnonymousUID))
            {
                writer.WritePropertyName("anonymousUID");
                writer.WriteStringValue(AnonymousUID);
            }
            if (Optional.IsDefined(AnonymousGID))
            {
                writer.WritePropertyName("anonymousGID");
                writer.WriteStringValue(AnonymousGID);
            }
            writer.WriteEndObject();
        }

        internal static NfsAccessRule DeserializeNfsAccessRule(JsonElement element)
        {
            NfsAccessRuleScope scope = default;
            Optional<string> filter = default;
            NfsAccessRuleAccess access = default;
            Optional<bool> suid = default;
            Optional<bool> submountAccess = default;
            Optional<bool> rootSquash = default;
            Optional<string> anonymousUID = default;
            Optional<string> anonymousGID = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scope"))
                {
                    scope = new NfsAccessRuleScope(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("filter"))
                {
                    filter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("access"))
                {
                    access = new NfsAccessRuleAccess(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suid = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("submountAccess"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    submountAccess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("rootSquash"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rootSquash = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("anonymousUID"))
                {
                    anonymousUID = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("anonymousGID"))
                {
                    anonymousGID = property.Value.GetString();
                    continue;
                }
            }
            return new NfsAccessRule(scope, filter.Value, access, Optional.ToNullable(suid), Optional.ToNullable(submountAccess), Optional.ToNullable(rootSquash), anonymousUID.Value, anonymousGID.Value);
        }
    }
}
