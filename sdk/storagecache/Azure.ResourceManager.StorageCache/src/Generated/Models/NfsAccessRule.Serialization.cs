// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.StorageCache.Models
{
    public partial class NfsAccessRule : IUtf8JsonSerializable, IModelJsonSerializable<NfsAccessRule>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<NfsAccessRule>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<NfsAccessRule>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<NfsAccessRule>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("scope"u8);
            writer.WriteStringValue(Scope.ToString());
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter"u8);
                writer.WriteStringValue(Filter);
            }
            writer.WritePropertyName("access"u8);
            writer.WriteStringValue(Access.ToString());
            if (Optional.IsDefined(AllowSuid))
            {
                writer.WritePropertyName("suid"u8);
                writer.WriteBooleanValue(AllowSuid.Value);
            }
            if (Optional.IsDefined(AllowSubmountAccess))
            {
                writer.WritePropertyName("submountAccess"u8);
                writer.WriteBooleanValue(AllowSubmountAccess.Value);
            }
            if (Optional.IsDefined(EnableRootSquash))
            {
                writer.WritePropertyName("rootSquash"u8);
                writer.WriteBooleanValue(EnableRootSquash.Value);
            }
            if (Optional.IsDefined(AnonymousUID))
            {
                writer.WritePropertyName("anonymousUID"u8);
                writer.WriteStringValue(AnonymousUID);
            }
            if (Optional.IsDefined(AnonymousGID))
            {
                writer.WritePropertyName("anonymousGID"u8);
                writer.WriteStringValue(AnonymousGID);
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static NfsAccessRule DeserializeNfsAccessRule(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            NfsAccessRuleScope scope = default;
            Optional<string> filter = default;
            NfsAccessRuleAccess access = default;
            Optional<bool> suid = default;
            Optional<bool> submountAccess = default;
            Optional<bool> rootSquash = default;
            Optional<string> anonymousUID = default;
            Optional<string> anonymousGID = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scope"u8))
                {
                    scope = new NfsAccessRuleScope(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("filter"u8))
                {
                    filter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("access"u8))
                {
                    access = new NfsAccessRuleAccess(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suid"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    suid = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("submountAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    submountAccess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("rootSquash"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rootSquash = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("anonymousUID"u8))
                {
                    anonymousUID = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("anonymousGID"u8))
                {
                    anonymousGID = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new NfsAccessRule(scope, filter.Value, access, Optional.ToNullable(suid), Optional.ToNullable(submountAccess), Optional.ToNullable(rootSquash), anonymousUID.Value, anonymousGID.Value, serializedAdditionalRawData);
        }

        NfsAccessRule IModelJsonSerializable<NfsAccessRule>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<NfsAccessRule>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeNfsAccessRule(doc.RootElement, options);
        }

        BinaryData IModelSerializable<NfsAccessRule>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<NfsAccessRule>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        NfsAccessRule IModelSerializable<NfsAccessRule>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<NfsAccessRule>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeNfsAccessRule(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="NfsAccessRule"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="NfsAccessRule"/> to convert. </param>
        public static implicit operator RequestContent(NfsAccessRule model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="NfsAccessRule"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator NfsAccessRule(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeNfsAccessRule(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
