// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StorageCache.Models
{
    /// <summary> List of Cache health states. </summary>
    public readonly partial struct HealthStateType : IEquatable<HealthStateType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthStateType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthStateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string HealthyValue = "Healthy";
        private const string DegradedValue = "Degraded";
        private const string DownValue = "Down";
        private const string TransitioningValue = "Transitioning";
        private const string StoppingValue = "Stopping";
        private const string StoppedValue = "Stopped";
        private const string UpgradingValue = "Upgrading";
        private const string FlushingValue = "Flushing";
        private const string WaitingForKeyValue = "WaitingForKey";
        private const string StartFailedValue = "StartFailed";
        private const string UpgradeFailedValue = "UpgradeFailed";

        /// <summary> Unknown. </summary>
        public static HealthStateType Unknown { get; } = new HealthStateType(UnknownValue);
        /// <summary> Healthy. </summary>
        public static HealthStateType Healthy { get; } = new HealthStateType(HealthyValue);
        /// <summary> Degraded. </summary>
        public static HealthStateType Degraded { get; } = new HealthStateType(DegradedValue);
        /// <summary> Down. </summary>
        public static HealthStateType Down { get; } = new HealthStateType(DownValue);
        /// <summary> Transitioning. </summary>
        public static HealthStateType Transitioning { get; } = new HealthStateType(TransitioningValue);
        /// <summary> Stopping. </summary>
        public static HealthStateType Stopping { get; } = new HealthStateType(StoppingValue);
        /// <summary> Stopped. </summary>
        public static HealthStateType Stopped { get; } = new HealthStateType(StoppedValue);
        /// <summary> Upgrading. </summary>
        public static HealthStateType Upgrading { get; } = new HealthStateType(UpgradingValue);
        /// <summary> Flushing. </summary>
        public static HealthStateType Flushing { get; } = new HealthStateType(FlushingValue);
        /// <summary> WaitingForKey. </summary>
        public static HealthStateType WaitingForKey { get; } = new HealthStateType(WaitingForKeyValue);
        /// <summary> StartFailed. </summary>
        public static HealthStateType StartFailed { get; } = new HealthStateType(StartFailedValue);
        /// <summary> UpgradeFailed. </summary>
        public static HealthStateType UpgradeFailed { get; } = new HealthStateType(UpgradeFailedValue);
        /// <summary> Determines if two <see cref="HealthStateType"/> values are the same. </summary>
        public static bool operator ==(HealthStateType left, HealthStateType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthStateType"/> values are not the same. </summary>
        public static bool operator !=(HealthStateType left, HealthStateType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthStateType"/>. </summary>
        public static implicit operator HealthStateType(string value) => new HealthStateType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthStateType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthStateType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
