// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StorageCache;

namespace Azure.ResourceManager.StorageCache.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class StorageCacheModelFactory
    {
        /// <summary> Initializes a new instance of StorageCacheSku. </summary>
        /// <param name="resourceType"> The type of resource the SKU applies to. </param>
        /// <param name="capabilities"> A list of capabilities of this SKU, such as throughput or ops/sec. </param>
        /// <param name="locations"> The set of locations where the SKU is available. This is the supported and registered Azure Geo Regions (e.g., West US, East US, Southeast Asia, etc.). </param>
        /// <param name="locationInfo"> The set of locations where the SKU is available. </param>
        /// <param name="name"> The name of this SKU. </param>
        /// <param name="restrictions"> The restrictions preventing this SKU from being used. This is empty if there are no restrictions. </param>
        /// <returns> A new <see cref="Models.StorageCacheSku"/> instance for mocking. </returns>
        public static StorageCacheSku StorageCacheSku(string resourceType = null, IEnumerable<StorageCacheSkuCapability> capabilities = null, IEnumerable<string> locations = null, IEnumerable<StorageCacheSkuLocationInfo> locationInfo = null, string name = null, IEnumerable<StorageCacheRestriction> restrictions = null)
        {
            capabilities ??= new List<StorageCacheSkuCapability>();
            locations ??= new List<string>();
            locationInfo ??= new List<StorageCacheSkuLocationInfo>();
            restrictions ??= new List<StorageCacheRestriction>();

            return new StorageCacheSku(resourceType, capabilities?.ToList(), locations?.ToList(), locationInfo?.ToList(), name, restrictions?.ToList());
        }

        /// <summary> Initializes a new instance of StorageCacheSkuCapability. </summary>
        /// <param name="name"> Name of a capability, such as ops/sec. </param>
        /// <param name="value"> Quantity, if the capability is measured by quantity. </param>
        /// <returns> A new <see cref="Models.StorageCacheSkuCapability"/> instance for mocking. </returns>
        public static StorageCacheSkuCapability StorageCacheSkuCapability(string name = null, string value = null)
        {
            return new StorageCacheSkuCapability(name, value);
        }

        /// <summary> Initializes a new instance of StorageCacheSkuLocationInfo. </summary>
        /// <param name="location"> Location where this SKU is available. </param>
        /// <param name="zones"> Zones if any. </param>
        /// <returns> A new <see cref="Models.StorageCacheSkuLocationInfo"/> instance for mocking. </returns>
        public static StorageCacheSkuLocationInfo StorageCacheSkuLocationInfo(AzureLocation? location = null, IEnumerable<string> zones = null)
        {
            zones ??= new List<string>();

            return new StorageCacheSkuLocationInfo(location, zones?.ToList());
        }

        /// <summary> Initializes a new instance of StorageCacheRestriction. </summary>
        /// <param name="restrictionType"> The type of restrictions. In this version, the only possible value for this is location. </param>
        /// <param name="values"> The value of restrictions. If the restriction type is set to location, then this would be the different locations where the SKU is restricted. </param>
        /// <param name="reasonCode"> The reason for the restriction. As of now this can be &quot;QuotaId&quot; or &quot;NotAvailableForSubscription&quot;. &quot;QuotaId&quot; is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. &quot;NotAvailableForSubscription&quot; is related to capacity at the datacenter. </param>
        /// <returns> A new <see cref="Models.StorageCacheRestriction"/> instance for mocking. </returns>
        public static StorageCacheRestriction StorageCacheRestriction(string restrictionType = null, IEnumerable<string> values = null, StorageCacheRestrictionReasonCode? reasonCode = null)
        {
            values ??= new List<string>();

            return new StorageCacheRestriction(restrictionType, values?.ToList(), reasonCode);
        }

        /// <summary> Initializes a new instance of StorageCacheUsageModel. </summary>
        /// <param name="displayDescription"> Localized information describing this usage model. </param>
        /// <param name="modelName"> Non-localized keyword name for this usage model. </param>
        /// <param name="targetType"> The type of Storage Target to which this model is applicable (only nfs3 as of this version). </param>
        /// <returns> A new <see cref="Models.StorageCacheUsageModel"/> instance for mocking. </returns>
        public static StorageCacheUsageModel StorageCacheUsageModel(string displayDescription = null, string modelName = null, string targetType = null)
        {
            return new StorageCacheUsageModel(new StorageCacheUsageModelDisplay(displayDescription), modelName, targetType);
        }

        /// <summary> Initializes a new instance of StorageCacheUsage. </summary>
        /// <param name="limit"> The limit (quota) for this resource. </param>
        /// <param name="unit"> Unit that the limit and usages are expressed in, such as &apos;Count&apos;. </param>
        /// <param name="currentValue"> The current usage of this resource. </param>
        /// <param name="name"> Naming information for this resource type. </param>
        /// <returns> A new <see cref="Models.StorageCacheUsage"/> instance for mocking. </returns>
        public static StorageCacheUsage StorageCacheUsage(int? limit = null, string unit = null, int? currentValue = null, StorageCacheUsageName name = null)
        {
            return new StorageCacheUsage(limit, unit, currentValue, name);
        }

        /// <summary> Initializes a new instance of StorageCacheUsageName. </summary>
        /// <param name="value"> Canonical name for this resource type. </param>
        /// <param name="localizedValue"> Localized name for this resource type. </param>
        /// <returns> A new <see cref="Models.StorageCacheUsageName"/> instance for mocking. </returns>
        public static StorageCacheUsageName StorageCacheUsageName(string value = null, string localizedValue = null)
        {
            return new StorageCacheUsageName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of StorageCacheData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the cache, if configured. </param>
        /// <param name="skuName"> SKU for the Cache. </param>
        /// <param name="cacheSizeGB"> The size of this Cache, in GB. </param>
        /// <param name="health"> Health of the Cache. </param>
        /// <param name="mountAddresses"> Array of IP addresses that can be used by clients mounting this Cache. </param>
        /// <param name="provisioningState"> ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property. </param>
        /// <param name="subnet"> Subnet used for the Cache. </param>
        /// <param name="upgradeStatus"> Upgrade status of the Cache. </param>
        /// <param name="upgradeSettings"> Upgrade settings of the Cache. </param>
        /// <param name="networkSettings"> Specifies network settings of the cache. </param>
        /// <param name="encryptionSettings"> Specifies encryption settings of the cache. </param>
        /// <param name="securityAccessPolicies"> Specifies security settings of the cache. </param>
        /// <param name="directoryServicesSettings"> Specifies Directory Services settings of the cache. </param>
        /// <param name="zones"> Availability zones for resources. This field should only contain a single element in the array. </param>
        /// <param name="primingJobs"> Specifies the priming jobs defined in the cache. </param>
        /// <param name="spaceAllocation"> Specifies the space allocation percentage for each storage target in the cache. </param>
        /// <returns> A new <see cref="StorageCache.StorageCacheData"/> instance for mocking. </returns>
        public static StorageCacheData StorageCacheData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string skuName = null, int? cacheSizeGB = null, StorageCacheHealth health = null, IEnumerable<IPAddress> mountAddresses = null, StorageCacheProvisioningStateType? provisioningState = null, ResourceIdentifier subnet = null, StorageCacheUpgradeStatus upgradeStatus = null, StorageCacheUpgradeSettings upgradeSettings = null, StorageCacheNetworkSettings networkSettings = null, StorageCacheEncryptionSettings encryptionSettings = null, IEnumerable<NfsAccessPolicy> securityAccessPolicies = null, StorageCacheDirectorySettings directoryServicesSettings = null, IEnumerable<string> zones = null, IEnumerable<PrimingJob> primingJobs = null, IEnumerable<StorageTargetSpaceAllocation> spaceAllocation = null)
        {
            tags ??= new Dictionary<string, string>();
            mountAddresses ??= new List<IPAddress>();
            securityAccessPolicies ??= new List<NfsAccessPolicy>();
            zones ??= new List<string>();
            primingJobs ??= new List<PrimingJob>();
            spaceAllocation ??= new List<StorageTargetSpaceAllocation>();

            return new StorageCacheData(id, name, resourceType, systemData, tags, location, identity, new StorageCacheSkuInfo(skuName), cacheSizeGB, health, mountAddresses?.ToList(), provisioningState, subnet, upgradeStatus, upgradeSettings, networkSettings, encryptionSettings, new StorageCacheSecuritySettings(securityAccessPolicies?.ToList()), directoryServicesSettings, zones?.ToList(), primingJobs?.ToList(), spaceAllocation?.ToList());
        }

        /// <summary> Initializes a new instance of StorageCacheHealth. </summary>
        /// <param name="state"> List of Cache health states. </param>
        /// <param name="statusDescription"> Describes explanation of state. </param>
        /// <param name="conditions"> Outstanding conditions that need to be investigated and resolved. </param>
        /// <returns> A new <see cref="Models.StorageCacheHealth"/> instance for mocking. </returns>
        public static StorageCacheHealth StorageCacheHealth(StorageCacheHealthStateType? state = null, string statusDescription = null, IEnumerable<OutstandingCondition> conditions = null)
        {
            conditions ??= new List<OutstandingCondition>();

            return new StorageCacheHealth(state, statusDescription, conditions?.ToList());
        }

        /// <summary> Initializes a new instance of OutstandingCondition. </summary>
        /// <param name="timestamp"> The time when the condition was raised. </param>
        /// <param name="message"> The issue requiring attention. </param>
        /// <returns> A new <see cref="Models.OutstandingCondition"/> instance for mocking. </returns>
        public static OutstandingCondition OutstandingCondition(DateTimeOffset? timestamp = null, string message = null)
        {
            return new OutstandingCondition(timestamp, message);
        }

        /// <summary> Initializes a new instance of StorageCacheUpgradeStatus. </summary>
        /// <param name="currentFirmwareVersion"> Version string of the firmware currently installed on this Cache. </param>
        /// <param name="firmwareUpdateStatus"> True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation. </param>
        /// <param name="firmwareUpdateDeadline"> Time at which the pending firmware update will automatically be installed on the Cache. </param>
        /// <param name="lastFirmwareUpdate"> Time of the last successful firmware update. </param>
        /// <param name="pendingFirmwareVersion"> When firmwareUpdateAvailable is true, this field holds the version string for the update. </param>
        /// <returns> A new <see cref="Models.StorageCacheUpgradeStatus"/> instance for mocking. </returns>
        public static StorageCacheUpgradeStatus StorageCacheUpgradeStatus(string currentFirmwareVersion = null, StorageCacheFirmwareStatusType? firmwareUpdateStatus = null, DateTimeOffset? firmwareUpdateDeadline = null, DateTimeOffset? lastFirmwareUpdate = null, string pendingFirmwareVersion = null)
        {
            return new StorageCacheUpgradeStatus(currentFirmwareVersion, firmwareUpdateStatus, firmwareUpdateDeadline, lastFirmwareUpdate, pendingFirmwareVersion);
        }

        /// <summary> Initializes a new instance of StorageCacheUpgradeSettings. </summary>
        /// <param name="enableUpgradeSchedule"> True if the user chooses to select an installation time between now and firmwareUpdateDeadline. Else the firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation. </param>
        /// <param name="scheduledOn"> When upgradeScheduleEnabled is true, this field holds the user-chosen upgrade time. At the user-chosen time, the firmware update will automatically be installed on the cache. </param>
        /// <returns> A new <see cref="Models.StorageCacheUpgradeSettings"/> instance for mocking. </returns>
        public static StorageCacheUpgradeSettings StorageCacheUpgradeSettings(bool? enableUpgradeSchedule = null, DateTimeOffset? scheduledOn = null)
        {
            return new StorageCacheUpgradeSettings(enableUpgradeSchedule, scheduledOn);
        }

        /// <summary> Initializes a new instance of StorageCacheNetworkSettings. </summary>
        /// <param name="mtu"> The IPv4 maximum transmission unit configured for the subnet. </param>
        /// <param name="utilityAddresses"> Array of additional IP addresses used by this Cache. </param>
        /// <param name="dnsServers"> DNS servers for the cache to use.  It will be set from the network configuration if no value is provided. </param>
        /// <param name="dnsSearchDomain"> DNS search domain. </param>
        /// <param name="ntpServer"> NTP server IP Address or FQDN for the cache to use. The default is time.windows.com. </param>
        /// <returns> A new <see cref="Models.StorageCacheNetworkSettings"/> instance for mocking. </returns>
        public static StorageCacheNetworkSettings StorageCacheNetworkSettings(int? mtu = null, IEnumerable<IPAddress> utilityAddresses = null, IEnumerable<IPAddress> dnsServers = null, string dnsSearchDomain = null, string ntpServer = null)
        {
            utilityAddresses ??= new List<IPAddress>();
            dnsServers ??= new List<IPAddress>();

            return new StorageCacheNetworkSettings(mtu, utilityAddresses?.ToList(), dnsServers?.ToList(), dnsSearchDomain, ntpServer);
        }

        /// <summary> Initializes a new instance of StorageCacheEncryptionSettings. </summary>
        /// <param name="keyEncryptionKey"> Specifies the location of the key encryption key in Key Vault. </param>
        /// <param name="enableRotationToLatestKeyVersion"> Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault. </param>
        /// <returns> A new <see cref="Models.StorageCacheEncryptionSettings"/> instance for mocking. </returns>
        public static StorageCacheEncryptionSettings StorageCacheEncryptionSettings(StorageCacheEncryptionKeyVaultKeyReference keyEncryptionKey = null, bool? enableRotationToLatestKeyVersion = null)
        {
            return new StorageCacheEncryptionSettings(keyEncryptionKey, enableRotationToLatestKeyVersion);
        }

        /// <summary> Initializes a new instance of NfsAccessRule. </summary>
        /// <param name="scope"> Scope for this rule. The scope and filter determine which clients match the rule. </param>
        /// <param name="filter"> Filter applied to the scope for this rule. The filter&apos;s format depends on its scope. &apos;default&apos; scope matches all clients and has no filter value. &apos;network&apos; scope takes a filter in CIDR format (for example, 10.99.1.0/24). &apos;host&apos; takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied. </param>
        /// <param name="access"> Access allowed by this rule. </param>
        /// <param name="allowSuid"> Allow SUID semantics. </param>
        /// <param name="allowSubmountAccess"> For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path &apos;/&apos;. If set to yes, clients can mount a deeper path, like &apos;/a/b&apos;. </param>
        /// <param name="enableRootSquash"> Map root accesses to anonymousUID and anonymousGID. </param>
        /// <param name="anonymousUID"> UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided. </param>
        /// <param name="anonymousGID"> GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided. </param>
        /// <returns> A new <see cref="Models.NfsAccessRule"/> instance for mocking. </returns>
        public static NfsAccessRule NfsAccessRule(NfsAccessRuleScope scope = default, string filter = null, NfsAccessRuleAccess access = default, bool? allowSuid = null, bool? allowSubmountAccess = null, bool? enableRootSquash = null, string anonymousUID = null, string anonymousGID = null)
        {
            return new NfsAccessRule(scope, filter, access, allowSuid, allowSubmountAccess, enableRootSquash, anonymousUID, anonymousGID);
        }

        /// <summary> Initializes a new instance of StorageCacheDirectorySettings. </summary>
        /// <param name="activeDirectory"> Specifies settings for joining the HPC Cache to an Active Directory domain. </param>
        /// <param name="usernameDownload"> Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups. </param>
        /// <returns> A new <see cref="Models.StorageCacheDirectorySettings"/> instance for mocking. </returns>
        public static StorageCacheDirectorySettings StorageCacheDirectorySettings(StorageCacheActiveDirectorySettings activeDirectory = null, StorageCacheUsernameDownloadSettings usernameDownload = null)
        {
            return new StorageCacheDirectorySettings(activeDirectory, usernameDownload);
        }

        /// <summary> Initializes a new instance of StorageCacheActiveDirectorySettings. </summary>
        /// <param name="primaryDnsIPAddress"> Primary DNS IP address used to resolve the Active Directory domain controller&apos;s fully qualified domain name. </param>
        /// <param name="secondaryDnsIPAddress"> Secondary DNS IP address used to resolve the Active Directory domain controller&apos;s fully qualified domain name. </param>
        /// <param name="domainName"> The fully qualified domain name of the Active Directory domain controller. </param>
        /// <param name="domainNetBiosName"> The Active Directory domain&apos;s NetBIOS name. </param>
        /// <param name="cacheNetBiosName"> The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z]. </param>
        /// <param name="domainJoined"> True if the HPC Cache is joined to the Active Directory domain. </param>
        /// <param name="credentials"> Active Directory admin credentials used to join the HPC Cache to a domain. </param>
        /// <returns> A new <see cref="Models.StorageCacheActiveDirectorySettings"/> instance for mocking. </returns>
        public static StorageCacheActiveDirectorySettings StorageCacheActiveDirectorySettings(IPAddress primaryDnsIPAddress = null, IPAddress secondaryDnsIPAddress = null, string domainName = null, string domainNetBiosName = null, string cacheNetBiosName = null, DomainJoinedType? domainJoined = null, StorageCacheActiveDirectorySettingsCredentials credentials = null)
        {
            return new StorageCacheActiveDirectorySettings(primaryDnsIPAddress, secondaryDnsIPAddress, domainName, domainNetBiosName, cacheNetBiosName, domainJoined, credentials);
        }

        /// <summary> Initializes a new instance of StorageCacheUsernameDownloadSettings. </summary>
        /// <param name="enableExtendedGroups"> Whether or not Extended Groups is enabled. </param>
        /// <param name="usernameSource"> This setting determines how the cache gets username and group names for clients. </param>
        /// <param name="groupFileUri"> The URI of the file containing group information (in /etc/group file format). This field must be populated when &apos;usernameSource&apos; is set to &apos;File&apos;. </param>
        /// <param name="userFileUri"> The URI of the file containing user information (in /etc/passwd file format). This field must be populated when &apos;usernameSource&apos; is set to &apos;File&apos;. </param>
        /// <param name="ldapServer"> The fully qualified domain name or IP address of the LDAP server to use. </param>
        /// <param name="ldapBaseDN"> The base distinguished name for the LDAP domain. </param>
        /// <param name="encryptLdapConnection"> Whether or not the LDAP connection should be encrypted. </param>
        /// <param name="requireValidCertificate"> Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided. </param>
        /// <param name="autoDownloadCertificate"> Determines if the certificate should be automatically downloaded. This applies to &apos;caCertificateURI&apos; only if &apos;requireValidCertificate&apos; is true. </param>
        /// <param name="caCertificateUri"> The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when &apos;requireValidCertificate&apos; is set to true. </param>
        /// <param name="usernameDownloaded"> Indicates whether or not the HPC Cache has performed the username download successfully. </param>
        /// <param name="credentials"> When present, these are the credentials for the secure LDAP connection. </param>
        /// <returns> A new <see cref="Models.StorageCacheUsernameDownloadSettings"/> instance for mocking. </returns>
        public static StorageCacheUsernameDownloadSettings StorageCacheUsernameDownloadSettings(bool? enableExtendedGroups = null, StorageCacheUsernameSourceType? usernameSource = null, Uri groupFileUri = null, Uri userFileUri = null, string ldapServer = null, string ldapBaseDN = null, bool? encryptLdapConnection = null, bool? requireValidCertificate = null, bool? autoDownloadCertificate = null, Uri caCertificateUri = null, StorageCacheUsernameDownloadedType? usernameDownloaded = null, StorageCacheUsernameDownloadCredential credentials = null)
        {
            return new StorageCacheUsernameDownloadSettings(enableExtendedGroups, usernameSource, groupFileUri, userFileUri, ldapServer, ldapBaseDN, encryptLdapConnection, requireValidCertificate, autoDownloadCertificate, caCertificateUri, usernameDownloaded, credentials);
        }

        /// <summary> Initializes a new instance of StorageCacheUsernameDownloadCredential. </summary>
        /// <param name="bindDistinguishedName"> The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response. </param>
        /// <param name="bindPassword"> The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response. </param>
        /// <returns> A new <see cref="Models.StorageCacheUsernameDownloadCredential"/> instance for mocking. </returns>
        public static StorageCacheUsernameDownloadCredential StorageCacheUsernameDownloadCredential(string bindDistinguishedName = null, string bindPassword = null)
        {
            return new StorageCacheUsernameDownloadCredential(bindDistinguishedName, bindPassword);
        }

        /// <summary> Initializes a new instance of PrimingJob. </summary>
        /// <param name="primingJobName"> The priming job name. </param>
        /// <param name="primingManifestUri"> The URL for the priming manifest file to download. This file must be readable from the HPC Cache. When the file is in Azure blob storage the URL should include a Shared Access Signature (SAS) granting read permissions on the blob. </param>
        /// <param name="primingJobId"> The unique identifier of the priming job. </param>
        /// <param name="primingJobState"> The state of the priming operation. </param>
        /// <param name="primingJobStatus"> The status code of the priming job. </param>
        /// <param name="primingJobDetails"> The job details or error information if any. </param>
        /// <param name="primingJobPercentComplete"> The current progress of the priming job, as a percentage. </param>
        /// <returns> A new <see cref="Models.PrimingJob"/> instance for mocking. </returns>
        public static PrimingJob PrimingJob(string primingJobName = null, Uri primingManifestUri = null, string primingJobId = null, PrimingJobState? primingJobState = null, string primingJobStatus = null, string primingJobDetails = null, double? primingJobPercentComplete = null)
        {
            return new PrimingJob(primingJobName, primingManifestUri, primingJobId, primingJobState, primingJobStatus, primingJobDetails, primingJobPercentComplete);
        }

        /// <summary> Initializes a new instance of StorageTargetSpaceAllocation. </summary>
        /// <param name="name"> Name of the storage target. </param>
        /// <param name="allocationPercentage"> The percentage of cache space allocated for this storage target. </param>
        /// <returns> A new <see cref="Models.StorageTargetSpaceAllocation"/> instance for mocking. </returns>
        public static StorageTargetSpaceAllocation StorageTargetSpaceAllocation(string name = null, int? allocationPercentage = null)
        {
            return new StorageTargetSpaceAllocation(name, allocationPercentage);
        }

        /// <summary> Initializes a new instance of StorageTargetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="junctions"> List of Cache namespace junctions to target for namespace associations. </param>
        /// <param name="targetType"> Type of the Storage Target. </param>
        /// <param name="provisioningState"> ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property. </param>
        /// <param name="state"> Storage target operational state. </param>
        /// <param name="nfs3"> Properties when targetType is nfs3. </param>
        /// <param name="clfsTarget"> Properties when targetType is clfs. </param>
        /// <param name="unknownAttributes"> Properties when targetType is unknown. </param>
        /// <param name="blobNfs"> Properties when targetType is blobNfs. </param>
        /// <param name="allocationPercentage"> The percentage of cache space allocated for this storage target. </param>
        /// <param name="location"> Region name string. </param>
        /// <returns> A new <see cref="StorageCache.StorageTargetData"/> instance for mocking. </returns>
        public static StorageTargetData StorageTargetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<NamespaceJunction> junctions = null, StorageTargetType? targetType = null, StorageCacheProvisioningStateType? provisioningState = null, StorageTargetOperationalStateType? state = null, Nfs3Target nfs3 = null, ResourceIdentifier clfsTarget = null, IDictionary<string, string> unknownAttributes = null, BlobNfsTarget blobNfs = null, int? allocationPercentage = null, AzureLocation? location = null)
        {
            junctions ??= new List<NamespaceJunction>();
            unknownAttributes ??= new Dictionary<string, string>();

            return new StorageTargetData(id, name, resourceType, systemData, junctions?.ToList(), targetType, provisioningState, state, nfs3, new ClfsTarget(clfsTarget), new UnknownTarget(unknownAttributes), blobNfs, allocationPercentage, location);
        }

        /// <summary> Initializes a new instance of NamespaceJunction. </summary>
        /// <param name="namespacePath"> Namespace path on a Cache for a Storage Target. </param>
        /// <param name="targetPath"> Path in Storage Target to which namespacePath points. </param>
        /// <param name="nfsExport"> NFS export where targetPath exists. </param>
        /// <param name="nfsAccessPolicy"> Name of the access policy applied to this junction. </param>
        /// <returns> A new <see cref="Models.NamespaceJunction"/> instance for mocking. </returns>
        public static NamespaceJunction NamespaceJunction(string namespacePath = null, string targetPath = null, string nfsExport = null, string nfsAccessPolicy = null)
        {
            return new NamespaceJunction(namespacePath, targetPath, nfsExport, nfsAccessPolicy);
        }

        /// <summary> Initializes a new instance of Nfs3Target. </summary>
        /// <param name="target"> IP address or host name of an NFSv3 host (e.g., 10.0.44.44). </param>
        /// <param name="usageModel"> Identifies the StorageCache usage model to be used for this storage target. </param>
        /// <returns> A new <see cref="Models.Nfs3Target"/> instance for mocking. </returns>
        public static Nfs3Target Nfs3Target(string target = null, string usageModel = null)
        {
            return new Nfs3Target(target, usageModel);
        }

        /// <summary> Initializes a new instance of BlobNfsTarget. </summary>
        /// <param name="target"> Resource ID of the storage container. </param>
        /// <param name="usageModel"> Identifies the StorageCache usage model to be used for this storage target. </param>
        /// <returns> A new <see cref="Models.BlobNfsTarget"/> instance for mocking. </returns>
        public static BlobNfsTarget BlobNfsTarget(ResourceIdentifier target = null, string usageModel = null)
        {
            return new BlobNfsTarget(target, usageModel);
        }
    }
}
