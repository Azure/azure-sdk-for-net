// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.StorageCache.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.StorageCache.Samples
{
    public partial class Sample_AutoImportJobResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AutoImportJobsGet()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2025-07-01/examples/autoImportJobs_Get.json
            // this example is just showing the usage of "autoImportJobs_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoImportJobResource created on azure
            // for more information of creating AutoImportJobResource, please refer to the document of AutoImportJobResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "scgroup";
            string amlFileSystemName = "fs1";
            string autoImportJobName = "autojob1";
            ResourceIdentifier autoImportJobResourceId = AutoImportJobResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, amlFileSystemName, autoImportJobName);
            AutoImportJobResource autoImportJob = client.GetAutoImportJobResource(autoImportJobResourceId);

            // invoke the operation
            AutoImportJobResource result = await autoImportJob.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoImportJobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AutoImportJobsDelete()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2025-07-01/examples/autoImportJobs_Delete.json
            // this example is just showing the usage of "autoImportJobs_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoImportJobResource created on azure
            // for more information of creating AutoImportJobResource, please refer to the document of AutoImportJobResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "scgroup";
            string amlFileSystemName = "fs1";
            string autoImportJobName = "autojob1";
            ResourceIdentifier autoImportJobResourceId = AutoImportJobResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, amlFileSystemName, autoImportJobName);
            AutoImportJobResource autoImportJob = client.GetAutoImportJobResource(autoImportJobResourceId);

            // invoke the operation
            await autoImportJob.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AutoImportJobsUpdate()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2025-07-01/examples/autoImportJobs_Update.json
            // this example is just showing the usage of "autoImportJobs_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoImportJobResource created on azure
            // for more information of creating AutoImportJobResource, please refer to the document of AutoImportJobResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "scgroup";
            string amlFileSystemName = "fs1";
            string autoImportJobName = "autojob1";
            ResourceIdentifier autoImportJobResourceId = AutoImportJobResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, amlFileSystemName, autoImportJobName);
            AutoImportJobResource autoImportJob = client.GetAutoImportJobResource(autoImportJobResourceId);

            // invoke the operation
            AutoImportJobPatch patch = new AutoImportJobPatch
            {
                AdminStatus = AutoImportJobUpdatePropertiesAdminStatus.Disable,
            };
            ArmOperation<AutoImportJobResource> lro = await autoImportJob.UpdateAsync(WaitUntil.Completed, patch);
            AutoImportJobResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoImportJobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
