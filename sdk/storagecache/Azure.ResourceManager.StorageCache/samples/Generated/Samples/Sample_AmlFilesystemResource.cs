// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.StorageCache;
using Azure.ResourceManager.StorageCache.Models;

namespace Azure.ResourceManager.StorageCache.Samples
{
    public partial class Sample_AmlFilesystemResource
    {
        // amlFilesystems_List
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAmlFilesystems_AmlFilesystemsList()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/amlFilesystems_List.json
            // this example is just showing the usage of "amlFilesystems_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (AmlFilesystemResource item in subscriptionResource.GetAmlFilesystemsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AmlFilesystemData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // amlFilesystems_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_AmlFilesystemsDelete()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/amlFilesystems_Delete.json
            // this example is just showing the usage of "amlFilesystems_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AmlFilesystemResource created on azure
            // for more information of creating AmlFilesystemResource, please refer to the document of AmlFilesystemResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "scgroup";
            string amlFilesystemName = "fs1";
            ResourceIdentifier amlFilesystemResourceId = AmlFilesystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, amlFilesystemName);
            AmlFilesystemResource amlFilesystem = client.GetAmlFilesystemResource(amlFilesystemResourceId);

            // invoke the operation
            await amlFilesystem.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // amlFilesystems_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_AmlFilesystemsGet()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/amlFilesystems_Get.json
            // this example is just showing the usage of "amlFilesystems_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AmlFilesystemResource created on azure
            // for more information of creating AmlFilesystemResource, please refer to the document of AmlFilesystemResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "scgroup";
            string amlFilesystemName = "fs1";
            ResourceIdentifier amlFilesystemResourceId = AmlFilesystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, amlFilesystemName);
            AmlFilesystemResource amlFilesystem = client.GetAmlFilesystemResource(amlFilesystemResourceId);

            // invoke the operation
            AmlFilesystemResource result = await amlFilesystem.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AmlFilesystemData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // amlFilesystems_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_AmlFilesystemsUpdate()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/amlFilesystems_Update.json
            // this example is just showing the usage of "amlFilesystems_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AmlFilesystemResource created on azure
            // for more information of creating AmlFilesystemResource, please refer to the document of AmlFilesystemResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "scgroup";
            string amlFilesystemName = "fs1";
            ResourceIdentifier amlFilesystemResourceId = AmlFilesystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, amlFilesystemName);
            AmlFilesystemResource amlFilesystem = client.GetAmlFilesystemResource(amlFilesystemResourceId);

            // invoke the operation
            AmlFilesystemPatch patch = new AmlFilesystemPatch()
            {
                Tags =
{
["Dept"] = "ContosoAds",
},
                KeyEncryptionKey = new StorageCacheEncryptionKeyVaultKeyReference(new Uri("https://examplekv.vault.azure.net/keys/kvk/3540a47df75541378d3518c6a4bdf5af"), new WritableSubResource()
                {
                    Id = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvault-cmk"),
                }),
                MaintenanceWindow = new AmlFilesystemUpdatePropertiesMaintenanceWindow()
                {
                    DayOfWeek = MaintenanceDayOfWeekType.Friday,
                    TimeOfDayUTC = "22:00",
                },
            };
            ArmOperation<AmlFilesystemResource> lro = await amlFilesystem.UpdateAsync(WaitUntil.Completed, patch);
            AmlFilesystemResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AmlFilesystemData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // amlFilesystems_Archive
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Archive_AmlFilesystemsArchive()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/amlFilesystems_Archive.json
            // this example is just showing the usage of "amlFilesystems_Archive" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AmlFilesystemResource created on azure
            // for more information of creating AmlFilesystemResource, please refer to the document of AmlFilesystemResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "scgroup";
            string amlFilesystemName = "sc";
            ResourceIdentifier amlFilesystemResourceId = AmlFilesystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, amlFilesystemName);
            AmlFilesystemResource amlFilesystem = client.GetAmlFilesystemResource(amlFilesystemResourceId);

            // invoke the operation
            AmlFilesystemArchiveContent content = new AmlFilesystemArchiveContent()
            {
                FilesystemPath = "/",
            };
            await amlFilesystem.ArchiveAsync(content: content);

            Console.WriteLine($"Succeeded");
        }

        // amlFilesystems_cancelArchive
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CancelArchive_AmlFilesystemsCancelArchive()
        {
            // Generated from example definition: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/amlFilesystems_CancelArchive.json
            // this example is just showing the usage of "amlFilesystems_CancelArchive" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AmlFilesystemResource created on azure
            // for more information of creating AmlFilesystemResource, please refer to the document of AmlFilesystemResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "scgroup";
            string amlFilesystemName = "sc";
            ResourceIdentifier amlFilesystemResourceId = AmlFilesystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, amlFilesystemName);
            AmlFilesystemResource amlFilesystem = client.GetAmlFilesystemResource(amlFilesystemResourceId);

            // invoke the operation
            await amlFilesystem.CancelArchiveAsync();

            Console.WriteLine($"Succeeded");
        }
    }
}
