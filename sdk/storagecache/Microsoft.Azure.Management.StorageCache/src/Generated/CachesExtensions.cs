// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Caches.
    /// </summary>
    public static partial class CachesExtensions
    {
            /// <summary>
            /// Returns all Caches the user has access to under a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CachesListResult List(this ICaches operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Caches the user has access to under a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CachesListResult> ListAsync(this ICaches operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Caches the user has access to under a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            public static CachesListResult ListByResourceGroup(this ICaches operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Caches the user has access to under a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CachesListResult> ListByResourceGroupAsync(this ICaches operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Schedules a Cache for deletion.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            public static void Delete(this ICaches operations, string resourceGroupName, string cacheName)
            {
                operations.DeleteAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Schedules a Cache for deletion.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICaches operations, string resourceGroupName, string cacheName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a Cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            public static Cache Get(this ICaches operations, string resourceGroupName, string cacheName)
            {
                return operations.GetAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a Cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cache> GetAsync(this ICaches operations, string resourceGroupName, string cacheName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cache'>
            /// Object containing the user-selectable properties of the new Cache. If
            /// read-only properties are included, they must match the existing values of
            /// those properties.
            /// </param>
            public static Cache CreateOrUpdate(this ICaches operations, string resourceGroupName, string cacheName, Cache cache = default(Cache))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, cacheName, cache).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cache'>
            /// Object containing the user-selectable properties of the new Cache. If
            /// read-only properties are included, they must match the existing values of
            /// those properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cache> CreateOrUpdateAsync(this ICaches operations, string resourceGroupName, string cacheName, Cache cache = default(Cache), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, cacheName, cache, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Cache instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cache'>
            /// Object containing the user-selectable properties of the Cache. If read-only
            /// properties are included, they must match the existing values of those
            /// properties.
            /// </param>
            public static Cache Update(this ICaches operations, string resourceGroupName, string cacheName, Cache cache = default(Cache))
            {
                return operations.UpdateAsync(resourceGroupName, cacheName, cache).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Cache instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cache'>
            /// Object containing the user-selectable properties of the Cache. If read-only
            /// properties are included, they must match the existing values of those
            /// properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cache> UpdateAsync(this ICaches operations, string resourceGroupName, string cacheName, Cache cache = default(Cache), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, cacheName, cache, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tells a Cache to write generate debug info for support to process.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            public static void DebugInfo(this ICaches operations, string resourceGroupName, string cacheName)
            {
                operations.DebugInfoAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tells a Cache to write generate debug info for support to process.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DebugInfoAsync(this ICaches operations, string resourceGroupName, string cacheName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DebugInfoWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Tells a Cache to write all dirty data to the Storage Target(s). During the
            /// flush, clients will see errors returned until the flush is complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            public static void Flush(this ICaches operations, string resourceGroupName, string cacheName)
            {
                operations.FlushAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tells a Cache to write all dirty data to the Storage Target(s). During the
            /// flush, clients will see errors returned until the flush is complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FlushAsync(this ICaches operations, string resourceGroupName, string cacheName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FlushWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Tells a Stopped state Cache to transition to Active state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            public static void Start(this ICaches operations, string resourceGroupName, string cacheName)
            {
                operations.StartAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tells a Stopped state Cache to transition to Active state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this ICaches operations, string resourceGroupName, string cacheName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Tells an Active Cache to transition to Stopped state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            public static void Stop(this ICaches operations, string resourceGroupName, string cacheName)
            {
                operations.StopAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tells an Active Cache to transition to Stopped state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this ICaches operations, string resourceGroupName, string cacheName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Upgrade a Cache's firmware if a new version is available. Otherwise, this
            /// operation has no effect.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            public static void UpgradeFirmware(this ICaches operations, string resourceGroupName, string cacheName)
            {
                operations.UpgradeFirmwareAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upgrade a Cache's firmware if a new version is available. Otherwise, this
            /// operation has no effect.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of Cache. Length of name must not be greater than 80 and chars must be
            /// from the [-0-9a-zA-Z_] char class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpgradeFirmwareAsync(this ICaches operations, string resourceGroupName, string cacheName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpgradeFirmwareWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
