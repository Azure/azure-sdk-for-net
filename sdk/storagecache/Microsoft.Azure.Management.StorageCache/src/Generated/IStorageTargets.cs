// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// StorageTargets operations.
    /// </summary>
    public partial interface IStorageTargets
    {
        /// <summary>
        /// Returns the StorageTargets for this cache in the subscription and
        /// resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Target resource group.
        /// </param>
        /// <param name='cacheName'>
        /// Name of cache.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloudErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<StorageTargetsResult>> ListByCacheWithHttpMessagesAsync(string resourceGroupName, string cacheName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes a storage target from a cache.  This operation is allowed
        /// at any time, but if the cache is down or unhealthy, the actual
        /// removal of the storage target may be delayed until the cache is
        /// healthy again.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Target resource group.
        /// </param>
        /// <param name='cacheName'>
        /// Name of cache.
        /// </param>
        /// <param name='storageTargetName'>
        /// Name of storage target.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloudErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> DeleteWithHttpMessagesAsync(string resourceGroupName, string cacheName, string storageTargetName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a storage target from a cache.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Target resource group.
        /// </param>
        /// <param name='cacheName'>
        /// Name of cache.
        /// </param>
        /// <param name='storageTargetName'>
        /// Name of storage target.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloudErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<StorageTarget>> GetWithHttpMessagesAsync(string resourceGroupName, string cacheName, string storageTargetName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create/update a storage target.  This operation is allowed at any
        /// time, but if the cache is down or unhealthy, the actual
        /// creation/modification of the storage target may be delayed until
        /// the cache is healthy again.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Target resource group.
        /// </param>
        /// <param name='cacheName'>
        /// Name of cache.
        /// </param>
        /// <param name='storageTargetName'>
        /// Name of storage target.
        /// </param>
        /// <param name='storagetarget'>
        /// Object containing the definition of a storage target.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloudErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<StorageTarget>> CreateWithHttpMessagesAsync(string resourceGroupName, string cacheName, string storageTargetName, StorageTarget storagetarget = default(StorageTarget), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a storage target.  This operation is allowed at any time,
        /// but if the cache is down or unhealthy, the actual
        /// creation/modification of the storage target may be delayed until
        /// the cache is healthy again.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Target resource group.
        /// </param>
        /// <param name='cacheName'>
        /// Name of cache.
        /// </param>
        /// <param name='storageTargetName'>
        /// Name of storage target.
        /// </param>
        /// <param name='storagetarget'>
        /// Object containing the definition of a storage target.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloudErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<StorageTarget>> UpdateWithHttpMessagesAsync(string resourceGroupName, string cacheName, string storageTargetName, StorageTarget storagetarget = default(StorageTarget), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
