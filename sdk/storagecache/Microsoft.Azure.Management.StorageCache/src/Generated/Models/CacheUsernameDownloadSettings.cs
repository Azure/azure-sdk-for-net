// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Settings for Extended Groups username and group download.
    /// </summary>
    public partial class CacheUsernameDownloadSettings
    {
        /// <summary>
        /// Initializes a new instance of the CacheUsernameDownloadSettings
        /// class.
        /// </summary>
        public CacheUsernameDownloadSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CacheUsernameDownloadSettings
        /// class.
        /// </summary>
        /// <param name="extendedGroups">Whether or not Extended Groups is
        /// enabled.</param>
        /// <param name="usernameSource">This setting determines how the cache
        /// gets username and group names for clients. Possible values include:
        /// 'AD', 'LDAP', 'File', 'None'</param>
        /// <param name="groupFileURI">The URI of the file containing group
        /// information (in /etc/group file format). This field must be
        /// populated when 'usernameSource' is set to 'File'.</param>
        /// <param name="userFileURI">The URI of the file containing user
        /// information (in /etc/passwd file format). This field must be
        /// populated when 'usernameSource' is set to 'File'.</param>
        /// <param name="ldapServer">The fully qualified domain name or IP
        /// address of the LDAP server to use.</param>
        /// <param name="ldapBaseDN">The base distinguished name for the LDAP
        /// domain.</param>
        /// <param name="encryptLdapConnection">Whether or not the LDAP
        /// connection should be encrypted.</param>
        /// <param name="requireValidCertificate">Determines if the
        /// certificates must be validated by a certificate authority. When
        /// true, caCertificateURI must be provided.</param>
        /// <param name="autoDownloadCertificate">Determines if the certificate
        /// should be automatically downloaded. This applies to
        /// 'caCertificateURI' only if 'requireValidCertificate' is
        /// true.</param>
        /// <param name="caCertificateURI">The URI of the CA certificate to
        /// validate the LDAP secure connection. This field must be populated
        /// when 'requireValidCertificate' is set to true.</param>
        /// <param name="usernameDownloaded">Indicates whether or not the HPC
        /// Cache has performed the username download successfully. Possible
        /// values include: 'Yes', 'No', 'Error'</param>
        /// <param name="credentials">When present, these are the credentials
        /// for the secure LDAP connection.</param>
        public CacheUsernameDownloadSettings(bool? extendedGroups = default(bool?), string usernameSource = default(string), string groupFileURI = default(string), string userFileURI = default(string), string ldapServer = default(string), string ldapBaseDN = default(string), bool? encryptLdapConnection = default(bool?), bool? requireValidCertificate = default(bool?), bool? autoDownloadCertificate = default(bool?), string caCertificateURI = default(string), string usernameDownloaded = default(string), CacheUsernameDownloadSettingsCredentials credentials = default(CacheUsernameDownloadSettingsCredentials))
        {
            ExtendedGroups = extendedGroups;
            UsernameSource = usernameSource;
            GroupFileURI = groupFileURI;
            UserFileURI = userFileURI;
            LdapServer = ldapServer;
            LdapBaseDN = ldapBaseDN;
            EncryptLdapConnection = encryptLdapConnection;
            RequireValidCertificate = requireValidCertificate;
            AutoDownloadCertificate = autoDownloadCertificate;
            CaCertificateURI = caCertificateURI;
            UsernameDownloaded = usernameDownloaded;
            Credentials = credentials;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets whether or not Extended Groups is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "extendedGroups")]
        public bool? ExtendedGroups { get; set; }

        /// <summary>
        /// Gets or sets this setting determines how the cache gets username
        /// and group names for clients. Possible values include: 'AD', 'LDAP',
        /// 'File', 'None'
        /// </summary>
        [JsonProperty(PropertyName = "usernameSource")]
        public string UsernameSource { get; set; }

        /// <summary>
        /// Gets or sets the URI of the file containing group information (in
        /// /etc/group file format). This field must be populated when
        /// 'usernameSource' is set to 'File'.
        /// </summary>
        [JsonProperty(PropertyName = "groupFileURI")]
        public string GroupFileURI { get; set; }

        /// <summary>
        /// Gets or sets the URI of the file containing user information (in
        /// /etc/passwd file format). This field must be populated when
        /// 'usernameSource' is set to 'File'.
        /// </summary>
        [JsonProperty(PropertyName = "userFileURI")]
        public string UserFileURI { get; set; }

        /// <summary>
        /// Gets or sets the fully qualified domain name or IP address of the
        /// LDAP server to use.
        /// </summary>
        [JsonProperty(PropertyName = "ldapServer")]
        public string LdapServer { get; set; }

        /// <summary>
        /// Gets or sets the base distinguished name for the LDAP domain.
        /// </summary>
        [JsonProperty(PropertyName = "ldapBaseDN")]
        public string LdapBaseDN { get; set; }

        /// <summary>
        /// Gets or sets whether or not the LDAP connection should be
        /// encrypted.
        /// </summary>
        [JsonProperty(PropertyName = "encryptLdapConnection")]
        public bool? EncryptLdapConnection { get; set; }

        /// <summary>
        /// Gets or sets determines if the certificates must be validated by a
        /// certificate authority. When true, caCertificateURI must be
        /// provided.
        /// </summary>
        [JsonProperty(PropertyName = "requireValidCertificate")]
        public bool? RequireValidCertificate { get; set; }

        /// <summary>
        /// Gets or sets determines if the certificate should be automatically
        /// downloaded. This applies to 'caCertificateURI' only if
        /// 'requireValidCertificate' is true.
        /// </summary>
        [JsonProperty(PropertyName = "autoDownloadCertificate")]
        public bool? AutoDownloadCertificate { get; set; }

        /// <summary>
        /// Gets or sets the URI of the CA certificate to validate the LDAP
        /// secure connection. This field must be populated when
        /// 'requireValidCertificate' is set to true.
        /// </summary>
        [JsonProperty(PropertyName = "caCertificateURI")]
        public string CaCertificateURI { get; set; }

        /// <summary>
        /// Gets indicates whether or not the HPC Cache has performed the
        /// username download successfully. Possible values include: 'Yes',
        /// 'No', 'Error'
        /// </summary>
        [JsonProperty(PropertyName = "usernameDownloaded")]
        public string UsernameDownloaded { get; private set; }

        /// <summary>
        /// Gets or sets when present, these are the credentials for the secure
        /// LDAP connection.
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public CacheUsernameDownloadSettingsCredentials Credentials { get; set; }

    }
}
