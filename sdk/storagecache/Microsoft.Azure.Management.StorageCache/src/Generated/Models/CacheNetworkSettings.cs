// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Cache network settings.
    /// </summary>
    public partial class CacheNetworkSettings
    {
        /// <summary>
        /// Initializes a new instance of the CacheNetworkSettings class.
        /// </summary>
        public CacheNetworkSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CacheNetworkSettings class.
        /// </summary>
        /// <param name="mtu">The IPv4 maximum transmission unit configured for
        /// the subnet.</param>
        /// <param name="utilityAddresses">Array of additional IP addresses
        /// used by this Cache.</param>
        /// <param name="dnsServers">DNS servers for the cache to use.  It will
        /// be set from the network configuration if no value is
        /// provided.</param>
        /// <param name="dnsSearchDomain">DNS search domain</param>
        /// <param name="ntpServer">NTP server IP Address or FQDN for the cache
        /// to use. The default is time.windows.com.</param>
        public CacheNetworkSettings(int? mtu = default(int?), IList<string> utilityAddresses = default(IList<string>), IList<string> dnsServers = default(IList<string>), string dnsSearchDomain = default(string), string ntpServer = default(string))
        {
            Mtu = mtu;
            UtilityAddresses = utilityAddresses;
            DnsServers = dnsServers;
            DnsSearchDomain = dnsSearchDomain;
            NtpServer = ntpServer;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the IPv4 maximum transmission unit configured for the
        /// subnet.
        /// </summary>
        [JsonProperty(PropertyName = "mtu")]
        public int? Mtu { get; set; }

        /// <summary>
        /// Gets array of additional IP addresses used by this Cache.
        /// </summary>
        [JsonProperty(PropertyName = "utilityAddresses")]
        public IList<string> UtilityAddresses { get; private set; }

        /// <summary>
        /// Gets or sets DNS servers for the cache to use.  It will be set from
        /// the network configuration if no value is provided.
        /// </summary>
        [JsonProperty(PropertyName = "dnsServers")]
        public IList<string> DnsServers { get; set; }

        /// <summary>
        /// Gets or sets DNS search domain
        /// </summary>
        [JsonProperty(PropertyName = "dnsSearchDomain")]
        public string DnsSearchDomain { get; set; }

        /// <summary>
        /// Gets or sets NTP server IP Address or FQDN for the cache to use.
        /// The default is time.windows.com.
        /// </summary>
        [JsonProperty(PropertyName = "ntpServer")]
        public string NtpServer { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Mtu > 1500)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Mtu", 1500);
            }
            if (Mtu < 576)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Mtu", 576);
            }
        }
    }
}
