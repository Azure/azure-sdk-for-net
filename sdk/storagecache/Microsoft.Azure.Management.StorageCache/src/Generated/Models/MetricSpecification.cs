// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Details about operation related to metrics.
    /// </summary>
    public partial class MetricSpecification
    {
        /// <summary>
        /// Initializes a new instance of the MetricSpecification class.
        /// </summary>
        public MetricSpecification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetricSpecification class.
        /// </summary>
        /// <param name="name">The name of the metric.</param>
        /// <param name="displayName">Localized display name of the
        /// metric.</param>
        /// <param name="displayDescription">The description of the
        /// metric.</param>
        /// <param name="unit">The unit that the metric is measured in.</param>
        /// <param name="aggregationType">The type of metric
        /// aggregation.</param>
        /// <param name="supportedAggregationTypes">Support metric aggregation
        /// type.</param>
        /// <param name="metricClass">Type of metrics.</param>
        /// <param name="dimensions">Dimensions of the metric</param>
        public MetricSpecification(string name = default(string), string displayName = default(string), string displayDescription = default(string), string unit = default(string), string aggregationType = default(string), IList<string> supportedAggregationTypes = default(IList<string>), string metricClass = default(string), IList<MetricDimension> dimensions = default(IList<MetricDimension>))
        {
            Name = name;
            DisplayName = displayName;
            DisplayDescription = displayDescription;
            Unit = unit;
            AggregationType = aggregationType;
            SupportedAggregationTypes = supportedAggregationTypes;
            MetricClass = metricClass;
            Dimensions = dimensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets localized display name of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the description of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "displayDescription")]
        public string DisplayDescription { get; set; }

        /// <summary>
        /// Gets or sets the unit that the metric is measured in.
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or sets the type of metric aggregation.
        /// </summary>
        [JsonProperty(PropertyName = "aggregationType")]
        public string AggregationType { get; set; }

        /// <summary>
        /// Gets or sets support metric aggregation type.
        /// </summary>
        [JsonProperty(PropertyName = "supportedAggregationTypes")]
        public IList<string> SupportedAggregationTypes { get; set; }

        /// <summary>
        /// Gets or sets type of metrics.
        /// </summary>
        [JsonProperty(PropertyName = "metricClass")]
        public string MetricClass { get; set; }

        /// <summary>
        /// Gets or sets dimensions of the metric
        /// </summary>
        [JsonProperty(PropertyName = "dimensions")]
        public IList<MetricDimension> Dimensions { get; set; }

    }
}
