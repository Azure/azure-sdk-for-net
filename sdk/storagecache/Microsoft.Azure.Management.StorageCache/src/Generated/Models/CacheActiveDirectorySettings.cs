// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Active Directory settings used to join a cache to a domain.
    /// </summary>
    public partial class CacheActiveDirectorySettings
    {
        /// <summary>
        /// Initializes a new instance of the CacheActiveDirectorySettings
        /// class.
        /// </summary>
        public CacheActiveDirectorySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CacheActiveDirectorySettings
        /// class.
        /// </summary>
        /// <param name="primaryDnsIpAddress">Primary DNS IP address used to
        /// resolve the Active Directory domain controller's fully qualified
        /// domain name.</param>
        /// <param name="domainName">The fully qualified domain name of the
        /// Active Directory domain controller.</param>
        /// <param name="domainNetBiosName">The Active Directory domain's
        /// NetBIOS name.</param>
        /// <param name="cacheNetBiosName">The NetBIOS name to assign to the
        /// HPC Cache when it joins the Active Directory domain as a server.
        /// Length must 1-15 characters from the class [-0-9a-zA-Z].</param>
        /// <param name="secondaryDnsIpAddress">Secondary DNS IP address used
        /// to resolve the Active Directory domain controller's fully qualified
        /// domain name.</param>
        /// <param name="domainJoined">True if the HPC Cache is joined to the
        /// Active Directory domain. Possible values include: 'Yes', 'No',
        /// 'Error'</param>
        /// <param name="credentials">Active Directory admin credentials used
        /// to join the HPC Cache to a domain.</param>
        public CacheActiveDirectorySettings(string primaryDnsIpAddress, string domainName, string domainNetBiosName, string cacheNetBiosName, string secondaryDnsIpAddress = default(string), string domainJoined = default(string), CacheActiveDirectorySettingsCredentials credentials = default(CacheActiveDirectorySettingsCredentials))
        {
            PrimaryDnsIpAddress = primaryDnsIpAddress;
            SecondaryDnsIpAddress = secondaryDnsIpAddress;
            DomainName = domainName;
            DomainNetBiosName = domainNetBiosName;
            CacheNetBiosName = cacheNetBiosName;
            DomainJoined = domainJoined;
            Credentials = credentials;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets primary DNS IP address used to resolve the Active
        /// Directory domain controller's fully qualified domain name.
        /// </summary>
        [JsonProperty(PropertyName = "primaryDnsIpAddress")]
        public string PrimaryDnsIpAddress { get; set; }

        /// <summary>
        /// Gets or sets secondary DNS IP address used to resolve the Active
        /// Directory domain controller's fully qualified domain name.
        /// </summary>
        [JsonProperty(PropertyName = "secondaryDnsIpAddress")]
        public string SecondaryDnsIpAddress { get; set; }

        /// <summary>
        /// Gets or sets the fully qualified domain name of the Active
        /// Directory domain controller.
        /// </summary>
        [JsonProperty(PropertyName = "domainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or sets the Active Directory domain's NetBIOS name.
        /// </summary>
        [JsonProperty(PropertyName = "domainNetBiosName")]
        public string DomainNetBiosName { get; set; }

        /// <summary>
        /// Gets or sets the NetBIOS name to assign to the HPC Cache when it
        /// joins the Active Directory domain as a server. Length must 1-15
        /// characters from the class [-0-9a-zA-Z].
        /// </summary>
        [JsonProperty(PropertyName = "cacheNetBiosName")]
        public string CacheNetBiosName { get; set; }

        /// <summary>
        /// Gets true if the HPC Cache is joined to the Active Directory
        /// domain. Possible values include: 'Yes', 'No', 'Error'
        /// </summary>
        [JsonProperty(PropertyName = "domainJoined")]
        public string DomainJoined { get; private set; }

        /// <summary>
        /// Gets or sets active Directory admin credentials used to join the
        /// HPC Cache to a domain.
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public CacheActiveDirectorySettingsCredentials Credentials { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PrimaryDnsIpAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrimaryDnsIpAddress");
            }
            if (DomainName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DomainName");
            }
            if (DomainNetBiosName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DomainNetBiosName");
            }
            if (CacheNetBiosName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CacheNetBiosName");
            }
            if (CacheNetBiosName != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(CacheNetBiosName, "^[-0-9a-zA-Z]{1,15}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "CacheNetBiosName", "^[-0-9a-zA-Z]{1,15}$");
                }
            }
            if (Credentials != null)
            {
                Credentials.Validate();
            }
        }
    }
}
