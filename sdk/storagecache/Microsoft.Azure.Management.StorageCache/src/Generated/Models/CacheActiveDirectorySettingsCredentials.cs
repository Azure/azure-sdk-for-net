// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Active Directory admin credentials used to join the HPC Cache to a
    /// domain.
    /// </summary>
    public partial class CacheActiveDirectorySettingsCredentials
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CacheActiveDirectorySettingsCredentials class.
        /// </summary>
        public CacheActiveDirectorySettingsCredentials()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CacheActiveDirectorySettingsCredentials class.
        /// </summary>
        /// <param name="username">Username of the Active Directory domain
        /// administrator. This value is stored encrypted and not returned on
        /// response.</param>
        /// <param name="password">Plain text password of the Active Directory
        /// domain administrator. This value is stored encrypted and not
        /// returned on response.</param>
        public CacheActiveDirectorySettingsCredentials(string username, string password)
        {
            Username = username;
            Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets username of the Active Directory domain administrator.
        /// This value is stored encrypted and not returned on response.
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets plain text password of the Active Directory domain
        /// administrator. This value is stored encrypted and not returned on
        /// response.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Username == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Username");
            }
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
        }
    }
}
