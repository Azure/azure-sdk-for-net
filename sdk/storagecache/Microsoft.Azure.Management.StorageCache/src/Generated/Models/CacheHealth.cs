// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An indication of Cache health. Gives more information about health than
    /// just that related to provisioning.
    /// </summary>
    public partial class CacheHealth
    {
        /// <summary>
        /// Initializes a new instance of the CacheHealth class.
        /// </summary>
        public CacheHealth()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CacheHealth class.
        /// </summary>
        /// <param name="state">List of Cache health states. Possible values
        /// include: 'Unknown', 'Healthy', 'Degraded', 'Down', 'Transitioning',
        /// 'Stopping', 'Stopped', 'Upgrading', 'Flushing'</param>
        /// <param name="statusDescription">Describes explanation of
        /// state.</param>
        /// <param name="conditions">Outstanding conditions that need to be
        /// investigated and resolved.</param>
        public CacheHealth(string state = default(string), string statusDescription = default(string), IList<Condition> conditions = default(IList<Condition>))
        {
            State = state;
            StatusDescription = statusDescription;
            Conditions = conditions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of Cache health states. Possible values include:
        /// 'Unknown', 'Healthy', 'Degraded', 'Down', 'Transitioning',
        /// 'Stopping', 'Stopped', 'Upgrading', 'Flushing'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets describes explanation of state.
        /// </summary>
        [JsonProperty(PropertyName = "statusDescription")]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets outstanding conditions that need to be investigated and
        /// resolved.
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<Condition> Conditions { get; private set; }

    }
}
