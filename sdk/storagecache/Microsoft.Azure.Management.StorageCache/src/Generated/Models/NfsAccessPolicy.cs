// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A set of rules describing access policies applied to NFSv3 clients of
    /// the cache.
    /// </summary>
    public partial class NfsAccessPolicy
    {
        /// <summary>
        /// Initializes a new instance of the NfsAccessPolicy class.
        /// </summary>
        public NfsAccessPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NfsAccessPolicy class.
        /// </summary>
        /// <param name="name">Name identifying this policy. Access Policy
        /// names are not case sensitive.</param>
        /// <param name="accessRules">The set of rules describing client
        /// accesses allowed under this policy.</param>
        public NfsAccessPolicy(string name, IList<NfsAccessRule> accessRules)
        {
            Name = name;
            AccessRules = accessRules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name identifying this policy. Access Policy names are
        /// not case sensitive.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the set of rules describing client accesses allowed
        /// under this policy.
        /// </summary>
        [JsonProperty(PropertyName = "accessRules")]
        public IList<NfsAccessRule> AccessRules { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (AccessRules == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccessRules");
            }
            if (AccessRules != null)
            {
                foreach (var element in AccessRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
