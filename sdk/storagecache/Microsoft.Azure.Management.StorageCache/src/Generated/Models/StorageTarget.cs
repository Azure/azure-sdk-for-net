// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Type of the Storage Target.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class StorageTarget : StorageTargetResource
    {
        /// <summary>
        /// Initializes a new instance of the StorageTarget class.
        /// </summary>
        public StorageTarget()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageTarget class.
        /// </summary>
        /// <param name="name">Name of the Storage Target.</param>
        /// <param name="id">Resource ID of the Storage Target.</param>
        /// <param name="type">Type of the Storage Target;
        /// Microsoft.StorageCache/Cache/StorageTarget</param>
        /// <param name="junctions">List of Cache namespace junctions to target
        /// for namespace associations.</param>
        /// <param name="targetType">Type of the Storage Target.</param>
        /// <param name="provisioningState">ARM provisioning state, see
        /// https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property.
        /// Possible values include: 'Succeeded', 'Failed', 'Cancelled',
        /// 'Creating', 'Deleting', 'Updating'</param>
        /// <param name="nfs3">Properties when targetType is nfs3.</param>
        /// <param name="clfs">Properties when targetType is clfs.</param>
        /// <param name="unknown">Properties when targetType is
        /// unknown.</param>
        public StorageTarget(string name = default(string), string id = default(string), string type = default(string), IList<NamespaceJunction> junctions = default(IList<NamespaceJunction>), string targetType = default(string), string provisioningState = default(string), Nfs3Target nfs3 = default(Nfs3Target), ClfsTarget clfs = default(ClfsTarget), UnknownTarget unknown = default(UnknownTarget))
            : base(name, id, type)
        {
            Junctions = junctions;
            TargetType = targetType;
            ProvisioningState = provisioningState;
            Nfs3 = nfs3;
            Clfs = clfs;
            Unknown = unknown;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of Cache namespace junctions to target for
        /// namespace associations.
        /// </summary>
        [JsonProperty(PropertyName = "properties.junctions")]
        public IList<NamespaceJunction> Junctions { get; set; }

        /// <summary>
        /// Gets or sets type of the Storage Target.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetType")]
        public string TargetType { get; set; }

        /// <summary>
        /// Gets or sets ARM provisioning state, see
        /// https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property.
        /// Possible values include: 'Succeeded', 'Failed', 'Cancelled',
        /// 'Creating', 'Deleting', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets properties when targetType is nfs3.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nfs3")]
        public Nfs3Target Nfs3 { get; set; }

        /// <summary>
        /// Gets or sets properties when targetType is clfs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.clfs")]
        public ClfsTarget Clfs { get; set; }

        /// <summary>
        /// Gets or sets properties when targetType is unknown.
        /// </summary>
        [JsonProperty(PropertyName = "properties.unknown")]
        public UnknownTarget Unknown { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Nfs3 != null)
            {
                Nfs3.Validate();
            }
        }
    }
}
