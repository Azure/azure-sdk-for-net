// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties describing the software upgrade state of the Cache.
    /// </summary>
    public partial class CacheUpgradeStatus
    {
        /// <summary>
        /// Initializes a new instance of the CacheUpgradeStatus class.
        /// </summary>
        public CacheUpgradeStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CacheUpgradeStatus class.
        /// </summary>
        /// <param name="currentFirmwareVersion">Version string of the firmware
        /// currently installed on this Cache.</param>
        /// <param name="firmwareUpdateStatus">True if there is a firmware
        /// update ready to install on this Cache. The firmware will
        /// automatically be installed after firmwareUpdateDeadline if not
        /// triggered earlier via the upgrade operation. Possible values
        /// include: 'available', 'unavailable'</param>
        /// <param name="firmwareUpdateDeadline">Time at which the pending
        /// firmware update will automatically be installed on the
        /// Cache.</param>
        /// <param name="lastFirmwareUpdate">Time of the last successful
        /// firmware update.</param>
        /// <param name="pendingFirmwareVersion">When firmwareUpdateAvailable
        /// is true, this field holds the version string for the
        /// update.</param>
        public CacheUpgradeStatus(string currentFirmwareVersion = default(string), string firmwareUpdateStatus = default(string), System.DateTime? firmwareUpdateDeadline = default(System.DateTime?), System.DateTime? lastFirmwareUpdate = default(System.DateTime?), string pendingFirmwareVersion = default(string))
        {
            CurrentFirmwareVersion = currentFirmwareVersion;
            FirmwareUpdateStatus = firmwareUpdateStatus;
            FirmwareUpdateDeadline = firmwareUpdateDeadline;
            LastFirmwareUpdate = lastFirmwareUpdate;
            PendingFirmwareVersion = pendingFirmwareVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets version string of the firmware currently installed on this
        /// Cache.
        /// </summary>
        [JsonProperty(PropertyName = "currentFirmwareVersion")]
        public string CurrentFirmwareVersion { get; private set; }

        /// <summary>
        /// Gets true if there is a firmware update ready to install on this
        /// Cache. The firmware will automatically be installed after
        /// firmwareUpdateDeadline if not triggered earlier via the upgrade
        /// operation. Possible values include: 'available', 'unavailable'
        /// </summary>
        [JsonProperty(PropertyName = "firmwareUpdateStatus")]
        public string FirmwareUpdateStatus { get; private set; }

        /// <summary>
        /// Gets time at which the pending firmware update will automatically
        /// be installed on the Cache.
        /// </summary>
        [JsonProperty(PropertyName = "firmwareUpdateDeadline")]
        public System.DateTime? FirmwareUpdateDeadline { get; private set; }

        /// <summary>
        /// Gets time of the last successful firmware update.
        /// </summary>
        [JsonProperty(PropertyName = "lastFirmwareUpdate")]
        public System.DateTime? LastFirmwareUpdate { get; private set; }

        /// <summary>
        /// Gets when firmwareUpdateAvailable is true, this field holds the
        /// version string for the update.
        /// </summary>
        [JsonProperty(PropertyName = "pendingFirmwareVersion")]
        public string PendingFirmwareVersion { get; private set; }

    }
}
