// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageCache
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StorageTargets.
    /// </summary>
    public static partial class StorageTargetsExtensions
    {
            /// <summary>
            /// Returns the StorageTargets for this cache in the subscription and resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            public static StorageTargetsResult ListByCache(this IStorageTargets operations, string resourceGroupName, string cacheName)
            {
                return operations.ListByCacheAsync(resourceGroupName, cacheName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the StorageTargets for this cache in the subscription and resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageTargetsResult> ListByCacheAsync(this IStorageTargets operations, string resourceGroupName, string cacheName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByCacheWithHttpMessagesAsync(resourceGroupName, cacheName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a storage target from a cache.  This operation is allowed at any
            /// time, but if the cache is down or unhealthy, the actual removal of the
            /// storage target may be delayed until the cache is healthy again.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='storageTargetName'>
            /// Name of storage target.
            /// </param>
            public static object Delete(this IStorageTargets operations, string resourceGroupName, string cacheName, string storageTargetName)
            {
                return operations.DeleteAsync(resourceGroupName, cacheName, storageTargetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a storage target from a cache.  This operation is allowed at any
            /// time, but if the cache is down or unhealthy, the actual removal of the
            /// storage target may be delayed until the cache is healthy again.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='storageTargetName'>
            /// Name of storage target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IStorageTargets operations, string resourceGroupName, string cacheName, string storageTargetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, cacheName, storageTargetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a storage target from a cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='storageTargetName'>
            /// Name of storage target.
            /// </param>
            public static StorageTarget Get(this IStorageTargets operations, string resourceGroupName, string cacheName, string storageTargetName)
            {
                return operations.GetAsync(resourceGroupName, cacheName, storageTargetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a storage target from a cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='storageTargetName'>
            /// Name of storage target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageTarget> GetAsync(this IStorageTargets operations, string resourceGroupName, string cacheName, string storageTargetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, cacheName, storageTargetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create/update a storage target.  This operation is allowed at any time, but
            /// if the cache is down or unhealthy, the actual creation/modification of the
            /// storage target may be delayed until the cache is healthy again.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='storageTargetName'>
            /// Name of storage target.
            /// </param>
            /// <param name='storagetarget'>
            /// Object containing the definition of a storage target.
            /// </param>
            public static StorageTarget Create(this IStorageTargets operations, string resourceGroupName, string cacheName, string storageTargetName, StorageTarget storagetarget = default(StorageTarget))
            {
                return operations.CreateAsync(resourceGroupName, cacheName, storageTargetName, storagetarget).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create/update a storage target.  This operation is allowed at any time, but
            /// if the cache is down or unhealthy, the actual creation/modification of the
            /// storage target may be delayed until the cache is healthy again.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='storageTargetName'>
            /// Name of storage target.
            /// </param>
            /// <param name='storagetarget'>
            /// Object containing the definition of a storage target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageTarget> CreateAsync(this IStorageTargets operations, string resourceGroupName, string cacheName, string storageTargetName, StorageTarget storagetarget = default(StorageTarget), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, cacheName, storageTargetName, storagetarget, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a storage target.  This operation is allowed at any time, but if the
            /// cache is down or unhealthy, the actual creation/modification of the storage
            /// target may be delayed until the cache is healthy again.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='storageTargetName'>
            /// Name of storage target.
            /// </param>
            /// <param name='storagetarget'>
            /// Object containing the definition of a storage target.
            /// </param>
            public static StorageTarget Update(this IStorageTargets operations, string resourceGroupName, string cacheName, string storageTargetName, StorageTarget storagetarget = default(StorageTarget))
            {
                return operations.UpdateAsync(resourceGroupName, cacheName, storageTargetName, storagetarget).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a storage target.  This operation is allowed at any time, but if the
            /// cache is down or unhealthy, the actual creation/modification of the storage
            /// target may be delayed until the cache is healthy again.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Target resource group.
            /// </param>
            /// <param name='cacheName'>
            /// Name of cache.
            /// </param>
            /// <param name='storageTargetName'>
            /// Name of storage target.
            /// </param>
            /// <param name='storagetarget'>
            /// Object containing the definition of a storage target.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageTarget> UpdateAsync(this IStorageTargets operations, string resourceGroupName, string cacheName, string storageTargetName, StorageTarget storagetarget = default(StorageTarget), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, cacheName, storageTargetName, storagetarget, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
