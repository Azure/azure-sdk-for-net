// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AgFoodPlatform.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Unit systems info for the data provider.
    /// </summary>
    public partial class UnitSystemsInfo
    {
        /// <summary>
        /// Initializes a new instance of the UnitSystemsInfo class.
        /// </summary>
        public UnitSystemsInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UnitSystemsInfo class.
        /// </summary>
        /// <param name="key">UnitSystem key sent as part of
        /// ProviderInput.</param>
        /// <param name="values">List of unit systems supported by this data
        /// provider.</param>
        public UnitSystemsInfo(string key, IList<string> values)
        {
            Key = key;
            Values = values;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unitSystem key sent as part of ProviderInput.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets list of unit systems supported by this data provider.
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public IList<string> Values { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Key == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Key");
            }
            if (Values == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Values");
            }
            if (Key != null)
            {
                if (Key.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Key", 100);
                }
                if (Key.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Key", 2);
                }
            }
        }
    }
}
