// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AgFoodPlatform.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Extension resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Extension : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Extension class.
        /// </summary>
        public Extension()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Extension class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="extensionId">Extension Id.</param>
        /// <param name="extensionCategory">Extension category. e.g.
        /// weather/sensor/satellite.</param>
        /// <param name="installedExtensionVersion">Installed extension
        /// version.</param>
        /// <param name="extensionAuthLink">Extension auth link.</param>
        /// <param name="extensionApiDocsLink">Extension api docs link.</param>
        /// <param name="eTag">The ETag value to implement optimistic
        /// concurrency.</param>
        public Extension(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string extensionId = default(string), string extensionCategory = default(string), string installedExtensionVersion = default(string), string extensionAuthLink = default(string), string extensionApiDocsLink = default(string), string eTag = default(string))
            : base(id, name, type)
        {
            SystemData = systemData;
            ExtensionId = extensionId;
            ExtensionCategory = extensionCategory;
            InstalledExtensionVersion = installedExtensionVersion;
            ExtensionAuthLink = extensionAuthLink;
            ExtensionApiDocsLink = extensionApiDocsLink;
            ETag = eTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Gets extension Id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionId")]
        public string ExtensionId { get; private set; }

        /// <summary>
        /// Gets extension category. e.g. weather/sensor/satellite.
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionCategory")]
        public string ExtensionCategory { get; private set; }

        /// <summary>
        /// Gets installed extension version.
        /// </summary>
        [JsonProperty(PropertyName = "properties.installedExtensionVersion")]
        public string InstalledExtensionVersion { get; private set; }

        /// <summary>
        /// Gets extension auth link.
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionAuthLink")]
        public string ExtensionAuthLink { get; private set; }

        /// <summary>
        /// Gets extension api docs link.
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionApiDocsLink")]
        public string ExtensionApiDocsLink { get; private set; }

        /// <summary>
        /// Gets the ETag value to implement optimistic concurrency.
        /// </summary>
        [JsonProperty(PropertyName = "eTag")]
        public string ETag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExtensionId != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(ExtensionId, "^[A-za-z]{3,50}[.][A-za-z]{3,100}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "ExtensionId", "^[A-za-z]{3,50}[.][A-za-z]{3,100}$");
                }
            }
            if (InstalledExtensionVersion != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(InstalledExtensionVersion, "^([1-9]|10).\\d$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "InstalledExtensionVersion", "^([1-9]|10).\\d$");
                }
            }
        }
    }
}
