// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AgFoodPlatform.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// FarmBeats extension resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class FarmBeatsExtension : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the FarmBeatsExtension class.
        /// </summary>
        public FarmBeatsExtension()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FarmBeatsExtension class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="targetResourceType">Target ResourceType of the
        /// farmBeatsExtension.</param>
        /// <param name="farmBeatsExtensionId">FarmBeatsExtension ID.</param>
        /// <param name="farmBeatsExtensionName">FarmBeatsExtension
        /// name.</param>
        /// <param name="farmBeatsExtensionVersion">FarmBeatsExtension
        /// version.</param>
        /// <param name="publisherId">Publisher ID.</param>
        /// <param name="description">Textual description.</param>
        /// <param name="extensionCategory">Category of the extension. e.g.
        /// weather/sensor/satellite.</param>
        /// <param name="extensionAuthLink">FarmBeatsExtension auth
        /// link.</param>
        /// <param name="extensionApiDocsLink">FarmBeatsExtension api docs
        /// link.</param>
        /// <param name="detailedInformation">Detailed information which shows
        /// summary of requested data.
        /// Used in descriptive get extension metadata call.
        /// Information for weather category per api included are
        /// apisSupported,
        /// customParameters, PlatformParameters and Units supported.</param>
        public FarmBeatsExtension(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string targetResourceType = default(string), string farmBeatsExtensionId = default(string), string farmBeatsExtensionName = default(string), string farmBeatsExtensionVersion = default(string), string publisherId = default(string), string description = default(string), string extensionCategory = default(string), string extensionAuthLink = default(string), string extensionApiDocsLink = default(string), IList<DetailedInformation> detailedInformation = default(IList<DetailedInformation>))
            : base(id, name, type)
        {
            SystemData = systemData;
            TargetResourceType = targetResourceType;
            FarmBeatsExtensionId = farmBeatsExtensionId;
            FarmBeatsExtensionName = farmBeatsExtensionName;
            FarmBeatsExtensionVersion = farmBeatsExtensionVersion;
            PublisherId = publisherId;
            Description = description;
            ExtensionCategory = extensionCategory;
            ExtensionAuthLink = extensionAuthLink;
            ExtensionApiDocsLink = extensionApiDocsLink;
            DetailedInformation = detailedInformation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Gets target ResourceType of the farmBeatsExtension.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetResourceType")]
        public string TargetResourceType { get; private set; }

        /// <summary>
        /// Gets farmBeatsExtension ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.farmBeatsExtensionId")]
        public string FarmBeatsExtensionId { get; private set; }

        /// <summary>
        /// Gets farmBeatsExtension name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.farmBeatsExtensionName")]
        public string FarmBeatsExtensionName { get; private set; }

        /// <summary>
        /// Gets farmBeatsExtension version.
        /// </summary>
        [JsonProperty(PropertyName = "properties.farmBeatsExtensionVersion")]
        public string FarmBeatsExtensionVersion { get; private set; }

        /// <summary>
        /// Gets publisher ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publisherId")]
        public string PublisherId { get; private set; }

        /// <summary>
        /// Gets textual description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets category of the extension. e.g. weather/sensor/satellite.
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionCategory")]
        public string ExtensionCategory { get; private set; }

        /// <summary>
        /// Gets farmBeatsExtension auth link.
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionAuthLink")]
        public string ExtensionAuthLink { get; private set; }

        /// <summary>
        /// Gets farmBeatsExtension api docs link.
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionApiDocsLink")]
        public string ExtensionApiDocsLink { get; private set; }

        /// <summary>
        /// Gets detailed information which shows summary of requested data.
        /// Used in descriptive get extension metadata call.
        /// Information for weather category per api included are
        /// apisSupported,
        /// customParameters, PlatformParameters and Units supported.
        /// </summary>
        [JsonProperty(PropertyName = "properties.detailedInformation")]
        public IList<DetailedInformation> DetailedInformation { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FarmBeatsExtensionId != null)
            {
                if (FarmBeatsExtensionId.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FarmBeatsExtensionId", 100);
                }
                if (FarmBeatsExtensionId.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FarmBeatsExtensionId", 2);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(FarmBeatsExtensionId, "^[A-za-z]{3,50}[.][A-za-z]{3,100}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "FarmBeatsExtensionId", "^[A-za-z]{3,50}[.][A-za-z]{3,100}$");
                }
            }
            if (FarmBeatsExtensionName != null)
            {
                if (FarmBeatsExtensionName.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FarmBeatsExtensionName", 100);
                }
                if (FarmBeatsExtensionName.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FarmBeatsExtensionName", 2);
                }
            }
            if (FarmBeatsExtensionVersion != null)
            {
                if (FarmBeatsExtensionVersion.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FarmBeatsExtensionVersion", 100);
                }
                if (FarmBeatsExtensionVersion.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FarmBeatsExtensionVersion", 2);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(FarmBeatsExtensionVersion, "^([1-9]|10).\\d$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "FarmBeatsExtensionVersion", "^([1-9]|10).\\d$");
                }
            }
            if (PublisherId != null)
            {
                if (PublisherId.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PublisherId", 100);
                }
                if (PublisherId.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PublisherId", 2);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 500);
                }
                if (Description.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 2);
                }
            }
            if (ExtensionCategory != null)
            {
                if (ExtensionCategory.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ExtensionCategory", 100);
                }
                if (ExtensionCategory.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ExtensionCategory", 2);
                }
            }
            if (DetailedInformation != null)
            {
                foreach (var element in DetailedInformation)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
