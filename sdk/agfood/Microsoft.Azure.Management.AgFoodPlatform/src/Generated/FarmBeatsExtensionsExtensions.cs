// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AgFoodPlatform
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FarmBeatsExtensions.
    /// </summary>
    public static partial class FarmBeatsExtensionsExtensions
    {
            /// <summary>
            /// Get list of farmBeats extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='farmBeatsExtensionIds'>
            /// FarmBeatsExtension ids.
            /// </param>
            /// <param name='farmBeatsExtensionNames'>
            /// FarmBeats extension names.
            /// </param>
            /// <param name='extensionCategories'>
            /// Extension categories.
            /// </param>
            /// <param name='publisherIds'>
            /// Publisher ids.
            /// </param>
            /// <param name='maxPageSize'>
            /// Maximum number of items needed (inclusive).
            /// Minimum = 10, Maximum = 1000, Default value = 50.
            /// </param>
            public static FarmBeatsExtensionListResponse List(this IFarmBeatsExtensions operations, IList<string> farmBeatsExtensionIds = default(IList<string>), IList<string> farmBeatsExtensionNames = default(IList<string>), IList<string> extensionCategories = default(IList<string>), IList<string> publisherIds = default(IList<string>), int? maxPageSize = 50)
            {
                return operations.ListAsync(farmBeatsExtensionIds, farmBeatsExtensionNames, extensionCategories, publisherIds, maxPageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of farmBeats extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='farmBeatsExtensionIds'>
            /// FarmBeatsExtension ids.
            /// </param>
            /// <param name='farmBeatsExtensionNames'>
            /// FarmBeats extension names.
            /// </param>
            /// <param name='extensionCategories'>
            /// Extension categories.
            /// </param>
            /// <param name='publisherIds'>
            /// Publisher ids.
            /// </param>
            /// <param name='maxPageSize'>
            /// Maximum number of items needed (inclusive).
            /// Minimum = 10, Maximum = 1000, Default value = 50.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FarmBeatsExtensionListResponse> ListAsync(this IFarmBeatsExtensions operations, IList<string> farmBeatsExtensionIds = default(IList<string>), IList<string> farmBeatsExtensionNames = default(IList<string>), IList<string> extensionCategories = default(IList<string>), IList<string> publisherIds = default(IList<string>), int? maxPageSize = 50, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(farmBeatsExtensionIds, farmBeatsExtensionNames, extensionCategories, publisherIds, maxPageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get farmBeats extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='farmBeatsExtensionId'>
            /// farmBeatsExtensionId to be queried.
            /// </param>
            public static FarmBeatsExtension Get(this IFarmBeatsExtensions operations, string farmBeatsExtensionId)
            {
                return operations.GetAsync(farmBeatsExtensionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get farmBeats extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='farmBeatsExtensionId'>
            /// farmBeatsExtensionId to be queried.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FarmBeatsExtension> GetAsync(this IFarmBeatsExtensions operations, string farmBeatsExtensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(farmBeatsExtensionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
