// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AgFoodPlatform
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Extensions.
    /// </summary>
    public static partial class ExtensionsExtensions
    {
            /// <summary>
            /// Install extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// Id of extension resource.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static Extension Create(this IExtensions operations, string extensionId, string farmBeatsResourceName, string resourceGroupName)
            {
                return operations.CreateAsync(extensionId, farmBeatsResourceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Install extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// Id of extension resource.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extension> CreateAsync(this IExtensions operations, string extensionId, string farmBeatsResourceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(extensionId, farmBeatsResourceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get installed extension details by extension id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// Id of extension resource.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static Extension Get(this IExtensions operations, string extensionId, string farmBeatsResourceName, string resourceGroupName)
            {
                return operations.GetAsync(extensionId, farmBeatsResourceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get installed extension details by extension id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// Id of extension resource.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extension> GetAsync(this IExtensions operations, string extensionId, string farmBeatsResourceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(extensionId, farmBeatsResourceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upgrade to latest extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// Id of extension resource.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static Extension Update(this IExtensions operations, string extensionId, string farmBeatsResourceName, string resourceGroupName)
            {
                return operations.UpdateAsync(extensionId, farmBeatsResourceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upgrade to latest extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// Id of extension resource.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extension> UpdateAsync(this IExtensions operations, string extensionId, string farmBeatsResourceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(extensionId, farmBeatsResourceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uninstall extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// Id of extension resource.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void Delete(this IExtensions operations, string extensionId, string farmBeatsResourceName, string resourceGroupName)
            {
                operations.DeleteAsync(extensionId, farmBeatsResourceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uninstall extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// Id of extension resource.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IExtensions operations, string extensionId, string farmBeatsResourceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(extensionId, farmBeatsResourceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get installed extensions details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='extensionIds'>
            /// Installed extension ids.
            /// </param>
            /// <param name='extensionCategories'>
            /// Installed extension categories.
            /// </param>
            /// <param name='maxPageSize'>
            /// Maximum number of items needed (inclusive).
            /// Minimum = 10, Maximum = 1000, Default value = 50.
            /// </param>
            /// <param name='skipToken'>
            /// Skip token for getting next set of results.
            /// </param>
            public static ExtensionListResponse ListByFarmBeats(this IExtensions operations, string resourceGroupName, string farmBeatsResourceName, IList<string> extensionIds = default(IList<string>), IList<string> extensionCategories = default(IList<string>), int? maxPageSize = 50, string skipToken = default(string))
            {
                return operations.ListByFarmBeatsAsync(resourceGroupName, farmBeatsResourceName, extensionIds, extensionCategories, maxPageSize, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get installed extensions details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='extensionIds'>
            /// Installed extension ids.
            /// </param>
            /// <param name='extensionCategories'>
            /// Installed extension categories.
            /// </param>
            /// <param name='maxPageSize'>
            /// Maximum number of items needed (inclusive).
            /// Minimum = 10, Maximum = 1000, Default value = 50.
            /// </param>
            /// <param name='skipToken'>
            /// Skip token for getting next set of results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtensionListResponse> ListByFarmBeatsAsync(this IExtensions operations, string resourceGroupName, string farmBeatsResourceName, IList<string> extensionIds = default(IList<string>), IList<string> extensionCategories = default(IList<string>), int? maxPageSize = 50, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFarmBeatsWithHttpMessagesAsync(resourceGroupName, farmBeatsResourceName, extensionIds, extensionCategories, maxPageSize, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
