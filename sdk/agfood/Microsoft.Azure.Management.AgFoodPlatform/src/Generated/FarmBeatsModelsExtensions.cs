// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AgFoodPlatform
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FarmBeatsModels.
    /// </summary>
    public static partial class FarmBeatsModelsExtensions
    {
            /// <summary>
            /// Get FarmBeats resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            public static FarmBeats Get(this IFarmBeatsModels operations, string resourceGroupName, string farmBeatsResourceName)
            {
                return operations.GetAsync(resourceGroupName, farmBeatsResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get FarmBeats resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FarmBeats> GetAsync(this IFarmBeatsModels operations, string resourceGroupName, string farmBeatsResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, farmBeatsResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update FarmBeats resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='body'>
            /// FarmBeats resource create or update request object.
            /// </param>
            public static FarmBeats CreateOrUpdate(this IFarmBeatsModels operations, string farmBeatsResourceName, string resourceGroupName, FarmBeats body)
            {
                return operations.CreateOrUpdateAsync(farmBeatsResourceName, resourceGroupName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update FarmBeats resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='body'>
            /// FarmBeats resource create or update request object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FarmBeats> CreateOrUpdateAsync(this IFarmBeatsModels operations, string farmBeatsResourceName, string resourceGroupName, FarmBeats body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(farmBeatsResourceName, resourceGroupName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a FarmBeats resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='body'>
            /// Request object.
            /// </param>
            public static FarmBeats Update(this IFarmBeatsModels operations, string farmBeatsResourceName, string resourceGroupName, FarmBeatsUpdateRequestModel body)
            {
                return operations.UpdateAsync(farmBeatsResourceName, resourceGroupName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a FarmBeats resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='body'>
            /// Request object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FarmBeats> UpdateAsync(this IFarmBeatsModels operations, string farmBeatsResourceName, string resourceGroupName, FarmBeatsUpdateRequestModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(farmBeatsResourceName, resourceGroupName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a FarmBeats resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            public static void Delete(this IFarmBeatsModels operations, string resourceGroupName, string farmBeatsResourceName)
            {
                operations.DeleteAsync(resourceGroupName, farmBeatsResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a FarmBeats resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='farmBeatsResourceName'>
            /// FarmBeats resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IFarmBeatsModels operations, string resourceGroupName, string farmBeatsResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, farmBeatsResourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the FarmBeats instances for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='maxPageSize'>
            /// Maximum number of items needed (inclusive).
            /// Minimum = 10, Maximum = 1000, Default value = 50.
            /// </param>
            /// <param name='skipToken'>
            /// Skip token for getting next set of results.
            /// </param>
            public static FarmBeatsListResponse ListBySubscription(this IFarmBeatsModels operations, int? maxPageSize = 50, string skipToken = default(string))
            {
                return operations.ListBySubscriptionAsync(maxPageSize, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the FarmBeats instances for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='maxPageSize'>
            /// Maximum number of items needed (inclusive).
            /// Minimum = 10, Maximum = 1000, Default value = 50.
            /// </param>
            /// <param name='skipToken'>
            /// Skip token for getting next set of results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FarmBeatsListResponse> ListBySubscriptionAsync(this IFarmBeatsModels operations, int? maxPageSize = 50, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(maxPageSize, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the FarmBeats instances for a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='maxPageSize'>
            /// Maximum number of items needed (inclusive).
            /// Minimum = 10, Maximum = 1000, Default value = 50.
            /// </param>
            /// <param name='skipToken'>
            /// Continuation token for getting next set of results.
            /// </param>
            public static FarmBeatsListResponse ListByResourceGroup(this IFarmBeatsModels operations, string resourceGroupName, int? maxPageSize = 50, string skipToken = default(string))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, maxPageSize, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the FarmBeats instances for a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='maxPageSize'>
            /// Maximum number of items needed (inclusive).
            /// Minimum = 10, Maximum = 1000, Default value = 50.
            /// </param>
            /// <param name='skipToken'>
            /// Continuation token for getting next set of results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FarmBeatsListResponse> ListByResourceGroupAsync(this IFarmBeatsModels operations, string resourceGroupName, int? maxPageSize = 50, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, maxPageSize, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
