// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Class containing more granular details about the device
    /// </summary>
    public partial class DeviceDetails
    {
        /// <summary>
        /// Initializes a new instance of the DeviceDetails class.
        /// </summary>
        public DeviceDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeviceDetails class.
        /// </summary>
        /// <param name="endpointCount">Total number of endpoints that are
        /// currently on the device ( i.e. number of shares on FileServer or
        /// number of volumes on IscsiServer)</param>
        /// <param name="totalStorageInBytes">Total storage available on the
        /// device in bytes.</param>
        /// <param name="totalLocalStorageInBytes">Total local storage capacity
        /// in device in bytes.</param>
        /// <param name="provisionedStorageInBytes">Storage in bytes that has
        /// been provisioned on the device including both local and
        /// cloud</param>
        /// <param name="provisionedLocalStorageInBytes">Storage in bytes that
        /// has been provisioned locally on the device</param>
        /// <param name="usingStorageInBytes">Storage that is being currently
        /// used in bytes including both local and cloud</param>
        /// <param name="usingLocalStorageInBytes">Local Storage that is being
        /// currently used in bytes</param>
        /// <param name="totalBackupSizeInBytes">Total size taken up by backups
        /// in bytes</param>
        /// <param name="availableStorageInBytes">Total pending available
        /// storage on the device in bytes</param>
        /// <param name="availableLocalStorageInBytes">Local pending storage
        /// available on the device in bytes</param>
        public DeviceDetails(int? endpointCount = default(int?), long? totalStorageInBytes = default(long?), long? totalLocalStorageInBytes = default(long?), long? provisionedStorageInBytes = default(long?), long? provisionedLocalStorageInBytes = default(long?), long? usingStorageInBytes = default(long?), long? usingLocalStorageInBytes = default(long?), long? totalBackupSizeInBytes = default(long?), long? availableStorageInBytes = default(long?), long? availableLocalStorageInBytes = default(long?))
        {
            EndpointCount = endpointCount;
            TotalStorageInBytes = totalStorageInBytes;
            TotalLocalStorageInBytes = totalLocalStorageInBytes;
            ProvisionedStorageInBytes = provisionedStorageInBytes;
            ProvisionedLocalStorageInBytes = provisionedLocalStorageInBytes;
            UsingStorageInBytes = usingStorageInBytes;
            UsingLocalStorageInBytes = usingLocalStorageInBytes;
            TotalBackupSizeInBytes = totalBackupSizeInBytes;
            AvailableStorageInBytes = availableStorageInBytes;
            AvailableLocalStorageInBytes = availableLocalStorageInBytes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets total number of endpoints that are currently on the
        /// device ( i.e. number of shares on FileServer or number of volumes
        /// on IscsiServer)
        /// </summary>
        [JsonProperty(PropertyName = "endpointCount")]
        public int? EndpointCount { get; set; }

        /// <summary>
        /// Gets or sets total storage available on the device in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "totalStorageInBytes")]
        public long? TotalStorageInBytes { get; set; }

        /// <summary>
        /// Gets or sets total local storage capacity in device in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "totalLocalStorageInBytes")]
        public long? TotalLocalStorageInBytes { get; set; }

        /// <summary>
        /// Gets or sets storage in bytes that has been provisioned on the
        /// device including both local and cloud
        /// </summary>
        [JsonProperty(PropertyName = "provisionedStorageInBytes")]
        public long? ProvisionedStorageInBytes { get; set; }

        /// <summary>
        /// Gets or sets storage in bytes that has been provisioned locally on
        /// the device
        /// </summary>
        [JsonProperty(PropertyName = "provisionedLocalStorageInBytes")]
        public long? ProvisionedLocalStorageInBytes { get; set; }

        /// <summary>
        /// Gets or sets storage that is being currently used in bytes
        /// including both local and cloud
        /// </summary>
        [JsonProperty(PropertyName = "usingStorageInBytes")]
        public long? UsingStorageInBytes { get; set; }

        /// <summary>
        /// Gets or sets local Storage that is being currently used in bytes
        /// </summary>
        [JsonProperty(PropertyName = "usingLocalStorageInBytes")]
        public long? UsingLocalStorageInBytes { get; set; }

        /// <summary>
        /// Gets or sets total size taken up by backups in bytes
        /// </summary>
        [JsonProperty(PropertyName = "totalBackupSizeInBytes")]
        public long? TotalBackupSizeInBytes { get; set; }

        /// <summary>
        /// Gets or sets total pending available storage on the device in bytes
        /// </summary>
        [JsonProperty(PropertyName = "availableStorageInBytes")]
        public long? AvailableStorageInBytes { get; set; }

        /// <summary>
        /// Gets or sets local pending storage available on the device in bytes
        /// </summary>
        [JsonProperty(PropertyName = "availableLocalStorageInBytes")]
        public long? AvailableLocalStorageInBytes { get; set; }

    }
}
