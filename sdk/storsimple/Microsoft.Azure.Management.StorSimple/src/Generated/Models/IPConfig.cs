// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple1200Series.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Details related to the IP address configuration
    /// </summary>
    public partial class IPConfig
    {
        /// <summary>
        /// Initializes a new instance of the IPConfig class.
        /// </summary>
        public IPConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IPConfig class.
        /// </summary>
        /// <param name="ipAddress">The ipaddress of the network adapter,
        /// either ipv4 or ipv6.</param>
        /// <param name="gateway">The gateway of the network adapter.</param>
        /// <param name="prefixLength">The prefix length of the network
        /// adapter.</param>
        public IPConfig(string ipAddress, string gateway, int? prefixLength = default(int?))
        {
            IpAddress = ipAddress;
            PrefixLength = prefixLength;
            Gateway = gateway;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ipaddress of the network adapter, either ipv4 or
        /// ipv6.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or sets the prefix length of the network adapter.
        /// </summary>
        [JsonProperty(PropertyName = "prefixLength")]
        public int? PrefixLength { get; set; }

        /// <summary>
        /// Gets or sets the gateway of the network adapter.
        /// </summary>
        [JsonProperty(PropertyName = "gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IpAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IpAddress");
            }
            if (Gateway == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Gateway");
            }
        }
    }
}
