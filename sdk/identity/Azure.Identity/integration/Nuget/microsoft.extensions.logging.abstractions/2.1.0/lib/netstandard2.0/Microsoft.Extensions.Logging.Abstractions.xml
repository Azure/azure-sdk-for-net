<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.Logging.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.Logging.IExternalScopeProvider">
            <summary>
            Represents a storage of common scope data.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope``1(System.Action{System.Object,``0},``0)">
            <summary>
            Executes callback for each currently active scope objects in order of creation.
            All callbacks are guaranteed to be called inline from this method.
            </summary>
            <param name="callback">The callback to be executed for every scope object</param>
            <param name="state">The state object to be passed into the callback</param>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="M:Microsoft.Extensions.Logging.IExternalScopeProvider.Push(System.Object)">
            <summary>
            Adds scope object to the list
            </summary>
            <param name="state">The scope object</param>
            <returns>The <see cref="T:System.IDisposable"/> token that removes scope on dispose.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILogger">
            <summary>
            Represents a type used to perform logging.
            </summary>
            <remarks>Aggregates most logging patterns to a single method.</remarks>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Writes a log entry.
            </summary>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">Id of the event.</param>
            <param name="state">The entry to be written. Can be also an object.</param>
            <param name="exception">The exception related to this entry.</param>
            <param name="formatter">Function to create a <c>string</c> message of the <paramref name="state"/> and <paramref name="exception"/>.</param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Checks if the given <paramref name="logLevel"/> is enabled.
            </summary>
            <param name="logLevel">level to be checked.</param>
            <returns><c>true</c> if enabled.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)">
            <summary>
            Begins a logical operation scope.
            </summary>
            <param name="state">The identifier for the scope.</param>
            <returns>An IDisposable that ends the logical operation scope on dispose.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggerFactory">
            <summary>
            Represents a type used to configure the logging system and create instances of <see cref="T:Microsoft.Extensions.Logging.ILogger"/> from
            the registered <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/> to the logging system.
            </summary>
            <param name="provider">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>.</param>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILogger`1">
            <summary>
            A generic interface for logging where the category name is derived from the specified
            <typeparamref name="TCategoryName"/> type name.
            Generally used to enable activation of a named <see cref="T:Microsoft.Extensions.Logging.ILogger"/> from dependency injection.
            </summary>
            <typeparam name="TCategoryName">The type who's name is used for the logger category name.</typeparam>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggerProvider">
            <summary>
            Represents a type that can create instances of <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerProvider.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.Internal.FormattedLogValues">
            <summary>
            LogValues to enable formatting options supported by <see cref="M:string.Format"/>.
            This also enables using {NamedformatItem} in the format string.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Logging.Internal.LogValuesFormatter">
            <summary>
            Formatter to convert the named format items like {NamedformatItem} to <see cref="M:string.Format"/> format.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Logging.Abstractions.Internal.NullScope">
            <summary>
            An empty scope without any logic
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.Internal.NullScope.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Logging.Abstractions.NullLogger">
            <summary>
            Minimalistic logger that does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory">
            <summary>
            An <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> used to create instance of
            <see cref="T:Microsoft.Extensions.Logging.Abstractions.NullLogger"/> that logs nothing.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory.CreateLogger(System.String)">
            <inheritdoc />
            <remarks>
            This returns a <see cref="T:Microsoft.Extensions.Logging.Abstractions.NullLogger"/> instance which logs nothing.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <inheritdoc />
            <remarks>
            This method ignores the parameter and does nothing.
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.Logging.Abstractions.NullLogger`1">
            <summary>
            Minimalistic logger that does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLogger`1.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLogger`1.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
            <remarks>
            This method ignores the parameters and does nothing.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLogger`1.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider">
            <summary>
            Provider for the <see cref="T:Microsoft.Extensions.Logging.Abstractions.NullLogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider.CreateLogger(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.Logging.Abstractions.Resource.UnexpectedNumberOfNamedParameters">
            <summary>
            The format string '{0}' does not have the expected number of named parameters. Expected {1} parameter(s) but found {2} parameter(s).
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Abstractions.Resource.FormatUnexpectedNumberOfNamedParameters(System.Object,System.Object,System.Object)">
            <summary>
            The format string '{0}' does not have the expected number of named parameters. Expected {1} parameter(s) but found {2} parameter(s).
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ISupportExternalScope">
            <summary>
            Represents a <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/> that is able to consume external scope information.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            Sets external scope information source for logger provider.
            </summary>
            <param name="scopeProvider"></param>
        </member>
        <member name="T:Microsoft.Extensions.Logging.LoggerExtensions">
            <summary>
            ILogger extension methods for common scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical(0, exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical(0, "Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical("Processing request from {Address}", address)</example>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">The event id associated with the log.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.BeginScope(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Formats the message and creates a scope.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to create the scope in.</param>
            <param name="messageFormat">Format string of the log message in message template format. Example: <code>"User {User} logged in from {Address}"</code></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A disposable scope object. Can be null.</returns>
            <example>
            using(logger.BeginScope("Processing request from {Address}", address))
            {
            }
            </example>
        </member>
        <member name="T:Microsoft.Extensions.Logging.LoggerExternalScopeProvider">
            <summary>
            Default implemenation of <see cref="T:Microsoft.Extensions.Logging.IExternalScopeProvider"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExternalScopeProvider.ForEachScope``1(System.Action{System.Object,``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExternalScopeProvider.Push(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Logging.LoggerFactoryExtensions">
            <summary>
            ILoggerFactory extension methods for common scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerFactoryExtensions.CreateLogger``1(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a new ILogger instance using the full name of the given type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerFactoryExtensions.CreateLogger(Microsoft.Extensions.Logging.ILoggerFactory,System.Type)">
            <summary>
            Creates a new ILogger instance using the full name of the given type.
            </summary>
            <param name="factory">The factory.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:Microsoft.Extensions.Logging.LoggerMessage">
            <summary>
            Creates delegates which can be later cached to log messages in a performant way.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope(System.String)">
            <summary>
            Creates a delegate which can be invoked to create a log scope.
            </summary>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log scope.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope``1(System.String)">
            <summary>
            Creates a delegate which can be invoked to create a log scope.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log scope.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope``2(System.String)">
            <summary>
            Creates a delegate which can be invoked to create a log scope.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <typeparam name="T2">The type of the second parameter passed to the named format string.</typeparam>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log scope.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope``3(System.String)">
            <summary>
            Creates a delegate which can be invoked to create a log scope.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <typeparam name="T2">The type of the second parameter passed to the named format string.</typeparam>
            <typeparam name="T3">The type of the third parameter passed to the named format string.</typeparam>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log scope.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Creates a delegate which can be invoked for logging a message.
            </summary>
            <param name="logLevel">The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/></param>
            <param name="eventId">The event id</param>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log message.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.Define``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Creates a delegate which can be invoked for logging a message.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <param name="logLevel">The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/></param>
            <param name="eventId">The event id</param>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log message.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.Define``2(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Creates a delegate which can be invoked for logging a message.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <typeparam name="T2">The type of the second parameter passed to the named format string.</typeparam>
            <param name="logLevel">The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/></param>
            <param name="eventId">The event id</param>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log message.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.Define``3(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Creates a delegate which can be invoked for logging a message.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <typeparam name="T2">The type of the second parameter passed to the named format string.</typeparam>
            <typeparam name="T3">The type of the third parameter passed to the named format string.</typeparam>
            <param name="logLevel">The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/></param>
            <param name="eventId">The event id</param>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log message.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.Define``4(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Creates a delegate which can be invoked for logging a message.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <typeparam name="T2">The type of the second parameter passed to the named format string.</typeparam>
            <typeparam name="T3">The type of the third parameter passed to the named format string.</typeparam>
            <typeparam name="T4">The type of the fourth parameter passed to the named format string.</typeparam>
            <param name="logLevel">The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/></param>
            <param name="eventId">The event id</param>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log message.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.Define``5(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Creates a delegate which can be invoked for logging a message.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <typeparam name="T2">The type of the second parameter passed to the named format string.</typeparam>
            <typeparam name="T3">The type of the third parameter passed to the named format string.</typeparam>
            <typeparam name="T4">The type of the fourth parameter passed to the named format string.</typeparam>
            <typeparam name="T5">The type of the fifth parameter passed to the named format string.</typeparam>
            <param name="logLevel">The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/></param>
            <param name="eventId">The event id</param>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log message.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerMessage.Define``6(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Creates a delegate which can be invoked for logging a message.
            </summary>
            <typeparam name="T1">The type of the first parameter passed to the named format string.</typeparam>
            <typeparam name="T2">The type of the second parameter passed to the named format string.</typeparam>
            <typeparam name="T3">The type of the third parameter passed to the named format string.</typeparam>
            <typeparam name="T4">The type of the fourth parameter passed to the named format string.</typeparam>
            <typeparam name="T5">The type of the fifth parameter passed to the named format string.</typeparam>
            <typeparam name="T6">The type of the sixth parameter passed to the named format string.</typeparam>
            <param name="logLevel">The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/></param>
            <param name="eventId">The event id</param>
            <param name="formatString">The named format string</param>
            <returns>A delegate which when invoked creates a log message.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.Logger`1">
            <summary>
            Delegates to a new <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance using the full name of the given type, created by the
            provided <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Logger`1.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Logging.Logger`1"/>.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="T:Microsoft.Extensions.Logging.LogLevel">
            <summary>
            Defines logging severity levels.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Logging.LogLevel.Trace">
            <summary>
            Logs that contain the most detailed messages. These messages may contain sensitive application data.
            These messages are disabled by default and should never be enabled in a production environment.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Logging.LogLevel.Debug">
            <summary>
            Logs that are used for interactive investigation during development.  These logs should primarily contain
            information useful for debugging and have no long-term value.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Logging.LogLevel.Information">
            <summary>
            Logs that track the general flow of the application. These logs should have long-term value.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Logging.LogLevel.Warning">
            <summary>
            Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the
            application execution to stop.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Logging.LogLevel.Error">
            <summary>
            Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a
            failure in the current activity, not an application-wide failure.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Logging.LogLevel.Critical">
            <summary>
            Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires
            immediate attention.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Logging.LogLevel.None">
            <summary>
            Not used for writing log messages. Specifies that a logging category should not write any messages.
            </summary>
        </member>
    </members>
</doc>
