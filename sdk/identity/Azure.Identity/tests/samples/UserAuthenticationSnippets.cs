// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.IO;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Security.KeyVault.Secrets;
using Azure.Storage.Blobs;

#pragma warning disable CS8892 // Method 'UserAuthenticationSnippets.Main()' will not be used as an entry point because a synchronous entry point 'AutoGeneratedProgram.Main(string[])' was found.

namespace Azure.Identity.Samples
{
    public class UserAuthenticationSnippets
    {
        #region Snippet:Identity_ClientSideUserAuthentication_Persist_TokenCache_AuthRecordPath
        private const string AUTH_RECORD_PATH = "./tokencache.bin";
        #endregion

        public void Identity_ClientSideUserAuthentication_SimpleInteractiveBrowser()
        {
            #region Snippet:Identity_ClientSideUserAuthentication_SimpleInteractiveBrowser
            var client = new SecretClient(
                new Uri("https://myvault.azure.vaults.net/"),
                new InteractiveBrowserCredential()
            );
            #endregion
        }

        public void Identity_ClientSideUserAuthentication_SimpleDeviceCode()
        {
            #region Snippet:Identity_ClientSideUserAuthentication_SimpleDeviceCode
            var credential = new DeviceCodeCredential();

            var client = new BlobClient(
                new Uri("https://myaccount.blob.core.windows.net/mycontainer/myblob"),
                credential
            );
            #endregion
        }

        public async Task Identity_ClientSideUserAuthentication_DisableAutomaticAuthentication()
        {
            #region Snippet:Identity_ClientSideUserAuthentication_DisableAutomaticAuthentication
            var credential = new InteractiveBrowserCredential(
                new InteractiveBrowserCredentialOptions
                {
                    DisableAutomaticAuthentication = true
                });

            await credential.AuthenticateAsync();

            var client = new SecretClient(new Uri("https://myvault.azure.vaults.net/"), credential);
            #endregion

            #region Snippet:Identity_ClientSideUserAuthentication_DisableAutomaticAuthentication_ExHandling
            try
            {
                client.GetSecret("secret");
            }
            catch (AuthenticationRequiredException e)
            {
                await EnsureAnimationCompleteAsync();

                await credential.AuthenticateAsync(e.TokenRequestContext);

                client.GetSecret("secret");
            }
            #endregion
        }

        private Task EnsureAnimationCompleteAsync() => Task.CompletedTask;

        public static async Task<TokenCredential> GetUserCredentialAsync()
        {
            if (!File.Exists(AUTH_RECORD_PATH))
            {
                #region Snippet:Identity_ClientSideUserAuthentication_Persist_TokenCache
                var credential = new InteractiveBrowserCredential(
                    new InteractiveBrowserCredentialOptions
                    {
                        TokenCachePersistenceOptions = new TokenCachePersistenceOptions()
                    });
                #endregion

                #region Snippet:Identity_ClientSideUserAuthentication_Persist_AuthRecord
                AuthenticationRecord authRecord = await credential.AuthenticateAsync();

                using (var authRecordStream = new FileStream(AUTH_RECORD_PATH, FileMode.Create, FileAccess.Write))
                {
                    await authRecord.SerializeAsync(authRecordStream);
                }

                #endregion

                return credential;
            }
            else
            {
                #region Snippet:Identity_ClientSideUserAuthentication_Persist_SilentAuth
                AuthenticationRecord authRecord;

                using (var authRecordStream = new FileStream(AUTH_RECORD_PATH, FileMode.Open, FileAccess.Read))
                {
                    authRecord = await AuthenticationRecord.DeserializeAsync(authRecordStream);
                }

                var credential = new InteractiveBrowserCredential(
                    new InteractiveBrowserCredentialOptions
                    {
                        TokenCachePersistenceOptions = new TokenCachePersistenceOptions(),
                        AuthenticationRecord = authRecord
                    });
                #endregion

                return credential;
            }
        }

        public static async Task Main()
        {
            InteractiveBrowserCredential credential;

            if (!File.Exists(AUTH_RECORD_PATH))
            {
                credential = new InteractiveBrowserCredential(
                    new InteractiveBrowserCredentialOptions
                    {
                        TokenCachePersistenceOptions = new TokenCachePersistenceOptions()
                    });

                AuthenticationRecord authRecord = await credential.AuthenticateAsync();

                using (var authRecordStream = new FileStream(AUTH_RECORD_PATH, FileMode.Create, FileAccess.Write))
                {
                    await authRecord.SerializeAsync(authRecordStream);
                }
            }
            else
            {
                AuthenticationRecord authRecord;

                using (var authRecordStream = new FileStream(AUTH_RECORD_PATH, FileMode.Open, FileAccess.Read))
                {
                    authRecord = await AuthenticationRecord.DeserializeAsync(authRecordStream);
                }

                credential = new InteractiveBrowserCredential(
                    new InteractiveBrowserCredentialOptions
                    {
                        TokenCachePersistenceOptions = new TokenCachePersistenceOptions(),
                        AuthenticationRecord = authRecord
                    });
            }

            var client = new SecretClient(new Uri("https://myvault.azure.vaults.net/"), credential);
        }
    }
}
