// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.AI.DocumentTranslation.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.DocumentTranslation
{
    internal partial class DocumentTranslationRestClient
    {
        private string endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of DocumentTranslationRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public DocumentTranslationRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateSubmitBatchRequestRequest(BatchSubmissionRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/batches", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary>
        /// Use this API to submit a bulk (batch) translation request to the Document Translation service.
        /// 
        /// Each request can contain multiple documents and must contain a source and destination container for each document.
        /// 
        /// 
        /// 
        /// The prefix and suffix filter (if supplied) are used to filter folders. The prefix is applied to the subpath after the container name.
        /// 
        /// 
        /// 
        /// Glossaries / Translation memory can be included in the request and are applied by the service when the document is translated.
        /// 
        /// 
        /// 
        /// If the glossary is invalid or unreachable during translation, an error is indicated in the document status.
        /// 
        /// If a file with the same name already exists at the destination, it will be overwritten. The targetUrl for each target language must be unique.
        /// </summary>
        /// <param name="body"> request details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<DocumentTranslationSubmitBatchRequestHeaders>> SubmitBatchRequestAsync(BatchSubmissionRequest body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateSubmitBatchRequestRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DocumentTranslationSubmitBatchRequestHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Use this API to submit a bulk (batch) translation request to the Document Translation service.
        /// 
        /// Each request can contain multiple documents and must contain a source and destination container for each document.
        /// 
        /// 
        /// 
        /// The prefix and suffix filter (if supplied) are used to filter folders. The prefix is applied to the subpath after the container name.
        /// 
        /// 
        /// 
        /// Glossaries / Translation memory can be included in the request and are applied by the service when the document is translated.
        /// 
        /// 
        /// 
        /// If the glossary is invalid or unreachable during translation, an error is indicated in the document status.
        /// 
        /// If a file with the same name already exists at the destination, it will be overwritten. The targetUrl for each target language must be unique.
        /// </summary>
        /// <param name="body"> request details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<DocumentTranslationSubmitBatchRequestHeaders> SubmitBatchRequest(BatchSubmissionRequest body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateSubmitBatchRequestRequest(body);
            _pipeline.Send(message, cancellationToken);
            var headers = new DocumentTranslationSubmitBatchRequestHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOperationsRequest(int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/batches", false);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns a list of batch requests submitted and the status for each request.
        /// 
        /// This list only contains batch requests submitted by the user (based on the subscription). The status for each request is sorted by id.
        /// 
        /// 
        /// 
        /// If the number of requests exceeds our paging limit, server-side paging is used. Paginated responses indicate a partial result and include a continuation token in the response.
        /// 
        /// The absence of a continuation token means that no additional pages are available.
        /// 
        /// 
        /// 
        /// $top and $skip query parameters can be used to specify a number of results to return and an offset for the collection.
        /// 
        /// 
        /// 
        /// The server honors the values specified by the client. However, clients must be prepared to handle responses that contain a different page size or contain a continuation token.
        /// 
        /// 
        /// 
        /// When both $top and $skip are included, the server should first apply $skip and then $top on the collection.
        /// 
        /// Note: If the server can&apos;t honor $top and/or $skip, the server must return an error to the client informing about it instead of just ignoring the query options.
        /// 
        /// This reduces the risk of the client making assumptions about the data returned.
        /// </summary>
        /// <param name="top">
        /// Take the $top entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="skip">
        /// Skip the $skip entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<BatchStatusResponse, DocumentTranslationGetOperationsHeaders>> GetOperationsAsync(int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOperationsRequest(top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DocumentTranslationGetOperationsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BatchStatusResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BatchStatusResponse.DeserializeBatchStatusResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns a list of batch requests submitted and the status for each request.
        /// 
        /// This list only contains batch requests submitted by the user (based on the subscription). The status for each request is sorted by id.
        /// 
        /// 
        /// 
        /// If the number of requests exceeds our paging limit, server-side paging is used. Paginated responses indicate a partial result and include a continuation token in the response.
        /// 
        /// The absence of a continuation token means that no additional pages are available.
        /// 
        /// 
        /// 
        /// $top and $skip query parameters can be used to specify a number of results to return and an offset for the collection.
        /// 
        /// 
        /// 
        /// The server honors the values specified by the client. However, clients must be prepared to handle responses that contain a different page size or contain a continuation token.
        /// 
        /// 
        /// 
        /// When both $top and $skip are included, the server should first apply $skip and then $top on the collection.
        /// 
        /// Note: If the server can&apos;t honor $top and/or $skip, the server must return an error to the client informing about it instead of just ignoring the query options.
        /// 
        /// This reduces the risk of the client making assumptions about the data returned.
        /// </summary>
        /// <param name="top">
        /// Take the $top entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="skip">
        /// Skip the $skip entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<BatchStatusResponse, DocumentTranslationGetOperationsHeaders> GetOperations(int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOperationsRequest(top, skip);
            _pipeline.Send(message, cancellationToken);
            var headers = new DocumentTranslationGetOperationsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BatchStatusResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BatchStatusResponse.DeserializeBatchStatusResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDocumentStatusRequest(Guid id, Guid documentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/batches/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/documents/", false);
            uri.AppendPath(documentId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the translation status for a specific document based on the request Id and document Id. </summary>
        /// <param name="id"> Format - uuid.  The batch id. </param>
        /// <param name="documentId"> Format - uuid.  The document id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<DocumentStatusDetail, DocumentTranslationGetDocumentStatusHeaders>> GetDocumentStatusAsync(Guid id, Guid documentId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDocumentStatusRequest(id, documentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DocumentTranslationGetDocumentStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DocumentStatusDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DocumentStatusDetail.DeserializeDocumentStatusDetail(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the translation status for a specific document based on the request Id and document Id. </summary>
        /// <param name="id"> Format - uuid.  The batch id. </param>
        /// <param name="documentId"> Format - uuid.  The document id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<DocumentStatusDetail, DocumentTranslationGetDocumentStatusHeaders> GetDocumentStatus(Guid id, Guid documentId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDocumentStatusRequest(id, documentId);
            _pipeline.Send(message, cancellationToken);
            var headers = new DocumentTranslationGetDocumentStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DocumentStatusDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DocumentStatusDetail.DeserializeDocumentStatusDetail(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOperationStatusRequest(Guid id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/batches/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns the status for a document translation request.
        /// 
        /// The status includes the overall request status, as well as the status for documents that are being translated as part of that request.
        /// </summary>
        /// <param name="id"> Format - uuid.  The operation id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<TranslationStatusDetail, DocumentTranslationGetOperationStatusHeaders>> GetOperationStatusAsync(Guid id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOperationStatusRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DocumentTranslationGetOperationStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TranslationStatusDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TranslationStatusDetail.DeserializeTranslationStatusDetail(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns the status for a document translation request.
        /// 
        /// The status includes the overall request status, as well as the status for documents that are being translated as part of that request.
        /// </summary>
        /// <param name="id"> Format - uuid.  The operation id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<TranslationStatusDetail, DocumentTranslationGetOperationStatusHeaders> GetOperationStatus(Guid id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOperationStatusRequest(id);
            _pipeline.Send(message, cancellationToken);
            var headers = new DocumentTranslationGetOperationStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TranslationStatusDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TranslationStatusDetail.DeserializeTranslationStatusDetail(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelOperationRequest(Guid id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/batches/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Cancel a currently processing or queued operation.
        /// 
        /// Cancel a currently processing or queued operation.
        /// 
        /// An operation will not be cancelled if it is already completed or failed or cancelling. A bad request will be returned.
        /// 
        /// All documents that have completed translation will not be cancelled and will be charged.
        /// 
        /// All pending documents will be cancelled if possible.
        /// </summary>
        /// <param name="id"> Format - uuid.  The operation-id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<TranslationStatusDetail>> CancelOperationAsync(Guid id, CancellationToken cancellationToken = default)
        {
            using var message = CreateCancelOperationRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TranslationStatusDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TranslationStatusDetail.DeserializeTranslationStatusDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Cancel a currently processing or queued operation.
        /// 
        /// Cancel a currently processing or queued operation.
        /// 
        /// An operation will not be cancelled if it is already completed or failed or cancelling. A bad request will be returned.
        /// 
        /// All documents that have completed translation will not be cancelled and will be charged.
        /// 
        /// All pending documents will be cancelled if possible.
        /// </summary>
        /// <param name="id"> Format - uuid.  The operation-id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<TranslationStatusDetail> CancelOperation(Guid id, CancellationToken cancellationToken = default)
        {
            using var message = CreateCancelOperationRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TranslationStatusDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TranslationStatusDetail.DeserializeTranslationStatusDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOperationDocumentsStatusRequest(Guid id, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/batches/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/documents", false);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns the status for all documents in a batch document translation request.
        /// 
        /// 
        /// 
        /// The documents included in the response are sorted by document Id in descending order. If the number of documents in the response exceeds our paging limit, server-side paging is used.
        /// 
        /// Paginated responses indicate a partial result and include a continuation token in the response. The absence of a continuation token means that no additional pages are available.
        /// 
        /// 
        /// 
        /// $top and $skip query parameters can be used to specify a number of results to return and an offset for the collection.
        /// 
        /// The server honors the values specified by the client. However, clients must be prepared to handle responses that contain a different page size or contain a continuation token.
        /// 
        /// 
        /// 
        /// When both $top and $skip are included, the server should first apply $skip and then $top on the collection.
        /// 
        /// Note: If the server can&apos;t honor $top and/or $skip, the server must return an error to the client informing about it instead of just ignoring the query options.
        /// 
        /// This reduces the risk of the client making assumptions about the data returned.
        /// </summary>
        /// <param name="id"> Format - uuid.  The operation id. </param>
        /// <param name="top">
        /// Take the $top entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="skip">
        /// Skip the $skip entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<DocumentStatusResponse, DocumentTranslationGetOperationDocumentsStatusHeaders>> GetOperationDocumentsStatusAsync(Guid id, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOperationDocumentsStatusRequest(id, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DocumentTranslationGetOperationDocumentsStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DocumentStatusResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DocumentStatusResponse.DeserializeDocumentStatusResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns the status for all documents in a batch document translation request.
        /// 
        /// 
        /// 
        /// The documents included in the response are sorted by document Id in descending order. If the number of documents in the response exceeds our paging limit, server-side paging is used.
        /// 
        /// Paginated responses indicate a partial result and include a continuation token in the response. The absence of a continuation token means that no additional pages are available.
        /// 
        /// 
        /// 
        /// $top and $skip query parameters can be used to specify a number of results to return and an offset for the collection.
        /// 
        /// The server honors the values specified by the client. However, clients must be prepared to handle responses that contain a different page size or contain a continuation token.
        /// 
        /// 
        /// 
        /// When both $top and $skip are included, the server should first apply $skip and then $top on the collection.
        /// 
        /// Note: If the server can&apos;t honor $top and/or $skip, the server must return an error to the client informing about it instead of just ignoring the query options.
        /// 
        /// This reduces the risk of the client making assumptions about the data returned.
        /// </summary>
        /// <param name="id"> Format - uuid.  The operation id. </param>
        /// <param name="top">
        /// Take the $top entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="skip">
        /// Skip the $skip entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<DocumentStatusResponse, DocumentTranslationGetOperationDocumentsStatusHeaders> GetOperationDocumentsStatus(Guid id, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOperationDocumentsStatusRequest(id, top, skip);
            _pipeline.Send(message, cancellationToken);
            var headers = new DocumentTranslationGetOperationDocumentsStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DocumentStatusResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DocumentStatusResponse.DeserializeDocumentStatusResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDocumentFormatsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/documents/formats", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// The list of supported document formats supported by the Document Translation service.
        /// 
        /// The list includes the common file extension, as well as the content-type if using the upload API.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<FileFormatListResult>> GetDocumentFormatsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDocumentFormatsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FileFormatListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = FileFormatListResult.DeserializeFileFormatListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// The list of supported document formats supported by the Document Translation service.
        /// 
        /// The list includes the common file extension, as well as the content-type if using the upload API.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<FileFormatListResult> GetDocumentFormats(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDocumentFormatsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FileFormatListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = FileFormatListResult.DeserializeFileFormatListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGlossaryFormatsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/glossaries/formats", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// The list of supported glossary formats supported by the Document Translation service.
        /// 
        /// The list includes the common file extension used.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<FileFormatListResult>> GetGlossaryFormatsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetGlossaryFormatsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FileFormatListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = FileFormatListResult.DeserializeFileFormatListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// The list of supported glossary formats supported by the Document Translation service.
        /// 
        /// The list includes the common file extension used.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<FileFormatListResult> GetGlossaryFormats(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetGlossaryFormatsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FileFormatListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = FileFormatListResult.DeserializeFileFormatListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDocumentStorageSourceRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendPath("/storagesources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of storage sources/options supported by the Document Translation service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<StorageSourceListResult>> GetDocumentStorageSourceAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDocumentStorageSourceRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StorageSourceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StorageSourceListResult.DeserializeStorageSourceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns a list of storage sources/options supported by the Document Translation service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<StorageSourceListResult> GetDocumentStorageSource(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDocumentStorageSourceRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StorageSourceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StorageSourceListResult.DeserializeStorageSourceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOperationsNextPageRequest(string nextLink, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns a list of batch requests submitted and the status for each request.
        /// 
        /// This list only contains batch requests submitted by the user (based on the subscription). The status for each request is sorted by id.
        /// 
        /// 
        /// 
        /// If the number of requests exceeds our paging limit, server-side paging is used. Paginated responses indicate a partial result and include a continuation token in the response.
        /// 
        /// The absence of a continuation token means that no additional pages are available.
        /// 
        /// 
        /// 
        /// $top and $skip query parameters can be used to specify a number of results to return and an offset for the collection.
        /// 
        /// 
        /// 
        /// The server honors the values specified by the client. However, clients must be prepared to handle responses that contain a different page size or contain a continuation token.
        /// 
        /// 
        /// 
        /// When both $top and $skip are included, the server should first apply $skip and then $top on the collection.
        /// 
        /// Note: If the server can&apos;t honor $top and/or $skip, the server must return an error to the client informing about it instead of just ignoring the query options.
        /// 
        /// This reduces the risk of the client making assumptions about the data returned.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="top">
        /// Take the $top entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="skip">
        /// Skip the $skip entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<ResponseWithHeaders<BatchStatusResponse, DocumentTranslationGetOperationsHeaders>> GetOperationsNextPageAsync(string nextLink, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetOperationsNextPageRequest(nextLink, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DocumentTranslationGetOperationsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BatchStatusResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BatchStatusResponse.DeserializeBatchStatusResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns a list of batch requests submitted and the status for each request.
        /// 
        /// This list only contains batch requests submitted by the user (based on the subscription). The status for each request is sorted by id.
        /// 
        /// 
        /// 
        /// If the number of requests exceeds our paging limit, server-side paging is used. Paginated responses indicate a partial result and include a continuation token in the response.
        /// 
        /// The absence of a continuation token means that no additional pages are available.
        /// 
        /// 
        /// 
        /// $top and $skip query parameters can be used to specify a number of results to return and an offset for the collection.
        /// 
        /// 
        /// 
        /// The server honors the values specified by the client. However, clients must be prepared to handle responses that contain a different page size or contain a continuation token.
        /// 
        /// 
        /// 
        /// When both $top and $skip are included, the server should first apply $skip and then $top on the collection.
        /// 
        /// Note: If the server can&apos;t honor $top and/or $skip, the server must return an error to the client informing about it instead of just ignoring the query options.
        /// 
        /// This reduces the risk of the client making assumptions about the data returned.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="top">
        /// Take the $top entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="skip">
        /// Skip the $skip entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public ResponseWithHeaders<BatchStatusResponse, DocumentTranslationGetOperationsHeaders> GetOperationsNextPage(string nextLink, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetOperationsNextPageRequest(nextLink, top, skip);
            _pipeline.Send(message, cancellationToken);
            var headers = new DocumentTranslationGetOperationsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BatchStatusResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BatchStatusResponse.DeserializeBatchStatusResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOperationDocumentsStatusNextPageRequest(string nextLink, Guid id, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/translator/text/batch/v1.0-preview.1", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns the status for all documents in a batch document translation request.
        /// 
        /// 
        /// 
        /// The documents included in the response are sorted by document Id in descending order. If the number of documents in the response exceeds our paging limit, server-side paging is used.
        /// 
        /// Paginated responses indicate a partial result and include a continuation token in the response. The absence of a continuation token means that no additional pages are available.
        /// 
        /// 
        /// 
        /// $top and $skip query parameters can be used to specify a number of results to return and an offset for the collection.
        /// 
        /// The server honors the values specified by the client. However, clients must be prepared to handle responses that contain a different page size or contain a continuation token.
        /// 
        /// 
        /// 
        /// When both $top and $skip are included, the server should first apply $skip and then $top on the collection.
        /// 
        /// Note: If the server can&apos;t honor $top and/or $skip, the server must return an error to the client informing about it instead of just ignoring the query options.
        /// 
        /// This reduces the risk of the client making assumptions about the data returned.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="id"> Format - uuid.  The operation id. </param>
        /// <param name="top">
        /// Take the $top entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="skip">
        /// Skip the $skip entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<ResponseWithHeaders<DocumentStatusResponse, DocumentTranslationGetOperationDocumentsStatusHeaders>> GetOperationDocumentsStatusNextPageAsync(string nextLink, Guid id, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetOperationDocumentsStatusNextPageRequest(nextLink, id, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DocumentTranslationGetOperationDocumentsStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DocumentStatusResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DocumentStatusResponse.DeserializeDocumentStatusResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns the status for all documents in a batch document translation request.
        /// 
        /// 
        /// 
        /// The documents included in the response are sorted by document Id in descending order. If the number of documents in the response exceeds our paging limit, server-side paging is used.
        /// 
        /// Paginated responses indicate a partial result and include a continuation token in the response. The absence of a continuation token means that no additional pages are available.
        /// 
        /// 
        /// 
        /// $top and $skip query parameters can be used to specify a number of results to return and an offset for the collection.
        /// 
        /// The server honors the values specified by the client. However, clients must be prepared to handle responses that contain a different page size or contain a continuation token.
        /// 
        /// 
        /// 
        /// When both $top and $skip are included, the server should first apply $skip and then $top on the collection.
        /// 
        /// Note: If the server can&apos;t honor $top and/or $skip, the server must return an error to the client informing about it instead of just ignoring the query options.
        /// 
        /// This reduces the risk of the client making assumptions about the data returned.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="id"> Format - uuid.  The operation id. </param>
        /// <param name="top">
        /// Take the $top entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="skip">
        /// Skip the $skip entries in the collection
        /// 
        /// When both $top and $skip are supplied, $skip is applied first.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public ResponseWithHeaders<DocumentStatusResponse, DocumentTranslationGetOperationDocumentsStatusHeaders> GetOperationDocumentsStatusNextPage(string nextLink, Guid id, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetOperationDocumentsStatusNextPageRequest(nextLink, id, top, skip);
            _pipeline.Send(message, cancellationToken);
            var headers = new DocumentTranslationGetOperationDocumentsStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DocumentStatusResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DocumentStatusResponse.DeserializeDocumentStatusResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
