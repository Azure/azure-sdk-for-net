// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics.Legacy.Models
{
    /// <summary> The ExtractiveSummarizationTaskParametersSortBy. </summary>
    internal readonly partial struct ExtractiveSummarizationTaskParametersSortBy : IEquatable<ExtractiveSummarizationTaskParametersSortBy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExtractiveSummarizationTaskParametersSortBy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExtractiveSummarizationTaskParametersSortBy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OffsetValue = "Offset";
        private const string RankValue = "Rank";

        /// <summary> Offset. </summary>
        public static ExtractiveSummarizationTaskParametersSortBy Offset { get; } = new ExtractiveSummarizationTaskParametersSortBy(OffsetValue);
        /// <summary> Rank. </summary>
        public static ExtractiveSummarizationTaskParametersSortBy Rank { get; } = new ExtractiveSummarizationTaskParametersSortBy(RankValue);
        /// <summary> Determines if two <see cref="ExtractiveSummarizationTaskParametersSortBy"/> values are the same. </summary>
        public static bool operator ==(ExtractiveSummarizationTaskParametersSortBy left, ExtractiveSummarizationTaskParametersSortBy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExtractiveSummarizationTaskParametersSortBy"/> values are not the same. </summary>
        public static bool operator !=(ExtractiveSummarizationTaskParametersSortBy left, ExtractiveSummarizationTaskParametersSortBy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExtractiveSummarizationTaskParametersSortBy"/>. </summary>
        public static implicit operator ExtractiveSummarizationTaskParametersSortBy(string value) => new ExtractiveSummarizationTaskParametersSortBy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExtractiveSummarizationTaskParametersSortBy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExtractiveSummarizationTaskParametersSortBy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
