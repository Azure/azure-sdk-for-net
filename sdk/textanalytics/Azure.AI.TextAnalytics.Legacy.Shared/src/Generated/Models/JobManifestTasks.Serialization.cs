// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.TextAnalytics.Legacy
{
    internal partial class JobManifestTasks : IUtf8JsonSerializable, IJsonModel<JobManifestTasks>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<JobManifestTasks>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<JobManifestTasks>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<JobManifestTasks>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<JobManifestTasks>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(EntityRecognitionTasks))
            {
                writer.WritePropertyName("entityRecognitionTasks"u8);
                writer.WriteStartArray();
                foreach (var item in EntityRecognitionTasks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EntityRecognitionPiiTasks))
            {
                writer.WritePropertyName("entityRecognitionPiiTasks"u8);
                writer.WriteStartArray();
                foreach (var item in EntityRecognitionPiiTasks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(KeyPhraseExtractionTasks))
            {
                writer.WritePropertyName("keyPhraseExtractionTasks"u8);
                writer.WriteStartArray();
                foreach (var item in KeyPhraseExtractionTasks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EntityLinkingTasks))
            {
                writer.WritePropertyName("entityLinkingTasks"u8);
                writer.WriteStartArray();
                foreach (var item in EntityLinkingTasks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SentimentAnalysisTasks))
            {
                writer.WritePropertyName("sentimentAnalysisTasks"u8);
                writer.WriteStartArray();
                foreach (var item in SentimentAnalysisTasks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        JobManifestTasks IJsonModel<JobManifestTasks>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(JobManifestTasks)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeJobManifestTasks(document.RootElement, options);
        }

        internal static JobManifestTasks DeserializeJobManifestTasks(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<EntitiesTask>> entityRecognitionTasks = default;
            Optional<IList<PiiTask>> entityRecognitionPiiTasks = default;
            Optional<IList<KeyPhrasesTask>> keyPhraseExtractionTasks = default;
            Optional<IList<EntityLinkingTask>> entityLinkingTasks = default;
            Optional<IList<SentimentAnalysisTask>> sentimentAnalysisTasks = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("entityRecognitionTasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EntitiesTask> array = new List<EntitiesTask>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EntitiesTask.DeserializeEntitiesTask(item));
                    }
                    entityRecognitionTasks = array;
                    continue;
                }
                if (property.NameEquals("entityRecognitionPiiTasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PiiTask> array = new List<PiiTask>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PiiTask.DeserializePiiTask(item));
                    }
                    entityRecognitionPiiTasks = array;
                    continue;
                }
                if (property.NameEquals("keyPhraseExtractionTasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<KeyPhrasesTask> array = new List<KeyPhrasesTask>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(KeyPhrasesTask.DeserializeKeyPhrasesTask(item));
                    }
                    keyPhraseExtractionTasks = array;
                    continue;
                }
                if (property.NameEquals("entityLinkingTasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EntityLinkingTask> array = new List<EntityLinkingTask>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EntityLinkingTask.DeserializeEntityLinkingTask(item));
                    }
                    entityLinkingTasks = array;
                    continue;
                }
                if (property.NameEquals("sentimentAnalysisTasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SentimentAnalysisTask> array = new List<SentimentAnalysisTask>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SentimentAnalysisTask.DeserializeSentimentAnalysisTask(item));
                    }
                    sentimentAnalysisTasks = array;
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new JobManifestTasks(Optional.ToList(entityRecognitionTasks), Optional.ToList(entityRecognitionPiiTasks), Optional.ToList(keyPhraseExtractionTasks), Optional.ToList(entityLinkingTasks), Optional.ToList(sentimentAnalysisTasks), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<JobManifestTasks>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(JobManifestTasks)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        JobManifestTasks IPersistableModel<JobManifestTasks>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(JobManifestTasks)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeJobManifestTasks(document.RootElement, options);
        }

        string IPersistableModel<JobManifestTasks>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
