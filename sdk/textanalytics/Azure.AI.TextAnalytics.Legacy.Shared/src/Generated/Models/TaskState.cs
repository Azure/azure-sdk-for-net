// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.AI.TextAnalytics.Legacy.Models;

namespace Azure.AI.TextAnalytics.Legacy
{
    /// <summary> The TaskState. </summary>
    internal partial class TaskState
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        protected internal IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TaskState"/>. </summary>
        /// <param name="lastUpdateDateTime"></param>
        /// <param name="status"></param>
        internal TaskState(DateTimeOffset lastUpdateDateTime, State status)
        {
            LastUpdateDateTime = lastUpdateDateTime;
            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="TaskState"/>. </summary>
        /// <param name="lastUpdateDateTime"></param>
        /// <param name="taskName"></param>
        /// <param name="status"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TaskState(DateTimeOffset lastUpdateDateTime, string taskName, State status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LastUpdateDateTime = lastUpdateDateTime;
            TaskName = taskName;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TaskState"/> for deserialization. </summary>
        internal TaskState()
        {
        }

        /// <summary> Gets the last update date time. </summary>
        public DateTimeOffset LastUpdateDateTime { get; }
        /// <summary> Gets the task name. </summary>
        public string TaskName { get; }
        /// <summary> Gets the status. </summary>
        public State Status { get; }
    }
}
