// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.AI.TextAnalytics;
using Azure.Core;

namespace Azure.AI.TextAnalytics.Models
{
    /// <summary> The ExtractedSummaryDocumentResult. </summary>
    internal partial class ExtractedSummaryDocumentResult : DocumentResult
    {
        /// <summary> Initializes a new instance of <see cref="ExtractedSummaryDocumentResult"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="sentences"> A ranked list of sentences representing the extracted summary. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="warnings"/> or <paramref name="sentences"/> is null. </exception>
        public ExtractedSummaryDocumentResult(string id, IEnumerable<DocumentWarning> warnings, IEnumerable<ExtractedSummarySentence> sentences) : base(id, warnings)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(warnings, nameof(warnings));
            Argument.AssertNotNull(sentences, nameof(sentences));

            Sentences = sentences.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ExtractedSummaryDocumentResult"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="sentences"> A ranked list of sentences representing the extracted summary. </param>
        internal ExtractedSummaryDocumentResult(string id, IList<DocumentWarning> warnings, TextDocumentStatistics? statistics, IList<ExtractedSummarySentence> sentences) : base(id, warnings, statistics)
        {
            Sentences = sentences;
        }

        /// <summary> A ranked list of sentences representing the extracted summary. </summary>
        public IList<ExtractedSummarySentence> Sentences { get; }
    }
}
