// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics.Models
{
    /// <summary> Aspect level sentiment for the aspect in the sentence. </summary>
    internal readonly partial struct SentenceAspectSentiment : IEquatable<SentenceAspectSentiment>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="SentenceAspectSentiment"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SentenceAspectSentiment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositiveValue = "positive";
        private const string MixedValue = "mixed";
        private const string NegativeValue = "negative";

        /// <summary> positive. </summary>
        public static SentenceAspectSentiment Positive { get; } = new SentenceAspectSentiment(PositiveValue);
        /// <summary> mixed. </summary>
        public static SentenceAspectSentiment Mixed { get; } = new SentenceAspectSentiment(MixedValue);
        /// <summary> negative. </summary>
        public static SentenceAspectSentiment Negative { get; } = new SentenceAspectSentiment(NegativeValue);
        /// <summary> Determines if two <see cref="SentenceAspectSentiment"/> values are the same. </summary>
        public static bool operator ==(SentenceAspectSentiment left, SentenceAspectSentiment right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SentenceAspectSentiment"/> values are not the same. </summary>
        public static bool operator !=(SentenceAspectSentiment left, SentenceAspectSentiment right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SentenceAspectSentiment"/>. </summary>
        public static implicit operator SentenceAspectSentiment(string value) => new SentenceAspectSentiment(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SentenceAspectSentiment other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SentenceAspectSentiment other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
