// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.AI.TextAnalytics.Models
{
    /// <summary> The SentenceOpinion. </summary>
    internal partial class SentenceOpinion
    {
        /// <summary> Initializes a new instance of SentenceOpinion. </summary>
        /// <param name="sentiment"> Opinion level sentiment for the aspect in the sentence. </param>
        /// <param name="confidenceScores"> Opinion level sentiment confidence scores for the aspect in the sentence. </param>
        /// <param name="offset"> The opinion offset from the start of the sentence. </param>
        /// <param name="length"> The length of the opinion. </param>
        /// <param name="text"> The aspect text detected. </param>
        /// <param name="isNegated"> The indicator representing if the opinion is negated. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentiment"/>, <paramref name="confidenceScores"/>, or <paramref name="text"/> is null. </exception>
        internal SentenceOpinion(string sentiment, AspectConfidenceScoreLabel confidenceScores, int offset, int length, string text, bool isNegated)
        {
            if (sentiment == null)
            {
                throw new ArgumentNullException(nameof(sentiment));
            }
            if (confidenceScores == null)
            {
                throw new ArgumentNullException(nameof(confidenceScores));
            }
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            Sentiment = sentiment;
            ConfidenceScores = confidenceScores;
            Offset = offset;
            Length = length;
            Text = text;
            IsNegated = isNegated;
        }
        /// <summary> Opinion level sentiment confidence scores for the aspect in the sentence. </summary>
        public AspectConfidenceScoreLabel ConfidenceScores { get; }
        /// <summary> The opinion offset from the start of the sentence. </summary>
        public int Offset { get; }
        /// <summary> The length of the opinion. </summary>
        public int Length { get; }
        /// <summary> The aspect text detected. </summary>
        public string Text { get; }
        /// <summary> The indicator representing if the opinion is negated. </summary>
        public bool IsNegated { get; }
    }
}
