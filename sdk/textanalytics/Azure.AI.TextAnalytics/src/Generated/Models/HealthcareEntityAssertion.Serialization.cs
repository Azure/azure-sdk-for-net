// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.AI.TextAnalytics
{
    public partial class HealthcareEntityAssertion : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IUtf8JsonSerializable)this).Write(writer, new SerializableOptions());

        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer, SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Conditionality))
            {
                writer.WritePropertyName("conditionality"u8);
                writer.WriteStringValue(Conditionality.Value.ToSerialString());
            }
            if (Optional.IsDefined(Certainty))
            {
                writer.WritePropertyName("certainty"u8);
                writer.WriteStringValue(Certainty.Value.ToSerialString());
            }
            if (Optional.IsDefined(Association))
            {
                writer.WritePropertyName("association"u8);
                writer.WriteStringValue(Association.Value.ToSerialString());
            }
            writer.WriteEndObject();
        }

        internal static HealthcareEntityAssertion DeserializeHealthcareEntityAssertion(JsonElement element, SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<EntityConditionality> conditionality = default;
            Optional<EntityCertainty> certainty = default;
            Optional<EntityAssociation> association = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("conditionality"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    conditionality = property.Value.GetString().ToEntityConditionality();
                    continue;
                }
                if (property.NameEquals("certainty"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certainty = property.Value.GetString().ToEntityCertainty();
                    continue;
                }
                if (property.NameEquals("association"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    association = property.Value.GetString().ToEntityAssociation();
                    continue;
                }
            }
            return new HealthcareEntityAssertion(Optional.ToNullable(conditionality), Optional.ToNullable(certainty), Optional.ToNullable(association));
        }
    }
}
