// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.AI.TextAnalytics.Models;
using Azure.Core;

namespace Azure.AI.TextAnalytics
{
    public partial class NumericRangeResolution : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("rangeKind"u8);
            writer.WriteStringValue(RangeKind.ToString());
            writer.WritePropertyName("minimum"u8);
            writer.WriteNumberValue(Minimum);
            writer.WritePropertyName("maximum"u8);
            writer.WriteNumberValue(Maximum);
            writer.WritePropertyName("resolutionKind"u8);
            writer.WriteStringValue(ResolutionKind.ToString());
            writer.WriteEndObject();
        }

        internal static NumericRangeResolution DeserializeNumericRangeResolution(JsonElement element)
        {
            RangeKind rangeKind = default;
            double minimum = default;
            double maximum = default;
            ResolutionKind resolutionKind = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rangeKind"u8))
                {
                    rangeKind = new RangeKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("minimum"u8))
                {
                    minimum = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("maximum"u8))
                {
                    maximum = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("resolutionKind"u8))
                {
                    resolutionKind = new ResolutionKind(property.Value.GetString());
                    continue;
                }
            }
            return new NumericRangeResolution(resolutionKind, rangeKind, minimum, maximum);
        }
    }
}
