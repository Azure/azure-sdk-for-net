// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics
{
    /// <summary> Document type that can be provided as input for Fhir Documents. Expect to have fhirVersion provided when used. Behavior of using None enum is the same as not using the documentType parameter. </summary>
    public readonly partial struct HealthcareDocumentType : IEquatable<HealthcareDocumentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthcareDocumentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthcareDocumentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ClinicalTrialValue = "ClinicalTrial";
        private const string DischargeSummaryValue = "DischargeSummary";
        private const string ProgressNoteValue = "ProgressNote";
        private const string HistoryAndPhysicalValue = "HistoryAndPhysical";
        private const string ConsultValue = "Consult";
        private const string ImagingValue = "Imaging";
        private const string PathologyValue = "Pathology";
        private const string ProcedureNoteValue = "ProcedureNote";

        /// <summary> None. </summary>
        public static HealthcareDocumentType None { get; } = new HealthcareDocumentType(NoneValue);
        /// <summary> ClinicalTrial. </summary>
        public static HealthcareDocumentType ClinicalTrial { get; } = new HealthcareDocumentType(ClinicalTrialValue);
        /// <summary> DischargeSummary. </summary>
        public static HealthcareDocumentType DischargeSummary { get; } = new HealthcareDocumentType(DischargeSummaryValue);
        /// <summary> ProgressNote. </summary>
        public static HealthcareDocumentType ProgressNote { get; } = new HealthcareDocumentType(ProgressNoteValue);
        /// <summary> HistoryAndPhysical. </summary>
        public static HealthcareDocumentType HistoryAndPhysical { get; } = new HealthcareDocumentType(HistoryAndPhysicalValue);
        /// <summary> Consult. </summary>
        public static HealthcareDocumentType Consult { get; } = new HealthcareDocumentType(ConsultValue);
        /// <summary> Imaging. </summary>
        public static HealthcareDocumentType Imaging { get; } = new HealthcareDocumentType(ImagingValue);
        /// <summary> Pathology. </summary>
        public static HealthcareDocumentType Pathology { get; } = new HealthcareDocumentType(PathologyValue);
        /// <summary> ProcedureNote. </summary>
        public static HealthcareDocumentType ProcedureNote { get; } = new HealthcareDocumentType(ProcedureNoteValue);
        /// <summary> Determines if two <see cref="HealthcareDocumentType"/> values are the same. </summary>
        public static bool operator ==(HealthcareDocumentType left, HealthcareDocumentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthcareDocumentType"/> values are not the same. </summary>
        public static bool operator !=(HealthcareDocumentType left, HealthcareDocumentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthcareDocumentType"/>. </summary>
        public static implicit operator HealthcareDocumentType(string value) => new HealthcareDocumentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthcareDocumentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthcareDocumentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
