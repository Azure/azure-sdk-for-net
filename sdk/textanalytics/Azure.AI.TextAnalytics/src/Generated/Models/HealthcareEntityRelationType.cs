// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics
{
    /// <summary> Type of relation. Examples include: `DosageOfMedication` or &apos;FrequencyOfMedication&apos;, etc. </summary>
    public readonly partial struct HealthcareEntityRelationType : IEquatable<HealthcareEntityRelationType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="HealthcareEntityRelationType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthcareEntityRelationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AbbreviationValue = "Abbreviation";
        private const string DirectionOfBodyStructureValue = "DirectionOfBodyStructure";
        private const string DirectionOfConditionValue = "DirectionOfCondition";
        private const string DirectionOfExaminationValue = "DirectionOfExamination";
        private const string DirectionOfTreatmentValue = "DirectionOfTreatment";
        private const string DosageOfMedicationValue = "DosageOfMedication";
        private const string FormOfMedicationValue = "FormOfMedication";
        private const string FrequencyOfMedicationValue = "FrequencyOfMedication";
        private const string FrequencyOfTreatmentValue = "FrequencyOfTreatment";
        private const string QualifierOfConditionValue = "QualifierOfCondition";
        private const string RelationOfExaminationValue = "RelationOfExamination";
        private const string RouteOfMedicationValue = "RouteOfMedication";
        private const string TimeOfConditionValue = "TimeOfCondition";
        private const string TimeOfEventValue = "TimeOfEvent";
        private const string TimeOfExaminationValue = "TimeOfExamination";
        private const string TimeOfMedicationValue = "TimeOfMedication";
        private const string TimeOfTreatmentValue = "TimeOfTreatment";
        private const string UnitOfConditionValue = "UnitOfCondition";
        private const string UnitOfExaminationValue = "UnitOfExamination";
        private const string ValueOfConditionValue = "ValueOfCondition";
        private const string ValueOfExaminationValue = "ValueOfExamination";

        /// <summary> Abbreviation. </summary>
        public static HealthcareEntityRelationType Abbreviation { get; } = new HealthcareEntityRelationType(AbbreviationValue);
        /// <summary> DirectionOfBodyStructure. </summary>
        public static HealthcareEntityRelationType DirectionOfBodyStructure { get; } = new HealthcareEntityRelationType(DirectionOfBodyStructureValue);
        /// <summary> DirectionOfCondition. </summary>
        public static HealthcareEntityRelationType DirectionOfCondition { get; } = new HealthcareEntityRelationType(DirectionOfConditionValue);
        /// <summary> DirectionOfExamination. </summary>
        public static HealthcareEntityRelationType DirectionOfExamination { get; } = new HealthcareEntityRelationType(DirectionOfExaminationValue);
        /// <summary> DirectionOfTreatment. </summary>
        public static HealthcareEntityRelationType DirectionOfTreatment { get; } = new HealthcareEntityRelationType(DirectionOfTreatmentValue);
        /// <summary> DosageOfMedication. </summary>
        public static HealthcareEntityRelationType DosageOfMedication { get; } = new HealthcareEntityRelationType(DosageOfMedicationValue);
        /// <summary> FormOfMedication. </summary>
        public static HealthcareEntityRelationType FormOfMedication { get; } = new HealthcareEntityRelationType(FormOfMedicationValue);
        /// <summary> FrequencyOfMedication. </summary>
        public static HealthcareEntityRelationType FrequencyOfMedication { get; } = new HealthcareEntityRelationType(FrequencyOfMedicationValue);
        /// <summary> FrequencyOfTreatment. </summary>
        public static HealthcareEntityRelationType FrequencyOfTreatment { get; } = new HealthcareEntityRelationType(FrequencyOfTreatmentValue);
        /// <summary> QualifierOfCondition. </summary>
        public static HealthcareEntityRelationType QualifierOfCondition { get; } = new HealthcareEntityRelationType(QualifierOfConditionValue);
        /// <summary> RelationOfExamination. </summary>
        public static HealthcareEntityRelationType RelationOfExamination { get; } = new HealthcareEntityRelationType(RelationOfExaminationValue);
        /// <summary> RouteOfMedication. </summary>
        public static HealthcareEntityRelationType RouteOfMedication { get; } = new HealthcareEntityRelationType(RouteOfMedicationValue);
        /// <summary> TimeOfCondition. </summary>
        public static HealthcareEntityRelationType TimeOfCondition { get; } = new HealthcareEntityRelationType(TimeOfConditionValue);
        /// <summary> TimeOfEvent. </summary>
        public static HealthcareEntityRelationType TimeOfEvent { get; } = new HealthcareEntityRelationType(TimeOfEventValue);
        /// <summary> TimeOfExamination. </summary>
        public static HealthcareEntityRelationType TimeOfExamination { get; } = new HealthcareEntityRelationType(TimeOfExaminationValue);
        /// <summary> TimeOfMedication. </summary>
        public static HealthcareEntityRelationType TimeOfMedication { get; } = new HealthcareEntityRelationType(TimeOfMedicationValue);
        /// <summary> TimeOfTreatment. </summary>
        public static HealthcareEntityRelationType TimeOfTreatment { get; } = new HealthcareEntityRelationType(TimeOfTreatmentValue);
        /// <summary> UnitOfCondition. </summary>
        public static HealthcareEntityRelationType UnitOfCondition { get; } = new HealthcareEntityRelationType(UnitOfConditionValue);
        /// <summary> UnitOfExamination. </summary>
        public static HealthcareEntityRelationType UnitOfExamination { get; } = new HealthcareEntityRelationType(UnitOfExaminationValue);
        /// <summary> ValueOfCondition. </summary>
        public static HealthcareEntityRelationType ValueOfCondition { get; } = new HealthcareEntityRelationType(ValueOfConditionValue);
        /// <summary> ValueOfExamination. </summary>
        public static HealthcareEntityRelationType ValueOfExamination { get; } = new HealthcareEntityRelationType(ValueOfExaminationValue);
        /// <summary> Determines if two <see cref="HealthcareEntityRelationType"/> values are the same. </summary>
        public static bool operator ==(HealthcareEntityRelationType left, HealthcareEntityRelationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthcareEntityRelationType"/> values are not the same. </summary>
        public static bool operator !=(HealthcareEntityRelationType left, HealthcareEntityRelationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthcareEntityRelationType"/>. </summary>
        public static implicit operator HealthcareEntityRelationType(string value) => new HealthcareEntityRelationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthcareEntityRelationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthcareEntityRelationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
