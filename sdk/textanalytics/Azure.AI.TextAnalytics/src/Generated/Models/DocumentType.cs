// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics.Models
{
    /// <summary> Document type that can be provided as input for Fhir Documents. Expect to have fhirVersion provided when used. Behavior of using None enum is the same as not using the documentType parameter. </summary>
    internal readonly partial struct DocumentType : IEquatable<DocumentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ClinicalTrialValue = "ClinicalTrial";
        private const string DischargeSummaryValue = "DischargeSummary";
        private const string ProgressNoteValue = "ProgressNote";
        private const string HistoryAndPhysicalValue = "HistoryAndPhysical";
        private const string ConsultValue = "Consult";
        private const string ImagingValue = "Imaging";
        private const string PathologyValue = "Pathology";
        private const string ProcedureNoteValue = "ProcedureNote";

        /// <summary> None. </summary>
        public static DocumentType None { get; } = new DocumentType(NoneValue);
        /// <summary> ClinicalTrial. </summary>
        public static DocumentType ClinicalTrial { get; } = new DocumentType(ClinicalTrialValue);
        /// <summary> DischargeSummary. </summary>
        public static DocumentType DischargeSummary { get; } = new DocumentType(DischargeSummaryValue);
        /// <summary> ProgressNote. </summary>
        public static DocumentType ProgressNote { get; } = new DocumentType(ProgressNoteValue);
        /// <summary> HistoryAndPhysical. </summary>
        public static DocumentType HistoryAndPhysical { get; } = new DocumentType(HistoryAndPhysicalValue);
        /// <summary> Consult. </summary>
        public static DocumentType Consult { get; } = new DocumentType(ConsultValue);
        /// <summary> Imaging. </summary>
        public static DocumentType Imaging { get; } = new DocumentType(ImagingValue);
        /// <summary> Pathology. </summary>
        public static DocumentType Pathology { get; } = new DocumentType(PathologyValue);
        /// <summary> ProcedureNote. </summary>
        public static DocumentType ProcedureNote { get; } = new DocumentType(ProcedureNoteValue);
        /// <summary> Determines if two <see cref="DocumentType"/> values are the same. </summary>
        public static bool operator ==(DocumentType left, DocumentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentType"/> values are not the same. </summary>
        public static bool operator !=(DocumentType left, DocumentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DocumentType"/>. </summary>
        public static implicit operator DocumentType(string value) => new DocumentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
