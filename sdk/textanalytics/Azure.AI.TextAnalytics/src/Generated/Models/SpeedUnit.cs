// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics
{
    /// <summary> The speed Unit of measurement. </summary>
    public readonly partial struct SpeedUnit : IEquatable<SpeedUnit>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SpeedUnit"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SpeedUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnspecifiedValue = "Unspecified";
        private const string MeterPerSecondValue = "MeterPerSecond";
        private const string KilometerPerHourValue = "KilometerPerHour";
        private const string KilometerPerMinuteValue = "KilometerPerMinute";
        private const string KilometerPerSecondValue = "KilometerPerSecond";
        private const string MilePerHourValue = "MilePerHour";
        private const string KnotValue = "Knot";
        private const string FootPerSecondValue = "FootPerSecond";
        private const string FootPerMinuteValue = "FootPerMinute";
        private const string YardPerMinuteValue = "YardPerMinute";
        private const string YardPerSecondValue = "YardPerSecond";
        private const string MeterPerMillisecondValue = "MeterPerMillisecond";
        private const string CentimeterPerMillisecondValue = "CentimeterPerMillisecond";
        private const string KilometerPerMillisecondValue = "KilometerPerMillisecond";

        /// <summary> Unspecified. </summary>
        public static SpeedUnit Unspecified { get; } = new SpeedUnit(UnspecifiedValue);
        /// <summary> MeterPerSecond. </summary>
        public static SpeedUnit MeterPerSecond { get; } = new SpeedUnit(MeterPerSecondValue);
        /// <summary> KilometerPerHour. </summary>
        public static SpeedUnit KilometerPerHour { get; } = new SpeedUnit(KilometerPerHourValue);
        /// <summary> KilometerPerMinute. </summary>
        public static SpeedUnit KilometerPerMinute { get; } = new SpeedUnit(KilometerPerMinuteValue);
        /// <summary> KilometerPerSecond. </summary>
        public static SpeedUnit KilometerPerSecond { get; } = new SpeedUnit(KilometerPerSecondValue);
        /// <summary> MilePerHour. </summary>
        public static SpeedUnit MilePerHour { get; } = new SpeedUnit(MilePerHourValue);
        /// <summary> Knot. </summary>
        public static SpeedUnit Knot { get; } = new SpeedUnit(KnotValue);
        /// <summary> FootPerSecond. </summary>
        public static SpeedUnit FootPerSecond { get; } = new SpeedUnit(FootPerSecondValue);
        /// <summary> FootPerMinute. </summary>
        public static SpeedUnit FootPerMinute { get; } = new SpeedUnit(FootPerMinuteValue);
        /// <summary> YardPerMinute. </summary>
        public static SpeedUnit YardPerMinute { get; } = new SpeedUnit(YardPerMinuteValue);
        /// <summary> YardPerSecond. </summary>
        public static SpeedUnit YardPerSecond { get; } = new SpeedUnit(YardPerSecondValue);
        /// <summary> MeterPerMillisecond. </summary>
        public static SpeedUnit MeterPerMillisecond { get; } = new SpeedUnit(MeterPerMillisecondValue);
        /// <summary> CentimeterPerMillisecond. </summary>
        public static SpeedUnit CentimeterPerMillisecond { get; } = new SpeedUnit(CentimeterPerMillisecondValue);
        /// <summary> KilometerPerMillisecond. </summary>
        public static SpeedUnit KilometerPerMillisecond { get; } = new SpeedUnit(KilometerPerMillisecondValue);
        /// <summary> Determines if two <see cref="SpeedUnit"/> values are the same. </summary>
        public static bool operator ==(SpeedUnit left, SpeedUnit right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SpeedUnit"/> values are not the same. </summary>
        public static bool operator !=(SpeedUnit left, SpeedUnit right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SpeedUnit"/>. </summary>
        public static implicit operator SpeedUnit(string value) => new SpeedUnit(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SpeedUnit other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SpeedUnit other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
