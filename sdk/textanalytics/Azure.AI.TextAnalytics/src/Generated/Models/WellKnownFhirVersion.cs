// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics
{
    /// <summary> The FHIR Spec version that the result will use to format the fhirBundle. For additional information see https://www.hl7.org/fhir/overview.html. </summary>
    public readonly partial struct WellKnownFhirVersion : IEquatable<WellKnownFhirVersion>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WellKnownFhirVersion"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WellKnownFhirVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }
        /// <summary> Determines if two <see cref="WellKnownFhirVersion"/> values are the same. </summary>
        public static bool operator ==(WellKnownFhirVersion left, WellKnownFhirVersion right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WellKnownFhirVersion"/> values are not the same. </summary>
        public static bool operator !=(WellKnownFhirVersion left, WellKnownFhirVersion right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WellKnownFhirVersion"/>. </summary>
        public static implicit operator WellKnownFhirVersion(string value) => new WellKnownFhirVersion(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WellKnownFhirVersion other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WellKnownFhirVersion other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
