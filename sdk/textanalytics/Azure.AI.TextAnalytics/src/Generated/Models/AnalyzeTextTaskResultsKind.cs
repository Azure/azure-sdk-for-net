// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics.Models
{
    /// <summary> Enumeration of supported Text Analysis task results. </summary>
    internal readonly partial struct AnalyzeTextTaskResultsKind : IEquatable<AnalyzeTextTaskResultsKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalyzeTextTaskResultsKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalyzeTextTaskResultsKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SentimentAnalysisResultsValue = "SentimentAnalysisResults";
        private const string EntityRecognitionResultsValue = "EntityRecognitionResults";
        private const string PiiEntityRecognitionResultsValue = "PiiEntityRecognitionResults";
        private const string KeyPhraseExtractionResultsValue = "KeyPhraseExtractionResults";
        private const string LanguageDetectionResultsValue = "LanguageDetectionResults";
        private const string EntityLinkingResultsValue = "EntityLinkingResults";

        /// <summary> SentimentAnalysisResults. </summary>
        public static AnalyzeTextTaskResultsKind SentimentAnalysisResults { get; } = new AnalyzeTextTaskResultsKind(SentimentAnalysisResultsValue);
        /// <summary> EntityRecognitionResults. </summary>
        public static AnalyzeTextTaskResultsKind EntityRecognitionResults { get; } = new AnalyzeTextTaskResultsKind(EntityRecognitionResultsValue);
        /// <summary> PiiEntityRecognitionResults. </summary>
        public static AnalyzeTextTaskResultsKind PiiEntityRecognitionResults { get; } = new AnalyzeTextTaskResultsKind(PiiEntityRecognitionResultsValue);
        /// <summary> KeyPhraseExtractionResults. </summary>
        public static AnalyzeTextTaskResultsKind KeyPhraseExtractionResults { get; } = new AnalyzeTextTaskResultsKind(KeyPhraseExtractionResultsValue);
        /// <summary> LanguageDetectionResults. </summary>
        public static AnalyzeTextTaskResultsKind LanguageDetectionResults { get; } = new AnalyzeTextTaskResultsKind(LanguageDetectionResultsValue);
        /// <summary> EntityLinkingResults. </summary>
        public static AnalyzeTextTaskResultsKind EntityLinkingResults { get; } = new AnalyzeTextTaskResultsKind(EntityLinkingResultsValue);
        /// <summary> Determines if two <see cref="AnalyzeTextTaskResultsKind"/> values are the same. </summary>
        public static bool operator ==(AnalyzeTextTaskResultsKind left, AnalyzeTextTaskResultsKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalyzeTextTaskResultsKind"/> values are not the same. </summary>
        public static bool operator !=(AnalyzeTextTaskResultsKind left, AnalyzeTextTaskResultsKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AnalyzeTextTaskResultsKind"/>. </summary>
        public static implicit operator AnalyzeTextTaskResultsKind(string value) => new AnalyzeTextTaskResultsKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalyzeTextTaskResultsKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalyzeTextTaskResultsKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
