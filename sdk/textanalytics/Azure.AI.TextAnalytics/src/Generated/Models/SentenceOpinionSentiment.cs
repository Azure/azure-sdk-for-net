// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.TextAnalytics.Models
{
    /// <summary> Opinion level sentiment for the aspect in the sentence. </summary>
    internal readonly partial struct SentenceOpinionSentiment : IEquatable<SentenceOpinionSentiment>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="SentenceOpinionSentiment"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SentenceOpinionSentiment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositiveValue = "positive";
        private const string MixedValue = "mixed";
        private const string NegativeValue = "negative";

        /// <summary> positive. </summary>
        public static SentenceOpinionSentiment Positive { get; } = new SentenceOpinionSentiment(PositiveValue);
        /// <summary> mixed. </summary>
        public static SentenceOpinionSentiment Mixed { get; } = new SentenceOpinionSentiment(MixedValue);
        /// <summary> negative. </summary>
        public static SentenceOpinionSentiment Negative { get; } = new SentenceOpinionSentiment(NegativeValue);
        /// <summary> Determines if two <see cref="SentenceOpinionSentiment"/> values are the same. </summary>
        public static bool operator ==(SentenceOpinionSentiment left, SentenceOpinionSentiment right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SentenceOpinionSentiment"/> values are not the same. </summary>
        public static bool operator !=(SentenceOpinionSentiment left, SentenceOpinionSentiment right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SentenceOpinionSentiment"/>. </summary>
        public static implicit operator SentenceOpinionSentiment(string value) => new SentenceOpinionSentiment(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SentenceOpinionSentiment other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SentenceOpinionSentiment other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
