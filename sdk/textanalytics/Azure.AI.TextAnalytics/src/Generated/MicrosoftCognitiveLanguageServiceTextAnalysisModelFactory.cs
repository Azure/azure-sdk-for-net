// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.AI.TextAnalytics;

namespace Azure.AI.TextAnalytics.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class MicrosoftCognitiveLanguageServiceTextAnalysisModelFactory
    {
        /// <summary> Initializes a new instance of TextDocumentBatchStatistics. </summary>
        /// <param name="documentCount"> Number of documents submitted in the request. </param>
        /// <param name="validDocumentCount"> Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="invalidDocumentCount"> Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="transactionCount"> Number of transactions for the request. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="TextAnalytics.TextDocumentBatchStatistics"/> instance for mocking. </returns>
        public static TextDocumentBatchStatistics TextDocumentBatchStatistics(int documentCount = default, int validDocumentCount = default, int invalidDocumentCount = default, long transactionCount = default, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TextDocumentBatchStatistics(documentCount, validDocumentCount, invalidDocumentCount, transactionCount, additionalProperties);
        }

        /// <summary> Initializes a new instance of HealthcareEntityAssertion. </summary>
        /// <param name="conditionality"> Describes any conditionality on the entity. </param>
        /// <param name="certainty"> Describes the entities certainty and polarity. </param>
        /// <param name="association"> Describes if the entity is the subject of the text or if it describes someone else. </param>
        /// <returns> A new <see cref="TextAnalytics.HealthcareEntityAssertion"/> instance for mocking. </returns>
        public static HealthcareEntityAssertion HealthcareEntityAssertion(EntityConditionality? conditionality = null, EntityCertainty? certainty = null, EntityAssociation? association = null)
        {
            return new HealthcareEntityAssertion(conditionality, certainty, association);
        }
    }
}
