// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.Language.Models
{
    /// <summary> POST body schema to query the knowledgebase. </summary>
    internal partial class Query
    {
        /// <summary> Initializes a new instance of Query. </summary>
        public Query()
        {
            StrictFilters = new ChangeTrackingList<Metadata>();
        }

        /// <summary> Exact qnaId to fetch from the knowledgebase, this field takes priority over question. </summary>
        public string QnaId { get; set; }
        /// <summary> User question to query against the knowledge base. </summary>
        public string Question { get; set; }
        /// <summary> Max number of answers to be returned for the question. </summary>
        public int? Top { get; set; }
        /// <summary> Unique identifier for the user. </summary>
        public string UserId { get; set; }
        /// <summary> Query against the test index. </summary>
        public bool? IsTest { get; set; }
        /// <summary> Minimum threshold score for answers. </summary>
        public float? ScoreThreshold { get; set; }
        /// <summary> Context object with previous QnA&apos;s information. </summary>
        public QContext Context { get; set; }
        /// <summary> Optional field. Set to &apos;QuestionOnly&apos; for using a question only Ranker. </summary>
        public string RankerType { get; set; }
        /// <summary> Find QnAs that are associated with the given list of metadata. </summary>
        public IList<Metadata> StrictFilters { get; }
        /// <summary> Optional field. Set to &apos;OR&apos; for using OR operation for strict filters. </summary>
        public StrictFiltersCompoundOperationType? StrictFiltersCompoundOperationType { get; set; }
        /// <summary> To configure Answer span prediction feature. </summary>
        public AnswerSpanRequest AnswerSpanRequest { get; set; }
    }
}
