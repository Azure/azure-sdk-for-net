// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Text.Models
{
    /// <summary> QnA - Either QnaId or QnA needs to be present in a Prompt object. </summary>
    public partial class PromptQna : QnA
    {
        /// <summary> Initializes a new instance of PromptQna. </summary>
        /// <param name="answer"> Answer text. </param>
        /// <param name="questions"> List of questions associated with the answer. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="answer"/> or <paramref name="questions"/> is null. </exception>
        internal PromptQna(string answer, IEnumerable<string> questions) : base(answer, questions)
        {
            if (answer == null)
            {
                throw new ArgumentNullException(nameof(answer));
            }
            if (questions == null)
            {
                throw new ArgumentNullException(nameof(questions));
            }
        }

        /// <summary> Initializes a new instance of PromptQna. </summary>
        /// <param name="id"> Unique id for the Q-A. </param>
        /// <param name="answer"> Answer text. </param>
        /// <param name="source"> Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs. </param>
        /// <param name="questions"> List of questions associated with the answer. </param>
        /// <param name="metadata"> List of metadata associated with the answer. </param>
        /// <param name="context"> Context of a QnA. </param>
        /// <param name="lastUpdatedTimestamp"> Timestamp when the QnA was last updated. </param>
        internal PromptQna(int? id, string answer, string source, IReadOnlyList<string> questions, IReadOnlyList<Metadata> metadata, Context context, string lastUpdatedTimestamp) : base(id, answer, source, questions, metadata, context, lastUpdatedTimestamp)
        {
        }
    }
}
