// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataMigration
{
    /// <summary>
    /// A class representing a collection of <see cref="DatabaseMigrationSqlDbResource" /> and their operations.
    /// Each <see cref="DatabaseMigrationSqlDbResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="DatabaseMigrationSqlDbCollection" /> instance call the GetDatabaseMigrationSqlDbs method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class DatabaseMigrationSqlDbCollection : ArmCollection
    {
        private readonly ClientDiagnostics _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics;
        private readonly DatabaseMigrationsSqlDbRestOperations _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient;

        /// <summary> Initializes a new instance of the <see cref="DatabaseMigrationSqlDbCollection"/> class for mocking. </summary>
        protected DatabaseMigrationSqlDbCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DatabaseMigrationSqlDbCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DatabaseMigrationSqlDbCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DataMigration", DatabaseMigrationSqlDbResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DatabaseMigrationSqlDbResource.ResourceType, out string databaseMigrationSqlDbDatabaseMigrationsSqlDbApiVersion);
            _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient = new DatabaseMigrationsSqlDbRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, databaseMigrationSqlDbDatabaseMigrationsSqlDbApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or Update Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="sqlDbInstanceName"> The String to use. </param>
        /// <param name="targetDbName"> The name of the target database. </param>
        /// <param name="data"> Details of Sql Db migration resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlDbInstanceName"/>, <paramref name="targetDbName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<DatabaseMigrationSqlDbResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string sqlDbInstanceName, string targetDbName, DatabaseMigrationSqlDbData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sqlDbInstanceName, nameof(sqlDbInstanceName));
            Argument.AssertNotNullOrEmpty(targetDbName, nameof(targetDbName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, sqlDbInstanceName, targetDbName, data, cancellationToken).ConfigureAwait(false);
                var operation = new DataMigrationArmOperation<DatabaseMigrationSqlDbResource>(new DatabaseMigrationSqlDbOperationSource(Client), _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics, Pipeline, _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, sqlDbInstanceName, targetDbName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or Update Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="sqlDbInstanceName"> The String to use. </param>
        /// <param name="targetDbName"> The name of the target database. </param>
        /// <param name="data"> Details of Sql Db migration resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlDbInstanceName"/>, <paramref name="targetDbName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<DatabaseMigrationSqlDbResource> CreateOrUpdate(WaitUntil waitUntil, string sqlDbInstanceName, string targetDbName, DatabaseMigrationSqlDbData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sqlDbInstanceName, nameof(sqlDbInstanceName));
            Argument.AssertNotNullOrEmpty(targetDbName, nameof(targetDbName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, sqlDbInstanceName, targetDbName, data, cancellationToken);
                var operation = new DataMigrationArmOperation<DatabaseMigrationSqlDbResource>(new DatabaseMigrationSqlDbOperationSource(Client), _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics, Pipeline, _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, sqlDbInstanceName, targetDbName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_Get
        /// </summary>
        /// <param name="sqlDbInstanceName"> The String to use. </param>
        /// <param name="targetDbName"> The name of the target database. </param>
        /// <param name="migrationOperationId"> Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. </param>
        /// <param name="expand"> Complete migration details be included in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is null. </exception>
        public virtual async Task<Response<DatabaseMigrationSqlDbResource>> GetAsync(string sqlDbInstanceName, string targetDbName, Guid? migrationOperationId = null, string expand = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sqlDbInstanceName, nameof(sqlDbInstanceName));
            Argument.AssertNotNullOrEmpty(targetDbName, nameof(targetDbName));

            using var scope = _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbCollection.Get");
            scope.Start();
            try
            {
                var response = await _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationId, expand, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DatabaseMigrationSqlDbResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the Database Migration resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_Get
        /// </summary>
        /// <param name="sqlDbInstanceName"> The String to use. </param>
        /// <param name="targetDbName"> The name of the target database. </param>
        /// <param name="migrationOperationId"> Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. </param>
        /// <param name="expand"> Complete migration details be included in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is null. </exception>
        public virtual Response<DatabaseMigrationSqlDbResource> Get(string sqlDbInstanceName, string targetDbName, Guid? migrationOperationId = null, string expand = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sqlDbInstanceName, nameof(sqlDbInstanceName));
            Argument.AssertNotNullOrEmpty(targetDbName, nameof(targetDbName));

            using var scope = _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbCollection.Get");
            scope.Start();
            try
            {
                var response = _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationId, expand, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DatabaseMigrationSqlDbResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_Get
        /// </summary>
        /// <param name="sqlDbInstanceName"> The String to use. </param>
        /// <param name="targetDbName"> The name of the target database. </param>
        /// <param name="migrationOperationId"> Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. </param>
        /// <param name="expand"> Complete migration details be included in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string sqlDbInstanceName, string targetDbName, Guid? migrationOperationId = null, string expand = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sqlDbInstanceName, nameof(sqlDbInstanceName));
            Argument.AssertNotNullOrEmpty(targetDbName, nameof(targetDbName));

            using var scope = _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbCollection.Exists");
            scope.Start();
            try
            {
                var response = await _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationId, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}
        /// Operation Id: DatabaseMigrationsSqlDb_Get
        /// </summary>
        /// <param name="sqlDbInstanceName"> The String to use. </param>
        /// <param name="targetDbName"> The name of the target database. </param>
        /// <param name="migrationOperationId"> Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. </param>
        /// <param name="expand"> Complete migration details be included in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlDbInstanceName"/> or <paramref name="targetDbName"/> is null. </exception>
        public virtual Response<bool> Exists(string sqlDbInstanceName, string targetDbName, Guid? migrationOperationId = null, string expand = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sqlDbInstanceName, nameof(sqlDbInstanceName));
            Argument.AssertNotNullOrEmpty(targetDbName, nameof(targetDbName));

            using var scope = _databaseMigrationSqlDbDatabaseMigrationsSqlDbClientDiagnostics.CreateScope("DatabaseMigrationSqlDbCollection.Exists");
            scope.Start();
            try
            {
                var response = _databaseMigrationSqlDbDatabaseMigrationsSqlDbRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationId, expand, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
