<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetSqlMigrationServiceAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetSqlMigrationServiceAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = await client.GetSqlMigrationServiceAsync("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSqlMigrationServiceAsync with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = await client.GetSqlMigrationServiceAsync("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code></example>
    </member>
    <member name="GetSqlMigrationService(string,string,RequestContext)">
      <example>
This sample shows how to call GetSqlMigrationService and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = client.GetSqlMigrationService("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSqlMigrationService with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = client.GetSqlMigrationService("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code></example>
    </member>
    <member name="GetAuthKeysAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetAuthKeysAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = await client.GetAuthKeysAsync("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetAuthKeysAsync with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = await client.GetAuthKeysAsync("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("authKey1").ToString());
Console.WriteLine(result.GetProperty("authKey2").ToString());
]]></code></example>
    </member>
    <member name="GetAuthKeys(string,string,RequestContext)">
      <example>
This sample shows how to call GetAuthKeys and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = client.GetAuthKeys("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetAuthKeys with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = client.GetAuthKeys("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("authKey1").ToString());
Console.WriteLine(result.GetProperty("authKey2").ToString());
]]></code></example>
    </member>
    <member name="RegenerateAuthKeysAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RegenerateAuthKeysAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.RegenerateAuthKeysAsync("<resourceGroupName>", "<sqlMigrationServiceName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RegenerateAuthKeysAsync with all parameters and request content and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new
{
    keyName = "<keyName>",
    authKey1 = "<authKey1>",
    authKey2 = "<authKey2>",
});
Response response = await client.RegenerateAuthKeysAsync("<resourceGroupName>", "<sqlMigrationServiceName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("keyName").ToString());
Console.WriteLine(result.GetProperty("authKey1").ToString());
Console.WriteLine(result.GetProperty("authKey2").ToString());
]]></code></example>
    </member>
    <member name="RegenerateAuthKeys(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RegenerateAuthKeys and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new object());
Response response = client.RegenerateAuthKeys("<resourceGroupName>", "<sqlMigrationServiceName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RegenerateAuthKeys with all parameters and request content and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new
{
    keyName = "<keyName>",
    authKey1 = "<authKey1>",
    authKey2 = "<authKey2>",
});
Response response = client.RegenerateAuthKeys("<resourceGroupName>", "<sqlMigrationServiceName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("keyName").ToString());
Console.WriteLine(result.GetProperty("authKey1").ToString());
Console.WriteLine(result.GetProperty("authKey2").ToString());
]]></code></example>
    </member>
    <member name="DeleteNodeAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteNodeAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.DeleteNodeAsync("<resourceGroupName>", "<sqlMigrationServiceName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DeleteNodeAsync with all parameters and request content and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new
{
    nodeName = "<nodeName>",
    integrationRuntimeName = "<integrationRuntimeName>",
});
Response response = await client.DeleteNodeAsync("<resourceGroupName>", "<sqlMigrationServiceName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("nodeName").ToString());
Console.WriteLine(result.GetProperty("integrationRuntimeName").ToString());
]]></code></example>
    </member>
    <member name="DeleteNode(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteNode and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new object());
Response response = client.DeleteNode("<resourceGroupName>", "<sqlMigrationServiceName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DeleteNode with all parameters and request content and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new
{
    nodeName = "<nodeName>",
    integrationRuntimeName = "<integrationRuntimeName>",
});
Response response = client.DeleteNode("<resourceGroupName>", "<sqlMigrationServiceName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("nodeName").ToString());
Console.WriteLine(result.GetProperty("integrationRuntimeName").ToString());
]]></code></example>
    </member>
    <member name="GetAllMonitoringDataAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetAllMonitoringDataAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = await client.GetAllMonitoringDataAsync("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetAllMonitoringDataAsync with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = await client.GetAllMonitoringDataAsync("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("additionalProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("nodeName").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("availableMemoryInMB").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("cpuUtilization").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("concurrentJobsLimit").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("concurrentJobsRunning").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("maxConcurrentJobs").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("sentBytes").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("receivedBytes").ToString());
]]></code></example>
    </member>
    <member name="GetAllMonitoringData(string,string,RequestContext)">
      <example>
This sample shows how to call GetAllMonitoringData and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = client.GetAllMonitoringData("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetAllMonitoringData with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Response response = client.GetAllMonitoringData("<resourceGroupName>", "<sqlMigrationServiceName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("additionalProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("nodeName").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("availableMemoryInMB").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("cpuUtilization").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("concurrentJobsLimit").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("concurrentJobsRunning").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("maxConcurrentJobs").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("sentBytes").ToString());
Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("receivedBytes").ToString());
]]></code></example>
    </member>
    <member name="GetSqlMigrationServicesByResourceGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call GetSqlMigrationServicesByResourceGroupAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

await foreach (BinaryData item in client.GetSqlMigrationServicesByResourceGroupAsync("<resourceGroupName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSqlMigrationServicesByResourceGroupAsync with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

await foreach (BinaryData item in client.GetSqlMigrationServicesByResourceGroupAsync("<resourceGroupName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code></example>
    </member>
    <member name="GetSqlMigrationServicesByResourceGroup(string,RequestContext)">
      <example>
This sample shows how to call GetSqlMigrationServicesByResourceGroup and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

foreach (BinaryData item in client.GetSqlMigrationServicesByResourceGroup("<resourceGroupName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSqlMigrationServicesByResourceGroup with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

foreach (BinaryData item in client.GetSqlMigrationServicesByResourceGroup("<resourceGroupName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code></example>
    </member>
    <member name="GetMigrationsAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetMigrationsAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

await foreach (BinaryData item in client.GetMigrationsAsync("<resourceGroupName>", "<sqlMigrationServiceName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetMigrationsAsync with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

await foreach (BinaryData item in client.GetMigrationsAsync("<resourceGroupName>", "<sqlMigrationServiceName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("dataSource").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("authentication").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("userName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("password").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("encryptConnection").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("trustServerCertificate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceDatabaseName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceServerName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("targetDatabaseCollation").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatus").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("startedOn").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("endedOn").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationService").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationOperationId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningError").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code></example>
    </member>
    <member name="GetMigrations(string,string,RequestContext)">
      <example>
This sample shows how to call GetMigrations and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

foreach (BinaryData item in client.GetMigrations("<resourceGroupName>", "<sqlMigrationServiceName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetMigrations with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

foreach (BinaryData item in client.GetMigrations("<resourceGroupName>", "<sqlMigrationServiceName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("dataSource").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("authentication").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("userName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("password").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("encryptConnection").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("trustServerCertificate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceDatabaseName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sourceServerName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("targetDatabaseCollation").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatus").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("startedOn").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("endedOn").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationService").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationOperationId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningError").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code></example>
    </member>
    <member name="GetSqlMigrationServicesBySubscriptionAsync(RequestContext)">
      <example>
This sample shows how to call GetSqlMigrationServicesBySubscriptionAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

await foreach (BinaryData item in client.GetSqlMigrationServicesBySubscriptionAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSqlMigrationServicesBySubscriptionAsync with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

await foreach (BinaryData item in client.GetSqlMigrationServicesBySubscriptionAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code></example>
    </member>
    <member name="GetSqlMigrationServicesBySubscription(RequestContext)">
      <example>
This sample shows how to call GetSqlMigrationServicesBySubscription and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

foreach (BinaryData item in client.GetSqlMigrationServicesBySubscription(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSqlMigrationServicesBySubscription with all parameters and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

foreach (BinaryData item in client.GetSqlMigrationServicesBySubscription(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new
{
    properties = new object(),
    location = "<location>",
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new
{
    properties = new object(),
    location = "<location>",
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>");
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>");
]]></code></example>
    </member>
    <member name="Delete(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>");
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>");
]]></code></example>
    </member>
    <member name="UpdateAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new
{
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code></example>
    </member>
    <member name="Update(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Update with all parameters and request content and parse the result.
<code><![CDATA[
SqlMigrationServicesClient client = new SqlMigrationServicesClient("<SubscriptionId>");

using RequestContent content = RequestContent.Create(new
{
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<sqlMigrationServiceName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("integrationRuntimeState").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code></example>
    </member>
  </members>
</doc>