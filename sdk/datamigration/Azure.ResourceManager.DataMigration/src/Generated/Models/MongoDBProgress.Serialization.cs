// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MongoDBProgress : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("bytesCopied");
            writer.WriteNumberValue(BytesCopied);
            writer.WritePropertyName("documentsCopied");
            writer.WriteNumberValue(DocumentsCopied);
            writer.WritePropertyName("elapsedTime");
            writer.WriteStringValue(ElapsedTime);
            writer.WritePropertyName("errors");
            writer.WriteStartObject();
            foreach (var item in Errors)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("eventsPending");
            writer.WriteNumberValue(EventsPending);
            writer.WritePropertyName("eventsReplayed");
            writer.WriteNumberValue(EventsReplayed);
            if (Optional.IsDefined(LastEventOn))
            {
                writer.WritePropertyName("lastEventTime");
                writer.WriteStringValue(LastEventOn.Value, "O");
            }
            if (Optional.IsDefined(LastReplayOn))
            {
                writer.WritePropertyName("lastReplayTime");
                writer.WriteStringValue(LastReplayOn.Value, "O");
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(QualifiedName))
            {
                writer.WritePropertyName("qualifiedName");
                writer.WriteStringValue(QualifiedName);
            }
            writer.WritePropertyName("resultType");
            writer.WriteStringValue(ResultType.ToString());
            writer.WritePropertyName("state");
            writer.WriteStringValue(State.ToString());
            writer.WritePropertyName("totalBytes");
            writer.WriteNumberValue(TotalBytes);
            writer.WritePropertyName("totalDocuments");
            writer.WriteNumberValue(TotalDocuments);
            writer.WriteEndObject();
        }

        internal static MongoDBProgress DeserializeMongoDBProgress(JsonElement element)
        {
            if (element.TryGetProperty("resultType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "Database": return MongoDBDatabaseProgress.DeserializeMongoDBDatabaseProgress(element);
                    case "Migration": return MongoDBMigrationProgress.DeserializeMongoDBMigrationProgress(element);
                    case "Collection": return MongoDBCollectionProgress.DeserializeMongoDBCollectionProgress(element);
                }
            }
            return UnknownMongoDBProgress.DeserializeUnknownMongoDBProgress(element);
        }
    }
}
