// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Current status of migration. </summary>
    public readonly partial struct DataMigrationStatus : IEquatable<DataMigrationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string ConnectingValue = "Connecting";
        private const string SourceAndTargetSelectedValue = "SourceAndTargetSelected";
        private const string SelectLoginsValue = "SelectLogins";
        private const string ConfiguredValue = "Configured";
        private const string RunningValue = "Running";
        private const string ErrorValue = "Error";
        private const string StoppedValue = "Stopped";
        private const string CompletedValue = "Completed";
        private const string CompletedWithWarningsValue = "CompletedWithWarnings";

        /// <summary> Default. </summary>
        public static DataMigrationStatus Default { get; } = new DataMigrationStatus(DefaultValue);
        /// <summary> Connecting. </summary>
        public static DataMigrationStatus Connecting { get; } = new DataMigrationStatus(ConnectingValue);
        /// <summary> SourceAndTargetSelected. </summary>
        public static DataMigrationStatus SourceAndTargetSelected { get; } = new DataMigrationStatus(SourceAndTargetSelectedValue);
        /// <summary> SelectLogins. </summary>
        public static DataMigrationStatus SelectLogins { get; } = new DataMigrationStatus(SelectLoginsValue);
        /// <summary> Configured. </summary>
        public static DataMigrationStatus Configured { get; } = new DataMigrationStatus(ConfiguredValue);
        /// <summary> Running. </summary>
        public static DataMigrationStatus Running { get; } = new DataMigrationStatus(RunningValue);
        /// <summary> Error. </summary>
        public static DataMigrationStatus Error { get; } = new DataMigrationStatus(ErrorValue);
        /// <summary> Stopped. </summary>
        public static DataMigrationStatus Stopped { get; } = new DataMigrationStatus(StoppedValue);
        /// <summary> Completed. </summary>
        public static DataMigrationStatus Completed { get; } = new DataMigrationStatus(CompletedValue);
        /// <summary> CompletedWithWarnings. </summary>
        public static DataMigrationStatus CompletedWithWarnings { get; } = new DataMigrationStatus(CompletedWithWarningsValue);
        /// <summary> Determines if two <see cref="DataMigrationStatus"/> values are the same. </summary>
        public static bool operator ==(DataMigrationStatus left, DataMigrationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationStatus"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationStatus left, DataMigrationStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationStatus"/>. </summary>
        public static implicit operator DataMigrationStatus(string value) => new DataMigrationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
