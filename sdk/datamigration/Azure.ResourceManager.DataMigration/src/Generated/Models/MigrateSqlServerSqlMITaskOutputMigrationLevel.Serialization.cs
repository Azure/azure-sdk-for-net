// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MigrateSqlServerSqlMITaskOutputMigrationLevel
    {
        internal static MigrateSqlServerSqlMITaskOutputMigrationLevel DeserializeMigrateSqlServerSqlMITaskOutputMigrationLevel(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<DateTimeOffset> startedOn = default;
            Core.Optional<DateTimeOffset> endedOn = default;
            Core.Optional<MigrationStatus> status = default;
            Core.Optional<MigrationState> state = default;
            Core.Optional<string> agentJobs = default;
            Core.Optional<string> logins = default;
            Core.Optional<string> message = default;
            Core.Optional<string> serverRoleResults = default;
            Core.Optional<IReadOnlyList<OrphanedUserInfo>> orphanedUsersInfo = default;
            Core.Optional<string> databases = default;
            Core.Optional<string> sourceServerVersion = default;
            Core.Optional<string> sourceServerBrandVersion = default;
            Core.Optional<string> targetServerVersion = default;
            Core.Optional<string> targetServerBrandVersion = default;
            Core.Optional<IReadOnlyList<ReportableException>> exceptionsAndWarnings = default;
            Core.Optional<string> id = default;
            string resultType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new MigrationStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new MigrationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("agentJobs"u8))
                {
                    agentJobs = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logins"u8))
                {
                    logins = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("message"u8))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverRoleResults"u8))
                {
                    serverRoleResults = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("orphanedUsersInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<OrphanedUserInfo> array = new List<OrphanedUserInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OrphanedUserInfo.DeserializeOrphanedUserInfo(item));
                    }
                    orphanedUsersInfo = array;
                    continue;
                }
                if (property.NameEquals("databases"u8))
                {
                    databases = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceServerVersion"u8))
                {
                    sourceServerVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceServerBrandVersion"u8))
                {
                    sourceServerBrandVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetServerVersion"u8))
                {
                    targetServerVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetServerBrandVersion"u8))
                {
                    targetServerBrandVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("exceptionsAndWarnings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReportableException> array = new List<ReportableException>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReportableException.DeserializeReportableException(item));
                    }
                    exceptionsAndWarnings = array;
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resultType"u8))
                {
                    resultType = property.Value.GetString();
                    continue;
                }
            }
            return new MigrateSqlServerSqlMITaskOutputMigrationLevel(id.Value, resultType, Core.Optional.ToNullable(startedOn), Core.Optional.ToNullable(endedOn), Core.Optional.ToNullable(status), Core.Optional.ToNullable(state), agentJobs.Value, logins.Value, message.Value, serverRoleResults.Value, Core.Optional.ToList(orphanedUsersInfo), databases.Value, sourceServerVersion.Value, sourceServerBrandVersion.Value, targetServerVersion.Value, targetServerBrandVersion.Value, Core.Optional.ToList(exceptionsAndWarnings));
        }
    }
}
