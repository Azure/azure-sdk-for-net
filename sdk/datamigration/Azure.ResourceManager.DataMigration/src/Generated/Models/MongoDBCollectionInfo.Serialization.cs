// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MongoDBCollectionInfo
    {
        internal static MongoDBCollectionInfo DeserializeMongoDBCollectionInfo(JsonElement element)
        {
            string databaseName = default;
            bool isCapped = default;
            bool isSystemCollection = default;
            bool isView = default;
            Optional<MongoDBShardKeyInfo> shardKey = default;
            bool supportsSharding = default;
            Optional<string> viewOf = default;
            long averageDocumentSize = default;
            long dataSize = default;
            long documentCount = default;
            string name = default;
            string qualifiedName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("databaseName"))
                {
                    databaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isCapped"))
                {
                    isCapped = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isSystemCollection"))
                {
                    isSystemCollection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isView"))
                {
                    isView = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("shardKey"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    shardKey = MongoDBShardKeyInfo.DeserializeMongoDBShardKeyInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("supportsSharding"))
                {
                    supportsSharding = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("viewOf"))
                {
                    viewOf = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("averageDocumentSize"))
                {
                    averageDocumentSize = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("dataSize"))
                {
                    dataSize = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("documentCount"))
                {
                    documentCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("qualifiedName"))
                {
                    qualifiedName = property.Value.GetString();
                    continue;
                }
            }
            return new MongoDBCollectionInfo(averageDocumentSize, dataSize, documentCount, name, qualifiedName, databaseName, isCapped, isSystemCollection, isView, shardKey.Value, supportsSharding, viewOf.Value);
        }
    }
}
