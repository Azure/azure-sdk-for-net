// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MongoDBCollectionSettings : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(CanDelete))
            {
                writer.WritePropertyName("canDelete"u8);
                writer.WriteBooleanValue(CanDelete.Value);
            }
            if (Core.Optional.IsDefined(ShardKey))
            {
                writer.WritePropertyName("shardKey"u8);
                writer.WriteObjectValue(ShardKey);
            }
            if (Core.Optional.IsDefined(TargetRUs))
            {
                writer.WritePropertyName("targetRUs"u8);
                writer.WriteNumberValue(TargetRUs.Value);
            }
            writer.WriteEndObject();
        }

        internal static MongoDBCollectionSettings DeserializeMongoDBCollectionSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<bool> canDelete = default;
            Core.Optional<MongoDBShardKeySetting> shardKey = default;
            Core.Optional<int> targetRUs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("canDelete"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    canDelete = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("shardKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shardKey = MongoDBShardKeySetting.DeserializeMongoDBShardKeySetting(property.Value);
                    continue;
                }
                if (property.NameEquals("targetRUs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetRUs = property.Value.GetInt32();
                    continue;
                }
            }
            return new MongoDBCollectionSettings(Core.Optional.ToNullable(canDelete), shardKey.Value, Core.Optional.ToNullable(targetRUs));
        }
    }
}
