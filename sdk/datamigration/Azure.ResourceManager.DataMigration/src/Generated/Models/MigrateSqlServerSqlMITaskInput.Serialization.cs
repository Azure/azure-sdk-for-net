// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MigrateSqlServerSqlMITaskInput : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("selectedDatabases");
            writer.WriteStartArray();
            foreach (var item in SelectedDatabases)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(StartedOn))
            {
                writer.WritePropertyName("startedOn");
                writer.WriteStringValue(StartedOn);
            }
            if (Optional.IsCollectionDefined(SelectedLogins))
            {
                writer.WritePropertyName("selectedLogins");
                writer.WriteStartArray();
                foreach (var item in SelectedLogins)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SelectedAgentJobs))
            {
                writer.WritePropertyName("selectedAgentJobs");
                writer.WriteStartArray();
                foreach (var item in SelectedAgentJobs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BackupFileShare))
            {
                writer.WritePropertyName("backupFileShare");
                writer.WriteObjectValue(BackupFileShare);
            }
            writer.WritePropertyName("backupBlobShare");
            writer.WriteObjectValue(BackupBlobShare);
            if (Optional.IsDefined(BackupMode))
            {
                writer.WritePropertyName("backupMode");
                writer.WriteStringValue(BackupMode.Value.ToString());
            }
            if (Optional.IsDefined(AadDomainName))
            {
                writer.WritePropertyName("aadDomainName");
                writer.WriteStringValue(AadDomainName);
            }
            if (Optional.IsDefined(EncryptedKeyForSecureFields))
            {
                writer.WritePropertyName("encryptedKeyForSecureFields");
                writer.WriteStringValue(EncryptedKeyForSecureFields);
            }
            writer.WritePropertyName("sourceConnectionInfo");
            writer.WriteObjectValue(SourceConnectionInfo);
            writer.WritePropertyName("targetConnectionInfo");
            writer.WriteObjectValue(TargetConnectionInfo);
            writer.WriteEndObject();
        }

        internal static MigrateSqlServerSqlMITaskInput DeserializeMigrateSqlServerSqlMITaskInput(JsonElement element)
        {
            IList<MigrateSqlServerSqlMIDatabaseInput> selectedDatabases = default;
            Optional<string> startedOn = default;
            Optional<IList<string>> selectedLogins = default;
            Optional<IList<string>> selectedAgentJobs = default;
            Optional<FileShare> backupFileShare = default;
            BlobShare backupBlobShare = default;
            Optional<BackupMode> backupMode = default;
            Optional<string> aadDomainName = default;
            Optional<string> encryptedKeyForSecureFields = default;
            SqlConnectionInfo sourceConnectionInfo = default;
            SqlConnectionInfo targetConnectionInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("selectedDatabases"))
                {
                    List<MigrateSqlServerSqlMIDatabaseInput> array = new List<MigrateSqlServerSqlMIDatabaseInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MigrateSqlServerSqlMIDatabaseInput.DeserializeMigrateSqlServerSqlMIDatabaseInput(item));
                    }
                    selectedDatabases = array;
                    continue;
                }
                if (property.NameEquals("startedOn"))
                {
                    startedOn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("selectedLogins"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    selectedLogins = array;
                    continue;
                }
                if (property.NameEquals("selectedAgentJobs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    selectedAgentJobs = array;
                    continue;
                }
                if (property.NameEquals("backupFileShare"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backupFileShare = FileShare.DeserializeFileShare(property.Value);
                    continue;
                }
                if (property.NameEquals("backupBlobShare"))
                {
                    backupBlobShare = BlobShare.DeserializeBlobShare(property.Value);
                    continue;
                }
                if (property.NameEquals("backupMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backupMode = new BackupMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("aadDomainName"))
                {
                    aadDomainName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encryptedKeyForSecureFields"))
                {
                    encryptedKeyForSecureFields = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceConnectionInfo"))
                {
                    sourceConnectionInfo = SqlConnectionInfo.DeserializeSqlConnectionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("targetConnectionInfo"))
                {
                    targetConnectionInfo = SqlConnectionInfo.DeserializeSqlConnectionInfo(property.Value);
                    continue;
                }
            }
            return new MigrateSqlServerSqlMITaskInput(sourceConnectionInfo, targetConnectionInfo, selectedDatabases, startedOn.Value, Optional.ToList(selectedLogins), Optional.ToList(selectedAgentJobs), backupFileShare.Value, backupBlobShare, Optional.ToNullable(backupMode), aadDomainName.Value, encryptedKeyForSecureFields.Value);
        }
    }
}
