// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Database specific information for offline MySQL to Azure Database for MySQL migration task inputs. </summary>
    public partial class MigrateMySqlAzureDBForMySqlOfflineDatabaseInput
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="MigrateMySqlAzureDBForMySqlOfflineDatabaseInput"/>. </summary>
        public MigrateMySqlAzureDBForMySqlOfflineDatabaseInput()
        {
            TableMap = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="MigrateMySqlAzureDBForMySqlOfflineDatabaseInput"/>. </summary>
        /// <param name="name"> Name of the database. </param>
        /// <param name="targetDatabaseName"> Name of target database. Note: Target database will be truncated before starting migration. </param>
        /// <param name="tableMap"> Mapping of source to target tables. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrateMySqlAzureDBForMySqlOfflineDatabaseInput(string name, string targetDatabaseName, IDictionary<string, string> tableMap, Dictionary<string, BinaryData> rawData)
        {
            Name = name;
            TargetDatabaseName = targetDatabaseName;
            TableMap = tableMap;
            _rawData = rawData;
        }

        /// <summary> Name of the database. </summary>
        public string Name { get; set; }
        /// <summary> Name of target database. Note: Target database will be truncated before starting migration. </summary>
        public string TargetDatabaseName { get; set; }
        /// <summary> Mapping of source to target tables. </summary>
        public IDictionary<string, string> TableMap { get; }
    }
}
