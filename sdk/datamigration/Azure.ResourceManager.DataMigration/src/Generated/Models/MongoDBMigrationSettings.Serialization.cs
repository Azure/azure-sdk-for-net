// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MongoDBMigrationSettings : IUtf8JsonSerializable, IModelJsonSerializable<MongoDBMigrationSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MongoDBMigrationSettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MongoDBMigrationSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(BoostRUs))
            {
                writer.WritePropertyName("boostRUs"u8);
                writer.WriteNumberValue(BoostRUs.Value);
            }
            writer.WritePropertyName("databases"u8);
            writer.WriteStartObject();
            foreach (var item in Databases)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
            if (Optional.IsDefined(Replication))
            {
                writer.WritePropertyName("replication"u8);
                writer.WriteStringValue(Replication.Value.ToString());
            }
            writer.WritePropertyName("source"u8);
            writer.WriteObjectValue(Source);
            writer.WritePropertyName("target"u8);
            writer.WriteObjectValue(Target);
            if (Optional.IsDefined(Throttling))
            {
                writer.WritePropertyName("throttling"u8);
                writer.WriteObjectValue(Throttling);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MongoDBMigrationSettings DeserializeMongoDBMigrationSettings(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> boostRUs = default;
            IDictionary<string, MongoDBDatabaseSettings> databases = default;
            Optional<MongoDBReplication> replication = default;
            MongoDBConnectionInfo source = default;
            MongoDBConnectionInfo target = default;
            Optional<MongoDBThrottlingSettings> throttling = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("boostRUs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    boostRUs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("databases"u8))
                {
                    Dictionary<string, MongoDBDatabaseSettings> dictionary = new Dictionary<string, MongoDBDatabaseSettings>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, MongoDBDatabaseSettings.DeserializeMongoDBDatabaseSettings(property0.Value));
                    }
                    databases = dictionary;
                    continue;
                }
                if (property.NameEquals("replication"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    replication = new MongoDBReplication(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("source"u8))
                {
                    source = MongoDBConnectionInfo.DeserializeMongoDBConnectionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("target"u8))
                {
                    target = MongoDBConnectionInfo.DeserializeMongoDBConnectionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("throttling"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    throttling = MongoDBThrottlingSettings.DeserializeMongoDBThrottlingSettings(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MongoDBMigrationSettings(Optional.ToNullable(boostRUs), databases, Optional.ToNullable(replication), source, target, throttling.Value, rawData);
        }

        MongoDBMigrationSettings IModelJsonSerializable<MongoDBMigrationSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMongoDBMigrationSettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MongoDBMigrationSettings>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MongoDBMigrationSettings IModelSerializable<MongoDBMigrationSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMongoDBMigrationSettings(doc.RootElement, options);
        }

        public static implicit operator RequestContent(MongoDBMigrationSettings model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator MongoDBMigrationSettings(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMongoDBMigrationSettings(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
