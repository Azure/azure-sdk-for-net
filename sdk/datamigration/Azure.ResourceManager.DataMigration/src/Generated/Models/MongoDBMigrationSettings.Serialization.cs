// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MongoDBMigrationSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BoostRUs))
            {
                writer.WritePropertyName("boostRUs"u8);
                writer.WriteNumberValue(BoostRUs.Value);
            }
            writer.WritePropertyName("databases"u8);
            writer.WriteStartObject();
            foreach (var item in Databases)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
            if (Optional.IsDefined(Replication))
            {
                writer.WritePropertyName("replication"u8);
                writer.WriteStringValue(Replication.Value.ToString());
            }
            writer.WritePropertyName("source"u8);
            writer.WriteObjectValue(Source);
            writer.WritePropertyName("target"u8);
            writer.WriteObjectValue(Target);
            if (Optional.IsDefined(Throttling))
            {
                writer.WritePropertyName("throttling"u8);
                writer.WriteObjectValue(Throttling);
            }
            writer.WriteEndObject();
        }

        internal static MongoDBMigrationSettings DeserializeMongoDBMigrationSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> boostRUs = default;
            IDictionary<string, MongoDBDatabaseSettings> databases = default;
            Optional<MongoDBReplication> replication = default;
            MongoDBConnectionInfo source = default;
            MongoDBConnectionInfo target = default;
            Optional<MongoDBThrottlingSettings> throttling = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("boostRUs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    boostRUs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("databases"u8))
                {
                    Dictionary<string, MongoDBDatabaseSettings> dictionary = new Dictionary<string, MongoDBDatabaseSettings>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, MongoDBDatabaseSettings.DeserializeMongoDBDatabaseSettings(property0.Value));
                    }
                    databases = dictionary;
                    continue;
                }
                if (property.NameEquals("replication"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    replication = new MongoDBReplication(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("source"u8))
                {
                    source = MongoDBConnectionInfo.DeserializeMongoDBConnectionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("target"u8))
                {
                    target = MongoDBConnectionInfo.DeserializeMongoDBConnectionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("throttling"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    throttling = MongoDBThrottlingSettings.DeserializeMongoDBThrottlingSettings(property.Value);
                    continue;
                }
            }
            return new MongoDBMigrationSettings(Optional.ToNullable(boostRUs), databases, Optional.ToNullable(replication), source, target, throttling.Value);
        }
    }
}
