// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class OracleOciDriverInfo
    {
        internal static OracleOciDriverInfo DeserializeOracleOciDriverInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> driverName = default;
            Core.Optional<string> driverSize = default;
            Core.Optional<string> archiveChecksum = default;
            Core.Optional<string> oracleChecksum = default;
            Core.Optional<string> assemblyVersion = default;
            Core.Optional<IReadOnlyList<string>> supportedOracleVersions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("driverName"u8))
                {
                    driverName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("driverSize"u8))
                {
                    driverSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("archiveChecksum"u8))
                {
                    archiveChecksum = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("oracleChecksum"u8))
                {
                    oracleChecksum = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assemblyVersion"u8))
                {
                    assemblyVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportedOracleVersions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    supportedOracleVersions = array;
                    continue;
                }
            }
            return new OracleOciDriverInfo(driverName.Value, driverSize.Value, archiveChecksum.Value, oracleChecksum.Value, assemblyVersion.Value, Core.Optional.ToList(supportedOracleVersions));
        }
    }
}
