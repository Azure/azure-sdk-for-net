// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class BackupSetInfo : IUtf8JsonSerializable, IJsonModel<BackupSetInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BackupSetInfo>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<BackupSetInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BackupSetInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BackupSetInfo)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(BackupSetId))
            {
                writer.WritePropertyName("backupSetId"u8);
                writer.WriteStringValue(BackupSetId);
            }
            if (Optional.IsDefined(FirstLsn))
            {
                writer.WritePropertyName("firstLsn"u8);
                writer.WriteStringValue(FirstLsn);
            }
            if (Optional.IsDefined(LastLsn))
            {
                writer.WritePropertyName("lastLsn"u8);
                writer.WriteStringValue(LastLsn);
            }
            if (Optional.IsDefined(LastModifiedOn))
            {
                writer.WritePropertyName("lastModifiedTime"u8);
                writer.WriteStringValue(LastModifiedOn.Value, "O");
            }
            if (Optional.IsDefined(BackupType))
            {
                writer.WritePropertyName("backupType"u8);
                writer.WriteStringValue(BackupType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(ListOfBackupFiles))
            {
                writer.WritePropertyName("listOfBackupFiles"u8);
                writer.WriteStartArray();
                foreach (var item in ListOfBackupFiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DatabaseName))
            {
                writer.WritePropertyName("databaseName"u8);
                writer.WriteStringValue(DatabaseName);
            }
            if (Optional.IsDefined(BackupStartOn))
            {
                writer.WritePropertyName("backupStartDate"u8);
                writer.WriteStringValue(BackupStartOn.Value, "O");
            }
            if (Optional.IsDefined(BackupFinishedOn))
            {
                writer.WritePropertyName("backupFinishedDate"u8);
                writer.WriteStringValue(BackupFinishedOn.Value, "O");
            }
            if (Optional.IsDefined(IsBackupRestored))
            {
                writer.WritePropertyName("isBackupRestored"u8);
                writer.WriteBooleanValue(IsBackupRestored.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BackupSetInfo IJsonModel<BackupSetInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BackupSetInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BackupSetInfo)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBackupSetInfo(document.RootElement, options);
        }

        internal static BackupSetInfo DeserializeBackupSetInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> backupSetId = default;
            Optional<string> firstLsn = default;
            Optional<string> lastLsn = default;
            Optional<DateTimeOffset> lastModifiedTime = default;
            Optional<BackupType> backupType = default;
            Optional<IReadOnlyList<BackupFileInfo>> listOfBackupFiles = default;
            Optional<string> databaseName = default;
            Optional<DateTimeOffset> backupStartDate = default;
            Optional<DateTimeOffset> backupFinishedDate = default;
            Optional<bool> isBackupRestored = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("backupSetId"u8))
                {
                    backupSetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firstLsn"u8))
                {
                    firstLsn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastLsn"u8))
                {
                    lastLsn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastModifiedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("backupType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupType = new BackupType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("listOfBackupFiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BackupFileInfo> array = new List<BackupFileInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BackupFileInfo.DeserializeBackupFileInfo(item));
                    }
                    listOfBackupFiles = array;
                    continue;
                }
                if (property.NameEquals("databaseName"u8))
                {
                    databaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backupStartDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupStartDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("backupFinishedDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupFinishedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("isBackupRestored"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isBackupRestored = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new BackupSetInfo(backupSetId.Value, firstLsn.Value, lastLsn.Value, Optional.ToNullable(lastModifiedTime), Optional.ToNullable(backupType), Optional.ToList(listOfBackupFiles), databaseName.Value, Optional.ToNullable(backupStartDate), Optional.ToNullable(backupFinishedDate), Optional.ToNullable(isBackupRestored), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BackupSetInfo>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BackupSetInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(BackupSetInfo)} does not support '{options.Format}' format.");
            }
        }

        BackupSetInfo IPersistableModel<BackupSetInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BackupSetInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBackupSetInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BackupSetInfo)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<BackupSetInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
