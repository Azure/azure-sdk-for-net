// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class ValidateMigrationInputSqlServerSqlMITaskOutput
    {
        internal static ValidateMigrationInputSqlServerSqlMITaskOutput DeserializeValidateMigrationInputSqlServerSqlMITaskOutput(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> id = default;
            Core.Optional<string> name = default;
            Core.Optional<IReadOnlyList<ReportableException>> restoreDatabaseNameErrors = default;
            Core.Optional<IReadOnlyList<ReportableException>> backupFolderErrors = default;
            Core.Optional<IReadOnlyList<ReportableException>> backupShareCredentialsErrors = default;
            Core.Optional<IReadOnlyList<ReportableException>> backupStorageAccountErrors = default;
            Core.Optional<IReadOnlyList<ReportableException>> existingBackupErrors = default;
            Core.Optional<DatabaseBackupInfo> databaseBackupInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("restoreDatabaseNameErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReportableException> array = new List<ReportableException>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReportableException.DeserializeReportableException(item));
                    }
                    restoreDatabaseNameErrors = array;
                    continue;
                }
                if (property.NameEquals("backupFolderErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReportableException> array = new List<ReportableException>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReportableException.DeserializeReportableException(item));
                    }
                    backupFolderErrors = array;
                    continue;
                }
                if (property.NameEquals("backupShareCredentialsErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReportableException> array = new List<ReportableException>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReportableException.DeserializeReportableException(item));
                    }
                    backupShareCredentialsErrors = array;
                    continue;
                }
                if (property.NameEquals("backupStorageAccountErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReportableException> array = new List<ReportableException>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReportableException.DeserializeReportableException(item));
                    }
                    backupStorageAccountErrors = array;
                    continue;
                }
                if (property.NameEquals("existingBackupErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReportableException> array = new List<ReportableException>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReportableException.DeserializeReportableException(item));
                    }
                    existingBackupErrors = array;
                    continue;
                }
                if (property.NameEquals("databaseBackupInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseBackupInfo = DatabaseBackupInfo.DeserializeDatabaseBackupInfo(property.Value);
                    continue;
                }
            }
            return new ValidateMigrationInputSqlServerSqlMITaskOutput(id.Value, name.Value, Core.Optional.ToList(restoreDatabaseNameErrors), Core.Optional.ToList(backupFolderErrors), Core.Optional.ToList(backupShareCredentialsErrors), Core.Optional.ToList(backupStorageAccountErrors), Core.Optional.ToList(existingBackupErrors), databaseBackupInfo.Value);
        }
    }
}
