// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Enum mapping of SMO LoginType. </summary>
    public readonly partial struct DataMigrationLoginType : IEquatable<DataMigrationLoginType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationLoginType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationLoginType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WindowsUserValue = "WindowsUser";
        private const string WindowsGroupValue = "WindowsGroup";
        private const string SqlLoginValue = "SqlLogin";
        private const string CertificateValue = "Certificate";
        private const string AsymmetricKeyValue = "AsymmetricKey";
        private const string ExternalUserValue = "ExternalUser";
        private const string ExternalGroupValue = "ExternalGroup";

        /// <summary> WindowsUser. </summary>
        public static DataMigrationLoginType WindowsUser { get; } = new DataMigrationLoginType(WindowsUserValue);
        /// <summary> WindowsGroup. </summary>
        public static DataMigrationLoginType WindowsGroup { get; } = new DataMigrationLoginType(WindowsGroupValue);
        /// <summary> SqlLogin. </summary>
        public static DataMigrationLoginType SqlLogin { get; } = new DataMigrationLoginType(SqlLoginValue);
        /// <summary> Certificate. </summary>
        public static DataMigrationLoginType Certificate { get; } = new DataMigrationLoginType(CertificateValue);
        /// <summary> AsymmetricKey. </summary>
        public static DataMigrationLoginType AsymmetricKey { get; } = new DataMigrationLoginType(AsymmetricKeyValue);
        /// <summary> ExternalUser. </summary>
        public static DataMigrationLoginType ExternalUser { get; } = new DataMigrationLoginType(ExternalUserValue);
        /// <summary> ExternalGroup. </summary>
        public static DataMigrationLoginType ExternalGroup { get; } = new DataMigrationLoginType(ExternalGroupValue);
        /// <summary> Determines if two <see cref="DataMigrationLoginType"/> values are the same. </summary>
        public static bool operator ==(DataMigrationLoginType left, DataMigrationLoginType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationLoginType"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationLoginType left, DataMigrationLoginType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationLoginType"/>. </summary>
        public static implicit operator DataMigrationLoginType(string value) => new DataMigrationLoginType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationLoginType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationLoginType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
