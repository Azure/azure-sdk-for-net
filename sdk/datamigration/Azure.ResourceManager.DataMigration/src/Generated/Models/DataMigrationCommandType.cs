// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Command type. </summary>
    internal readonly partial struct DataMigrationCommandType : IEquatable<DataMigrationCommandType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationCommandType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationCommandType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MigrateSyncCompleteDatabaseValue = "Migrate.Sync.Complete.Database";
        private const string MigrateSqlServerAzureDBSqlMICompleteValue = "Migrate.SqlServer.AzureDbSqlMi.Complete";
        private const string CancelValue = "cancel";
        private const string FinishValue = "finish";
        private const string RestartValue = "restart";

        /// <summary> Migrate.Sync.Complete.Database. </summary>
        public static DataMigrationCommandType MigrateSyncCompleteDatabase { get; } = new DataMigrationCommandType(MigrateSyncCompleteDatabaseValue);
        /// <summary> Migrate.SqlServer.AzureDbSqlMi.Complete. </summary>
        public static DataMigrationCommandType MigrateSqlServerAzureDBSqlMIComplete { get; } = new DataMigrationCommandType(MigrateSqlServerAzureDBSqlMICompleteValue);
        /// <summary> cancel. </summary>
        public static DataMigrationCommandType Cancel { get; } = new DataMigrationCommandType(CancelValue);
        /// <summary> finish. </summary>
        public static DataMigrationCommandType Finish { get; } = new DataMigrationCommandType(FinishValue);
        /// <summary> restart. </summary>
        public static DataMigrationCommandType Restart { get; } = new DataMigrationCommandType(RestartValue);
        /// <summary> Determines if two <see cref="DataMigrationCommandType"/> values are the same. </summary>
        public static bool operator ==(DataMigrationCommandType left, DataMigrationCommandType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationCommandType"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationCommandType left, DataMigrationCommandType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationCommandType"/>. </summary>
        public static implicit operator DataMigrationCommandType(string value) => new DataMigrationCommandType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationCommandType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationCommandType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
