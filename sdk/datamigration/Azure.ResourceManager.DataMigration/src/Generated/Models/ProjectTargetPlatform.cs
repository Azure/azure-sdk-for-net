// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Target platform of the project. </summary>
    public readonly partial struct ProjectTargetPlatform : IEquatable<ProjectTargetPlatform>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProjectTargetPlatform"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProjectTargetPlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SqldbValue = "SQLDB";
        private const string SqlmiValue = "SQLMI";
        private const string AzureDbForMySqlValue = "AzureDbForMySql";
        private const string AzureDbForPostgreSqlValue = "AzureDbForPostgreSql";
        private const string MongoDbValue = "MongoDb";
        private const string UnknownValue = "Unknown";

        /// <summary> SQLDB. </summary>
        public static ProjectTargetPlatform Sqldb { get; } = new ProjectTargetPlatform(SqldbValue);
        /// <summary> SQLMI. </summary>
        public static ProjectTargetPlatform Sqlmi { get; } = new ProjectTargetPlatform(SqlmiValue);
        /// <summary> AzureDbForMySql. </summary>
        public static ProjectTargetPlatform AzureDbForMySql { get; } = new ProjectTargetPlatform(AzureDbForMySqlValue);
        /// <summary> AzureDbForPostgreSql. </summary>
        public static ProjectTargetPlatform AzureDbForPostgreSql { get; } = new ProjectTargetPlatform(AzureDbForPostgreSqlValue);
        /// <summary> MongoDb. </summary>
        public static ProjectTargetPlatform MongoDb { get; } = new ProjectTargetPlatform(MongoDbValue);
        /// <summary> Unknown. </summary>
        public static ProjectTargetPlatform Unknown { get; } = new ProjectTargetPlatform(UnknownValue);
        /// <summary> Determines if two <see cref="ProjectTargetPlatform"/> values are the same. </summary>
        public static bool operator ==(ProjectTargetPlatform left, ProjectTargetPlatform right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProjectTargetPlatform"/> values are not the same. </summary>
        public static bool operator !=(ProjectTargetPlatform left, ProjectTargetPlatform right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProjectTargetPlatform"/>. </summary>
        public static implicit operator ProjectTargetPlatform(string value) => new ProjectTargetPlatform(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProjectTargetPlatform other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProjectTargetPlatform other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
