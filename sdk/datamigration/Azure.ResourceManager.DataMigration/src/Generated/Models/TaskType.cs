// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Task type. </summary>
    internal readonly partial struct TaskType : IEquatable<TaskType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TaskType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TaskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConnectMongoDbValue = "Connect.MongoDb";
        private const string ConnectToSourceSqlServerValue = "ConnectToSource.SqlServer";
        private const string ConnectToSourceSqlServerSyncValue = "ConnectToSource.SqlServer.Sync";
        private const string ConnectToSourcePostgreSqlSyncValue = "ConnectToSource.PostgreSql.Sync";
        private const string ConnectToSourceMySqlValue = "ConnectToSource.MySql";
        private const string ConnectToSourceOracleSyncValue = "ConnectToSource.Oracle.Sync";
        private const string ConnectToTargetSqlDbValue = "ConnectToTarget.SqlDb";
        private const string ConnectToTargetSqlDbSyncValue = "ConnectToTarget.SqlDb.Sync";
        private const string ConnectToTargetAzureDbForPostgreSqlSyncValue = "ConnectToTarget.AzureDbForPostgreSql.Sync";
        private const string ConnectToTargetOracleAzureDbForPostgreSqlSyncValue = "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync";
        private const string ConnectToTargetAzureSqlDbMIValue = "ConnectToTarget.AzureSqlDbMI";
        private const string ConnectToTargetAzureSqlDbMISyncLRSValue = "ConnectToTarget.AzureSqlDbMI.Sync.LRS";
        private const string ConnectToTargetAzureDbForMySqlValue = "ConnectToTarget.AzureDbForMySql";
        private const string GetUserTablesSqlValue = "GetUserTables.Sql";
        private const string GetUserTablesAzureSqlDbSyncValue = "GetUserTables.AzureSqlDb.Sync";
        private const string GetUserTablesOracleValue = "GetUserTablesOracle";
        private const string GetUserTablesPostgreSqlValue = "GetUserTablesPostgreSql";
        private const string GetUserTablesMySqlValue = "GetUserTablesMySql";
        private const string MigrateMongoDbValue = "Migrate.MongoDb";
        private const string MigrateSqlServerAzureSqlDbMIValue = "Migrate.SqlServer.AzureSqlDbMI";
        private const string MigrateSqlServerAzureSqlDbMISyncLRSValue = "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS";
        private const string MigrateSqlServerSqlDbValue = "Migrate.SqlServer.SqlDb";
        private const string MigrateSqlServerAzureSqlDbSyncValue = "Migrate.SqlServer.AzureSqlDb.Sync";
        private const string MigrateMySqlAzureDbForMySqlSyncValue = "Migrate.MySql.AzureDbForMySql.Sync";
        private const string MigrateMySqlAzureDbForMySqlValue = "Migrate.MySql.AzureDbForMySql";
        private const string MigratePostgreSqlAzureDbForPostgreSqlSyncV2Value = "Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2";
        private const string MigrateOracleAzureDbForPostgreSqlSyncValue = "Migrate.Oracle.AzureDbForPostgreSql.Sync";
        private const string ValidateMigrationInputSqlServerSqlDbSyncValue = "ValidateMigrationInput.SqlServer.SqlDb.Sync";
        private const string ValidateMigrationInputSqlServerAzureSqlDbMIValue = "ValidateMigrationInput.SqlServer.AzureSqlDbMI";
        private const string ValidateMigrationInputSqlServerAzureSqlDbMISyncLRSValue = "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS";
        private const string ValidateMongoDbValue = "Validate.MongoDb";
        private const string ValidateOracleAzureDbPostgreSqlSyncValue = "Validate.Oracle.AzureDbPostgreSql.Sync";
        private const string GetTDECertificatesSqlValue = "GetTDECertificates.Sql";
        private const string MigrateSsisValue = "Migrate.Ssis";
        private const string ServiceCheckOCIValue = "Service.Check.OCI";
        private const string ServiceUploadOCIValue = "Service.Upload.OCI";
        private const string ServiceInstallOCIValue = "Service.Install.OCI";
        private const string MigrateSchemaSqlServerSqlDbValue = "MigrateSchemaSqlServerSqlDb";

        /// <summary> Connect.MongoDb. </summary>
        public static TaskType ConnectMongoDb { get; } = new TaskType(ConnectMongoDbValue);
        /// <summary> ConnectToSource.SqlServer. </summary>
        public static TaskType ConnectToSourceSqlServer { get; } = new TaskType(ConnectToSourceSqlServerValue);
        /// <summary> ConnectToSource.SqlServer.Sync. </summary>
        public static TaskType ConnectToSourceSqlServerSync { get; } = new TaskType(ConnectToSourceSqlServerSyncValue);
        /// <summary> ConnectToSource.PostgreSql.Sync. </summary>
        public static TaskType ConnectToSourcePostgreSqlSync { get; } = new TaskType(ConnectToSourcePostgreSqlSyncValue);
        /// <summary> ConnectToSource.MySql. </summary>
        public static TaskType ConnectToSourceMySql { get; } = new TaskType(ConnectToSourceMySqlValue);
        /// <summary> ConnectToSource.Oracle.Sync. </summary>
        public static TaskType ConnectToSourceOracleSync { get; } = new TaskType(ConnectToSourceOracleSyncValue);
        /// <summary> ConnectToTarget.SqlDb. </summary>
        public static TaskType ConnectToTargetSqlDb { get; } = new TaskType(ConnectToTargetSqlDbValue);
        /// <summary> ConnectToTarget.SqlDb.Sync. </summary>
        public static TaskType ConnectToTargetSqlDbSync { get; } = new TaskType(ConnectToTargetSqlDbSyncValue);
        /// <summary> ConnectToTarget.AzureDbForPostgreSql.Sync. </summary>
        public static TaskType ConnectToTargetAzureDbForPostgreSqlSync { get; } = new TaskType(ConnectToTargetAzureDbForPostgreSqlSyncValue);
        /// <summary> ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync. </summary>
        public static TaskType ConnectToTargetOracleAzureDbForPostgreSqlSync { get; } = new TaskType(ConnectToTargetOracleAzureDbForPostgreSqlSyncValue);
        /// <summary> ConnectToTarget.AzureSqlDbMI. </summary>
        public static TaskType ConnectToTargetAzureSqlDbMI { get; } = new TaskType(ConnectToTargetAzureSqlDbMIValue);
        /// <summary> ConnectToTarget.AzureSqlDbMI.Sync.LRS. </summary>
        public static TaskType ConnectToTargetAzureSqlDbMISyncLRS { get; } = new TaskType(ConnectToTargetAzureSqlDbMISyncLRSValue);
        /// <summary> ConnectToTarget.AzureDbForMySql. </summary>
        public static TaskType ConnectToTargetAzureDbForMySql { get; } = new TaskType(ConnectToTargetAzureDbForMySqlValue);
        /// <summary> GetUserTables.Sql. </summary>
        public static TaskType GetUserTablesSql { get; } = new TaskType(GetUserTablesSqlValue);
        /// <summary> GetUserTables.AzureSqlDb.Sync. </summary>
        public static TaskType GetUserTablesAzureSqlDbSync { get; } = new TaskType(GetUserTablesAzureSqlDbSyncValue);
        /// <summary> GetUserTablesOracle. </summary>
        public static TaskType GetUserTablesOracle { get; } = new TaskType(GetUserTablesOracleValue);
        /// <summary> GetUserTablesPostgreSql. </summary>
        public static TaskType GetUserTablesPostgreSql { get; } = new TaskType(GetUserTablesPostgreSqlValue);
        /// <summary> GetUserTablesMySql. </summary>
        public static TaskType GetUserTablesMySql { get; } = new TaskType(GetUserTablesMySqlValue);
        /// <summary> Migrate.MongoDb. </summary>
        public static TaskType MigrateMongoDb { get; } = new TaskType(MigrateMongoDbValue);
        /// <summary> Migrate.SqlServer.AzureSqlDbMI. </summary>
        public static TaskType MigrateSqlServerAzureSqlDbMI { get; } = new TaskType(MigrateSqlServerAzureSqlDbMIValue);
        /// <summary> Migrate.SqlServer.AzureSqlDbMI.Sync.LRS. </summary>
        public static TaskType MigrateSqlServerAzureSqlDbMISyncLRS { get; } = new TaskType(MigrateSqlServerAzureSqlDbMISyncLRSValue);
        /// <summary> Migrate.SqlServer.SqlDb. </summary>
        public static TaskType MigrateSqlServerSqlDb { get; } = new TaskType(MigrateSqlServerSqlDbValue);
        /// <summary> Migrate.SqlServer.AzureSqlDb.Sync. </summary>
        public static TaskType MigrateSqlServerAzureSqlDbSync { get; } = new TaskType(MigrateSqlServerAzureSqlDbSyncValue);
        /// <summary> Migrate.MySql.AzureDbForMySql.Sync. </summary>
        public static TaskType MigrateMySqlAzureDbForMySqlSync { get; } = new TaskType(MigrateMySqlAzureDbForMySqlSyncValue);
        /// <summary> Migrate.MySql.AzureDbForMySql. </summary>
        public static TaskType MigrateMySqlAzureDbForMySql { get; } = new TaskType(MigrateMySqlAzureDbForMySqlValue);
        /// <summary> Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2. </summary>
        public static TaskType MigratePostgreSqlAzureDbForPostgreSqlSyncV2 { get; } = new TaskType(MigratePostgreSqlAzureDbForPostgreSqlSyncV2Value);
        /// <summary> Migrate.Oracle.AzureDbForPostgreSql.Sync. </summary>
        public static TaskType MigrateOracleAzureDbForPostgreSqlSync { get; } = new TaskType(MigrateOracleAzureDbForPostgreSqlSyncValue);
        /// <summary> ValidateMigrationInput.SqlServer.SqlDb.Sync. </summary>
        public static TaskType ValidateMigrationInputSqlServerSqlDbSync { get; } = new TaskType(ValidateMigrationInputSqlServerSqlDbSyncValue);
        /// <summary> ValidateMigrationInput.SqlServer.AzureSqlDbMI. </summary>
        public static TaskType ValidateMigrationInputSqlServerAzureSqlDbMI { get; } = new TaskType(ValidateMigrationInputSqlServerAzureSqlDbMIValue);
        /// <summary> ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS. </summary>
        public static TaskType ValidateMigrationInputSqlServerAzureSqlDbMISyncLRS { get; } = new TaskType(ValidateMigrationInputSqlServerAzureSqlDbMISyncLRSValue);
        /// <summary> Validate.MongoDb. </summary>
        public static TaskType ValidateMongoDb { get; } = new TaskType(ValidateMongoDbValue);
        /// <summary> Validate.Oracle.AzureDbPostgreSql.Sync. </summary>
        public static TaskType ValidateOracleAzureDbPostgreSqlSync { get; } = new TaskType(ValidateOracleAzureDbPostgreSqlSyncValue);
        /// <summary> GetTDECertificates.Sql. </summary>
        public static TaskType GetTDECertificatesSql { get; } = new TaskType(GetTDECertificatesSqlValue);
        /// <summary> Migrate.Ssis. </summary>
        public static TaskType MigrateSsis { get; } = new TaskType(MigrateSsisValue);
        /// <summary> Service.Check.OCI. </summary>
        public static TaskType ServiceCheckOCI { get; } = new TaskType(ServiceCheckOCIValue);
        /// <summary> Service.Upload.OCI. </summary>
        public static TaskType ServiceUploadOCI { get; } = new TaskType(ServiceUploadOCIValue);
        /// <summary> Service.Install.OCI. </summary>
        public static TaskType ServiceInstallOCI { get; } = new TaskType(ServiceInstallOCIValue);
        /// <summary> MigrateSchemaSqlServerSqlDb. </summary>
        public static TaskType MigrateSchemaSqlServerSqlDb { get; } = new TaskType(MigrateSchemaSqlServerSqlDbValue);
        /// <summary> Determines if two <see cref="TaskType"/> values are the same. </summary>
        public static bool operator ==(TaskType left, TaskType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TaskType"/> values are not the same. </summary>
        public static bool operator !=(TaskType left, TaskType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TaskType"/>. </summary>
        public static implicit operator TaskType(string value) => new TaskType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TaskType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TaskType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
