// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class ConnectToSourceSqlServerTaskInput : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("sourceConnectionInfo");
            writer.WriteObjectValue(SourceConnectionInfo);
            if (Optional.IsDefined(CheckPermissionsGroup))
            {
                writer.WritePropertyName("checkPermissionsGroup");
                writer.WriteStringValue(CheckPermissionsGroup.Value.ToSerialString());
            }
            if (Optional.IsDefined(CollectDatabases))
            {
                writer.WritePropertyName("collectDatabases");
                writer.WriteBooleanValue(CollectDatabases.Value);
            }
            if (Optional.IsDefined(CollectLogins))
            {
                writer.WritePropertyName("collectLogins");
                writer.WriteBooleanValue(CollectLogins.Value);
            }
            if (Optional.IsDefined(CollectAgentJobs))
            {
                writer.WritePropertyName("collectAgentJobs");
                writer.WriteBooleanValue(CollectAgentJobs.Value);
            }
            if (Optional.IsDefined(CollectTdeCertificateInfo))
            {
                writer.WritePropertyName("collectTdeCertificateInfo");
                writer.WriteBooleanValue(CollectTdeCertificateInfo.Value);
            }
            if (Optional.IsDefined(ValidateSsisCatalogOnly))
            {
                writer.WritePropertyName("validateSsisCatalogOnly");
                writer.WriteBooleanValue(ValidateSsisCatalogOnly.Value);
            }
            if (Optional.IsDefined(EncryptedKeyForSecureFields))
            {
                writer.WritePropertyName("encryptedKeyForSecureFields");
                writer.WriteStringValue(EncryptedKeyForSecureFields);
            }
            writer.WriteEndObject();
        }

        internal static ConnectToSourceSqlServerTaskInput DeserializeConnectToSourceSqlServerTaskInput(JsonElement element)
        {
            SqlConnectionInfo sourceConnectionInfo = default;
            Optional<ServerLevelPermissionsGroup> checkPermissionsGroup = default;
            Optional<bool> collectDatabases = default;
            Optional<bool> collectLogins = default;
            Optional<bool> collectAgentJobs = default;
            Optional<bool> collectTdeCertificateInfo = default;
            Optional<bool> validateSsisCatalogOnly = default;
            Optional<string> encryptedKeyForSecureFields = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sourceConnectionInfo"))
                {
                    sourceConnectionInfo = SqlConnectionInfo.DeserializeSqlConnectionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("checkPermissionsGroup"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    checkPermissionsGroup = property.Value.GetString().ToServerLevelPermissionsGroup();
                    continue;
                }
                if (property.NameEquals("collectDatabases"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    collectDatabases = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("collectLogins"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    collectLogins = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("collectAgentJobs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    collectAgentJobs = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("collectTdeCertificateInfo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    collectTdeCertificateInfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("validateSsisCatalogOnly"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    validateSsisCatalogOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("encryptedKeyForSecureFields"))
                {
                    encryptedKeyForSecureFields = property.Value.GetString();
                    continue;
                }
            }
            return new ConnectToSourceSqlServerTaskInput(sourceConnectionInfo, Optional.ToNullable(checkPermissionsGroup), Optional.ToNullable(collectDatabases), Optional.ToNullable(collectLogins), Optional.ToNullable(collectAgentJobs), Optional.ToNullable(collectTdeCertificateInfo), Optional.ToNullable(validateSsisCatalogOnly), encryptedKeyForSecureFields.Value);
        }
    }
}
