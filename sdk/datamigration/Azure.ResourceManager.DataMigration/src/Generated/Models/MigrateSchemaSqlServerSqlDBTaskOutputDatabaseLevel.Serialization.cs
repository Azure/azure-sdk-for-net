// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MigrateSchemaSqlServerSqlDBTaskOutputDatabaseLevel
    {
        internal static MigrateSchemaSqlServerSqlDBTaskOutputDatabaseLevel DeserializeMigrateSchemaSqlServerSqlDBTaskOutputDatabaseLevel(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> databaseName = default;
            Core.Optional<MigrationState> state = default;
            Core.Optional<SchemaMigrationStage> stage = default;
            Core.Optional<DateTimeOffset> startedOn = default;
            Core.Optional<DateTimeOffset> endedOn = default;
            Core.Optional<string> databaseErrorResultPrefix = default;
            Core.Optional<string> schemaErrorResultPrefix = default;
            Core.Optional<long> numberOfSuccessfulOperations = default;
            Core.Optional<long> numberOfFailedOperations = default;
            Core.Optional<string> fileId = default;
            Core.Optional<string> id = default;
            string resultType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("databaseName"u8))
                {
                    databaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new MigrationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("stage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stage = new SchemaMigrationStage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("databaseErrorResultPrefix"u8))
                {
                    databaseErrorResultPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemaErrorResultPrefix"u8))
                {
                    schemaErrorResultPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numberOfSuccessfulOperations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfSuccessfulOperations = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("numberOfFailedOperations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfFailedOperations = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("fileId"u8))
                {
                    fileId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resultType"u8))
                {
                    resultType = property.Value.GetString();
                    continue;
                }
            }
            return new MigrateSchemaSqlServerSqlDBTaskOutputDatabaseLevel(id.Value, resultType, databaseName.Value, Core.Optional.ToNullable(state), Core.Optional.ToNullable(stage), Core.Optional.ToNullable(startedOn), Core.Optional.ToNullable(endedOn), databaseErrorResultPrefix.Value, schemaErrorResultPrefix.Value, Core.Optional.ToNullable(numberOfSuccessfulOperations), Core.Optional.ToNullable(numberOfFailedOperations), fileId.Value);
        }
    }
}
