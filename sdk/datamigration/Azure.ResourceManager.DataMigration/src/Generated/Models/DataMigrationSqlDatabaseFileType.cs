// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> An enumeration of SQL Server database file types. </summary>
    public readonly partial struct DataMigrationSqlDatabaseFileType : IEquatable<DataMigrationSqlDatabaseFileType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationSqlDatabaseFileType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationSqlDatabaseFileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RowsValue = "Rows";
        private const string LogValue = "Log";
        private const string FilestreamValue = "Filestream";
        private const string NotSupportedValue = "NotSupported";
        private const string FulltextValue = "Fulltext";

        /// <summary> Rows. </summary>
        public static DataMigrationSqlDatabaseFileType Rows { get; } = new DataMigrationSqlDatabaseFileType(RowsValue);
        /// <summary> Log. </summary>
        public static DataMigrationSqlDatabaseFileType Log { get; } = new DataMigrationSqlDatabaseFileType(LogValue);
        /// <summary> Filestream. </summary>
        public static DataMigrationSqlDatabaseFileType Filestream { get; } = new DataMigrationSqlDatabaseFileType(FilestreamValue);
        /// <summary> NotSupported. </summary>
        public static DataMigrationSqlDatabaseFileType NotSupported { get; } = new DataMigrationSqlDatabaseFileType(NotSupportedValue);
        /// <summary> Fulltext. </summary>
        public static DataMigrationSqlDatabaseFileType Fulltext { get; } = new DataMigrationSqlDatabaseFileType(FulltextValue);
        /// <summary> Determines if two <see cref="DataMigrationSqlDatabaseFileType"/> values are the same. </summary>
        public static bool operator ==(DataMigrationSqlDatabaseFileType left, DataMigrationSqlDatabaseFileType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationSqlDatabaseFileType"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationSqlDatabaseFileType left, DataMigrationSqlDatabaseFileType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationSqlDatabaseFileType"/>. </summary>
        public static implicit operator DataMigrationSqlDatabaseFileType(string value) => new DataMigrationSqlDatabaseFileType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationSqlDatabaseFileType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationSqlDatabaseFileType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
