// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs. </summary>
    public partial class MigrateSqlServerSqlMIDatabaseInput
    {
        /// <summary> Initializes a new instance of <see cref="MigrateSqlServerSqlMIDatabaseInput"/>. </summary>
        /// <param name="name"> Name of the database. </param>
        /// <param name="restoreDatabaseName"> Name of the database at destination. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="restoreDatabaseName"/> is null. </exception>
        public MigrateSqlServerSqlMIDatabaseInput(string name, string restoreDatabaseName)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(restoreDatabaseName, nameof(restoreDatabaseName));

            Name = name;
            RestoreDatabaseName = restoreDatabaseName;
            BackupFilePaths = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="MigrateSqlServerSqlMIDatabaseInput"/>. </summary>
        /// <param name="name"> Name of the database. </param>
        /// <param name="restoreDatabaseName"> Name of the database at destination. </param>
        /// <param name="backupFileShare"> Backup file share information for backing up this database. </param>
        /// <param name="backupFilePaths"> The list of backup files to be used in case of existing backups. </param>
        /// <param name="id"> id of the database. </param>
        internal MigrateSqlServerSqlMIDatabaseInput(string name, string restoreDatabaseName, FileShare backupFileShare, IList<string> backupFilePaths, string id)
        {
            Name = name;
            RestoreDatabaseName = restoreDatabaseName;
            BackupFileShare = backupFileShare;
            BackupFilePaths = backupFilePaths;
            Id = id;
        }

        /// <summary> Name of the database. </summary>
        public string Name { get; set; }
        /// <summary> Name of the database at destination. </summary>
        public string RestoreDatabaseName { get; set; }
        /// <summary> Backup file share information for backing up this database. </summary>
        public FileShare BackupFileShare { get; set; }
        /// <summary> The list of backup files to be used in case of existing backups. </summary>
        public IList<string> BackupFilePaths { get; }
        /// <summary> id of the database. </summary>
        public string Id { get; set; }
    }
}
