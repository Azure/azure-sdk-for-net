// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class SchemaComparisonValidationResult
    {
        internal static SchemaComparisonValidationResult DeserializeSchemaComparisonValidationResult(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<SchemaComparisonValidationResultType> schemaDifferences = default;
            Optional<ValidationError> validationErrors = default;
            Optional<IReadOnlyDictionary<string, long>> sourceDatabaseObjectCount = default;
            Optional<IReadOnlyDictionary<string, long>> targetDatabaseObjectCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("schemaDifferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    schemaDifferences = SchemaComparisonValidationResultType.DeserializeSchemaComparisonValidationResultType(property.Value);
                    continue;
                }
                if (property.NameEquals("validationErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validationErrors = ValidationError.DeserializeValidationError(property.Value);
                    continue;
                }
                if (property.NameEquals("sourceDatabaseObjectCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, long> dictionary = new Dictionary<string, long>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt64());
                    }
                    sourceDatabaseObjectCount = dictionary;
                    continue;
                }
                if (property.NameEquals("targetDatabaseObjectCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, long> dictionary = new Dictionary<string, long>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt64());
                    }
                    targetDatabaseObjectCount = dictionary;
                    continue;
                }
            }
            return new SchemaComparisonValidationResult(schemaDifferences.Value, validationErrors.Value, Optional.ToDictionary(sourceDatabaseObjectCount), Optional.ToDictionary(targetDatabaseObjectCount));
        }
    }
}
