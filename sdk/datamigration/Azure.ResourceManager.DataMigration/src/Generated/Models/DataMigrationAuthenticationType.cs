// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> An enumeration of possible authentication types when connecting. </summary>
    public readonly partial struct DataMigrationAuthenticationType : IEquatable<DataMigrationAuthenticationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationAuthenticationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string WindowsAuthenticationValue = "WindowsAuthentication";
        private const string SqlAuthenticationValue = "SqlAuthentication";
        private const string ActiveDirectoryIntegratedValue = "ActiveDirectoryIntegrated";
        private const string ActiveDirectoryPasswordValue = "ActiveDirectoryPassword";

        /// <summary> None. </summary>
        public static DataMigrationAuthenticationType None { get; } = new DataMigrationAuthenticationType(NoneValue);
        /// <summary> WindowsAuthentication. </summary>
        public static DataMigrationAuthenticationType WindowsAuthentication { get; } = new DataMigrationAuthenticationType(WindowsAuthenticationValue);
        /// <summary> SqlAuthentication. </summary>
        public static DataMigrationAuthenticationType SqlAuthentication { get; } = new DataMigrationAuthenticationType(SqlAuthenticationValue);
        /// <summary> ActiveDirectoryIntegrated. </summary>
        public static DataMigrationAuthenticationType ActiveDirectoryIntegrated { get; } = new DataMigrationAuthenticationType(ActiveDirectoryIntegratedValue);
        /// <summary> ActiveDirectoryPassword. </summary>
        public static DataMigrationAuthenticationType ActiveDirectoryPassword { get; } = new DataMigrationAuthenticationType(ActiveDirectoryPasswordValue);
        /// <summary> Determines if two <see cref="DataMigrationAuthenticationType"/> values are the same. </summary>
        public static bool operator ==(DataMigrationAuthenticationType left, DataMigrationAuthenticationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationAuthenticationType"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationAuthenticationType left, DataMigrationAuthenticationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationAuthenticationType"/>. </summary>
        public static implicit operator DataMigrationAuthenticationType(string value) => new DataMigrationAuthenticationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationAuthenticationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationAuthenticationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
