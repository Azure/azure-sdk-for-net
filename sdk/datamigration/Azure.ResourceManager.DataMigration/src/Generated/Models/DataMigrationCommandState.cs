// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> The state of the command. This is ignored if submitted. </summary>
    public readonly partial struct DataMigrationCommandState : IEquatable<DataMigrationCommandState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationCommandState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationCommandState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string AcceptedValue = "Accepted";
        private const string RunningValue = "Running";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";

        /// <summary> Unknown. </summary>
        public static DataMigrationCommandState Unknown { get; } = new DataMigrationCommandState(UnknownValue);
        /// <summary> Accepted. </summary>
        public static DataMigrationCommandState Accepted { get; } = new DataMigrationCommandState(AcceptedValue);
        /// <summary> Running. </summary>
        public static DataMigrationCommandState Running { get; } = new DataMigrationCommandState(RunningValue);
        /// <summary> Succeeded. </summary>
        public static DataMigrationCommandState Succeeded { get; } = new DataMigrationCommandState(SucceededValue);
        /// <summary> Failed. </summary>
        public static DataMigrationCommandState Failed { get; } = new DataMigrationCommandState(FailedValue);
        /// <summary> Determines if two <see cref="DataMigrationCommandState"/> values are the same. </summary>
        public static bool operator ==(DataMigrationCommandState left, DataMigrationCommandState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationCommandState"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationCommandState left, DataMigrationCommandState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationCommandState"/>. </summary>
        public static implicit operator DataMigrationCommandState(string value) => new DataMigrationCommandState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationCommandState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationCommandState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
