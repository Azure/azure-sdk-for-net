// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Source platform of the project. </summary>
    public readonly partial struct DataMigrationProjectSourcePlatform : IEquatable<DataMigrationProjectSourcePlatform>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationProjectSourcePlatform"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationProjectSourcePlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SqlValue = "SQL";
        private const string MySqlValue = "MySQL";
        private const string PostgreSqlValue = "PostgreSql";
        private const string MongoDBValue = "MongoDb";
        private const string UnknownValue = "Unknown";

        /// <summary> SQL. </summary>
        public static DataMigrationProjectSourcePlatform Sql { get; } = new DataMigrationProjectSourcePlatform(SqlValue);
        /// <summary> MySQL. </summary>
        public static DataMigrationProjectSourcePlatform MySql { get; } = new DataMigrationProjectSourcePlatform(MySqlValue);
        /// <summary> PostgreSql. </summary>
        public static DataMigrationProjectSourcePlatform PostgreSql { get; } = new DataMigrationProjectSourcePlatform(PostgreSqlValue);
        /// <summary> MongoDb. </summary>
        public static DataMigrationProjectSourcePlatform MongoDB { get; } = new DataMigrationProjectSourcePlatform(MongoDBValue);
        /// <summary> Unknown. </summary>
        public static DataMigrationProjectSourcePlatform Unknown { get; } = new DataMigrationProjectSourcePlatform(UnknownValue);
        /// <summary> Determines if two <see cref="DataMigrationProjectSourcePlatform"/> values are the same. </summary>
        public static bool operator ==(DataMigrationProjectSourcePlatform left, DataMigrationProjectSourcePlatform right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationProjectSourcePlatform"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationProjectSourcePlatform left, DataMigrationProjectSourcePlatform right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationProjectSourcePlatform"/>. </summary>
        public static implicit operator DataMigrationProjectSourcePlatform(string value) => new DataMigrationProjectSourcePlatform(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationProjectSourcePlatform other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationProjectSourcePlatform other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
