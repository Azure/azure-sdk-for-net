// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> Current state of migration. </summary>
    public readonly partial struct DataMigrationState : IEquatable<DataMigrationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string InProgressValue = "InProgress";
        private const string FailedValue = "Failed";
        private const string WarningValue = "Warning";
        private const string CompletedValue = "Completed";
        private const string SkippedValue = "Skipped";
        private const string StoppedValue = "Stopped";

        /// <summary> None. </summary>
        public static DataMigrationState None { get; } = new DataMigrationState(NoneValue);
        /// <summary> InProgress. </summary>
        public static DataMigrationState InProgress { get; } = new DataMigrationState(InProgressValue);
        /// <summary> Failed. </summary>
        public static DataMigrationState Failed { get; } = new DataMigrationState(FailedValue);
        /// <summary> Warning. </summary>
        public static DataMigrationState Warning { get; } = new DataMigrationState(WarningValue);
        /// <summary> Completed. </summary>
        public static DataMigrationState Completed { get; } = new DataMigrationState(CompletedValue);
        /// <summary> Skipped. </summary>
        public static DataMigrationState Skipped { get; } = new DataMigrationState(SkippedValue);
        /// <summary> Stopped. </summary>
        public static DataMigrationState Stopped { get; } = new DataMigrationState(StoppedValue);
        /// <summary> Determines if two <see cref="DataMigrationState"/> values are the same. </summary>
        public static bool operator ==(DataMigrationState left, DataMigrationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationState"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationState left, DataMigrationState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationState"/>. </summary>
        public static implicit operator DataMigrationState(string value) => new DataMigrationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
