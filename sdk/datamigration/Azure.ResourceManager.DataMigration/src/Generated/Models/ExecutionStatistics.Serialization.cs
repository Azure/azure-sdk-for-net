// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class ExecutionStatistics
    {
        internal static ExecutionStatistics DeserializeExecutionStatistics(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<long> executionCount = default;
            Optional<float> cpuTimeMs = default;
            Optional<float> elapsedTimeMs = default;
            Optional<IReadOnlyDictionary<string, WaitStatistics>> waitStats = default;
            Optional<bool> hasErrors = default;
            Optional<IReadOnlyList<string>> sqlErrors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("executionCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    executionCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("cpuTimeMs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuTimeMs = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("elapsedTimeMs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    elapsedTimeMs = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("waitStats"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, WaitStatistics> dictionary = new Dictionary<string, WaitStatistics>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, WaitStatistics.DeserializeWaitStatistics(property0.Value));
                    }
                    waitStats = dictionary;
                    continue;
                }
                if (property.NameEquals("hasErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasErrors = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sqlErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sqlErrors = array;
                    continue;
                }
            }
            return new ExecutionStatistics(Optional.ToNullable(executionCount), Optional.ToNullable(cpuTimeMs), Optional.ToNullable(elapsedTimeMs), Optional.ToDictionary(waitStats), Optional.ToNullable(hasErrors), Optional.ToList(sqlErrors));
        }
    }
}
