// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> An enumeration of Status of the log backup file. </summary>
    public readonly partial struct DataMigrationBackupFileStatus : IEquatable<DataMigrationBackupFileStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationBackupFileStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationBackupFileStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ArrivedValue = "Arrived";
        private const string QueuedValue = "Queued";
        private const string UploadingValue = "Uploading";
        private const string UploadedValue = "Uploaded";
        private const string RestoringValue = "Restoring";
        private const string RestoredValue = "Restored";
        private const string CancelledValue = "Cancelled";

        /// <summary> Arrived. </summary>
        public static DataMigrationBackupFileStatus Arrived { get; } = new DataMigrationBackupFileStatus(ArrivedValue);
        /// <summary> Queued. </summary>
        public static DataMigrationBackupFileStatus Queued { get; } = new DataMigrationBackupFileStatus(QueuedValue);
        /// <summary> Uploading. </summary>
        public static DataMigrationBackupFileStatus Uploading { get; } = new DataMigrationBackupFileStatus(UploadingValue);
        /// <summary> Uploaded. </summary>
        public static DataMigrationBackupFileStatus Uploaded { get; } = new DataMigrationBackupFileStatus(UploadedValue);
        /// <summary> Restoring. </summary>
        public static DataMigrationBackupFileStatus Restoring { get; } = new DataMigrationBackupFileStatus(RestoringValue);
        /// <summary> Restored. </summary>
        public static DataMigrationBackupFileStatus Restored { get; } = new DataMigrationBackupFileStatus(RestoredValue);
        /// <summary> Cancelled. </summary>
        public static DataMigrationBackupFileStatus Cancelled { get; } = new DataMigrationBackupFileStatus(CancelledValue);
        /// <summary> Determines if two <see cref="DataMigrationBackupFileStatus"/> values are the same. </summary>
        public static bool operator ==(DataMigrationBackupFileStatus left, DataMigrationBackupFileStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationBackupFileStatus"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationBackupFileStatus left, DataMigrationBackupFileStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationBackupFileStatus"/>. </summary>
        public static implicit operator DataMigrationBackupFileStatus(string value) => new DataMigrationBackupFileStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationBackupFileStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationBackupFileStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
