// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> An enumeration of SQL Server database compatibility levels. </summary>
    public readonly partial struct DataMigrationDatabaseCompatLevel : IEquatable<DataMigrationDatabaseCompatLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataMigrationDatabaseCompatLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataMigrationDatabaseCompatLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CompatLevel80Value = "CompatLevel80";
        private const string CompatLevel90Value = "CompatLevel90";
        private const string CompatLevel100Value = "CompatLevel100";
        private const string CompatLevel110Value = "CompatLevel110";
        private const string CompatLevel120Value = "CompatLevel120";
        private const string CompatLevel130Value = "CompatLevel130";
        private const string CompatLevel140Value = "CompatLevel140";

        /// <summary> CompatLevel80. </summary>
        public static DataMigrationDatabaseCompatLevel CompatLevel80 { get; } = new DataMigrationDatabaseCompatLevel(CompatLevel80Value);
        /// <summary> CompatLevel90. </summary>
        public static DataMigrationDatabaseCompatLevel CompatLevel90 { get; } = new DataMigrationDatabaseCompatLevel(CompatLevel90Value);
        /// <summary> CompatLevel100. </summary>
        public static DataMigrationDatabaseCompatLevel CompatLevel100 { get; } = new DataMigrationDatabaseCompatLevel(CompatLevel100Value);
        /// <summary> CompatLevel110. </summary>
        public static DataMigrationDatabaseCompatLevel CompatLevel110 { get; } = new DataMigrationDatabaseCompatLevel(CompatLevel110Value);
        /// <summary> CompatLevel120. </summary>
        public static DataMigrationDatabaseCompatLevel CompatLevel120 { get; } = new DataMigrationDatabaseCompatLevel(CompatLevel120Value);
        /// <summary> CompatLevel130. </summary>
        public static DataMigrationDatabaseCompatLevel CompatLevel130 { get; } = new DataMigrationDatabaseCompatLevel(CompatLevel130Value);
        /// <summary> CompatLevel140. </summary>
        public static DataMigrationDatabaseCompatLevel CompatLevel140 { get; } = new DataMigrationDatabaseCompatLevel(CompatLevel140Value);
        /// <summary> Determines if two <see cref="DataMigrationDatabaseCompatLevel"/> values are the same. </summary>
        public static bool operator ==(DataMigrationDatabaseCompatLevel left, DataMigrationDatabaseCompatLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataMigrationDatabaseCompatLevel"/> values are not the same. </summary>
        public static bool operator !=(DataMigrationDatabaseCompatLevel left, DataMigrationDatabaseCompatLevel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataMigrationDatabaseCompatLevel"/>. </summary>
        public static implicit operator DataMigrationDatabaseCompatLevel(string value) => new DataMigrationDatabaseCompatLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataMigrationDatabaseCompatLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataMigrationDatabaseCompatLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
