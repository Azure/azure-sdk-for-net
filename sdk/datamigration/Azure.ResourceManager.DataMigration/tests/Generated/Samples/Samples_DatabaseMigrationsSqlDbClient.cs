// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SqlMigrationManagementClient.Samples
{
    public partial class Samples_DatabaseMigrationsSqlDbClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDatabaseMigrationsSqlDb_ShortVersion()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            Response response = client.GetDatabaseMigrationsSqlDb("<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDatabaseMigrationsSqlDb_ShortVersion_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            Response response = await client.GetDatabaseMigrationsSqlDbAsync("<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDatabaseMigrationsSqlDb_AllParameters()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            Response response = client.GetDatabaseMigrationsSqlDb("<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<expand>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("migrationState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("sqlDataCopyErrors")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("tableName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("parallelCopyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("usedParallelCopies").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataWritten").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsCopied").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyStart").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyThroughput").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("offlineConfiguration").GetProperty("offline").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tableList")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceDatabaseName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceServerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetDatabaseCollation").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationService").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationOperationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningError").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDatabaseMigrationsSqlDb_AllParameters_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            Response response = await client.GetDatabaseMigrationsSqlDbAsync("<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<expand>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("migrationState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("sqlDataCopyErrors")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("tableName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("parallelCopyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("usedParallelCopies").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataWritten").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsCopied").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyStart").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyThroughput").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("offlineConfiguration").GetProperty("offline").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tableList")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceDatabaseName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceServerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetDatabaseCollation").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationService").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationOperationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningError").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_ShortVersion()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_ShortVersion_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    targetSqlConnection = new
                    {
                        dataSource = "<dataSource>",
                        authentication = "<authentication>",
                        userName = "<userName>",
                        password = "<password>",
                        encryptConnection = true,
                        trustServerCertificate = true,
                    },
                    tableList = new object[]
            {
"<tableList>"
            },
                    sourceDatabaseName = "<sourceDatabaseName>",
                    targetDatabaseCollation = "<targetDatabaseCollation>",
                    kind = "SqlDb",
                    scope = "<scope>",
                    migrationService = "<migrationService>",
                    migrationOperationId = "<migrationOperationId>",
                    provisioningError = "<provisioningError>",
                },
            });
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("migrationState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("sqlDataCopyErrors")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("tableName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("parallelCopyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("usedParallelCopies").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataWritten").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsCopied").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyStart").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyThroughput").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("offlineConfiguration").GetProperty("offline").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tableList")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceDatabaseName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceServerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetDatabaseCollation").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationService").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationOperationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningError").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    targetSqlConnection = new
                    {
                        dataSource = "<dataSource>",
                        authentication = "<authentication>",
                        userName = "<userName>",
                        password = "<password>",
                        encryptConnection = true,
                        trustServerCertificate = true,
                    },
                    tableList = new object[]
            {
"<tableList>"
            },
                    sourceDatabaseName = "<sourceDatabaseName>",
                    targetDatabaseCollation = "<targetDatabaseCollation>",
                    kind = "SqlDb",
                    scope = "<scope>",
                    migrationService = "<migrationService>",
                    migrationOperationId = "<migrationOperationId>",
                    provisioningError = "<provisioningError>",
                },
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("migrationState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("sqlDataCopyErrors")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("tableName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("parallelCopyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("usedParallelCopies").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataWritten").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsCopied").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyStart").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyThroughput").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("offlineConfiguration").GetProperty("offline").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tableList")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceDatabaseName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceServerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetDatabaseCollation").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationService").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationOperationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningError").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", force: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", force: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Cancel_ShortVersion()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new object());
            Operation operation = client.Cancel(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Cancel_ShortVersion_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new object());
            Operation operation = await client.CancelAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Cancel_AllParameters()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new
            {
                migrationOperationId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Operation operation = client.Cancel(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Cancel_AllParameters_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new
            {
                migrationOperationId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Operation operation = await client.CancelAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Retry_ShortVersion()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.Retry(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Retry_ShortVersion_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.RetryAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Retry_AllParameters()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new
            {
                migrationOperationId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Operation<BinaryData> operation = client.Retry(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("migrationState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("sqlDataCopyErrors")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("tableName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("parallelCopyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("usedParallelCopies").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataWritten").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsCopied").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyStart").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyThroughput").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("offlineConfiguration").GetProperty("offline").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tableList")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceDatabaseName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceServerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetDatabaseCollation").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationService").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationOperationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningError").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Retry_AllParameters_Async()
        {
            DatabaseMigrationsSqlDbClient client = new DatabaseMigrationsSqlDbClient("<SubscriptionId>");

            using RequestContent content = RequestContent.Create(new
            {
                migrationOperationId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Operation<BinaryData> operation = await client.RetryAsync(WaitUntil.Completed, "<resourceGroupName>", "<sqlDbInstanceName>", "<targetDbName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("migrationState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("sqlDataCopyErrors")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("tableName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("parallelCopyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("usedParallelCopies").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("dataWritten").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsRead").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("rowsCopied").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyStart").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyThroughput").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatusDetails").GetProperty("listOfCopyProgressDetails")[0].GetProperty("copyDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("offlineConfiguration").GetProperty("offline").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tableList")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("authentication").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("userName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("encryptConnection").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSqlConnection").GetProperty("trustServerCertificate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceDatabaseName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceServerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("targetDatabaseCollation").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationService").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationOperationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("migrationFailureError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningError").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        }
    }
}
