// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Database Migration Service resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DataMigrationService : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the DataMigrationService class.
        /// </summary>
        public DataMigrationService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataMigrationService class.
        /// </summary>
        /// <param name="location">Resource location.</param>
        /// <param name="virtualSubnetId">The ID of the
        /// Microsoft.Network/virtualNetworks/subnets resource to which the
        /// service should be joined</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="etag">HTTP strong entity tag value. Ignored if
        /// submitted</param>
        /// <param name="kind">The resource kind. Only 'vm' (the default) is
        /// supported.</param>
        /// <param name="provisioningState">The resource's provisioning state.
        /// Possible values include: 'Accepted', 'Deleting', 'Deploying',
        /// 'Stopped', 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop',
        /// 'Succeeded', 'Failed'</param>
        /// <param name="publicKey">The public key of the service, used to
        /// encrypt secrets sent to the service</param>
        /// <param name="virtualNicId">The ID of the
        /// Microsoft.Network/networkInterfaces resource which the service
        /// have</param>
        /// <param name="sku">Service SKU</param>
        public DataMigrationService(string location, string virtualSubnetId, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), string kind = default(string), string provisioningState = default(string), string publicKey = default(string), string virtualNicId = default(string), ServiceSku sku = default(ServiceSku))
            : base(location, id, name, type, tags)
        {
            Etag = etag;
            Kind = kind;
            ProvisioningState = provisioningState;
            PublicKey = publicKey;
            VirtualSubnetId = virtualSubnetId;
            VirtualNicId = virtualNicId;
            Sku = sku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets HTTP strong entity tag value. Ignored if submitted
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets the resource kind. Only 'vm' (the default) is
        /// supported.
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets the resource's provisioning state. Possible values include:
        /// 'Accepted', 'Deleting', 'Deploying', 'Stopped', 'Stopping',
        /// 'Starting', 'FailedToStart', 'FailedToStop', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the public key of the service, used to encrypt secrets
        /// sent to the service
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicKey")]
        public string PublicKey { get; set; }

        /// <summary>
        /// Gets or sets the ID of the
        /// Microsoft.Network/virtualNetworks/subnets resource to which the
        /// service should be joined
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualSubnetId")]
        public string VirtualSubnetId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the Microsoft.Network/networkInterfaces
        /// resource which the service have
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualNicId")]
        public string VirtualNicId { get; set; }

        /// <summary>
        /// Gets or sets service SKU
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public ServiceSku Sku { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (VirtualSubnetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VirtualSubnetId");
            }
        }
    }
}
