// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    [Newtonsoft.Json.JsonObject("MigrationLevelOutput")]
    public partial class MigrateSqlServerSqlMISyncTaskOutputMigrationLevel : MigrateSqlServerSqlMISyncTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlMISyncTaskOutputMigrationLevel class.
        /// </summary>
        public MigrateSqlServerSqlMISyncTaskOutputMigrationLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlMISyncTaskOutputMigrationLevel class.
        /// </summary>
        /// <param name="id">Result identifier</param>
        /// <param name="databaseCount">Count of databases</param>
        /// <param name="state">Current state of migration. Possible values
        /// include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
        /// 'Skipped', 'Stopped'</param>
        /// <param name="startedOn">Migration start time</param>
        /// <param name="endedOn">Migration end time</param>
        /// <param name="sourceServerName">Source server name</param>
        /// <param name="sourceServerVersion">Source server version</param>
        /// <param name="sourceServerBrandVersion">Source server brand
        /// version</param>
        /// <param name="targetServerName">Target server name</param>
        /// <param name="targetServerVersion">Target server version</param>
        /// <param name="targetServerBrandVersion">Target server brand
        /// version</param>
        /// <param name="databaseErrorCount">Number of database level
        /// errors</param>
        public MigrateSqlServerSqlMISyncTaskOutputMigrationLevel(string id = default(string), int? databaseCount = default(int?), string state = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string sourceServerName = default(string), string sourceServerVersion = default(string), string sourceServerBrandVersion = default(string), string targetServerName = default(string), string targetServerVersion = default(string), string targetServerBrandVersion = default(string), int? databaseErrorCount = default(int?))
            : base(id)
        {
            DatabaseCount = databaseCount;
            State = state;
            StartedOn = startedOn;
            EndedOn = endedOn;
            SourceServerName = sourceServerName;
            SourceServerVersion = sourceServerVersion;
            SourceServerBrandVersion = sourceServerBrandVersion;
            TargetServerName = targetServerName;
            TargetServerVersion = targetServerVersion;
            TargetServerBrandVersion = targetServerBrandVersion;
            DatabaseErrorCount = databaseErrorCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets count of databases
        /// </summary>
        [JsonProperty(PropertyName = "databaseCount")]
        public int? DatabaseCount { get; private set; }

        /// <summary>
        /// Gets current state of migration. Possible values include: 'None',
        /// 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
        /// 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn { get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn { get; private set; }

        /// <summary>
        /// Gets source server name
        /// </summary>
        [JsonProperty(PropertyName = "sourceServerName")]
        public string SourceServerName { get; private set; }

        /// <summary>
        /// Gets source server version
        /// </summary>
        [JsonProperty(PropertyName = "sourceServerVersion")]
        public string SourceServerVersion { get; private set; }

        /// <summary>
        /// Gets source server brand version
        /// </summary>
        [JsonProperty(PropertyName = "sourceServerBrandVersion")]
        public string SourceServerBrandVersion { get; private set; }

        /// <summary>
        /// Gets target server name
        /// </summary>
        [JsonProperty(PropertyName = "targetServerName")]
        public string TargetServerName { get; private set; }

        /// <summary>
        /// Gets target server version
        /// </summary>
        [JsonProperty(PropertyName = "targetServerVersion")]
        public string TargetServerVersion { get; private set; }

        /// <summary>
        /// Gets target server brand version
        /// </summary>
        [JsonProperty(PropertyName = "targetServerBrandVersion")]
        public string TargetServerBrandVersion { get; private set; }

        /// <summary>
        /// Gets number of database level errors
        /// </summary>
        [JsonProperty(PropertyName = "databaseErrorCount")]
        public int? DatabaseErrorCount { get; private set; }

    }
}
