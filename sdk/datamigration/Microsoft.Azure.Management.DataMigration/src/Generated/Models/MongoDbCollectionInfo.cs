// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes a supported collection within a MongoDB database
    /// </summary>
    public partial class MongoDbCollectionInfo : MongoDbObjectInfo
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbCollectionInfo class.
        /// </summary>
        public MongoDbCollectionInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbCollectionInfo class.
        /// </summary>
        /// <param name="averageDocumentSize">The average document size, or -1
        /// if the average size is unknown</param>
        /// <param name="dataSize">The estimated total data size, in bytes, or
        /// -1 if the size is unknown.</param>
        /// <param name="documentCount">The estimated total number of
        /// documents, or -1 if the document count is unknown</param>
        /// <param name="name">The unqualified name of the database or
        /// collection</param>
        /// <param name="qualifiedName">The qualified name of the database or
        /// collection. For a collection, this is the database-qualified
        /// name.</param>
        /// <param name="databaseName">The name of the database containing the
        /// collection</param>
        /// <param name="isCapped">Whether the collection is a capped
        /// collection (i.e. whether it has a fixed size and acts like a
        /// circular buffer)</param>
        /// <param name="isSystemCollection">Whether the collection is system
        /// collection</param>
        /// <param name="isView">Whether the collection is a view of another
        /// collection</param>
        /// <param name="supportsSharding">Whether the database has sharding
        /// enabled. Note that the migration task will enable sharding on the
        /// target if necessary.</param>
        /// <param name="shardKey">The shard key on the collection, or null if
        /// the collection is not sharded</param>
        /// <param name="viewOf">The name of the collection that this is a view
        /// of, if IsView is true</param>
        public MongoDbCollectionInfo(long averageDocumentSize, long dataSize, long documentCount, string name, string qualifiedName, string databaseName, bool isCapped, bool isSystemCollection, bool isView, bool supportsSharding, MongoDbShardKeyInfo shardKey = default(MongoDbShardKeyInfo), string viewOf = default(string))
            : base(averageDocumentSize, dataSize, documentCount, name, qualifiedName)
        {
            DatabaseName = databaseName;
            IsCapped = isCapped;
            IsSystemCollection = isSystemCollection;
            IsView = isView;
            ShardKey = shardKey;
            SupportsSharding = supportsSharding;
            ViewOf = viewOf;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the database containing the collection
        /// </summary>
        [JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets whether the collection is a capped collection (i.e.
        /// whether it has a fixed size and acts like a circular buffer)
        /// </summary>
        [JsonProperty(PropertyName = "isCapped")]
        public bool IsCapped { get; set; }

        /// <summary>
        /// Gets or sets whether the collection is system collection
        /// </summary>
        [JsonProperty(PropertyName = "isSystemCollection")]
        public bool IsSystemCollection { get; set; }

        /// <summary>
        /// Gets or sets whether the collection is a view of another collection
        /// </summary>
        [JsonProperty(PropertyName = "isView")]
        public bool IsView { get; set; }

        /// <summary>
        /// Gets or sets the shard key on the collection, or null if the
        /// collection is not sharded
        /// </summary>
        [JsonProperty(PropertyName = "shardKey")]
        public MongoDbShardKeyInfo ShardKey { get; set; }

        /// <summary>
        /// Gets or sets whether the database has sharding enabled. Note that
        /// the migration task will enable sharding on the target if necessary.
        /// </summary>
        [JsonProperty(PropertyName = "supportsSharding")]
        public bool SupportsSharding { get; set; }

        /// <summary>
        /// Gets or sets the name of the collection that this is a view of, if
        /// IsView is true
        /// </summary>
        [JsonProperty(PropertyName = "viewOf")]
        public string ViewOf { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (DatabaseName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatabaseName");
            }
            if (ShardKey != null)
            {
                ShardKey.Validate();
            }
        }
    }
}
