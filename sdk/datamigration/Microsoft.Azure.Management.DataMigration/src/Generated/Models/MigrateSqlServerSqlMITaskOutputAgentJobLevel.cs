// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Newtonsoft.Json.JsonObject("AgentJobLevelOutput")]
    public partial class MigrateSqlServerSqlMITaskOutputAgentJobLevel : MigrateSqlServerSqlMITaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlMITaskOutputAgentJobLevel class.
        /// </summary>
        public MigrateSqlServerSqlMITaskOutputAgentJobLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlMITaskOutputAgentJobLevel class.
        /// </summary>
        /// <param name="id">Result identifier</param>
        /// <param name="name">Agent Job name.</param>
        /// <param name="isEnabled">The state of the original Agent
        /// Job.</param>
        /// <param name="state">Current state of migration. Possible values
        /// include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
        /// 'Skipped', 'Stopped'</param>
        /// <param name="startedOn">Migration start time</param>
        /// <param name="endedOn">Migration end time</param>
        /// <param name="message">Migration progress message</param>
        /// <param name="exceptionsAndWarnings">Migration errors and warnings
        /// per job</param>
        public MigrateSqlServerSqlMITaskOutputAgentJobLevel(string id = default(string), string name = default(string), bool? isEnabled = default(bool?), string state = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string message = default(string), IList<ReportableException> exceptionsAndWarnings = default(IList<ReportableException>))
            : base(id)
        {
            Name = name;
            IsEnabled = isEnabled;
            State = state;
            StartedOn = startedOn;
            EndedOn = endedOn;
            Message = message;
            ExceptionsAndWarnings = exceptionsAndWarnings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets agent Job name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the state of the original Agent Job.
        /// </summary>
        [JsonProperty(PropertyName = "isEnabled")]
        public bool? IsEnabled { get; private set; }

        /// <summary>
        /// Gets current state of migration. Possible values include: 'None',
        /// 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
        /// 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn { get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn { get; private set; }

        /// <summary>
        /// Gets migration progress message
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; private set; }

        /// <summary>
        /// Gets migration errors and warnings per job
        /// </summary>
        [JsonProperty(PropertyName = "exceptionsAndWarnings")]
        public IList<ReportableException> ExceptionsAndWarnings { get; private set; }

    }
}
