// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Basic summary of a data item migration
    /// </summary>
    public partial class DataItemMigrationSummaryResult
    {
        /// <summary>
        /// Initializes a new instance of the DataItemMigrationSummaryResult
        /// class.
        /// </summary>
        public DataItemMigrationSummaryResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataItemMigrationSummaryResult
        /// class.
        /// </summary>
        /// <param name="name">Name of the item</param>
        /// <param name="startedOn">Migration start time</param>
        /// <param name="endedOn">Migration end time</param>
        /// <param name="state">Current state of migration. Possible values
        /// include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
        /// 'Skipped', 'Stopped'</param>
        /// <param name="statusMessage">Status message</param>
        /// <param name="itemsCount">Number of items</param>
        /// <param name="itemsCompletedCount">Number of successfully completed
        /// items</param>
        /// <param name="errorPrefix">Wildcard string prefix to use for
        /// querying all errors of the item</param>
        /// <param name="resultPrefix">Wildcard string prefix to use for
        /// querying all sub-tem results of the item</param>
        public DataItemMigrationSummaryResult(string name = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string state = default(string), string statusMessage = default(string), long? itemsCount = default(long?), long? itemsCompletedCount = default(long?), string errorPrefix = default(string), string resultPrefix = default(string))
        {
            Name = name;
            StartedOn = startedOn;
            EndedOn = endedOn;
            State = state;
            StatusMessage = statusMessage;
            ItemsCount = itemsCount;
            ItemsCompletedCount = itemsCompletedCount;
            ErrorPrefix = errorPrefix;
            ResultPrefix = resultPrefix;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the item
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn { get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn { get; private set; }

        /// <summary>
        /// Gets current state of migration. Possible values include: 'None',
        /// 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
        /// 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets status message
        /// </summary>
        [JsonProperty(PropertyName = "statusMessage")]
        public string StatusMessage { get; private set; }

        /// <summary>
        /// Gets number of items
        /// </summary>
        [JsonProperty(PropertyName = "itemsCount")]
        public long? ItemsCount { get; private set; }

        /// <summary>
        /// Gets number of successfully completed items
        /// </summary>
        [JsonProperty(PropertyName = "itemsCompletedCount")]
        public long? ItemsCompletedCount { get; private set; }

        /// <summary>
        /// Gets wildcard string prefix to use for querying all errors of the
        /// item
        /// </summary>
        [JsonProperty(PropertyName = "errorPrefix")]
        public string ErrorPrefix { get; private set; }

        /// <summary>
        /// Gets wildcard string prefix to use for querying all sub-tem results
        /// of the item
        /// </summary>
        [JsonProperty(PropertyName = "resultPrefix")]
        public string ResultPrefix { get; private set; }

    }
}
