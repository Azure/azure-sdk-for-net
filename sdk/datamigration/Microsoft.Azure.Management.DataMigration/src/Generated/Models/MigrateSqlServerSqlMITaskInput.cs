// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Input for task that migrates SQL Server databases to Azure SQL Database
    /// Managed Instance.
    /// </summary>
    public partial class MigrateSqlServerSqlMITaskInput : SqlMigrationTaskInput
    {
        /// <summary>
        /// Initializes a new instance of the MigrateSqlServerSqlMITaskInput
        /// class.
        /// </summary>
        public MigrateSqlServerSqlMITaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigrateSqlServerSqlMITaskInput
        /// class.
        /// </summary>
        /// <param name="sourceConnectionInfo">Information for connecting to
        /// source</param>
        /// <param name="targetConnectionInfo">Information for connecting to
        /// target</param>
        /// <param name="selectedDatabases">Databases to migrate</param>
        /// <param name="backupBlobShare">SAS URI of Azure Storage Account
        /// Container to be used for storing backup files.</param>
        /// <param name="selectedLogins">Logins to migrate.</param>
        /// <param name="selectedAgentJobs">Agent Jobs to migrate.</param>
        /// <param name="backupFileShare">Backup file share information for all
        /// selected databases.</param>
        /// <param name="backupMode">Backup Mode to specify whether to use
        /// existing backup or create new backup. If using existing backups,
        /// backup file paths are required to be provided in selectedDatabases.
        /// Possible values include: 'CreateBackup', 'ExistingBackup'</param>
        /// <param name="aadDomainName">Azure Active Directory domain name in
        /// the format of 'contoso.com' for federated Azure AD or
        /// 'contoso.onmicrosoft.com' for managed domain, required if and only
        /// if Windows logins are selected</param>
        public MigrateSqlServerSqlMITaskInput(SqlConnectionInfo sourceConnectionInfo, SqlConnectionInfo targetConnectionInfo, IList<MigrateSqlServerSqlMIDatabaseInput> selectedDatabases, BlobShare backupBlobShare, IList<string> selectedLogins = default(IList<string>), IList<string> selectedAgentJobs = default(IList<string>), FileShare backupFileShare = default(FileShare), string backupMode = default(string), string aadDomainName = default(string))
            : base(sourceConnectionInfo, targetConnectionInfo)
        {
            SelectedDatabases = selectedDatabases;
            SelectedLogins = selectedLogins;
            SelectedAgentJobs = selectedAgentJobs;
            BackupFileShare = backupFileShare;
            BackupBlobShare = backupBlobShare;
            BackupMode = backupMode;
            AadDomainName = aadDomainName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets databases to migrate
        /// </summary>
        [JsonProperty(PropertyName = "selectedDatabases")]
        public IList<MigrateSqlServerSqlMIDatabaseInput> SelectedDatabases { get; set; }

        /// <summary>
        /// Gets or sets logins to migrate.
        /// </summary>
        [JsonProperty(PropertyName = "selectedLogins")]
        public IList<string> SelectedLogins { get; set; }

        /// <summary>
        /// Gets or sets agent Jobs to migrate.
        /// </summary>
        [JsonProperty(PropertyName = "selectedAgentJobs")]
        public IList<string> SelectedAgentJobs { get; set; }

        /// <summary>
        /// Gets or sets backup file share information for all selected
        /// databases.
        /// </summary>
        [JsonProperty(PropertyName = "backupFileShare")]
        public FileShare BackupFileShare { get; set; }

        /// <summary>
        /// Gets or sets SAS URI of Azure Storage Account Container to be used
        /// for storing backup files.
        /// </summary>
        [JsonProperty(PropertyName = "backupBlobShare")]
        public BlobShare BackupBlobShare { get; set; }

        /// <summary>
        /// Gets or sets backup Mode to specify whether to use existing backup
        /// or create new backup. If using existing backups, backup file paths
        /// are required to be provided in selectedDatabases. Possible values
        /// include: 'CreateBackup', 'ExistingBackup'
        /// </summary>
        [JsonProperty(PropertyName = "backupMode")]
        public string BackupMode { get; set; }

        /// <summary>
        /// Gets or sets azure Active Directory domain name in the format of
        /// 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com'
        /// for managed domain, required if and only if Windows logins are
        /// selected
        /// </summary>
        [JsonProperty(PropertyName = "aadDomainName")]
        public string AadDomainName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (SelectedDatabases == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedDatabases");
            }
            if (BackupBlobShare == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BackupBlobShare");
            }
            if (SelectedDatabases != null)
            {
                foreach (var element in SelectedDatabases)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BackupFileShare != null)
            {
                BackupFileShare.Validate();
            }
            if (BackupBlobShare != null)
            {
                BackupBlobShare.Validate();
            }
        }
    }
}
