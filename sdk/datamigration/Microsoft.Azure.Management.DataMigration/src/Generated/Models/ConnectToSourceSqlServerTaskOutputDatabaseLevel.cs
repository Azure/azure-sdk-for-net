// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Database level output for the task that validates connection to SQL
    /// Server and also validates source server requirements
    /// </summary>
    [Newtonsoft.Json.JsonObject("DatabaseLevelOutput")]
    public partial class ConnectToSourceSqlServerTaskOutputDatabaseLevel : ConnectToSourceSqlServerTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ConnectToSourceSqlServerTaskOutputDatabaseLevel class.
        /// </summary>
        public ConnectToSourceSqlServerTaskOutputDatabaseLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ConnectToSourceSqlServerTaskOutputDatabaseLevel class.
        /// </summary>
        /// <param name="id">Result identifier</param>
        /// <param name="name">Database name</param>
        /// <param name="sizeMB">Size of the file in megabytes</param>
        /// <param name="databaseFiles">The list of database files</param>
        /// <param name="compatibilityLevel">SQL Server compatibility level of
        /// database. Possible values include: 'CompatLevel80',
        /// 'CompatLevel90', 'CompatLevel100', 'CompatLevel110',
        /// 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'</param>
        /// <param name="databaseState">State of the database. Possible values
        /// include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending',
        /// 'Suspect', 'Emergency', 'Offline', 'Copying',
        /// 'OfflineSecondary'</param>
        public ConnectToSourceSqlServerTaskOutputDatabaseLevel(string id = default(string), string name = default(string), double? sizeMB = default(double?), IList<DatabaseFileInfo> databaseFiles = default(IList<DatabaseFileInfo>), string compatibilityLevel = default(string), string databaseState = default(string))
            : base(id)
        {
            Name = name;
            SizeMB = sizeMB;
            DatabaseFiles = databaseFiles;
            CompatibilityLevel = compatibilityLevel;
            DatabaseState = databaseState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets database name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets size of the file in megabytes
        /// </summary>
        [JsonProperty(PropertyName = "sizeMB")]
        public double? SizeMB { get; private set; }

        /// <summary>
        /// Gets the list of database files
        /// </summary>
        [JsonProperty(PropertyName = "databaseFiles")]
        public IList<DatabaseFileInfo> DatabaseFiles { get; private set; }

        /// <summary>
        /// Gets SQL Server compatibility level of database. Possible values
        /// include: 'CompatLevel80', 'CompatLevel90', 'CompatLevel100',
        /// 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
        /// 'CompatLevel140'
        /// </summary>
        [JsonProperty(PropertyName = "compatibilityLevel")]
        public string CompatibilityLevel { get; private set; }

        /// <summary>
        /// Gets state of the database. Possible values include: 'Online',
        /// 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect',
        /// 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
        /// </summary>
        [JsonProperty(PropertyName = "databaseState")]
        public string DatabaseState { get; private set; }

    }
}
