// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes a database or collection within a MongoDB data source
    /// </summary>
    public partial class MongoDbObjectInfo
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbObjectInfo class.
        /// </summary>
        public MongoDbObjectInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbObjectInfo class.
        /// </summary>
        /// <param name="averageDocumentSize">The average document size, or -1
        /// if the average size is unknown</param>
        /// <param name="dataSize">The estimated total data size, in bytes, or
        /// -1 if the size is unknown.</param>
        /// <param name="documentCount">The estimated total number of
        /// documents, or -1 if the document count is unknown</param>
        /// <param name="name">The unqualified name of the database or
        /// collection</param>
        /// <param name="qualifiedName">The qualified name of the database or
        /// collection. For a collection, this is the database-qualified
        /// name.</param>
        public MongoDbObjectInfo(long averageDocumentSize, long dataSize, long documentCount, string name, string qualifiedName)
        {
            AverageDocumentSize = averageDocumentSize;
            DataSize = dataSize;
            DocumentCount = documentCount;
            Name = name;
            QualifiedName = qualifiedName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the average document size, or -1 if the average size
        /// is unknown
        /// </summary>
        [JsonProperty(PropertyName = "averageDocumentSize")]
        public long AverageDocumentSize { get; set; }

        /// <summary>
        /// Gets or sets the estimated total data size, in bytes, or -1 if the
        /// size is unknown.
        /// </summary>
        [JsonProperty(PropertyName = "dataSize")]
        public long DataSize { get; set; }

        /// <summary>
        /// Gets or sets the estimated total number of documents, or -1 if the
        /// document count is unknown
        /// </summary>
        [JsonProperty(PropertyName = "documentCount")]
        public long DocumentCount { get; set; }

        /// <summary>
        /// Gets or sets the unqualified name of the database or collection
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the qualified name of the database or collection. For
        /// a collection, this is the database-qualified name.
        /// </summary>
        [JsonProperty(PropertyName = "qualifiedName")]
        public string QualifiedName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (QualifiedName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "QualifiedName");
            }
        }
    }
}
