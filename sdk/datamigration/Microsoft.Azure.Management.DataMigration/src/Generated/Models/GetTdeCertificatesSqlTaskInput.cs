// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Input for the task that gets TDE certificates in Base64 encoded format.
    /// </summary>
    public partial class GetTdeCertificatesSqlTaskInput
    {
        /// <summary>
        /// Initializes a new instance of the GetTdeCertificatesSqlTaskInput
        /// class.
        /// </summary>
        public GetTdeCertificatesSqlTaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetTdeCertificatesSqlTaskInput
        /// class.
        /// </summary>
        /// <param name="connectionInfo">Connection information for SQL
        /// Server</param>
        /// <param name="backupFileShare">Backup file share information for
        /// file share to be used for temporarily storing files.</param>
        /// <param name="selectedCertificates">List containing certificate
        /// names and corresponding password to use for encrypting the exported
        /// certificate.</param>
        public GetTdeCertificatesSqlTaskInput(SqlConnectionInfo connectionInfo, FileShare backupFileShare, IList<SelectedCertificateInput> selectedCertificates)
        {
            ConnectionInfo = connectionInfo;
            BackupFileShare = backupFileShare;
            SelectedCertificates = selectedCertificates;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets connection information for SQL Server
        /// </summary>
        [JsonProperty(PropertyName = "connectionInfo")]
        public SqlConnectionInfo ConnectionInfo { get; set; }

        /// <summary>
        /// Gets or sets backup file share information for file share to be
        /// used for temporarily storing files.
        /// </summary>
        [JsonProperty(PropertyName = "backupFileShare")]
        public FileShare BackupFileShare { get; set; }

        /// <summary>
        /// Gets or sets list containing certificate names and corresponding
        /// password to use for encrypting the exported certificate.
        /// </summary>
        [JsonProperty(PropertyName = "selectedCertificates")]
        public IList<SelectedCertificateInput> SelectedCertificates { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConnectionInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectionInfo");
            }
            if (BackupFileShare == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BackupFileShare");
            }
            if (SelectedCertificates == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedCertificates");
            }
            if (ConnectionInfo != null)
            {
                ConnectionInfo.Validate();
            }
            if (BackupFileShare != null)
            {
                BackupFileShare.Validate();
            }
            if (SelectedCertificates != null)
            {
                foreach (var element in SelectedCertificates)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
