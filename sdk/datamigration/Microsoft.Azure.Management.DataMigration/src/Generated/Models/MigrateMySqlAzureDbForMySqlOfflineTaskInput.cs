// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Input for the task that migrates MySQL databases to Azure Database for
    /// MySQL for offline migrations
    /// </summary>
    public partial class MigrateMySqlAzureDbForMySqlOfflineTaskInput
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MigrateMySqlAzureDbForMySqlOfflineTaskInput class.
        /// </summary>
        public MigrateMySqlAzureDbForMySqlOfflineTaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MigrateMySqlAzureDbForMySqlOfflineTaskInput class.
        /// </summary>
        /// <param name="sourceConnectionInfo">Connection information for
        /// source MySQL</param>
        /// <param name="targetConnectionInfo">Connection information for
        /// target Azure Database for MySQL</param>
        /// <param name="selectedDatabases">Databases to migrate</param>
        /// <param name="makeSourceServerReadOnly">Setting to set the source
        /// server read only</param>
        /// <param name="startedOn">Parameter to specify when the migration
        /// started</param>
        /// <param name="optionalAgentSettings">Optional parameters for fine
        /// tuning the data transfer rate during migration</param>
        public MigrateMySqlAzureDbForMySqlOfflineTaskInput(MySqlConnectionInfo sourceConnectionInfo, MySqlConnectionInfo targetConnectionInfo, IList<MigrateMySqlAzureDbForMySqlOfflineDatabaseInput> selectedDatabases, bool? makeSourceServerReadOnly = default(bool?), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), IDictionary<string, string> optionalAgentSettings = default(IDictionary<string, string>))
        {
            SourceConnectionInfo = sourceConnectionInfo;
            TargetConnectionInfo = targetConnectionInfo;
            SelectedDatabases = selectedDatabases;
            MakeSourceServerReadOnly = makeSourceServerReadOnly;
            StartedOn = startedOn;
            OptionalAgentSettings = optionalAgentSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets connection information for source MySQL
        /// </summary>
        [JsonProperty(PropertyName = "sourceConnectionInfo")]
        public MySqlConnectionInfo SourceConnectionInfo { get; set; }

        /// <summary>
        /// Gets or sets connection information for target Azure Database for
        /// MySQL
        /// </summary>
        [JsonProperty(PropertyName = "targetConnectionInfo")]
        public MySqlConnectionInfo TargetConnectionInfo { get; set; }

        /// <summary>
        /// Gets or sets databases to migrate
        /// </summary>
        [JsonProperty(PropertyName = "selectedDatabases")]
        public IList<MigrateMySqlAzureDbForMySqlOfflineDatabaseInput> SelectedDatabases { get; set; }

        /// <summary>
        /// Gets or sets setting to set the source server read only
        /// </summary>
        [JsonProperty(PropertyName = "makeSourceServerReadOnly")]
        public bool? MakeSourceServerReadOnly { get; set; }

        /// <summary>
        /// Gets or sets parameter to specify when the migration started
        /// </summary>
        [JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn { get; set; }

        /// <summary>
        /// Gets or sets optional parameters for fine tuning the data transfer
        /// rate during migration
        /// </summary>
        [JsonProperty(PropertyName = "optionalAgentSettings")]
        public IDictionary<string, string> OptionalAgentSettings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceConnectionInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceConnectionInfo");
            }
            if (TargetConnectionInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetConnectionInfo");
            }
            if (SelectedDatabases == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedDatabases");
            }
            if (SourceConnectionInfo != null)
            {
                SourceConnectionInfo.Validate();
            }
            if (TargetConnectionInfo != null)
            {
                TargetConnectionInfo.Validate();
            }
        }
    }
}
