// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Input for the task that gets the list of tables for a provided list of
    /// PostgreSQL databases.
    /// </summary>
    public partial class GetUserTablesPostgreSqlTaskInput
    {
        /// <summary>
        /// Initializes a new instance of the GetUserTablesPostgreSqlTaskInput
        /// class.
        /// </summary>
        public GetUserTablesPostgreSqlTaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetUserTablesPostgreSqlTaskInput
        /// class.
        /// </summary>
        /// <param name="connectionInfo">Information for connecting to
        /// PostgreSQL source</param>
        /// <param name="selectedDatabases">List of PostgreSQL databases for
        /// which to collect tables</param>
        public GetUserTablesPostgreSqlTaskInput(PostgreSqlConnectionInfo connectionInfo, IList<string> selectedDatabases)
        {
            ConnectionInfo = connectionInfo;
            SelectedDatabases = selectedDatabases;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets information for connecting to PostgreSQL source
        /// </summary>
        [JsonProperty(PropertyName = "connectionInfo")]
        public PostgreSqlConnectionInfo ConnectionInfo { get; set; }

        /// <summary>
        /// Gets or sets list of PostgreSQL databases for which to collect
        /// tables
        /// </summary>
        [JsonProperty(PropertyName = "selectedDatabases")]
        public IList<string> SelectedDatabases { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConnectionInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectionInfo");
            }
            if (SelectedDatabases == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedDatabases");
            }
            if (ConnectionInfo != null)
            {
                ConnectionInfo.Validate();
            }
        }
    }
}
