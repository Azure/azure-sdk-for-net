// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MigrateSqlServerSqlDbTaskOutputValidationResult
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlDbTaskOutputValidationResult class.
        /// </summary>
        public MigrateSqlServerSqlDbTaskOutputValidationResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlDbTaskOutputValidationResult class.
        /// </summary>
        /// <param name="resultType">Result type</param>
        /// <param name="id">Result identifier</param>
        /// <param name="migrationId">Migration Identifier</param>
        /// <param name="summaryResults">Validation summary results for each
        /// database</param>
        /// <param name="status">Current status of validation at the migration
        /// level. Status from the database validation result status will be
        /// aggregated here. Possible values include: 'Default', 'NotStarted',
        /// 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues',
        /// 'Stopped', 'Failed'</param>
        public MigrateSqlServerSqlDbTaskOutputValidationResult(string resultType, string id = default(string), string migrationId = default(string), IDictionary<string, MigrationValidationDatabaseSummaryResult> summaryResults = default(IDictionary<string, MigrationValidationDatabaseSummaryResult>), string status = default(string))
        {
            Id = id;
            ResultType = resultType;
            MigrationId = migrationId;
            SummaryResults = summaryResults;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets result identifier
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets result type
        /// </summary>
        [JsonProperty(PropertyName = "resultType")]
        public string ResultType { get; set; }

        /// <summary>
        /// Gets migration Identifier
        /// </summary>
        [JsonProperty(PropertyName = "migrationId")]
        public string MigrationId { get; private set; }

        /// <summary>
        /// Gets or sets validation summary results for each database
        /// </summary>
        [JsonProperty(PropertyName = "summaryResults")]
        public IDictionary<string, MigrationValidationDatabaseSummaryResult> SummaryResults { get; set; }

        /// <summary>
        /// Gets current status of validation at the migration level. Status
        /// from the database validation result status will be aggregated here.
        /// Possible values include: 'Default', 'NotStarted', 'Initialized',
        /// 'InProgress', 'Completed', 'CompletedWithIssues', 'Stopped',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResultType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResultType");
            }
        }
    }
}
