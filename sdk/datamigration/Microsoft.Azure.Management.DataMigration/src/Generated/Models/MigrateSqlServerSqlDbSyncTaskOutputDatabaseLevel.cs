// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    [Newtonsoft.Json.JsonObject("DatabaseLevelOutput")]
    public partial class MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel : MigrateSqlServerSqlDbSyncTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel class.
        /// </summary>
        public MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel class.
        /// </summary>
        /// <param name="id">Result identifier</param>
        /// <param name="databaseName">Name of the database</param>
        /// <param name="startedOn">Migration start time</param>
        /// <param name="endedOn">Migration end time</param>
        /// <param name="migrationState">Migration state that this database is
        /// in. Possible values include: 'UNDEFINED', 'CONFIGURING',
        /// 'INITIALIAZING', 'STARTING', 'RUNNING', 'READY_TO_COMPLETE',
        /// 'COMPLETING', 'COMPLETE', 'CANCELLING', 'CANCELLED',
        /// 'FAILED'</param>
        /// <param name="incomingChanges">Number of incoming changes</param>
        /// <param name="appliedChanges">Number of applied changes</param>
        /// <param name="cdcInsertCounter">Number of cdc inserts</param>
        /// <param name="cdcDeleteCounter">Number of cdc deletes</param>
        /// <param name="cdcUpdateCounter">Number of cdc updates</param>
        /// <param name="fullLoadCompletedTables">Number of tables completed in
        /// full load</param>
        /// <param name="fullLoadLoadingTables">Number of tables loading in
        /// full load</param>
        /// <param name="fullLoadQueuedTables">Number of tables queued in full
        /// load</param>
        /// <param name="fullLoadErroredTables">Number of tables errored in
        /// full load</param>
        /// <param name="initializationCompleted">Indicates if initial load
        /// (full load) has been completed</param>
        /// <param name="latency">CDC apply latency</param>
        public MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel(string id = default(string), string databaseName = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string migrationState = default(string), long? incomingChanges = default(long?), long? appliedChanges = default(long?), long? cdcInsertCounter = default(long?), long? cdcDeleteCounter = default(long?), long? cdcUpdateCounter = default(long?), long? fullLoadCompletedTables = default(long?), long? fullLoadLoadingTables = default(long?), long? fullLoadQueuedTables = default(long?), long? fullLoadErroredTables = default(long?), bool? initializationCompleted = default(bool?), long? latency = default(long?))
            : base(id)
        {
            DatabaseName = databaseName;
            StartedOn = startedOn;
            EndedOn = endedOn;
            MigrationState = migrationState;
            IncomingChanges = incomingChanges;
            AppliedChanges = appliedChanges;
            CdcInsertCounter = cdcInsertCounter;
            CdcDeleteCounter = cdcDeleteCounter;
            CdcUpdateCounter = cdcUpdateCounter;
            FullLoadCompletedTables = fullLoadCompletedTables;
            FullLoadLoadingTables = fullLoadLoadingTables;
            FullLoadQueuedTables = fullLoadQueuedTables;
            FullLoadErroredTables = fullLoadErroredTables;
            InitializationCompleted = initializationCompleted;
            Latency = latency;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the database
        /// </summary>
        [JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName { get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn { get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn { get; private set; }

        /// <summary>
        /// Gets migration state that this database is in. Possible values
        /// include: 'UNDEFINED', 'CONFIGURING', 'INITIALIAZING', 'STARTING',
        /// 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
        /// 'CANCELLING', 'CANCELLED', 'FAILED'
        /// </summary>
        [JsonProperty(PropertyName = "migrationState")]
        public string MigrationState { get; private set; }

        /// <summary>
        /// Gets number of incoming changes
        /// </summary>
        [JsonProperty(PropertyName = "incomingChanges")]
        public long? IncomingChanges { get; private set; }

        /// <summary>
        /// Gets number of applied changes
        /// </summary>
        [JsonProperty(PropertyName = "appliedChanges")]
        public long? AppliedChanges { get; private set; }

        /// <summary>
        /// Gets number of cdc inserts
        /// </summary>
        [JsonProperty(PropertyName = "cdcInsertCounter")]
        public long? CdcInsertCounter { get; private set; }

        /// <summary>
        /// Gets number of cdc deletes
        /// </summary>
        [JsonProperty(PropertyName = "cdcDeleteCounter")]
        public long? CdcDeleteCounter { get; private set; }

        /// <summary>
        /// Gets number of cdc updates
        /// </summary>
        [JsonProperty(PropertyName = "cdcUpdateCounter")]
        public long? CdcUpdateCounter { get; private set; }

        /// <summary>
        /// Gets number of tables completed in full load
        /// </summary>
        [JsonProperty(PropertyName = "fullLoadCompletedTables")]
        public long? FullLoadCompletedTables { get; private set; }

        /// <summary>
        /// Gets number of tables loading in full load
        /// </summary>
        [JsonProperty(PropertyName = "fullLoadLoadingTables")]
        public long? FullLoadLoadingTables { get; private set; }

        /// <summary>
        /// Gets number of tables queued in full load
        /// </summary>
        [JsonProperty(PropertyName = "fullLoadQueuedTables")]
        public long? FullLoadQueuedTables { get; private set; }

        /// <summary>
        /// Gets number of tables errored in full load
        /// </summary>
        [JsonProperty(PropertyName = "fullLoadErroredTables")]
        public long? FullLoadErroredTables { get; private set; }

        /// <summary>
        /// Gets indicates if initial load (full load) has been completed
        /// </summary>
        [JsonProperty(PropertyName = "initializationCompleted")]
        public bool? InitializationCompleted { get; private set; }

        /// <summary>
        /// Gets CDC apply latency
        /// </summary>
        [JsonProperty(PropertyName = "latency")]
        public long? Latency { get; private set; }

    }
}
