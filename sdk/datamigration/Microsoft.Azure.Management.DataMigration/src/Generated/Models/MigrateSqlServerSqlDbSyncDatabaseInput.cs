// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Database specific information for SQL to Azure SQL DB sync migration
    /// task inputs
    /// </summary>
    public partial class MigrateSqlServerSqlDbSyncDatabaseInput
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlDbSyncDatabaseInput class.
        /// </summary>
        public MigrateSqlServerSqlDbSyncDatabaseInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MigrateSqlServerSqlDbSyncDatabaseInput class.
        /// </summary>
        /// <param name="id">Unique identifier for database</param>
        /// <param name="name">Name of database</param>
        /// <param name="targetDatabaseName">Target database name</param>
        /// <param name="schemaName">Schema name to be migrated</param>
        /// <param name="tableMap">Mapping of source to target tables</param>
        /// <param name="migrationSetting">Migration settings which tune the
        /// migration behavior</param>
        /// <param name="sourceSetting">Source settings to tune source endpoint
        /// migration behavior</param>
        /// <param name="targetSetting">Target settings to tune target endpoint
        /// migration behavior</param>
        public MigrateSqlServerSqlDbSyncDatabaseInput(string id = default(string), string name = default(string), string targetDatabaseName = default(string), string schemaName = default(string), IDictionary<string, string> tableMap = default(IDictionary<string, string>), IDictionary<string, string> migrationSetting = default(IDictionary<string, string>), IDictionary<string, string> sourceSetting = default(IDictionary<string, string>), IDictionary<string, string> targetSetting = default(IDictionary<string, string>))
        {
            Id = id;
            Name = name;
            TargetDatabaseName = targetDatabaseName;
            SchemaName = schemaName;
            TableMap = tableMap;
            MigrationSetting = migrationSetting;
            SourceSetting = sourceSetting;
            TargetSetting = targetSetting;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identifier for database
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets name of database
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets target database name
        /// </summary>
        [JsonProperty(PropertyName = "targetDatabaseName")]
        public string TargetDatabaseName { get; set; }

        /// <summary>
        /// Gets or sets schema name to be migrated
        /// </summary>
        [JsonProperty(PropertyName = "schemaName")]
        public string SchemaName { get; set; }

        /// <summary>
        /// Gets or sets mapping of source to target tables
        /// </summary>
        [JsonProperty(PropertyName = "tableMap")]
        public IDictionary<string, string> TableMap { get; set; }

        /// <summary>
        /// Gets or sets migration settings which tune the migration behavior
        /// </summary>
        [JsonProperty(PropertyName = "migrationSetting")]
        public IDictionary<string, string> MigrationSetting { get; set; }

        /// <summary>
        /// Gets or sets source settings to tune source endpoint migration
        /// behavior
        /// </summary>
        [JsonProperty(PropertyName = "sourceSetting")]
        public IDictionary<string, string> SourceSetting { get; set; }

        /// <summary>
        /// Gets or sets target settings to tune target endpoint migration
        /// behavior
        /// </summary>
        [JsonProperty(PropertyName = "targetSetting")]
        public IDictionary<string, string> TargetSetting { get; set; }

    }
}
