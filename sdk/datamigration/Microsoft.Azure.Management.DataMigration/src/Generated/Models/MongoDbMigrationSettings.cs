// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes how a MongoDB data migration should be performed
    /// </summary>
    public partial class MongoDbMigrationSettings
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbMigrationSettings class.
        /// </summary>
        public MongoDbMigrationSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbMigrationSettings class.
        /// </summary>
        /// <param name="databases">The databases on the source cluster to
        /// migrate to the target. The keys are the names of the
        /// databases.</param>
        /// <param name="source">Settings used to connect to the source
        /// cluster</param>
        /// <param name="target">Settings used to connect to the target
        /// cluster</param>
        /// <param name="boostRUs">The RU limit on a CosmosDB target that
        /// collections will be temporarily increased to (if lower) during the
        /// initial copy of a migration, from 10,000 to 1,000,000, or 0 to use
        /// the default boost (which is generally the maximum), or null to not
        /// boost the RUs. This setting has no effect on non-CosmosDB
        /// targets.</param>
        /// <param name="replication">Describes how changes will be replicated
        /// from the source to the target. The default is OneTime. Possible
        /// values include: 'Disabled', 'OneTime', 'Continuous'</param>
        /// <param name="throttling">Settings used to limit the resource usage
        /// of the migration</param>
        public MongoDbMigrationSettings(IDictionary<string, MongoDbDatabaseSettings> databases, MongoDbConnectionInfo source, MongoDbConnectionInfo target, int? boostRUs = default(int?), string replication = default(string), MongoDbThrottlingSettings throttling = default(MongoDbThrottlingSettings))
        {
            BoostRUs = boostRUs;
            Databases = databases;
            Replication = replication;
            Source = source;
            Target = target;
            Throttling = throttling;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the RU limit on a CosmosDB target that collections
        /// will be temporarily increased to (if lower) during the initial copy
        /// of a migration, from 10,000 to 1,000,000, or 0 to use the default
        /// boost (which is generally the maximum), or null to not boost the
        /// RUs. This setting has no effect on non-CosmosDB targets.
        /// </summary>
        [JsonProperty(PropertyName = "boostRUs")]
        public int? BoostRUs { get; set; }

        /// <summary>
        /// Gets or sets the databases on the source cluster to migrate to the
        /// target. The keys are the names of the databases.
        /// </summary>
        [JsonProperty(PropertyName = "databases")]
        public IDictionary<string, MongoDbDatabaseSettings> Databases { get; set; }

        /// <summary>
        /// Gets or sets describes how changes will be replicated from the
        /// source to the target. The default is OneTime. Possible values
        /// include: 'Disabled', 'OneTime', 'Continuous'
        /// </summary>
        [JsonProperty(PropertyName = "replication")]
        public string Replication { get; set; }

        /// <summary>
        /// Gets or sets settings used to connect to the source cluster
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public MongoDbConnectionInfo Source { get; set; }

        /// <summary>
        /// Gets or sets settings used to connect to the target cluster
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public MongoDbConnectionInfo Target { get; set; }

        /// <summary>
        /// Gets or sets settings used to limit the resource usage of the
        /// migration
        /// </summary>
        [JsonProperty(PropertyName = "throttling")]
        public MongoDbThrottlingSettings Throttling { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Databases == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Databases");
            }
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Target == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Target");
            }
            if (Databases != null)
            {
                foreach (var valueElement in Databases.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (Source != null)
            {
                Source.Validate();
            }
            if (Target != null)
            {
                Target.Validate();
            }
        }
    }
}
