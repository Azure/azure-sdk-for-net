// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PolicyInsights.Models
{
    public partial class PolicyState : IUtf8JsonSerializable, IJsonModel<PolicyState>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PolicyState>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<PolicyState>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PolicyState>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PolicyState)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(ODataId))
            {
                writer.WritePropertyName("@odata.id"u8);
                writer.WriteStringValue(ODataId);
            }
            if (Optional.IsDefined(ODataContext))
            {
                writer.WritePropertyName("@odata.context"u8);
                writer.WriteStringValue(ODataContext);
            }
            if (Optional.IsDefined(Timestamp))
            {
                writer.WritePropertyName("timestamp"u8);
                writer.WriteStringValue(Timestamp.Value, "O");
            }
            if (Optional.IsDefined(ResourceId))
            {
                writer.WritePropertyName("resourceId"u8);
                writer.WriteStringValue(ResourceId);
            }
            if (Optional.IsDefined(PolicyAssignmentId))
            {
                writer.WritePropertyName("policyAssignmentId"u8);
                writer.WriteStringValue(PolicyAssignmentId);
            }
            if (Optional.IsDefined(PolicyDefinitionId))
            {
                writer.WritePropertyName("policyDefinitionId"u8);
                writer.WriteStringValue(PolicyDefinitionId);
            }
            if (Optional.IsDefined(EffectiveParameters))
            {
                writer.WritePropertyName("effectiveParameters"u8);
                writer.WriteStringValue(EffectiveParameters);
            }
            if (Optional.IsDefined(IsCompliant))
            {
                writer.WritePropertyName("isCompliant"u8);
                writer.WriteBooleanValue(IsCompliant.Value);
            }
            if (Optional.IsDefined(SubscriptionId))
            {
                writer.WritePropertyName("subscriptionId"u8);
                writer.WriteStringValue(SubscriptionId);
            }
            if (Optional.IsDefined(ResourceTypeString))
            {
                writer.WritePropertyName("resourceType"u8);
                writer.WriteStringValue(ResourceTypeString);
            }
            if (Optional.IsDefined(ResourceLocation))
            {
                writer.WritePropertyName("resourceLocation"u8);
                writer.WriteStringValue(ResourceLocation.Value);
            }
            if (Optional.IsDefined(ResourceGroup))
            {
                writer.WritePropertyName("resourceGroup"u8);
                writer.WriteStringValue(ResourceGroup);
            }
            if (Optional.IsDefined(ResourceTags))
            {
                writer.WritePropertyName("resourceTags"u8);
                writer.WriteStringValue(ResourceTags);
            }
            if (Optional.IsDefined(PolicyAssignmentName))
            {
                writer.WritePropertyName("policyAssignmentName"u8);
                writer.WriteStringValue(PolicyAssignmentName);
            }
            if (Optional.IsDefined(PolicyAssignmentOwner))
            {
                writer.WritePropertyName("policyAssignmentOwner"u8);
                writer.WriteStringValue(PolicyAssignmentOwner);
            }
            if (Optional.IsDefined(PolicyAssignmentParameters))
            {
                writer.WritePropertyName("policyAssignmentParameters"u8);
                writer.WriteStringValue(PolicyAssignmentParameters);
            }
            if (Optional.IsDefined(PolicyAssignmentScope))
            {
                writer.WritePropertyName("policyAssignmentScope"u8);
                writer.WriteStringValue(PolicyAssignmentScope);
            }
            if (Optional.IsDefined(PolicyDefinitionName))
            {
                writer.WritePropertyName("policyDefinitionName"u8);
                writer.WriteStringValue(PolicyDefinitionName);
            }
            if (Optional.IsDefined(PolicyDefinitionAction))
            {
                writer.WritePropertyName("policyDefinitionAction"u8);
                writer.WriteStringValue(PolicyDefinitionAction);
            }
            if (Optional.IsDefined(PolicyDefinitionCategory))
            {
                writer.WritePropertyName("policyDefinitionCategory"u8);
                writer.WriteStringValue(PolicyDefinitionCategory);
            }
            if (Optional.IsDefined(PolicySetDefinitionId))
            {
                writer.WritePropertyName("policySetDefinitionId"u8);
                writer.WriteStringValue(PolicySetDefinitionId);
            }
            if (Optional.IsDefined(PolicySetDefinitionName))
            {
                writer.WritePropertyName("policySetDefinitionName"u8);
                writer.WriteStringValue(PolicySetDefinitionName);
            }
            if (Optional.IsDefined(PolicySetDefinitionOwner))
            {
                writer.WritePropertyName("policySetDefinitionOwner"u8);
                writer.WriteStringValue(PolicySetDefinitionOwner);
            }
            if (Optional.IsDefined(PolicySetDefinitionCategory))
            {
                writer.WritePropertyName("policySetDefinitionCategory"u8);
                writer.WriteStringValue(PolicySetDefinitionCategory);
            }
            if (Optional.IsDefined(PolicySetDefinitionParameters))
            {
                writer.WritePropertyName("policySetDefinitionParameters"u8);
                writer.WriteStringValue(PolicySetDefinitionParameters);
            }
            if (Optional.IsDefined(ManagementGroupIds))
            {
                writer.WritePropertyName("managementGroupIds"u8);
                writer.WriteStringValue(ManagementGroupIds);
            }
            if (Optional.IsDefined(PolicyDefinitionReferenceId))
            {
                writer.WritePropertyName("policyDefinitionReferenceId"u8);
                writer.WriteStringValue(PolicyDefinitionReferenceId);
            }
            if (Optional.IsDefined(ComplianceState))
            {
                writer.WritePropertyName("complianceState"u8);
                writer.WriteStringValue(ComplianceState);
            }
            if (Optional.IsDefined(PolicyEvaluationDetails))
            {
                writer.WritePropertyName("policyEvaluationDetails"u8);
                writer.WriteObjectValue(PolicyEvaluationDetails);
            }
            if (Optional.IsCollectionDefined(PolicyDefinitionGroupNames))
            {
                writer.WritePropertyName("policyDefinitionGroupNames"u8);
                writer.WriteStartArray();
                foreach (var item in PolicyDefinitionGroupNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Components))
            {
                writer.WritePropertyName("components"u8);
                writer.WriteStartArray();
                foreach (var item in Components)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(PolicyDefinitionVersion))
            {
                writer.WritePropertyName("policyDefinitionVersion"u8);
                writer.WriteStringValue(PolicyDefinitionVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(PolicySetDefinitionVersion))
            {
                writer.WritePropertyName("policySetDefinitionVersion"u8);
                writer.WriteStringValue(PolicySetDefinitionVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(PolicyAssignmentVersion))
            {
                writer.WritePropertyName("policyAssignmentVersion"u8);
                writer.WriteStringValue(PolicyAssignmentVersion);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
        }

        PolicyState IJsonModel<PolicyState>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PolicyState>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PolicyState)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePolicyState(document.RootElement, options);
        }

        internal static PolicyState DeserializePolicyState(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> odataId = default;
            Optional<string> odataContext = default;
            Optional<DateTimeOffset> timestamp = default;
            Optional<ResourceIdentifier> resourceId = default;
            Optional<ResourceIdentifier> policyAssignmentId = default;
            Optional<ResourceIdentifier> policyDefinitionId = default;
            Optional<string> effectiveParameters = default;
            Optional<bool> isCompliant = default;
            Optional<string> subscriptionId = default;
            Optional<string> resourceType = default;
            Optional<AzureLocation> resourceLocation = default;
            Optional<string> resourceGroup = default;
            Optional<string> resourceTags = default;
            Optional<string> policyAssignmentName = default;
            Optional<string> policyAssignmentOwner = default;
            Optional<string> policyAssignmentParameters = default;
            Optional<string> policyAssignmentScope = default;
            Optional<string> policyDefinitionName = default;
            Optional<string> policyDefinitionAction = default;
            Optional<string> policyDefinitionCategory = default;
            Optional<ResourceIdentifier> policySetDefinitionId = default;
            Optional<string> policySetDefinitionName = default;
            Optional<string> policySetDefinitionOwner = default;
            Optional<string> policySetDefinitionCategory = default;
            Optional<string> policySetDefinitionParameters = default;
            Optional<string> managementGroupIds = default;
            Optional<string> policyDefinitionReferenceId = default;
            Optional<string> complianceState = default;
            Optional<PolicyEvaluationDetails> policyEvaluationDetails = default;
            Optional<IReadOnlyList<string>> policyDefinitionGroupNames = default;
            Optional<IReadOnlyList<ComponentStateDetails>> components = default;
            Optional<string> policyDefinitionVersion = default;
            Optional<string> policySetDefinitionVersion = default;
            Optional<string> policyAssignmentVersion = default;
            IReadOnlyDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("@odata.id"u8))
                {
                    odataId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("@odata.context"u8))
                {
                    odataContext = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    timestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("resourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    resourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("policyAssignmentId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    policyAssignmentId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("policyDefinitionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    policyDefinitionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("effectiveParameters"u8))
                {
                    effectiveParameters = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isCompliant"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isCompliant = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("subscriptionId"u8))
                {
                    subscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resourceLocation = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceGroup"u8))
                {
                    resourceGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceTags"u8))
                {
                    resourceTags = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyAssignmentName"u8))
                {
                    policyAssignmentName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyAssignmentOwner"u8))
                {
                    policyAssignmentOwner = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyAssignmentParameters"u8))
                {
                    policyAssignmentParameters = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyAssignmentScope"u8))
                {
                    policyAssignmentScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyDefinitionName"u8))
                {
                    policyDefinitionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyDefinitionAction"u8))
                {
                    policyDefinitionAction = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyDefinitionCategory"u8))
                {
                    policyDefinitionCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policySetDefinitionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    policySetDefinitionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("policySetDefinitionName"u8))
                {
                    policySetDefinitionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policySetDefinitionOwner"u8))
                {
                    policySetDefinitionOwner = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policySetDefinitionCategory"u8))
                {
                    policySetDefinitionCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policySetDefinitionParameters"u8))
                {
                    policySetDefinitionParameters = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managementGroupIds"u8))
                {
                    managementGroupIds = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyDefinitionReferenceId"u8))
                {
                    policyDefinitionReferenceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("complianceState"u8))
                {
                    complianceState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyEvaluationDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    policyEvaluationDetails = PolicyEvaluationDetails.DeserializePolicyEvaluationDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("policyDefinitionGroupNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    policyDefinitionGroupNames = array;
                    continue;
                }
                if (property.NameEquals("components"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ComponentStateDetails> array = new List<ComponentStateDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ComponentStateDetails.DeserializeComponentStateDetails(item));
                    }
                    components = array;
                    continue;
                }
                if (property.NameEquals("policyDefinitionVersion"u8))
                {
                    policyDefinitionVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policySetDefinitionVersion"u8))
                {
                    policySetDefinitionVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyAssignmentVersion"u8))
                {
                    policyAssignmentVersion = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new PolicyState(odataId.Value, odataContext.Value, Optional.ToNullable(timestamp), resourceId.Value, policyAssignmentId.Value, policyDefinitionId.Value, effectiveParameters.Value, Optional.ToNullable(isCompliant), subscriptionId.Value, resourceType.Value, Optional.ToNullable(resourceLocation), resourceGroup.Value, resourceTags.Value, policyAssignmentName.Value, policyAssignmentOwner.Value, policyAssignmentParameters.Value, policyAssignmentScope.Value, policyDefinitionName.Value, policyDefinitionAction.Value, policyDefinitionCategory.Value, policySetDefinitionId.Value, policySetDefinitionName.Value, policySetDefinitionOwner.Value, policySetDefinitionCategory.Value, policySetDefinitionParameters.Value, managementGroupIds.Value, policyDefinitionReferenceId.Value, complianceState.Value, policyEvaluationDetails.Value, Optional.ToList(policyDefinitionGroupNames), Optional.ToList(components), policyDefinitionVersion.Value, policySetDefinitionVersion.Value, policyAssignmentVersion.Value, additionalProperties);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(ODataId))
            {
                builder.Append("  @odata.id:");
                if (ODataId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ODataId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ODataId}'");
                }
            }

            if (Optional.IsDefined(ODataContext))
            {
                builder.Append("  @odata.context:");
                if (ODataContext.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ODataContext}'''");
                }
                else
                {
                    builder.AppendLine($" '{ODataContext}'");
                }
            }

            if (Optional.IsDefined(Timestamp))
            {
                builder.Append("  timestamp:");
                var formattedDateTimeString = TypeFormatters.ToString(Timestamp.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(ResourceId))
            {
                builder.Append("  resourceId:");
                builder.AppendLine($" '{ResourceId.ToString()}'");
            }

            if (Optional.IsDefined(PolicyAssignmentId))
            {
                builder.Append("  policyAssignmentId:");
                builder.AppendLine($" '{PolicyAssignmentId.ToString()}'");
            }

            if (Optional.IsDefined(PolicyDefinitionId))
            {
                builder.Append("  policyDefinitionId:");
                builder.AppendLine($" '{PolicyDefinitionId.ToString()}'");
            }

            if (Optional.IsDefined(EffectiveParameters))
            {
                builder.Append("  effectiveParameters:");
                if (EffectiveParameters.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{EffectiveParameters}'''");
                }
                else
                {
                    builder.AppendLine($" '{EffectiveParameters}'");
                }
            }

            if (Optional.IsDefined(IsCompliant))
            {
                builder.Append("  isCompliant:");
                var boolValue = IsCompliant.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(SubscriptionId))
            {
                builder.Append("  subscriptionId:");
                if (SubscriptionId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SubscriptionId}'''");
                }
                else
                {
                    builder.AppendLine($" '{SubscriptionId}'");
                }
            }

            if (Optional.IsDefined(ResourceTypeString))
            {
                builder.Append("  resourceType:");
                if (ResourceTypeString.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResourceTypeString}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResourceTypeString}'");
                }
            }

            if (Optional.IsDefined(ResourceLocation))
            {
                builder.Append("  resourceLocation:");
                builder.AppendLine($" '{ResourceLocation.Value.ToString()}'");
            }

            if (Optional.IsDefined(ResourceGroup))
            {
                builder.Append("  resourceGroup:");
                if (ResourceGroup.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResourceGroup}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResourceGroup}'");
                }
            }

            if (Optional.IsDefined(ResourceTags))
            {
                builder.Append("  resourceTags:");
                if (ResourceTags.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResourceTags}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResourceTags}'");
                }
            }

            if (Optional.IsDefined(PolicyAssignmentName))
            {
                builder.Append("  policyAssignmentName:");
                if (PolicyAssignmentName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyAssignmentName}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyAssignmentName}'");
                }
            }

            if (Optional.IsDefined(PolicyAssignmentOwner))
            {
                builder.Append("  policyAssignmentOwner:");
                if (PolicyAssignmentOwner.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyAssignmentOwner}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyAssignmentOwner}'");
                }
            }

            if (Optional.IsDefined(PolicyAssignmentParameters))
            {
                builder.Append("  policyAssignmentParameters:");
                if (PolicyAssignmentParameters.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyAssignmentParameters}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyAssignmentParameters}'");
                }
            }

            if (Optional.IsDefined(PolicyAssignmentScope))
            {
                builder.Append("  policyAssignmentScope:");
                if (PolicyAssignmentScope.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyAssignmentScope}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyAssignmentScope}'");
                }
            }

            if (Optional.IsDefined(PolicyDefinitionName))
            {
                builder.Append("  policyDefinitionName:");
                if (PolicyDefinitionName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyDefinitionName}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyDefinitionName}'");
                }
            }

            if (Optional.IsDefined(PolicyDefinitionAction))
            {
                builder.Append("  policyDefinitionAction:");
                if (PolicyDefinitionAction.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyDefinitionAction}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyDefinitionAction}'");
                }
            }

            if (Optional.IsDefined(PolicyDefinitionCategory))
            {
                builder.Append("  policyDefinitionCategory:");
                if (PolicyDefinitionCategory.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyDefinitionCategory}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyDefinitionCategory}'");
                }
            }

            if (Optional.IsDefined(PolicySetDefinitionId))
            {
                builder.Append("  policySetDefinitionId:");
                builder.AppendLine($" '{PolicySetDefinitionId.ToString()}'");
            }

            if (Optional.IsDefined(PolicySetDefinitionName))
            {
                builder.Append("  policySetDefinitionName:");
                if (PolicySetDefinitionName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicySetDefinitionName}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicySetDefinitionName}'");
                }
            }

            if (Optional.IsDefined(PolicySetDefinitionOwner))
            {
                builder.Append("  policySetDefinitionOwner:");
                if (PolicySetDefinitionOwner.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicySetDefinitionOwner}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicySetDefinitionOwner}'");
                }
            }

            if (Optional.IsDefined(PolicySetDefinitionCategory))
            {
                builder.Append("  policySetDefinitionCategory:");
                if (PolicySetDefinitionCategory.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicySetDefinitionCategory}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicySetDefinitionCategory}'");
                }
            }

            if (Optional.IsDefined(PolicySetDefinitionParameters))
            {
                builder.Append("  policySetDefinitionParameters:");
                if (PolicySetDefinitionParameters.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicySetDefinitionParameters}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicySetDefinitionParameters}'");
                }
            }

            if (Optional.IsDefined(ManagementGroupIds))
            {
                builder.Append("  managementGroupIds:");
                if (ManagementGroupIds.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ManagementGroupIds}'''");
                }
                else
                {
                    builder.AppendLine($" '{ManagementGroupIds}'");
                }
            }

            if (Optional.IsDefined(PolicyDefinitionReferenceId))
            {
                builder.Append("  policyDefinitionReferenceId:");
                if (PolicyDefinitionReferenceId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyDefinitionReferenceId}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyDefinitionReferenceId}'");
                }
            }

            if (Optional.IsDefined(ComplianceState))
            {
                builder.Append("  complianceState:");
                if (ComplianceState.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ComplianceState}'''");
                }
                else
                {
                    builder.AppendLine($" '{ComplianceState}'");
                }
            }

            if (Optional.IsDefined(PolicyEvaluationDetails))
            {
                builder.Append("  policyEvaluationDetails:");
                AppendChildObject(builder, PolicyEvaluationDetails, options, 2, false);
            }

            if (Optional.IsCollectionDefined(PolicyDefinitionGroupNames))
            {
                if (PolicyDefinitionGroupNames.Any())
                {
                    builder.Append("  policyDefinitionGroupNames:");
                    builder.AppendLine(" [");
                    foreach (var item in PolicyDefinitionGroupNames)
                    {
                        if (item == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Contains(Environment.NewLine))
                        {
                            builder.AppendLine("    '''");
                            builder.AppendLine($"{item}'''");
                        }
                        else
                        {
                            builder.AppendLine($"    '{item}'");
                        }
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(Components))
            {
                if (Components.Any())
                {
                    builder.Append("  components:");
                    builder.AppendLine(" [");
                    foreach (var item in Components)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(PolicyDefinitionVersion))
            {
                builder.Append("  policyDefinitionVersion:");
                if (PolicyDefinitionVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyDefinitionVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyDefinitionVersion}'");
                }
            }

            if (Optional.IsDefined(PolicySetDefinitionVersion))
            {
                builder.Append("  policySetDefinitionVersion:");
                if (PolicySetDefinitionVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicySetDefinitionVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicySetDefinitionVersion}'");
                }
            }

            if (Optional.IsDefined(PolicyAssignmentVersion))
            {
                builder.Append("  policyAssignmentVersion:");
                if (PolicyAssignmentVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PolicyAssignmentVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{PolicyAssignmentVersion}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<PolicyState>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PolicyState>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(PolicyState)} does not support '{options.Format}' format.");
            }
        }

        PolicyState IPersistableModel<PolicyState>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PolicyState>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializePolicyState(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(PolicyState)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<PolicyState>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
