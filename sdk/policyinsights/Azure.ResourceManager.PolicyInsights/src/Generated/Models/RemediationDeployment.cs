// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure;

namespace Azure.ResourceManager.PolicyInsights.Models
{
    /// <summary>
    /// Details of a single deployment created by the remediation.
    /// Serialized Name: RemediationDeployment
    /// </summary>
    public partial class RemediationDeployment
    {
        /// <summary> Initializes a new instance of RemediationDeployment. </summary>
        internal RemediationDeployment()
        {
        }

        /// <summary> Initializes a new instance of RemediationDeployment. </summary>
        /// <param name="remediatedResourceId">
        /// Resource ID of the resource that is being remediated by the deployment.
        /// Serialized Name: RemediationDeployment.remediatedResourceId
        /// </param>
        /// <param name="deploymentId">
        /// Resource ID of the template deployment that will remediate the resource.
        /// Serialized Name: RemediationDeployment.deploymentId
        /// </param>
        /// <param name="status">
        /// Status of the remediation deployment.
        /// Serialized Name: RemediationDeployment.status
        /// </param>
        /// <param name="resourceLocation">
        /// Location of the resource that is being remediated.
        /// Serialized Name: RemediationDeployment.resourceLocation
        /// </param>
        /// <param name="error">
        /// Error encountered while remediated the resource.
        /// Serialized Name: RemediationDeployment.error
        /// </param>
        /// <param name="createdOn">
        /// The time at which the remediation was created.
        /// Serialized Name: RemediationDeployment.createdOn
        /// </param>
        /// <param name="lastUpdatedOn">
        /// The time at which the remediation deployment was last updated.
        /// Serialized Name: RemediationDeployment.lastUpdatedOn
        /// </param>
        internal RemediationDeployment(string remediatedResourceId, string deploymentId, string status, string resourceLocation, ResponseError error, DateTimeOffset? createdOn, DateTimeOffset? lastUpdatedOn)
        {
            RemediatedResourceId = remediatedResourceId;
            DeploymentId = deploymentId;
            Status = status;
            ResourceLocation = resourceLocation;
            Error = error;
            CreatedOn = createdOn;
            LastUpdatedOn = lastUpdatedOn;
        }

        /// <summary>
        /// Resource ID of the resource that is being remediated by the deployment.
        /// Serialized Name: RemediationDeployment.remediatedResourceId
        /// </summary>
        public string RemediatedResourceId { get; }
        /// <summary>
        /// Resource ID of the template deployment that will remediate the resource.
        /// Serialized Name: RemediationDeployment.deploymentId
        /// </summary>
        public string DeploymentId { get; }
        /// <summary>
        /// Status of the remediation deployment.
        /// Serialized Name: RemediationDeployment.status
        /// </summary>
        public string Status { get; }
        /// <summary>
        /// Location of the resource that is being remediated.
        /// Serialized Name: RemediationDeployment.resourceLocation
        /// </summary>
        public string ResourceLocation { get; }
        /// <summary>
        /// Error encountered while remediated the resource.
        /// Serialized Name: RemediationDeployment.error
        /// </summary>
        public ResponseError Error { get; }
        /// <summary>
        /// The time at which the remediation was created.
        /// Serialized Name: RemediationDeployment.createdOn
        /// </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary>
        /// The time at which the remediation deployment was last updated.
        /// Serialized Name: RemediationDeployment.lastUpdatedOn
        /// </summary>
        public DateTimeOffset? LastUpdatedOn { get; }
    }
}
