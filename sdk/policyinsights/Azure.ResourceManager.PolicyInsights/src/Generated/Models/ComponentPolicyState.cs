// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.PolicyInsights.Models
{
    /// <summary> Component Policy State record. </summary>
    public partial class ComponentPolicyState
    {
        /// <summary> Initializes a new instance of <see cref="ComponentPolicyState"/>. </summary>
        internal ComponentPolicyState()
        {
            PolicyDefinitionGroupNames = new ChangeTrackingList<string>();
            AdditionalProperties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="ComponentPolicyState"/>. </summary>
        /// <param name="odataId"> OData entity ID; always set to null since component policy state records do not have an entity ID. </param>
        /// <param name="odataContext"> OData context string; used by OData clients to resolve type information based on metadata. </param>
        /// <param name="timestamp"> Timestamp for the component policy state record. </param>
        /// <param name="componentId"> Component Id. </param>
        /// <param name="componentType"> Component type. </param>
        /// <param name="componentName"> Component name. </param>
        /// <param name="resourceId"> Resource ID. </param>
        /// <param name="policyAssignmentId"> Policy assignment ID. </param>
        /// <param name="policyDefinitionId"> Policy definition ID. </param>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="resourceLocation"> Resource location. </param>
        /// <param name="resourceGroup"> Resource group name. </param>
        /// <param name="policyAssignmentName"> Policy assignment name. </param>
        /// <param name="policyAssignmentOwner"> Policy assignment owner. </param>
        /// <param name="policyAssignmentParameters"> Policy assignment parameters. </param>
        /// <param name="policyAssignmentScope"> Policy assignment scope. </param>
        /// <param name="policyDefinitionName"> Policy definition name. </param>
        /// <param name="policyDefinitionAction"> Policy definition action, i.e. effect. </param>
        /// <param name="policyDefinitionCategory"> Policy definition category. </param>
        /// <param name="policySetDefinitionId"> Policy set definition ID, if the policy assignment is for a policy set. </param>
        /// <param name="policySetDefinitionName"> Policy set definition name, if the policy assignment is for a policy set. </param>
        /// <param name="policySetDefinitionOwner"> Policy set definition owner, if the policy assignment is for a policy set. </param>
        /// <param name="policySetDefinitionCategory"> Policy set definition category, if the policy assignment is for a policy set. </param>
        /// <param name="policySetDefinitionParameters"> Policy set definition parameters, if the policy assignment is for a policy set. </param>
        /// <param name="policyDefinitionReferenceId"> Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set. </param>
        /// <param name="complianceState"> Compliance state of the resource. </param>
        /// <param name="policyEvaluationDetails"> Policy evaluation details. This is only included in the response if the request contains $expand=PolicyEvaluationDetails. </param>
        /// <param name="policyDefinitionGroupNames"> Policy definition group names. </param>
        /// <param name="policyDefinitionVersion"> Evaluated policy definition version. </param>
        /// <param name="policySetDefinitionVersion"> Evaluated policy set definition version. </param>
        /// <param name="policyAssignmentVersion"> Evaluated policy assignment version. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        internal ComponentPolicyState(string odataId, string odataContext, DateTimeOffset? timestamp, string componentId, string componentType, string componentName, string resourceId, string policyAssignmentId, string policyDefinitionId, string subscriptionId, string resourceType, string resourceLocation, string resourceGroup, string policyAssignmentName, string policyAssignmentOwner, string policyAssignmentParameters, string policyAssignmentScope, string policyDefinitionName, string policyDefinitionAction, string policyDefinitionCategory, string policySetDefinitionId, string policySetDefinitionName, string policySetDefinitionOwner, string policySetDefinitionCategory, string policySetDefinitionParameters, string policyDefinitionReferenceId, string complianceState, ComponentPolicyEvaluationDetails policyEvaluationDetails, IReadOnlyList<string> policyDefinitionGroupNames, string policyDefinitionVersion, string policySetDefinitionVersion, string policyAssignmentVersion, IReadOnlyDictionary<string, BinaryData> additionalProperties)
        {
            ODataId = odataId;
            ODataContext = odataContext;
            Timestamp = timestamp;
            ComponentId = componentId;
            ComponentType = componentType;
            ComponentName = componentName;
            ResourceId = resourceId;
            PolicyAssignmentId = policyAssignmentId;
            PolicyDefinitionId = policyDefinitionId;
            SubscriptionId = subscriptionId;
            ResourceType = resourceType;
            ResourceLocation = resourceLocation;
            ResourceGroup = resourceGroup;
            PolicyAssignmentName = policyAssignmentName;
            PolicyAssignmentOwner = policyAssignmentOwner;
            PolicyAssignmentParameters = policyAssignmentParameters;
            PolicyAssignmentScope = policyAssignmentScope;
            PolicyDefinitionName = policyDefinitionName;
            PolicyDefinitionAction = policyDefinitionAction;
            PolicyDefinitionCategory = policyDefinitionCategory;
            PolicySetDefinitionId = policySetDefinitionId;
            PolicySetDefinitionName = policySetDefinitionName;
            PolicySetDefinitionOwner = policySetDefinitionOwner;
            PolicySetDefinitionCategory = policySetDefinitionCategory;
            PolicySetDefinitionParameters = policySetDefinitionParameters;
            PolicyDefinitionReferenceId = policyDefinitionReferenceId;
            ComplianceState = complianceState;
            PolicyEvaluationDetails = policyEvaluationDetails;
            PolicyDefinitionGroupNames = policyDefinitionGroupNames;
            PolicyDefinitionVersion = policyDefinitionVersion;
            PolicySetDefinitionVersion = policySetDefinitionVersion;
            PolicyAssignmentVersion = policyAssignmentVersion;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> OData entity ID; always set to null since component policy state records do not have an entity ID. </summary>
        public string ODataId { get; }
        /// <summary> OData context string; used by OData clients to resolve type information based on metadata. </summary>
        public string ODataContext { get; }
        /// <summary> Timestamp for the component policy state record. </summary>
        public DateTimeOffset? Timestamp { get; }
        /// <summary> Component Id. </summary>
        public string ComponentId { get; }
        /// <summary> Component type. </summary>
        public string ComponentType { get; }
        /// <summary> Component name. </summary>
        public string ComponentName { get; }
        /// <summary> Resource ID. </summary>
        public string ResourceId { get; }
        /// <summary> Policy assignment ID. </summary>
        public string PolicyAssignmentId { get; }
        /// <summary> Policy definition ID. </summary>
        public string PolicyDefinitionId { get; }
        /// <summary> Subscription ID. </summary>
        public string SubscriptionId { get; }
        /// <summary> Resource type. </summary>
        public string ResourceType { get; }
        /// <summary> Resource location. </summary>
        public string ResourceLocation { get; }
        /// <summary> Resource group name. </summary>
        public string ResourceGroup { get; }
        /// <summary> Policy assignment name. </summary>
        public string PolicyAssignmentName { get; }
        /// <summary> Policy assignment owner. </summary>
        public string PolicyAssignmentOwner { get; }
        /// <summary> Policy assignment parameters. </summary>
        public string PolicyAssignmentParameters { get; }
        /// <summary> Policy assignment scope. </summary>
        public string PolicyAssignmentScope { get; }
        /// <summary> Policy definition name. </summary>
        public string PolicyDefinitionName { get; }
        /// <summary> Policy definition action, i.e. effect. </summary>
        public string PolicyDefinitionAction { get; }
        /// <summary> Policy definition category. </summary>
        public string PolicyDefinitionCategory { get; }
        /// <summary> Policy set definition ID, if the policy assignment is for a policy set. </summary>
        public string PolicySetDefinitionId { get; }
        /// <summary> Policy set definition name, if the policy assignment is for a policy set. </summary>
        public string PolicySetDefinitionName { get; }
        /// <summary> Policy set definition owner, if the policy assignment is for a policy set. </summary>
        public string PolicySetDefinitionOwner { get; }
        /// <summary> Policy set definition category, if the policy assignment is for a policy set. </summary>
        public string PolicySetDefinitionCategory { get; }
        /// <summary> Policy set definition parameters, if the policy assignment is for a policy set. </summary>
        public string PolicySetDefinitionParameters { get; }
        /// <summary> Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set. </summary>
        public string PolicyDefinitionReferenceId { get; }
        /// <summary> Compliance state of the resource. </summary>
        public string ComplianceState { get; }
        /// <summary> Policy evaluation details. This is only included in the response if the request contains $expand=PolicyEvaluationDetails. </summary>
        public ComponentPolicyEvaluationDetails PolicyEvaluationDetails { get; }
        /// <summary> Policy definition group names. </summary>
        public IReadOnlyList<string> PolicyDefinitionGroupNames { get; }
        /// <summary> Evaluated policy definition version. </summary>
        public string PolicyDefinitionVersion { get; }
        /// <summary> Evaluated policy set definition version. </summary>
        public string PolicySetDefinitionVersion { get; }
        /// <summary> Evaluated policy assignment version. </summary>
        public string PolicyAssignmentVersion { get; }
        /// <summary>
        /// Additional Properties
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> AdditionalProperties { get; }
    }
}
