// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PolicyInsights.Models
{
    public partial class PolicySummaryResults
    {
        internal static PolicySummaryResults DeserializePolicySummaryResults(JsonElement element)
        {
            Optional<Uri> queryResultsUri = default;
            Optional<int> nonCompliantResources = default;
            Optional<int> nonCompliantPolicies = default;
            Optional<IReadOnlyList<ComplianceDetail>> resourceDetails = default;
            Optional<IReadOnlyList<ComplianceDetail>> policyDetails = default;
            Optional<IReadOnlyList<ComplianceDetail>> policyGroupDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("queryResultsUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        queryResultsUri = null;
                        continue;
                    }
                    queryResultsUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("nonCompliantResources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nonCompliantResources = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("nonCompliantPolicies"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nonCompliantPolicies = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("resourceDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ComplianceDetail> array = new List<ComplianceDetail>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ComplianceDetail.DeserializeComplianceDetail(item));
                    }
                    resourceDetails = array;
                    continue;
                }
                if (property.NameEquals("policyDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ComplianceDetail> array = new List<ComplianceDetail>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ComplianceDetail.DeserializeComplianceDetail(item));
                    }
                    policyDetails = array;
                    continue;
                }
                if (property.NameEquals("policyGroupDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ComplianceDetail> array = new List<ComplianceDetail>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ComplianceDetail.DeserializeComplianceDetail(item));
                    }
                    policyGroupDetails = array;
                    continue;
                }
            }
            return new PolicySummaryResults(queryResultsUri.Value, Optional.ToNullable(nonCompliantResources), Optional.ToNullable(nonCompliantPolicies), Optional.ToList(resourceDetails), Optional.ToList(policyDetails), Optional.ToList(policyGroupDetails));
        }
    }
}
