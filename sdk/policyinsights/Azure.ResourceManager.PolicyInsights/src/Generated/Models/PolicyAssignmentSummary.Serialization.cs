// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PolicyInsights.Models
{
    public partial class PolicyAssignmentSummary
    {
        internal static PolicyAssignmentSummary DeserializePolicyAssignmentSummary(JsonElement element)
        {
            Optional<ResourceIdentifier> policyAssignmentId = default;
            Optional<ResourceIdentifier> policySetDefinitionId = default;
            Optional<PolicySummaryResults> results = default;
            Optional<IReadOnlyList<PolicyDefinitionSummary>> policyDefinitions = default;
            Optional<IReadOnlyList<PolicyGroupSummary>> policyGroups = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("policyAssignmentId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    policyAssignmentId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("policySetDefinitionId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    policySetDefinitionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("results"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    results = PolicySummaryResults.DeserializePolicySummaryResults(property.Value);
                    continue;
                }
                if (property.NameEquals("policyDefinitions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PolicyDefinitionSummary> array = new List<PolicyDefinitionSummary>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PolicyDefinitionSummary.DeserializePolicyDefinitionSummary(item));
                    }
                    policyDefinitions = array;
                    continue;
                }
                if (property.NameEquals("policyGroups"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PolicyGroupSummary> array = new List<PolicyGroupSummary>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PolicyGroupSummary.DeserializePolicyGroupSummary(item));
                    }
                    policyGroups = array;
                    continue;
                }
            }
            return new PolicyAssignmentSummary(policyAssignmentId.Value, policySetDefinitionId.Value, results.Value, Optional.ToList(policyDefinitions), Optional.ToList(policyGroups));
        }
    }
}
