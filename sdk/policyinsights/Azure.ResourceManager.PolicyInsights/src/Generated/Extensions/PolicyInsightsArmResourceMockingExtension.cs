// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.PolicyInsights;

namespace Azure.ResourceManager.PolicyInsights.Mocking
{
    /// <summary> A class to add extension methods to ArmResource. </summary>
    public partial class PolicyInsightsArmResourceMockingExtension : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="PolicyInsightsArmResourceMockingExtension"/> class for mocking. </summary>
        protected PolicyInsightsArmResourceMockingExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PolicyInsightsArmResourceMockingExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PolicyInsightsArmResourceMockingExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of PolicyRemediationResources in the ArmResource. </summary>
        /// <returns> An object representing collection of PolicyRemediationResources and their operations over a PolicyRemediationResource. </returns>
        public virtual PolicyRemediationCollection GetPolicyRemediations()
        {
            return GetCachedClient(Client => new PolicyRemediationCollection(Client, Id));
        }

        /// <summary>
        /// Gets an existing remediation at resource scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Remediations_GetAtResource</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="remediationName"> The name of the remediation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="remediationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="remediationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PolicyRemediationResource>> GetPolicyRemediationAsync(string remediationName, CancellationToken cancellationToken = default)
        {
            return await GetPolicyRemediations().GetAsync(remediationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an existing remediation at resource scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Remediations_GetAtResource</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="remediationName"> The name of the remediation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="remediationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="remediationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<PolicyRemediationResource> GetPolicyRemediation(string remediationName, CancellationToken cancellationToken = default)
        {
            return GetPolicyRemediations().Get(remediationName, cancellationToken);
        }

        /// <summary> Gets a collection of PolicyAttestationResources in the ArmResource. </summary>
        /// <returns> An object representing collection of PolicyAttestationResources and their operations over a PolicyAttestationResource. </returns>
        public virtual PolicyAttestationCollection GetPolicyAttestations()
        {
            return GetCachedClient(Client => new PolicyAttestationCollection(Client, Id));
        }

        /// <summary>
        /// Gets an existing attestation at resource scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Attestations_GetAtResource</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="attestationName"> The name of the attestation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="attestationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="attestationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PolicyAttestationResource>> GetPolicyAttestationAsync(string attestationName, CancellationToken cancellationToken = default)
        {
            return await GetPolicyAttestations().GetAsync(attestationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an existing attestation at resource scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Attestations_GetAtResource</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="attestationName"> The name of the attestation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="attestationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="attestationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<PolicyAttestationResource> GetPolicyAttestation(string attestationName, CancellationToken cancellationToken = default)
        {
            return GetPolicyAttestations().Get(attestationName, cancellationToken);
        }
    }
}
