// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.PolicyInsights.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.PolicyInsights
{
    /// <summary>
    /// A Class representing a SubscriptionRemediation along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="SubscriptionRemediationResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetSubscriptionRemediationResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource" /> using the GetSubscriptionRemediation method.
    /// </summary>
    public partial class SubscriptionRemediationResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="SubscriptionRemediationResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string remediationName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _subscriptionRemediationRemediationsClientDiagnostics;
        private readonly RemediationsRestOperations _subscriptionRemediationRemediationsRestClient;
        private readonly RemediationData _data;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionRemediationResource"/> class for mocking. </summary>
        protected SubscriptionRemediationResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "SubscriptionRemediationResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal SubscriptionRemediationResource(ArmClient client, RemediationData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionRemediationResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionRemediationResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _subscriptionRemediationRemediationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.PolicyInsights", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string subscriptionRemediationRemediationsApiVersion);
            _subscriptionRemediationRemediationsRestClient = new RemediationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, subscriptionRemediationRemediationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.PolicyInsights/remediations";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual RemediationData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an existing remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}
        /// Operation Id: Remediations_GetAtSubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SubscriptionRemediationResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.Get");
            scope.Start();
            try
            {
                var response = await _subscriptionRemediationRemediationsRestClient.GetAtSubscriptionAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionRemediationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an existing remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}
        /// Operation Id: Remediations_GetAtSubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubscriptionRemediationResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.Get");
            scope.Start();
            try
            {
                var response = _subscriptionRemediationRemediationsRestClient.GetAtSubscription(Id.SubscriptionId, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionRemediationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes an existing remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}
        /// Operation Id: Remediations_DeleteAtSubscription
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<SubscriptionRemediationResource>> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.Delete");
            scope.Start();
            try
            {
                var response = await _subscriptionRemediationRemediationsRestClient.DeleteAtSubscriptionAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new PolicyInsightsArmOperation<SubscriptionRemediationResource>(Response.FromValue(new SubscriptionRemediationResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes an existing remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}
        /// Operation Id: Remediations_DeleteAtSubscription
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<SubscriptionRemediationResource> Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.Delete");
            scope.Start();
            try
            {
                var response = _subscriptionRemediationRemediationsRestClient.DeleteAtSubscription(Id.SubscriptionId, Id.Name, cancellationToken);
                var operation = new PolicyInsightsArmOperation<SubscriptionRemediationResource>(Response.FromValue(new SubscriptionRemediationResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}
        /// Operation Id: Remediations_CreateOrUpdateAtSubscription
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The remediation parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<SubscriptionRemediationResource>> UpdateAsync(WaitUntil waitUntil, RemediationData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.Update");
            scope.Start();
            try
            {
                var response = await _subscriptionRemediationRemediationsRestClient.CreateOrUpdateAtSubscriptionAsync(Id.SubscriptionId, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new PolicyInsightsArmOperation<SubscriptionRemediationResource>(Response.FromValue(new SubscriptionRemediationResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}
        /// Operation Id: Remediations_CreateOrUpdateAtSubscription
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The remediation parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<SubscriptionRemediationResource> Update(WaitUntil waitUntil, RemediationData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.Update");
            scope.Start();
            try
            {
                var response = _subscriptionRemediationRemediationsRestClient.CreateOrUpdateAtSubscription(Id.SubscriptionId, Id.Name, data, cancellationToken);
                var operation = new PolicyInsightsArmOperation<SubscriptionRemediationResource>(Response.FromValue(new SubscriptionRemediationResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all deployments for a remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments
        /// Operation Id: Remediations_ListDeploymentsAtSubscription
        /// </summary>
        /// <param name="queryOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RemediationDeployment" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RemediationDeployment> GetDeploymentsAtSubscriptionAsync(QueryOptions queryOptions = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<RemediationDeployment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.GetDeploymentsAtSubscription");
                scope.Start();
                try
                {
                    var response = await _subscriptionRemediationRemediationsRestClient.ListDeploymentsAtSubscriptionAsync(Id.SubscriptionId, Id.Name, queryOptions, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<RemediationDeployment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.GetDeploymentsAtSubscription");
                scope.Start();
                try
                {
                    var response = await _subscriptionRemediationRemediationsRestClient.ListDeploymentsAtSubscriptionNextPageAsync(nextLink, Id.SubscriptionId, Id.Name, queryOptions, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all deployments for a remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments
        /// Operation Id: Remediations_ListDeploymentsAtSubscription
        /// </summary>
        /// <param name="queryOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RemediationDeployment" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RemediationDeployment> GetDeploymentsAtSubscription(QueryOptions queryOptions = null, CancellationToken cancellationToken = default)
        {
            Page<RemediationDeployment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.GetDeploymentsAtSubscription");
                scope.Start();
                try
                {
                    var response = _subscriptionRemediationRemediationsRestClient.ListDeploymentsAtSubscription(Id.SubscriptionId, Id.Name, queryOptions, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<RemediationDeployment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.GetDeploymentsAtSubscription");
                scope.Start();
                try
                {
                    var response = _subscriptionRemediationRemediationsRestClient.ListDeploymentsAtSubscriptionNextPage(nextLink, Id.SubscriptionId, Id.Name, queryOptions, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Cancels a remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel
        /// Operation Id: Remediations_CancelAtSubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SubscriptionRemediationResource>> CancelAtSubscriptionAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.CancelAtSubscription");
            scope.Start();
            try
            {
                var response = await _subscriptionRemediationRemediationsRestClient.CancelAtSubscriptionAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SubscriptionRemediationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Cancels a remediation at subscription scope.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel
        /// Operation Id: Remediations_CancelAtSubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubscriptionRemediationResource> CancelAtSubscription(CancellationToken cancellationToken = default)
        {
            using var scope = _subscriptionRemediationRemediationsClientDiagnostics.CreateScope("SubscriptionRemediationResource.CancelAtSubscription");
            scope.Start();
            try
            {
                var response = _subscriptionRemediationRemediationsRestClient.CancelAtSubscription(Id.SubscriptionId, Id.Name, cancellationToken);
                return Response.FromValue(new SubscriptionRemediationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
