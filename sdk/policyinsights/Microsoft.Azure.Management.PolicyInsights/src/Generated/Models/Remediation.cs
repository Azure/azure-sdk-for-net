// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The remediation definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Remediation : IResource
    {
        /// <summary>
        /// Initializes a new instance of the Remediation class.
        /// </summary>
        public Remediation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Remediation class.
        /// </summary>
        /// <param name="policyAssignmentId">The resource ID of the policy
        /// assignment that should be remediated.</param>
        /// <param name="policyDefinitionReferenceId">The policy definition
        /// reference ID of the individual definition that should be
        /// remediated. Required when the policy assignment being remediated
        /// assigns a policy set definition.</param>
        /// <param name="resourceDiscoveryMode">The way resources to remediate
        /// are discovered. Defaults to ExistingNonCompliant if not specified.
        /// Possible values include: 'ExistingNonCompliant',
        /// 'ReEvaluateCompliance'</param>
        /// <param name="provisioningState">The status of the
        /// remediation.</param>
        /// <param name="createdOn">The time at which the remediation was
        /// created.</param>
        /// <param name="lastUpdatedOn">The time at which the remediation was
        /// last updated.</param>
        /// <param name="filters">The filters that will be applied to determine
        /// which resources to remediate.</param>
        /// <param name="deploymentStatus">The deployment status summary for
        /// all deployments created by the remediation.</param>
        /// <param name="id">The ID of the remediation.</param>
        /// <param name="type">The type of the remediation.</param>
        /// <param name="name">The name of the remediation.</param>
        public Remediation(string policyAssignmentId = default(string), string policyDefinitionReferenceId = default(string), string resourceDiscoveryMode = default(string), string provisioningState = default(string), System.DateTime? createdOn = default(System.DateTime?), System.DateTime? lastUpdatedOn = default(System.DateTime?), RemediationFilters filters = default(RemediationFilters), RemediationDeploymentSummary deploymentStatus = default(RemediationDeploymentSummary), string id = default(string), string type = default(string), string name = default(string))
        {
            PolicyAssignmentId = policyAssignmentId;
            PolicyDefinitionReferenceId = policyDefinitionReferenceId;
            ResourceDiscoveryMode = resourceDiscoveryMode;
            ProvisioningState = provisioningState;
            CreatedOn = createdOn;
            LastUpdatedOn = lastUpdatedOn;
            Filters = filters;
            DeploymentStatus = deploymentStatus;
            Id = id;
            Type = type;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource ID of the policy assignment that should
        /// be remediated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyAssignmentId")]
        public string PolicyAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets the policy definition reference ID of the individual
        /// definition that should be remediated. Required when the policy
        /// assignment being remediated assigns a policy set definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyDefinitionReferenceId")]
        public string PolicyDefinitionReferenceId { get; set; }

        /// <summary>
        /// Gets or sets the way resources to remediate are discovered.
        /// Defaults to ExistingNonCompliant if not specified. Possible values
        /// include: 'ExistingNonCompliant', 'ReEvaluateCompliance'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceDiscoveryMode")]
        public string ResourceDiscoveryMode { get; set; }

        /// <summary>
        /// Gets the status of the remediation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the time at which the remediation was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdOn")]
        public System.DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Gets the time at which the remediation was last updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastUpdatedOn")]
        public System.DateTime? LastUpdatedOn { get; private set; }

        /// <summary>
        /// Gets or sets the filters that will be applied to determine which
        /// resources to remediate.
        /// </summary>
        [JsonProperty(PropertyName = "properties.filters")]
        public RemediationFilters Filters { get; set; }

        /// <summary>
        /// Gets the deployment status summary for all deployments created by
        /// the remediation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.deploymentStatus")]
        public RemediationDeploymentSummary DeploymentStatus { get; private set; }

        /// <summary>
        /// Gets the ID of the remediation.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the type of the remediation.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets the name of the remediation.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

    }
}
