// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The check policy restrictions parameters describing the resource that
    /// is being evaluated.
    /// </summary>
    public partial class CheckRestrictionsRequest
    {
        /// <summary>
        /// Initializes a new instance of the CheckRestrictionsRequest class.
        /// </summary>
        public CheckRestrictionsRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CheckRestrictionsRequest class.
        /// </summary>
        /// <param name="resourceDetails">The information about the resource
        /// that will be evaluated.</param>
        /// <param name="pendingFields">The list of fields and values that
        /// should be evaluated for potential restrictions.</param>
        public CheckRestrictionsRequest(CheckRestrictionsResourceDetails resourceDetails, IList<PendingField> pendingFields = default(IList<PendingField>))
        {
            ResourceDetails = resourceDetails;
            PendingFields = pendingFields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the information about the resource that will be
        /// evaluated.
        /// </summary>
        [JsonProperty(PropertyName = "resourceDetails")]
        public CheckRestrictionsResourceDetails ResourceDetails { get; set; }

        /// <summary>
        /// Gets or sets the list of fields and values that should be evaluated
        /// for potential restrictions.
        /// </summary>
        [JsonProperty(PropertyName = "pendingFields")]
        public IList<PendingField> PendingFields { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResourceDetails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceDetails");
            }
            if (ResourceDetails != null)
            {
                ResourceDetails.Validate();
            }
            if (PendingFields != null)
            {
                foreach (var element in PendingFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
