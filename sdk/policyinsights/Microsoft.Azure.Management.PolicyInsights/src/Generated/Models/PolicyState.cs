// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Policy state record.
    /// </summary>
    public partial class PolicyState
    {
        /// <summary>
        /// Initializes a new instance of the PolicyState class.
        /// </summary>
        public PolicyState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyState class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="odataid">OData entity ID; always set to null since
        /// policy state records do not have an entity ID.</param>
        /// <param name="odatacontext">OData context string; used by OData
        /// clients to resolve type information based on metadata.</param>
        /// <param name="timestamp">Timestamp for the policy state
        /// record.</param>
        /// <param name="resourceId">Resource ID.</param>
        /// <param name="policyAssignmentId">Policy assignment ID.</param>
        /// <param name="policyDefinitionId">Policy definition ID.</param>
        /// <param name="effectiveParameters">Effective parameters for the
        /// policy assignment.</param>
        /// <param name="isCompliant">Flag which states whether the resource is
        /// compliant against the policy assignment it was evaluated against.
        /// This property is deprecated; please use ComplianceState
        /// instead.</param>
        /// <param name="subscriptionId">Subscription ID.</param>
        /// <param name="resourceType">Resource type.</param>
        /// <param name="resourceLocation">Resource location.</param>
        /// <param name="resourceGroup">Resource group name.</param>
        /// <param name="resourceTags">List of resource tags.</param>
        /// <param name="policyAssignmentName">Policy assignment name.</param>
        /// <param name="policyAssignmentOwner">Policy assignment
        /// owner.</param>
        /// <param name="policyAssignmentParameters">Policy assignment
        /// parameters.</param>
        /// <param name="policyAssignmentScope">Policy assignment
        /// scope.</param>
        /// <param name="policyDefinitionName">Policy definition name.</param>
        /// <param name="policyDefinitionAction">Policy definition action, i.e.
        /// effect.</param>
        /// <param name="policyDefinitionCategory">Policy definition
        /// category.</param>
        /// <param name="policySetDefinitionId">Policy set definition ID, if
        /// the policy assignment is for a policy set.</param>
        /// <param name="policySetDefinitionName">Policy set definition name,
        /// if the policy assignment is for a policy set.</param>
        /// <param name="policySetDefinitionOwner">Policy set definition owner,
        /// if the policy assignment is for a policy set.</param>
        /// <param name="policySetDefinitionCategory">Policy set definition
        /// category, if the policy assignment is for a policy set.</param>
        /// <param name="policySetDefinitionParameters">Policy set definition
        /// parameters, if the policy assignment is for a policy set.</param>
        /// <param name="managementGroupIds">Comma separated list of management
        /// group IDs, which represent the hierarchy of the management groups
        /// the resource is under.</param>
        /// <param name="policyDefinitionReferenceId">Reference ID for the
        /// policy definition inside the policy set, if the policy assignment
        /// is for a policy set.</param>
        /// <param name="complianceState">Compliance state of the
        /// resource.</param>
        /// <param name="policyEvaluationDetails">Policy evaluation
        /// details.</param>
        /// <param name="policyDefinitionGroupNames">Policy definition group
        /// names.</param>
        public PolicyState(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string odataid = default(string), string odatacontext = default(string), System.DateTime? timestamp = default(System.DateTime?), string resourceId = default(string), string policyAssignmentId = default(string), string policyDefinitionId = default(string), string effectiveParameters = default(string), bool? isCompliant = default(bool?), string subscriptionId = default(string), string resourceType = default(string), string resourceLocation = default(string), string resourceGroup = default(string), string resourceTags = default(string), string policyAssignmentName = default(string), string policyAssignmentOwner = default(string), string policyAssignmentParameters = default(string), string policyAssignmentScope = default(string), string policyDefinitionName = default(string), string policyDefinitionAction = default(string), string policyDefinitionCategory = default(string), string policySetDefinitionId = default(string), string policySetDefinitionName = default(string), string policySetDefinitionOwner = default(string), string policySetDefinitionCategory = default(string), string policySetDefinitionParameters = default(string), string managementGroupIds = default(string), string policyDefinitionReferenceId = default(string), string complianceState = default(string), PolicyEvaluationDetails policyEvaluationDetails = default(PolicyEvaluationDetails), IList<string> policyDefinitionGroupNames = default(IList<string>))
        {
            AdditionalProperties = additionalProperties;
            Odataid = odataid;
            Odatacontext = odatacontext;
            Timestamp = timestamp;
            ResourceId = resourceId;
            PolicyAssignmentId = policyAssignmentId;
            PolicyDefinitionId = policyDefinitionId;
            EffectiveParameters = effectiveParameters;
            IsCompliant = isCompliant;
            SubscriptionId = subscriptionId;
            ResourceType = resourceType;
            ResourceLocation = resourceLocation;
            ResourceGroup = resourceGroup;
            ResourceTags = resourceTags;
            PolicyAssignmentName = policyAssignmentName;
            PolicyAssignmentOwner = policyAssignmentOwner;
            PolicyAssignmentParameters = policyAssignmentParameters;
            PolicyAssignmentScope = policyAssignmentScope;
            PolicyDefinitionName = policyDefinitionName;
            PolicyDefinitionAction = policyDefinitionAction;
            PolicyDefinitionCategory = policyDefinitionCategory;
            PolicySetDefinitionId = policySetDefinitionId;
            PolicySetDefinitionName = policySetDefinitionName;
            PolicySetDefinitionOwner = policySetDefinitionOwner;
            PolicySetDefinitionCategory = policySetDefinitionCategory;
            PolicySetDefinitionParameters = policySetDefinitionParameters;
            ManagementGroupIds = managementGroupIds;
            PolicyDefinitionReferenceId = policyDefinitionReferenceId;
            ComplianceState = complianceState;
            PolicyEvaluationDetails = policyEvaluationDetails;
            PolicyDefinitionGroupNames = policyDefinitionGroupNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets oData entity ID; always set to null since policy state
        /// records do not have an entity ID.
        /// </summary>
        [JsonProperty(PropertyName = "@odata.id")]
        public string Odataid { get; set; }

        /// <summary>
        /// Gets or sets oData context string; used by OData clients to resolve
        /// type information based on metadata.
        /// </summary>
        [JsonProperty(PropertyName = "@odata.context")]
        public string Odatacontext { get; set; }

        /// <summary>
        /// Gets or sets timestamp for the policy state record.
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or sets resource ID.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets policy assignment ID.
        /// </summary>
        [JsonProperty(PropertyName = "policyAssignmentId")]
        public string PolicyAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets policy definition ID.
        /// </summary>
        [JsonProperty(PropertyName = "policyDefinitionId")]
        public string PolicyDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets effective parameters for the policy assignment.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveParameters")]
        public string EffectiveParameters { get; set; }

        /// <summary>
        /// Gets or sets flag which states whether the resource is compliant
        /// against the policy assignment it was evaluated against. This
        /// property is deprecated; please use ComplianceState instead.
        /// </summary>
        [JsonProperty(PropertyName = "isCompliant")]
        public bool? IsCompliant { get; set; }

        /// <summary>
        /// Gets or sets subscription ID.
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets resource type.
        /// </summary>
        [JsonProperty(PropertyName = "resourceType")]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or sets resource location.
        /// </summary>
        [JsonProperty(PropertyName = "resourceLocation")]
        public string ResourceLocation { get; set; }

        /// <summary>
        /// Gets or sets resource group name.
        /// </summary>
        [JsonProperty(PropertyName = "resourceGroup")]
        public string ResourceGroup { get; set; }

        /// <summary>
        /// Gets or sets list of resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "resourceTags")]
        public string ResourceTags { get; set; }

        /// <summary>
        /// Gets or sets policy assignment name.
        /// </summary>
        [JsonProperty(PropertyName = "policyAssignmentName")]
        public string PolicyAssignmentName { get; set; }

        /// <summary>
        /// Gets or sets policy assignment owner.
        /// </summary>
        [JsonProperty(PropertyName = "policyAssignmentOwner")]
        public string PolicyAssignmentOwner { get; set; }

        /// <summary>
        /// Gets or sets policy assignment parameters.
        /// </summary>
        [JsonProperty(PropertyName = "policyAssignmentParameters")]
        public string PolicyAssignmentParameters { get; set; }

        /// <summary>
        /// Gets or sets policy assignment scope.
        /// </summary>
        [JsonProperty(PropertyName = "policyAssignmentScope")]
        public string PolicyAssignmentScope { get; set; }

        /// <summary>
        /// Gets or sets policy definition name.
        /// </summary>
        [JsonProperty(PropertyName = "policyDefinitionName")]
        public string PolicyDefinitionName { get; set; }

        /// <summary>
        /// Gets or sets policy definition action, i.e. effect.
        /// </summary>
        [JsonProperty(PropertyName = "policyDefinitionAction")]
        public string PolicyDefinitionAction { get; set; }

        /// <summary>
        /// Gets or sets policy definition category.
        /// </summary>
        [JsonProperty(PropertyName = "policyDefinitionCategory")]
        public string PolicyDefinitionCategory { get; set; }

        /// <summary>
        /// Gets or sets policy set definition ID, if the policy assignment is
        /// for a policy set.
        /// </summary>
        [JsonProperty(PropertyName = "policySetDefinitionId")]
        public string PolicySetDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets policy set definition name, if the policy assignment
        /// is for a policy set.
        /// </summary>
        [JsonProperty(PropertyName = "policySetDefinitionName")]
        public string PolicySetDefinitionName { get; set; }

        /// <summary>
        /// Gets or sets policy set definition owner, if the policy assignment
        /// is for a policy set.
        /// </summary>
        [JsonProperty(PropertyName = "policySetDefinitionOwner")]
        public string PolicySetDefinitionOwner { get; set; }

        /// <summary>
        /// Gets or sets policy set definition category, if the policy
        /// assignment is for a policy set.
        /// </summary>
        [JsonProperty(PropertyName = "policySetDefinitionCategory")]
        public string PolicySetDefinitionCategory { get; set; }

        /// <summary>
        /// Gets or sets policy set definition parameters, if the policy
        /// assignment is for a policy set.
        /// </summary>
        [JsonProperty(PropertyName = "policySetDefinitionParameters")]
        public string PolicySetDefinitionParameters { get; set; }

        /// <summary>
        /// Gets or sets comma separated list of management group IDs, which
        /// represent the hierarchy of the management groups the resource is
        /// under.
        /// </summary>
        [JsonProperty(PropertyName = "managementGroupIds")]
        public string ManagementGroupIds { get; set; }

        /// <summary>
        /// Gets or sets reference ID for the policy definition inside the
        /// policy set, if the policy assignment is for a policy set.
        /// </summary>
        [JsonProperty(PropertyName = "policyDefinitionReferenceId")]
        public string PolicyDefinitionReferenceId { get; set; }

        /// <summary>
        /// Gets or sets compliance state of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "complianceState")]
        public string ComplianceState { get; set; }

        /// <summary>
        /// Gets or sets policy evaluation details.
        /// </summary>
        [JsonProperty(PropertyName = "policyEvaluationDetails")]
        public PolicyEvaluationDetails PolicyEvaluationDetails { get; set; }

        /// <summary>
        /// Gets or sets policy definition group names.
        /// </summary>
        [JsonProperty(PropertyName = "policyDefinitionGroupNames")]
        public IList<string> PolicyDefinitionGroupNames { get; set; }

    }
}
