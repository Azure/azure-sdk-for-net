// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PolicyStatesOperations.
    /// </summary>
    public static partial class PolicyStatesOperationsExtensions
    {
            /// <summary>
            /// Queries policy states for the resources under the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='managementGroupName'>
            /// Management group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PolicyStatesQueryResults ListQueryResultsForManagementGroup(this IPolicyStatesOperations operations, string policyStatesResource, string managementGroupName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForManagementGroupAsync(policyStatesResource, managementGroupName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy states for the resources under the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='managementGroupName'>
            /// Management group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyStatesQueryResults> ListQueryResultsForManagementGroupAsync(this IPolicyStatesOperations operations, string policyStatesResource, string managementGroupName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForManagementGroupWithHttpMessagesAsync(policyStatesResource, managementGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summarizes policy states for the resources under the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// Management group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static SummarizeResults SummarizeForManagementGroup(this IPolicyStatesOperations operations, string managementGroupName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.SummarizeForManagementGroupAsync(managementGroupName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summarizes policy states for the resources under the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupName'>
            /// Management group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummarizeResults> SummarizeForManagementGroupAsync(this IPolicyStatesOperations operations, string managementGroupName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummarizeForManagementGroupWithHttpMessagesAsync(managementGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy states for the resources under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PolicyStatesQueryResults ListQueryResultsForSubscription(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForSubscriptionAsync(policyStatesResource, subscriptionId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy states for the resources under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyStatesQueryResults> ListQueryResultsForSubscriptionAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForSubscriptionWithHttpMessagesAsync(policyStatesResource, subscriptionId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summarizes policy states for the resources under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static SummarizeResults SummarizeForSubscription(this IPolicyStatesOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.SummarizeForSubscriptionAsync(subscriptionId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summarizes policy states for the resources under the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummarizeResults> SummarizeForSubscriptionAsync(this IPolicyStatesOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummarizeForSubscriptionWithHttpMessagesAsync(subscriptionId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy states for the resources under the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PolicyStatesQueryResults ListQueryResultsForResourceGroup(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForResourceGroupAsync(policyStatesResource, subscriptionId, resourceGroupName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy states for the resources under the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyStatesQueryResults> ListQueryResultsForResourceGroupAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceGroupWithHttpMessagesAsync(policyStatesResource, subscriptionId, resourceGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summarizes policy states for the resources under the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static SummarizeResults SummarizeForResourceGroup(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.SummarizeForResourceGroupAsync(subscriptionId, resourceGroupName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summarizes policy states for the resources under the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummarizeResults> SummarizeForResourceGroupAsync(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummarizeForResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy states for the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PolicyStatesQueryResults ListQueryResultsForResource(this IPolicyStatesOperations operations, string policyStatesResource, string resourceId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForResourceAsync(policyStatesResource, resourceId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy states for the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyStatesQueryResults> ListQueryResultsForResourceAsync(this IPolicyStatesOperations operations, string policyStatesResource, string resourceId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceWithHttpMessagesAsync(policyStatesResource, resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summarizes policy states for the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static SummarizeResults SummarizeForResource(this IPolicyStatesOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.SummarizeForResourceAsync(resourceId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summarizes policy states for the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummarizeResults> SummarizeForResourceAsync(this IPolicyStatesOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummarizeForResourceWithHttpMessagesAsync(resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy states for the subscription level policy set definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policySetDefinitionName'>
            /// Policy set definition name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PolicyStatesQueryResults ListQueryResultsForPolicySetDefinition(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policySetDefinitionName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForPolicySetDefinitionAsync(policyStatesResource, subscriptionId, policySetDefinitionName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy states for the subscription level policy set definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policySetDefinitionName'>
            /// Policy set definition name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyStatesQueryResults> ListQueryResultsForPolicySetDefinitionAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policySetDefinitionName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForPolicySetDefinitionWithHttpMessagesAsync(policyStatesResource, subscriptionId, policySetDefinitionName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summarizes policy states for the subscription level policy set definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policySetDefinitionName'>
            /// Policy set definition name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static SummarizeResults SummarizeForPolicySetDefinition(this IPolicyStatesOperations operations, string subscriptionId, string policySetDefinitionName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.SummarizeForPolicySetDefinitionAsync(subscriptionId, policySetDefinitionName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summarizes policy states for the subscription level policy set definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policySetDefinitionName'>
            /// Policy set definition name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummarizeResults> SummarizeForPolicySetDefinitionAsync(this IPolicyStatesOperations operations, string subscriptionId, string policySetDefinitionName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummarizeForPolicySetDefinitionWithHttpMessagesAsync(subscriptionId, policySetDefinitionName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy states for the subscription level policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// Policy definition name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PolicyStatesQueryResults ListQueryResultsForPolicyDefinition(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policyDefinitionName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForPolicyDefinitionAsync(policyStatesResource, subscriptionId, policyDefinitionName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy states for the subscription level policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// Policy definition name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyStatesQueryResults> ListQueryResultsForPolicyDefinitionAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policyDefinitionName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForPolicyDefinitionWithHttpMessagesAsync(policyStatesResource, subscriptionId, policyDefinitionName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summarizes policy states for the subscription level policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// Policy definition name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static SummarizeResults SummarizeForPolicyDefinition(this IPolicyStatesOperations operations, string subscriptionId, string policyDefinitionName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.SummarizeForPolicyDefinitionAsync(subscriptionId, policyDefinitionName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summarizes policy states for the subscription level policy definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// Policy definition name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummarizeResults> SummarizeForPolicyDefinitionAsync(this IPolicyStatesOperations operations, string subscriptionId, string policyDefinitionName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummarizeForPolicyDefinitionWithHttpMessagesAsync(subscriptionId, policyDefinitionName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy states for the subscription level policy assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PolicyStatesQueryResults ListQueryResultsForSubscriptionLevelPolicyAssignment(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForSubscriptionLevelPolicyAssignmentAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy states for the subscription level policy assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyStatesQueryResults> ListQueryResultsForSubscriptionLevelPolicyAssignmentAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForSubscriptionLevelPolicyAssignmentWithHttpMessagesAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summarizes policy states for the subscription level policy assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static SummarizeResults SummarizeForSubscriptionLevelPolicyAssignment(this IPolicyStatesOperations operations, string subscriptionId, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.SummarizeForSubscriptionLevelPolicyAssignmentAsync(subscriptionId, policyAssignmentName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summarizes policy states for the subscription level policy assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummarizeResults> SummarizeForSubscriptionLevelPolicyAssignmentAsync(this IPolicyStatesOperations operations, string subscriptionId, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummarizeForSubscriptionLevelPolicyAssignmentWithHttpMessagesAsync(subscriptionId, policyAssignmentName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries policy states for the resource group level policy assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static PolicyStatesQueryResults ListQueryResultsForResourceGroupLevelPolicyAssignment(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string resourceGroupName, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListQueryResultsForResourceGroupLevelPolicyAssignmentAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries policy states for the resource group level policy assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyStatesResource'>
            /// The virtual resource under PolicyStates resource type. In a given time
            /// range, 'latest' represents the latest policy state(s), whereas 'default'
            /// represents all policy state(s). Possible values include: 'default',
            /// 'latest'
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyStatesQueryResults> ListQueryResultsForResourceGroupLevelPolicyAssignmentAsync(this IPolicyStatesOperations operations, string policyStatesResource, string subscriptionId, string resourceGroupName, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceGroupLevelPolicyAssignmentWithHttpMessagesAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summarizes policy states for the resource group level policy assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static SummarizeResults SummarizeForResourceGroupLevelPolicyAssignment(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.SummarizeForResourceGroupLevelPolicyAssignmentAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summarizes policy states for the resource group level policy assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummarizeResults> SummarizeForResourceGroupLevelPolicyAssignmentAsync(this IPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, string policyAssignmentName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummarizeForResourceGroupLevelPolicyAssignmentWithHttpMessagesAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
