// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AttestationsOperations.
    /// </summary>
    public static partial class AttestationsOperationsExtensions
    {
            /// <summary>
            /// Gets all attestations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Attestation> ListForSubscription(this IAttestationsOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListForSubscriptionAsync(subscriptionId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all attestations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Attestation>> ListForSubscriptionAsync(this IAttestationsOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForSubscriptionWithHttpMessagesAsync(subscriptionId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an attestation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            public static Attestation CreateOrUpdateAtSubscription(this IAttestationsOperations operations, string subscriptionId, string attestationName, Attestation parameters)
            {
                return operations.CreateOrUpdateAtSubscriptionAsync(subscriptionId, attestationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an attestation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> CreateOrUpdateAtSubscriptionAsync(this IAttestationsOperations operations, string subscriptionId, string attestationName, Attestation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtSubscriptionWithHttpMessagesAsync(subscriptionId, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing attestation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            public static Attestation GetAtSubscription(this IAttestationsOperations operations, string subscriptionId, string attestationName)
            {
                return operations.GetAtSubscriptionAsync(subscriptionId, attestationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing attestation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> GetAtSubscriptionAsync(this IAttestationsOperations operations, string subscriptionId, string attestationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtSubscriptionWithHttpMessagesAsync(subscriptionId, attestationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing attestation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            public static void DeleteAtSubscription(this IAttestationsOperations operations, string subscriptionId, string attestationName)
            {
                operations.DeleteAtSubscriptionAsync(subscriptionId, attestationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing attestation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtSubscriptionAsync(this IAttestationsOperations operations, string subscriptionId, string attestationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtSubscriptionWithHttpMessagesAsync(subscriptionId, attestationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all attestations for the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Attestation> ListForResourceGroup(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListForResourceGroupAsync(subscriptionId, resourceGroupName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all attestations for the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Attestation>> ListForResourceGroupAsync(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an attestation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            public static Attestation CreateOrUpdateAtResourceGroup(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, string attestationName, Attestation parameters)
            {
                return operations.CreateOrUpdateAtResourceGroupAsync(subscriptionId, resourceGroupName, attestationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an attestation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> CreateOrUpdateAtResourceGroupAsync(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, string attestationName, Attestation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing attestation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            public static Attestation GetAtResourceGroup(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, string attestationName)
            {
                return operations.GetAtResourceGroupAsync(subscriptionId, resourceGroupName, attestationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing attestation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> GetAtResourceGroupAsync(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, string attestationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, attestationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing attestation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            public static void DeleteAtResourceGroup(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, string attestationName)
            {
                operations.DeleteAtResourceGroupAsync(subscriptionId, resourceGroupName, attestationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing attestation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtResourceGroupAsync(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, string attestationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, attestationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all attestations for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Attestation> ListForResource(this IAttestationsOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListForResourceAsync(resourceId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all attestations for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Attestation>> ListForResourceAsync(this IAttestationsOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an attestation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            public static Attestation CreateOrUpdateAtResource(this IAttestationsOperations operations, string resourceId, string attestationName, Attestation parameters)
            {
                return operations.CreateOrUpdateAtResourceAsync(resourceId, attestationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an attestation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> CreateOrUpdateAtResourceAsync(this IAttestationsOperations operations, string resourceId, string attestationName, Attestation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtResourceWithHttpMessagesAsync(resourceId, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing attestation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            public static Attestation GetAtResource(this IAttestationsOperations operations, string resourceId, string attestationName)
            {
                return operations.GetAtResourceAsync(resourceId, attestationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing attestation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> GetAtResourceAsync(this IAttestationsOperations operations, string resourceId, string attestationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtResourceWithHttpMessagesAsync(resourceId, attestationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing attestation at individual resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            public static void DeleteAtResource(this IAttestationsOperations operations, string resourceId, string attestationName)
            {
                operations.DeleteAtResourceAsync(resourceId, attestationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing attestation at individual resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtResourceAsync(this IAttestationsOperations operations, string resourceId, string attestationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtResourceWithHttpMessagesAsync(resourceId, attestationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates an attestation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            public static Attestation BeginCreateOrUpdateAtSubscription(this IAttestationsOperations operations, string subscriptionId, string attestationName, Attestation parameters)
            {
                return operations.BeginCreateOrUpdateAtSubscriptionAsync(subscriptionId, attestationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an attestation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> BeginCreateOrUpdateAtSubscriptionAsync(this IAttestationsOperations operations, string subscriptionId, string attestationName, Attestation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateAtSubscriptionWithHttpMessagesAsync(subscriptionId, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an attestation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            public static Attestation BeginCreateOrUpdateAtResourceGroup(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, string attestationName, Attestation parameters)
            {
                return operations.BeginCreateOrUpdateAtResourceGroupAsync(subscriptionId, resourceGroupName, attestationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an attestation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The ID of the target subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> BeginCreateOrUpdateAtResourceGroupAsync(this IAttestationsOperations operations, string subscriptionId, string resourceGroupName, string attestationName, Attestation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an attestation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            public static Attestation BeginCreateOrUpdateAtResource(this IAttestationsOperations operations, string resourceId, string attestationName, Attestation parameters)
            {
                return operations.BeginCreateOrUpdateAtResourceAsync(resourceId, attestationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an attestation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='attestationName'>
            /// The name of the attestation.
            /// </param>
            /// <param name='parameters'>
            /// The attestation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attestation> BeginCreateOrUpdateAtResourceAsync(this IAttestationsOperations operations, string resourceId, string attestationName, Attestation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateAtResourceWithHttpMessagesAsync(resourceId, attestationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all attestations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Attestation> ListForSubscriptionNext(this IAttestationsOperations operations, string nextPageLink)
            {
                return operations.ListForSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all attestations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Attestation>> ListForSubscriptionNextAsync(this IAttestationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all attestations for the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Attestation> ListForResourceGroupNext(this IAttestationsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all attestations for the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Attestation>> ListForResourceGroupNextAsync(this IAttestationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all attestations for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Attestation> ListForResourceNext(this IAttestationsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all attestations for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Attestation>> ListForResourceNextAsync(this IAttestationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
