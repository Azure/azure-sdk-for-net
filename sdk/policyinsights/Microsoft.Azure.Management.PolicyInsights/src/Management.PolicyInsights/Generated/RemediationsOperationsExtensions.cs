// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RemediationsOperations.
    /// </summary>
    public static partial class RemediationsOperationsExtensions
    {
            /// <summary>
            /// Gets all deployments for a remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<RemediationDeployment> ListDeploymentsAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListDeploymentsAtManagementGroupAsync(managementGroupId, remediationName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all deployments for a remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemediationDeployment>> ListDeploymentsAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation CancelAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName)
            {
                return operations.CancelAtManagementGroupAsync(managementGroupId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> CancelAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all remediations for the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Remediation> ListForManagementGroup(this IRemediationsOperations operations, string managementGroupId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListForManagementGroupAsync(managementGroupId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all remediations for the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Remediation>> ListForManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForManagementGroupWithHttpMessagesAsync(managementGroupId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='parameters'>
            /// The remediation parameters.
            /// </param>
            public static Remediation CreateOrUpdateAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName, Remediation parameters)
            {
                return operations.CreateOrUpdateAtManagementGroupAsync(managementGroupId, remediationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='parameters'>
            /// The remediation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> CreateOrUpdateAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, Remediation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation GetAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName)
            {
                return operations.GetAtManagementGroupAsync(managementGroupId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> GetAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation DeleteAtManagementGroup(this IRemediationsOperations operations, string managementGroupId, string remediationName)
            {
                return operations.DeleteAtManagementGroupAsync(managementGroupId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// Management group ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> DeleteAtManagementGroupAsync(this IRemediationsOperations operations, string managementGroupId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAtManagementGroupWithHttpMessagesAsync(managementGroupId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all deployments for a remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<RemediationDeployment> ListDeploymentsAtSubscription(this IRemediationsOperations operations, string subscriptionId, string remediationName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListDeploymentsAtSubscriptionAsync(subscriptionId, remediationName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all deployments for a remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemediationDeployment>> ListDeploymentsAtSubscriptionAsync(this IRemediationsOperations operations, string subscriptionId, string remediationName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsAtSubscriptionWithHttpMessagesAsync(subscriptionId, remediationName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation CancelAtSubscription(this IRemediationsOperations operations, string subscriptionId, string remediationName)
            {
                return operations.CancelAtSubscriptionAsync(subscriptionId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> CancelAtSubscriptionAsync(this IRemediationsOperations operations, string subscriptionId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAtSubscriptionWithHttpMessagesAsync(subscriptionId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all remediations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Remediation> ListForSubscription(this IRemediationsOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListForSubscriptionAsync(subscriptionId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all remediations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Remediation>> ListForSubscriptionAsync(this IRemediationsOperations operations, string subscriptionId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForSubscriptionWithHttpMessagesAsync(subscriptionId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='parameters'>
            /// The remediation parameters.
            /// </param>
            public static Remediation CreateOrUpdateAtSubscription(this IRemediationsOperations operations, string subscriptionId, string remediationName, Remediation parameters)
            {
                return operations.CreateOrUpdateAtSubscriptionAsync(subscriptionId, remediationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='parameters'>
            /// The remediation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> CreateOrUpdateAtSubscriptionAsync(this IRemediationsOperations operations, string subscriptionId, string remediationName, Remediation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtSubscriptionWithHttpMessagesAsync(subscriptionId, remediationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation GetAtSubscription(this IRemediationsOperations operations, string subscriptionId, string remediationName)
            {
                return operations.GetAtSubscriptionAsync(subscriptionId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> GetAtSubscriptionAsync(this IRemediationsOperations operations, string subscriptionId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtSubscriptionWithHttpMessagesAsync(subscriptionId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation DeleteAtSubscription(this IRemediationsOperations operations, string subscriptionId, string remediationName)
            {
                return operations.DeleteAtSubscriptionAsync(subscriptionId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> DeleteAtSubscriptionAsync(this IRemediationsOperations operations, string subscriptionId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAtSubscriptionWithHttpMessagesAsync(subscriptionId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all deployments for a remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<RemediationDeployment> ListDeploymentsAtResourceGroup(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListDeploymentsAtResourceGroupAsync(subscriptionId, resourceGroupName, remediationName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all deployments for a remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemediationDeployment>> ListDeploymentsAtResourceGroupAsync(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, remediationName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation CancelAtResourceGroup(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName)
            {
                return operations.CancelAtResourceGroupAsync(subscriptionId, resourceGroupName, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> CancelAtResourceGroupAsync(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all remediations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Remediation> ListForResourceGroup(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListForResourceGroupAsync(subscriptionId, resourceGroupName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all remediations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Remediation>> ListForResourceGroupAsync(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='parameters'>
            /// The remediation parameters.
            /// </param>
            public static Remediation CreateOrUpdateAtResourceGroup(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName, Remediation parameters)
            {
                return operations.CreateOrUpdateAtResourceGroupAsync(subscriptionId, resourceGroupName, remediationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='parameters'>
            /// The remediation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> CreateOrUpdateAtResourceGroupAsync(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName, Remediation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, remediationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation GetAtResourceGroup(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName)
            {
                return operations.GetAtResourceGroupAsync(subscriptionId, resourceGroupName, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> GetAtResourceGroupAsync(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation DeleteAtResourceGroup(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName)
            {
                return operations.DeleteAtResourceGroupAsync(subscriptionId, resourceGroupName, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> DeleteAtResourceGroupAsync(this IRemediationsOperations operations, string subscriptionId, string resourceGroupName, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAtResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all deployments for a remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<RemediationDeployment> ListDeploymentsAtResource(this IRemediationsOperations operations, string resourceId, string remediationName, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListDeploymentsAtResourceAsync(resourceId, remediationName, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all deployments for a remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemediationDeployment>> ListDeploymentsAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsAtResourceWithHttpMessagesAsync(resourceId, remediationName, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation CancelAtResource(this IRemediationsOperations operations, string resourceId, string remediationName)
            {
                return operations.CancelAtResourceAsync(resourceId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> CancelAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAtResourceWithHttpMessagesAsync(resourceId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all remediations for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Remediation> ListForResource(this IRemediationsOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions))
            {
                return operations.ListForResourceAsync(resourceId, queryOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all remediations for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='queryOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Remediation>> ListForResourceAsync(this IRemediationsOperations operations, string resourceId, QueryOptions queryOptions = default(QueryOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceId, queryOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='parameters'>
            /// The remediation parameters.
            /// </param>
            public static Remediation CreateOrUpdateAtResource(this IRemediationsOperations operations, string resourceId, string remediationName, Remediation parameters)
            {
                return operations.CreateOrUpdateAtResourceAsync(resourceId, remediationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='parameters'>
            /// The remediation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> CreateOrUpdateAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, Remediation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtResourceWithHttpMessagesAsync(resourceId, remediationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation GetAtResource(this IRemediationsOperations operations, string resourceId, string remediationName)
            {
                return operations.GetAtResourceAsync(resourceId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> GetAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtResourceWithHttpMessagesAsync(resourceId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing remediation at individual resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            public static Remediation DeleteAtResource(this IRemediationsOperations operations, string resourceId, string remediationName)
            {
                return operations.DeleteAtResourceAsync(resourceId, remediationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing remediation at individual resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='remediationName'>
            /// The name of the remediation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Remediation> DeleteAtResourceAsync(this IRemediationsOperations operations, string resourceId, string remediationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAtResourceWithHttpMessagesAsync(resourceId, remediationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all deployments for a remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RemediationDeployment> ListDeploymentsAtManagementGroupNext(this IRemediationsOperations operations, string nextPageLink)
            {
                return operations.ListDeploymentsAtManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all deployments for a remediation at management group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemediationDeployment>> ListDeploymentsAtManagementGroupNextAsync(this IRemediationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsAtManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all remediations for the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Remediation> ListForManagementGroupNext(this IRemediationsOperations operations, string nextPageLink)
            {
                return operations.ListForManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all remediations for the management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Remediation>> ListForManagementGroupNextAsync(this IRemediationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all deployments for a remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RemediationDeployment> ListDeploymentsAtSubscriptionNext(this IRemediationsOperations operations, string nextPageLink)
            {
                return operations.ListDeploymentsAtSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all deployments for a remediation at subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemediationDeployment>> ListDeploymentsAtSubscriptionNextAsync(this IRemediationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsAtSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all remediations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Remediation> ListForSubscriptionNext(this IRemediationsOperations operations, string nextPageLink)
            {
                return operations.ListForSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all remediations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Remediation>> ListForSubscriptionNextAsync(this IRemediationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all deployments for a remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RemediationDeployment> ListDeploymentsAtResourceGroupNext(this IRemediationsOperations operations, string nextPageLink)
            {
                return operations.ListDeploymentsAtResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all deployments for a remediation at resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemediationDeployment>> ListDeploymentsAtResourceGroupNextAsync(this IRemediationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsAtResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all remediations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Remediation> ListForResourceGroupNext(this IRemediationsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all remediations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Remediation>> ListForResourceGroupNextAsync(this IRemediationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all deployments for a remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RemediationDeployment> ListDeploymentsAtResourceNext(this IRemediationsOperations operations, string nextPageLink)
            {
                return operations.ListDeploymentsAtResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all deployments for a remediation at resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemediationDeployment>> ListDeploymentsAtResourceNextAsync(this IRemediationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsAtResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all remediations for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Remediation> ListForResourceNext(this IRemediationsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all remediations for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Remediation>> ListForResourceNextAsync(this IRemediationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
