// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridNetwork.Models
{
    public partial class HelmMappingRuleProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ReleaseNamespace))
            {
                writer.WritePropertyName("releaseNamespace"u8);
                writer.WriteStringValue(ReleaseNamespace);
            }
            if (Optional.IsDefined(ReleaseName))
            {
                writer.WritePropertyName("releaseName"u8);
                writer.WriteStringValue(ReleaseName);
            }
            if (Optional.IsDefined(HelmPackageVersion))
            {
                writer.WritePropertyName("helmPackageVersion"u8);
                writer.WriteStringValue(HelmPackageVersion);
            }
            if (Optional.IsDefined(Values))
            {
                writer.WritePropertyName("values"u8);
                writer.WriteStringValue(Values);
            }
            if (Optional.IsDefined(Options))
            {
                writer.WritePropertyName("options"u8);
                writer.WriteObjectValue(Options);
            }
            writer.WriteEndObject();
        }

        internal static HelmMappingRuleProfile DeserializeHelmMappingRuleProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> releaseNamespace = default;
            Optional<string> releaseName = default;
            Optional<string> helmPackageVersion = default;
            Optional<string> values = default;
            Optional<HelmMappingRuleProfileConfig> options = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("releaseNamespace"u8))
                {
                    releaseNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("releaseName"u8))
                {
                    releaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("helmPackageVersion"u8))
                {
                    helmPackageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("values"u8))
                {
                    values = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("options"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    options = HelmMappingRuleProfileConfig.DeserializeHelmMappingRuleProfileConfig(property.Value);
                    continue;
                }
            }
            return new HelmMappingRuleProfile(releaseNamespace.Value, releaseName.Value, helmPackageVersion.Value, values.Value, options.Value);
        }
    }
}
