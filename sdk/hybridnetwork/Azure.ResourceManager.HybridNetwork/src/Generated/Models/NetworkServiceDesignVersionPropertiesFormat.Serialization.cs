// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.HybridNetwork.Models
{
    public partial class NetworkServiceDesignVersionPropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(ConfigurationGroupSchemaReferences))
            {
                writer.WritePropertyName("configurationGroupSchemaReferences"u8);
                writer.WriteStartObject();
                foreach (var item in ConfigurationGroupSchemaReferences)
                {
                    writer.WritePropertyName(item.Key);
                    JsonSerializer.Serialize(writer, item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(NfvisFromSite))
            {
                writer.WritePropertyName("nfvisFromSite"u8);
                writer.WriteStartObject();
                foreach (var item in NfvisFromSite)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(ResourceElementTemplates))
            {
                writer.WritePropertyName("resourceElementTemplates"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceElementTemplates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static NetworkServiceDesignVersionPropertiesFormat DeserializeNetworkServiceDesignVersionPropertiesFormat(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ProvisioningState> provisioningState = default;
            Optional<VersionState> versionState = default;
            Optional<string> description = default;
            Optional<IDictionary<string, WritableSubResource>> configurationGroupSchemaReferences = default;
            Optional<IDictionary<string, NfviDetails>> nfvisFromSite = default;
            Optional<IList<ResourceElementTemplate>> resourceElementTemplates = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("versionState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    versionState = new VersionState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configurationGroupSchemaReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, WritableSubResource> dictionary = new Dictionary<string, WritableSubResource>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, JsonSerializer.Deserialize<WritableSubResource>(property0.Value.GetRawText()));
                    }
                    configurationGroupSchemaReferences = dictionary;
                    continue;
                }
                if (property.NameEquals("nfvisFromSite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, NfviDetails> dictionary = new Dictionary<string, NfviDetails>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, NfviDetails.DeserializeNfviDetails(property0.Value));
                    }
                    nfvisFromSite = dictionary;
                    continue;
                }
                if (property.NameEquals("resourceElementTemplates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceElementTemplate> array = new List<ResourceElementTemplate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceElementTemplate.DeserializeResourceElementTemplate(item));
                    }
                    resourceElementTemplates = array;
                    continue;
                }
            }
            return new NetworkServiceDesignVersionPropertiesFormat(Optional.ToNullable(provisioningState), Optional.ToNullable(versionState), description.Value, Optional.ToDictionary(configurationGroupSchemaReferences), Optional.ToDictionary(nfvisFromSite), Optional.ToList(resourceElementTemplates));
        }
    }
}
