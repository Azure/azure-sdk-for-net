// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Fleet;
using Azure.ResourceManager.Fleet.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Fleet.Samples
{
    public partial class Sample_FleetResource
    {
        // Fleets_ListBySubscription_MaximumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetFleets_FleetsListBySubscriptionMaximumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2023-11-01-preview/examples/Fleets_ListBySubscription_MaximumSet.json
            // this example is just showing the usage of "Fleets_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (FleetResource item in subscriptionResource.GetFleetsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Fleets_ListBySubscription_MinimumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetFleets_FleetsListBySubscriptionMinimumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2023-11-01-preview/examples/Fleets_ListBySubscription_MinimumSet.json
            // this example is just showing the usage of "Fleets_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (FleetResource item in subscriptionResource.GetFleetsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Fleets_Get_MaximumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_FleetsGetMaximumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2023-11-01-preview/examples/Fleets_Get_MaximumSet.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            FleetResource result = await fleet.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_Get_MinimumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_FleetsGetMinimumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2023-11-01-preview/examples/Fleets_Get_MinimumSet.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            FleetResource result = await fleet.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_Update_MaximumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_FleetsUpdateMaximumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2023-11-01-preview/examples/Fleets_Update_MaximumSet.json
            // this example is just showing the usage of "Fleets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            FleetPatch patch = new FleetPatch()
            {
                Zones =
{
"zone1","zone2"
},
                Tags =
{
["key7343"] = "wrlbuwnklqi",
},
                SpotPriorityProfile = new SpotPriorityProfile()
                {
                    MaxHourlyPrice = 20.1,
                    MaxPricePerVm = 0.00865,
                    EvictionPolicy = EvictionPolicy.Delete,
                    AllocationStrategy = SpotAllocationStrategy.PriceCapacityOptimized,
                    Capacity = 20,
                    MinCapacity = 10,
                },
                RegularPriorityProfile = new RegularPriorityProfile()
                {
                    AllocationStrategy = RegularPriorityAllocationStrategy.LowestPrice,
                    Capacity = 20,
                    MinCapacity = 10,
                },
                VmSizesProfile =
{
new VmSizeProfile("Standard_d1_v2")
},
                BaseVirtualMachineProfile = new BaseVirtualMachineProfileUpdate()
                {
                    VirtualMachineProfile =
{
},
                    ComputeApiVersion = "2023-07-01",
                },
                RequestType = RequestType.Restore,
            };
            ArmOperation<FleetResource> lro = await fleet.UpdateAsync(WaitUntil.Completed, patch);
            FleetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_Update_MinimumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_FleetsUpdateMinimumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2023-11-01-preview/examples/Fleets_Update_MinimumSet.json
            // this example is just showing the usage of "Fleets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            FleetPatch patch = new FleetPatch();
            ArmOperation<FleetResource> lro = await fleet.UpdateAsync(WaitUntil.Completed, patch);
            FleetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_Delete_MaximumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_FleetsDeleteMaximumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2023-11-01-preview/examples/Fleets_Delete_MaximumSet.json
            // this example is just showing the usage of "Fleets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            await fleet.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Fleets_Delete_MinimumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_FleetsDeleteMinimumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2023-11-01-preview/examples/Fleets_Delete_MinimumSet.json
            // this example is just showing the usage of "Fleets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            await fleet.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
