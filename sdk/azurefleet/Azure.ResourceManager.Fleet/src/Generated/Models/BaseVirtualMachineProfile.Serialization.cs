// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Fleet.Models
{
    public partial class BaseVirtualMachineProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("virtualMachineProfile"u8);
            writer.WriteStartObject();
            foreach (var item in VirtualMachineProfile)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
            writer.WritePropertyName("computeApiVersion"u8);
            writer.WriteStringValue(ComputeApiVersion);
            writer.WriteEndObject();
        }

        internal static BaseVirtualMachineProfile DeserializeBaseVirtualMachineProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, BinaryData> virtualMachineProfile = default;
            string computeApiVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("virtualMachineProfile"u8))
                {
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    virtualMachineProfile = dictionary;
                    continue;
                }
                if (property.NameEquals("computeApiVersion"u8))
                {
                    computeApiVersion = property.Value.GetString();
                    continue;
                }
            }
            return new BaseVirtualMachineProfile(virtualMachineProfile, computeApiVersion);
        }
    }
}
