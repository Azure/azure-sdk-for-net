// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Fleet.Models
{
    /// <summary> The Request type for creating a Fleet. </summary>
    public readonly partial struct RequestType : IEquatable<RequestType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RequestType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RequestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RestoreValue = "Restore";
        private const string OneOffValue = "OneOff";

        /// <summary>
        /// Achieve initial capacity: Continuously until achieved or canceled.
        /// Capacity maintenance: Yes, tries to maintain by restoring evicted spot VMs.
        /// Scale in/out allowed: Yes
        /// Zone Specification allowed: No. Azure Fleet will use all available zones for the region.
        /// </summary>
        public static RequestType Restore { get; } = new RequestType(RestoreValue);
        /// <summary>
        /// Achieve initial capacity: Continuously until achieved or canceled.
        /// Capacity maintenance: No maintenance after capacity is achieved.
        /// Scale in/out allowed: No
        /// Zone Specification allowed: Yes but optional.
        /// </summary>
        public static RequestType OneOff { get; } = new RequestType(OneOffValue);
        /// <summary> Determines if two <see cref="RequestType"/> values are the same. </summary>
        public static bool operator ==(RequestType left, RequestType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RequestType"/> values are not the same. </summary>
        public static bool operator !=(RequestType left, RequestType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RequestType"/>. </summary>
        public static implicit operator RequestType(string value) => new RequestType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RequestType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RequestType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
