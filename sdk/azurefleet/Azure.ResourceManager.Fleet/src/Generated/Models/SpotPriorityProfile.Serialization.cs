// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Fleet.Models
{
    public partial class SpotPriorityProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MaxHourlyPrice))
            {
                writer.WritePropertyName("maxHourlyPrice"u8);
                writer.WriteNumberValue(MaxHourlyPrice.Value);
            }
            if (Optional.IsDefined(MaxPricePerVm))
            {
                writer.WritePropertyName("maxPricePerVm"u8);
                writer.WriteNumberValue(MaxPricePerVm.Value);
            }
            if (Optional.IsDefined(EvictionPolicy))
            {
                writer.WritePropertyName("evictionPolicy"u8);
                writer.WriteStringValue(EvictionPolicy.Value.ToString());
            }
            if (Optional.IsDefined(AllocationStrategy))
            {
                writer.WritePropertyName("allocationStrategy"u8);
                writer.WriteStringValue(AllocationStrategy.Value.ToString());
            }
            if (Optional.IsDefined(Capacity))
            {
                writer.WritePropertyName("capacity"u8);
                writer.WriteNumberValue(Capacity.Value);
            }
            if (Optional.IsDefined(MinCapacity))
            {
                writer.WritePropertyName("minCapacity"u8);
                writer.WriteNumberValue(MinCapacity.Value);
            }
            writer.WriteEndObject();
        }

        internal static SpotPriorityProfile DeserializeSpotPriorityProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<float> maxHourlyPrice = default;
            Optional<float> maxPricePerVm = default;
            Optional<EvictionPolicy> evictionPolicy = default;
            Optional<SpotAllocationStrategy> allocationStrategy = default;
            Optional<int> capacity = default;
            Optional<int> minCapacity = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maxHourlyPrice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxHourlyPrice = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("maxPricePerVm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxPricePerVm = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("evictionPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    evictionPolicy = new EvictionPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("allocationStrategy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allocationStrategy = new SpotAllocationStrategy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("capacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capacity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minCapacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minCapacity = property.Value.GetInt32();
                    continue;
                }
            }
            return new SpotPriorityProfile(Optional.ToNullable(capacity), Optional.ToNullable(minCapacity), Optional.ToNullable(maxHourlyPrice), Optional.ToNullable(maxPricePerVm), Optional.ToNullable(evictionPolicy), Optional.ToNullable(allocationStrategy));
        }
    }
}
