// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Fleet.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Fleet
{
    public partial class FleetData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Zones))
            {
                writer.WritePropertyName("zones"u8);
                writer.WriteStartArray();
                foreach (var item in Zones)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(SpotPriorityProfile))
            {
                writer.WritePropertyName("spotPriorityProfile"u8);
                writer.WriteObjectValue(SpotPriorityProfile);
            }
            if (Optional.IsDefined(RegularPriorityProfile))
            {
                writer.WritePropertyName("regularPriorityProfile"u8);
                writer.WriteObjectValue(RegularPriorityProfile);
            }
            if (Optional.IsCollectionDefined(VmSizesProfile))
            {
                writer.WritePropertyName("vmSizesProfile"u8);
                writer.WriteStartArray();
                foreach (var item in VmSizesProfile)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BaseVirtualMachineProfile))
            {
                writer.WritePropertyName("baseVirtualMachineProfile"u8);
                writer.WriteObjectValue(BaseVirtualMachineProfile);
            }
            if (Optional.IsDefined(Request))
            {
                writer.WritePropertyName("request"u8);
                writer.WriteObjectValue(Request);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static FleetData DeserializeFleetData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<string>> zones = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<SpotPriorityProfile> spotPriorityProfile = default;
            Optional<RegularPriorityProfile> regularPriorityProfile = default;
            Optional<IList<VmSizeProfile>> vmSizesProfile = default;
            Optional<BaseVirtualMachineProfile> baseVirtualMachineProfile = default;
            Optional<Models.Request> request = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("zones"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    zones = array;
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("spotPriorityProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            spotPriorityProfile = SpotPriorityProfile.DeserializeSpotPriorityProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("regularPriorityProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            regularPriorityProfile = RegularPriorityProfile.DeserializeRegularPriorityProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("vmSizesProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<VmSizeProfile> array = new List<VmSizeProfile>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VmSizeProfile.DeserializeVmSizeProfile(item));
                            }
                            vmSizesProfile = array;
                            continue;
                        }
                        if (property0.NameEquals("baseVirtualMachineProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            baseVirtualMachineProfile = BaseVirtualMachineProfile.DeserializeBaseVirtualMachineProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("request"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            request = Models.Request.DeserializeRequest(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new FleetData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, Optional.ToList(zones), Optional.ToNullable(provisioningState), spotPriorityProfile.Value, regularPriorityProfile.Value, Optional.ToList(vmSizesProfile), baseVirtualMachineProfile.Value, request.Value);
        }
    }
}
