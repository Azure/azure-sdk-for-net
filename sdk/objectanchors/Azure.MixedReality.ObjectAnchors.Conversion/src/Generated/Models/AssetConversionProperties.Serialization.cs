// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;
using Azure.MixedReality.ObjectAnchors.Conversion.Models;

namespace Azure.MixedReality.ObjectAnchors.Conversion
{
    public partial class AssetConversionProperties : IUtf8JsonSerializable, IJsonModel<AssetConversionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AssetConversionProperties>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<AssetConversionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<AssetConversionProperties>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<AssetConversionProperties>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ClientErrorDetails))
                {
                    writer.WritePropertyName("clientErrorDetails"u8);
                    writer.WriteStringValue(ClientErrorDetails);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ServerErrorDetails))
                {
                    writer.WritePropertyName("serverErrorDetails"u8);
                    writer.WriteStringValue(ServerErrorDetails);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ErrorCode))
                {
                    writer.WritePropertyName("errorCode"u8);
                    writer.WriteStringValue(ErrorCode.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(JobIdInternal))
                {
                    writer.WritePropertyName("jobId"u8);
                    writer.WriteStringValue(JobIdInternal.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(OutputModelUriString))
                {
                    writer.WritePropertyName("outputModelUri"u8);
                    writer.WriteStringValue(OutputModelUriString);
                }
            }
            if (Optional.IsDefined(ConversionStatus))
            {
                writer.WritePropertyName("jobStatus"u8);
                writer.WriteStringValue(ConversionStatus.Value.ToSerialString());
            }
            if (Optional.IsDefined(AssetFileTypeString))
            {
                writer.WritePropertyName("assetFileType"u8);
                writer.WriteStringValue(AssetFileTypeString);
            }
            if (Optional.IsDefined(InputAssetUriString))
            {
                writer.WritePropertyName("inputAssetUri"u8);
                writer.WriteStringValue(InputAssetUriString);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(AccountIdInternal))
                {
                    writer.WritePropertyName("accountId"u8);
                    writer.WriteStringValue(AccountIdInternal.Value);
                }
            }
            if (Optional.IsDefined(ConversionConfiguration))
            {
                writer.WritePropertyName("ingestionConfiguration"u8);
                writer.WriteObjectValue(ConversionConfiguration);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ScaledAssetDimensionsWrapper))
                {
                    if (ScaledAssetDimensionsWrapper != null)
                    {
                        writer.WritePropertyName("scaledAssetDimensions"u8);
                        writer.WriteObjectValue(ScaledAssetDimensionsWrapper);
                    }
                    else
                    {
                        writer.WriteNull("scaledAssetDimensions");
                    }
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AssetConversionProperties IJsonModel<AssetConversionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AssetConversionProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAssetConversionProperties(document.RootElement, options);
        }

        internal static AssetConversionProperties DeserializeAssetConversionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> clientErrorDetails = default;
            Optional<string> serverErrorDetails = default;
            Optional<ConversionErrorCode> errorCode = default;
            Optional<Guid> jobId = default;
            Optional<string> outputModelUri = default;
            Optional<AssetConversionStatus> jobStatus = default;
            Optional<string> assetFileType = default;
            Optional<string> inputAssetUri = default;
            Optional<Guid> accountId = default;
            Optional<AssetConversionConfiguration> ingestionConfiguration = default;
            Optional<Vector3> scaledAssetDimensions = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clientErrorDetails"u8))
                {
                    clientErrorDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverErrorDetails"u8))
                {
                    serverErrorDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorCode = new ConversionErrorCode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("jobId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jobId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("outputModelUri"u8))
                {
                    outputModelUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jobStatus = property.Value.GetString().ToAssetConversionStatus();
                    continue;
                }
                if (property.NameEquals("assetFileType"u8))
                {
                    assetFileType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputAssetUri"u8))
                {
                    inputAssetUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    accountId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("ingestionConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingestionConfiguration = AssetConversionConfiguration.DeserializeAssetConversionConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("scaledAssetDimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scaledAssetDimensions = null;
                        continue;
                    }
                    scaledAssetDimensions = Vector3.DeserializeVector3(property.Value);
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new AssetConversionProperties(clientErrorDetails.Value, serverErrorDetails.Value, errorCode, Optional.ToNullable(jobId), outputModelUri.Value, Optional.ToNullable(jobStatus), assetFileType.Value, inputAssetUri.Value, Optional.ToNullable(accountId), ingestionConfiguration.Value, scaledAssetDimensions.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AssetConversionProperties>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AssetConversionProperties)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        AssetConversionProperties IPersistableModel<AssetConversionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AssetConversionProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeAssetConversionProperties(document.RootElement, options);
        }

        string IPersistableModel<AssetConversionProperties>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
