// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.MixedReality.ObjectAnchors.Conversion.Models;

namespace Azure.MixedReality.ObjectAnchors.Conversion
{
    public partial class AssetConversionProperties : IUtf8JsonSerializable, IModelJsonSerializable<AssetConversionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<AssetConversionProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<AssetConversionProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AssetConversionProperties>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(ConversionStatus))
            {
                writer.WritePropertyName("jobStatus"u8);
                writer.WriteStringValue(ConversionStatus.Value.ToSerialString());
            }
            if (Optional.IsDefined(AssetFileTypeString))
            {
                writer.WritePropertyName("assetFileType"u8);
                writer.WriteStringValue(AssetFileTypeString);
            }
            if (Optional.IsDefined(InputAssetUriString))
            {
                writer.WritePropertyName("inputAssetUri"u8);
                writer.WriteStringValue(InputAssetUriString);
            }
            if (Optional.IsDefined(ConversionConfiguration))
            {
                writer.WritePropertyName("ingestionConfiguration"u8);
                if (ConversionConfiguration is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<AssetConversionConfiguration>)ConversionConfiguration).Serialize(writer, options);
                }
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AssetConversionProperties DeserializeAssetConversionProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> clientErrorDetails = default;
            Optional<string> serverErrorDetails = default;
            Optional<ConversionErrorCode> errorCode = default;
            Optional<Guid> jobId = default;
            Optional<string> outputModelUri = default;
            Optional<AssetConversionStatus> jobStatus = default;
            Optional<string> assetFileType = default;
            Optional<string> inputAssetUri = default;
            Optional<Guid> accountId = default;
            Optional<AssetConversionConfiguration> ingestionConfiguration = default;
            Optional<Vector3> scaledAssetDimensions = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clientErrorDetails"u8))
                {
                    clientErrorDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverErrorDetails"u8))
                {
                    serverErrorDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorCode = new ConversionErrorCode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("jobId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jobId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("outputModelUri"u8))
                {
                    outputModelUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jobStatus = property.Value.GetString().ToAssetConversionStatus();
                    continue;
                }
                if (property.NameEquals("assetFileType"u8))
                {
                    assetFileType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputAssetUri"u8))
                {
                    inputAssetUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    accountId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("ingestionConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingestionConfiguration = AssetConversionConfiguration.DeserializeAssetConversionConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("scaledAssetDimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scaledAssetDimensions = null;
                        continue;
                    }
                    scaledAssetDimensions = Vector3.DeserializeVector3(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AssetConversionProperties(clientErrorDetails.Value, serverErrorDetails.Value, errorCode, Optional.ToNullable(jobId), outputModelUri.Value, Optional.ToNullable(jobStatus), assetFileType.Value, inputAssetUri.Value, Optional.ToNullable(accountId), ingestionConfiguration.Value, scaledAssetDimensions.Value, serializedAdditionalRawData);
        }

        AssetConversionProperties IModelJsonSerializable<AssetConversionProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AssetConversionProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAssetConversionProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AssetConversionProperties>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AssetConversionProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AssetConversionProperties IModelSerializable<AssetConversionProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AssetConversionProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAssetConversionProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AssetConversionProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AssetConversionProperties"/> to convert. </param>
        public static implicit operator RequestContent(AssetConversionProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AssetConversionProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AssetConversionProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAssetConversionProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
