// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.MixedReality.ObjectAnchors.Conversion.Models;

namespace Azure.MixedReality.ObjectAnchors.Conversion
{
    public partial class AssetConversionConfiguration : IUtf8JsonSerializable, IModelJsonSerializable<AssetConversionConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<AssetConversionConfiguration>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<AssetConversionConfiguration>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AssetConversionConfiguration>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(AssetDimensionsWrapper))
            {
                if (AssetDimensionsWrapper != null)
                {
                    writer.WritePropertyName("dimensions"u8);
                    if (AssetDimensionsWrapper is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<Vector3>)AssetDimensionsWrapper).Serialize(writer, options);
                    }
                }
                else
                {
                    writer.WriteNull("dimensions");
                }
            }
            if (Optional.IsDefined(BoundingBoxCenterWrapper))
            {
                if (BoundingBoxCenterWrapper != null)
                {
                    writer.WritePropertyName("boundingBoxCenter"u8);
                    if (BoundingBoxCenterWrapper is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<Vector3>)BoundingBoxCenterWrapper).Serialize(writer, options);
                    }
                }
                else
                {
                    writer.WriteNull("boundingBoxCenter");
                }
            }
            writer.WritePropertyName("gravity"u8);
            if (GravityWrapper is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<Vector3>)GravityWrapper).Serialize(writer, options);
            }
            if (Optional.IsCollectionDefined(KeyFrameIndexes))
            {
                if (KeyFrameIndexes != null)
                {
                    writer.WritePropertyName("keyFrameIndexes"u8);
                    writer.WriteStartArray();
                    foreach (var item in KeyFrameIndexes)
                    {
                        writer.WriteNumberValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("keyFrameIndexes");
                }
            }
            if (Optional.IsCollectionDefined(GroundTruthTrajectoryCameraPoses))
            {
                writer.WritePropertyName("gtTrajectory"u8);
                writer.WriteStartArray();
                foreach (var item in GroundTruthTrajectoryCameraPoses)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<TrajectoryPose>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PrincipalAxisWrapper))
            {
                if (PrincipalAxisWrapper != null)
                {
                    writer.WritePropertyName("principalAxis"u8);
                    if (PrincipalAxisWrapper is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<Quaternion>)PrincipalAxisWrapper).Serialize(writer, options);
                    }
                }
                else
                {
                    writer.WriteNull("principalAxis");
                }
            }
            writer.WritePropertyName("scale"u8);
            writer.WriteNumberValue(Scale);
            if (Optional.IsDefined(DisableDetectScaleUnits))
            {
                writer.WritePropertyName("disableDetectScaleUnits"u8);
                writer.WriteBooleanValue(DisableDetectScaleUnits);
            }
            if (Optional.IsDefined(SupportingPlaneWrapper))
            {
                if (SupportingPlaneWrapper != null)
                {
                    writer.WritePropertyName("supportingPlane"u8);
                    if (SupportingPlaneWrapper is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<Vector4>)SupportingPlaneWrapper).Serialize(writer, options);
                    }
                }
                else
                {
                    writer.WriteNull("supportingPlane");
                }
            }
            if (Optional.IsCollectionDefined(TestTrajectoryCameraPoses))
            {
                writer.WritePropertyName("testTrajectory"u8);
                writer.WriteStartArray();
                foreach (var item in TestTrajectoryCameraPoses)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<TrajectoryPose>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AssetConversionConfiguration DeserializeAssetConversionConfiguration(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Vector3> dimensions = default;
            Optional<Vector3> boundingBoxCenter = default;
            Vector3 gravity = default;
            Optional<IReadOnlyList<int>> keyFrameIndexes = default;
            Optional<IReadOnlyList<TrajectoryPose>> gtTrajectory = default;
            Optional<Quaternion> principalAxis = default;
            float scale = default;
            Optional<bool> disableDetectScaleUnits = default;
            Optional<Vector4> supportingPlane = default;
            Optional<IReadOnlyList<TrajectoryPose>> testTrajectory = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dimensions = null;
                        continue;
                    }
                    dimensions = Vector3.DeserializeVector3(property.Value);
                    continue;
                }
                if (property.NameEquals("boundingBoxCenter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        boundingBoxCenter = null;
                        continue;
                    }
                    boundingBoxCenter = Vector3.DeserializeVector3(property.Value);
                    continue;
                }
                if (property.NameEquals("gravity"u8))
                {
                    gravity = Vector3.DeserializeVector3(property.Value);
                    continue;
                }
                if (property.NameEquals("keyFrameIndexes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    keyFrameIndexes = array;
                    continue;
                }
                if (property.NameEquals("gtTrajectory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TrajectoryPose> array = new List<TrajectoryPose>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TrajectoryPose.DeserializeTrajectoryPose(item));
                    }
                    gtTrajectory = array;
                    continue;
                }
                if (property.NameEquals("principalAxis"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        principalAxis = null;
                        continue;
                    }
                    principalAxis = Quaternion.DeserializeQuaternion(property.Value);
                    continue;
                }
                if (property.NameEquals("scale"u8))
                {
                    scale = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("disableDetectScaleUnits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disableDetectScaleUnits = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("supportingPlane"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        supportingPlane = null;
                        continue;
                    }
                    supportingPlane = Vector4.DeserializeVector4(property.Value);
                    continue;
                }
                if (property.NameEquals("testTrajectory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TrajectoryPose> array = new List<TrajectoryPose>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TrajectoryPose.DeserializeTrajectoryPose(item));
                    }
                    testTrajectory = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AssetConversionConfiguration(dimensions.Value, boundingBoxCenter.Value, gravity, Optional.ToList(keyFrameIndexes), Optional.ToList(gtTrajectory), principalAxis.Value, scale, disableDetectScaleUnits, supportingPlane.Value, Optional.ToList(testTrajectory), rawData);
        }

        AssetConversionConfiguration IModelJsonSerializable<AssetConversionConfiguration>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AssetConversionConfiguration>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAssetConversionConfiguration(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AssetConversionConfiguration>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AssetConversionConfiguration>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AssetConversionConfiguration IModelSerializable<AssetConversionConfiguration>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AssetConversionConfiguration>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAssetConversionConfiguration(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AssetConversionConfiguration"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AssetConversionConfiguration"/> to convert. </param>
        public static implicit operator RequestContent(AssetConversionConfiguration model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AssetConversionConfiguration"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AssetConversionConfiguration(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAssetConversionConfiguration(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
