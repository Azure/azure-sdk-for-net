// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.MixedReality.ObjectAnchors.Conversion.Models;

namespace Azure.MixedReality.ObjectAnchors.Conversion
{
    /// <summary> Represents an ingestion configuration. </summary>
    public partial class AssetConversionConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssetConversionConfiguration"/>. </summary>
        /// <param name="assetDimensionsWrapper"> Dimensions of the asset. </param>
        /// <param name="boundingBoxCenterWrapper"> BoundingBoxCenter of the asset. </param>
        /// <param name="gravityWrapper"> Gravity vector with respect to object's nominal position. </param>
        /// <param name="keyFrameIndexes"> Indices of Key Frames. </param>
        /// <param name="groundTruthTrajectoryCameraPoses"> Ground truth trajectory. </param>
        /// <param name="principalAxisWrapper"> Orientation of model's bounding box. </param>
        /// <param name="scale"> Scale of transformation of asset units into meter space. </param>
        /// <param name="disableDetectScaleUnits"> Whether or not disable the scale units in the model metadata. </param>
        /// <param name="supportingPlaneWrapper"> Definition of supporting plane. </param>
        /// <param name="testTrajectoryCameraPoses"> Test Trajectory. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssetConversionConfiguration(Vector3 assetDimensionsWrapper, Vector3 boundingBoxCenterWrapper, Vector3 gravityWrapper, IReadOnlyList<int> keyFrameIndexes, IReadOnlyList<TrajectoryPose> groundTruthTrajectoryCameraPoses, Quaternion principalAxisWrapper, float scale, bool disableDetectScaleUnits, Vector4 supportingPlaneWrapper, IReadOnlyList<TrajectoryPose> testTrajectoryCameraPoses, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AssetDimensionsWrapper = assetDimensionsWrapper;
            BoundingBoxCenterWrapper = boundingBoxCenterWrapper;
            GravityWrapper = gravityWrapper;
            KeyFrameIndexes = keyFrameIndexes;
            GroundTruthTrajectoryCameraPoses = groundTruthTrajectoryCameraPoses;
            PrincipalAxisWrapper = principalAxisWrapper;
            Scale = scale;
            DisableDetectScaleUnits = disableDetectScaleUnits;
            SupportingPlaneWrapper = supportingPlaneWrapper;
            TestTrajectoryCameraPoses = testTrajectoryCameraPoses;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AssetConversionConfiguration"/> for deserialization. </summary>
        internal AssetConversionConfiguration()
        {
        }
    }
}
