// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.MixedReality.ObjectAnchors.Conversion
{
    /// <summary> The ConversionErrorCode. </summary>
    public readonly partial struct ConversionErrorCode : IEquatable<ConversionErrorCode>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ConversionErrorCode"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConversionErrorCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "UNKNOWN";
        private const string NoErrorValue = "NO_ERROR";
        private const string ServiceErrorValue = "SERVICE_ERROR";
        private const string InvalidAssetUriValue = "INVALID_ASSET_URI";
        private const string InvalidJobIdValue = "INVALID_JOB_ID";
        private const string InvalidGravityValue = "INVALID_GRAVITY";
        private const string InvalidScaleValue = "INVALID_SCALE";
        private const string AssetSizeTooLargeValue = "ASSET_SIZE_TOO_LARGE";
        private const string AssetDimensionsOutOfBoundsValue = "ASSET_DIMENSIONS_OUT_OF_BOUNDS";
        private const string ZeroFacesValue = "ZERO_FACES";
        private const string InvalidFaceVerticesValue = "INVALID_FACE_VERTICES";
        private const string ZeroTrajectoriesGeneratedValue = "ZERO_TRAJECTORIES_GENERATED";
        private const string TooManyRigPosesValue = "TOO_MANY_RIG_POSES";
        private const string AssetCannotBeConvertedValue = "ASSET_CANNOT_BE_CONVERTED";

        /// <summary> UNKNOWN. </summary>
        public static ConversionErrorCode Unknown { get; } = new ConversionErrorCode(UnknownValue);
        /// <summary> NO_ERROR. </summary>
        public static ConversionErrorCode NoError { get; } = new ConversionErrorCode(NoErrorValue);
        /// <summary> SERVICE_ERROR. </summary>
        public static ConversionErrorCode ServiceError { get; } = new ConversionErrorCode(ServiceErrorValue);
        /// <summary> INVALID_ASSET_URI. </summary>
        public static ConversionErrorCode InvalidAssetUri { get; } = new ConversionErrorCode(InvalidAssetUriValue);
        /// <summary> INVALID_JOB_ID. </summary>
        public static ConversionErrorCode InvalidJobId { get; } = new ConversionErrorCode(InvalidJobIdValue);
        /// <summary> INVALID_GRAVITY. </summary>
        public static ConversionErrorCode InvalidGravity { get; } = new ConversionErrorCode(InvalidGravityValue);
        /// <summary> INVALID_SCALE. </summary>
        public static ConversionErrorCode InvalidScale { get; } = new ConversionErrorCode(InvalidScaleValue);
        /// <summary> ASSET_SIZE_TOO_LARGE. </summary>
        public static ConversionErrorCode AssetSizeTooLarge { get; } = new ConversionErrorCode(AssetSizeTooLargeValue);
        /// <summary> ASSET_DIMENSIONS_OUT_OF_BOUNDS. </summary>
        public static ConversionErrorCode AssetDimensionsOutOfBounds { get; } = new ConversionErrorCode(AssetDimensionsOutOfBoundsValue);
        /// <summary> ZERO_FACES. </summary>
        public static ConversionErrorCode ZeroFaces { get; } = new ConversionErrorCode(ZeroFacesValue);
        /// <summary> INVALID_FACE_VERTICES. </summary>
        public static ConversionErrorCode InvalidFaceVertices { get; } = new ConversionErrorCode(InvalidFaceVerticesValue);
        /// <summary> ZERO_TRAJECTORIES_GENERATED. </summary>
        public static ConversionErrorCode ZeroTrajectoriesGenerated { get; } = new ConversionErrorCode(ZeroTrajectoriesGeneratedValue);
        /// <summary> TOO_MANY_RIG_POSES. </summary>
        public static ConversionErrorCode TooManyRigPoses { get; } = new ConversionErrorCode(TooManyRigPosesValue);
        /// <summary> ASSET_CANNOT_BE_CONVERTED. </summary>
        public static ConversionErrorCode AssetCannotBeConverted { get; } = new ConversionErrorCode(AssetCannotBeConvertedValue);
        /// <summary> Determines if two <see cref="ConversionErrorCode"/> values are the same. </summary>
        public static bool operator ==(ConversionErrorCode left, ConversionErrorCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConversionErrorCode"/> values are not the same. </summary>
        public static bool operator !=(ConversionErrorCode left, ConversionErrorCode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConversionErrorCode"/>. </summary>
        public static implicit operator ConversionErrorCode(string value) => new ConversionErrorCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConversionErrorCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConversionErrorCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
