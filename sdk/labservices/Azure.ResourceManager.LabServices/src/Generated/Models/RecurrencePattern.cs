// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.LabServices.Models
{
    /// <summary>
    /// Recurrence pattern of a lab schedule.
    /// Serialized Name: RecurrencePattern
    /// </summary>
    public partial class RecurrencePattern
    {
        /// <summary> Initializes a new instance of RecurrencePattern. </summary>
        /// <param name="frequency">
        /// The frequency of the recurrence.
        /// Serialized Name: RecurrencePattern.frequency
        /// </param>
        /// <param name="expireOn">
        /// When the recurrence will expire. This date is inclusive.
        /// Serialized Name: RecurrencePattern.expirationDate
        /// </param>
        public RecurrencePattern(RecurrenceFrequency frequency, DateTimeOffset expireOn)
        {
            Frequency = frequency;
            WeekDays = new ChangeTrackingList<WeekDay>();
            ExpireOn = expireOn;
        }

        /// <summary> Initializes a new instance of RecurrencePattern. </summary>
        /// <param name="frequency">
        /// The frequency of the recurrence.
        /// Serialized Name: RecurrencePattern.frequency
        /// </param>
        /// <param name="weekDays">
        /// The week days the schedule runs. Used for when the Frequency is set to Weekly.
        /// Serialized Name: RecurrencePattern.weekDays
        /// </param>
        /// <param name="interval">
        /// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
        /// Serialized Name: RecurrencePattern.interval
        /// </param>
        /// <param name="expireOn">
        /// When the recurrence will expire. This date is inclusive.
        /// Serialized Name: RecurrencePattern.expirationDate
        /// </param>
        internal RecurrencePattern(RecurrenceFrequency frequency, IList<WeekDay> weekDays, int? interval, DateTimeOffset expireOn)
        {
            Frequency = frequency;
            WeekDays = weekDays;
            Interval = interval;
            ExpireOn = expireOn;
        }

        /// <summary>
        /// The frequency of the recurrence.
        /// Serialized Name: RecurrencePattern.frequency
        /// </summary>
        public RecurrenceFrequency Frequency { get; set; }
        /// <summary>
        /// The week days the schedule runs. Used for when the Frequency is set to Weekly.
        /// Serialized Name: RecurrencePattern.weekDays
        /// </summary>
        public IList<WeekDay> WeekDays { get; }
        /// <summary>
        /// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
        /// Serialized Name: RecurrencePattern.interval
        /// </summary>
        public int? Interval { get; set; }
        /// <summary>
        /// When the recurrence will expire. This date is inclusive.
        /// Serialized Name: RecurrencePattern.expirationDate
        /// </summary>
        public DateTimeOffset ExpireOn { get; set; }
    }
}
