// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.LabServices.Models
{
    public partial class LabConnectionProfile : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(WebSshAccess))
            {
                writer.WritePropertyName("webSshAccess"u8);
                writer.WriteStringValue(WebSshAccess.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(WebRdpAccess))
            {
                writer.WritePropertyName("webRdpAccess"u8);
                writer.WriteStringValue(WebRdpAccess.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(ClientSshAccess))
            {
                writer.WritePropertyName("clientSshAccess"u8);
                writer.WriteStringValue(ClientSshAccess.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(ClientRdpAccess))
            {
                writer.WritePropertyName("clientRdpAccess"u8);
                writer.WriteStringValue(ClientRdpAccess.Value.ToSerialString());
            }
            writer.WriteEndObject();
        }

        internal static LabConnectionProfile DeserializeLabConnectionProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<LabVirtualMachineConnectionType> webSshAccess = default;
            Core.Optional<LabVirtualMachineConnectionType> webRdpAccess = default;
            Core.Optional<LabVirtualMachineConnectionType> clientSshAccess = default;
            Core.Optional<LabVirtualMachineConnectionType> clientRdpAccess = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("webSshAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    webSshAccess = property.Value.GetString().ToLabVirtualMachineConnectionType();
                    continue;
                }
                if (property.NameEquals("webRdpAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    webRdpAccess = property.Value.GetString().ToLabVirtualMachineConnectionType();
                    continue;
                }
                if (property.NameEquals("clientSshAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clientSshAccess = property.Value.GetString().ToLabVirtualMachineConnectionType();
                    continue;
                }
                if (property.NameEquals("clientRdpAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clientRdpAccess = property.Value.GetString().ToLabVirtualMachineConnectionType();
                    continue;
                }
            }
            return new LabConnectionProfile(Core.Optional.ToNullable(webSshAccess), Core.Optional.ToNullable(webRdpAccess), Core.Optional.ToNullable(clientSshAccess), Core.Optional.ToNullable(clientRdpAccess));
        }
    }
}
