// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.LabServices.Models
{
    public partial class LabAutoShutdownProfile : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ShutdownOnDisconnect))
            {
                writer.WritePropertyName("shutdownOnDisconnect"u8);
                writer.WriteStringValue(ShutdownOnDisconnect.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(ShutdownWhenNotConnected))
            {
                writer.WritePropertyName("shutdownWhenNotConnected"u8);
                writer.WriteStringValue(ShutdownWhenNotConnected.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(ShutdownOnIdle))
            {
                writer.WritePropertyName("shutdownOnIdle"u8);
                writer.WriteStringValue(ShutdownOnIdle.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(DisconnectDelay))
            {
                writer.WritePropertyName("disconnectDelay"u8);
                writer.WriteStringValue(DisconnectDelay.Value, "P");
            }
            if (Core.Optional.IsDefined(NoConnectDelay))
            {
                writer.WritePropertyName("noConnectDelay"u8);
                writer.WriteStringValue(NoConnectDelay.Value, "P");
            }
            if (Core.Optional.IsDefined(IdleDelay))
            {
                writer.WritePropertyName("idleDelay"u8);
                writer.WriteStringValue(IdleDelay.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static LabAutoShutdownProfile DeserializeLabAutoShutdownProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<LabServicesEnableState> shutdownOnDisconnect = default;
            Core.Optional<LabServicesEnableState> shutdownWhenNotConnected = default;
            Core.Optional<LabVirtualMachineShutdownOnIdleMode> shutdownOnIdle = default;
            Core.Optional<TimeSpan> disconnectDelay = default;
            Core.Optional<TimeSpan> noConnectDelay = default;
            Core.Optional<TimeSpan> idleDelay = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("shutdownOnDisconnect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shutdownOnDisconnect = property.Value.GetString().ToLabServicesEnableState();
                    continue;
                }
                if (property.NameEquals("shutdownWhenNotConnected"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shutdownWhenNotConnected = property.Value.GetString().ToLabServicesEnableState();
                    continue;
                }
                if (property.NameEquals("shutdownOnIdle"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shutdownOnIdle = property.Value.GetString().ToLabVirtualMachineShutdownOnIdleMode();
                    continue;
                }
                if (property.NameEquals("disconnectDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disconnectDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("noConnectDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    noConnectDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("idleDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    idleDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new LabAutoShutdownProfile(Core.Optional.ToNullable(shutdownOnDisconnect), Core.Optional.ToNullable(shutdownWhenNotConnected), Core.Optional.ToNullable(shutdownOnIdle), Core.Optional.ToNullable(disconnectDelay), Core.Optional.ToNullable(noConnectDelay), Core.Optional.ToNullable(idleDelay));
        }
    }
}
