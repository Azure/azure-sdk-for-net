// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.LabServices.Models
{
    public partial class LabAutoShutdownProfile : IUtf8JsonSerializable, IModelJsonSerializable<LabAutoShutdownProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<LabAutoShutdownProfile>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<LabAutoShutdownProfile>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LabAutoShutdownProfile>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(ShutdownOnDisconnect))
            {
                writer.WritePropertyName("shutdownOnDisconnect"u8);
                writer.WriteStringValue(ShutdownOnDisconnect.Value.ToSerialString());
            }
            if (Optional.IsDefined(ShutdownWhenNotConnected))
            {
                writer.WritePropertyName("shutdownWhenNotConnected"u8);
                writer.WriteStringValue(ShutdownWhenNotConnected.Value.ToSerialString());
            }
            if (Optional.IsDefined(ShutdownOnIdle))
            {
                writer.WritePropertyName("shutdownOnIdle"u8);
                writer.WriteStringValue(ShutdownOnIdle.Value.ToSerialString());
            }
            if (Optional.IsDefined(DisconnectDelay))
            {
                writer.WritePropertyName("disconnectDelay"u8);
                writer.WriteStringValue(DisconnectDelay.Value, "P");
            }
            if (Optional.IsDefined(NoConnectDelay))
            {
                writer.WritePropertyName("noConnectDelay"u8);
                writer.WriteStringValue(NoConnectDelay.Value, "P");
            }
            if (Optional.IsDefined(IdleDelay))
            {
                writer.WritePropertyName("idleDelay"u8);
                writer.WriteStringValue(IdleDelay.Value, "P");
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static LabAutoShutdownProfile DeserializeLabAutoShutdownProfile(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<LabServicesEnableState> shutdownOnDisconnect = default;
            Optional<LabServicesEnableState> shutdownWhenNotConnected = default;
            Optional<LabVirtualMachineShutdownOnIdleMode> shutdownOnIdle = default;
            Optional<TimeSpan> disconnectDelay = default;
            Optional<TimeSpan> noConnectDelay = default;
            Optional<TimeSpan> idleDelay = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("shutdownOnDisconnect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shutdownOnDisconnect = property.Value.GetString().ToLabServicesEnableState();
                    continue;
                }
                if (property.NameEquals("shutdownWhenNotConnected"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shutdownWhenNotConnected = property.Value.GetString().ToLabServicesEnableState();
                    continue;
                }
                if (property.NameEquals("shutdownOnIdle"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shutdownOnIdle = property.Value.GetString().ToLabVirtualMachineShutdownOnIdleMode();
                    continue;
                }
                if (property.NameEquals("disconnectDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disconnectDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("noConnectDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    noConnectDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("idleDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    idleDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new LabAutoShutdownProfile(Optional.ToNullable(shutdownOnDisconnect), Optional.ToNullable(shutdownWhenNotConnected), Optional.ToNullable(shutdownOnIdle), Optional.ToNullable(disconnectDelay), Optional.ToNullable(noConnectDelay), Optional.ToNullable(idleDelay), serializedAdditionalRawData);
        }

        LabAutoShutdownProfile IModelJsonSerializable<LabAutoShutdownProfile>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LabAutoShutdownProfile>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeLabAutoShutdownProfile(doc.RootElement, options);
        }

        BinaryData IModelSerializable<LabAutoShutdownProfile>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LabAutoShutdownProfile>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        LabAutoShutdownProfile IModelSerializable<LabAutoShutdownProfile>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LabAutoShutdownProfile>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeLabAutoShutdownProfile(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="LabAutoShutdownProfile"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="LabAutoShutdownProfile"/> to convert. </param>
        public static implicit operator RequestContent(LabAutoShutdownProfile model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="LabAutoShutdownProfile"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator LabAutoShutdownProfile(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeLabAutoShutdownProfile(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
