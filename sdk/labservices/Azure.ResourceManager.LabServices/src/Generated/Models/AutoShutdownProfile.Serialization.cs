// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.LabServices.Models
{
    public partial class AutoShutdownProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ShutdownOnDisconnect))
            {
                writer.WritePropertyName("shutdownOnDisconnect");
                writer.WriteStringValue(ShutdownOnDisconnect.Value.ToSerialString());
            }
            if (Optional.IsDefined(ShutdownWhenNotConnected))
            {
                writer.WritePropertyName("shutdownWhenNotConnected");
                writer.WriteStringValue(ShutdownWhenNotConnected.Value.ToSerialString());
            }
            if (Optional.IsDefined(ShutdownOnIdle))
            {
                writer.WritePropertyName("shutdownOnIdle");
                writer.WriteStringValue(ShutdownOnIdle.Value.ToSerialString());
            }
            if (Optional.IsDefined(DisconnectDelay))
            {
                writer.WritePropertyName("disconnectDelay");
                writer.WriteStringValue(DisconnectDelay.Value, "P");
            }
            if (Optional.IsDefined(NoConnectDelay))
            {
                writer.WritePropertyName("noConnectDelay");
                writer.WriteStringValue(NoConnectDelay.Value, "P");
            }
            if (Optional.IsDefined(IdleDelay))
            {
                writer.WritePropertyName("idleDelay");
                writer.WriteStringValue(IdleDelay.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static AutoShutdownProfile DeserializeAutoShutdownProfile(JsonElement element)
        {
            Optional<EnableState> shutdownOnDisconnect = default;
            Optional<EnableState> shutdownWhenNotConnected = default;
            Optional<ShutdownOnIdleMode> shutdownOnIdle = default;
            Optional<TimeSpan> disconnectDelay = default;
            Optional<TimeSpan> noConnectDelay = default;
            Optional<TimeSpan> idleDelay = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("shutdownOnDisconnect"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    shutdownOnDisconnect = property.Value.GetString().ToEnableState();
                    continue;
                }
                if (property.NameEquals("shutdownWhenNotConnected"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    shutdownWhenNotConnected = property.Value.GetString().ToEnableState();
                    continue;
                }
                if (property.NameEquals("shutdownOnIdle"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    shutdownOnIdle = property.Value.GetString().ToShutdownOnIdleMode();
                    continue;
                }
                if (property.NameEquals("disconnectDelay"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    disconnectDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("noConnectDelay"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    noConnectDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("idleDelay"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    idleDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new AutoShutdownProfile(Optional.ToNullable(shutdownOnDisconnect), Optional.ToNullable(shutdownWhenNotConnected), Optional.ToNullable(shutdownOnIdle), Optional.ToNullable(disconnectDelay), Optional.ToNullable(noConnectDelay), Optional.ToNullable(idleDelay));
        }
    }
}
