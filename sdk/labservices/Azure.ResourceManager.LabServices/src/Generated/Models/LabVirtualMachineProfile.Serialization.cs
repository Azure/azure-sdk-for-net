// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.LabServices.Models
{
    public partial class LabVirtualMachineProfile : IUtf8JsonSerializable, IModelJsonSerializable<LabVirtualMachineProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<LabVirtualMachineProfile>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<LabVirtualMachineProfile>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LabVirtualMachineProfile>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("createOption"u8);
            writer.WriteStringValue(CreateOption.ToSerialString());
            writer.WritePropertyName("imageReference"u8);
            if (ImageReference is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<LabVirtualMachineImageReference>)ImageReference).Serialize(writer, options);
            }
            writer.WritePropertyName("sku"u8);
            if (Sku is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<LabServicesSku>)Sku).Serialize(writer, options);
            }
            if (Optional.IsDefined(AdditionalCapabilities))
            {
                writer.WritePropertyName("additionalCapabilities"u8);
                if (AdditionalCapabilities is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<LabVirtualMachineAdditionalCapability>)AdditionalCapabilities).Serialize(writer, options);
                }
            }
            writer.WritePropertyName("usageQuota"u8);
            writer.WriteStringValue(UsageQuota, "P");
            if (Optional.IsDefined(UseSharedPassword))
            {
                writer.WritePropertyName("useSharedPassword"u8);
                writer.WriteStringValue(UseSharedPassword.Value.ToSerialString());
            }
            writer.WritePropertyName("adminUser"u8);
            if (AdminUser is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<LabVirtualMachineCredential>)AdminUser).Serialize(writer, options);
            }
            if (Optional.IsDefined(NonAdminUser))
            {
                writer.WritePropertyName("nonAdminUser"u8);
                if (NonAdminUser is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<LabVirtualMachineCredential>)NonAdminUser).Serialize(writer, options);
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static LabVirtualMachineProfile DeserializeLabVirtualMachineProfile(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            LabVirtualMachineCreateOption createOption = default;
            LabVirtualMachineImageReference imageReference = default;
            Optional<LabVirtualMachineImageOSType> osType = default;
            LabServicesSku sku = default;
            Optional<LabVirtualMachineAdditionalCapability> additionalCapabilities = default;
            TimeSpan usageQuota = default;
            Optional<LabServicesEnableState> useSharedPassword = default;
            LabVirtualMachineCredential adminUser = default;
            Optional<LabVirtualMachineCredential> nonAdminUser = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("createOption"u8))
                {
                    createOption = property.Value.GetString().ToLabVirtualMachineCreateOption();
                    continue;
                }
                if (property.NameEquals("imageReference"u8))
                {
                    imageReference = LabVirtualMachineImageReference.DeserializeLabVirtualMachineImageReference(property.Value);
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osType = property.Value.GetString().ToLabVirtualMachineImageOSType();
                    continue;
                }
                if (property.NameEquals("sku"u8))
                {
                    sku = LabServicesSku.DeserializeLabServicesSku(property.Value);
                    continue;
                }
                if (property.NameEquals("additionalCapabilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    additionalCapabilities = LabVirtualMachineAdditionalCapability.DeserializeLabVirtualMachineAdditionalCapability(property.Value);
                    continue;
                }
                if (property.NameEquals("usageQuota"u8))
                {
                    usageQuota = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("useSharedPassword"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    useSharedPassword = property.Value.GetString().ToLabServicesEnableState();
                    continue;
                }
                if (property.NameEquals("adminUser"u8))
                {
                    adminUser = LabVirtualMachineCredential.DeserializeLabVirtualMachineCredential(property.Value);
                    continue;
                }
                if (property.NameEquals("nonAdminUser"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nonAdminUser = LabVirtualMachineCredential.DeserializeLabVirtualMachineCredential(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new LabVirtualMachineProfile(createOption, imageReference, Optional.ToNullable(osType), sku, additionalCapabilities.Value, usageQuota, Optional.ToNullable(useSharedPassword), adminUser, nonAdminUser.Value, rawData);
        }

        LabVirtualMachineProfile IModelJsonSerializable<LabVirtualMachineProfile>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LabVirtualMachineProfile>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeLabVirtualMachineProfile(doc.RootElement, options);
        }

        BinaryData IModelSerializable<LabVirtualMachineProfile>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LabVirtualMachineProfile>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        LabVirtualMachineProfile IModelSerializable<LabVirtualMachineProfile>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LabVirtualMachineProfile>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeLabVirtualMachineProfile(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="LabVirtualMachineProfile"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="LabVirtualMachineProfile"/> to convert. </param>
        public static implicit operator RequestContent(LabVirtualMachineProfile model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="LabVirtualMachineProfile"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator LabVirtualMachineProfile(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeLabVirtualMachineProfile(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
