// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.LabServices.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.LabServices
{
    /// <summary> A class representing the Schedule data model. </summary>
    public partial class ScheduleData : ResourceData
    {
        /// <summary> Initializes a new instance of ScheduleData. </summary>
        public ScheduleData()
        {
        }

        /// <summary> Initializes a new instance of ScheduleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startOn"> When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead. </param>
        /// <param name="stopOn"> When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead. </param>
        /// <param name="recurrencePattern"> The recurrence pattern of the scheduled actions. </param>
        /// <param name="timeZoneId"> The IANA timezone id for the schedule. </param>
        /// <param name="notes"> Notes for this schedule. </param>
        /// <param name="provisioningState"> Current provisioning state of the schedule. </param>
        internal ScheduleData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DateTimeOffset? startOn, DateTimeOffset? stopOn, RecurrencePattern recurrencePattern, string timeZoneId, string notes, ProvisioningState? provisioningState) : base(id, name, resourceType, systemData)
        {
            StartOn = startOn;
            StopOn = stopOn;
            RecurrencePattern = recurrencePattern;
            TimeZoneId = timeZoneId;
            Notes = notes;
            ProvisioningState = provisioningState;
        }

        /// <summary> When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead. </summary>
        public DateTimeOffset? StartOn { get; set; }
        /// <summary> When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead. </summary>
        public DateTimeOffset? StopOn { get; set; }
        /// <summary> The recurrence pattern of the scheduled actions. </summary>
        public RecurrencePattern RecurrencePattern { get; set; }
        /// <summary> The IANA timezone id for the schedule. </summary>
        public string TimeZoneId { get; set; }
        /// <summary> Notes for this schedule. </summary>
        public string Notes { get; set; }
        /// <summary> Current provisioning state of the schedule. </summary>
        public ProvisioningState? ProvisioningState { get; }
    }
}
