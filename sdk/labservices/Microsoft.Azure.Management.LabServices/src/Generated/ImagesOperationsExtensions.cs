// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ImagesOperations.
    /// </summary>
    public static partial class ImagesOperationsExtensions
    {
            /// <summary>
            /// Gets all images.
            /// </summary>
            /// <remarks>
            /// Gets all images from galleries attached to a lab plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labPlanName'>
            /// The name of the lab plan that uniquely identifies it within containing
            /// resource group. Used in resource URIs and in UI.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the operation.
            /// </param>
            public static IPage<Image> ListByLabPlan(this IImagesOperations operations, string resourceGroupName, string labPlanName, string filter = default(string))
            {
                return operations.ListByLabPlanAsync(resourceGroupName, labPlanName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all images.
            /// </summary>
            /// <remarks>
            /// Gets all images from galleries attached to a lab plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labPlanName'>
            /// The name of the lab plan that uniquely identifies it within containing
            /// resource group. Used in resource URIs and in UI.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Image>> ListByLabPlanAsync(this IImagesOperations operations, string resourceGroupName, string labPlanName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByLabPlanWithHttpMessagesAsync(resourceGroupName, labPlanName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an image.
            /// </summary>
            /// <remarks>
            /// Gets an image resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labPlanName'>
            /// The name of the lab plan that uniquely identifies it within containing
            /// resource group. Used in resource URIs and in UI.
            /// </param>
            /// <param name='imageName'>
            /// The image name.
            /// </param>
            public static Image Get(this IImagesOperations operations, string resourceGroupName, string labPlanName, string imageName)
            {
                return operations.GetAsync(resourceGroupName, labPlanName, imageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an image.
            /// </summary>
            /// <remarks>
            /// Gets an image resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labPlanName'>
            /// The name of the lab plan that uniquely identifies it within containing
            /// resource group. Used in resource URIs and in UI.
            /// </param>
            /// <param name='imageName'>
            /// The image name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Image> GetAsync(this IImagesOperations operations, string resourceGroupName, string labPlanName, string imageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, labPlanName, imageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an image via PUT.
            /// </summary>
            /// <remarks>
            /// Updates an image resource via PUT. Creating new resources via PUT will not
            /// function.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labPlanName'>
            /// The name of the lab plan that uniquely identifies it within containing
            /// resource group. Used in resource URIs and in UI.
            /// </param>
            /// <param name='imageName'>
            /// The image name.
            /// </param>
            public static Image CreateOrUpdate(this IImagesOperations operations, Image body, string resourceGroupName, string labPlanName, string imageName)
            {
                return operations.CreateOrUpdateAsync(body, resourceGroupName, labPlanName, imageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an image via PUT.
            /// </summary>
            /// <remarks>
            /// Updates an image resource via PUT. Creating new resources via PUT will not
            /// function.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labPlanName'>
            /// The name of the lab plan that uniquely identifies it within containing
            /// resource group. Used in resource URIs and in UI.
            /// </param>
            /// <param name='imageName'>
            /// The image name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Image> CreateOrUpdateAsync(this IImagesOperations operations, Image body, string resourceGroupName, string labPlanName, string imageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(body, resourceGroupName, labPlanName, imageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an image.
            /// </summary>
            /// <remarks>
            /// Updates an image resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labPlanName'>
            /// The name of the lab plan that uniquely identifies it within containing
            /// resource group. Used in resource URIs and in UI.
            /// </param>
            /// <param name='imageName'>
            /// The image name.
            /// </param>
            public static Image Update(this IImagesOperations operations, ImageUpdate body, string resourceGroupName, string labPlanName, string imageName)
            {
                return operations.UpdateAsync(body, resourceGroupName, labPlanName, imageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an image.
            /// </summary>
            /// <remarks>
            /// Updates an image resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labPlanName'>
            /// The name of the lab plan that uniquely identifies it within containing
            /// resource group. Used in resource URIs and in UI.
            /// </param>
            /// <param name='imageName'>
            /// The image name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Image> UpdateAsync(this IImagesOperations operations, ImageUpdate body, string resourceGroupName, string labPlanName, string imageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(body, resourceGroupName, labPlanName, imageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all images.
            /// </summary>
            /// <remarks>
            /// Gets all images from galleries attached to a lab plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Image> ListByLabPlanNext(this IImagesOperations operations, string nextPageLink)
            {
                return operations.ListByLabPlanNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all images.
            /// </summary>
            /// <remarks>
            /// Gets all images from galleries attached to a lab plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Image>> ListByLabPlanNextAsync(this IImagesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByLabPlanNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
