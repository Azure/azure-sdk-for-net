// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SchedulesOperations.
    /// </summary>
    public static partial class SchedulesOperationsExtensions
    {
            /// <summary>
            /// Get all schedules for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all schedules for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the operation.
            /// </param>
            public static IPage<Schedule> ListByLab(this ISchedulesOperations operations, string resourceGroupName, string labName, string filter = default(string))
            {
                return operations.ListByLabAsync(resourceGroupName, labName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all schedules for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all schedules for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Schedule>> ListByLabAsync(this ISchedulesOperations operations, string resourceGroupName, string labName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByLabWithHttpMessagesAsync(resourceGroupName, labName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a lab Schedule.
            /// </summary>
            /// <remarks>
            /// Returns the properties of a lab Schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static Schedule Get(this ISchedulesOperations operations, string resourceGroupName, string labName, string scheduleName)
            {
                return operations.GetAsync(resourceGroupName, labName, scheduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a lab Schedule.
            /// </summary>
            /// <remarks>
            /// Returns the properties of a lab Schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Schedule> GetAsync(this ISchedulesOperations operations, string resourceGroupName, string labName, string scheduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, labName, scheduleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a lab schedule.
            /// </summary>
            /// <remarks>
            /// Operation to create or update a lab schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static Schedule CreateOrUpdate(this ISchedulesOperations operations, Schedule body, string resourceGroupName, string labName, string scheduleName)
            {
                return operations.CreateOrUpdateAsync(body, resourceGroupName, labName, scheduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a lab schedule.
            /// </summary>
            /// <remarks>
            /// Operation to create or update a lab schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Schedule> CreateOrUpdateAsync(this ISchedulesOperations operations, Schedule body, string resourceGroupName, string labName, string scheduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(body, resourceGroupName, labName, scheduleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a lab schedule.
            /// </summary>
            /// <remarks>
            /// Operation to update a lab schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static Schedule Update(this ISchedulesOperations operations, ScheduleUpdate body, string resourceGroupName, string labName, string scheduleName)
            {
                return operations.UpdateAsync(body, resourceGroupName, labName, scheduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a lab schedule.
            /// </summary>
            /// <remarks>
            /// Operation to update a lab schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Schedule> UpdateAsync(this ISchedulesOperations operations, ScheduleUpdate body, string resourceGroupName, string labName, string scheduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(body, resourceGroupName, labName, scheduleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a schedule resource.
            /// </summary>
            /// <remarks>
            /// Operation to delete a schedule resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static void Delete(this ISchedulesOperations operations, string resourceGroupName, string labName, string scheduleName)
            {
                operations.DeleteAsync(resourceGroupName, labName, scheduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a schedule resource.
            /// </summary>
            /// <remarks>
            /// Operation to delete a schedule resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISchedulesOperations operations, string resourceGroupName, string labName, string scheduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, labName, scheduleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a schedule resource.
            /// </summary>
            /// <remarks>
            /// Operation to delete a schedule resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static void BeginDelete(this ISchedulesOperations operations, string resourceGroupName, string labName, string scheduleName)
            {
                operations.BeginDeleteAsync(resourceGroupName, labName, scheduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a schedule resource.
            /// </summary>
            /// <remarks>
            /// Operation to delete a schedule resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='scheduleName'>
            /// The name of the schedule that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISchedulesOperations operations, string resourceGroupName, string labName, string scheduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, labName, scheduleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all schedules for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all schedules for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Schedule> ListByLabNext(this ISchedulesOperations operations, string nextPageLink)
            {
                return operations.ListByLabNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all schedules for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all schedules for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Schedule>> ListByLabNextAsync(this ISchedulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByLabNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
