// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UsersOperations.
    /// </summary>
    public static partial class UsersOperationsExtensions
    {
            /// <summary>
            /// Get all users for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all users for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the operation.
            /// </param>
            public static IPage<User> ListByLab(this IUsersOperations operations, string resourceGroupName, string labName, string filter = default(string))
            {
                return operations.ListByLabAsync(resourceGroupName, labName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all users for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all users for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<User>> ListByLabAsync(this IUsersOperations operations, string resourceGroupName, string labName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByLabWithHttpMessagesAsync(resourceGroupName, labName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a lab user.
            /// </summary>
            /// <remarks>
            /// Returns the properties of a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static User Get(this IUsersOperations operations, string resourceGroupName, string labName, string userName)
            {
                return operations.GetAsync(resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a lab user.
            /// </summary>
            /// <remarks>
            /// Returns the properties of a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> GetAsync(this IUsersOperations operations, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a lab user.
            /// </summary>
            /// <remarks>
            /// Operation to create or update a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static User CreateOrUpdate(this IUsersOperations operations, User body, string resourceGroupName, string labName, string userName)
            {
                return operations.CreateOrUpdateAsync(body, resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a lab user.
            /// </summary>
            /// <remarks>
            /// Operation to create or update a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> CreateOrUpdateAsync(this IUsersOperations operations, User body, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(body, resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a lab user.
            /// </summary>
            /// <remarks>
            /// Operation to update a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static User Update(this IUsersOperations operations, UserUpdate body, string resourceGroupName, string labName, string userName)
            {
                return operations.UpdateAsync(body, resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a lab user.
            /// </summary>
            /// <remarks>
            /// Operation to update a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> UpdateAsync(this IUsersOperations operations, UserUpdate body, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(body, resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user resource.
            /// </summary>
            /// <remarks>
            /// Operation to delete a user resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static void Delete(this IUsersOperations operations, string resourceGroupName, string labName, string userName)
            {
                operations.DeleteAsync(resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user resource.
            /// </summary>
            /// <remarks>
            /// Operation to delete a user resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IUsersOperations operations, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invite a user to a lab.
            /// </summary>
            /// <remarks>
            /// Operation to invite a user to a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static void Invite(this IUsersOperations operations, InviteBody body, string resourceGroupName, string labName, string userName)
            {
                operations.InviteAsync(body, resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invite a user to a lab.
            /// </summary>
            /// <remarks>
            /// Operation to invite a user to a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InviteAsync(this IUsersOperations operations, InviteBody body, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InviteWithHttpMessagesAsync(body, resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a lab user.
            /// </summary>
            /// <remarks>
            /// Operation to create or update a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static User BeginCreateOrUpdate(this IUsersOperations operations, User body, string resourceGroupName, string labName, string userName)
            {
                return operations.BeginCreateOrUpdateAsync(body, resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a lab user.
            /// </summary>
            /// <remarks>
            /// Operation to create or update a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> BeginCreateOrUpdateAsync(this IUsersOperations operations, User body, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(body, resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a lab user.
            /// </summary>
            /// <remarks>
            /// Operation to update a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static User BeginUpdate(this IUsersOperations operations, UserUpdate body, string resourceGroupName, string labName, string userName)
            {
                return operations.BeginUpdateAsync(body, resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a lab user.
            /// </summary>
            /// <remarks>
            /// Operation to update a lab user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> BeginUpdateAsync(this IUsersOperations operations, UserUpdate body, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(body, resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user resource.
            /// </summary>
            /// <remarks>
            /// Operation to delete a user resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static void BeginDelete(this IUsersOperations operations, string resourceGroupName, string labName, string userName)
            {
                operations.BeginDeleteAsync(resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user resource.
            /// </summary>
            /// <remarks>
            /// Operation to delete a user resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IUsersOperations operations, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invite a user to a lab.
            /// </summary>
            /// <remarks>
            /// Operation to invite a user to a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            public static void BeginInvite(this IUsersOperations operations, InviteBody body, string resourceGroupName, string labName, string userName)
            {
                operations.BeginInviteAsync(body, resourceGroupName, labName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invite a user to a lab.
            /// </summary>
            /// <remarks>
            /// Operation to invite a user to a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='userName'>
            /// The name of the user that uniquely identifies it within containing lab.
            /// Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginInviteAsync(this IUsersOperations operations, InviteBody body, string resourceGroupName, string labName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginInviteWithHttpMessagesAsync(body, resourceGroupName, labName, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all users for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all users for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<User> ListByLabNext(this IUsersOperations operations, string nextPageLink)
            {
                return operations.ListByLabNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all users for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all users for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<User>> ListByLabNextAsync(this IUsersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByLabNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
