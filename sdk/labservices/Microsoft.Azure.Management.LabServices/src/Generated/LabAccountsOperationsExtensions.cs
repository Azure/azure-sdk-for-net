// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LabAccountsOperations.
    /// </summary>
    public static partial class LabAccountsOperationsExtensions
    {
            /// <summary>
            /// List lab accounts in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<LabAccount> ListBySubscription(this ILabAccountsOperations operations, ODataQuery<LabAccount> odataQuery = default(ODataQuery<LabAccount>))
            {
                return operations.ListBySubscriptionAsync(odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List lab accounts in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LabAccount>> ListBySubscriptionAsync(this ILabAccountsOperations operations, ODataQuery<LabAccount> odataQuery = default(ODataQuery<LabAccount>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List lab accounts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<LabAccount> ListByResourceGroup(this ILabAccountsOperations operations, string resourceGroupName, ODataQuery<LabAccount> odataQuery = default(ODataQuery<LabAccount>))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List lab accounts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LabAccount>> ListByResourceGroupAsync(this ILabAccountsOperations operations, string resourceGroupName, ODataQuery<LabAccount> odataQuery = default(ODataQuery<LabAccount>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get lab account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='expand'>
            /// Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
            /// </param>
            public static LabAccount Get(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, string expand = default(string))
            {
                return operations.GetAsync(resourceGroupName, labAccountName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get lab account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='expand'>
            /// Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabAccount> GetAsync(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, labAccountName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace an existing Lab Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labAccount'>
            /// Represents a lab account.
            /// </param>
            public static LabAccount CreateOrUpdate(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, LabAccount labAccount)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, labAccountName, labAccount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace an existing Lab Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labAccount'>
            /// Represents a lab account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabAccount> CreateOrUpdateAsync(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, LabAccount labAccount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, labAccountName, labAccount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete lab account. This operation can take a while to complete
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            public static void Delete(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName)
            {
                operations.DeleteAsync(resourceGroupName, labAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete lab account. This operation can take a while to complete
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, labAccountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Modify properties of lab accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labAccount'>
            /// Represents a lab account.
            /// </param>
            public static LabAccount Update(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, LabAccountFragment labAccount)
            {
                return operations.UpdateAsync(resourceGroupName, labAccountName, labAccount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify properties of lab accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labAccount'>
            /// Represents a lab account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabAccount> UpdateAsync(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, LabAccountFragment labAccount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, labAccountName, labAccount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a lab in a lab account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='createLabProperties'>
            /// Properties for creating a managed lab and a default environment setting
            /// </param>
            public static void CreateLab(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, CreateLabProperties createLabProperties)
            {
                operations.CreateLabAsync(resourceGroupName, labAccountName, createLabProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a lab in a lab account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='createLabProperties'>
            /// Properties for creating a managed lab and a default environment setting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateLabAsync(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, CreateLabProperties createLabProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateLabWithHttpMessagesAsync(resourceGroupName, labAccountName, createLabProperties, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get regional availability information for each size category configured
            /// under a lab account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            public static GetRegionalAvailabilityResponse GetRegionalAvailability(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName)
            {
                return operations.GetRegionalAvailabilityAsync(resourceGroupName, labAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get regional availability information for each size category configured
            /// under a lab account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetRegionalAvailabilityResponse> GetRegionalAvailabilityAsync(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRegionalAvailabilityWithHttpMessagesAsync(resourceGroupName, labAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete lab account. This operation can take a while to complete
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            public static void BeginDelete(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName)
            {
                operations.BeginDeleteAsync(resourceGroupName, labAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete lab account. This operation can take a while to complete
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ILabAccountsOperations operations, string resourceGroupName, string labAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, labAccountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List lab accounts in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<LabAccount> ListBySubscriptionNext(this ILabAccountsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List lab accounts in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LabAccount>> ListBySubscriptionNextAsync(this ILabAccountsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List lab accounts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<LabAccount> ListByResourceGroupNext(this ILabAccountsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List lab accounts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LabAccount>> ListByResourceGroupNextAsync(this ILabAccountsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
