// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualMachinesOperations.
    /// </summary>
    public static partial class VirtualMachinesOperationsExtensions
    {
            /// <summary>
            /// Get all virtual machines for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all virtual machines for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the operation.
            /// </param>
            public static IPage<VirtualMachine> ListByLab(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string filter = default(string))
            {
                return operations.ListByLabAsync(resourceGroupName, labName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all virtual machines for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all virtual machines for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListByLabAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByLabWithHttpMessagesAsync(resourceGroupName, labName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Returns the properties for a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static VirtualMachine Get(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                return operations.GetAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Returns the properties for a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> GetAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Action to start a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void Start(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.StartAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Action to start a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Action to stop a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void Stop(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.StopAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Action to stop a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Re-image a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Re-image a lab virtual machine. The virtual machine will be deleted and
            /// recreated using the latest published snapshot of the reference environment
            /// of the lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void Reimage(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.ReimageAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Re-image a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Re-image a lab virtual machine. The virtual machine will be deleted and
            /// recreated using the latest published snapshot of the reference environment
            /// of the lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReimageAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReimageWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Redeploy a lab virtual machine to a different compute node. For
            /// troubleshooting connectivity.
            /// </summary>
            /// <remarks>
            /// Action to redeploy a lab virtual machine to a different compute node. For
            /// troubleshooting connectivity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void Redeploy(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.RedeployAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redeploy a lab virtual machine to a different compute node. For
            /// troubleshooting connectivity.
            /// </summary>
            /// <remarks>
            /// Action to redeploy a lab virtual machine to a different compute node. For
            /// troubleshooting connectivity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RedeployAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RedeployWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reset a lab virtual machine password.
            /// </summary>
            /// <remarks>
            /// Resets a lab virtual machine password.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void ResetPassword(this IVirtualMachinesOperations operations, ResetPasswordBody body, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.ResetPasswordAsync(body, resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset a lab virtual machine password.
            /// </summary>
            /// <remarks>
            /// Resets a lab virtual machine password.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetPasswordAsync(this IVirtualMachinesOperations operations, ResetPasswordBody body, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetPasswordWithHttpMessagesAsync(body, resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Action to start a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void BeginStart(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.BeginStartAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Action to start a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Action to stop a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void BeginStop(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.BeginStopAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Action to stop a lab virtual machine.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Re-image a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Re-image a lab virtual machine. The virtual machine will be deleted and
            /// recreated using the latest published snapshot of the reference environment
            /// of the lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void BeginReimage(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.BeginReimageAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Re-image a lab virtual machine.
            /// </summary>
            /// <remarks>
            /// Re-image a lab virtual machine. The virtual machine will be deleted and
            /// recreated using the latest published snapshot of the reference environment
            /// of the lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginReimageAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginReimageWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Redeploy a lab virtual machine to a different compute node. For
            /// troubleshooting connectivity.
            /// </summary>
            /// <remarks>
            /// Action to redeploy a lab virtual machine to a different compute node. For
            /// troubleshooting connectivity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void BeginRedeploy(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.BeginRedeployAsync(resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redeploy a lab virtual machine to a different compute node. For
            /// troubleshooting connectivity.
            /// </summary>
            /// <remarks>
            /// Action to redeploy a lab virtual machine to a different compute node. For
            /// troubleshooting connectivity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRedeployAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRedeployWithHttpMessagesAsync(resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reset a lab virtual machine password.
            /// </summary>
            /// <remarks>
            /// Resets a lab virtual machine password.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            public static void BeginResetPassword(this IVirtualMachinesOperations operations, ResetPasswordBody body, string resourceGroupName, string labName, string virtualMachineName)
            {
                operations.BeginResetPasswordAsync(body, resourceGroupName, labName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset a lab virtual machine password.
            /// </summary>
            /// <remarks>
            /// Resets a lab virtual machine password.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request body.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab that uniquely identifies it within containing lab
            /// account. Used in resource URIs.
            /// </param>
            /// <param name='virtualMachineName'>
            /// The ID of the virtual machine that uniquely identifies it within the
            /// containing lab. Used in resource URIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginResetPasswordAsync(this IVirtualMachinesOperations operations, ResetPasswordBody body, string resourceGroupName, string labName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginResetPasswordWithHttpMessagesAsync(body, resourceGroupName, labName, virtualMachineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all virtual machines for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all virtual machines for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualMachine> ListByLabNext(this IVirtualMachinesOperations operations, string nextPageLink)
            {
                return operations.ListByLabNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all virtual machines for a lab.
            /// </summary>
            /// <remarks>
            /// Returns a list of all virtual machines for a lab.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListByLabNextAsync(this IVirtualMachinesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByLabNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
