// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LabsOperations.
    /// </summary>
    public static partial class LabsOperationsExtensions
    {
            /// <summary>
            /// List labs in a given lab account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Lab> List(this ILabsOperations operations, string resourceGroupName, string labAccountName, ODataQuery<Lab> odataQuery = default(ODataQuery<Lab>))
            {
                return operations.ListAsync(resourceGroupName, labAccountName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List labs in a given lab account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Lab>> ListAsync(this ILabsOperations operations, string resourceGroupName, string labAccountName, ODataQuery<Lab> odataQuery = default(ODataQuery<Lab>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, labAccountName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get lab
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='expand'>
            /// Specify the $expand query. Example: 'properties($select=maxUsersInLab)'
            /// </param>
            public static Lab Get(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, string expand = default(string))
            {
                return operations.GetAsync(resourceGroupName, labAccountName, labName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get lab
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='expand'>
            /// Specify the $expand query. Example: 'properties($select=maxUsersInLab)'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Lab> GetAsync(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, labAccountName, labName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace an existing Lab.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='lab'>
            /// Represents a lab.
            /// </param>
            public static Lab CreateOrUpdate(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, Lab lab)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, labAccountName, labName, lab).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace an existing Lab.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='lab'>
            /// Represents a lab.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Lab> CreateOrUpdateAsync(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, Lab lab, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, labAccountName, labName, lab, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete lab. This operation can take a while to complete
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            public static void Delete(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName)
            {
                operations.DeleteAsync(resourceGroupName, labAccountName, labName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete lab. This operation can take a while to complete
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, labAccountName, labName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Modify properties of labs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='lab'>
            /// Represents a lab.
            /// </param>
            public static Lab Update(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, LabFragment lab)
            {
                return operations.UpdateAsync(resourceGroupName, labAccountName, labName, lab).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify properties of labs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='lab'>
            /// Represents a lab.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Lab> UpdateAsync(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, LabFragment lab, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, labAccountName, labName, lab, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add users to a lab
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='addUsersPayload'>
            /// Payload for Add Users operation on a Lab.
            /// </param>
            public static void AddUsers(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, AddUsersPayload addUsersPayload)
            {
                operations.AddUsersAsync(resourceGroupName, labAccountName, labName, addUsersPayload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add users to a lab
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='addUsersPayload'>
            /// Payload for Add Users operation on a Lab.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddUsersAsync(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, AddUsersPayload addUsersPayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddUsersWithHttpMessagesAsync(resourceGroupName, labAccountName, labName, addUsersPayload, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Register to managed lab.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            public static void Register(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName)
            {
                operations.RegisterAsync(resourceGroupName, labAccountName, labName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register to managed lab.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RegisterAsync(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RegisterWithHttpMessagesAsync(resourceGroupName, labAccountName, labName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete lab. This operation can take a while to complete
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            public static void BeginDelete(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName)
            {
                operations.BeginDeleteAsync(resourceGroupName, labAccountName, labName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete lab. This operation can take a while to complete
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labAccountName'>
            /// The name of the lab Account.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ILabsOperations operations, string resourceGroupName, string labAccountName, string labName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, labAccountName, labName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List labs in a given lab account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Lab> ListNext(this ILabsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List labs in a given lab account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Lab>> ListNextAsync(this ILabsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
