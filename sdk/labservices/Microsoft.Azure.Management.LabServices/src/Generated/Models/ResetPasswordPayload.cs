// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents the payload for resetting passwords.
    /// </summary>
    public partial class ResetPasswordPayload
    {
        /// <summary>
        /// Initializes a new instance of the ResetPasswordPayload class.
        /// </summary>
        public ResetPasswordPayload()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResetPasswordPayload class.
        /// </summary>
        /// <param name="environmentId">The resourceId of the
        /// environment</param>
        /// <param name="username">The username for which the password will be
        /// reset.</param>
        /// <param name="password">The password to assign to the user specified
        /// in</param>
        public ResetPasswordPayload(string environmentId, string username = default(string), string password = default(string))
        {
            EnvironmentId = environmentId;
            Username = username;
            Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resourceId of the environment
        /// </summary>
        [JsonProperty(PropertyName = "environmentId")]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Gets or sets the username for which the password will be reset.
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the password to assign to the user specified in
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EnvironmentId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EnvironmentId");
            }
        }
    }
}
