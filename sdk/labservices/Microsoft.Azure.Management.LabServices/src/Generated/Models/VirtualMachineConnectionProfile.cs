// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The connection information for the virtual machine
    /// </summary>
    public partial class VirtualMachineConnectionProfile
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineConnectionProfile
        /// class.
        /// </summary>
        public VirtualMachineConnectionProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineConnectionProfile
        /// class.
        /// </summary>
        /// <param name="privateIpAddress">The private IP address of the
        /// virtual machine.</param>
        /// <param name="sshAuthority">Port and host name separated by
        /// semicolon for connecting via SSH protocol to the virtual
        /// machine.</param>
        /// <param name="sshInBrowserUrl">URL for connecting via SSH protocol
        /// to the virtual machine in browser.</param>
        /// <param name="rdpAuthority">Port and host name separated by
        /// semicolon for connecting via RDP protocol to the virtual
        /// machine.</param>
        /// <param name="rdpInBrowserUrl">URL for connecting via RDP protocol
        /// to the virtual machine in browser.</param>
        /// <param name="adminUsername">The username used to log on to the
        /// virtual machine as admin.</param>
        /// <param name="nonAdminUsername">The username used to log on to the
        /// virtual machine as non-admin, if one exists.</param>
        public VirtualMachineConnectionProfile(string privateIpAddress = default(string), string sshAuthority = default(string), string sshInBrowserUrl = default(string), string rdpAuthority = default(string), string rdpInBrowserUrl = default(string), string adminUsername = default(string), string nonAdminUsername = default(string))
        {
            PrivateIpAddress = privateIpAddress;
            SshAuthority = sshAuthority;
            SshInBrowserUrl = sshInBrowserUrl;
            RdpAuthority = rdpAuthority;
            RdpInBrowserUrl = rdpInBrowserUrl;
            AdminUsername = adminUsername;
            NonAdminUsername = nonAdminUsername;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the private IP address of the virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "privateIpAddress")]
        public string PrivateIpAddress { get; private set; }

        /// <summary>
        /// Gets port and host name separated by semicolon for connecting via
        /// SSH protocol to the virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "sshAuthority")]
        public string SshAuthority { get; private set; }

        /// <summary>
        /// Gets URL for connecting via SSH protocol to the virtual machine in
        /// browser.
        /// </summary>
        [JsonProperty(PropertyName = "sshInBrowserUrl")]
        public string SshInBrowserUrl { get; private set; }

        /// <summary>
        /// Gets port and host name separated by semicolon for connecting via
        /// RDP protocol to the virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "rdpAuthority")]
        public string RdpAuthority { get; private set; }

        /// <summary>
        /// Gets URL for connecting via RDP protocol to the virtual machine in
        /// browser.
        /// </summary>
        [JsonProperty(PropertyName = "rdpInBrowserUrl")]
        public string RdpInBrowserUrl { get; private set; }

        /// <summary>
        /// Gets the username used to log on to the virtual machine as admin.
        /// </summary>
        [JsonProperty(PropertyName = "adminUsername")]
        public string AdminUsername { get; private set; }

        /// <summary>
        /// Gets the username used to log on to the virtual machine as
        /// non-admin, if one exists.
        /// </summary>
        [JsonProperty(PropertyName = "nonAdminUsername")]
        public string NonAdminUsername { get; private set; }

    }
}
