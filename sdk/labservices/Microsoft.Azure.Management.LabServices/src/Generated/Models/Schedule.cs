// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.LabServices.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Schedule for automatically turning virtual machines in a lab on and off
    /// at specified times.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Schedule : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>
        public Schedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Metadata pertaining to creation and last
        /// modification of the schedule.</param>
        /// <param name="startAt">When lab user virtual machines will be
        /// started. Timestamp offsets will be ignored and timeZoneId is used
        /// instead.</param>
        /// <param name="stopAt">When lab user virtual machines will be
        /// stopped. Timestamp offsets will be ignored and timeZoneId is used
        /// instead.</param>
        /// <param name="recurrencePattern">The recurrence pattern of the
        /// scheduled actions.</param>
        /// <param name="timeZoneId">The IANA timezone id for the
        /// schedule.</param>
        /// <param name="notes">Notes for this schedule.</param>
        /// <param name="provisioningState">Current provisioning state of the
        /// schedule. Possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Failed', 'Locked'</param>
        public Schedule(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), System.DateTime? startAt = default(System.DateTime?), System.DateTime? stopAt = default(System.DateTime?), RecurrencePattern recurrencePattern = default(RecurrencePattern), string timeZoneId = default(string), string notes = default(string), ProvisioningState? provisioningState = default(ProvisioningState?))
            : base(id, name, type)
        {
            SystemData = systemData;
            StartAt = startAt;
            StopAt = stopAt;
            RecurrencePattern = recurrencePattern;
            TimeZoneId = timeZoneId;
            Notes = notes;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets metadata pertaining to creation and last modification of the
        /// schedule.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Gets or sets when lab user virtual machines will be started.
        /// Timestamp offsets will be ignored and timeZoneId is used instead.
        /// </summary>
        [JsonProperty(PropertyName = "properties.startAt")]
        public System.DateTime? StartAt { get; set; }

        /// <summary>
        /// Gets or sets when lab user virtual machines will be stopped.
        /// Timestamp offsets will be ignored and timeZoneId is used instead.
        /// </summary>
        [JsonProperty(PropertyName = "properties.stopAt")]
        public System.DateTime? StopAt { get; set; }

        /// <summary>
        /// Gets or sets the recurrence pattern of the scheduled actions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.recurrencePattern")]
        public RecurrencePattern RecurrencePattern { get; set; }

        /// <summary>
        /// Gets or sets the IANA timezone id for the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeZoneId")]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// Gets or sets notes for this schedule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Gets current provisioning state of the schedule. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Locked'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RecurrencePattern != null)
            {
                RecurrencePattern.Validate();
            }
            if (TimeZoneId != null)
            {
                if (TimeZoneId.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TimeZoneId", 50);
                }
            }
            if (Notes != null)
            {
                if (Notes.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Notes", 1000);
                }
            }
        }
    }
}
