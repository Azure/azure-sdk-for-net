// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridCompute.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the Machine Extension Instance View.
    /// </summary>
    public partial class MachineExtensionInstanceView
    {
        /// <summary>
        /// Initializes a new instance of the MachineExtensionInstanceView
        /// class.
        /// </summary>
        public MachineExtensionInstanceView()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MachineExtensionInstanceView
        /// class.
        /// </summary>
        /// <param name="name">The machine extension name.</param>
        /// <param name="type">Specifies the type of the extension; an example
        /// is "CustomScriptExtension".</param>
        /// <param name="typeHandlerVersion">Specifies the version of the
        /// script handler.</param>
        /// <param name="status">Instance view status.</param>
        public MachineExtensionInstanceView(string name = default(string), string type = default(string), string typeHandlerVersion = default(string), MachineExtensionInstanceViewStatus status = default(MachineExtensionInstanceViewStatus))
        {
            Name = name;
            Type = type;
            TypeHandlerVersion = typeHandlerVersion;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the machine extension name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets specifies the type of the extension; an example is
        /// "CustomScriptExtension".
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets specifies the version of the script handler.
        /// </summary>
        [JsonProperty(PropertyName = "typeHandlerVersion")]
        public string TypeHandlerVersion { get; private set; }

        /// <summary>
        /// Gets or sets instance view status.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public MachineExtensionInstanceViewStatus Status { get; set; }

    }
}
