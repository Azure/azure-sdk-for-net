// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridCompute
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MachineExtensionsOperations.
    /// </summary>
    public static partial class MachineExtensionsOperationsExtensions
    {
            /// <summary>
            /// The operation to create or update the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be created or updated.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extensionParameters'>
            /// Parameters supplied to the Create Machine Extension operation.
            /// </param>
            public static MachineExtension CreateOrUpdate(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, MachineExtension extensionParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, name, extensionName, extensionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to create or update the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be created or updated.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extensionParameters'>
            /// Parameters supplied to the Create Machine Extension operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineExtension> CreateOrUpdateAsync(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, MachineExtension extensionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, extensionName, extensionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to create or update the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be created or updated.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extensionParameters'>
            /// Parameters supplied to the Create Machine Extension operation.
            /// </param>
            public static MachineExtension Update(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, MachineExtensionUpdate extensionParameters)
            {
                return operations.UpdateAsync(resourceGroupName, name, extensionName, extensionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to create or update the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be created or updated.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extensionParameters'>
            /// Parameters supplied to the Create Machine Extension operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineExtension> UpdateAsync(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, MachineExtensionUpdate extensionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, name, extensionName, extensionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to delete the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be deleted.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            public static void Delete(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName)
            {
                operations.DeleteAsync(resourceGroupName, name, extensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to delete the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be deleted.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, extensionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// The operation to get the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine containing the extension.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            public static MachineExtension Get(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName)
            {
                return operations.GetAsync(resourceGroupName, name, extensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to get the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine containing the extension.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineExtension> GetAsync(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, extensionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to get all extensions of a non-Azure machine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine containing the extension.
            /// </param>
            /// <param name='expand'>
            /// The expand expression to apply on the operation.
            /// </param>
            public static IPage<MachineExtension> List(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string expand = default(string))
            {
                return operations.ListAsync(resourceGroupName, name, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to get all extensions of a non-Azure machine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine containing the extension.
            /// </param>
            /// <param name='expand'>
            /// The expand expression to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MachineExtension>> ListAsync(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, name, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to create or update the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be created or updated.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extensionParameters'>
            /// Parameters supplied to the Create Machine Extension operation.
            /// </param>
            public static MachineExtension BeginCreateOrUpdate(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, MachineExtension extensionParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, name, extensionName, extensionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to create or update the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be created or updated.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extensionParameters'>
            /// Parameters supplied to the Create Machine Extension operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineExtension> BeginCreateOrUpdateAsync(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, MachineExtension extensionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, extensionName, extensionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to create or update the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be created or updated.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extensionParameters'>
            /// Parameters supplied to the Create Machine Extension operation.
            /// </param>
            public static MachineExtension BeginUpdate(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, MachineExtensionUpdate extensionParameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, name, extensionName, extensionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to create or update the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be created or updated.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extensionParameters'>
            /// Parameters supplied to the Create Machine Extension operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineExtension> BeginUpdateAsync(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, MachineExtensionUpdate extensionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, name, extensionName, extensionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to delete the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be deleted.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            public static void BeginDelete(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, name, extensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to delete the extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='name'>
            /// The name of the machine where the extension should be deleted.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IMachineExtensionsOperations operations, string resourceGroupName, string name, string extensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, name, extensionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// The operation to get all extensions of a non-Azure machine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MachineExtension> ListNext(this IMachineExtensionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to get all extensions of a non-Azure machine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MachineExtension>> ListNextAsync(this IMachineExtensionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
