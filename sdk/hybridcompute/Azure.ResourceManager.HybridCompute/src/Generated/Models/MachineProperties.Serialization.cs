// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.ResourceManager.HybridCompute.Models
{
    public partial class MachineProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(LocationData))
            {
                writer.WritePropertyName("locationData");
                writer.WriteObjectValue(LocationData);
            }
            if (Optional.IsDefined(ServiceStatuses))
            {
                writer.WritePropertyName("serviceStatuses");
                writer.WriteObjectValue(ServiceStatuses);
            }
            if (Optional.IsDefined(CloudMetadata))
            {
                writer.WritePropertyName("cloudMetadata");
                writer.WriteObjectValue(CloudMetadata);
            }
            if (Optional.IsDefined(OSProfile))
            {
                writer.WritePropertyName("osProfile");
                writer.WriteObjectValue(OSProfile);
            }
            if (Optional.IsDefined(VmId))
            {
                writer.WritePropertyName("vmId");
                writer.WriteStringValue(VmId);
            }
            if (Optional.IsDefined(ClientPublicKey))
            {
                writer.WritePropertyName("clientPublicKey");
                writer.WriteStringValue(ClientPublicKey);
            }
            if (Optional.IsDefined(OSType))
            {
                writer.WritePropertyName("osType");
                writer.WriteStringValue(OSType);
            }
            if (Optional.IsDefined(PrivateLinkScopeResourceId))
            {
                writer.WritePropertyName("privateLinkScopeResourceId");
                writer.WriteStringValue(PrivateLinkScopeResourceId);
            }
            if (Optional.IsDefined(ParentClusterResourceId))
            {
                writer.WritePropertyName("parentClusterResourceId");
                writer.WriteStringValue(ParentClusterResourceId);
            }
            if (Optional.IsDefined(MssqlDiscovered))
            {
                writer.WritePropertyName("mssqlDiscovered");
                writer.WriteStringValue(MssqlDiscovered);
            }
            writer.WriteEndObject();
        }

        internal static MachineProperties DeserializeMachineProperties(JsonElement element)
        {
            Optional<LocationData> locationData = default;
            Optional<AgentConfiguration> agentConfiguration = default;
            Optional<HybridComputeServiceStatuses> serviceStatuses = default;
            Optional<CloudMetadata> cloudMetadata = default;
            Optional<OSProfile> osProfile = default;
            Optional<string> provisioningState = default;
            Optional<HybridComputeStatusType> status = default;
            Optional<DateTimeOffset> lastStatusChange = default;
            Optional<IReadOnlyList<ResponseError>> errorDetails = default;
            Optional<string> agentVersion = default;
            Optional<string> vmId = default;
            Optional<string> displayName = default;
            Optional<string> machineFqdn = default;
            Optional<string> clientPublicKey = default;
            Optional<string> osName = default;
            Optional<string> osVersion = default;
            Optional<string> osType = default;
            Optional<string> vmUuid = default;
            Optional<string> osSku = default;
            Optional<string> domainName = default;
            Optional<string> adFqdn = default;
            Optional<string> dnsFqdn = default;
            Optional<string> privateLinkScopeResourceId = default;
            Optional<string> parentClusterResourceId = default;
            Optional<string> mssqlDiscovered = default;
            Optional<IReadOnlyDictionary<string, string>> detectedProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("locationData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    locationData = LocationData.DeserializeLocationData(property.Value);
                    continue;
                }
                if (property.NameEquals("agentConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agentConfiguration = AgentConfiguration.DeserializeAgentConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("serviceStatuses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    serviceStatuses = HybridComputeServiceStatuses.DeserializeHybridComputeServiceStatuses(property.Value);
                    continue;
                }
                if (property.NameEquals("cloudMetadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cloudMetadata = CloudMetadata.DeserializeCloudMetadata(property.Value);
                    continue;
                }
                if (property.NameEquals("osProfile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    osProfile = OSProfile.DeserializeOSProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new HybridComputeStatusType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastStatusChange"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastStatusChange = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("errorDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResponseError> array = new List<ResponseError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(JsonSerializer.Deserialize<ResponseError>(item.ToString()));
                    }
                    errorDetails = array;
                    continue;
                }
                if (property.NameEquals("agentVersion"))
                {
                    agentVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vmId"))
                {
                    vmId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("machineFqdn"))
                {
                    machineFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientPublicKey"))
                {
                    clientPublicKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osName"))
                {
                    osName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osVersion"))
                {
                    osVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osType"))
                {
                    osType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vmUuid"))
                {
                    vmUuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osSku"))
                {
                    osSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domainName"))
                {
                    domainName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adFqdn"))
                {
                    adFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsFqdn"))
                {
                    dnsFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateLinkScopeResourceId"))
                {
                    privateLinkScopeResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parentClusterResourceId"))
                {
                    parentClusterResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mssqlDiscovered"))
                {
                    mssqlDiscovered = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("detectedProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    detectedProperties = dictionary;
                    continue;
                }
            }
            return new MachineProperties(locationData.Value, agentConfiguration.Value, serviceStatuses.Value, cloudMetadata.Value, osProfile.Value, provisioningState.Value, Optional.ToNullable(status), Optional.ToNullable(lastStatusChange), Optional.ToList(errorDetails), agentVersion.Value, vmId.Value, displayName.Value, machineFqdn.Value, clientPublicKey.Value, osName.Value, osVersion.Value, osType.Value, vmUuid.Value, osSku.Value, domainName.Value, adFqdn.Value, dnsFqdn.Value, privateLinkScopeResourceId.Value, parentClusterResourceId.Value, mssqlDiscovered.Value, Optional.ToDictionary(detectedProperties));
        }
    }
}
