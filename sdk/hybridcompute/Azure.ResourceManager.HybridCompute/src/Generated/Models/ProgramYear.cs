// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.HybridCompute.Models
{
    /// <summary> Describes the program year the volume license is for. </summary>
    public readonly partial struct ProgramYear : IEquatable<ProgramYear>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProgramYear"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProgramYear(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Year1Value = "Year 1";
        private const string Year2Value = "Year 2";
        private const string Year3Value = "Year 3";

        /// <summary> Year 1. </summary>
        public static ProgramYear Year1 { get; } = new ProgramYear(Year1Value);
        /// <summary> Year 2. </summary>
        public static ProgramYear Year2 { get; } = new ProgramYear(Year2Value);
        /// <summary> Year 3. </summary>
        public static ProgramYear Year3 { get; } = new ProgramYear(Year3Value);
        /// <summary> Determines if two <see cref="ProgramYear"/> values are the same. </summary>
        public static bool operator ==(ProgramYear left, ProgramYear right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProgramYear"/> values are not the same. </summary>
        public static bool operator !=(ProgramYear left, ProgramYear right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProgramYear"/>. </summary>
        public static implicit operator ProgramYear(string value) => new ProgramYear(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProgramYear other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProgramYear other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
