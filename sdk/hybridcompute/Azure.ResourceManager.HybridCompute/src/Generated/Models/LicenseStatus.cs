// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.HybridCompute.Models
{
    /// <summary> The license status. </summary>
    public readonly partial struct LicenseStatus : IEquatable<LicenseStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LicenseStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LicenseStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnlicensedValue = "Unlicensed";
        private const string LicensedValue = "Licensed";
        private const string OOBGraceValue = "OOBGrace";
        private const string OOTGraceValue = "OOTGrace";
        private const string NonGenuineGraceValue = "NonGenuineGrace";
        private const string NotificationValue = "Notification";
        private const string ExtendedGraceValue = "ExtendedGrace";

        /// <summary> Unlicensed. </summary>
        public static LicenseStatus Unlicensed { get; } = new LicenseStatus(UnlicensedValue);
        /// <summary> Licensed. </summary>
        public static LicenseStatus Licensed { get; } = new LicenseStatus(LicensedValue);
        /// <summary> OOBGrace. </summary>
        public static LicenseStatus OOBGrace { get; } = new LicenseStatus(OOBGraceValue);
        /// <summary> OOTGrace. </summary>
        public static LicenseStatus OOTGrace { get; } = new LicenseStatus(OOTGraceValue);
        /// <summary> NonGenuineGrace. </summary>
        public static LicenseStatus NonGenuineGrace { get; } = new LicenseStatus(NonGenuineGraceValue);
        /// <summary> Notification. </summary>
        public static LicenseStatus Notification { get; } = new LicenseStatus(NotificationValue);
        /// <summary> ExtendedGrace. </summary>
        public static LicenseStatus ExtendedGrace { get; } = new LicenseStatus(ExtendedGraceValue);
        /// <summary> Determines if two <see cref="LicenseStatus"/> values are the same. </summary>
        public static bool operator ==(LicenseStatus left, LicenseStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LicenseStatus"/> values are not the same. </summary>
        public static bool operator !=(LicenseStatus left, LicenseStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LicenseStatus"/>. </summary>
        public static implicit operator LicenseStatus(string value) => new LicenseStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LicenseStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LicenseStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
