// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.HybridCompute.Models
{
    /// <summary> Property that impacts a resource's logging behavior and its connectivity with other resources and public networks. </summary>
    public readonly partial struct AccessMode : IEquatable<AccessMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccessMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccessMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnforcedValue = "enforced";
        private const string AuditValue = "audit";
        private const string LearningValue = "learning";

        /// <summary> Indicates that resource access is controlled by the NSP definition. </summary>
        public static AccessMode Enforced { get; } = new AccessMode(EnforcedValue);
        /// <summary> Dry run mode, where traffic is evaluated against NSP Rules, logged but not enforced. </summary>
        public static AccessMode Audit { get; } = new AccessMode(AuditValue);
        /// <summary> Enables traffic evaluation to fall back to resource-specific firewall configurations. </summary>
        public static AccessMode Learning { get; } = new AccessMode(LearningValue);
        /// <summary> Determines if two <see cref="AccessMode"/> values are the same. </summary>
        public static bool operator ==(AccessMode left, AccessMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessMode"/> values are not the same. </summary>
        public static bool operator !=(AccessMode left, AccessMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessMode"/>. </summary>
        public static implicit operator AccessMode(string value) => new AccessMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
