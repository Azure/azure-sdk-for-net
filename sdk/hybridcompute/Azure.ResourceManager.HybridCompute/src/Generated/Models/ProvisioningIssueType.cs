// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.HybridCompute.Models
{
    /// <summary> Type of provisioning issue. </summary>
    public readonly partial struct ProvisioningIssueType : IEquatable<ProvisioningIssueType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProvisioningIssueType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProvisioningIssueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MissingPerimeterConfigurationValue = "MissingPerimeterConfiguration";
        private const string MissingIdentityConfigurationValue = "MissingIdentityConfiguration";
        private const string ConfigurationPropagationFailureValue = "ConfigurationPropagationFailure";
        private const string OtherValue = "Other";

        /// <summary> Perimeter configuration is missing. </summary>
        public static ProvisioningIssueType MissingPerimeterConfiguration { get; } = new ProvisioningIssueType(MissingPerimeterConfigurationValue);
        /// <summary> Identity configuration is missing. </summary>
        public static ProvisioningIssueType MissingIdentityConfiguration { get; } = new ProvisioningIssueType(MissingIdentityConfigurationValue);
        /// <summary> Configuration failed to propagate. </summary>
        public static ProvisioningIssueType ConfigurationPropagationFailure { get; } = new ProvisioningIssueType(ConfigurationPropagationFailureValue);
        /// <summary> Other failure. </summary>
        public static ProvisioningIssueType Other { get; } = new ProvisioningIssueType(OtherValue);
        /// <summary> Determines if two <see cref="ProvisioningIssueType"/> values are the same. </summary>
        public static bool operator ==(ProvisioningIssueType left, ProvisioningIssueType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProvisioningIssueType"/> values are not the same. </summary>
        public static bool operator !=(ProvisioningIssueType left, ProvisioningIssueType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProvisioningIssueType"/>. </summary>
        public static implicit operator ProvisioningIssueType(string value) => new ProvisioningIssueType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProvisioningIssueType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProvisioningIssueType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
