// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridCompute.Models
{
    public partial class AgentConfiguration
    {
        internal static AgentConfiguration DeserializeAgentConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Uri> proxyUrl = default;
            Optional<IReadOnlyList<string>> incomingConnectionsPorts = default;
            Optional<IReadOnlyList<ConfigurationExtension>> extensionsAllowList = default;
            Optional<IReadOnlyList<ConfigurationExtension>> extensionsBlockList = default;
            Optional<IReadOnlyList<string>> proxyBypass = default;
            Optional<string> extensionsEnabled = default;
            Optional<string> guestConfigurationEnabled = default;
            Optional<AgentConfigurationMode> configMode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("proxyUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    proxyUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("incomingConnectionsPorts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    incomingConnectionsPorts = array;
                    continue;
                }
                if (property.NameEquals("extensionsAllowList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConfigurationExtension> array = new List<ConfigurationExtension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConfigurationExtension.DeserializeConfigurationExtension(item));
                    }
                    extensionsAllowList = array;
                    continue;
                }
                if (property.NameEquals("extensionsBlockList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConfigurationExtension> array = new List<ConfigurationExtension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConfigurationExtension.DeserializeConfigurationExtension(item));
                    }
                    extensionsBlockList = array;
                    continue;
                }
                if (property.NameEquals("proxyBypass"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    proxyBypass = array;
                    continue;
                }
                if (property.NameEquals("extensionsEnabled"u8))
                {
                    extensionsEnabled = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("guestConfigurationEnabled"u8))
                {
                    guestConfigurationEnabled = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configMode = new AgentConfigurationMode(property.Value.GetString());
                    continue;
                }
            }
            return new AgentConfiguration(proxyUrl.Value, Optional.ToList(incomingConnectionsPorts), Optional.ToList(extensionsAllowList), Optional.ToList(extensionsBlockList), Optional.ToList(proxyBypass), extensionsEnabled.Value, guestConfigurationEnabled.Value, Optional.ToNullable(configMode));
        }
    }
}
