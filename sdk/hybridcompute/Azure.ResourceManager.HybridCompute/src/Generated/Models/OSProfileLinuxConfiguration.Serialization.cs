// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridCompute.Models
{
    public partial class OSProfileLinuxConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("patchSettings");
            writer.WriteStartObject();
            if (Optional.IsDefined(AssessmentMode))
            {
                writer.WritePropertyName("assessmentMode");
                writer.WriteStringValue(AssessmentMode.Value.ToString());
            }
            if (Optional.IsDefined(PatchMode))
            {
                writer.WritePropertyName("patchMode");
                writer.WriteStringValue(PatchMode.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static OSProfileLinuxConfiguration DeserializeOSProfileLinuxConfiguration(JsonElement element)
        {
            Optional<AssessmentModeType> assessmentMode = default;
            Optional<PatchModeType> patchMode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("patchSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("assessmentMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            assessmentMode = new AssessmentModeType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("patchMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            patchMode = new PatchModeType(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new OSProfileLinuxConfiguration(Optional.ToNullable(assessmentMode), Optional.ToNullable(patchMode));
        }
    }
}
