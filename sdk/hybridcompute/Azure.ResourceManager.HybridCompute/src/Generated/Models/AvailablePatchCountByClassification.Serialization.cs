// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridCompute.Models
{
    public partial class AvailablePatchCountByClassification
    {
        internal static AvailablePatchCountByClassification DeserializeAvailablePatchCountByClassification(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> security = default;
            Optional<int> critical = default;
            Optional<int> definition = default;
            Optional<int> updateRollup = default;
            Optional<int> featurePack = default;
            Optional<int> servicePack = default;
            Optional<int> tools = default;
            Optional<int> updates = default;
            Optional<int> other = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("security"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    security = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("critical"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    critical = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("definition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    definition = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("updateRollup"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateRollup = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("featurePack"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    featurePack = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("servicePack"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    servicePack = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("tools"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tools = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("updates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updates = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("other"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    other = property.Value.GetInt32();
                    continue;
                }
            }
            return new AvailablePatchCountByClassification(Optional.ToNullable(security), Optional.ToNullable(critical), Optional.ToNullable(definition), Optional.ToNullable(updateRollup), Optional.ToNullable(featurePack), Optional.ToNullable(servicePack), Optional.ToNullable(tools), Optional.ToNullable(updates), Optional.ToNullable(other));
        }
    }
}
