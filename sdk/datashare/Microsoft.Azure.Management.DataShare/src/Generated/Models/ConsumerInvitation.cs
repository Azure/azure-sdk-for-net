// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataShare.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A consumer Invitation data transfer object.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ConsumerInvitation : ProxyDto
    {
        /// <summary>
        /// Initializes a new instance of the ConsumerInvitation class.
        /// </summary>
        public ConsumerInvitation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConsumerInvitation class.
        /// </summary>
        /// <param name="invitationId">Unique id of the invitation.</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="dataSetCount">Number of data sets in a share</param>
        /// <param name="description">Description shared when the invitation
        /// was created</param>
        /// <param name="invitationStatus">The status of the invitation.
        /// Possible values include: 'Pending', 'Accepted', 'Rejected',
        /// 'Withdrawn'</param>
        /// <param name="location">invitation location</param>
        /// <param name="respondedAt">The time the recipient responded to the
        /// invitation.</param>
        /// <param name="sender">Gets the name of the sender.</param>
        /// <param name="senderCompanyName">Gets the company name of the
        /// sender.</param>
        /// <param name="sentAt">Gets the time at which the invitation was
        /// sent.</param>
        /// <param name="shareName">Gets the source share Name.</param>
        /// <param name="termsOfUse">Terms of use shared when the invitation
        /// was created</param>
        public ConsumerInvitation(string invitationId, string id = default(string), string name = default(string), string type = default(string), int? dataSetCount = default(int?), string description = default(string), string invitationStatus = default(string), string location = default(string), System.DateTime? respondedAt = default(System.DateTime?), string sender = default(string), string senderCompanyName = default(string), System.DateTime? sentAt = default(System.DateTime?), string shareName = default(string), string termsOfUse = default(string))
            : base(id, name, type)
        {
            DataSetCount = dataSetCount;
            Description = description;
            InvitationId = invitationId;
            InvitationStatus = invitationStatus;
            Location = location;
            RespondedAt = respondedAt;
            Sender = sender;
            SenderCompanyName = senderCompanyName;
            SentAt = sentAt;
            ShareName = shareName;
            TermsOfUse = termsOfUse;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets number of data sets in a share
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSetCount")]
        public int? DataSetCount { get; private set; }

        /// <summary>
        /// Gets description shared when the invitation was created
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets or sets unique id of the invitation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.invitationId")]
        public string InvitationId { get; set; }

        /// <summary>
        /// Gets the status of the invitation. Possible values include:
        /// 'Pending', 'Accepted', 'Rejected', 'Withdrawn'
        /// </summary>
        [JsonProperty(PropertyName = "properties.invitationStatus")]
        public string InvitationStatus { get; private set; }

        /// <summary>
        /// Gets invitation location
        /// </summary>
        [JsonProperty(PropertyName = "properties.location")]
        public string Location { get; private set; }

        /// <summary>
        /// Gets the time the recipient responded to the invitation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.respondedAt")]
        public System.DateTime? RespondedAt { get; private set; }

        /// <summary>
        /// Gets the name of the sender.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sender")]
        public string Sender { get; private set; }

        /// <summary>
        /// Gets the company name of the sender.
        /// </summary>
        [JsonProperty(PropertyName = "properties.senderCompanyName")]
        public string SenderCompanyName { get; private set; }

        /// <summary>
        /// Gets the time at which the invitation was sent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sentAt")]
        public System.DateTime? SentAt { get; private set; }

        /// <summary>
        /// Gets the source share Name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.shareName")]
        public string ShareName { get; private set; }

        /// <summary>
        /// Gets terms of use shared when the invitation was created
        /// </summary>
        [JsonProperty(PropertyName = "properties.termsOfUse")]
        public string TermsOfUse { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InvitationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InvitationId");
            }
        }
    }
}
