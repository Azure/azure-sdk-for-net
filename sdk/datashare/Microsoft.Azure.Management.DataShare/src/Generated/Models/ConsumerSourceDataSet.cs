// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataShare.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A consumer side dataSet data transfer object.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ConsumerSourceDataSet : ProxyDto
    {
        /// <summary>
        /// Initializes a new instance of the ConsumerSourceDataSet class.
        /// </summary>
        public ConsumerSourceDataSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConsumerSourceDataSet class.
        /// </summary>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="dataSetId">DataSet Id</param>
        /// <param name="dataSetLocation">Location of the data set.</param>
        /// <param name="dataSetName">DataSet name</param>
        /// <param name="dataSetPath">DataSet path</param>
        /// <param name="dataSetType">Type of data set. Possible values
        /// include: 'Blob', 'Container', 'BlobFolder', 'AdlsGen2FileSystem',
        /// 'AdlsGen2Folder', 'AdlsGen2File', 'AdlsGen1Folder', 'AdlsGen1File',
        /// 'KustoCluster', 'KustoDatabase', 'SqlDBTable', 'SqlDWTable'</param>
        public ConsumerSourceDataSet(string id = default(string), string name = default(string), string type = default(string), string dataSetId = default(string), string dataSetLocation = default(string), string dataSetName = default(string), string dataSetPath = default(string), string dataSetType = default(string))
            : base(id, name, type)
        {
            DataSetId = dataSetId;
            DataSetLocation = dataSetLocation;
            DataSetName = dataSetName;
            DataSetPath = dataSetPath;
            DataSetType = dataSetType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets dataSet Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSetId")]
        public string DataSetId { get; private set; }

        /// <summary>
        /// Gets location of the data set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSetLocation")]
        public string DataSetLocation { get; private set; }

        /// <summary>
        /// Gets dataSet name
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSetName")]
        public string DataSetName { get; private set; }

        /// <summary>
        /// Gets dataSet path
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSetPath")]
        public string DataSetPath { get; private set; }

        /// <summary>
        /// Gets type of data set. Possible values include: 'Blob',
        /// 'Container', 'BlobFolder', 'AdlsGen2FileSystem', 'AdlsGen2Folder',
        /// 'AdlsGen2File', 'AdlsGen1Folder', 'AdlsGen1File', 'KustoCluster',
        /// 'KustoDatabase', 'SqlDBTable', 'SqlDWTable'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSetType")]
        public string DataSetType { get; private set; }

    }
}
