// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataShare
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EmailRegistrationsOperations.
    /// </summary>
    public static partial class EmailRegistrationsOperationsExtensions
    {
            /// <summary>
            /// Activates the tenant and email combination using email code received.
            /// </summary>
            /// <remarks>
            /// Activate the email registration for the current tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the activation.
            /// </param>
            /// <param name='emailRegistration'>
            /// The payload for tenant domain activation.
            /// </param>
            public static EmailRegistration ActivateEmail(this IEmailRegistrationsOperations operations, string location, EmailRegistration emailRegistration)
            {
                return operations.ActivateEmailAsync(location, emailRegistration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activates the tenant and email combination using email code received.
            /// </summary>
            /// <remarks>
            /// Activate the email registration for the current tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the activation.
            /// </param>
            /// <param name='emailRegistration'>
            /// The payload for tenant domain activation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmailRegistration> ActivateEmailAsync(this IEmailRegistrationsOperations operations, string location, EmailRegistration emailRegistration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivateEmailWithHttpMessagesAsync(location, emailRegistration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Registers the tenant and email combination for verification.
            /// </summary>
            /// <remarks>
            /// Register an email for the current tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the registration
            /// </param>
            public static EmailRegistration RegisterEmail(this IEmailRegistrationsOperations operations, string location)
            {
                return operations.RegisterEmailAsync(location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Registers the tenant and email combination for verification.
            /// </summary>
            /// <remarks>
            /// Register an email for the current tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the registration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmailRegistration> RegisterEmailAsync(this IEmailRegistrationsOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterEmailWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
