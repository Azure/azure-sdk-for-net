// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataShare
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataSetsOperations.
    /// </summary>
    public static partial class DataSetsOperationsExtensions
    {
            /// <summary>
            /// Get DataSet in a share.
            /// </summary>
            /// <remarks>
            /// Get a DataSet in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='dataSetName'>
            /// The name of the dataSet.
            /// </param>
            public static DataSet Get(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName)
            {
                return operations.GetAsync(resourceGroupName, accountName, shareName, dataSetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get DataSet in a share.
            /// </summary>
            /// <remarks>
            /// Get a DataSet in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='dataSetName'>
            /// The name of the dataSet.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataSet> GetAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, shareName, dataSetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new data set to an existing share.
            /// </summary>
            /// <remarks>
            /// Create a DataSet
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share to add the data set to.
            /// </param>
            /// <param name='dataSetName'>
            /// The name of the dataSet.
            /// </param>
            /// <param name='dataSet'>
            /// The new data set information.
            /// </param>
            public static DataSet Create(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, DataSet dataSet)
            {
                return operations.CreateAsync(resourceGroupName, accountName, shareName, dataSetName, dataSet).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new data set to an existing share.
            /// </summary>
            /// <remarks>
            /// Create a DataSet
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share to add the data set to.
            /// </param>
            /// <param name='dataSetName'>
            /// The name of the dataSet.
            /// </param>
            /// <param name='dataSet'>
            /// The new data set information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataSet> CreateAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, DataSet dataSet, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, shareName, dataSetName, dataSet, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete DataSet in a share.
            /// </summary>
            /// <remarks>
            /// Delete a DataSet in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='dataSetName'>
            /// The name of the dataSet.
            /// </param>
            public static void Delete(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, shareName, dataSetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete DataSet in a share.
            /// </summary>
            /// <remarks>
            /// Delete a DataSet in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='dataSetName'>
            /// The name of the dataSet.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, shareName, dataSetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List DataSets in a share.
            /// </summary>
            /// <remarks>
            /// List DataSets in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            public static IPage<DataSet> ListByShare(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string))
            {
                return operations.ListByShareAsync(resourceGroupName, accountName, shareName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List DataSets in a share.
            /// </summary>
            /// <remarks>
            /// List DataSets in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataSet>> ListByShareAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByShareWithHttpMessagesAsync(resourceGroupName, accountName, shareName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete DataSet in a share.
            /// </summary>
            /// <remarks>
            /// Delete a DataSet in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='dataSetName'>
            /// The name of the dataSet.
            /// </param>
            public static void BeginDelete(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName)
            {
                operations.BeginDeleteAsync(resourceGroupName, accountName, shareName, dataSetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete DataSet in a share.
            /// </summary>
            /// <remarks>
            /// Delete a DataSet in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='dataSetName'>
            /// The name of the dataSet.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDataSetsOperations operations, string resourceGroupName, string accountName, string shareName, string dataSetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, shareName, dataSetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List DataSets in a share.
            /// </summary>
            /// <remarks>
            /// List DataSets in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataSet> ListByShareNext(this IDataSetsOperations operations, string nextPageLink)
            {
                return operations.ListByShareNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List DataSets in a share.
            /// </summary>
            /// <remarks>
            /// List DataSets in a share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataSet>> ListByShareNextAsync(this IDataSetsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByShareNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
