// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataShare
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProviderShareSubscriptionsOperations.
    /// </summary>
    public static partial class ProviderShareSubscriptionsOperationsExtensions
    {
            /// <summary>
            /// Adjust the expiration date of a share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Adjust a share subscription's expiration date in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            /// <param name='providerShareSubscription'>
            /// The provider share subscription
            /// </param>
            public static ProviderShareSubscription Adjust(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, ProviderShareSubscription providerShareSubscription)
            {
                return operations.AdjustAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, providerShareSubscription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adjust the expiration date of a share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Adjust a share subscription's expiration date in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            /// <param name='providerShareSubscription'>
            /// The provider share subscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderShareSubscription> AdjustAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, ProviderShareSubscription providerShareSubscription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdjustWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, providerShareSubscription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reinstate share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Reinstate share subscription in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            /// <param name='providerShareSubscription'>
            /// The provider share subscription
            /// </param>
            public static ProviderShareSubscription Reinstate(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, ProviderShareSubscription providerShareSubscription)
            {
                return operations.ReinstateAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, providerShareSubscription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reinstate share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Reinstate share subscription in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            /// <param name='providerShareSubscription'>
            /// The provider share subscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderShareSubscription> ReinstateAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, ProviderShareSubscription providerShareSubscription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReinstateWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, providerShareSubscription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revoke share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Revoke share subscription in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            public static ProviderShareSubscription Revoke(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId)
            {
                return operations.RevokeAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Revoke share subscription in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderShareSubscription> RevokeAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Get share subscription in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            public static ProviderShareSubscription GetByShare(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId)
            {
                return operations.GetByShareAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Get share subscription in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderShareSubscription> GetByShareAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByShareWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of available share subscriptions to a provider share.
            /// </summary>
            /// <remarks>
            /// List share subscriptions in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='skipToken'>
            /// Continuation Token
            /// </param>
            public static IPage<ProviderShareSubscription> ListByShare(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string))
            {
                return operations.ListByShareAsync(resourceGroupName, accountName, shareName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of available share subscriptions to a provider share.
            /// </summary>
            /// <remarks>
            /// List share subscriptions in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='skipToken'>
            /// Continuation Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProviderShareSubscription>> ListByShareAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByShareWithHttpMessagesAsync(resourceGroupName, accountName, shareName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revoke share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Revoke share subscription in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            public static ProviderShareSubscription BeginRevoke(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId)
            {
                return operations.BeginRevokeAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke share subscription in a provider share.
            /// </summary>
            /// <remarks>
            /// Revoke share subscription in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// The name of the share account.
            /// </param>
            /// <param name='shareName'>
            /// The name of the share.
            /// </param>
            /// <param name='providerShareSubscriptionId'>
            /// To locate shareSubscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderShareSubscription> BeginRevokeAsync(this IProviderShareSubscriptionsOperations operations, string resourceGroupName, string accountName, string shareName, string providerShareSubscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRevokeWithHttpMessagesAsync(resourceGroupName, accountName, shareName, providerShareSubscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of available share subscriptions to a provider share.
            /// </summary>
            /// <remarks>
            /// List share subscriptions in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProviderShareSubscription> ListByShareNext(this IProviderShareSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListByShareNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of available share subscriptions to a provider share.
            /// </summary>
            /// <remarks>
            /// List share subscriptions in a provider share
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProviderShareSubscription>> ListByShareNextAsync(this IProviderShareSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByShareNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
