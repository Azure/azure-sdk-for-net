// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.DataShare.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataShare
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DataShare. </summary>
    public static partial class DataShareExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of ConsumerInvitationResources in the TenantResource. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ConsumerInvitationResources and their operations over a ConsumerInvitationResource. </returns>
        public static ConsumerInvitationCollection GetConsumerInvitations(this TenantResource tenantResource)
        {
            return GetExtensionClient(tenantResource).GetConsumerInvitations();
        }

        /// <summary>
        /// Get an invitation
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/consumerInvitations/{invitationId}
        /// Operation Id: ConsumerInvitations_Get
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="location"> Location of the invitation. </param>
        /// <param name="invitationId"> An invitation id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="invitationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="invitationId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ConsumerInvitationResource>> GetConsumerInvitationAsync(this TenantResource tenantResource, AzureLocation location, string invitationId, CancellationToken cancellationToken = default)
        {
            return await tenantResource.GetConsumerInvitations().GetAsync(location, invitationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an invitation
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/consumerInvitations/{invitationId}
        /// Operation Id: ConsumerInvitations_Get
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="location"> Location of the invitation. </param>
        /// <param name="invitationId"> An invitation id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="invitationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="invitationId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ConsumerInvitationResource> GetConsumerInvitation(this TenantResource tenantResource, AzureLocation location, string invitationId, CancellationToken cancellationToken = default)
        {
            return tenantResource.GetConsumerInvitations().Get(location, invitationId, cancellationToken);
        }

        /// <summary>
        /// Lists invitations
        /// Request Path: /providers/Microsoft.DataShare/listInvitations
        /// Operation Id: ConsumerInvitations_ListInvitations
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="skipToken"> The continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ConsumerInvitationResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ConsumerInvitationResource> GetConsumerInvitationsByListInvitationAsync(this TenantResource tenantResource, string skipToken = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).GetConsumerInvitationsByListInvitationAsync(skipToken, cancellationToken);
        }

        /// <summary>
        /// Lists invitations
        /// Request Path: /providers/Microsoft.DataShare/listInvitations
        /// Operation Id: ConsumerInvitations_ListInvitations
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="skipToken"> The continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConsumerInvitationResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ConsumerInvitationResource> GetConsumerInvitationsByListInvitation(this TenantResource tenantResource, string skipToken = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).GetConsumerInvitationsByListInvitation(skipToken, cancellationToken);
        }

        /// <summary>
        /// Reject an invitation
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/rejectInvitation
        /// Operation Id: ConsumerInvitations_RejectInvitation
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="location"> Location of the invitation. </param>
        /// <param name="data"> An invitation payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public static async Task<Response<ConsumerInvitationResource>> RejectInvitationConsumerInvitationAsync(this TenantResource tenantResource, AzureLocation location, ConsumerInvitationData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            return await GetExtensionClient(tenantResource).RejectInvitationConsumerInvitationAsync(location, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reject an invitation
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/rejectInvitation
        /// Operation Id: ConsumerInvitations_RejectInvitation
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="location"> Location of the invitation. </param>
        /// <param name="data"> An invitation payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public static Response<ConsumerInvitationResource> RejectInvitationConsumerInvitation(this TenantResource tenantResource, AzureLocation location, ConsumerInvitationData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            return GetExtensionClient(tenantResource).RejectInvitationConsumerInvitation(location, data, cancellationToken);
        }

        /// <summary>
        /// Activate the email registration for the current tenant
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/activateEmail
        /// Operation Id: EmailRegistrations_ActivateEmail
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="location"> Location of the activation. </param>
        /// <param name="emailRegistration"> The payload for tenant domain activation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="emailRegistration"/> is null. </exception>
        public static async Task<Response<EmailRegistration>> ActivateEmailEmailRegistrationAsync(this TenantResource tenantResource, AzureLocation location, EmailRegistration emailRegistration, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(emailRegistration, nameof(emailRegistration));

            return await GetExtensionClient(tenantResource).ActivateEmailEmailRegistrationAsync(location, emailRegistration, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate the email registration for the current tenant
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/activateEmail
        /// Operation Id: EmailRegistrations_ActivateEmail
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="location"> Location of the activation. </param>
        /// <param name="emailRegistration"> The payload for tenant domain activation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="emailRegistration"/> is null. </exception>
        public static Response<EmailRegistration> ActivateEmailEmailRegistration(this TenantResource tenantResource, AzureLocation location, EmailRegistration emailRegistration, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(emailRegistration, nameof(emailRegistration));

            return GetExtensionClient(tenantResource).ActivateEmailEmailRegistration(location, emailRegistration, cancellationToken);
        }

        /// <summary>
        /// Register an email for the current tenant
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/registerEmail
        /// Operation Id: EmailRegistrations_RegisterEmail
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="location"> Location of the registration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response<EmailRegistration>> RegisterEmailEmailRegistrationAsync(this TenantResource tenantResource, AzureLocation location, CancellationToken cancellationToken = default)
        {
            return await GetExtensionClient(tenantResource).RegisterEmailEmailRegistrationAsync(location, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an email for the current tenant
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/registerEmail
        /// Operation Id: EmailRegistrations_RegisterEmail
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="location"> Location of the registration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response<EmailRegistration> RegisterEmailEmailRegistration(this TenantResource tenantResource, AzureLocation location, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).RegisterEmailEmailRegistration(location, cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// List Accounts in Subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataShare/accounts
        /// Operation Id: Accounts_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="skipToken"> Continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AccountResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AccountResource> GetAccountsAsync(this SubscriptionResource subscriptionResource, string skipToken = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAccountsAsync(skipToken, cancellationToken);
        }

        /// <summary>
        /// List Accounts in Subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataShare/accounts
        /// Operation Id: Accounts_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="skipToken"> Continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AccountResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AccountResource> GetAccounts(this SubscriptionResource subscriptionResource, string skipToken = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAccounts(skipToken, cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of AccountResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AccountResources and their operations over a AccountResource. </returns>
        public static AccountCollection GetAccounts(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetAccounts();
        }

        /// <summary>
        /// Get an account
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}
        /// Operation Id: Accounts_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> The name of the share account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AccountResource>> GetAccountAsync(this ResourceGroupResource resourceGroupResource, string accountName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetAccounts().GetAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an account
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}
        /// Operation Id: Accounts_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> The name of the share account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AccountResource> GetAccount(this ResourceGroupResource resourceGroupResource, string accountName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetAccounts().Get(accountName, cancellationToken);
        }

        #region AccountResource
        /// <summary>
        /// Gets an object representing an <see cref="AccountResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AccountResource.CreateResourceIdentifier" /> to create an <see cref="AccountResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AccountResource" /> object. </returns>
        public static AccountResource GetAccountResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AccountResource.ValidateResourceId(id);
                return new AccountResource(client, id);
            }
            );
        }
        #endregion

        #region ConsumerInvitationResource
        /// <summary>
        /// Gets an object representing a <see cref="ConsumerInvitationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConsumerInvitationResource.CreateResourceIdentifier" /> to create a <see cref="ConsumerInvitationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConsumerInvitationResource" /> object. </returns>
        public static ConsumerInvitationResource GetConsumerInvitationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ConsumerInvitationResource.ValidateResourceId(id);
                return new ConsumerInvitationResource(client, id);
            }
            );
        }
        #endregion

        #region DataSetResource
        /// <summary>
        /// Gets an object representing a <see cref="DataSetResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataSetResource.CreateResourceIdentifier" /> to create a <see cref="DataSetResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataSetResource" /> object. </returns>
        public static DataSetResource GetDataSetResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DataSetResource.ValidateResourceId(id);
                return new DataSetResource(client, id);
            }
            );
        }
        #endregion

        #region DataSetMappingResource
        /// <summary>
        /// Gets an object representing a <see cref="DataSetMappingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataSetMappingResource.CreateResourceIdentifier" /> to create a <see cref="DataSetMappingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataSetMappingResource" /> object. </returns>
        public static DataSetMappingResource GetDataSetMappingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DataSetMappingResource.ValidateResourceId(id);
                return new DataSetMappingResource(client, id);
            }
            );
        }
        #endregion

        #region InvitationResource
        /// <summary>
        /// Gets an object representing an <see cref="InvitationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="InvitationResource.CreateResourceIdentifier" /> to create an <see cref="InvitationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="InvitationResource" /> object. </returns>
        public static InvitationResource GetInvitationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                InvitationResource.ValidateResourceId(id);
                return new InvitationResource(client, id);
            }
            );
        }
        #endregion

        #region ShareResource
        /// <summary>
        /// Gets an object representing a <see cref="ShareResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ShareResource.CreateResourceIdentifier" /> to create a <see cref="ShareResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ShareResource" /> object. </returns>
        public static ShareResource GetShareResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ShareResource.ValidateResourceId(id);
                return new ShareResource(client, id);
            }
            );
        }
        #endregion

        #region ProviderShareSubscriptionResource
        /// <summary>
        /// Gets an object representing a <see cref="ProviderShareSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProviderShareSubscriptionResource.CreateResourceIdentifier" /> to create a <see cref="ProviderShareSubscriptionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProviderShareSubscriptionResource" /> object. </returns>
        public static ProviderShareSubscriptionResource GetProviderShareSubscriptionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProviderShareSubscriptionResource.ValidateResourceId(id);
                return new ProviderShareSubscriptionResource(client, id);
            }
            );
        }
        #endregion

        #region ShareSubscriptionResource
        /// <summary>
        /// Gets an object representing a <see cref="ShareSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ShareSubscriptionResource.CreateResourceIdentifier" /> to create a <see cref="ShareSubscriptionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ShareSubscriptionResource" /> object. </returns>
        public static ShareSubscriptionResource GetShareSubscriptionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ShareSubscriptionResource.ValidateResourceId(id);
                return new ShareSubscriptionResource(client, id);
            }
            );
        }
        #endregion

        #region SynchronizationSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="SynchronizationSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SynchronizationSettingResource.CreateResourceIdentifier" /> to create a <see cref="SynchronizationSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SynchronizationSettingResource" /> object. </returns>
        public static SynchronizationSettingResource GetSynchronizationSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SynchronizationSettingResource.ValidateResourceId(id);
                return new SynchronizationSettingResource(client, id);
            }
            );
        }
        #endregion

        #region TriggerResource
        /// <summary>
        /// Gets an object representing a <see cref="TriggerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TriggerResource.CreateResourceIdentifier" /> to create a <see cref="TriggerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TriggerResource" /> object. </returns>
        public static TriggerResource GetTriggerResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                TriggerResource.ValidateResourceId(id);
                return new TriggerResource(client, id);
            }
            );
        }
        #endregion
    }
}
