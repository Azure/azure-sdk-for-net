// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.DataShare;
using Azure.ResourceManager.DataShare.Models;

namespace Azure.ResourceManager.DataShare.Mock
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    public partial class TenantResourceExtension : ArmResource
    {
        private ClientDiagnostics _emailRegistrationsClientDiagnostics;
        private EmailRegistrationsRestOperations _emailRegistrationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtension"/> class for mocking. </summary>
        protected TenantResourceExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics EmailRegistrationsClientDiagnostics => _emailRegistrationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DataShare.Mock", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private EmailRegistrationsRestOperations EmailRegistrationsRestClient => _emailRegistrationsRestClient ??= new EmailRegistrationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of DataShareConsumerInvitationResources in the TenantResource. </summary>
        /// <returns> An object representing collection of DataShareConsumerInvitationResources and their operations over a DataShareConsumerInvitationResource. </returns>
        public virtual DataShareConsumerInvitationCollection GetDataShareConsumerInvitations()
        {
            return GetCachedClient(Client => new DataShareConsumerInvitationCollection(Client, Id));
        }

        /// <summary>
        /// Activate the email registration for the current tenant
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.DataShare/locations/{location}/activateEmail</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmailRegistrations_ActivateEmail</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> Location of the activation. </param>
        /// <param name="emailRegistration"> The payload for tenant domain activation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="emailRegistration"/> is null. </exception>
        public virtual async Task<Response<DataShareEmailRegistration>> ActivateEmailAsync(AzureLocation location, DataShareEmailRegistration emailRegistration, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(emailRegistration, nameof(emailRegistration));

            using var scope = EmailRegistrationsClientDiagnostics.CreateScope("TenantResourceExtension.ActivateEmail");
            scope.Start();
            try
            {
                var response = await EmailRegistrationsRestClient.ActivateEmailAsync(location, emailRegistration, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Activate the email registration for the current tenant
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.DataShare/locations/{location}/activateEmail</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmailRegistrations_ActivateEmail</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> Location of the activation. </param>
        /// <param name="emailRegistration"> The payload for tenant domain activation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="emailRegistration"/> is null. </exception>
        public virtual Response<DataShareEmailRegistration> ActivateEmail(AzureLocation location, DataShareEmailRegistration emailRegistration, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(emailRegistration, nameof(emailRegistration));

            using var scope = EmailRegistrationsClientDiagnostics.CreateScope("TenantResourceExtension.ActivateEmail");
            scope.Start();
            try
            {
                var response = EmailRegistrationsRestClient.ActivateEmail(location, emailRegistration, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Register an email for the current tenant
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.DataShare/locations/{location}/registerEmail</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmailRegistrations_RegisterEmail</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> Location of the registration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DataShareEmailRegistration>> RegisterEmailAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = EmailRegistrationsClientDiagnostics.CreateScope("TenantResourceExtension.RegisterEmail");
            scope.Start();
            try
            {
                var response = await EmailRegistrationsRestClient.RegisterEmailAsync(location, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Register an email for the current tenant
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.DataShare/locations/{location}/registerEmail</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmailRegistrations_RegisterEmail</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> Location of the registration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DataShareEmailRegistration> RegisterEmail(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = EmailRegistrationsClientDiagnostics.CreateScope("TenantResourceExtension.RegisterEmail");
            scope.Start();
            try
            {
                var response = EmailRegistrationsRestClient.RegisterEmail(location, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
