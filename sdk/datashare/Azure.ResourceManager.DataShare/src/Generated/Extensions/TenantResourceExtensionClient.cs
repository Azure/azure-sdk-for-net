// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.DataShare.Models;

namespace Azure.ResourceManager.DataShare
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _consumerInvitationClientDiagnostics;
        private ConsumerInvitationsRestOperations _consumerInvitationRestClient;
        private ClientDiagnostics _emailRegistrationsClientDiagnostics;
        private EmailRegistrationsRestOperations _emailRegistrationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ConsumerInvitationClientDiagnostics => _consumerInvitationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DataShare", ConsumerInvitationResource.ResourceType.Namespace, Diagnostics);
        private ConsumerInvitationsRestOperations ConsumerInvitationRestClient => _consumerInvitationRestClient ??= new ConsumerInvitationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ConsumerInvitationResource.ResourceType));
        private ClientDiagnostics EmailRegistrationsClientDiagnostics => _emailRegistrationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DataShare", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private EmailRegistrationsRestOperations EmailRegistrationsRestClient => _emailRegistrationsRestClient ??= new EmailRegistrationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ConsumerInvitationResources in the TenantResource. </summary>
        /// <returns> An object representing collection of ConsumerInvitationResources and their operations over a ConsumerInvitationResource. </returns>
        public virtual ConsumerInvitationCollection GetConsumerInvitations()
        {
            return GetCachedClient(Client => new ConsumerInvitationCollection(Client, Id));
        }

        /// <summary>
        /// Lists invitations
        /// Request Path: /providers/Microsoft.DataShare/listInvitations
        /// Operation Id: ConsumerInvitations_ListInvitations
        /// </summary>
        /// <param name="skipToken"> The continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ConsumerInvitationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ConsumerInvitationResource> GetConsumerInvitationsByListInvitationAsync(string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ConsumerInvitationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ConsumerInvitationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetConsumerInvitationsByListInvitation");
                scope.Start();
                try
                {
                    var response = await ConsumerInvitationRestClient.ListInvitationsAsync(skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ConsumerInvitationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ConsumerInvitationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ConsumerInvitationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetConsumerInvitationsByListInvitation");
                scope.Start();
                try
                {
                    var response = await ConsumerInvitationRestClient.ListInvitationsNextPageAsync(nextLink, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ConsumerInvitationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists invitations
        /// Request Path: /providers/Microsoft.DataShare/listInvitations
        /// Operation Id: ConsumerInvitations_ListInvitations
        /// </summary>
        /// <param name="skipToken"> The continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConsumerInvitationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ConsumerInvitationResource> GetConsumerInvitationsByListInvitation(string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<ConsumerInvitationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ConsumerInvitationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetConsumerInvitationsByListInvitation");
                scope.Start();
                try
                {
                    var response = ConsumerInvitationRestClient.ListInvitations(skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ConsumerInvitationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ConsumerInvitationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ConsumerInvitationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetConsumerInvitationsByListInvitation");
                scope.Start();
                try
                {
                    var response = ConsumerInvitationRestClient.ListInvitationsNextPage(nextLink, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ConsumerInvitationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Reject an invitation
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/rejectInvitation
        /// Operation Id: ConsumerInvitations_RejectInvitation
        /// </summary>
        /// <param name="location"> Location of the invitation. </param>
        /// <param name="data"> An invitation payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ConsumerInvitationResource>> RejectInvitationConsumerInvitationAsync(AzureLocation location, ConsumerInvitationData data, CancellationToken cancellationToken = default)
        {
            using var scope = ConsumerInvitationClientDiagnostics.CreateScope("TenantResourceExtensionClient.RejectInvitationConsumerInvitation");
            scope.Start();
            try
            {
                var response = await ConsumerInvitationRestClient.RejectInvitationAsync(location, data, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ConsumerInvitationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Reject an invitation
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/rejectInvitation
        /// Operation Id: ConsumerInvitations_RejectInvitation
        /// </summary>
        /// <param name="location"> Location of the invitation. </param>
        /// <param name="data"> An invitation payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConsumerInvitationResource> RejectInvitationConsumerInvitation(AzureLocation location, ConsumerInvitationData data, CancellationToken cancellationToken = default)
        {
            using var scope = ConsumerInvitationClientDiagnostics.CreateScope("TenantResourceExtensionClient.RejectInvitationConsumerInvitation");
            scope.Start();
            try
            {
                var response = ConsumerInvitationRestClient.RejectInvitation(location, data, cancellationToken);
                return Response.FromValue(new ConsumerInvitationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Activate the email registration for the current tenant
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/activateEmail
        /// Operation Id: EmailRegistrations_ActivateEmail
        /// </summary>
        /// <param name="location"> Location of the activation. </param>
        /// <param name="emailRegistration"> The payload for tenant domain activation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EmailRegistration>> ActivateEmailEmailRegistrationAsync(AzureLocation location, EmailRegistration emailRegistration, CancellationToken cancellationToken = default)
        {
            using var scope = EmailRegistrationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.ActivateEmailEmailRegistration");
            scope.Start();
            try
            {
                var response = await EmailRegistrationsRestClient.ActivateEmailAsync(location, emailRegistration, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Activate the email registration for the current tenant
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/activateEmail
        /// Operation Id: EmailRegistrations_ActivateEmail
        /// </summary>
        /// <param name="location"> Location of the activation. </param>
        /// <param name="emailRegistration"> The payload for tenant domain activation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EmailRegistration> ActivateEmailEmailRegistration(AzureLocation location, EmailRegistration emailRegistration, CancellationToken cancellationToken = default)
        {
            using var scope = EmailRegistrationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.ActivateEmailEmailRegistration");
            scope.Start();
            try
            {
                var response = EmailRegistrationsRestClient.ActivateEmail(location, emailRegistration, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Register an email for the current tenant
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/registerEmail
        /// Operation Id: EmailRegistrations_RegisterEmail
        /// </summary>
        /// <param name="location"> Location of the registration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EmailRegistration>> RegisterEmailEmailRegistrationAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = EmailRegistrationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.RegisterEmailEmailRegistration");
            scope.Start();
            try
            {
                var response = await EmailRegistrationsRestClient.RegisterEmailAsync(location, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Register an email for the current tenant
        /// Request Path: /providers/Microsoft.DataShare/locations/{location}/registerEmail
        /// Operation Id: EmailRegistrations_RegisterEmail
        /// </summary>
        /// <param name="location"> Location of the registration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EmailRegistration> RegisterEmailEmailRegistration(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = EmailRegistrationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.RegisterEmailEmailRegistration");
            scope.Start();
            try
            {
                var response = EmailRegistrationsRestClient.RegisterEmail(location, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
