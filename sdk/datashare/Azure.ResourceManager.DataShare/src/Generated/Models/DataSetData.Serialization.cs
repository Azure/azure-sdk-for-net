// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.DataShare.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DataShare
{
    public partial class DataSetData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            writer.WriteEndObject();
        }

        internal static DataSetData DeserializeDataSetData(JsonElement element)
        {
            if (element.TryGetProperty("kind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AdlsGen1File": return AdlsGen1FileDataSet.DeserializeAdlsGen1FileDataSet(element);
                    case "AdlsGen1Folder": return AdlsGen1FolderDataSet.DeserializeAdlsGen1FolderDataSet(element);
                    case "AdlsGen2File": return AdlsGen2FileDataSet.DeserializeAdlsGen2FileDataSet(element);
                    case "AdlsGen2FileSystem": return AdlsGen2FileSystemDataSet.DeserializeAdlsGen2FileSystemDataSet(element);
                    case "AdlsGen2Folder": return AdlsGen2FolderDataSet.DeserializeAdlsGen2FolderDataSet(element);
                    case "Blob": return BlobDataSet.DeserializeBlobDataSet(element);
                    case "BlobFolder": return BlobFolderDataSet.DeserializeBlobFolderDataSet(element);
                    case "Container": return BlobContainerDataSet.DeserializeBlobContainerDataSet(element);
                    case "KustoCluster": return KustoClusterDataSet.DeserializeKustoClusterDataSet(element);
                    case "KustoDatabase": return KustoDatabaseDataSet.DeserializeKustoDatabaseDataSet(element);
                    case "KustoTable": return KustoTableDataSet.DeserializeKustoTableDataSet(element);
                    case "SqlDBTable": return SqlDBTableDataSet.DeserializeSqlDBTableDataSet(element);
                    case "SqlDWTable": return SqlDWTableDataSet.DeserializeSqlDWTableDataSet(element);
                    case "SynapseWorkspaceSqlPoolTable": return SynapseWorkspaceSqlPoolTableDataSet.DeserializeSynapseWorkspaceSqlPoolTableDataSet(element);
                }
            }
            DataSetKind kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new DataSetKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
            }
            return new DataSetData(id, name, type, systemData.Value, kind);
        }
    }
}
