// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Conversations
{
    /// <summary> The SummaryAspect. </summary>
    public readonly partial struct SummaryAspect : IEquatable<SummaryAspect>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SummaryAspect"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SummaryAspect(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IssueValue = "issue";
        private const string ResolutionValue = "resolution";

        /// <summary> issue. </summary>
        public static SummaryAspect Issue { get; } = new SummaryAspect(IssueValue);
        /// <summary> resolution. </summary>
        public static SummaryAspect Resolution { get; } = new SummaryAspect(ResolutionValue);
        /// <summary> Determines if two <see cref="SummaryAspect"/> values are the same. </summary>
        public static bool operator ==(SummaryAspect left, SummaryAspect right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SummaryAspect"/> values are not the same. </summary>
        public static bool operator !=(SummaryAspect left, SummaryAspect right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SummaryAspect"/>. </summary>
        public static implicit operator SummaryAspect(string value) => new SummaryAspect(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SummaryAspect other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SummaryAspect other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
