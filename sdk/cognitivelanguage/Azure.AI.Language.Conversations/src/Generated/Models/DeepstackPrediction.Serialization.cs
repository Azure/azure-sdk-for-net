// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Language.Conversations.Models
{
    public partial class DeepstackPrediction
    {
        internal static DeepstackPrediction DeserializeDeepstackPrediction(JsonElement element)
        {
            IReadOnlyList<DeepstackIntent> intents = default;
            IReadOnlyList<DeepstackEntity> entities = default;
            ProjectKind projectType = default;
            Optional<string> topIntent = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("intents"))
                {
                    List<DeepstackIntent> array = new List<DeepstackIntent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeepstackIntent.DeserializeDeepstackIntent(item));
                    }
                    intents = array;
                    continue;
                }
                if (property.NameEquals("entities"))
                {
                    List<DeepstackEntity> array = new List<DeepstackEntity>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeepstackEntity.DeserializeDeepstackEntity(item));
                    }
                    entities = array;
                    continue;
                }
                if (property.NameEquals("projectType"))
                {
                    projectType = new ProjectKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("topIntent"))
                {
                    topIntent = property.Value.GetString();
                    continue;
                }
            }
            return new DeepstackPrediction(projectType, topIntent.Value, intents, entities);
        }
    }
}
