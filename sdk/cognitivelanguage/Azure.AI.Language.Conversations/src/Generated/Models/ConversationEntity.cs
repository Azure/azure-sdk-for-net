// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.Language.Conversations
{
    /// <summary> The entity extraction result of a Conversation project. </summary>
    public partial class ConversationEntity
    {
        /// <summary> Initializes a new instance of ConversationEntity. </summary>
        /// <param name="category"> The entity category. </param>
        /// <param name="text"> The predicted entity text. </param>
        /// <param name="offset"> The starting index of this entity in the query. </param>
        /// <param name="length"> The length of the text. </param>
        /// <param name="confidence"> The entity confidence score. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="category"/> or <paramref name="text"/> is null. </exception>
        internal ConversationEntity(string category, string text, int offset, int length, float confidence)
        {
            if (category == null)
            {
                throw new ArgumentNullException(nameof(category));
            }
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            Category = category;
            Text = text;
            Offset = offset;
            Length = length;
            Confidence = confidence;
            Resolutions = new ChangeTrackingList<BaseResolution>();
            ExtraInformation = new ChangeTrackingList<BaseExtraInformation>();
        }

        /// <summary> Initializes a new instance of ConversationEntity. </summary>
        /// <param name="category"> The entity category. </param>
        /// <param name="text"> The predicted entity text. </param>
        /// <param name="offset"> The starting index of this entity in the query. </param>
        /// <param name="length"> The length of the text. </param>
        /// <param name="confidence"> The entity confidence score. </param>
        /// <param name="resolutions"> The collection of entity resolution objects. </param>
        /// <param name="extraInformation"> The collection of entity extra information objects. </param>
        internal ConversationEntity(string category, string text, int offset, int length, float confidence, IReadOnlyList<BaseResolution> resolutions, IReadOnlyList<BaseExtraInformation> extraInformation)
        {
            Category = category;
            Text = text;
            Offset = offset;
            Length = length;
            Confidence = confidence;
            Resolutions = resolutions;
            ExtraInformation = extraInformation;
        }

        /// <summary> The entity category. </summary>
        public string Category { get; }
        /// <summary> The predicted entity text. </summary>
        public string Text { get; }
        /// <summary> The starting index of this entity in the query. </summary>
        public int Offset { get; }
        /// <summary> The length of the text. </summary>
        public int Length { get; }
        /// <summary> The entity confidence score. </summary>
        public float Confidence { get; }
        /// <summary> The collection of entity resolution objects. </summary>
        public IReadOnlyList<BaseResolution> Resolutions { get; }
        /// <summary> The collection of entity extra information objects. </summary>
        public IReadOnlyList<BaseExtraInformation> ExtraInformation { get; }
    }
}
