// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.AI.Language.Conversations
{
    /// <summary> The response returned by a Conversation project. </summary>
    public partial class ConversationResult
    {
        /// <summary> Initializes a new instance of ConversationResult. </summary>
        /// <param name="query"> The same query given in request. </param>
        /// <param name="prediction"> The predicted result for the query. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> or <paramref name="prediction"/> is null. </exception>
        internal ConversationResult(string query, ConversationPrediction prediction)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }
            if (prediction == null)
            {
                throw new ArgumentNullException(nameof(prediction));
            }

            Query = query;
            Prediction = prediction;
        }

        /// <summary> Initializes a new instance of ConversationResult. </summary>
        /// <param name="query"> The same query given in request. </param>
        /// <param name="detectedLanguage"> The detected language from the query. </param>
        /// <param name="prediction"> The predicted result for the query. </param>
        internal ConversationResult(string query, string detectedLanguage, ConversationPrediction prediction)
        {
            Query = query;
            DetectedLanguage = detectedLanguage;
            Prediction = prediction;
        }

        /// <summary> The same query given in request. </summary>
        public string Query { get; }
        /// <summary> The detected language from the query. </summary>
        public string DetectedLanguage { get; }
        /// <summary> The predicted result for the query. </summary>
        public ConversationPrediction Prediction { get; }
    }
}
