// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Conversations.Models
{
    /// <summary> Enumeration of supported analysis tasks on a collection of conversations. </summary>
    internal readonly partial struct AnalyzeConversationJobTaskKind : IEquatable<AnalyzeConversationJobTaskKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalyzeConversationJobTaskKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalyzeConversationJobTaskKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConversationalSummarizationTaskValue = "ConversationalSummarizationTask";
        private const string ConversationalPIITaskValue = "ConversationalPIITask";
        private const string CustomConversationalSummarizationTaskValue = "CustomConversationalSummarizationTask";

        /// <summary> Conversational Summarization Task. </summary>
        public static AnalyzeConversationJobTaskKind ConversationalSummarizationTask { get; } = new AnalyzeConversationJobTaskKind(ConversationalSummarizationTaskValue);
        /// <summary> Conversational PII Task. </summary>
        public static AnalyzeConversationJobTaskKind ConversationalPIITask { get; } = new AnalyzeConversationJobTaskKind(ConversationalPIITaskValue);
        /// <summary> Custom Conversational Summarization Task. </summary>
        public static AnalyzeConversationJobTaskKind CustomConversationalSummarizationTask { get; } = new AnalyzeConversationJobTaskKind(CustomConversationalSummarizationTaskValue);
        /// <summary> Determines if two <see cref="AnalyzeConversationJobTaskKind"/> values are the same. </summary>
        public static bool operator ==(AnalyzeConversationJobTaskKind left, AnalyzeConversationJobTaskKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalyzeConversationJobTaskKind"/> values are not the same. </summary>
        public static bool operator !=(AnalyzeConversationJobTaskKind left, AnalyzeConversationJobTaskKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AnalyzeConversationJobTaskKind"/>. </summary>
        public static implicit operator AnalyzeConversationJobTaskKind(string value) => new AnalyzeConversationJobTaskKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalyzeConversationJobTaskKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalyzeConversationJobTaskKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
