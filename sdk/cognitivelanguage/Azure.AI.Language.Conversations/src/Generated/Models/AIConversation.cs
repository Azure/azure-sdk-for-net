// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.Conversations.Models
{
    /// <summary> The Conversations for ai conversation analysis. </summary>
    public partial class AIConversation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AIConversation"/>. </summary>
        /// <param name="id"> The ID of the conversation. </param>
        /// <param name="modality"> Default modality for all conversation items. </param>
        /// <param name="language"> Default language for all conversation items in BCP 47 language representation. </param>
        /// <param name="conversationItems"> List of conversation items. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="language"/> or <paramref name="conversationItems"/> is null. </exception>
        public AIConversation(string id, InputModality modality, string language, IEnumerable<ConversationalAIItem> conversationItems)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(language, nameof(language));
            Argument.AssertNotNull(conversationItems, nameof(conversationItems));

            Id = id;
            Modality = modality;
            Language = language;
            ConversationItems = conversationItems.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="AIConversation"/>. </summary>
        /// <param name="id"> The ID of the conversation. </param>
        /// <param name="modality"> Default modality for all conversation items. </param>
        /// <param name="language"> Default language for all conversation items in BCP 47 language representation. </param>
        /// <param name="conversationItems"> List of conversation items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AIConversation(string id, InputModality modality, string language, IList<ConversationalAIItem> conversationItems, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Modality = modality;
            Language = language;
            ConversationItems = conversationItems;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AIConversation"/> for deserialization. </summary>
        internal AIConversation()
        {
        }

        /// <summary> The ID of the conversation. </summary>
        public string Id { get; }
        /// <summary> Default modality for all conversation items. </summary>
        public InputModality Modality { get; }
        /// <summary> Default language for all conversation items in BCP 47 language representation. </summary>
        public string Language { get; }
        /// <summary> List of conversation items. </summary>
        public IList<ConversationalAIItem> ConversationItems { get; }
    }
}
