// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Conversations.Models
{
    /// <summary> The status of the task at the mentioned last update time. </summary>
    public readonly partial struct ConversationTaskState : IEquatable<ConversationTaskState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConversationTaskState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConversationTaskState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "notStarted";
        private const string RunningValue = "running";
        private const string SucceededValue = "succeeded";
        private const string PartiallyCompletedValue = "partiallyCompleted";
        private const string FailedValue = "failed";
        private const string CancelledValue = "cancelled";
        private const string CancellingValue = "cancelling";

        /// <summary> Not started state. </summary>
        public static ConversationTaskState NotStarted { get; } = new ConversationTaskState(NotStartedValue);
        /// <summary> Running state. </summary>
        public static ConversationTaskState Running { get; } = new ConversationTaskState(RunningValue);
        /// <summary> Succeeded state. </summary>
        public static ConversationTaskState Succeeded { get; } = new ConversationTaskState(SucceededValue);
        /// <summary> Partially completed state. </summary>
        public static ConversationTaskState PartiallyCompleted { get; } = new ConversationTaskState(PartiallyCompletedValue);
        /// <summary> Failed state. </summary>
        public static ConversationTaskState Failed { get; } = new ConversationTaskState(FailedValue);
        /// <summary> Cancelled state. </summary>
        public static ConversationTaskState Cancelled { get; } = new ConversationTaskState(CancelledValue);
        /// <summary> Cancelling state. </summary>
        public static ConversationTaskState Cancelling { get; } = new ConversationTaskState(CancellingValue);
        /// <summary> Determines if two <see cref="ConversationTaskState"/> values are the same. </summary>
        public static bool operator ==(ConversationTaskState left, ConversationTaskState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConversationTaskState"/> values are not the same. </summary>
        public static bool operator !=(ConversationTaskState left, ConversationTaskState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConversationTaskState"/>. </summary>
        public static implicit operator ConversationTaskState(string value) => new ConversationTaskState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConversationTaskState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConversationTaskState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
