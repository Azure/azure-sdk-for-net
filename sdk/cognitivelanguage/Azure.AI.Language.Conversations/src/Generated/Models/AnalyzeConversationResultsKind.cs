// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Conversations.Models
{
    /// <summary> Enumeration of results for supported conversation analysis Results. </summary>
    internal readonly partial struct AnalyzeConversationResultsKind : IEquatable<AnalyzeConversationResultsKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalyzeConversationResultsKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalyzeConversationResultsKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConversationalSummarizationResultsValue = "ConversationalSummarizationResults";
        private const string ConversationalPIIResultsValue = "ConversationalPIIResults";
        private const string CustomConversationalSummarizationResultsValue = "CustomConversationalSummarizationResults";

        /// <summary> Conversational Summarization Results. </summary>
        public static AnalyzeConversationResultsKind ConversationalSummarizationResults { get; } = new AnalyzeConversationResultsKind(ConversationalSummarizationResultsValue);
        /// <summary> Conversational PII Results. </summary>
        public static AnalyzeConversationResultsKind ConversationalPIIResults { get; } = new AnalyzeConversationResultsKind(ConversationalPIIResultsValue);
        /// <summary> Custom Conversational Summarization Results. </summary>
        public static AnalyzeConversationResultsKind CustomConversationalSummarizationResults { get; } = new AnalyzeConversationResultsKind(CustomConversationalSummarizationResultsValue);
        /// <summary> Determines if two <see cref="AnalyzeConversationResultsKind"/> values are the same. </summary>
        public static bool operator ==(AnalyzeConversationResultsKind left, AnalyzeConversationResultsKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalyzeConversationResultsKind"/> values are not the same. </summary>
        public static bool operator !=(AnalyzeConversationResultsKind left, AnalyzeConversationResultsKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AnalyzeConversationResultsKind"/>. </summary>
        public static implicit operator AnalyzeConversationResultsKind(string value) => new AnalyzeConversationResultsKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalyzeConversationResultsKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalyzeConversationResultsKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
