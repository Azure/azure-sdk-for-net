// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.Conversations.Models
{
    /// <summary> It is a wrap up a Question Answering KB response. </summary>
    public partial class AnalyzeConversationJobsInput
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AnalyzeConversationJobsInput"/>. </summary>
        /// <param name="analysisInput"> Analysis Input. </param>
        /// <param name="tasks">
        /// Set of tasks to execute on the input conversation.
        /// Please note <see cref="AnalyzeConversationJobTask"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AnalyzeConversationPiiTask"/>, <see cref="AnalyzeConversationSummarizationTask"/> and <see cref="AnalyzeCustomConversationSummarizationTask"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analysisInput"/> or <paramref name="tasks"/> is null. </exception>
        public AnalyzeConversationJobsInput(MultiLanguageConversationAnalysisInput analysisInput, IEnumerable<AnalyzeConversationJobTask> tasks)
        {
            Argument.AssertNotNull(analysisInput, nameof(analysisInput));
            Argument.AssertNotNull(tasks, nameof(tasks));

            AnalysisInput = analysisInput;
            Tasks = tasks.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeConversationJobsInput"/>. </summary>
        /// <param name="displayName"> Display name for the analysis job. </param>
        /// <param name="analysisInput"> Analysis Input. </param>
        /// <param name="tasks">
        /// Set of tasks to execute on the input conversation.
        /// Please note <see cref="AnalyzeConversationJobTask"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AnalyzeConversationPiiTask"/>, <see cref="AnalyzeConversationSummarizationTask"/> and <see cref="AnalyzeCustomConversationSummarizationTask"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AnalyzeConversationJobsInput(string displayName, MultiLanguageConversationAnalysisInput analysisInput, IList<AnalyzeConversationJobTask> tasks, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DisplayName = displayName;
            AnalysisInput = analysisInput;
            Tasks = tasks;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeConversationJobsInput"/> for deserialization. </summary>
        internal AnalyzeConversationJobsInput()
        {
        }

        /// <summary> Display name for the analysis job. </summary>
        public string DisplayName { get; set; }
        /// <summary> Analysis Input. </summary>
        public MultiLanguageConversationAnalysisInput AnalysisInput { get; }
        /// <summary>
        /// Set of tasks to execute on the input conversation.
        /// Please note <see cref="AnalyzeConversationJobTask"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AnalyzeConversationPiiTask"/>, <see cref="AnalyzeConversationSummarizationTask"/> and <see cref="AnalyzeCustomConversationSummarizationTask"/>.
        /// </summary>
        public IList<AnalyzeConversationJobTask> Tasks { get; }
    }
}
