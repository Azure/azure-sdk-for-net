// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Language.Conversations
{
    /// <summary> The ConversationAnalysis service client. </summary>
    public partial class ConversationAnalysisClient
    {
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ConversationAnalysisClient for mocking. </summary>
        protected ConversationAnalysisClient()
        {
        }

        /// <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        /// <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ConversationAnalysisClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new ConversationAnalysisClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        /// <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ConversationAnalysisClient(Uri endpoint, AzureKeyCredential credential, ConversationAnalysisClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new ConversationAnalysisClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Analyzes the input conversation utterance. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/Conversations/ConversationAnalysis/AnalyzeConversation
        /// Schema for <c>CustomConversationalTask Request Body</c>:
        /// <code>{
        ///   kind: Conversation, # Required. <Description>Enumeration of supported Conversation tasks.</Description>
        ///   analysisInput: {
        ///     conversationItem: {
        ///       id: string, # Required. <Description>The ID of a conversation item.</Description>
        ///       participantId: string, # Required. <Description>The participant ID of a conversation item.</Description>
        ///       language: string, # Optional. <Description>The override language of a conversation item in BCP 47 language representation.</Description>
        ///       modality: &quot;transcript&quot; | &quot;text&quot;, # Optional. <Description>Enumeration of supported conversational modalities.</Description>
        ///       role: &quot;agent&quot; | &quot;customer&quot; | &quot;generic&quot;, # Optional. <Description>The role of the participant.</Description>
        ///     }, # Required. <Description>The abstract base for a user input formatted conversation (e.g., Text, Transcript).</Description>
        ///   }, # Required. <Description>The input ConversationItem and its optional parameters</Description>
        ///   parameters: {
        ///     projectName: string, # Required. <Description>The name of the project to use.</Description>
        ///     deploymentName: string, # Required. <Description>The name of the deployment to use.</Description>
        ///     verbose: boolean, # Optional. <Description>If true, the service will return more detailed information in the response.</Description>
        ///     isLoggingEnabled: boolean, # Optional. <Description>If true, the service will keep the query for further review.</Description>
        ///     stringIndexType: &quot;TextElements_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. <Description>Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets.</Description>
        ///     directTarget: string, # Optional. <Description>The name of a target project to forward the request to.</Description>
        ///     targetProjectParameters: Dictionary&lt;string, AnalysisParameters&gt;, # Optional. <Description>A dictionary representing the parameters for each target project.</Description>
        ///   }, # Required. <Description>Input parameters necessary for a CustomConversation task.</Description>
        /// }
        /// </code>
        /// Schema for <c>CustomConversationalTaskResult Response Body</c>:
        /// <code>{
        ///   kind: ConversationResult, # Required. <Description>Enumeration of supported conversational task results</Description>
        ///   result: {
        ///     query: string, # Required. <Description>The conversation utterance given by the caller.</Description>
        ///     detectedLanguage: string, # Optional. <Description>The system detected language for the query in BCP 47 language representation..</Description>
        ///     prediction: {
        ///       projectKind: &quot;Conversation&quot; | &quot;Orchestration&quot;, # Required. <Description>The type of the project.</Description>
        ///       topIntent: string, # Optional. <Description>The intent with the highest score.</Description>
        ///     }, # Required. <Description>The prediction result of a conversation project.</Description>
        ///   }, # Required. <Description>Represents a conversation analysis response.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AnalyzeConversationAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConversationAnalysisClient.AnalyzeConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnalyzeConversationRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyzes the input conversation utterance. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/Conversations/ConversationAnalysis/AnalyzeConversation
        /// Schema for <c>CustomConversationalTask Request Body</c>:
        /// <code>{
        ///   kind: Conversation, # Required. <Description>Enumeration of supported Conversation tasks.</Description>
        ///   analysisInput: {
        ///     conversationItem: {
        ///       id: string, # Required. <Description>The ID of a conversation item.</Description>
        ///       participantId: string, # Required. <Description>The participant ID of a conversation item.</Description>
        ///       language: string, # Optional. <Description>The override language of a conversation item in BCP 47 language representation.</Description>
        ///       modality: &quot;transcript&quot; | &quot;text&quot;, # Optional. <Description>Enumeration of supported conversational modalities.</Description>
        ///       role: &quot;agent&quot; | &quot;customer&quot; | &quot;generic&quot;, # Optional. <Description>The role of the participant.</Description>
        ///     }, # Required. <Description>The abstract base for a user input formatted conversation (e.g., Text, Transcript).</Description>
        ///   }, # Required. <Description>The input ConversationItem and its optional parameters</Description>
        ///   parameters: {
        ///     projectName: string, # Required. <Description>The name of the project to use.</Description>
        ///     deploymentName: string, # Required. <Description>The name of the deployment to use.</Description>
        ///     verbose: boolean, # Optional. <Description>If true, the service will return more detailed information in the response.</Description>
        ///     isLoggingEnabled: boolean, # Optional. <Description>If true, the service will keep the query for further review.</Description>
        ///     stringIndexType: &quot;TextElements_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. <Description>Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets.</Description>
        ///     directTarget: string, # Optional. <Description>The name of a target project to forward the request to.</Description>
        ///     targetProjectParameters: Dictionary&lt;string, AnalysisParameters&gt;, # Optional. <Description>A dictionary representing the parameters for each target project.</Description>
        ///   }, # Required. <Description>Input parameters necessary for a CustomConversation task.</Description>
        /// }
        /// </code>
        /// Schema for <c>CustomConversationalTaskResult Response Body</c>:
        /// <code>{
        ///   kind: ConversationResult, # Required. <Description>Enumeration of supported conversational task results</Description>
        ///   result: {
        ///     query: string, # Required. <Description>The conversation utterance given by the caller.</Description>
        ///     detectedLanguage: string, # Optional. <Description>The system detected language for the query in BCP 47 language representation..</Description>
        ///     prediction: {
        ///       projectKind: &quot;Conversation&quot; | &quot;Orchestration&quot;, # Required. <Description>The type of the project.</Description>
        ///       topIntent: string, # Optional. <Description>The intent with the highest score.</Description>
        ///     }, # Required. <Description>The prediction result of a conversation project.</Description>
        ///   }, # Required. <Description>Represents a conversation analysis response.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AnalyzeConversation(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConversationAnalysisClient.AnalyzeConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnalyzeConversationRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateAnalyzeConversationRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/:analyze-conversations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
