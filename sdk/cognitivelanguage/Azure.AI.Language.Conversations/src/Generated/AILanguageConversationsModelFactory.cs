// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.Conversations.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class AILanguageConversationsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ConversationalInput"/>. </summary>
        /// <param name="conversationInput"> The input ConversationItem and its optional parameters. </param>
        /// <param name="actionContent"> Input parameters necessary for a Conversation task. </param>
        /// <returns> A new <see cref="Models.ConversationalInput"/> instance for mocking. </returns>
        public static ConversationalInput ConversationalInput(ConversationAnalysisInput conversationInput = null, ConversationActionContent actionContent = null)
        {
            return new ConversationalInput(AnalyzeConversationInputKind.Conversation, serializedAdditionalRawData: null, conversationInput, actionContent);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextConversationItem"/>. </summary>
        /// <param name="id"> The ID of a conversation item. </param>
        /// <param name="participantId"> The participant ID of a conversation item. </param>
        /// <param name="language"> The override language of a conversation item in BCP 47 language representation. </param>
        /// <param name="modality"> Enumeration of supported conversational modalities. </param>
        /// <param name="role"> Role of the participant. </param>
        /// <param name="text"> The text input. </param>
        /// <returns> A new <see cref="Models.TextConversationItem"/> instance for mocking. </returns>
        public static TextConversationItem TextConversationItem(string id = null, string participantId = null, string language = null, InputModality? modality = null, ParticipantRole? role = null, string text = null)
        {
            return new TextConversationItem(
                id,
                participantId,
                language,
                modality,
                role,
                text,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationActionContent"/>. </summary>
        /// <param name="projectName"> The name of the project to use. </param>
        /// <param name="deploymentName"> The name of the deployment to use. </param>
        /// <param name="verbose"> If true, the service will return more detailed information in the response. </param>
        /// <param name="isLoggingEnabled"> If true, the service will keep the query for further review. </param>
        /// <param name="stringIndexType"> Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets. </param>
        /// <param name="directTarget"> The name of a target project to forward the request to. </param>
        /// <param name="targetProjectParameters">
        /// A dictionary representing the parameters for each target project.
        /// Please note <see cref="AnalysisConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ConversationConfig"/>, <see cref="LuisConfig"/> and <see cref="QustionAnsweringConfig"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationActionContent"/> instance for mocking. </returns>
        public static ConversationActionContent ConversationActionContent(string projectName = null, string deploymentName = null, bool? verbose = null, bool? isLoggingEnabled = null, StringIndexType? stringIndexType = null, string directTarget = null, IDictionary<string, AnalysisConfig> targetProjectParameters = null)
        {
            targetProjectParameters ??= new Dictionary<string, AnalysisConfig>();

            return new ConversationActionContent(
                projectName,
                deploymentName,
                verbose,
                isLoggingEnabled,
                stringIndexType,
                directTarget,
                targetProjectParameters,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KnowledgeBaseAnswerContext"/>. </summary>
        /// <param name="previousQnaId"> Previous turn top answer result QnA ID. </param>
        /// <param name="previousQuestion"> Previous user query. </param>
        /// <returns> A new <see cref="Models.KnowledgeBaseAnswerContext"/> instance for mocking. </returns>
        public static KnowledgeBaseAnswerContext KnowledgeBaseAnswerContext(int previousQnaId = default, string previousQuestion = null)
        {
            return new KnowledgeBaseAnswerContext(previousQnaId, previousQuestion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnalyzeConversationConversationalResult"/>. </summary>
        /// <param name="result">
        /// Represents a conversation analysis response.
        /// Please note <see cref="AnalyzeConversationResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.AnalyzeConversationConversationalResult"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AnalyzeConversationConversationalResult"/> instance for mocking. </returns>
        public static AnalyzeConversationConversationalResult AnalyzeConversationConversationalResult(AnalyzeConversationResult result = null)
        {
            return new AnalyzeConversationConversationalResult(AnalyzeConversationResultKind.ConversationResult, serializedAdditionalRawData: null, result);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnalyzeConversationOperationState"/>. </summary>
        /// <param name="displayName"> display name. </param>
        /// <param name="createdDateTime"> Date and time job created. </param>
        /// <param name="expirationDateTime"> Date and time job expires. </param>
        /// <param name="jobId"> job ID. </param>
        /// <param name="lastUpdatedDateTime"> last updated date and time. </param>
        /// <param name="status"> status. </param>
        /// <param name="errors"> errors. </param>
        /// <param name="nextLink"> next link. </param>
        /// <param name="actions"> Contains the state for the tasks that are being executed as part of the submitted job for analyzing a conversation. </param>
        /// <param name="statistics"> Contains the statistics for the submitted job. </param>
        /// <returns> A new <see cref="Models.AnalyzeConversationOperationState"/> instance for mocking. </returns>
        public static AnalyzeConversationOperationState AnalyzeConversationOperationState(string displayName = null, DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, Guid jobId = default, DateTimeOffset lastUpdatedDateTime = default, ConversationActionState status = default, IEnumerable<ConversationError> errors = null, string nextLink = null, ConversationActions actions = null, ConversationRequestStatistics statistics = null)
        {
            errors ??= new List<ConversationError>();

            return new AnalyzeConversationOperationState(
                displayName,
                createdDateTime,
                expirationDateTime,
                jobId,
                lastUpdatedDateTime,
                status,
                errors?.ToList(),
                nextLink,
                actions,
                statistics,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationError"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> A human-readable representation of the error. </param>
        /// <param name="target"> The target of the error. </param>
        /// <param name="details"> An array of details about specific errors that led to this reported error. </param>
        /// <param name="innererror"> An object containing more specific information than the current object about the error. </param>
        /// <returns> A new <see cref="Models.ConversationError"/> instance for mocking. </returns>
        public static ConversationError ConversationError(ConversationErrorCode code = default, string message = null, string target = null, IEnumerable<ConversationError> details = null, InnerErrorModel innererror = null)
        {
            details ??= new List<ConversationError>();

            return new ConversationError(
                code,
                message,
                target,
                details?.ToList(),
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InnerErrorModel"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="details"> Error details. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="innererror"> An object containing more specific information than the current object about the error. </param>
        /// <returns> A new <see cref="Models.InnerErrorModel"/> instance for mocking. </returns>
        public static InnerErrorModel InnerErrorModel(InnerErrorCode code = default, string message = null, IReadOnlyDictionary<string, string> details = null, string target = null, InnerErrorModel innererror = null)
        {
            details ??= new Dictionary<string, string>();

            return new InnerErrorModel(
                code,
                message,
                details,
                target,
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationActions"/>. </summary>
        /// <param name="completed"> Count of tasks that finished successfully. </param>
        /// <param name="failed"> Count of tasks that failed. </param>
        /// <param name="inProgress"> Count of tasks that are currently in progress. </param>
        /// <param name="total"> Total count of tasks submitted as part of the job. </param>
        /// <param name="items">
        /// List of results from tasks (if available).
        /// Please note <see cref="Models.AnalyzeConversationOperationResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.ConversationPiiOperationResult"/>, <see cref="Models.SummarizationOperationResult"/> and <see cref="Models.CustomSummarizationOperationResult"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationActions"/> instance for mocking. </returns>
        public static ConversationActions ConversationActions(int completed = default, int failed = default, int inProgress = default, int total = default, IEnumerable<AnalyzeConversationOperationResult> items = null)
        {
            items ??= new List<AnalyzeConversationOperationResult>();

            return new ConversationActions(
                completed,
                failed,
                inProgress,
                total,
                items?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnalyzeConversationOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="name"> task name. </param>
        /// <param name="kind"> discriminator kind. </param>
        /// <returns> A new <see cref="Models.AnalyzeConversationOperationResult"/> instance for mocking. </returns>
        public static AnalyzeConversationOperationResult AnalyzeConversationOperationResult(DateTimeOffset lastUpdateDateTime = default, ConversationActionState status = default, string name = null, string kind = null)
        {
            return new UnknownAnalyzeConversationOperationResult(lastUpdateDateTime, status, name, kind == null ? default : new AnalyzeConversationOperationResultsKind(kind), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationPiiOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="name"> task name. </param>
        /// <param name="results"> results. </param>
        /// <returns> A new <see cref="Models.ConversationPiiOperationResult"/> instance for mocking. </returns>
        public static ConversationPiiOperationResult ConversationPiiOperationResult(DateTimeOffset lastUpdateDateTime = default, ConversationActionState status = default, string name = null, ConversationPiiResults results = null)
        {
            return new ConversationPiiOperationResult(
                lastUpdateDateTime,
                status,
                name,
                AnalyzeConversationOperationResultsKind.PiiOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationPiiResults"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> statistics. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="conversations"> array of conversations. </param>
        /// <returns> A new <see cref="Models.ConversationPiiResults"/> instance for mocking. </returns>
        public static ConversationPiiResults ConversationPiiResults(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<ConversationalPiiResultWithResultBase> conversations = null)
        {
            errors ??= new List<DocumentError>();
            conversations ??= new List<ConversationalPiiResultWithResultBase>();

            return new ConversationPiiResults(errors?.ToList(), statistics, modelVersion, conversations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentError"/>. </summary>
        /// <param name="id"> The ID of the input document. </param>
        /// <param name="error"> Error encountered. </param>
        /// <returns> A new <see cref="Models.DocumentError"/> instance for mocking. </returns>
        public static DocumentError DocumentError(string id = null, ConversationError error = null)
        {
            return new DocumentError(id, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RequestStatistics"/>. </summary>
        /// <param name="documentsCount"> Number of documents submitted in the request. </param>
        /// <param name="validDocumentsCount"> Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="erroneousDocumentsCount"> Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="transactionsCount"> Number of transactions for the request. </param>
        /// <returns> A new <see cref="Models.RequestStatistics"/> instance for mocking. </returns>
        public static RequestStatistics RequestStatistics(int documentsCount = default, int validDocumentsCount = default, int erroneousDocumentsCount = default, long transactionsCount = default)
        {
            return new RequestStatistics(documentsCount, validDocumentsCount, erroneousDocumentsCount, transactionsCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalPiiResultWithResultBase"/>. </summary>
        /// <param name="id"> Unique, non-empty conversation identifier. </param>
        /// <param name="warnings"> Warnings encountered in processing the document. </param>
        /// <param name="statistics"> If showStats=true was specified in the request this field will contain information about the conversation payload. </param>
        /// <param name="conversationItems"> List of conversationItems. </param>
        /// <returns> A new <see cref="Models.ConversationalPiiResultWithResultBase"/> instance for mocking. </returns>
        public static ConversationalPiiResultWithResultBase ConversationalPiiResultWithResultBase(string id = null, IEnumerable<InputWarning> warnings = null, ConversationStatistics statistics = null, IEnumerable<ConversationPiiItemResult> conversationItems = null)
        {
            warnings ??= new List<InputWarning>();
            conversationItems ??= new List<ConversationPiiItemResult>();

            return new ConversationalPiiResultWithResultBase(id, warnings?.ToList(), statistics, conversationItems?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InputWarning"/>. </summary>
        /// <param name="code"> Warning code. </param>
        /// <param name="message"> Warning message. </param>
        /// <param name="targetRef"> A JSON pointer reference indicating the target object. </param>
        /// <returns> A new <see cref="Models.InputWarning"/> instance for mocking. </returns>
        public static InputWarning InputWarning(string code = null, string message = null, string targetRef = null)
        {
            return new InputWarning(code, message, targetRef, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationStatistics"/>. </summary>
        /// <param name="transactionsCount"> Number of text units for the request. </param>
        /// <returns> A new <see cref="Models.ConversationStatistics"/> instance for mocking. </returns>
        public static ConversationStatistics ConversationStatistics(int transactionsCount = default)
        {
            return new ConversationStatistics(transactionsCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationPiiItemResult"/>. </summary>
        /// <param name="id"> Id of the result. </param>
        /// <param name="redactedContent"> Transcript content response that the service generates, with all necessary personally identifiable information redacted. </param>
        /// <param name="entities"> Array of Entities. </param>
        /// <returns> A new <see cref="Models.ConversationPiiItemResult"/> instance for mocking. </returns>
        public static ConversationPiiItemResult ConversationPiiItemResult(string id = null, RedactedTranscriptContent redactedContent = null, IEnumerable<NamedEntity> entities = null)
        {
            entities ??= new List<NamedEntity>();

            return new ConversationPiiItemResult(id, redactedContent, entities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedactedTranscriptContent"/>. </summary>
        /// <param name="inverseTextNormalized"> Redacted output for input in inverse-text-normalized format. </param>
        /// <param name="maskedInverseTextNormalized"> Redacted output for input in masked inverse-text-normalized format. </param>
        /// <param name="text"> Redacted output for input in text (Microsoft's speech-to-text 'display') format. </param>
        /// <param name="lexical"> Redacted output for input in lexical format. </param>
        /// <param name="audioTimings"> List of redacted audio segments. </param>
        /// <returns> A new <see cref="Models.RedactedTranscriptContent"/> instance for mocking. </returns>
        public static RedactedTranscriptContent RedactedTranscriptContent(string inverseTextNormalized = null, string maskedInverseTextNormalized = null, string text = null, string lexical = null, IEnumerable<AudioTiming> audioTimings = null)
        {
            audioTimings ??= new List<AudioTiming>();

            return new RedactedTranscriptContent(
                inverseTextNormalized,
                maskedInverseTextNormalized,
                text,
                lexical,
                audioTimings?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AudioTiming"/>. </summary>
        /// <param name="offset"> Offset from the start of speech audio, in ticks. 1 tick = 100 nanoseconds. </param>
        /// <param name="duration"> Duration of word articulation, in ticks. 1 tick = 100 nanoseconds. </param>
        /// <returns> A new <see cref="Models.AudioTiming"/> instance for mocking. </returns>
        public static AudioTiming AudioTiming(long? offset = null, long? duration = null)
        {
            return new AudioTiming(offset, duration, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamedEntity"/>. </summary>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="category"> Entity type. </param>
        /// <param name="subcategory"> (Optional) Entity sub type. </param>
        /// <param name="offset"> Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted entity. </param>
        /// <returns> A new <see cref="Models.NamedEntity"/> instance for mocking. </returns>
        public static NamedEntity NamedEntity(string text = null, string category = null, string subcategory = null, int offset = default, int length = default, double confidenceScore = default)
        {
            return new NamedEntity(
                text,
                category,
                subcategory,
                offset,
                length,
                confidenceScore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SummarizationOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="name"> task name. </param>
        /// <param name="results"> results. </param>
        /// <returns> A new <see cref="Models.SummarizationOperationResult"/> instance for mocking. </returns>
        public static SummarizationOperationResult SummarizationOperationResult(DateTimeOffset lastUpdateDateTime = default, ConversationActionState status = default, string name = null, SummaryResult results = null)
        {
            return new SummarizationOperationResult(
                lastUpdateDateTime,
                status,
                name,
                AnalyzeConversationOperationResultsKind.SummarizationOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SummaryResult"/>. </summary>
        /// <param name="conversations"> array of conversations. </param>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> statistics. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <returns> A new <see cref="Models.SummaryResult"/> instance for mocking. </returns>
        public static SummaryResult SummaryResult(IEnumerable<ConversationsSummaryResult> conversations = null, IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null)
        {
            conversations ??= new List<ConversationsSummaryResult>();
            errors ??= new List<DocumentError>();

            return new SummaryResult(conversations?.ToList(), errors?.ToList(), statistics, modelVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationsSummaryResult"/>. </summary>
        /// <param name="id"> Unique, non-empty conversation identifier. </param>
        /// <param name="warnings"> Warnings encountered in processing the document. </param>
        /// <param name="statistics"> If showStats=true was specified in the request this field will contain information about the conversation payload. </param>
        /// <param name="summaries"> array of summaries. </param>
        /// <returns> A new <see cref="Models.ConversationsSummaryResult"/> instance for mocking. </returns>
        public static ConversationsSummaryResult ConversationsSummaryResult(string id = null, IEnumerable<InputWarning> warnings = null, ConversationStatistics statistics = null, IEnumerable<SummaryResultItem> summaries = null)
        {
            warnings ??= new List<InputWarning>();
            summaries ??= new List<SummaryResultItem>();

            return new ConversationsSummaryResult(id, warnings?.ToList(), statistics, summaries?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SummaryResultItem"/>. </summary>
        /// <param name="aspect"> aspect. </param>
        /// <param name="text"> text. </param>
        /// <param name="contexts"> Context list of the summary. </param>
        /// <returns> A new <see cref="Models.SummaryResultItem"/> instance for mocking. </returns>
        public static SummaryResultItem SummaryResultItem(string aspect = null, string text = null, IEnumerable<ItemizedSummaryContext> contexts = null)
        {
            contexts ??= new List<ItemizedSummaryContext>();

            return new SummaryResultItem(aspect, text, contexts?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ItemizedSummaryContext"/>. </summary>
        /// <param name="offset"> Start position for the context. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> The length of the context. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="conversationItemId"> Reference to the ID of ConversationItem. </param>
        /// <returns> A new <see cref="Models.ItemizedSummaryContext"/> instance for mocking. </returns>
        public static ItemizedSummaryContext ItemizedSummaryContext(int offset = default, int length = default, string conversationItemId = null)
        {
            return new ItemizedSummaryContext(offset, length, conversationItemId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomSummarizationOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="name"> task name. </param>
        /// <param name="results"> Custom Summary Result. </param>
        /// <returns> A new <see cref="Models.CustomSummarizationOperationResult"/> instance for mocking. </returns>
        public static CustomSummarizationOperationResult CustomSummarizationOperationResult(DateTimeOffset lastUpdateDateTime = default, ConversationActionState status = default, string name = null, CustomSummaryResult results = null)
        {
            return new CustomSummarizationOperationResult(
                lastUpdateDateTime,
                status,
                name,
                AnalyzeConversationOperationResultsKind.CustomSummarizationOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomSummaryResult"/>. </summary>
        /// <param name="conversations"> array of conversations. </param>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="projectName"> This field indicates the project name for the model. </param>
        /// <param name="deploymentName"> This field indicates the deployment name for the model. </param>
        /// <returns> A new <see cref="Models.CustomSummaryResult"/> instance for mocking. </returns>
        public static CustomSummaryResult CustomSummaryResult(IEnumerable<ConversationsSummaryResult> conversations = null, IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string projectName = null, string deploymentName = null)
        {
            conversations ??= new List<ConversationsSummaryResult>();
            errors ??= new List<DocumentError>();

            return new CustomSummaryResult(
                conversations?.ToList(),
                errors?.ToList(),
                statistics,
                projectName,
                deploymentName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationRequestStatistics"/>. </summary>
        /// <param name="documentsCount"> Number of documents submitted in the request. </param>
        /// <param name="validDocumentsCount"> Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="erroneousDocumentsCount"> Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="transactionsCount"> Number of transactions for the request. </param>
        /// <param name="conversationsCount"> Number of conversations submitted in the request. </param>
        /// <param name="validConversationsCount"> Number of conversation documents. This excludes documents that are empty, over the size limit, or in unsupported languages. </param>
        /// <param name="erroneousConversationsCount"> Number of invalid documents. This includes documents that are empty, over the size limit, or in unsupported languages. </param>
        /// <returns> A new <see cref="Models.ConversationRequestStatistics"/> instance for mocking. </returns>
        public static ConversationRequestStatistics ConversationRequestStatistics(int documentsCount = default, int validDocumentsCount = default, int erroneousDocumentsCount = default, long transactionsCount = default, int conversationsCount = default, int validConversationsCount = default, int erroneousConversationsCount = default)
        {
            return new ConversationRequestStatistics(
                documentsCount,
                validDocumentsCount,
                erroneousDocumentsCount,
                transactionsCount,
                conversationsCount,
                validConversationsCount,
                erroneousConversationsCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnalyzeConversationOperationInput"/>. </summary>
        /// <param name="displayName"> Display name for the analysis job. </param>
        /// <param name="conversationInput"> Analysis Input. </param>
        /// <param name="actions">
        /// Set of tasks to execute on the input conversation.
        /// Please note <see cref="AnalyzeConversationOperationAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PiiOperationAction"/>, <see cref="SummarizationOperationAction"/> and <see cref="CustomSummarizationOperationAction"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AnalyzeConversationOperationInput"/> instance for mocking. </returns>
        public static AnalyzeConversationOperationInput AnalyzeConversationOperationInput(string displayName = null, MultiLanguageConversationInput conversationInput = null, IEnumerable<AnalyzeConversationOperationAction> actions = null)
        {
            actions ??= new List<AnalyzeConversationOperationAction>();

            return new AnalyzeConversationOperationInput(displayName, conversationInput, actions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationInput"/>. </summary>
        /// <param name="id"> Unique identifier for the conversation. </param>
        /// <param name="language"> Language of the conversation item in BCP-47 format. </param>
        /// <param name="modality"> modality. </param>
        /// <param name="domain"> domain. </param>
        /// <returns> A new <see cref="Models.ConversationInput"/> instance for mocking. </returns>
        public static ConversationInput ConversationInput(string id = null, string language = null, string modality = null, ConversationDomain? domain = null)
        {
            return new UnknownConversationInput(id, language, modality == null ? default : new InputModality(modality), domain, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextConversation"/>. </summary>
        /// <param name="id"> Unique identifier for the conversation. </param>
        /// <param name="language"> Language of the conversation item in BCP-47 format. </param>
        /// <param name="domain"> domain. </param>
        /// <param name="conversationItems"> Ordered list of text conversation items in the conversation. </param>
        /// <returns> A new <see cref="Models.TextConversation"/> instance for mocking. </returns>
        public static TextConversation TextConversation(string id = null, string language = null, ConversationDomain? domain = null, IEnumerable<TextConversationItem> conversationItems = null)
        {
            conversationItems ??= new List<TextConversationItem>();

            return new TextConversation(
                id,
                language,
                InputModality.Text,
                domain,
                serializedAdditionalRawData: null,
                conversationItems?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.TranscriptConversation"/>. </summary>
        /// <param name="id"> Unique identifier for the conversation. </param>
        /// <param name="language"> Language of the conversation item in BCP-47 format. </param>
        /// <param name="domain"> domain. </param>
        /// <param name="conversationItems"> Ordered list of transcript conversation items in the conversation. </param>
        /// <returns> A new <see cref="Models.TranscriptConversation"/> instance for mocking. </returns>
        public static TranscriptConversation TranscriptConversation(string id = null, string language = null, ConversationDomain? domain = null, IEnumerable<TranscriptConversationItem> conversationItems = null)
        {
            conversationItems ??= new List<TranscriptConversationItem>();

            return new TranscriptConversation(
                id,
                language,
                InputModality.Transcript,
                domain,
                serializedAdditionalRawData: null,
                conversationItems?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.TranscriptConversationItem"/>. </summary>
        /// <param name="id"> The ID of a conversation item. </param>
        /// <param name="participantId"> The participant ID of a conversation item. </param>
        /// <param name="language"> The override language of a conversation item in BCP 47 language representation. </param>
        /// <param name="modality"> Enumeration of supported conversational modalities. </param>
        /// <param name="role"> Role of the participant. </param>
        /// <param name="inverseTextNormalized"> Inverse text normalization (ITN) representation of input. The inverse-text-normalized form is the recognized text from Microsoft's speech-to-text API, with phone numbers, numbers, abbreviations, and other transformations applied. </param>
        /// <param name="maskedInverseTextNormalized"> Inverse-text-normalized format with profanity masking applied. </param>
        /// <param name="text"> Display form of the recognized text from the speech-to-text API, with punctuation and capitalization added. </param>
        /// <param name="lexical"> Lexical form of the recognized text from the speech-to-text API, with the actual words recognized. </param>
        /// <param name="wordLevelTimings"> List of word-level audio timing information. </param>
        /// <param name="conversationItemLevelTiming"> Audio timing at the conversation item level. This still can help with AI quality if word-level audio timings are not available. </param>
        /// <returns> A new <see cref="Models.TranscriptConversationItem"/> instance for mocking. </returns>
        public static TranscriptConversationItem TranscriptConversationItem(string id = null, string participantId = null, string language = null, InputModality? modality = null, ParticipantRole? role = null, string inverseTextNormalized = null, string maskedInverseTextNormalized = null, string text = null, string lexical = null, IEnumerable<WordLevelTiming> wordLevelTimings = null, ConversationItemLevelTiming conversationItemLevelTiming = null)
        {
            wordLevelTimings ??= new List<WordLevelTiming>();

            return new TranscriptConversationItem(
                id,
                participantId,
                language,
                modality,
                role,
                inverseTextNormalized,
                maskedInverseTextNormalized,
                text,
                lexical,
                wordLevelTimings?.ToList(),
                conversationItemLevelTiming,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomConversationSummarizationActionContent"/>. </summary>
        /// <param name="loggingOptOut"> logging opt out. </param>
        /// <param name="projectName"> This field indicates the project name for the model. </param>
        /// <param name="deploymentName"> This field indicates the deployment name for the model. </param>
        /// <param name="sentenceCount"> It controls the approximate number of sentences in the output summaries. </param>
        /// <param name="stringIndexType"> String index type. </param>
        /// <param name="summaryLength"> Controls the approximate length of the output summaries. Recommended to use summaryLength over sentenceCount. </param>
        /// <param name="summaryAspects"> Array of Summary Aspects. </param>
        /// <returns> A new <see cref="Models.CustomConversationSummarizationActionContent"/> instance for mocking. </returns>
        public static CustomConversationSummarizationActionContent CustomConversationSummarizationActionContent(bool? loggingOptOut = null, string projectName = null, string deploymentName = null, int? sentenceCount = null, StringIndexType? stringIndexType = null, SummaryLengthBucket? summaryLength = null, IEnumerable<SummaryAspect> summaryAspects = null)
        {
            summaryAspects ??= new List<SummaryAspect>();

            return new CustomConversationSummarizationActionContent(
                loggingOptOut,
                projectName,
                deploymentName,
                sentenceCount,
                stringIndexType,
                summaryLength,
                summaryAspects?.ToList(),
                serializedAdditionalRawData: null);
        }
    }
}
