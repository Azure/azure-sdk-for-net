<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="AnalyzeConversationAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call AnalyzeConversationAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversationItem = new {
            text = "<text>",
            id = "<id>",
            participantId = "<participantId>",
        },
    },
    parameters = new {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
    },
    kind = "Conversation",
};

Response response = await client.AnalyzeConversationAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeConversationAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversationItem = new {
            text = "<text>",
            id = "<id>",
            participantId = "<participantId>",
            language = "<language>",
            modality = "transcript",
            role = "agent",
        },
    },
    parameters = new {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
        verbose = true,
        isLoggingEnabled = true,
        stringIndexType = "Utf16CodeUnit",
        directTarget = "<directTarget>",
        targetProjectParameters = new {
            key = new {
                query = "<query>",
                callingOptions = new {
                    verbose = true,
                    log = true,
                    show_all_intents = true,
                    timezoneOffset = 123.45f,
                    spellCheck = true,
                    bing_spell_check_subscription_key = "<bing-spell-check-subscription-key>",
                },
                targetProjectKind = "Luis",
                apiVersion = "<apiVersion>",
            },
        },
    },
    kind = "Conversation",
};

Response response = await client.AnalyzeConversationAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime/analyze-conversation

</remarks>
    </member>
    <member name="AnalyzeConversation(RequestContent,RequestContext)">
<example>
This sample shows how to call AnalyzeConversation with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversationItem = new {
            text = "<text>",
            id = "<id>",
            participantId = "<participantId>",
        },
    },
    parameters = new {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
    },
    kind = "Conversation",
};

Response response = client.AnalyzeConversation(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeConversation with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversationItem = new {
            text = "<text>",
            id = "<id>",
            participantId = "<participantId>",
            language = "<language>",
            modality = "transcript",
            role = "agent",
        },
    },
    parameters = new {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
        verbose = true,
        isLoggingEnabled = true,
        stringIndexType = "Utf16CodeUnit",
        directTarget = "<directTarget>",
        targetProjectParameters = new {
            key = new {
                query = "<query>",
                callingOptions = new {
                    verbose = true,
                    log = true,
                    show_all_intents = true,
                    timezoneOffset = 123.45f,
                    spellCheck = true,
                    bing_spell_check_subscription_key = "<bing-spell-check-subscription-key>",
                },
                targetProjectKind = "Luis",
                apiVersion = "<apiVersion>",
            },
        },
    },
    kind = "Conversation",
};

Response response = client.AnalyzeConversation(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime/analyze-conversation

</remarks>
    </member>
    <member name="GetAnalyzeConversationJobStatusAsync(Guid,bool?,RequestContext)">
<example>
This sample shows how to call GetAnalyzeConversationJobStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

Response response = await client.GetAnalyzeConversationJobStatusAsync(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetAnalyzeConversationJobStatusAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

Response response = await client.GetAnalyzeConversationJobStatusAsync(Guid.NewGuid(), true, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime/job-status

</remarks>
    </member>
    <member name="GetAnalyzeConversationJobStatus(Guid,bool?,RequestContext)">
<example>
This sample shows how to call GetAnalyzeConversationJobStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

Response response = client.GetAnalyzeConversationJobStatus(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetAnalyzeConversationJobStatus with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

Response response = client.GetAnalyzeConversationJobStatus(Guid.NewGuid(), true, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime/job-status

</remarks>
    </member>
    <member name="StartAnalyzeConversationAsync(WaitUntil,RequestContent,RequestContext)">
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime/submit-job

</remarks>
    </member>
    <member name="StartAnalyzeConversation(WaitUntil,RequestContent,RequestContext)">
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime/submit-job

</remarks>
    </member>
    <member name="CancelAnalyzeConversationJobAsync(WaitUntil,Guid,RequestContext)">
<example>
This sample shows how to call CancelAnalyzeConversationJobAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var operation = await client.CancelAnalyzeConversationJobAsync(WaitUntil.Completed, Guid.NewGuid(), new RequestContext());

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime/cancel-job

</remarks>
    </member>
    <member name="CancelAnalyzeConversationJob(WaitUntil,Guid,RequestContext)">
<example>
This sample shows how to call CancelAnalyzeConversationJob with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var operation = client.CancelAnalyzeConversationJob(WaitUntil.Completed, Guid.NewGuid(), new RequestContext());

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime/cancel-job

</remarks>
    </member>
  </members>
</doc>