<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="AnalyzeConversationAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call AnalyzeConversationAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversationItem = new {
            text = "<text>",
            id = "<id>",
            participantId = "<participantId>",
        },
    },
    parameters = new {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
    },
    kind = "Conversation",
};

Response response = await client.AnalyzeConversationAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeConversationAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversationItem = new {
            text = "<text>",
            id = "<id>",
            participantId = "<participantId>",
            language = "<language>",
            modality = "transcript",
            role = "agent",
        },
    },
    parameters = new {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
        verbose = true,
        isLoggingEnabled = true,
        stringIndexType = "Utf16CodeUnit",
        directTarget = "<directTarget>",
        targetProjectParameters = new {
            key = new {
                query = "<query>",
                callingOptions = new {
                    verbose = true,
                    log = true,
                    show-all-intents = true,
                    timezoneOffset = 123.45f,
                    spellCheck = true,
                    bing-spell-check-subscription-key = "<bing-spell-check-subscription-key>",
                },
                targetProjectKind = "Luis",
                apiVersion = "<apiVersion>",
            },
        },
    },
    kind = "Conversation",
};

Response response = await client.AnalyzeConversationAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2022-10-01-preview/conversation-analysis-runtime/analyze-conversation

Request Body:

<details><summary>ConversationalTask</summary>Schema for <c>ConversationalTask</c>:
<code>{
  analysisInput: {
    conversationItem: {
      id: string, # Required. The ID of a conversation item.
      participantId: string, # Required. The participant ID of a conversation item.
      language: string, # Optional. The override language of a conversation item in BCP 47 language representation.
      modality: &quot;transcript&quot; | &quot;text&quot;, # Optional. Enumeration of supported conversational modalities.
      role: &quot;agent&quot; | &quot;customer&quot; | &quot;generic&quot;, # Optional. The role of the participant.
    }, # Required. The abstract base for a user input formatted conversation (e.g., Text, Transcript).
  }, # Required. The input ConversationItem and its optional parameters
  parameters: {
    projectName: string, # Required. The name of the project to use.
    deploymentName: string, # Required. The name of the deployment to use.
    verbose: boolean, # Optional. If true, the service will return more detailed information in the response.
    isLoggingEnabled: boolean, # Optional. If true, the service will keep the query for further review.
    stringIndexType: &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets. Set this to &quot;Utf16CodeUnit&quot; for .NET strings, which are encoded as UTF-16.
    directTarget: string, # Optional. The name of a target project to forward the request to.
    targetProjectParameters: Dictionary&lt;string, AnalysisParameters&gt;, # Optional. A dictionary representing the parameters for each target project.
  }, # Required. Input parameters necessary for a Conversation task.
  kind: Conversation, # Required. Enumeration of supported Conversation tasks.
}
</code>
</details>

Response Body:

<details><summary>ConversationalTaskResult</summary>Schema for <c>ConversationalTaskResult</c>:
<code>{
  result: {
    query: string, # Required. The conversation utterance given by the caller.
    detectedLanguage: string, # Optional. The system detected language for the query in BCP 47 language representation..
    prediction: {
      projectKind: &quot;Conversation&quot; | &quot;Orchestration&quot; | &quot;CustomConversationSummarization&quot;, # Required. The type of the project.
      topIntent: string, # Optional. The intent with the highest score.
    }, # Required. The prediction result of a conversation project.
  }, # Required. Represents a conversation analysis response.
  kind: ConversationResult, # Required. Enumeration of supported conversational task results
}
</code>
</details>

</remarks>
    </member>
    <member name="AnalyzeConversation(RequestContent,RequestContext)">
<example>
This sample shows how to call AnalyzeConversation with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversationItem = new {
            text = "<text>",
            id = "<id>",
            participantId = "<participantId>",
        },
    },
    parameters = new {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
    },
    kind = "Conversation",
};

Response response = client.AnalyzeConversation(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeConversation with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversationItem = new {
            text = "<text>",
            id = "<id>",
            participantId = "<participantId>",
            language = "<language>",
            modality = "transcript",
            role = "agent",
        },
    },
    parameters = new {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
        verbose = true,
        isLoggingEnabled = true,
        stringIndexType = "Utf16CodeUnit",
        directTarget = "<directTarget>",
        targetProjectParameters = new {
            key = new {
                query = "<query>",
                callingOptions = new {
                    verbose = true,
                    log = true,
                    show-all-intents = true,
                    timezoneOffset = 123.45f,
                    spellCheck = true,
                    bing-spell-check-subscription-key = "<bing-spell-check-subscription-key>",
                },
                targetProjectKind = "Luis",
                apiVersion = "<apiVersion>",
            },
        },
    },
    kind = "Conversation",
};

Response response = client.AnalyzeConversation(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2022-10-01-preview/conversation-analysis-runtime/analyze-conversation

Request Body:

<details><summary>ConversationalTask</summary>Schema for <c>ConversationalTask</c>:
<code>{
  analysisInput: {
    conversationItem: {
      id: string, # Required. The ID of a conversation item.
      participantId: string, # Required. The participant ID of a conversation item.
      language: string, # Optional. The override language of a conversation item in BCP 47 language representation.
      modality: &quot;transcript&quot; | &quot;text&quot;, # Optional. Enumeration of supported conversational modalities.
      role: &quot;agent&quot; | &quot;customer&quot; | &quot;generic&quot;, # Optional. The role of the participant.
    }, # Required. The abstract base for a user input formatted conversation (e.g., Text, Transcript).
  }, # Required. The input ConversationItem and its optional parameters
  parameters: {
    projectName: string, # Required. The name of the project to use.
    deploymentName: string, # Required. The name of the deployment to use.
    verbose: boolean, # Optional. If true, the service will return more detailed information in the response.
    isLoggingEnabled: boolean, # Optional. If true, the service will keep the query for further review.
    stringIndexType: &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets. Set this to &quot;Utf16CodeUnit&quot; for .NET strings, which are encoded as UTF-16.
    directTarget: string, # Optional. The name of a target project to forward the request to.
    targetProjectParameters: Dictionary&lt;string, AnalysisParameters&gt;, # Optional. A dictionary representing the parameters for each target project.
  }, # Required. Input parameters necessary for a Conversation task.
  kind: Conversation, # Required. Enumeration of supported Conversation tasks.
}
</code>
</details>

Response Body:

<details><summary>ConversationalTaskResult</summary>Schema for <c>ConversationalTaskResult</c>:
<code>{
  result: {
    query: string, # Required. The conversation utterance given by the caller.
    detectedLanguage: string, # Optional. The system detected language for the query in BCP 47 language representation..
    prediction: {
      projectKind: &quot;Conversation&quot; | &quot;Orchestration&quot; | &quot;CustomConversationSummarization&quot;, # Required. The type of the project.
      topIntent: string, # Optional. The intent with the highest score.
    }, # Required. The prediction result of a conversation project.
  }, # Required. Represents a conversation analysis response.
  kind: ConversationResult, # Required. Enumeration of supported conversational task results
}
</code>
</details>

</remarks>
    </member>
    <member name="GetAnalyzeConversationJobStatusAsync(Guid,Boolean,RequestContext)">
<example>
This sample shows how to call GetAnalyzeConversationJobStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

Response response = await client.GetAnalyzeConversationJobStatusAsync(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetAnalyzeConversationJobStatusAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

Response response = await client.GetAnalyzeConversationJobStatusAsync(Guid.NewGuid(), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Get the status of an analysis job. A job may consist of one or more tasks. Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task.

Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2022-10-01-preview/conversation-analysis-runtime/job-status

Response Body:

Schema for <c>AnalyzeConversationJobState</c>:
<code>{
  displayName: string, # Optional.
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. The status of the task at the mentioned last update time.
  errors: [
    {
      code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot; | &quot;Timeout&quot; | &quot;QuotaExceeded&quot; | &quot;Conflict&quot; | &quot;Warning&quot;, # Required. One of a server-defined set of error codes.
      message: string, # Required. A human-readable representation of the error.
      target: string, # Optional. The target of the error.
      details: [Error], # Optional. An array of details about specific errors that led to this reported error.
      innererror: {
        code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. One of a server-defined set of error codes.
        message: string, # Required. Error message.
        details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        target: string, # Optional. Error target.
        innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
      }, # Optional. An object containing more specific information than the current object about the error.
    }
  ], # Optional.
  nextLink: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetAnalyzeConversationJobStatus(Guid,Boolean,RequestContext)">
<example>
This sample shows how to call GetAnalyzeConversationJobStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

Response response = client.GetAnalyzeConversationJobStatus(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetAnalyzeConversationJobStatus with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

Response response = client.GetAnalyzeConversationJobStatus(Guid.NewGuid(), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Get the status of an analysis job. A job may consist of one or more tasks. Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task.

Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2022-10-01-preview/conversation-analysis-runtime/job-status

Response Body:

Schema for <c>AnalyzeConversationJobState</c>:
<code>{
  displayName: string, # Optional.
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. The status of the task at the mentioned last update time.
  errors: [
    {
      code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot; | &quot;Timeout&quot; | &quot;QuotaExceeded&quot; | &quot;Conflict&quot; | &quot;Warning&quot;, # Required. One of a server-defined set of error codes.
      message: string, # Required. A human-readable representation of the error.
      target: string, # Optional. The target of the error.
      details: [Error], # Optional. An array of details about specific errors that led to this reported error.
      innererror: {
        code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. One of a server-defined set of error codes.
        message: string, # Required. Error message.
        details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        target: string, # Optional. Error target.
        innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
      }, # Optional. An object containing more specific information than the current object about the error.
    }
  ], # Optional.
  nextLink: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="StartAnalyzeConversationAsync(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call StartAnalyzeConversationAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversations = new[] {
            new {
                conversationItems = new[] {
                    new {
                        text = "<text>",
                        id = "<id>",
                        participantId = "<participantId>",
                    }
                },
                id = "<id>",
                language = "<language>",
                modality = "text",
            }
        },
    },
    tasks = new[] {
        new {
            kind = "ConversationalPIITask",
        }
    },
};

var operation = await client.StartAnalyzeConversationAsync(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call StartAnalyzeConversationAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    displayName = "<displayName>",
    analysisInput = new {
        conversations = new[] {
            new {
                conversationItems = new[] {
                    new {
                        text = "<text>",
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                        role = "agent",
                    }
                },
                id = "<id>",
                language = "<language>",
                modality = "text",
                domain = "finance",
            }
        },
    },
    tasks = new[] {
        new {
            parameters = new {
                piiCategories = new[] {
                    "Address"
                },
                includeAudioRedaction = true,
                redactionSource = "lexical",
                modelVersion = "<modelVersion>",
                loggingOptOut = true,
            },
            kind = "ConversationalPIITask",
            taskName = "<taskName>",
        }
    },
};

var operation = await client.StartAnalyzeConversationAsync(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.

Below is the JSON schema for the request and response payloads.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2022-10-01-preview/conversation-analysis-runtime/submit-job

Request Body:

Schema for <c>AnalyzeConversationJobsInput</c>:
<code>{
  displayName: string, # Optional. Optional display name for the analysis job.
  analysisInput: {
    conversations: [
      {
        id: string, # Required. Unique identifier for the conversation.
        language: string, # Required. The language of the conversation item in BCP-47 format.
        modality: &quot;transcript&quot; | &quot;text&quot;, # Required. Enumeration of supported conversational modalities.
        domain: &quot;finance&quot; | &quot;healthcare&quot; | &quot;generic&quot;, # Optional. Enumeration of supported conversational domains.
      }
    ], # Required.
  }, # Required.
  tasks: [
    {
      kind: &quot;ConversationalPIITask&quot; | &quot;ConversationalSummarizationTask&quot; | &quot;ConversationalSentimentTask&quot;, # Required. Enumeration of supported analysis tasks on a collection of conversation.
      taskName: string, # Optional.
    }
  ], # Required. The set of tasks to execute on the input conversation.
}
</code>

Response Body:

Schema for <c>AnalyzeConversationJobState</c>:
<code>{
  displayName: string, # Optional.
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. The status of the task at the mentioned last update time.
  errors: [
    {
      code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot; | &quot;Timeout&quot; | &quot;QuotaExceeded&quot; | &quot;Conflict&quot; | &quot;Warning&quot;, # Required. One of a server-defined set of error codes.
      message: string, # Required. A human-readable representation of the error.
      target: string, # Optional. The target of the error.
      details: [Error], # Optional. An array of details about specific errors that led to this reported error.
      innererror: {
        code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. One of a server-defined set of error codes.
        message: string, # Required. Error message.
        details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        target: string, # Optional. Error target.
        innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
      }, # Optional. An object containing more specific information than the current object about the error.
    }
  ], # Optional.
  nextLink: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="StartAnalyzeConversation(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call StartAnalyzeConversation with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    analysisInput = new {
        conversations = new[] {
            new {
                conversationItems = new[] {
                    new {
                        text = "<text>",
                        id = "<id>",
                        participantId = "<participantId>",
                    }
                },
                id = "<id>",
                language = "<language>",
                modality = "text",
            }
        },
    },
    tasks = new[] {
        new {
            kind = "ConversationalPIITask",
        }
    },
};

var operation = client.StartAnalyzeConversation(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call StartAnalyzeConversation with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var data = new {
    displayName = "<displayName>",
    analysisInput = new {
        conversations = new[] {
            new {
                conversationItems = new[] {
                    new {
                        text = "<text>",
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                        role = "agent",
                    }
                },
                id = "<id>",
                language = "<language>",
                modality = "text",
                domain = "finance",
            }
        },
    },
    tasks = new[] {
        new {
            parameters = new {
                piiCategories = new[] {
                    "Address"
                },
                includeAudioRedaction = true,
                redactionSource = "lexical",
                modelVersion = "<modelVersion>",
                loggingOptOut = true,
            },
            kind = "ConversationalPIITask",
            taskName = "<taskName>",
        }
    },
};

var operation = client.StartAnalyzeConversation(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.

Below is the JSON schema for the request and response payloads.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/language/2022-10-01-preview/conversation-analysis-runtime/submit-job

Request Body:

Schema for <c>AnalyzeConversationJobsInput</c>:
<code>{
  displayName: string, # Optional. Optional display name for the analysis job.
  analysisInput: {
    conversations: [
      {
        id: string, # Required. Unique identifier for the conversation.
        language: string, # Required. The language of the conversation item in BCP-47 format.
        modality: &quot;transcript&quot; | &quot;text&quot;, # Required. Enumeration of supported conversational modalities.
        domain: &quot;finance&quot; | &quot;healthcare&quot; | &quot;generic&quot;, # Optional. Enumeration of supported conversational domains.
      }
    ], # Required.
  }, # Required.
  tasks: [
    {
      kind: &quot;ConversationalPIITask&quot; | &quot;ConversationalSummarizationTask&quot; | &quot;ConversationalSentimentTask&quot;, # Required. Enumeration of supported analysis tasks on a collection of conversation.
      taskName: string, # Optional.
    }
  ], # Required. The set of tasks to execute on the input conversation.
}
</code>

Response Body:

Schema for <c>AnalyzeConversationJobState</c>:
<code>{
  displayName: string, # Optional.
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. The status of the task at the mentioned last update time.
  errors: [
    {
      code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot; | &quot;Timeout&quot; | &quot;QuotaExceeded&quot; | &quot;Conflict&quot; | &quot;Warning&quot;, # Required. One of a server-defined set of error codes.
      message: string, # Required. A human-readable representation of the error.
      target: string, # Optional. The target of the error.
      details: [Error], # Optional. An array of details about specific errors that led to this reported error.
      innererror: {
        code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. One of a server-defined set of error codes.
        message: string, # Required. Error message.
        details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        target: string, # Optional. Error target.
        innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
      }, # Optional. An object containing more specific information than the current object about the error.
    }
  ], # Optional.
  nextLink: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="CancelAnalyzeConversationJobAsync(WaitUntil,Guid,RequestContext)">
<example>
This sample shows how to call CancelAnalyzeConversationJobAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var operation = await client.CancelAnalyzeConversationJobAsync(WaitUntil.Started, Guid.NewGuid());

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Cancel a long-running Text Analysis conversations job.
</remarks>
    </member>
    <member name="CancelAnalyzeConversationJob(WaitUntil,Guid,RequestContext)">
<example>
This sample shows how to call CancelAnalyzeConversationJob with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ConversationAnalysisClient(endpoint, credential);

var operation = client.CancelAnalyzeConversationJob(WaitUntil.Started, Guid.NewGuid());

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Cancel a long-running Text Analysis conversations job.
</remarks>
    </member>
  </members>
</doc>