<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="AnalyzeConversationsAsync(AnalyzeConversationTask,CancellationToken)">
      <example>
This sample shows how to call AnalyzeConversationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

AnalyzeConversationTask analyzeConversationTask = new ConversationalTask(new ConversationAnalysisInput(new TextConversationItem("<id>", "<participantId>", "<text>")), new ConversationTaskContent("<projectName>", "<deploymentName>"));
Response<AnalyzeConversationTaskResult> response = await client.AnalyzeConversationsAsync(analyzeConversationTask);
]]></code>
This sample shows how to call AnalyzeConversationsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

AnalyzeConversationTask analyzeConversationTask = new ConversationalTask(new ConversationAnalysisInput(new TextConversationItem("<id>", "<participantId>", "<text>")
{
    Language = "<language>",
    Modality = InputModality.Transcript,
    Role = ParticipantRole.Customer,
}), new ConversationTaskContent("<projectName>", "<deploymentName>")
{
    Verbose = true,
    IsLoggingEnabled = true,
    StringIndexType = StringIndexType.TextElementsV8,
    DirectTarget = "<directTarget>",
    TargetProjectParameters =
    {
        ["key"] = new LuisConfig
        {
            Query = "<query>",
            CallingOptions = new LuisCallingConfig
            {
                Verbose = true,
                Log = true,
                ShowAllIntents = true,
                TimezoneOffset = 1234,
                SpellCheck = true,
                BingSpellCheckSubscriptionKey = "<bing-spell-check-subscription-key>",
            },
            ApiVersion = "<apiVersion>",
        }
    },
});
Response<AnalyzeConversationTaskResult> response = await client.AnalyzeConversationsAsync(analyzeConversationTask);
]]></code></example>
    </member>
    <member name="AnalyzeConversations(AnalyzeConversationTask,CancellationToken)">
      <example>
This sample shows how to call AnalyzeConversations.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

AnalyzeConversationTask analyzeConversationTask = new ConversationalTask(new ConversationAnalysisInput(new TextConversationItem("<id>", "<participantId>", "<text>")), new ConversationTaskContent("<projectName>", "<deploymentName>"));
Response<AnalyzeConversationTaskResult> response = client.AnalyzeConversations(analyzeConversationTask);
]]></code>
This sample shows how to call AnalyzeConversations with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

AnalyzeConversationTask analyzeConversationTask = new ConversationalTask(new ConversationAnalysisInput(new TextConversationItem("<id>", "<participantId>", "<text>")
{
    Language = "<language>",
    Modality = InputModality.Transcript,
    Role = ParticipantRole.Customer,
}), new ConversationTaskContent("<projectName>", "<deploymentName>")
{
    Verbose = true,
    IsLoggingEnabled = true,
    StringIndexType = StringIndexType.TextElementsV8,
    DirectTarget = "<directTarget>",
    TargetProjectParameters =
    {
        ["key"] = new LuisConfig
        {
            Query = "<query>",
            CallingOptions = new LuisCallingConfig
            {
                Verbose = true,
                Log = true,
                ShowAllIntents = true,
                TimezoneOffset = 1234,
                SpellCheck = true,
                BingSpellCheckSubscriptionKey = "<bing-spell-check-subscription-key>",
            },
            ApiVersion = "<apiVersion>",
        }
    },
});
Response<AnalyzeConversationTaskResult> response = client.AnalyzeConversations(analyzeConversationTask);
]]></code></example>
    </member>
    <member name="AnalyzeConversationsAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    kind = "Conversation",
    analysisInput = new
    {
        conversationItem = new
        {
            id = "<id>",
            participantId = "<participantId>",
            text = "<text>",
        },
    },
    parameters = new
    {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
    },
});
Response response = await client.AnalyzeConversationsAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeConversationsAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    kind = "Conversation",
    analysisInput = new
    {
        conversationItem = new
        {
            id = "<id>",
            participantId = "<participantId>",
            language = "<language>",
            modality = "transcript",
            role = "customer",
            text = "<text>",
        },
    },
    parameters = new
    {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
        verbose = true,
        isLoggingEnabled = true,
        stringIndexType = "TextElements_v8",
        directTarget = "<directTarget>",
        targetProjectParameters = new
        {
            key = new
            {
                targetProjectKind = "Luis",
                query = "<query>",
                callingOptions = new Dictionary<string, object>
                {
                    ["verbose"] = true,
                    ["log"] = true,
                    ["show-all-intents"] = true,
                    ["timezoneOffset"] = 1234,
                    ["spellCheck"] = true,
                    ["bing-spell-check-subscription-key"] = "<bing-spell-check-subscription-key>"
                },
                apiVersion = "<apiVersion>",
            },
        },
    },
});
Response response = await client.AnalyzeConversationsAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeConversations(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    kind = "Conversation",
    analysisInput = new
    {
        conversationItem = new
        {
            id = "<id>",
            participantId = "<participantId>",
            text = "<text>",
        },
    },
    parameters = new
    {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
    },
});
Response response = client.AnalyzeConversations(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeConversations with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    kind = "Conversation",
    analysisInput = new
    {
        conversationItem = new
        {
            id = "<id>",
            participantId = "<participantId>",
            language = "<language>",
            modality = "transcript",
            role = "customer",
            text = "<text>",
        },
    },
    parameters = new
    {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
        verbose = true,
        isLoggingEnabled = true,
        stringIndexType = "TextElements_v8",
        directTarget = "<directTarget>",
        targetProjectParameters = new
        {
            key = new
            {
                targetProjectKind = "Luis",
                query = "<query>",
                callingOptions = new Dictionary<string, object>
                {
                    ["verbose"] = true,
                    ["log"] = true,
                    ["show-all-intents"] = true,
                    ["timezoneOffset"] = 1234,
                    ["spellCheck"] = true,
                    ["bing-spell-check-subscription-key"] = "<bing-spell-check-subscription-key>"
                },
                apiVersion = "<apiVersion>",
            },
        },
    },
});
Response response = client.AnalyzeConversations(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeConversationsJobStatusAsync(Guid,bool?,CancellationToken)">
      <example>
This sample shows how to call AnalyzeConversationsJobStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Response<AnalyzeConversationJobState> response = await client.AnalyzeConversationsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeConversationsJobStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Response<AnalyzeConversationJobState> response = await client.AnalyzeConversationsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true);
]]></code></example>
    </member>
    <member name="AnalyzeConversationsJobStatus(Guid,bool?,CancellationToken)">
      <example>
This sample shows how to call AnalyzeConversationsJobStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Response<AnalyzeConversationJobState> response = client.AnalyzeConversationsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeConversationsJobStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Response<AnalyzeConversationJobState> response = client.AnalyzeConversationsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true);
]]></code></example>
    </member>
    <member name="AnalyzeConversationsJobStatusAsync(Guid,bool?,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationsJobStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Response response = await client.AnalyzeConversationsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code>
This sample shows how to call AnalyzeConversationsJobStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Response response = await client.AnalyzeConversationsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeConversationsJobStatus(Guid,bool?,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationsJobStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Response response = client.AnalyzeConversationsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code>
This sample shows how to call AnalyzeConversationsJobStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Response response = client.AnalyzeConversationsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeConversationsSubmitJobAsync(WaitUntil,AnalyzeConversationJobsInput,CancellationToken)">
      <example>
This sample shows how to call AnalyzeConversationsSubmitJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

AnalyzeConversationJobsInput analyzeConversationJobsInput = new AnalyzeConversationJobsInput(new MultiLanguageConversationAnalysisInput(new ConversationInput[]
{
    new TextConversation("<id>", "<language>", new TextConversationItem[]
    {
        new TextConversationItem("<id>", "<participantId>", "<text>")
    })
}), new AnalyzeConversationJobTask[]
{
    new AnalyzeConversationPiiTask()
});
Operation operation = await client.AnalyzeConversationsSubmitJobAsync(WaitUntil.Completed, analyzeConversationJobsInput);
]]></code>
This sample shows how to call AnalyzeConversationsSubmitJobAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

AnalyzeConversationJobsInput analyzeConversationJobsInput = new AnalyzeConversationJobsInput(new MultiLanguageConversationAnalysisInput(new ConversationInput[]
{
    new TextConversation("<id>", "<language>", new TextConversationItem[]
    {
        new TextConversationItem("<id>", "<participantId>", "<text>")
        {
            Language = "<language>",
            Modality = InputModality.Transcript,
            Role = ParticipantRole.Customer,
        }
    })
    {
        Domain = ConversationDomain.Finance,
    }
}), new AnalyzeConversationJobTask[]
{
    new AnalyzeConversationPiiTask
    {
        Parameters = new ConversationPiiTaskContent
        {
            LoggingOptOut = true,
            ModelVersion = "<modelVersion>",
            PiiCategories = {ConversationPiiCategories.Address},
            RedactAudioTiming = true,
            RedactionSource = TranscriptContentType.Lexical,
            RedactionCharacter = RedactionCharacter.ExclamationPoint,
            ExcludePiiCategories = {ConversationPiiCategoryExclusions.Address},
        },
        TaskName = "<taskName>",
    }
})
{
    DisplayName = "<displayName>",
};
Operation operation = await client.AnalyzeConversationsSubmitJobAsync(WaitUntil.Completed, analyzeConversationJobsInput);
]]></code></example>
    </member>
    <member name="AnalyzeConversationsSubmitJob(WaitUntil,AnalyzeConversationJobsInput,CancellationToken)">
      <example>
This sample shows how to call AnalyzeConversationsSubmitJob.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

AnalyzeConversationJobsInput analyzeConversationJobsInput = new AnalyzeConversationJobsInput(new MultiLanguageConversationAnalysisInput(new ConversationInput[]
{
    new TextConversation("<id>", "<language>", new TextConversationItem[]
    {
        new TextConversationItem("<id>", "<participantId>", "<text>")
    })
}), new AnalyzeConversationJobTask[]
{
    new AnalyzeConversationPiiTask()
});
Operation operation = client.AnalyzeConversationsSubmitJob(WaitUntil.Completed, analyzeConversationJobsInput);
]]></code>
This sample shows how to call AnalyzeConversationsSubmitJob with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

AnalyzeConversationJobsInput analyzeConversationJobsInput = new AnalyzeConversationJobsInput(new MultiLanguageConversationAnalysisInput(new ConversationInput[]
{
    new TextConversation("<id>", "<language>", new TextConversationItem[]
    {
        new TextConversationItem("<id>", "<participantId>", "<text>")
        {
            Language = "<language>",
            Modality = InputModality.Transcript,
            Role = ParticipantRole.Customer,
        }
    })
    {
        Domain = ConversationDomain.Finance,
    }
}), new AnalyzeConversationJobTask[]
{
    new AnalyzeConversationPiiTask
    {
        Parameters = new ConversationPiiTaskContent
        {
            LoggingOptOut = true,
            ModelVersion = "<modelVersion>",
            PiiCategories = {ConversationPiiCategories.Address},
            RedactAudioTiming = true,
            RedactionSource = TranscriptContentType.Lexical,
            RedactionCharacter = RedactionCharacter.ExclamationPoint,
            ExcludePiiCategories = {ConversationPiiCategoryExclusions.Address},
        },
        TaskName = "<taskName>",
    }
})
{
    DisplayName = "<displayName>",
};
Operation operation = client.AnalyzeConversationsSubmitJob(WaitUntil.Completed, analyzeConversationJobsInput);
]]></code></example>
    </member>
    <member name="AnalyzeConversationsSubmitJobAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationsSubmitJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new
    {
        conversations = new object[]
        {
            new
            {
                modality = "text",
                conversationItems = new object[]
                {
                    new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        text = "<text>",
                    }
                },
                id = "<id>",
                language = "<language>",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "ConversationalPIITask",
        }
    },
});
Operation operation = await client.AnalyzeConversationsSubmitJobAsync(WaitUntil.Completed, content);
]]></code>
This sample shows how to call AnalyzeConversationsSubmitJobAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "<displayName>",
    analysisInput = new
    {
        conversations = new object[]
        {
            new
            {
                modality = "text",
                conversationItems = new object[]
                {
                    new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                        role = "customer",
                        text = "<text>",
                    }
                },
                id = "<id>",
                language = "<language>",
                domain = "finance",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "ConversationalPIITask",
            parameters = new
            {
                loggingOptOut = true,
                modelVersion = "<modelVersion>",
                piiCategories = new object[]
                {
                    "Address"
                },
                redactAudioTiming = true,
                redactionSource = "lexical",
                redactionCharacter = "!",
                excludePiiCategories = new object[]
                {
                    "Address"
                },
            },
            taskName = "<taskName>",
        }
    },
});
Operation operation = await client.AnalyzeConversationsSubmitJobAsync(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="AnalyzeConversationsSubmitJob(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationsSubmitJob.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new
    {
        conversations = new object[]
        {
            new
            {
                modality = "text",
                conversationItems = new object[]
                {
                    new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        text = "<text>",
                    }
                },
                id = "<id>",
                language = "<language>",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "ConversationalPIITask",
        }
    },
});
Operation operation = client.AnalyzeConversationsSubmitJob(WaitUntil.Completed, content);
]]></code>
This sample shows how to call AnalyzeConversationsSubmitJob with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "<displayName>",
    analysisInput = new
    {
        conversations = new object[]
        {
            new
            {
                modality = "text",
                conversationItems = new object[]
                {
                    new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                        role = "customer",
                        text = "<text>",
                    }
                },
                id = "<id>",
                language = "<language>",
                domain = "finance",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "ConversationalPIITask",
            parameters = new
            {
                loggingOptOut = true,
                modelVersion = "<modelVersion>",
                piiCategories = new object[]
                {
                    "Address"
                },
                redactAudioTiming = true,
                redactionSource = "lexical",
                redactionCharacter = "!",
                excludePiiCategories = new object[]
                {
                    "Address"
                },
            },
            taskName = "<taskName>",
        }
    },
});
Operation operation = client.AnalyzeConversationsSubmitJob(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="AnalyzeConversationsCancelJobAsync(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationsCancelJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Operation operation = await client.AnalyzeConversationsCancelJobAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeConversationsCancelJobAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Operation operation = await client.AnalyzeConversationsCancelJobAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="AnalyzeConversationsCancelJob(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationsCancelJob.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Operation operation = client.AnalyzeConversationsCancelJob(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeConversationsCancelJob with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(endpoint, credential);

Operation operation = client.AnalyzeConversationsCancelJob(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
  </members>
</doc>