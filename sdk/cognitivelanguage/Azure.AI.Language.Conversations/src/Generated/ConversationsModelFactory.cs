// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.Conversations.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class ConversationsModelFactory
    {
        /// <summary> Initializes a new instance of AnalyzeConversationResult. </summary>
        /// <param name="query"> The conversation utterance given by the caller. </param>
        /// <param name="detectedLanguage"> The system detected language for the query. </param>
        /// <param name="prediction"> The prediction result of a conversation project. </param>
        /// <returns> A new <see cref="Models.AnalyzeConversationResult"/> instance for mocking. </returns>
        public static AnalyzeConversationResult AnalyzeConversationResult(string query = null, string detectedLanguage = null, BasePrediction prediction = null)
        {
            return new AnalyzeConversationResult(query, detectedLanguage, prediction);
        }

        /// <summary> Initializes a new instance of BasePrediction. </summary>
        /// <param name="projectKind"> The type of the project. </param>
        /// <param name="topIntent"> The intent with the highest score. </param>
        /// <returns> A new <see cref="Models.BasePrediction"/> instance for mocking. </returns>
        public static BasePrediction BasePrediction(ProjectKind projectKind = default, string topIntent = null)
        {
            return new BasePrediction(projectKind, topIntent);
        }

        /// <summary> Initializes a new instance of WorkflowPrediction. </summary>
        /// <param name="projectKind"> The type of the project. </param>
        /// <param name="topIntent"> The intent with the highest score. </param>
        /// <param name="intents"> A dictionary that contains all intents. A key is an intent name and a value is its confidence score and target type. The top intent&apos;s value also contains the actual response from the target project. </param>
        /// <returns> A new <see cref="Models.WorkflowPrediction"/> instance for mocking. </returns>
        public static WorkflowPrediction WorkflowPrediction(ProjectKind projectKind = default, string topIntent = null, IReadOnlyDictionary<string, TargetIntentResult> intents = null)
        {
            intents ??= new Dictionary<string, TargetIntentResult>();

            return new WorkflowPrediction(projectKind, topIntent, intents);
        }

        /// <summary> Initializes a new instance of TargetIntentResult. </summary>
        /// <param name="targetKind"> This discriminator property specifies the type of the target project that returns the response. &apos;luis&apos; means the type is LUIS Generally Available. &apos;luis_deepstack&apos; means LUIS vNext. &apos;question_answering&apos; means Question Answering. </param>
        /// <param name="apiVersion"> The API version used to call a target service. </param>
        /// <param name="confidenceScore"> The prediction score and it ranges from 0.0 to 1.0. </param>
        /// <returns> A new <see cref="Models.TargetIntentResult"/> instance for mocking. </returns>
        public static TargetIntentResult TargetIntentResult(TargetKind targetKind = default, string apiVersion = null, double confidenceScore = default)
        {
            return new TargetIntentResult(targetKind, apiVersion, confidenceScore);
        }

        /// <summary> Initializes a new instance of DSTargetIntentResult. </summary>
        /// <param name="targetKind"> This discriminator property specifies the type of the target project that returns the response. &apos;luis&apos; means the type is LUIS Generally Available. &apos;luis_deepstack&apos; means LUIS vNext. &apos;question_answering&apos; means Question Answering. </param>
        /// <param name="apiVersion"> The API version used to call a target service. </param>
        /// <param name="confidenceScore"> The prediction score and it ranges from 0.0 to 1.0. </param>
        /// <param name="result"> The actual response from a LUIS Deepstack application. </param>
        /// <returns> A new <see cref="Models.DSTargetIntentResult"/> instance for mocking. </returns>
        public static DSTargetIntentResult DSTargetIntentResult(TargetKind targetKind = default, string apiVersion = null, double confidenceScore = default, DeepstackResult result = null)
        {
            return new DSTargetIntentResult(targetKind, apiVersion, confidenceScore, result);
        }

        /// <summary> Initializes a new instance of DeepstackResult. </summary>
        /// <param name="query"> The same query given in request. </param>
        /// <param name="detectedLanguage"> The detected language from the query. </param>
        /// <param name="prediction"> The predicted result for the query. </param>
        /// <returns> A new <see cref="Models.DeepstackResult"/> instance for mocking. </returns>
        public static DeepstackResult DeepstackResult(string query = null, string detectedLanguage = null, DeepstackPrediction prediction = null)
        {
            return new DeepstackResult(query, detectedLanguage, prediction);
        }

        /// <summary> Initializes a new instance of DeepstackPrediction. </summary>
        /// <param name="projectKind"> The type of the project. </param>
        /// <param name="topIntent"> The intent with the highest score. </param>
        /// <param name="intents"> The intent classification results. </param>
        /// <param name="entities"> The entity extraction results. </param>
        /// <returns> A new <see cref="Models.DeepstackPrediction"/> instance for mocking. </returns>
        public static DeepstackPrediction DeepstackPrediction(ProjectKind projectKind = default, string topIntent = null, IEnumerable<DeepstackIntent> intents = null, IEnumerable<DeepstackEntity> entities = null)
        {
            intents ??= new List<DeepstackIntent>();
            entities ??= new List<DeepstackEntity>();

            return new DeepstackPrediction(projectKind, topIntent, intents?.ToList(), entities?.ToList());
        }

        /// <summary> Initializes a new instance of DeepstackIntent. </summary>
        /// <param name="category"> A predicted class. </param>
        /// <param name="confidenceScore"> The confidence score of the class from 0.0 to 1.0. </param>
        /// <returns> A new <see cref="Models.DeepstackIntent"/> instance for mocking. </returns>
        public static DeepstackIntent DeepstackIntent(string category = null, float confidenceScore = default)
        {
            return new DeepstackIntent(category, confidenceScore);
        }

        /// <summary> Initializes a new instance of DeepstackEntity. </summary>
        /// <param name="category"> The entity category. </param>
        /// <param name="text"> The predicted entity text. </param>
        /// <param name="offset"> The starting index of this entity in the query. </param>
        /// <param name="length"> The length of the text. </param>
        /// <param name="confidenceScore"> The entity confidence score. </param>
        /// <param name="resolution"> A array with extra information about the entity. </param>
        /// <returns> A new <see cref="Models.DeepstackEntity"/> instance for mocking. </returns>
        public static DeepstackEntity DeepstackEntity(string category = null, string text = null, int offset = default, int length = default, float confidenceScore = default, IEnumerable<DeepStackEntityResolution> resolution = null)
        {
            resolution ??= new List<DeepStackEntityResolution>();

            return new DeepstackEntity(category, text, offset, length, confidenceScore, resolution?.ToList());
        }

        /// <summary> Initializes a new instance of DeepStackEntityResolution. </summary>
        /// <param name="resolutionKind"> The type of an entity resolution. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DeepStackEntityResolution"/> instance for mocking. </returns>
        public static DeepStackEntityResolution DeepStackEntityResolution(ResolutionKind resolutionKind = default, IReadOnlyDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DeepStackEntityResolution(resolutionKind, additionalProperties);
        }

        /// <summary> Initializes a new instance of DictionaryNormalizedValueResolution. </summary>
        /// <param name="resolutionKind"> The type of an entity resolution. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="values"> A list of normalized entities. </param>
        /// <returns> A new <see cref="Models.DictionaryNormalizedValueResolution"/> instance for mocking. </returns>
        public static DictionaryNormalizedValueResolution DictionaryNormalizedValueResolution(ResolutionKind resolutionKind = default, IReadOnlyDictionary<string, object> additionalProperties = null, IEnumerable<string> values = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            values ??= new List<string>();

            return new DictionaryNormalizedValueResolution(resolutionKind, additionalProperties, values?.ToList());
        }

        /// <summary> Initializes a new instance of LuisTargetIntentResult. </summary>
        /// <param name="targetKind"> This discriminator property specifies the type of the target project that returns the response. &apos;luis&apos; means the type is LUIS Generally Available. &apos;luis_deepstack&apos; means LUIS vNext. &apos;question_answering&apos; means Question Answering. </param>
        /// <param name="apiVersion"> The API version used to call a target service. </param>
        /// <param name="confidenceScore"> The prediction score and it ranges from 0.0 to 1.0. </param>
        /// <param name="result"> The actual response from a LUIS Generally Available application. </param>
        /// <returns> A new <see cref="Models.LuisTargetIntentResult"/> instance for mocking. </returns>
        public static LuisTargetIntentResult LuisTargetIntentResult(TargetKind targetKind = default, string apiVersion = null, double confidenceScore = default, object result = null)
        {
            return new LuisTargetIntentResult(targetKind, apiVersion, confidenceScore, result);
        }

        /// <summary> Initializes a new instance of QuestionAnsweringTargetIntentResult. </summary>
        /// <param name="targetKind"> This discriminator property specifies the type of the target project that returns the response. &apos;luis&apos; means the type is LUIS Generally Available. &apos;luis_deepstack&apos; means LUIS vNext. &apos;question_answering&apos; means Question Answering. </param>
        /// <param name="apiVersion"> The API version used to call a target service. </param>
        /// <param name="confidenceScore"> The prediction score and it ranges from 0.0 to 1.0. </param>
        /// <param name="result"> The generated answer by a Question Answering KB. </param>
        /// <returns> A new <see cref="Models.QuestionAnsweringTargetIntentResult"/> instance for mocking. </returns>
        public static QuestionAnsweringTargetIntentResult QuestionAnsweringTargetIntentResult(TargetKind targetKind = default, string apiVersion = null, double confidenceScore = default, object result = null)
        {
            return new QuestionAnsweringTargetIntentResult(targetKind, apiVersion, confidenceScore, result);
        }
    }
}
