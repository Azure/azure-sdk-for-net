// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Language.Conversations.Authoring.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Authoring.Samples
{
    public partial class Samples_ProjectFilesAuthoringConversationAnalysis
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringExportProjectJobState_GetExportStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetExportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringExportProjectJobState_GetExportStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringExportProjectJobState_GetExportStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ExportProjectJobState> response = client.GetExportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringExportProjectJobState_GetExportStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ExportProjectJobState> response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringExportProjectJobState_GetExportStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetExportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("resultUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringExportProjectJobState_GetExportStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("resultUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringExportProjectJobState_GetExportStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ExportProjectJobState> response = client.GetExportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringExportProjectJobState_GetExportStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ExportProjectJobState> response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringImportProjectJobState_GetImportStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetImportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringImportProjectJobState_GetImportStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringImportProjectJobState_GetImportStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ImportProjectJobState> response = client.GetImportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringImportProjectJobState_GetImportStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ImportProjectJobState> response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringImportProjectJobState_GetImportStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetImportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringImportProjectJobState_GetImportStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringImportProjectJobState_GetImportStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ImportProjectJobState> response = client.GetImportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringImportProjectJobState_GetImportStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ImportProjectJobState> response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectFilesAuthoringConversationAnalysis_Export_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectFilesAuthoringConversationAnalysis_Export_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectFilesAuthoringConversationAnalysis_Export_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectFilesAuthoringConversationAnalysis_Export_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectFilesAuthoringConversationAnalysis_Export_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit", exportedProjectFormat: "Conversation", assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectFilesAuthoringConversationAnalysis_Export_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit", exportedProjectFormat: "Conversation", assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectFilesAuthoringConversationAnalysis_Export_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit, exportedProjectFormat: AnalyzeConversationAuthoringExportedProjectFormat.Conversation, assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectFilesAuthoringConversationAnalysis_Export_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit, exportedProjectFormat: AnalyzeConversationAuthoringExportedProjectFormat.Conversation, assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectFilesAuthoringConversationAnalysis_Import_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectFileVersion = "<projectFileVersion>",
                stringIndexType = "Utf16CodeUnit",
                metadata = new
                {
                    projectKind = "Conversation",
                    projectName = "<projectName>",
                    language = "<language>",
                },
            });
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectFilesAuthoringConversationAnalysis_Import_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectFileVersion = "<projectFileVersion>",
                stringIndexType = "Utf16CodeUnit",
                metadata = new
                {
                    projectKind = "Conversation",
                    projectName = "<projectName>",
                    language = "<language>",
                },
            });
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectFilesAuthoringConversationAnalysis_Import_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectDetails(AnalyzeConversationAuthoringProjectKind.Conversation, "<projectName>", "<language>"));
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectFilesAuthoringConversationAnalysis_Import_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectDetails(AnalyzeConversationAuthoringProjectKind.Conversation, "<projectName>", "<language>"));
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectFilesAuthoringConversationAnalysis_Import_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectFileVersion = "<projectFileVersion>",
                stringIndexType = "Utf16CodeUnit",
                metadata = new
                {
                    projectKind = "Conversation",
                    settings = new
                    {
                        confidenceThreshold = 123.45F,
                    },
                    storageInputContainerName = "<storageInputContainerName>",
                    projectName = "<projectName>",
                    multilingual = true,
                    description = "<description>",
                    language = "<language>",
                },
                assets = new
                {
                    intents = new object[]
            {
new
{
category = "<category>",
}
            },
                    entities = new object[]
            {
new
{
category = "<category>",
compositionMode = "returnLongestOverlap",
entities = new
{
sublists = new object[]
{
new
{
listKey = "<listKey>",
synonyms = new object[]
{
new
{
language = "<language>",
values = new object[]
{
"<values>"
},
}
},
}
},
},
prebuilts = new object[]
{
new
{
category = "<category>",
}
},
regex = new
{
expressions = new object[]
{
new
{
regexKey = "<regexKey>",
language = "<language>",
regexPattern = "<regexPattern>",
}
},
},
requiredComponents = new object[]
{
"<requiredComponents>"
},
}
            },
                    utterances = new object[]
            {
new
{
entities = new object[]
{
new
{
category = "<category>",
offset = 1234,
length = 1234,
}
},
text = "<text>",
language = "<language>",
intent = "<intent>",
dataset = "<dataset>",
}
            },
                    projectKind = "Conversation",
                },
            });
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content, exportedProjectFormat: "Conversation");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectFilesAuthoringConversationAnalysis_Import_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectFileVersion = "<projectFileVersion>",
                stringIndexType = "Utf16CodeUnit",
                metadata = new
                {
                    projectKind = "Conversation",
                    settings = new
                    {
                        confidenceThreshold = 123.45F,
                    },
                    storageInputContainerName = "<storageInputContainerName>",
                    projectName = "<projectName>",
                    multilingual = true,
                    description = "<description>",
                    language = "<language>",
                },
                assets = new
                {
                    intents = new object[]
            {
new
{
category = "<category>",
}
            },
                    entities = new object[]
            {
new
{
category = "<category>",
compositionMode = "returnLongestOverlap",
entities = new
{
sublists = new object[]
{
new
{
listKey = "<listKey>",
synonyms = new object[]
{
new
{
language = "<language>",
values = new object[]
{
"<values>"
},
}
},
}
},
},
prebuilts = new object[]
{
new
{
category = "<category>",
}
},
regex = new
{
expressions = new object[]
{
new
{
regexKey = "<regexKey>",
language = "<language>",
regexPattern = "<regexPattern>",
}
},
},
requiredComponents = new object[]
{
"<requiredComponents>"
},
}
            },
                    utterances = new object[]
            {
new
{
entities = new object[]
{
new
{
category = "<category>",
offset = 1234,
length = 1234,
}
},
text = "<text>",
language = "<language>",
intent = "<intent>",
dataset = "<dataset>",
}
            },
                    projectKind = "Conversation",
                },
            });
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content, exportedProjectFormat: "Conversation");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectFilesAuthoringConversationAnalysis_Import_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectDetails(AnalyzeConversationAuthoringProjectKind.Conversation, "<projectName>", "<language>")
            {
                Settings = new ProjectSettings(123.45F),
                StorageInputContainerName = "<storageInputContainerName>",
                Multilingual = true,
                Description = "<description>",
            })
            {
                Assets = new ConversationExportedProjectAsset
                {
                    Intents = { new ConversationExportedIntent("<category>") },
                    Entities = {new ConversationExportedEntity("<category>")
{
CompositionMode = AnalyzeConversationAuthoringCompositionMode.ReturnLongestOverlap,
Entities = new ExportedEntityList
{
Sublists = {new ExportedEntitySublist
{
ListKey = "<listKey>",
Synonyms = {new ExportedEntityListSynonym
{
Language = "<language>",
Values = {"<values>"},
}},
}},
},
Prebuilts = {new ExportedPrebuiltEntity("<category>")},
Regex = new ExportedEntityRegex
{
Expressions = {new ExportedEntityRegexExpression
{
RegexKey = "<regexKey>",
Language = "<language>",
RegexPattern = "<regexPattern>",
}},
},
RequiredComponents = {"<requiredComponents>"},
}},
                    Utterances = {new ConversationExportedUtterance("<text>", "<intent>")
{
Entities = {new ExportedUtteranceEntityLabel("<category>", 1234, 1234)},
Language = "<language>",
Dataset = "<dataset>",
}},
                },
            };
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body, exportedProjectFormat: AnalyzeConversationAuthoringExportedProjectFormat.Conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectFilesAuthoringConversationAnalysis_Import_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectFilesAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetProjectFilesAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectDetails(AnalyzeConversationAuthoringProjectKind.Conversation, "<projectName>", "<language>")
            {
                Settings = new ProjectSettings(123.45F),
                StorageInputContainerName = "<storageInputContainerName>",
                Multilingual = true,
                Description = "<description>",
            })
            {
                Assets = new ConversationExportedProjectAsset
                {
                    Intents = { new ConversationExportedIntent("<category>") },
                    Entities = {new ConversationExportedEntity("<category>")
{
CompositionMode = AnalyzeConversationAuthoringCompositionMode.ReturnLongestOverlap,
Entities = new ExportedEntityList
{
Sublists = {new ExportedEntitySublist
{
ListKey = "<listKey>",
Synonyms = {new ExportedEntityListSynonym
{
Language = "<language>",
Values = {"<values>"},
}},
}},
},
Prebuilts = {new ExportedPrebuiltEntity("<category>")},
Regex = new ExportedEntityRegex
{
Expressions = {new ExportedEntityRegexExpression
{
RegexKey = "<regexKey>",
Language = "<language>",
RegexPattern = "<regexPattern>",
}},
},
RequiredComponents = {"<requiredComponents>"},
}},
                    Utterances = {new ConversationExportedUtterance("<text>", "<intent>")
{
Entities = {new ExportedUtteranceEntityLabel("<category>", 1234, 1234)},
Language = "<language>",
Dataset = "<dataset>",
}},
                },
            };
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body, exportedProjectFormat: AnalyzeConversationAuthoringExportedProjectFormat.Conversation);
        }
    }
}
