// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Language.Conversations.Authoring.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Authoring.Samples
{
    public partial class Samples_ProjectsConversationAuthoringAnalysis
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_GetProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetProject("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_GetProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetProjectAsync("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_GetProject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectMetadata> response = client.GetProject("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_GetProject_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectMetadata> response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_GetProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetProject("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("multilingual").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_GetProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetProjectAsync("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("multilingual").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_GetProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectMetadata> response = client.GetProject("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_GetProject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectMetadata> response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_CreateProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                projectName = "<projectName>",
                language = "<language>",
            });
            Response response = client.CreateProject("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_CreateProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                projectName = "<projectName>",
                language = "<language>",
            });
            Response response = await client.CreateProjectAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_CreateProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                settings = new
                {
                    confidenceThreshold = 123.45F,
                },
                storageInputContainerName = "<storageInputContainerName>",
                projectName = "<projectName>",
                multilingual = true,
                description = "<description>",
                language = "<language>",
            });
            Response response = client.CreateProject("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("multilingual").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_CreateProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                settings = new
                {
                    confidenceThreshold = 123.45F,
                },
                storageInputContainerName = "<storageInputContainerName>",
                projectName = "<projectName>",
                multilingual = true,
                description = "<description>",
                language = "<language>",
            });
            Response response = await client.CreateProjectAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("multilingual").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_GetProjectDeletionStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetProjectDeletionStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_GetProjectDeletionStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetProjectDeletionStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_GetProjectDeletionStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectDeletionJobState> response = client.GetProjectDeletionStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_GetProjectDeletionStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectDeletionJobState> response = await client.GetProjectDeletionStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_GetProjectDeletionStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetProjectDeletionStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_GetProjectDeletionStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetProjectDeletionStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_GetProjectDeletionStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectDeletionJobState> response = client.GetProjectDeletionStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_GetProjectDeletionStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectDeletionJobState> response = await client.GetProjectDeletionStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_GetSupportedLanguages_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetSupportedLanguages("Conversation");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_GetSupportedLanguages_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetSupportedLanguagesAsync("Conversation");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_GetSupportedLanguages_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<SupportedLanguages> response = client.GetSupportedLanguages(AnalyzeConversationProjectKind.Conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_GetSupportedLanguages_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<SupportedLanguages> response = await client.GetSupportedLanguagesAsync(AnalyzeConversationProjectKind.Conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_GetSupportedLanguages_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetSupportedLanguages("Conversation", top: 1234, skip: 1234, maxpagesize: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_GetSupportedLanguages_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetSupportedLanguagesAsync("Conversation", top: 1234, skip: 1234, maxpagesize: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_GetSupportedLanguages_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<SupportedLanguages> response = client.GetSupportedLanguages(AnalyzeConversationProjectKind.Conversation, top: 1234, skip: 1234, maxpagesize: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_GetSupportedLanguages_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<SupportedLanguages> response = await client.GetSupportedLanguagesAsync(AnalyzeConversationProjectKind.Conversation, top: 1234, skip: 1234, maxpagesize: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_GetProjects_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (BinaryData item in client.GetProjects(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
                Console.WriteLine(result.GetProperty("projectKind").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("language").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_GetProjects_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (BinaryData item in client.GetProjectsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
                Console.WriteLine(result.GetProperty("projectKind").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("language").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_GetProjects_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (ProjectMetadata item in client.GetProjects())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_GetProjects_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (ProjectMetadata item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_GetProjects_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (BinaryData item in client.GetProjects(1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
                Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
                Console.WriteLine(result.GetProperty("projectKind").ToString());
                Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
                Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("multilingual").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("language").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_GetProjects_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (BinaryData item in client.GetProjectsAsync(1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedOn").ToString());
                Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
                Console.WriteLine(result.GetProperty("projectKind").ToString());
                Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
                Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("multilingual").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("language").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectMetadata_GetProjects_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (ProjectMetadata item in client.GetProjects(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectMetadata_GetProjects_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (ProjectMetadata item in client.GetProjectsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_DeleteProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = client.DeleteProject(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_DeleteProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectsConversationAuthoringAnalysis_DeleteProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = client.DeleteProject(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectsConversationAuthoringAnalysis_DeleteProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ProjectsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetProjectsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
        }
    }
}
