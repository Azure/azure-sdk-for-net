// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Language.Conversations.Authoring.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Authoring.Samples
{
    public partial class Samples_DeploymentsConversationAuthoringAnalysis
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetDeployment("<projectName>", "<deploymentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentName").ToString());
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
            Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
            Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentName").ToString());
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
            Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
            Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployment_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectDeployment> response = client.GetDeployment("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployment_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectDeployment> response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetDeployment("<projectName>", "<deploymentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentName").ToString());
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
            Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
            Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentName").ToString());
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
            Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
            Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectDeployment> response = client.GetDeployment("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<ProjectDeployment> response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState_GetDeploymentDeleteFromResourcesStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetDeploymentDeleteFromResourcesStatus("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState_GetDeploymentDeleteFromResourcesStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetDeploymentDeleteFromResourcesStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState_GetDeploymentDeleteFromResourcesStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<DeploymentDeleteFromResourcesJobState> response = client.GetDeploymentDeleteFromResourcesStatus("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState_GetDeploymentDeleteFromResourcesStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<DeploymentDeleteFromResourcesJobState> response = await client.GetDeploymentDeleteFromResourcesStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState_GetDeploymentDeleteFromResourcesStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetDeploymentDeleteFromResourcesStatus("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState_GetDeploymentDeleteFromResourcesStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetDeploymentDeleteFromResourcesStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState_GetDeploymentDeleteFromResourcesStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<DeploymentDeleteFromResourcesJobState> response = client.GetDeploymentDeleteFromResourcesStatus("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState_GetDeploymentDeleteFromResourcesStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<DeploymentDeleteFromResourcesJobState> response = await client.GetDeploymentDeleteFromResourcesStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringDeploymentJobState_GetDeploymentStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringDeploymentJobState_GetDeploymentStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringDeploymentJobState_GetDeploymentStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<DeploymentJobState> response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringDeploymentJobState_GetDeploymentStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<DeploymentJobState> response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringDeploymentJobState_GetDeploymentStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringDeploymentJobState_GetDeploymentStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringDeploymentJobState_GetDeploymentStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<DeploymentJobState> response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringDeploymentJobState_GetDeploymentStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<DeploymentJobState> response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringSwapDeploymentsJobState_GetSwapDeploymentsStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetSwapDeploymentsStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringSwapDeploymentsJobState_GetSwapDeploymentsStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringSwapDeploymentsJobState_GetSwapDeploymentsStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<SwapDeploymentsJobState> response = client.GetSwapDeploymentsStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringSwapDeploymentsJobState_GetSwapDeploymentsStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<SwapDeploymentsJobState> response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringSwapDeploymentsJobState_GetSwapDeploymentsStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetSwapDeploymentsStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringSwapDeploymentsJobState_GetSwapDeploymentsStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringSwapDeploymentsJobState_GetSwapDeploymentsStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<SwapDeploymentsJobState> response = client.GetSwapDeploymentsStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringSwapDeploymentsJobState_GetSwapDeploymentsStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<SwapDeploymentsJobState> response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (BinaryData item in client.GetDeployments("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentName").ToString());
                Console.WriteLine(result.GetProperty("modelId").ToString());
                Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
                Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
                Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
                Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentName").ToString());
                Console.WriteLine(result.GetProperty("modelId").ToString());
                Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
                Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
                Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
                Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployments_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (ProjectDeployment item in client.GetDeployments("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployments_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (ProjectDeployment item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (BinaryData item in client.GetDeployments("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentName").ToString());
                Console.WriteLine(result.GetProperty("modelId").ToString());
                Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
                Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
                Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
                Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentName").ToString());
                Console.WriteLine(result.GetProperty("modelId").ToString());
                Console.WriteLine(result.GetProperty("lastTrainedOn").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedOn").ToString());
                Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
                Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
                Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployments_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (ProjectDeployment item in client.GetDeployments("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringProjectDeployment_GetDeployments_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (ProjectDeployment item in client.GetDeploymentsAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_SwapDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_SwapDeployments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_SwapDeployments_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            SwapDeploymentsDetails body = new SwapDeploymentsDetails("<firstDeploymentName>", "<secondDeploymentName>");
            Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_SwapDeployments_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            SwapDeploymentsDetails body = new SwapDeploymentsDetails("<firstDeploymentName>", "<secondDeploymentName>");
            Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_SwapDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_SwapDeployments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_SwapDeployments_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            SwapDeploymentsDetails body = new SwapDeploymentsDetails("<firstDeploymentName>", "<secondDeploymentName>");
            Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_SwapDeployments_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            SwapDeploymentsDetails body = new SwapDeploymentsDetails("<firstDeploymentName>", "<secondDeploymentName>");
            Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeployProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                trainedModelLabel = "<trainedModelLabel>",
            });
            Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeployProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                trainedModelLabel = "<trainedModelLabel>",
            });
            Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeployProject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            CreateDeploymentDetails body = new CreateDeploymentDetails("<trainedModelLabel>");
            Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeployProject_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            CreateDeploymentDetails body = new CreateDeploymentDetails("<trainedModelLabel>");
            Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeployProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                trainedModelLabel = "<trainedModelLabel>",
                assignedResourceIds = new object[]
            {
"<assignedResourceIds>"
            },
            });
            Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeployProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                trainedModelLabel = "<trainedModelLabel>",
                assignedResourceIds = new object[]
            {
"<assignedResourceIds>"
            },
            });
            Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeployProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            CreateDeploymentDetails body = new CreateDeploymentDetails("<trainedModelLabel>")
            {
                AssignedResourceIds = { "<assignedResourceIds>" },
            };
            Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeployProject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            CreateDeploymentDetails body = new CreateDeploymentDetails("<trainedModelLabel>")
            {
                AssignedResourceIds = { "<assignedResourceIds>" },
            };
            Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeleteDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = client.DeleteDeployment(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeleteDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeleteDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = client.DeleteDeployment(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeleteDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeleteDeploymentFromResources_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new object());
            Operation operation = client.DeleteDeploymentFromResources(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeleteDeploymentFromResources_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new object());
            Operation operation = await client.DeleteDeploymentFromResourcesAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeleteDeploymentFromResources_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            DeleteDeploymentDetails body = new DeleteDeploymentDetails();
            Operation operation = client.DeleteDeploymentFromResources(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeleteDeploymentFromResources_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            DeleteDeploymentDetails body = new DeleteDeploymentDetails();
            Operation operation = await client.DeleteDeploymentFromResourcesAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeleteDeploymentFromResources_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assignedResourceIds = new object[]
            {
"<assignedResourceIds>"
            },
            });
            Operation operation = client.DeleteDeploymentFromResources(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeleteDeploymentFromResources_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assignedResourceIds = new object[]
            {
"<assignedResourceIds>"
            },
            });
            Operation operation = await client.DeleteDeploymentFromResourcesAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeploymentsConversationAuthoringAnalysis_DeleteDeploymentFromResources_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            DeleteDeploymentDetails body = new DeleteDeploymentDetails
            {
                AssignedResourceIds = { "<assignedResourceIds>" },
            };
            Operation operation = client.DeleteDeploymentFromResources(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeploymentsConversationAuthoringAnalysis_DeleteDeploymentFromResources_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DeploymentsConversationAuthoringAnalysis client = new AnalyzeConversationClient(endpoint, credential).GetDeploymentsConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            DeleteDeploymentDetails body = new DeleteDeploymentDetails
            {
                AssignedResourceIds = { "<assignedResourceIds>" },
            };
            Operation operation = await client.DeleteDeploymentFromResourcesAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
        }
    }
}
