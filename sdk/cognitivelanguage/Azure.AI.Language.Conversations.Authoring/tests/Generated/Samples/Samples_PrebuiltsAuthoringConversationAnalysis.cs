// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Language.Conversations.Authoring.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Authoring.Samples
{
    public partial class Samples_PrebuiltsAuthoringConversationAnalysis
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PrebuiltsAuthoringConversationAnalysis_GetSupportedPrebuiltEntities_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PrebuiltsAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetPrebuiltsAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetSupportedPrebuiltEntities(null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("examples").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PrebuiltsAuthoringConversationAnalysis_GetSupportedPrebuiltEntities_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PrebuiltsAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetPrebuiltsAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetSupportedPrebuiltEntitiesAsync(null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("examples").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PrebuiltsAuthoringConversationAnalysis_GetSupportedPrebuiltEntities_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PrebuiltsAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetPrebuiltsAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<PrebuiltEntities> response = client.GetSupportedPrebuiltEntities();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PrebuiltsAuthoringConversationAnalysis_GetSupportedPrebuiltEntities_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PrebuiltsAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetPrebuiltsAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<PrebuiltEntities> response = await client.GetSupportedPrebuiltEntitiesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PrebuiltsAuthoringConversationAnalysis_GetSupportedPrebuiltEntities_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PrebuiltsAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetPrebuiltsAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetSupportedPrebuiltEntities("<language>", "<multilingual>", 1234, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("examples").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PrebuiltsAuthoringConversationAnalysis_GetSupportedPrebuiltEntities_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PrebuiltsAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetPrebuiltsAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetSupportedPrebuiltEntitiesAsync("<language>", "<multilingual>", 1234, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("examples").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PrebuiltsAuthoringConversationAnalysis_GetSupportedPrebuiltEntities_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PrebuiltsAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetPrebuiltsAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<PrebuiltEntities> response = client.GetSupportedPrebuiltEntities(language: "<language>", multilingual: "<multilingual>", top: 1234, skip: 1234, maxpagesize: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PrebuiltsAuthoringConversationAnalysis_GetSupportedPrebuiltEntities_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PrebuiltsAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetPrebuiltsAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<PrebuiltEntities> response = await client.GetSupportedPrebuiltEntitiesAsync(language: "<language>", multilingual: "<multilingual>", top: 1234, skip: 1234, maxpagesize: 1234);
        }
    }
}
