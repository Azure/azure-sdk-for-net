// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Language.Conversations.Authoring.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Authoring.Samples
{
    public partial class Samples_TrainingConversationAuthoringAnalysis
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetTrainingStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<TrainingJobState> response = client.GetTrainingStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<TrainingJobState> response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetTrainingStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingMode").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingMode").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<TrainingJobState> response = client.GetTrainingStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<TrainingJobState> response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_GetTrainingConfigVersions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetTrainingConfigVersions("Conversation");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_GetTrainingConfigVersions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetTrainingConfigVersionsAsync("Conversation");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_GetTrainingConfigVersions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<TrainingConfigVersions> response = client.GetTrainingConfigVersions(AnalyzeConversationProjectKind.Conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_GetTrainingConfigVersions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<TrainingConfigVersions> response = await client.GetTrainingConfigVersionsAsync(AnalyzeConversationProjectKind.Conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_GetTrainingConfigVersions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetTrainingConfigVersions("Conversation", top: 1234, skip: 1234, maxpagesize: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_GetTrainingConfigVersions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetTrainingConfigVersionsAsync("Conversation", top: 1234, skip: 1234, maxpagesize: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_GetTrainingConfigVersions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<TrainingConfigVersions> response = client.GetTrainingConfigVersions(AnalyzeConversationProjectKind.Conversation, top: 1234, skip: 1234, maxpagesize: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_GetTrainingConfigVersions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<TrainingConfigVersions> response = await client.GetTrainingConfigVersionsAsync(AnalyzeConversationProjectKind.Conversation, top: 1234, skip: 1234, maxpagesize: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingJobs_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (BinaryData item in client.GetTrainingJobs("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingJobs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (BinaryData item in client.GetTrainingJobsAsync("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingJobs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (TrainingJobState item in client.GetTrainingJobs("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingJobs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (TrainingJobState item in client.GetTrainingJobsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingJobs_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (BinaryData item in client.GetTrainingJobs("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
                Console.WriteLine(result.GetProperty("expiresOn").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingMode").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startedOn").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endedOn").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startedOn").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endedOn").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndOn").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingJobs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (BinaryData item in client.GetTrainingJobsAsync("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
                Console.WriteLine(result.GetProperty("expiresOn").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingMode").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startedOn").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endedOn").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startedOn").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endedOn").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndOn").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingJobs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            foreach (TrainingJobState item in client.GetTrainingJobs("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringTrainingJobState_GetTrainingJobs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            await foreach (TrainingJobState item in client.GetTrainingJobsAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_Train_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
                trainingMode = "advanced",
            });
            Operation<BinaryData> operation = client.Train(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_Train_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
                trainingMode = "advanced",
            });
            Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_Train_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            TrainingJobDetails body = new TrainingJobDetails("<modelLabel>", AnalyzeConversationTrainingMode.Advanced);
            Operation<TrainingJobResult> operation = client.Train(WaitUntil.Completed, "<projectName>", body);
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_Train_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            TrainingJobDetails body = new TrainingJobDetails("<modelLabel>", AnalyzeConversationTrainingMode.Advanced);
            Operation<TrainingJobResult> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", body);
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_Train_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
                trainingConfigVersion = "<trainingConfigVersion>",
                trainingMode = "advanced",
                evaluationOptions = new
                {
                    kind = "percentage",
                    trainingSplitPercentage = 1234,
                    testingSplitPercentage = 1234,
                },
            });
            Operation<BinaryData> operation = client.Train(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingMode").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("estimatedEndOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_Train_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
                trainingConfigVersion = "<trainingConfigVersion>",
                trainingMode = "advanced",
                evaluationOptions = new
                {
                    kind = "percentage",
                    trainingSplitPercentage = 1234,
                    testingSplitPercentage = 1234,
                },
            });
            Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingMode").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("estimatedEndOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_Train_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            TrainingJobDetails body = new TrainingJobDetails("<modelLabel>", AnalyzeConversationTrainingMode.Advanced)
            {
                TrainingConfigVersion = "<trainingConfigVersion>",
                EvaluationOptions = new EvaluationDetails
                {
                    Kind = AnalyzeConversationEvaluationKind.Percentage,
                    TrainingSplitPercentage = 1234,
                    TestingSplitPercentage = 1234,
                },
            };
            Operation<TrainingJobResult> operation = client.Train(WaitUntil.Completed, "<projectName>", body);
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_Train_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            TrainingJobDetails body = new TrainingJobDetails("<modelLabel>", AnalyzeConversationTrainingMode.Advanced)
            {
                TrainingConfigVersion = "<trainingConfigVersion>",
                EvaluationOptions = new EvaluationDetails
                {
                    Kind = AnalyzeConversationEvaluationKind.Percentage,
                    TrainingSplitPercentage = 1234,
                    TestingSplitPercentage = 1234,
                },
            };
            Operation<TrainingJobResult> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", body);
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_CancelTrainingJob_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation<BinaryData> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_CancelTrainingJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation<BinaryData> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_CancelTrainingJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation<TrainingJobResult> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>");
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_CancelTrainingJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation<TrainingJobResult> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>");
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_CancelTrainingJob_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation<BinaryData> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingMode").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("estimatedEndOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_CancelTrainingJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation<BinaryData> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingMode").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startedOn").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endedOn").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("estimatedEndOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainingConversationAuthoringAnalysis_CancelTrainingJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation<TrainingJobResult> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>");
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TrainingConversationAuthoringAnalysis_CancelTrainingJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TrainingConversationAuthoringAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetTrainingConversationAuthoringAnalysisClient(apiVersion: "2024-11-15-preview");

            Operation<TrainingJobResult> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>");
            TrainingJobResult responseData = operation.Value;
        }
    }
}
