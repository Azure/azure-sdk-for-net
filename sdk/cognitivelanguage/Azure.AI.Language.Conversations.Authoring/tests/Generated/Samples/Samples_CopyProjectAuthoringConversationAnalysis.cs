// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Language.Conversations.Authoring.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Authoring.Samples
{
    public partial class Samples_CopyProjectAuthoringConversationAnalysis
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CopyProjectAuthoringConversationAnalysis_CopyProjectAuthorization_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
            });
            Response response = client.CopyProjectAuthorization("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("targetProjectName").ToString());
            Console.WriteLine(result.GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CopyProjectAuthoringConversationAnalysis_CopyProjectAuthorization_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
            });
            Response response = await client.CopyProjectAuthorizationAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("targetProjectName").ToString());
            Console.WriteLine(result.GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CopyProjectAuthoringConversationAnalysis_CopyProjectAuthorization_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<CopyProjectDetails> response = client.CopyProjectAuthorization("<projectName>", AnalyzeConversationAuthoringProjectKind.Conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CopyProjectAuthoringConversationAnalysis_CopyProjectAuthorization_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<CopyProjectDetails> response = await client.CopyProjectAuthorizationAsync("<projectName>", AnalyzeConversationAuthoringProjectKind.Conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CopyProjectAuthoringConversationAnalysis_CopyProjectAuthorization_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                storageInputContainerName = "<storageInputContainerName>",
                allowOverwrite = true,
            });
            Response response = client.CopyProjectAuthorization("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("targetProjectName").ToString());
            Console.WriteLine(result.GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CopyProjectAuthoringConversationAnalysis_CopyProjectAuthorization_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                storageInputContainerName = "<storageInputContainerName>",
                allowOverwrite = true,
            });
            Response response = await client.CopyProjectAuthorizationAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("targetProjectName").ToString());
            Console.WriteLine(result.GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CopyProjectAuthoringConversationAnalysis_CopyProjectAuthorization_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<CopyProjectDetails> response = client.CopyProjectAuthorization("<projectName>", AnalyzeConversationAuthoringProjectKind.Conversation, storageInputContainerName: "<storageInputContainerName>", allowOverwrite: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CopyProjectAuthoringConversationAnalysis_CopyProjectAuthorization_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<CopyProjectDetails> response = await client.CopyProjectAuthorizationAsync("<projectName>", AnalyzeConversationAuthoringProjectKind.Conversation, storageInputContainerName: "<storageInputContainerName>", allowOverwrite: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringCopyProjectJobState_GetCopyProjectStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetCopyProjectStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringCopyProjectJobState_GetCopyProjectStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringCopyProjectJobState_GetCopyProjectStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<CopyProjectJobState> response = client.GetCopyProjectStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringCopyProjectJobState_GetCopyProjectStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<CopyProjectJobState> response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringCopyProjectJobState_GetCopyProjectStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = client.GetCopyProjectStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringCopyProjectJobState_GetCopyProjectStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationAuthoringCopyProjectJobState_GetCopyProjectStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<CopyProjectJobState> response = client.GetCopyProjectStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationAuthoringCopyProjectJobState_GetCopyProjectStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            Response<CopyProjectJobState> response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CopyProjectAuthoringConversationAnalysis_CopyProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                targetProjectName = "<targetProjectName>",
                accessToken = "<accessToken>",
                expiresAt = "2022-05-10T18:57:31.2311892Z",
                targetResourceId = "<targetResourceId>",
                targetResourceRegion = "<targetResourceRegion>",
            });
            Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CopyProjectAuthoringConversationAnalysis_CopyProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                targetProjectName = "<targetProjectName>",
                accessToken = "<accessToken>",
                expiresAt = "2022-05-10T18:57:31.2311892Z",
                targetResourceId = "<targetResourceId>",
                targetResourceRegion = "<targetResourceRegion>",
            });
            Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CopyProjectAuthoringConversationAnalysis_CopyProject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            CopyProjectDetails body = new CopyProjectDetails(
                AnalyzeConversationAuthoringProjectKind.Conversation,
                "<targetProjectName>",
                "<accessToken>",
                DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                "<targetResourceId>",
                "<targetResourceRegion>");
            Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CopyProjectAuthoringConversationAnalysis_CopyProject_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            CopyProjectDetails body = new CopyProjectDetails(
                AnalyzeConversationAuthoringProjectKind.Conversation,
                "<targetProjectName>",
                "<accessToken>",
                DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                "<targetResourceId>",
                "<targetResourceRegion>");
            Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CopyProjectAuthoringConversationAnalysis_CopyProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                targetProjectName = "<targetProjectName>",
                accessToken = "<accessToken>",
                expiresAt = "2022-05-10T18:57:31.2311892Z",
                targetResourceId = "<targetResourceId>",
                targetResourceRegion = "<targetResourceRegion>",
            });
            Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CopyProjectAuthoringConversationAnalysis_CopyProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "Conversation",
                targetProjectName = "<targetProjectName>",
                accessToken = "<accessToken>",
                expiresAt = "2022-05-10T18:57:31.2311892Z",
                targetResourceId = "<targetResourceId>",
                targetResourceRegion = "<targetResourceRegion>",
            });
            Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CopyProjectAuthoringConversationAnalysis_CopyProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            CopyProjectDetails body = new CopyProjectDetails(
                AnalyzeConversationAuthoringProjectKind.Conversation,
                "<targetProjectName>",
                "<accessToken>",
                DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                "<targetResourceId>",
                "<targetResourceRegion>");
            Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CopyProjectAuthoringConversationAnalysis_CopyProject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CopyProjectAuthoringConversationAnalysis client = new AnalyzeConversationAuthoringClient(endpoint, credential).GetCopyProjectAuthoringConversationAnalysisClient(apiVersion: "2024-11-15-preview");

            CopyProjectDetails body = new CopyProjectDetails(
                AnalyzeConversationAuthoringProjectKind.Conversation,
                "<targetProjectName>",
                "<accessToken>",
                DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                "<targetResourceId>",
                "<targetResourceRegion>");
            Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", body);
        }
    }
}
