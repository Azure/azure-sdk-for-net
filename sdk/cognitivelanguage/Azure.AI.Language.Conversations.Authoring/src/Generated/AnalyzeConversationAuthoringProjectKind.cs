// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Conversations.Authoring
{
    /// <summary> The AnalyzeConversationAuthoringProjectKind. </summary>
    public readonly partial struct AnalyzeConversationAuthoringProjectKind : IEquatable<AnalyzeConversationAuthoringProjectKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalyzeConversationAuthoringProjectKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalyzeConversationAuthoringProjectKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConversationValue = "Conversation";
        private const string OrchestrationValue = "Orchestration";
        private const string CustomConversationSummarizationValue = "CustomConversationSummarization";

        /// <summary> A project to build natural language into apps, bots, and IoT devices. </summary>
        public static AnalyzeConversationAuthoringProjectKind Conversation { get; } = new AnalyzeConversationAuthoringProjectKind(ConversationValue);
        /// <summary> A project to connect and orchestrate Conversation, Custom question answering and LUIS projects together in one single project. </summary>
        public static AnalyzeConversationAuthoringProjectKind Orchestration { get; } = new AnalyzeConversationAuthoringProjectKind(OrchestrationValue);
        /// <summary> A project to build conversation summarization models which are able to summarize long conversations. </summary>
        public static AnalyzeConversationAuthoringProjectKind CustomConversationSummarization { get; } = new AnalyzeConversationAuthoringProjectKind(CustomConversationSummarizationValue);
        /// <summary> Determines if two <see cref="AnalyzeConversationAuthoringProjectKind"/> values are the same. </summary>
        public static bool operator ==(AnalyzeConversationAuthoringProjectKind left, AnalyzeConversationAuthoringProjectKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalyzeConversationAuthoringProjectKind"/> values are not the same. </summary>
        public static bool operator !=(AnalyzeConversationAuthoringProjectKind left, AnalyzeConversationAuthoringProjectKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AnalyzeConversationAuthoringProjectKind"/>. </summary>
        public static implicit operator AnalyzeConversationAuthoringProjectKind(string value) => new AnalyzeConversationAuthoringProjectKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalyzeConversationAuthoringProjectKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalyzeConversationAuthoringProjectKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
