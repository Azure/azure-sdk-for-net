// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Conversations.Authoring
{
    /// <summary> Represents the assets of an orchestration project. </summary>
    public partial class OrchestrationExportedProjectAsset : ConversationAuthoringExportedProjectAsset
    {
        /// <summary> Initializes a new instance of <see cref="OrchestrationExportedProjectAsset"/>. </summary>
        public OrchestrationExportedProjectAsset()
        {
            ProjectKind = ConversationAuthoringProjectKind.Orchestration;
            Intents = new ChangeTrackingList<OrchestrationExportedIntent>();
            Utterances = new ChangeTrackingList<OrchestrationExportedUtterance>();
        }

        /// <summary> Initializes a new instance of <see cref="OrchestrationExportedProjectAsset"/>. </summary>
        /// <param name="projectKind"> The type of project containing the assets. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="intents"> Represents the intents of the project. </param>
        /// <param name="utterances"> Represents the utterances of the project. </param>
        internal OrchestrationExportedProjectAsset(ConversationAuthoringProjectKind projectKind, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<OrchestrationExportedIntent> intents, IList<OrchestrationExportedUtterance> utterances) : base(projectKind, serializedAdditionalRawData)
        {
            Intents = intents;
            Utterances = utterances;
        }

        /// <summary> Represents the intents of the project. </summary>
        public IList<OrchestrationExportedIntent> Intents { get; }
        /// <summary> Represents the utterances of the project. </summary>
        public IList<OrchestrationExportedUtterance> Utterances { get; }
    }
}
