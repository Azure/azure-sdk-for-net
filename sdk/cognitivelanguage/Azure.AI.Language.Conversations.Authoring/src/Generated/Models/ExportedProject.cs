// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Conversations.Authoring.Models
{
    /// <summary> Represents an exported project. </summary>
    public partial class ExportedProject
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExportedProject"/>. </summary>
        /// <param name="projectFileVersion"> The version of the exported file. </param>
        /// <param name="stringIndexType">
        /// Specifies the method used to interpret string offsets. For additional
        /// information see https://aka.ms/text-analytics-offsets.
        /// </param>
        /// <param name="metadata"> Represents the project metadata. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectFileVersion"/> or <paramref name="metadata"/> is null. </exception>
        public ExportedProject(string projectFileVersion, StringIndexType stringIndexType, CreateProjectConfig metadata)
        {
            Argument.AssertNotNull(projectFileVersion, nameof(projectFileVersion));
            Argument.AssertNotNull(metadata, nameof(metadata));

            ProjectFileVersion = projectFileVersion;
            StringIndexType = stringIndexType;
            Metadata = metadata;
        }

        /// <summary> Initializes a new instance of <see cref="ExportedProject"/>. </summary>
        /// <param name="projectFileVersion"> The version of the exported file. </param>
        /// <param name="stringIndexType">
        /// Specifies the method used to interpret string offsets. For additional
        /// information see https://aka.ms/text-analytics-offsets.
        /// </param>
        /// <param name="metadata"> Represents the project metadata. </param>
        /// <param name="assets">
        /// Represents the project assets.
        /// Please note <see cref="ExportedProjectAssets"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ConversationExportedProjectAssets"/> and <see cref="OrchestrationExportedProjectAssets"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExportedProject(string projectFileVersion, StringIndexType stringIndexType, CreateProjectConfig metadata, ExportedProjectAssets assets, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProjectFileVersion = projectFileVersion;
            StringIndexType = stringIndexType;
            Metadata = metadata;
            Assets = assets;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ExportedProject"/> for deserialization. </summary>
        internal ExportedProject()
        {
        }

        /// <summary> The version of the exported file. </summary>
        public string ProjectFileVersion { get; }
        /// <summary>
        /// Specifies the method used to interpret string offsets. For additional
        /// information see https://aka.ms/text-analytics-offsets.
        /// </summary>
        public StringIndexType StringIndexType { get; }
        /// <summary> Represents the project metadata. </summary>
        public CreateProjectConfig Metadata { get; }
        /// <summary>
        /// Represents the project assets.
        /// Please note <see cref="ExportedProjectAssets"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ConversationExportedProjectAssets"/> and <see cref="OrchestrationExportedProjectAssets"/>.
        /// </summary>
        public ExportedProjectAssets Assets { get; set; }
    }
}
