// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Conversations.Authoring.Models
{
    /// <summary>
    /// Represents a regex expression inside a regex component. This expression follows
    /// the .NET regex syntax. For reference, check here:
    /// https://learn.microsoft.com/dotnet/standard/base-types/regular-expressions
    /// </summary>
    public partial class ExportedEntityRegexExpression
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExportedEntityRegexExpression"/>. </summary>
        public ExportedEntityRegexExpression()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ExportedEntityRegexExpression"/>. </summary>
        /// <param name="regexKey"> The key of the regex expression. </param>
        /// <param name="language">
        /// Represents the language of the regex expression. This is BCP-47 representation
        /// of a language. For example, use "en" for English, "en-gb" for English (UK),
        /// "es" for Spanish etc.
        /// </param>
        /// <param name="regexPattern"> The regex pattern. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExportedEntityRegexExpression(string regexKey, string language, string regexPattern, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RegexKey = regexKey;
            Language = language;
            RegexPattern = regexPattern;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The key of the regex expression. </summary>
        public string RegexKey { get; set; }
        /// <summary>
        /// Represents the language of the regex expression. This is BCP-47 representation
        /// of a language. For example, use "en" for English, "en-gb" for English (UK),
        /// "es" for Spanish etc.
        /// </summary>
        public string Language { get; set; }
        /// <summary> The regex pattern. </summary>
        public string RegexPattern { get; set; }
    }
}
