// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Conversations.Authoring.Models
{
    /// <summary> The AnalyzeConversationCompositionMode. </summary>
    public readonly partial struct AnalyzeConversationCompositionMode : IEquatable<AnalyzeConversationCompositionMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalyzeConversationCompositionMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalyzeConversationCompositionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReturnLongestOverlapValue = "returnLongestOverlap";
        private const string RequireExactOverlapValue = "requireExactOverlap";
        private const string SeparateComponentsValue = "separateComponents";
        private const string CombineComponentsValue = "combineComponents";

        /// <summary> When two or more components are found in the text and overlap, the component with the longest set of characters is returned. </summary>
        public static AnalyzeConversationCompositionMode ReturnLongestOverlap { get; } = new AnalyzeConversationCompositionMode(ReturnLongestOverlapValue);
        /// <summary> All components must overlap at the exact same characters in the text for the entity to return. If one of the defined components is not matched or predicted, the entity will not return. </summary>
        public static AnalyzeConversationCompositionMode RequireExactOverlap { get; } = new AnalyzeConversationCompositionMode(RequireExactOverlapValue);
        /// <summary> Every component's match or prediction is returned as a separate instance of the entity. </summary>
        public static AnalyzeConversationCompositionMode SeparateComponents { get; } = new AnalyzeConversationCompositionMode(SeparateComponentsValue);
        /// <summary> When two or more components are found in the text and overlap, the components' spans are merged together into one span combining all of them. </summary>
        public static AnalyzeConversationCompositionMode CombineComponents { get; } = new AnalyzeConversationCompositionMode(CombineComponentsValue);
        /// <summary> Determines if two <see cref="AnalyzeConversationCompositionMode"/> values are the same. </summary>
        public static bool operator ==(AnalyzeConversationCompositionMode left, AnalyzeConversationCompositionMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalyzeConversationCompositionMode"/> values are not the same. </summary>
        public static bool operator !=(AnalyzeConversationCompositionMode left, AnalyzeConversationCompositionMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AnalyzeConversationCompositionMode"/>. </summary>
        public static implicit operator AnalyzeConversationCompositionMode(string value) => new AnalyzeConversationCompositionMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalyzeConversationCompositionMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalyzeConversationCompositionMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
