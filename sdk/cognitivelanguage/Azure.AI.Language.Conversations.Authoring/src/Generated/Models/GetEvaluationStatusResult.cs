// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.AI.Language.Conversations.Authoring;
using Azure.AI.Language.Conversations.Authoring.Models;

namespace Azure.AI.Language.Authoring.Conversations.Models
{
    /// <summary> The GetEvaluationStatusResponse. </summary>
    public partial class GetEvaluationStatusResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GetEvaluationStatusResult"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="result"> Represents evaluation task detailed result. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="result"/> is null. </exception>
        internal GetEvaluationStatusResult(DateTimeOffset createdDateTime, DateTimeOffset lastUpdatedDateTime, JobStatus status, EvaluationJobResult result)
        {
            Argument.AssertNotNull(result, nameof(result));

            CreatedDateTime = createdDateTime;
            LastUpdatedDateTime = lastUpdatedDateTime;
            Status = status;
            Warnings = new ChangeTrackingList<AuthoringConversationsWarning>();
            Errors = new ChangeTrackingList<AuthoringConversationsError>();
            Result = result;
        }

        /// <summary> Initializes a new instance of <see cref="GetEvaluationStatusResult"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents evaluation task detailed result. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GetEvaluationStatusResult(DateTimeOffset createdDateTime, DateTimeOffset lastUpdatedDateTime, DateTimeOffset? expirationDateTime, JobStatus status, IReadOnlyList<AuthoringConversationsWarning> warnings, IReadOnlyList<AuthoringConversationsError> errors, EvaluationJobResult result, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CreatedDateTime = createdDateTime;
            LastUpdatedDateTime = lastUpdatedDateTime;
            ExpirationDateTime = expirationDateTime;
            Status = status;
            Warnings = warnings;
            Errors = errors;
            Result = result;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="GetEvaluationStatusResult"/> for deserialization. </summary>
        internal GetEvaluationStatusResult()
        {
        }

        /// <summary> The creation date time of the job. </summary>
        public DateTimeOffset CreatedDateTime { get; }
        /// <summary> The last date time the job was updated. </summary>
        public DateTimeOffset LastUpdatedDateTime { get; }
        /// <summary> The expiration date time of the job. </summary>
        public DateTimeOffset? ExpirationDateTime { get; }
        /// <summary> The job status. </summary>
        public JobStatus Status { get; }
        /// <summary> The warnings that were encountered while executing the job. </summary>
        public IReadOnlyList<AuthoringConversationsWarning> Warnings { get; }
        /// <summary> The errors encountered while executing the job. </summary>
        public IReadOnlyList<AuthoringConversationsError> Errors { get; }
        /// <summary> Represents evaluation task detailed result. </summary>
        public EvaluationJobResult Result { get; }
    }
}
