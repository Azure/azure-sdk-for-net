// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Conversations.Authoring.Models
{
    /// <summary> Represents an entity with its components. </summary>
    public partial class ConversationExportedEntity
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConversationExportedEntity"/>. </summary>
        /// <param name="category"> The category of the entity. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="category"/> is null. </exception>
        public ConversationExportedEntity(string category)
        {
            Argument.AssertNotNull(category, nameof(category));

            Category = category;
            Prebuilts = new ChangeTrackingList<ExportedPrebuiltEntity>();
            RequiredComponents = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="ConversationExportedEntity"/>. </summary>
        /// <param name="category"> The category of the entity. </param>
        /// <param name="compositionSetting"> The behavior to follow when the entity's components overlap with each other. </param>
        /// <param name="list"> The list component of the entity. </param>
        /// <param name="prebuilts"> The prebuilt entities components. </param>
        /// <param name="regex"> The regex component of the entity. </param>
        /// <param name="requiredComponents"> The required components. Allowed values are 'learned', 'list', 'prebuilts' and 'regex'. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConversationExportedEntity(string category, CompositionSetting? compositionSetting, ExportedEntityList list, IList<ExportedPrebuiltEntity> prebuilts, ExportedEntityRegex regex, IList<string> requiredComponents, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Category = category;
            CompositionSetting = compositionSetting;
            List = list;
            Prebuilts = prebuilts;
            Regex = regex;
            RequiredComponents = requiredComponents;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ConversationExportedEntity"/> for deserialization. </summary>
        internal ConversationExportedEntity()
        {
        }

        /// <summary> The category of the entity. </summary>
        public string Category { get; }
        /// <summary> The behavior to follow when the entity's components overlap with each other. </summary>
        public CompositionSetting? CompositionSetting { get; set; }
        /// <summary> The list component of the entity. </summary>
        public ExportedEntityList List { get; set; }
        /// <summary> The prebuilt entities components. </summary>
        public IList<ExportedPrebuiltEntity> Prebuilts { get; }
        /// <summary> The regex component of the entity. </summary>
        public ExportedEntityRegex Regex { get; set; }
        /// <summary> The required components. Allowed values are 'learned', 'list', 'prebuilts' and 'regex'. </summary>
        public IList<string> RequiredComponents { get; }
    }
}
