// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Conversations.Authoring
{
    /// <summary> The AnalyzeConversationAuthoringCompositionMode. </summary>
    public readonly partial struct AnalyzeConversationAuthoringCompositionMode : IEquatable<AnalyzeConversationAuthoringCompositionMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalyzeConversationAuthoringCompositionMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalyzeConversationAuthoringCompositionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReturnLongestOverlapValue = "returnLongestOverlap";
        private const string RequireExactOverlapValue = "requireExactOverlap";
        private const string SeparateComponentsValue = "separateComponents";
        private const string CombineComponentsValue = "combineComponents";

        /// <summary> When two or more components are found in the text and overlap, the component with the longest set of characters is returned. </summary>
        public static AnalyzeConversationAuthoringCompositionMode ReturnLongestOverlap { get; } = new AnalyzeConversationAuthoringCompositionMode(ReturnLongestOverlapValue);
        /// <summary> All components must overlap at the exact same characters in the text for the entity to return. If one of the defined components is not matched or predicted, the entity will not return. </summary>
        public static AnalyzeConversationAuthoringCompositionMode RequireExactOverlap { get; } = new AnalyzeConversationAuthoringCompositionMode(RequireExactOverlapValue);
        /// <summary> Every component's match or prediction is returned as a separate instance of the entity. </summary>
        public static AnalyzeConversationAuthoringCompositionMode SeparateComponents { get; } = new AnalyzeConversationAuthoringCompositionMode(SeparateComponentsValue);
        /// <summary> When two or more components are found in the text and overlap, the components' spans are merged together into one span combining all of them. </summary>
        public static AnalyzeConversationAuthoringCompositionMode CombineComponents { get; } = new AnalyzeConversationAuthoringCompositionMode(CombineComponentsValue);
        /// <summary> Determines if two <see cref="AnalyzeConversationAuthoringCompositionMode"/> values are the same. </summary>
        public static bool operator ==(AnalyzeConversationAuthoringCompositionMode left, AnalyzeConversationAuthoringCompositionMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalyzeConversationAuthoringCompositionMode"/> values are not the same. </summary>
        public static bool operator !=(AnalyzeConversationAuthoringCompositionMode left, AnalyzeConversationAuthoringCompositionMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AnalyzeConversationAuthoringCompositionMode"/>. </summary>
        public static implicit operator AnalyzeConversationAuthoringCompositionMode(string value) => new AnalyzeConversationAuthoringCompositionMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalyzeConversationAuthoringCompositionMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalyzeConversationAuthoringCompositionMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
