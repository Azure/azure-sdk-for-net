// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Conversations.Authoring
{
    /// <summary> The ConversationAuthoringCompositionMode. </summary>
    public readonly partial struct ConversationAuthoringCompositionMode : IEquatable<ConversationAuthoringCompositionMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConversationAuthoringCompositionMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConversationAuthoringCompositionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReturnLongestOverlapValue = "returnLongestOverlap";
        private const string RequireExactOverlapValue = "requireExactOverlap";
        private const string SeparateComponentsValue = "separateComponents";
        private const string CombineComponentsValue = "combineComponents";

        /// <summary> When two or more components are found in the text and overlap, the component with the longest set of characters is returned. </summary>
        public static ConversationAuthoringCompositionMode ReturnLongestOverlap { get; } = new ConversationAuthoringCompositionMode(ReturnLongestOverlapValue);
        /// <summary> All components must overlap at the exact same characters in the text for the entity to return. If one of the defined components is not matched or predicted, the entity will not return. </summary>
        public static ConversationAuthoringCompositionMode RequireExactOverlap { get; } = new ConversationAuthoringCompositionMode(RequireExactOverlapValue);
        /// <summary> Every component's match or prediction is returned as a separate instance of the entity. </summary>
        public static ConversationAuthoringCompositionMode SeparateComponents { get; } = new ConversationAuthoringCompositionMode(SeparateComponentsValue);
        /// <summary> When two or more components are found in the text and overlap, the components' spans are merged together into one span combining all of them. </summary>
        public static ConversationAuthoringCompositionMode CombineComponents { get; } = new ConversationAuthoringCompositionMode(CombineComponentsValue);
        /// <summary> Determines if two <see cref="ConversationAuthoringCompositionMode"/> values are the same. </summary>
        public static bool operator ==(ConversationAuthoringCompositionMode left, ConversationAuthoringCompositionMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConversationAuthoringCompositionMode"/> values are not the same. </summary>
        public static bool operator !=(ConversationAuthoringCompositionMode left, ConversationAuthoringCompositionMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConversationAuthoringCompositionMode"/>. </summary>
        public static implicit operator ConversationAuthoringCompositionMode(string value) => new ConversationAuthoringCompositionMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConversationAuthoringCompositionMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConversationAuthoringCompositionMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
