// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Language.Conversations.Authoring.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ConversationAnalysisAuthoringModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Authoring.ProjectDeployment"/>. </summary>
        /// <param name="deploymentName"> Represents deployment name. </param>
        /// <param name="modelId"> Represents deployment modelId. </param>
        /// <param name="lastTrainedOn"> Represents deployment last trained time. </param>
        /// <param name="lastDeployedOn"> Represents deployment last deployed time. </param>
        /// <param name="deploymentExpiredOn"> Represents deployment expiration date in the runtime. </param>
        /// <param name="modelTrainingConfigVersion"> Represents model training config version. </param>
        /// <param name="assignedResources"> Represents the metadata of the assigned Azure resources. </param>
        /// <returns> A new <see cref="Authoring.ProjectDeployment"/> instance for mocking. </returns>
        public static ProjectDeployment ProjectDeployment(string deploymentName = null, string modelId = null, DateTimeOffset lastTrainedOn = default, DateTimeOffset lastDeployedOn = default, DateTimeOffset deploymentExpiredOn = default, string modelTrainingConfigVersion = null, IEnumerable<DeploymentResource> assignedResources = null)
        {
            assignedResources ??= new List<DeploymentResource>();

            return new ProjectDeployment(
                deploymentName,
                modelId,
                lastTrainedOn,
                lastDeployedOn,
                deploymentExpiredOn,
                modelTrainingConfigVersion,
                assignedResources?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.DeploymentResource"/>. </summary>
        /// <param name="resourceId"> Represents the Azure resource Id. </param>
        /// <param name="region"> Represents the resource region. </param>
        /// <returns> A new <see cref="Authoring.DeploymentResource"/> instance for mocking. </returns>
        public static DeploymentResource DeploymentResource(string resourceId = null, string region = null)
        {
            return new DeploymentResource(resourceId, region, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ProjectMetadata"/>. </summary>
        /// <param name="createdOn"> Represents the project creation datetime. </param>
        /// <param name="lastModifiedOn"> Represents the project creation datetime. </param>
        /// <param name="lastTrainedOn"> Represents the project last trained datetime. </param>
        /// <param name="lastDeployedOn"> Represents the project last deployed datetime. </param>
        /// <param name="projectKind"> Represents the project kind. </param>
        /// <param name="settings"> The project settings. </param>
        /// <param name="storageInputContainerName"> The storage container name in case of conversation summarization. </param>
        /// <param name="projectName"> The new project name. </param>
        /// <param name="multilingual"> Whether the project would be used for multiple languages or not. </param>
        /// <param name="description"> The project description. </param>
        /// <param name="language"> The project language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Authoring.ProjectMetadata"/> instance for mocking. </returns>
        public static ProjectMetadata ProjectMetadata(DateTimeOffset createdOn = default, DateTimeOffset lastModifiedOn = default, DateTimeOffset? lastTrainedOn = null, DateTimeOffset? lastDeployedOn = null, ConversationAuthoringProjectKind projectKind = default, ProjectSettings settings = null, string storageInputContainerName = null, string projectName = null, bool? multilingual = null, string description = null, string language = null)
        {
            return new ProjectMetadata(
                createdOn,
                lastModifiedOn,
                lastTrainedOn,
                lastDeployedOn,
                projectKind,
                settings,
                storageInputContainerName,
                projectName,
                multilingual,
                description,
                language,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.SupportedLanguage"/>. </summary>
        /// <param name="languageName"> The language name. </param>
        /// <param name="languageCode"> The language code. This is BCP-47 representation of a language. For example, "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Authoring.SupportedLanguage"/> instance for mocking. </returns>
        public static SupportedLanguage SupportedLanguage(string languageName = null, string languageCode = null)
        {
            return new SupportedLanguage(languageName, languageCode, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.AssignedProjectDeploymentsMetadata"/>. </summary>
        /// <param name="projectName"> Represents the project name. </param>
        /// <param name="deploymentsMetadata"> Represents the resource region. </param>
        /// <returns> A new <see cref="Authoring.AssignedProjectDeploymentsMetadata"/> instance for mocking. </returns>
        public static AssignedProjectDeploymentsMetadata AssignedProjectDeploymentsMetadata(string projectName = null, IEnumerable<AssignedProjectDeploymentMetadata> deploymentsMetadata = null)
        {
            deploymentsMetadata ??= new List<AssignedProjectDeploymentMetadata>();

            return new AssignedProjectDeploymentsMetadata(projectName, deploymentsMetadata?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.AssignedProjectDeploymentMetadata"/>. </summary>
        /// <param name="deploymentName"> Represents the deployment name. </param>
        /// <param name="lastDeployedOn"> Represents deployment last deployed time. </param>
        /// <param name="deploymentExpiresOn"> Represents deployment expiration date in the runtime. </param>
        /// <returns> A new <see cref="Authoring.AssignedProjectDeploymentMetadata"/> instance for mocking. </returns>
        public static AssignedProjectDeploymentMetadata AssignedProjectDeploymentMetadata(string deploymentName = null, DateTimeOffset lastDeployedOn = default, DateTimeOffset deploymentExpiresOn = default)
        {
            return new AssignedProjectDeploymentMetadata(deploymentName, lastDeployedOn, deploymentExpiresOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.AssignedDeploymentResource"/>. </summary>
        /// <param name="resourceId"> The resource ID. </param>
        /// <param name="region"> The resource region. </param>
        /// <returns> A new <see cref="Authoring.AssignedDeploymentResource"/> instance for mocking. </returns>
        public static AssignedDeploymentResource AssignedDeploymentResource(ResourceIdentifier resourceId = null, AzureLocation region = default)
        {
            return new AssignedDeploymentResource(resourceId, region, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.PrebuiltEntity"/>. </summary>
        /// <param name="category"> The prebuilt entity category. </param>
        /// <param name="description"> The description. </param>
        /// <param name="examples"> English examples for the entity. </param>
        /// <returns> A new <see cref="Authoring.PrebuiltEntity"/> instance for mocking. </returns>
        public static PrebuiltEntity PrebuiltEntity(string category = null, string description = null, string examples = null)
        {
            return new PrebuiltEntity(category, description, examples, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.TrainingConfigVersion"/>. </summary>
        /// <param name="trainingConfigVersionProperty"> Represents the version of the config. </param>
        /// <param name="modelExpirationDate"> Represents the training config version expiration date. </param>
        /// <returns> A new <see cref="Authoring.TrainingConfigVersion"/> instance for mocking. </returns>
        public static TrainingConfigVersion TrainingConfigVersion(string trainingConfigVersionProperty = null, DateTimeOffset modelExpirationDate = default)
        {
            return new TrainingConfigVersion(trainingConfigVersionProperty, modelExpirationDate, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.TrainingOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents training tasks detailed result. </param>
        /// <returns> A new <see cref="Authoring.TrainingOperationState"/> instance for mocking. </returns>
        public static TrainingOperationState TrainingOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null, TrainingJobResult result = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TrainingOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.TrainingJobResult"/>. </summary>
        /// <param name="modelLabel"> Represents trained model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="trainingMode"> Represents the mode of the training operation. </param>
        /// <param name="trainingStatus"> Represents the model training status. </param>
        /// <param name="evaluationStatus"> Represents model evaluation status. </param>
        /// <param name="estimatedEndOn"> Represents the estimated end date time for training and evaluation. </param>
        /// <returns> A new <see cref="Authoring.TrainingJobResult"/> instance for mocking. </returns>
        public static TrainingJobResult TrainingJobResult(string modelLabel = null, string trainingConfigVersion = null, ConversationAuthoringTrainingMode? trainingMode = null, SubTrainingOperationState trainingStatus = null, SubTrainingOperationState evaluationStatus = null, DateTimeOffset? estimatedEndOn = null)
        {
            return new TrainingJobResult(
                modelLabel,
                trainingConfigVersion,
                trainingMode,
                trainingStatus,
                evaluationStatus,
                estimatedEndOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.SubTrainingOperationState"/>. </summary>
        /// <param name="percentComplete"> Represents progress percentage. </param>
        /// <param name="startedOn"> Represents the start date time. </param>
        /// <param name="endedOn"> Represents the end date time. </param>
        /// <param name="status"> Represents the status of the sub-operation. </param>
        /// <returns> A new <see cref="Authoring.SubTrainingOperationState"/> instance for mocking. </returns>
        public static SubTrainingOperationState SubTrainingOperationState(int percentComplete = default, DateTimeOffset? startedOn = null, DateTimeOffset? endedOn = null, ConversationAuthoringOperationStatus status = default)
        {
            return new SubTrainingOperationState(percentComplete, startedOn, endedOn, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ProjectTrainedModel"/>. </summary>
        /// <param name="label"> The trained model label. </param>
        /// <param name="modelId"> The model ID. </param>
        /// <param name="lastTrainedOn"> The last trained date time of the model. </param>
        /// <param name="lastTrainingDurationInSeconds"> The duration of the model's last training request in seconds. </param>
        /// <param name="modelExpiredOn"> The model expiration date. </param>
        /// <param name="modelTrainingConfigVersion"> The model training config version. </param>
        /// <param name="hasSnapshot"> The flag to indicate if the trained model has a snapshot ready. </param>
        /// <returns> A new <see cref="Authoring.ProjectTrainedModel"/> instance for mocking. </returns>
        public static ProjectTrainedModel ProjectTrainedModel(string label = null, string modelId = null, DateTimeOffset lastTrainedOn = default, int lastTrainingDurationInSeconds = default, DateTimeOffset modelExpiredOn = default, string modelTrainingConfigVersion = null, bool hasSnapshot = default)
        {
            return new ProjectTrainedModel(
                label,
                modelId,
                lastTrainedOn,
                lastTrainingDurationInSeconds,
                modelExpiredOn,
                modelTrainingConfigVersion,
                hasSnapshot,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ExportedTrainedModel"/>. </summary>
        /// <param name="exportedModelName"> The exported model name. </param>
        /// <param name="modelId"> The model ID. </param>
        /// <param name="lastTrainedOn"> The last trained date time of the model. </param>
        /// <param name="lastExportedModelOn"> The last exported date time of the model. </param>
        /// <param name="modelExpiredOn"> The model expiration date. </param>
        /// <param name="modelTrainingConfigVersion"> The model training config version. </param>
        /// <returns> A new <see cref="Authoring.ExportedTrainedModel"/> instance for mocking. </returns>
        public static ExportedTrainedModel ExportedTrainedModel(string exportedModelName = null, string modelId = null, DateTimeOffset lastTrainedOn = default, DateTimeOffset lastExportedModelOn = default, DateTimeOffset modelExpiredOn = default, string modelTrainingConfigVersion = null)
        {
            return new ExportedTrainedModel(
                exportedModelName,
                modelId,
                lastTrainedOn,
                lastExportedModelOn,
                modelExpiredOn,
                modelTrainingConfigVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.EvaluationJobResult"/>. </summary>
        /// <param name="evaluationDetails"> Represents the options used running the evaluation. </param>
        /// <param name="modelLabel"> Represents trained model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="percentComplete"> Represents progress percentage. </param>
        /// <returns> A new <see cref="Authoring.EvaluationJobResult"/> instance for mocking. </returns>
        public static EvaluationJobResult EvaluationJobResult(EvaluationDetails evaluationDetails = null, string modelLabel = null, string trainingConfigVersion = null, int percentComplete = default)
        {
            return new EvaluationJobResult(evaluationDetails, modelLabel, trainingConfigVersion, percentComplete, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.EvaluationOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents evaluation task detailed result. </param>
        /// <returns> A new <see cref="Authoring.EvaluationOperationState"/> instance for mocking. </returns>
        public static EvaluationOperationState EvaluationOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null, EvaluationJobResult result = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new EvaluationOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.LoadSnapshotOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.LoadSnapshotOperationState"/> instance for mocking. </returns>
        public static LoadSnapshotOperationState LoadSnapshotOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new LoadSnapshotOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.UtteranceEvaluationResult"/>. </summary>
        /// <param name="text"> Represents the utterance text. </param>
        /// <param name="language"> Represents the utterance language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="entitiesResult"> Represents the entities results for the utterance. </param>
        /// <param name="intentsResult"> Represents the intents results for the utterance. </param>
        /// <returns> A new <see cref="Authoring.UtteranceEvaluationResult"/> instance for mocking. </returns>
        public static UtteranceEvaluationResult UtteranceEvaluationResult(string text = null, string language = null, UtteranceEntitiesEvaluationResult entitiesResult = null, UtteranceIntentsEvaluationResult intentsResult = null)
        {
            return new UtteranceEvaluationResult(text, language, entitiesResult, intentsResult, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.UtteranceEntitiesEvaluationResult"/>. </summary>
        /// <param name="expectedEntities"> Represents the expected entity labels. </param>
        /// <param name="predictedEntities"> Represents the predicted entity labels. </param>
        /// <returns> A new <see cref="Authoring.UtteranceEntitiesEvaluationResult"/> instance for mocking. </returns>
        public static UtteranceEntitiesEvaluationResult UtteranceEntitiesEvaluationResult(IEnumerable<UtteranceEntityEvaluationResult> expectedEntities = null, IEnumerable<UtteranceEntityEvaluationResult> predictedEntities = null)
        {
            expectedEntities ??= new List<UtteranceEntityEvaluationResult>();
            predictedEntities ??= new List<UtteranceEntityEvaluationResult>();

            return new UtteranceEntitiesEvaluationResult(expectedEntities?.ToList(), predictedEntities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.UtteranceEntityEvaluationResult"/>. </summary>
        /// <param name="category"> Represents the entity category. </param>
        /// <param name="offset"> Represents the entity offset index relative to the original text. </param>
        /// <param name="length"> Represents the entity length. </param>
        /// <returns> A new <see cref="Authoring.UtteranceEntityEvaluationResult"/> instance for mocking. </returns>
        public static UtteranceEntityEvaluationResult UtteranceEntityEvaluationResult(string category = null, int offset = default, int length = default)
        {
            return new UtteranceEntityEvaluationResult(category, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.UtteranceIntentsEvaluationResult"/>. </summary>
        /// <param name="expectedIntent"> Represents the utterance's expected intent. </param>
        /// <param name="predictedIntent"> Represents the utterance's predicted intent. </param>
        /// <returns> A new <see cref="Authoring.UtteranceIntentsEvaluationResult"/> instance for mocking. </returns>
        public static UtteranceIntentsEvaluationResult UtteranceIntentsEvaluationResult(string expectedIntent = null, string predictedIntent = null)
        {
            return new UtteranceIntentsEvaluationResult(expectedIntent, predictedIntent, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.EvaluationSummary"/>. </summary>
        /// <param name="entitiesEvaluation"> Contains the data related to entities evaluation. </param>
        /// <param name="intentsEvaluation"> Contains the data related to intents evaluation. </param>
        /// <param name="evaluationOptions"> The options that were used while running the evaluation. </param>
        /// <returns> A new <see cref="Authoring.EvaluationSummary"/> instance for mocking. </returns>
        public static EvaluationSummary EvaluationSummary(EntitiesEvaluationSummary entitiesEvaluation = null, IntentsEvaluationSummary intentsEvaluation = null, EvaluationDetails evaluationOptions = null)
        {
            return new EvaluationSummary(entitiesEvaluation, intentsEvaluation, evaluationOptions, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.EntitiesEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix"> Represents the confusion matrix between two entities (the two entities can be the same). The matrix is between the entity that was labelled and the entity that was predicted. </param>
        /// <param name="entities"> Represents the entities evaluation summary. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Authoring.EntitiesEvaluationSummary"/> instance for mocking. </returns>
        public static EntitiesEvaluationSummary EntitiesEvaluationSummary(IReadOnlyDictionary<string, ConversationAuthoringConfusionMatrixRow> confusionMatrix = null, IReadOnlyDictionary<string, EntityEvaluationSummary> entities = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            confusionMatrix ??= new Dictionary<string, ConversationAuthoringConfusionMatrixRow>();
            entities ??= new Dictionary<string, EntityEvaluationSummary>();

            return new EntitiesEvaluationSummary(
                confusionMatrix,
                entities,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ConversationAuthoringConfusionMatrixRow"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Authoring.ConversationAuthoringConfusionMatrixRow"/> instance for mocking. </returns>
        public static ConversationAuthoringConfusionMatrixRow ConversationAuthoringConfusionMatrixRow(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ConversationAuthoringConfusionMatrixRow(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ConversationAuthoringConfusionMatrixCell"/>. </summary>
        /// <param name="normalizedValue"> Represents normalized value in percentages. </param>
        /// <param name="rawValue"> Represents raw value. </param>
        /// <returns> A new <see cref="Authoring.ConversationAuthoringConfusionMatrixCell"/> instance for mocking. </returns>
        public static ConversationAuthoringConfusionMatrixCell ConversationAuthoringConfusionMatrixCell(float normalizedValue = default, float rawValue = default)
        {
            return new ConversationAuthoringConfusionMatrixCell(normalizedValue, rawValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.EntityEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model F1 score. </param>
        /// <param name="precision"> Represents the model precision. </param>
        /// <param name="recall"> Represents the model precision. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Authoring.EntityEvaluationSummary"/> instance for mocking. </returns>
        public static EntityEvaluationSummary EntityEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new EntityEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.IntentsEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix"> Represents the confusion matrix between two intents (the two intents can be the same). The matrix is between the intent that was labelled and the intent that was predicted. </param>
        /// <param name="intents"> Represents the intents evaluation summary. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Authoring.IntentsEvaluationSummary"/> instance for mocking. </returns>
        public static IntentsEvaluationSummary IntentsEvaluationSummary(IReadOnlyDictionary<string, ConversationAuthoringConfusionMatrixRow> confusionMatrix = null, IReadOnlyDictionary<string, IntentEvaluationSummary> intents = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            confusionMatrix ??= new Dictionary<string, ConversationAuthoringConfusionMatrixRow>();
            intents ??= new Dictionary<string, IntentEvaluationSummary>();

            return new IntentsEvaluationSummary(
                confusionMatrix,
                intents,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.IntentEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Authoring.IntentEvaluationSummary"/> instance for mocking. </returns>
        public static IntentEvaluationSummary IntentEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new IntentEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ExportedModelOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.ExportedModelOperationState"/> instance for mocking. </returns>
        public static ExportedModelOperationState ExportedModelOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new ExportedModelOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.DeploymentResourcesOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.DeploymentResourcesOperationState"/> instance for mocking. </returns>
        public static DeploymentResourcesOperationState DeploymentResourcesOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new DeploymentResourcesOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.SwapDeploymentsOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.SwapDeploymentsOperationState"/> instance for mocking. </returns>
        public static SwapDeploymentsOperationState SwapDeploymentsOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new SwapDeploymentsOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.CreateProjectDetails"/>. </summary>
        /// <param name="projectKind"> Represents the project kind. </param>
        /// <param name="settings"> The project settings. </param>
        /// <param name="storageInputContainerName"> The storage container name in case of conversation summarization. </param>
        /// <param name="projectName"> The new project name. </param>
        /// <param name="multilingual"> Whether the project would be used for multiple languages or not. </param>
        /// <param name="description"> The project description. </param>
        /// <param name="language"> The project language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Authoring.CreateProjectDetails"/> instance for mocking. </returns>
        public static CreateProjectDetails CreateProjectDetails(ConversationAuthoringProjectKind projectKind = default, ProjectSettings settings = null, string storageInputContainerName = null, string projectName = null, bool? multilingual = null, string description = null, string language = null)
        {
            return new CreateProjectDetails(
                projectKind,
                settings,
                storageInputContainerName,
                projectName,
                multilingual,
                description,
                language,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ProjectDeletionOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.ProjectDeletionOperationState"/> instance for mocking. </returns>
        public static ProjectDeletionOperationState ProjectDeletionOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new ProjectDeletionOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ExportProjectOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="resultUri"> The URL to use in order to download the exported project. </param>
        /// <returns> A new <see cref="Authoring.ExportProjectOperationState"/> instance for mocking. </returns>
        public static ExportProjectOperationState ExportProjectOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null, string resultUri = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new ExportProjectOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                resultUri,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ExportedProject"/>. </summary>
        /// <param name="projectFileVersion"> The version of the exported file. </param>
        /// <param name="stringIndexType"> Specifies the method used to interpret string offsets. For additional information see https://aka.ms/text-analytics-offsets. </param>
        /// <param name="metadata"> Represents the project metadata. </param>
        /// <param name="assets">
        /// Represents the project assets.
        /// Please note <see cref="ExportedProjectAsset"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ConversationExportedProjectAsset"/> and <see cref="OrchestrationExportedProjectAsset"/>.
        /// </param>
        /// <returns> A new <see cref="Authoring.ExportedProject"/> instance for mocking. </returns>
        public static ExportedProject ExportedProject(string projectFileVersion = null, StringIndexType stringIndexType = default, CreateProjectDetails metadata = null, ExportedProjectAsset assets = null)
        {
            return new ExportedProject(projectFileVersion, stringIndexType, metadata, assets, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ConversationExportedEntity"/>. </summary>
        /// <param name="category"> The category of the entity. </param>
        /// <param name="compositionMode"> The behavior to follow when the entity's components overlap with each other. </param>
        /// <param name="entities"> The list component of the entity. </param>
        /// <param name="prebuilts"> The prebuilt entities components. </param>
        /// <param name="regex"> The regex component of the entity. </param>
        /// <param name="requiredComponents"> The required components. Allowed values are 'learned', 'list', 'prebuilts' and 'regex'. </param>
        /// <returns> A new <see cref="Authoring.ConversationExportedEntity"/> instance for mocking. </returns>
        public static ConversationExportedEntity ConversationExportedEntity(string category = null, ConversationAuthoringCompositionMode? compositionMode = null, ExportedEntityList entities = null, IEnumerable<ExportedPrebuiltEntity> prebuilts = null, ExportedEntityRegex regex = null, IEnumerable<string> requiredComponents = null)
        {
            prebuilts ??= new List<ExportedPrebuiltEntity>();
            requiredComponents ??= new List<string>();

            return new ConversationExportedEntity(
                category,
                compositionMode,
                entities,
                prebuilts?.ToList(),
                regex,
                requiredComponents?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ConversationExportedUtterance"/>. </summary>
        /// <param name="entities"> Represents the entity labels of the utterance. </param>
        /// <param name="text"> The utterance text. </param>
        /// <param name="language"> Represents the utterance's language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="intent"> The intent of the utterance. </param>
        /// <param name="dataset"> The dataset for this utterance. Allowed values are 'Train' and 'Test'. </param>
        /// <returns> A new <see cref="Authoring.ConversationExportedUtterance"/> instance for mocking. </returns>
        public static ConversationExportedUtterance ConversationExportedUtterance(IEnumerable<ExportedUtteranceEntityLabel> entities = null, string text = null, string language = null, string intent = null, DatasetType? dataset = null)
        {
            entities ??= new List<ExportedUtteranceEntityLabel>();

            return new ConversationExportedUtterance(
                entities?.ToList(),
                text,
                language,
                intent,
                dataset,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.OrchestrationExportedIntent"/>. </summary>
        /// <param name="orchestration">
        /// Specifies the behavior of this intent in the orchestration flow.
        /// Please note <see cref="ExportedOrchestrationDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Authoring.ExportedConversationOrchestrationDetails"/>, <see cref="Authoring.ExportedLuisOrchestrationDetails"/> and <see cref="Authoring.ExportedQuestionAnsweringOrchestrationDetails"/>.
        /// </param>
        /// <param name="category"> The intent category. </param>
        /// <returns> A new <see cref="Authoring.OrchestrationExportedIntent"/> instance for mocking. </returns>
        public static OrchestrationExportedIntent OrchestrationExportedIntent(ExportedOrchestrationDetails orchestration = null, string category = null)
        {
            return new OrchestrationExportedIntent(orchestration, category, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ExportedConversationOrchestrationDetails"/>. </summary>
        /// <param name="conversationOrchestration"> The Conversational project target details. </param>
        /// <returns> A new <see cref="Authoring.ExportedConversationOrchestrationDetails"/> instance for mocking. </returns>
        public static ExportedConversationOrchestrationDetails ExportedConversationOrchestrationDetails(ExportedConversationOrchestration conversationOrchestration = null)
        {
            return new ExportedConversationOrchestrationDetails(OrchestrationTargetProjectKind.Conversation, serializedAdditionalRawData: null, conversationOrchestration);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ExportedLuisOrchestrationDetails"/>. </summary>
        /// <param name="luisOrchestration"> The LUIS application target details. </param>
        /// <returns> A new <see cref="Authoring.ExportedLuisOrchestrationDetails"/> instance for mocking. </returns>
        public static ExportedLuisOrchestrationDetails ExportedLuisOrchestrationDetails(ExportedLuisOrchestration luisOrchestration = null)
        {
            return new ExportedLuisOrchestrationDetails(OrchestrationTargetProjectKind.Luis, serializedAdditionalRawData: null, luisOrchestration);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ExportedLuisOrchestration"/>. </summary>
        /// <param name="appId"> The LUIS application ID. </param>
        /// <param name="appVersion"> The targeted version Id. </param>
        /// <param name="slotName"> The targeted slot name. </param>
        /// <returns> A new <see cref="Authoring.ExportedLuisOrchestration"/> instance for mocking. </returns>
        public static ExportedLuisOrchestration ExportedLuisOrchestration(Guid appId = default, string appVersion = null, string slotName = null)
        {
            return new ExportedLuisOrchestration(appId, appVersion, slotName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ExportedQuestionAnsweringOrchestrationDetails"/>. </summary>
        /// <param name="questionAnsweringOrchestration"> The Question Answering project details. </param>
        /// <returns> A new <see cref="Authoring.ExportedQuestionAnsweringOrchestrationDetails"/> instance for mocking. </returns>
        public static ExportedQuestionAnsweringOrchestrationDetails ExportedQuestionAnsweringOrchestrationDetails(ExportedQuestionAnsweringOrchestration questionAnsweringOrchestration = null)
        {
            return new ExportedQuestionAnsweringOrchestrationDetails(OrchestrationTargetProjectKind.QuestionAnswering, serializedAdditionalRawData: null, questionAnsweringOrchestration);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.OrchestrationExportedUtterance"/>. </summary>
        /// <param name="text"> The utterance text. </param>
        /// <param name="language"> Represents the utterance's language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="intent"> The intent of the utterance. </param>
        /// <param name="dataset"> The dataset for this utterance. Allowed values are 'Train' and 'Test'. </param>
        /// <returns> A new <see cref="Authoring.OrchestrationExportedUtterance"/> instance for mocking. </returns>
        public static OrchestrationExportedUtterance OrchestrationExportedUtterance(string text = null, string language = null, string intent = null, string dataset = null)
        {
            return new OrchestrationExportedUtterance(text, language, intent, dataset, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ImportProjectOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.ImportProjectOperationState"/> instance for mocking. </returns>
        public static ImportProjectOperationState ImportProjectOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new ImportProjectOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.CopyProjectOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.CopyProjectOperationState"/> instance for mocking. </returns>
        public static CopyProjectOperationState CopyProjectOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new CopyProjectOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.TrainingJobDetails"/>. </summary>
        /// <param name="modelLabel"> Represents the output model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. By default, "latest" value is used which uses the latest released training config version. </param>
        /// <param name="trainingMode"> Represents the mode of the training operation. </param>
        /// <param name="evaluationOptions"> Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage as 80, and testing split percentage as 20. </param>
        /// <returns> A new <see cref="Authoring.TrainingJobDetails"/> instance for mocking. </returns>
        public static TrainingJobDetails TrainingJobDetails(string modelLabel = null, string trainingConfigVersion = null, ConversationAuthoringTrainingMode trainingMode = default, EvaluationDetails evaluationOptions = null)
        {
            return new TrainingJobDetails(modelLabel, trainingConfigVersion, trainingMode, evaluationOptions, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.CreateDeploymentDetails"/>. </summary>
        /// <param name="trainedModelLabel"> Represents the trained model label. </param>
        /// <param name="assignedResourceIds"> Represents the resource IDs to be assigned to the deployment. If provided, the deployment will be rolled out to the resources provided here as well as the original resource in which the project is created. </param>
        /// <returns> A new <see cref="Authoring.CreateDeploymentDetails"/> instance for mocking. </returns>
        public static CreateDeploymentDetails CreateDeploymentDetails(string trainedModelLabel = null, IEnumerable<string> assignedResourceIds = null)
        {
            assignedResourceIds ??= new List<string>();

            return new CreateDeploymentDetails(trainedModelLabel, assignedResourceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.DeploymentOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.DeploymentOperationState"/> instance for mocking. </returns>
        public static DeploymentOperationState DeploymentOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new DeploymentOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.DeploymentDeleteFromResourcesOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.DeploymentDeleteFromResourcesOperationState"/> instance for mocking. </returns>
        public static DeploymentDeleteFromResourcesOperationState DeploymentDeleteFromResourcesOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, ConversationAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new DeploymentDeleteFromResourcesOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }
    }
}
