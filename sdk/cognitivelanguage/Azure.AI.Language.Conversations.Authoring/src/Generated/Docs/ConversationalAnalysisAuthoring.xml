<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetProjectAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetProjectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<ProjectMetadata> response = await client.GetProjectAsync("<projectName>");
]]></code>
This sample shows how to call GetProjectAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<ProjectMetadata> response = await client.GetProjectAsync("<projectName>");
]]></code></example>
    </member>
    <member name="GetProject(string,CancellationToken)">
      <example>
This sample shows how to call GetProject.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<ProjectMetadata> response = client.GetProject("<projectName>");
]]></code>
This sample shows how to call GetProject with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<ProjectMetadata> response = client.GetProject("<projectName>");
]]></code></example>
    </member>
    <member name="GetProjectAsync(string,RequestContext)">
      <example>
This sample shows how to call GetProjectAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetProjectAsync("<projectName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code>
This sample shows how to call GetProjectAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetProjectAsync("<projectName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code></example>
    </member>
    <member name="GetProject(string,RequestContext)">
      <example>
This sample shows how to call GetProject and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetProject("<projectName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code>
This sample shows how to call GetProject with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetProject("<projectName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code></example>
    </member>
    <member name="CreateProjectAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateProjectAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    projectName = "<projectName>",
    language = "<language>",
});
Response response = await client.CreateProjectAsync("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code>
This sample shows how to call CreateProjectAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    settings = new
    {
        confidenceThreshold = 123.45F,
    },
    storageInputContainerName = "<storageInputContainerName>",
    projectName = "<projectName>",
    multilingual = true,
    description = "<description>",
    language = "<language>",
});
Response response = await client.CreateProjectAsync("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code></example>
    </member>
    <member name="CreateProject(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateProject and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    projectName = "<projectName>",
    language = "<language>",
});
Response response = client.CreateProject("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code>
This sample shows how to call CreateProject with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    settings = new
    {
        confidenceThreshold = 123.45F,
    },
    storageInputContainerName = "<storageInputContainerName>",
    projectName = "<projectName>",
    multilingual = true,
    description = "<description>",
    language = "<language>",
});
Response response = client.CreateProject("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code></example>
    </member>
    <member name="CopyProjectAuthorizationAsync(string,ProjectKind,string,bool?,CancellationToken)">
      <example>
This sample shows how to call CopyProjectAuthorizationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<CopyProjectConfig> response = await client.CopyProjectAuthorizationAsync("<projectName>", ProjectKind.Conversation);
]]></code>
This sample shows how to call CopyProjectAuthorizationAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<CopyProjectConfig> response = await client.CopyProjectAuthorizationAsync("<projectName>", ProjectKind.Conversation, storageInputContainerName: "<storageInputContainerName>", allowOverwrite: true);
]]></code></example>
    </member>
    <member name="CopyProjectAuthorization(string,ProjectKind,string,bool?,CancellationToken)">
      <example>
This sample shows how to call CopyProjectAuthorization.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<CopyProjectConfig> response = client.CopyProjectAuthorization("<projectName>", ProjectKind.Conversation);
]]></code>
This sample shows how to call CopyProjectAuthorization with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<CopyProjectConfig> response = client.CopyProjectAuthorization("<projectName>", ProjectKind.Conversation, storageInputContainerName: "<storageInputContainerName>", allowOverwrite: true);
]]></code></example>
    </member>
    <member name="CopyProjectAuthorizationAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CopyProjectAuthorizationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
});
Response response = await client.CopyProjectAuthorizationAsync("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("targetProjectName").ToString());
Console.WriteLine(result.GetProperty("accessToken").ToString());
Console.WriteLine(result.GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("targetResourceId").ToString());
Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
]]></code>
This sample shows how to call CopyProjectAuthorizationAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    storageInputContainerName = "<storageInputContainerName>",
    allowOverwrite = true,
});
Response response = await client.CopyProjectAuthorizationAsync("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("targetProjectName").ToString());
Console.WriteLine(result.GetProperty("accessToken").ToString());
Console.WriteLine(result.GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("targetResourceId").ToString());
Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
]]></code></example>
    </member>
    <member name="CopyProjectAuthorization(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CopyProjectAuthorization and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
});
Response response = client.CopyProjectAuthorization("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("targetProjectName").ToString());
Console.WriteLine(result.GetProperty("accessToken").ToString());
Console.WriteLine(result.GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("targetResourceId").ToString());
Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
]]></code>
This sample shows how to call CopyProjectAuthorization with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    storageInputContainerName = "<storageInputContainerName>",
    allowOverwrite = true,
});
Response response = client.CopyProjectAuthorization("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("targetProjectName").ToString());
Console.WriteLine(result.GetProperty("accessToken").ToString());
Console.WriteLine(result.GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("targetResourceId").ToString());
Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
]]></code></example>
    </member>
    <member name="GetCopyProjectStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetCopyProjectStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetCopyProjectStatusResult> response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetCopyProjectStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetCopyProjectStatusResult> response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetCopyProjectStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetCopyProjectStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetCopyProjectStatusResult> response = client.GetCopyProjectStatus("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetCopyProjectStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetCopyProjectStatusResult> response = client.GetCopyProjectStatus("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetCopyProjectStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetCopyProjectStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetCopyProjectStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetCopyProjectStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetCopyProjectStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetCopyProjectStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetCopyProjectStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetCopyProjectStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentResult> response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
]]></code>
This sample shows how to call GetDeploymentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentResult> response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
]]></code></example>
    </member>
    <member name="GetDeployment(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeployment.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentResult> response = client.GetDeployment("<projectName>", "<deploymentName>");
]]></code>
This sample shows how to call GetDeployment with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentResult> response = client.GetDeployment("<projectName>", "<deploymentName>");
]]></code></example>
    </member>
    <member name="GetDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
]]></code>
This sample shows how to call GetDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
]]></code></example>
    </member>
    <member name="GetDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetDeployment("<projectName>", "<deploymentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
]]></code>
This sample shows how to call GetDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetDeployment("<projectName>", "<deploymentName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentDeleteFromResourcesStatusAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentDeleteFromResourcesStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentDeleteFromResourcesStatusResult> response = await client.GetDeploymentDeleteFromResourcesStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetDeploymentDeleteFromResourcesStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentDeleteFromResourcesStatusResult> response = await client.GetDeploymentDeleteFromResourcesStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentDeleteFromResourcesStatus(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentDeleteFromResourcesStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentDeleteFromResourcesStatusResult> response = client.GetDeploymentDeleteFromResourcesStatus("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetDeploymentDeleteFromResourcesStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentDeleteFromResourcesStatusResult> response = client.GetDeploymentDeleteFromResourcesStatus("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentDeleteFromResourcesStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentDeleteFromResourcesStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetDeploymentDeleteFromResourcesStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetDeploymentDeleteFromResourcesStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetDeploymentDeleteFromResourcesStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentDeleteFromResourcesStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentDeleteFromResourcesStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetDeploymentDeleteFromResourcesStatus("<projectName>", "<deploymentName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetDeploymentDeleteFromResourcesStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetDeploymentDeleteFromResourcesStatus("<projectName>", "<deploymentName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentStatusResult> response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetDeploymentStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentStatusResult> response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentStatusResult> response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetDeploymentStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetDeploymentStatusResult> response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetDeploymentStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetDeploymentStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetSwapDeploymentsStatusResult> response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetSwapDeploymentsStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetSwapDeploymentsStatusResult> response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetSwapDeploymentsStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetSwapDeploymentsStatusResult> response = client.GetSwapDeploymentsStatus("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetSwapDeploymentsStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetSwapDeploymentsStatusResult> response = client.GetSwapDeploymentsStatus("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetSwapDeploymentsStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetSwapDeploymentsStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetSwapDeploymentsStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetExportStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetExportStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportStatusResult> response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetExportStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportStatusResult> response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetExportStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetExportStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportStatusResult> response = client.GetExportStatus("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetExportStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportStatusResult> response = client.GetExportStatus("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetExportStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetExportStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetExportStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("resultUrl").ToString());
]]></code></example>
    </member>
    <member name="GetExportStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetExportStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetExportStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetExportStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetExportStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("resultUrl").ToString());
]]></code></example>
    </member>
    <member name="GetImportStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetImportStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetImportStatusResult> response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetImportStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetImportStatusResult> response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetImportStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetImportStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetImportStatusResult> response = client.GetImportStatus("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetImportStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetImportStatusResult> response = client.GetImportStatus("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetImportStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetImportStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetImportStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetImportStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetImportStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetImportStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetImportStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetImportStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetTrainedModelAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetTrainedModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetTrainedModelResult> response = await client.GetTrainedModelAsync("<projectName>", "<trainedModelLabel>");
]]></code>
This sample shows how to call GetTrainedModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetTrainedModelResult> response = await client.GetTrainedModelAsync("<projectName>", "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="GetTrainedModel(string,string,CancellationToken)">
      <example>
This sample shows how to call GetTrainedModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetTrainedModelResult> response = client.GetTrainedModel("<projectName>", "<trainedModelLabel>");
]]></code>
This sample shows how to call GetTrainedModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetTrainedModelResult> response = client.GetTrainedModel("<projectName>", "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="GetTrainedModelAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetTrainedModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetTrainedModelAsync("<projectName>", "<trainedModelLabel>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainingDurationInSeconds").ToString());
Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("hasSnapshot").ToString());
]]></code>
This sample shows how to call GetTrainedModelAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetTrainedModelAsync("<projectName>", "<trainedModelLabel>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainingDurationInSeconds").ToString());
Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("hasSnapshot").ToString());
]]></code></example>
    </member>
    <member name="GetTrainedModel(string,string,RequestContext)">
      <example>
This sample shows how to call GetTrainedModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetTrainedModel("<projectName>", "<trainedModelLabel>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainingDurationInSeconds").ToString());
Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("hasSnapshot").ToString());
]]></code>
This sample shows how to call GetTrainedModel with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetTrainedModel("<projectName>", "<trainedModelLabel>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainingDurationInSeconds").ToString());
Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("hasSnapshot").ToString());
]]></code></example>
    </member>
    <member name="DeleteTrainedModelAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteTrainedModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.DeleteTrainedModelAsync("<projectName>", "<trainedModelLabel>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTrainedModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.DeleteTrainedModelAsync("<projectName>", "<trainedModelLabel>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTrainedModel(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteTrainedModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.DeleteTrainedModel("<projectName>", "<trainedModelLabel>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTrainedModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.DeleteTrainedModel("<projectName>", "<trainedModelLabel>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetEvaluationStatusAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetEvaluationStatusResult> response = await client.GetEvaluationStatusAsync("<projectName>", "<trainedModelLabel>", "<jobId>");
]]></code>
This sample shows how to call GetEvaluationStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetEvaluationStatusResult> response = await client.GetEvaluationStatusAsync("<projectName>", "<trainedModelLabel>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetEvaluationStatus(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetEvaluationStatusResult> response = client.GetEvaluationStatus("<projectName>", "<trainedModelLabel>", "<jobId>");
]]></code>
This sample shows how to call GetEvaluationStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetEvaluationStatusResult> response = client.GetEvaluationStatus("<projectName>", "<trainedModelLabel>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetEvaluationStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetEvaluationStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetEvaluationStatusAsync("<projectName>", "<trainedModelLabel>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationOptions").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("percentComplete").ToString());
]]></code>
This sample shows how to call GetEvaluationStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetEvaluationStatusAsync("<projectName>", "<trainedModelLabel>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationOptions").GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationOptions").GetProperty("trainingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationOptions").GetProperty("testingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("percentComplete").ToString());
]]></code></example>
    </member>
    <member name="GetEvaluationStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetEvaluationStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetEvaluationStatus("<projectName>", "<trainedModelLabel>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationOptions").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("percentComplete").ToString());
]]></code>
This sample shows how to call GetEvaluationStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetEvaluationStatus("<projectName>", "<trainedModelLabel>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationOptions").GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationOptions").GetProperty("trainingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationOptions").GetProperty("testingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("percentComplete").ToString());
]]></code></example>
    </member>
    <member name="GetModelEvaluationSummaryAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetModelEvaluationSummaryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<EvaluationSummary> response = await client.GetModelEvaluationSummaryAsync("<projectName>", "<trainedModelLabel>");
]]></code>
This sample shows how to call GetModelEvaluationSummaryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<EvaluationSummary> response = await client.GetModelEvaluationSummaryAsync("<projectName>", "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="GetModelEvaluationSummary(string,string,CancellationToken)">
      <example>
This sample shows how to call GetModelEvaluationSummary.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<EvaluationSummary> response = client.GetModelEvaluationSummary("<projectName>", "<trainedModelLabel>");
]]></code>
This sample shows how to call GetModelEvaluationSummary with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<EvaluationSummary> response = client.GetModelEvaluationSummary("<projectName>", "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="GetModelEvaluationSummaryAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetModelEvaluationSummaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetModelEvaluationSummaryAsync("<projectName>", "<trainedModelLabel>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("confusionMatrix").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("f1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("precision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("recall").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("truePositiveCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("trueNegativeCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("falsePositiveCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("falseNegativeCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microF1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microPrecision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microRecall").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroF1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroPrecision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroRecall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("confusionMatrix").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("f1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("precision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("recall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("truePositiveCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("trueNegativeCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("falsePositiveCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("falseNegativeCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microF1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microPrecision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microRecall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroF1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroPrecision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroRecall").ToString());
]]></code>
This sample shows how to call GetModelEvaluationSummaryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetModelEvaluationSummaryAsync("<projectName>", "<trainedModelLabel>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("confusionMatrix").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("f1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("precision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("recall").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("truePositiveCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("trueNegativeCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("falsePositiveCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("falseNegativeCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microF1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microPrecision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microRecall").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroF1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroPrecision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroRecall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("confusionMatrix").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("f1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("precision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("recall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("truePositiveCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("trueNegativeCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("falsePositiveCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("falseNegativeCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microF1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microPrecision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microRecall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroF1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroPrecision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroRecall").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("trainingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("testingSplitPercentage").ToString());
]]></code></example>
    </member>
    <member name="GetModelEvaluationSummary(string,string,RequestContext)">
      <example>
This sample shows how to call GetModelEvaluationSummary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetModelEvaluationSummary("<projectName>", "<trainedModelLabel>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("confusionMatrix").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("f1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("precision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("recall").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("truePositiveCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("trueNegativeCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("falsePositiveCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("falseNegativeCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microF1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microPrecision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microRecall").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroF1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroPrecision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroRecall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("confusionMatrix").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("f1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("precision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("recall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("truePositiveCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("trueNegativeCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("falsePositiveCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("falseNegativeCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microF1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microPrecision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microRecall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroF1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroPrecision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroRecall").ToString());
]]></code>
This sample shows how to call GetModelEvaluationSummary with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetModelEvaluationSummary("<projectName>", "<trainedModelLabel>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("confusionMatrix").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("f1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("precision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("recall").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("truePositiveCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("trueNegativeCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("falsePositiveCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("entities").GetProperty("<key>").GetProperty("falseNegativeCount").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microF1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microPrecision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("microRecall").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroF1").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroPrecision").ToString());
Console.WriteLine(result.GetProperty("entitiesEvaluation").GetProperty("macroRecall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("confusionMatrix").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("f1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("precision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("recall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("truePositiveCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("trueNegativeCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("falsePositiveCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("intents").GetProperty("<key>").GetProperty("falseNegativeCount").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microF1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microPrecision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("microRecall").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroF1").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroPrecision").ToString());
Console.WriteLine(result.GetProperty("intentsEvaluation").GetProperty("macroRecall").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("trainingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("testingSplitPercentage").ToString());
]]></code></example>
    </member>
    <member name="GetLoadSnapshotStatusAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetLoadSnapshotStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetLoadSnapshotStatusResult> response = await client.GetLoadSnapshotStatusAsync("<projectName>", "<trainedModelLabel>", "<jobId>");
]]></code>
This sample shows how to call GetLoadSnapshotStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetLoadSnapshotStatusResult> response = await client.GetLoadSnapshotStatusAsync("<projectName>", "<trainedModelLabel>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetLoadSnapshotStatus(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetLoadSnapshotStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetLoadSnapshotStatusResult> response = client.GetLoadSnapshotStatus("<projectName>", "<trainedModelLabel>", "<jobId>");
]]></code>
This sample shows how to call GetLoadSnapshotStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetLoadSnapshotStatusResult> response = client.GetLoadSnapshotStatus("<projectName>", "<trainedModelLabel>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetLoadSnapshotStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetLoadSnapshotStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetLoadSnapshotStatusAsync("<projectName>", "<trainedModelLabel>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetLoadSnapshotStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetLoadSnapshotStatusAsync("<projectName>", "<trainedModelLabel>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetLoadSnapshotStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetLoadSnapshotStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetLoadSnapshotStatus("<projectName>", "<trainedModelLabel>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetLoadSnapshotStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetLoadSnapshotStatus("<projectName>", "<trainedModelLabel>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetAssignDeploymentResourcesStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetAssignDeploymentResourcesStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetAssignDeploymentResourcesStatusResult> response = await client.GetAssignDeploymentResourcesStatusAsync("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetAssignDeploymentResourcesStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetAssignDeploymentResourcesStatusResult> response = await client.GetAssignDeploymentResourcesStatusAsync("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetAssignDeploymentResourcesStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetAssignDeploymentResourcesStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetAssignDeploymentResourcesStatusResult> response = client.GetAssignDeploymentResourcesStatus("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetAssignDeploymentResourcesStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetAssignDeploymentResourcesStatusResult> response = client.GetAssignDeploymentResourcesStatus("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetAssignDeploymentResourcesStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetAssignDeploymentResourcesStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetAssignDeploymentResourcesStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetAssignDeploymentResourcesStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetAssignDeploymentResourcesStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetAssignDeploymentResourcesStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetAssignDeploymentResourcesStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetAssignDeploymentResourcesStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetAssignDeploymentResourcesStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetAssignDeploymentResourcesStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetUnassignDeploymentResourcesStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetUnassignDeploymentResourcesStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetUnassignDeploymentResourcesStatusResult> response = await client.GetUnassignDeploymentResourcesStatusAsync("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetUnassignDeploymentResourcesStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetUnassignDeploymentResourcesStatusResult> response = await client.GetUnassignDeploymentResourcesStatusAsync("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetUnassignDeploymentResourcesStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetUnassignDeploymentResourcesStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetUnassignDeploymentResourcesStatusResult> response = client.GetUnassignDeploymentResourcesStatus("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetUnassignDeploymentResourcesStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetUnassignDeploymentResourcesStatusResult> response = client.GetUnassignDeploymentResourcesStatus("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetUnassignDeploymentResourcesStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetUnassignDeploymentResourcesStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetUnassignDeploymentResourcesStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetUnassignDeploymentResourcesStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetUnassignDeploymentResourcesStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetUnassignDeploymentResourcesStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetUnassignDeploymentResourcesStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetUnassignDeploymentResourcesStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetUnassignDeploymentResourcesStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetUnassignDeploymentResourcesStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetTrainingStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetTrainingStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetTrainingStatusResult> response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetTrainingStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetTrainingStatusResult> response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetTrainingStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetTrainingStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetTrainingStatusResult> response = client.GetTrainingStatus("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetTrainingStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetTrainingStatusResult> response = client.GetTrainingStatus("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetTrainingStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetTrainingStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call GetTrainingStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingMode").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="GetTrainingStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetTrainingStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetTrainingStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call GetTrainingStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetTrainingStatus("<projectName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingMode").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="GetProjectDeletionStatusAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetProjectDeletionStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetProjectDeletionStatusResult> response = await client.GetProjectDeletionStatusAsync("<jobId>");
]]></code>
This sample shows how to call GetProjectDeletionStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetProjectDeletionStatusResult> response = await client.GetProjectDeletionStatusAsync("<jobId>");
]]></code></example>
    </member>
    <member name="GetProjectDeletionStatus(string,CancellationToken)">
      <example>
This sample shows how to call GetProjectDeletionStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetProjectDeletionStatusResult> response = client.GetProjectDeletionStatus("<jobId>");
]]></code>
This sample shows how to call GetProjectDeletionStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetProjectDeletionStatusResult> response = client.GetProjectDeletionStatus("<jobId>");
]]></code></example>
    </member>
    <member name="GetProjectDeletionStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetProjectDeletionStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetProjectDeletionStatusAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetProjectDeletionStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetProjectDeletionStatusAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetProjectDeletionStatus(string,RequestContext)">
      <example>
This sample shows how to call GetProjectDeletionStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetProjectDeletionStatus("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetProjectDeletionStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetProjectDeletionStatus("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetAssignedResourceDeploymentsAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetAssignedResourceDeploymentsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<AssignedResourceDeploymentsMetadata> response = await client.GetAssignedResourceDeploymentsAsync();
]]></code>
This sample shows how to call GetAssignedResourceDeploymentsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<AssignedResourceDeploymentsMetadata> response = await client.GetAssignedResourceDeploymentsAsync(top: 1234, skip: 1234, maxpagesize: 1234);
]]></code></example>
    </member>
    <member name="GetAssignedResourceDeployments(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetAssignedResourceDeployments.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<AssignedResourceDeploymentsMetadata> response = client.GetAssignedResourceDeployments();
]]></code>
This sample shows how to call GetAssignedResourceDeployments with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<AssignedResourceDeploymentsMetadata> response = client.GetAssignedResourceDeployments(top: 1234, skip: 1234, maxpagesize: 1234);
]]></code></example>
    </member>
    <member name="GetAssignedResourceDeploymentsAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetAssignedResourceDeploymentsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetAssignedResourceDeploymentsAsync(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("deploymentName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("deploymentExpirationDate").ToString());
]]></code>
This sample shows how to call GetAssignedResourceDeploymentsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetAssignedResourceDeploymentsAsync(1234, 1234, 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("deploymentName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("deploymentExpirationDate").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
    </member>
    <member name="GetAssignedResourceDeployments(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetAssignedResourceDeployments and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetAssignedResourceDeployments(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("deploymentName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("deploymentExpirationDate").ToString());
]]></code>
This sample shows how to call GetAssignedResourceDeployments with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetAssignedResourceDeployments(1234, 1234, 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("deploymentName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("lastDeployedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("deploymentsMetadata")[0].GetProperty("deploymentExpirationDate").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
    </member>
    <member name="GetSupportedLanguagesAsync(ProjectKind,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSupportedLanguagesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<SupportedLanguages> response = await client.GetSupportedLanguagesAsync(ProjectKind.Conversation);
]]></code>
This sample shows how to call GetSupportedLanguagesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<SupportedLanguages> response = await client.GetSupportedLanguagesAsync(ProjectKind.Conversation, top: 1234, skip: 1234, maxpagesize: 1234);
]]></code></example>
    </member>
    <member name="GetSupportedLanguages(ProjectKind,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSupportedLanguages.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<SupportedLanguages> response = client.GetSupportedLanguages(ProjectKind.Conversation);
]]></code>
This sample shows how to call GetSupportedLanguages with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<SupportedLanguages> response = client.GetSupportedLanguages(ProjectKind.Conversation, top: 1234, skip: 1234, maxpagesize: 1234);
]]></code></example>
    </member>
    <member name="GetSupportedLanguagesAsync(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetSupportedLanguagesAsync("Conversation");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
]]></code>
This sample shows how to call GetSupportedLanguagesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetSupportedLanguagesAsync("Conversation", top: 1234, skip: 1234, maxpagesize: 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
    </member>
    <member name="GetSupportedLanguages(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguages and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetSupportedLanguages("Conversation");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
]]></code>
This sample shows how to call GetSupportedLanguages with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetSupportedLanguages("Conversation", top: 1234, skip: 1234, maxpagesize: 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
    </member>
    <member name="GetSupportedPrebuiltEntitiesAsync(string,string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSupportedPrebuiltEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<PrebuiltEntities> response = await client.GetSupportedPrebuiltEntitiesAsync();
]]></code>
This sample shows how to call GetSupportedPrebuiltEntitiesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<PrebuiltEntities> response = await client.GetSupportedPrebuiltEntitiesAsync(language: "<language>", multilingual: "<multilingual>", top: 1234, skip: 1234, maxpagesize: 1234);
]]></code></example>
    </member>
    <member name="GetSupportedPrebuiltEntities(string,string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSupportedPrebuiltEntities.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<PrebuiltEntities> response = client.GetSupportedPrebuiltEntities();
]]></code>
This sample shows how to call GetSupportedPrebuiltEntities with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<PrebuiltEntities> response = client.GetSupportedPrebuiltEntities(language: "<language>", multilingual: "<multilingual>", top: 1234, skip: 1234, maxpagesize: 1234);
]]></code></example>
    </member>
    <member name="GetSupportedPrebuiltEntitiesAsync(string,string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSupportedPrebuiltEntitiesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetSupportedPrebuiltEntitiesAsync(null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("examples").ToString());
]]></code>
This sample shows how to call GetSupportedPrebuiltEntitiesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetSupportedPrebuiltEntitiesAsync("<language>", "<multilingual>", 1234, 1234, 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("examples").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
    </member>
    <member name="GetSupportedPrebuiltEntities(string,string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSupportedPrebuiltEntities and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetSupportedPrebuiltEntities(null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("examples").ToString());
]]></code>
This sample shows how to call GetSupportedPrebuiltEntities with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetSupportedPrebuiltEntities("<language>", "<multilingual>", 1234, 1234, 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("examples").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
    </member>
    <member name="GetTrainingConfigVersionsAsync(ProjectKind,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetTrainingConfigVersionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<TrainingConfigVersions> response = await client.GetTrainingConfigVersionsAsync(ProjectKind.Conversation);
]]></code>
This sample shows how to call GetTrainingConfigVersionsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<TrainingConfigVersions> response = await client.GetTrainingConfigVersionsAsync(ProjectKind.Conversation, top: 1234, skip: 1234, maxpagesize: 1234);
]]></code></example>
    </member>
    <member name="GetTrainingConfigVersions(ProjectKind,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetTrainingConfigVersions.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<TrainingConfigVersions> response = client.GetTrainingConfigVersions(ProjectKind.Conversation);
]]></code>
This sample shows how to call GetTrainingConfigVersions with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<TrainingConfigVersions> response = client.GetTrainingConfigVersions(ProjectKind.Conversation, top: 1234, skip: 1234, maxpagesize: 1234);
]]></code></example>
    </member>
    <member name="GetTrainingConfigVersionsAsync(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainingConfigVersionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetTrainingConfigVersionsAsync("Conversation");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
]]></code>
This sample shows how to call GetTrainingConfigVersionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetTrainingConfigVersionsAsync("Conversation", top: 1234, skip: 1234, maxpagesize: 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
    </member>
    <member name="GetTrainingConfigVersions(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainingConfigVersions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetTrainingConfigVersions("Conversation");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
]]></code>
This sample shows how to call GetTrainingConfigVersions with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetTrainingConfigVersions("Conversation", top: 1234, skip: 1234, maxpagesize: 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
    </member>
    <member name="GetExportedModelAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetExportedModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportedModelResult> response = await client.GetExportedModelAsync("<projectName>", "<exportedModelName>");
]]></code>
This sample shows how to call GetExportedModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportedModelResult> response = await client.GetExportedModelAsync("<projectName>", "<exportedModelName>");
]]></code></example>
    </member>
    <member name="GetExportedModel(string,string,CancellationToken)">
      <example>
This sample shows how to call GetExportedModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportedModelResult> response = client.GetExportedModel("<projectName>", "<exportedModelName>");
]]></code>
This sample shows how to call GetExportedModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportedModelResult> response = client.GetExportedModel("<projectName>", "<exportedModelName>");
]]></code></example>
    </member>
    <member name="GetExportedModelAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetExportedModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetExportedModelAsync("<projectName>", "<exportedModelName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastExportedModelDateTime").ToString());
Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
]]></code>
This sample shows how to call GetExportedModelAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetExportedModelAsync("<projectName>", "<exportedModelName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastExportedModelDateTime").ToString());
Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
]]></code></example>
    </member>
    <member name="GetExportedModel(string,string,RequestContext)">
      <example>
This sample shows how to call GetExportedModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetExportedModel("<projectName>", "<exportedModelName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastExportedModelDateTime").ToString());
Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
]]></code>
This sample shows how to call GetExportedModel with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetExportedModel("<projectName>", "<exportedModelName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastExportedModelDateTime").ToString());
Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
]]></code></example>
    </member>
    <member name="GetExportedModelJobStatusAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetExportedModelJobStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportedModelJobStatusResult> response = await client.GetExportedModelJobStatusAsync("<projectName>", "<exportedModelName>", "<jobId>");
]]></code>
This sample shows how to call GetExportedModelJobStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportedModelJobStatusResult> response = await client.GetExportedModelJobStatusAsync("<projectName>", "<exportedModelName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetExportedModelJobStatus(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetExportedModelJobStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportedModelJobStatusResult> response = client.GetExportedModelJobStatus("<projectName>", "<exportedModelName>", "<jobId>");
]]></code>
This sample shows how to call GetExportedModelJobStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response<GetExportedModelJobStatusResult> response = client.GetExportedModelJobStatus("<projectName>", "<exportedModelName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetExportedModelJobStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetExportedModelJobStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetExportedModelJobStatusAsync("<projectName>", "<exportedModelName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetExportedModelJobStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = await client.GetExportedModelJobStatusAsync("<projectName>", "<exportedModelName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetExportedModelJobStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetExportedModelJobStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetExportedModelJobStatus("<projectName>", "<exportedModelName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetExportedModelJobStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Response response = client.GetExportedModelJobStatus("<projectName>", "<exportedModelName>", "<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
]]></code></example>
    </member>
    <member name="GetProjectsAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetProjectsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (ProjectMetadata item in client.GetProjectsAsync())
{
}
]]></code>
This sample shows how to call GetProjectsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (ProjectMetadata item in client.GetProjectsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetProjects(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetProjects.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (ProjectMetadata item in client.GetProjects())
{
}
]]></code>
This sample shows how to call GetProjects with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (ProjectMetadata item in client.GetProjects(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetProjectsAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetProjectsAsync(null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
}
]]></code>
This sample shows how to call GetProjectsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetProjectsAsync(1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
}
]]></code></example>
    </member>
    <member name="GetProjects(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetProjects(null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
}
]]></code>
This sample shows how to call GetProjects with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetProjects(1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsAsync(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (ProjectDeployment item in client.GetDeploymentsAsync("<projectName>"))
{
}
]]></code>
This sample shows how to call GetDeploymentsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (ProjectDeployment item in client.GetDeploymentsAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetDeployments(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetDeployments.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (ProjectDeployment item in client.GetDeployments("<projectName>"))
{
}
]]></code>
This sample shows how to call GetDeployments with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (ProjectDeployment item in client.GetDeployments("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetDeploymentsAsync(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentName").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
    Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
    Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentName").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
    Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
    Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeployments(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetDeployments and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetDeployments("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentName").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
    Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
    Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
}
]]></code>
This sample shows how to call GetDeployments with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetDeployments("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentName").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
    Console.WriteLine(result.GetProperty("deploymentExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("resourceId").ToString());
    Console.WriteLine(result.GetProperty("assignedResources")[0].GetProperty("region").ToString());
}
]]></code></example>
    </member>
    <member name="GetTrainedModelsAsync(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetTrainedModelsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (ProjectTrainedModel item in client.GetTrainedModelsAsync("<projectName>"))
{
}
]]></code>
This sample shows how to call GetTrainedModelsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (ProjectTrainedModel item in client.GetTrainedModelsAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetTrainedModels(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetTrainedModels.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (ProjectTrainedModel item in client.GetTrainedModels("<projectName>"))
{
}
]]></code>
This sample shows how to call GetTrainedModels with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (ProjectTrainedModel item in client.GetTrainedModels("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetTrainedModelsAsync(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainedModelsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetTrainedModelsAsync("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("label").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainingDurationInSeconds").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("hasSnapshot").ToString());
}
]]></code>
This sample shows how to call GetTrainedModelsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetTrainedModelsAsync("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("label").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainingDurationInSeconds").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("hasSnapshot").ToString());
}
]]></code></example>
    </member>
    <member name="GetTrainedModels(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainedModels and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetTrainedModels("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("label").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainingDurationInSeconds").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("hasSnapshot").ToString());
}
]]></code>
This sample shows how to call GetTrainedModels with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetTrainedModels("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("label").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainingDurationInSeconds").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("hasSnapshot").ToString());
}
]]></code></example>
    </member>
    <member name="GetModelEvaluationResultsAsync(string,string,StringIndexType,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetModelEvaluationResultsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (UtteranceEvaluationResult item in client.GetModelEvaluationResultsAsync("<projectName>", "<trainedModelLabel>", StringIndexType.Utf16CodeUnit))
{
}
]]></code>
This sample shows how to call GetModelEvaluationResultsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (UtteranceEvaluationResult item in client.GetModelEvaluationResultsAsync("<projectName>", "<trainedModelLabel>", StringIndexType.Utf16CodeUnit, maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetModelEvaluationResults(string,string,StringIndexType,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetModelEvaluationResults.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (UtteranceEvaluationResult item in client.GetModelEvaluationResults("<projectName>", "<trainedModelLabel>", StringIndexType.Utf16CodeUnit))
{
}
]]></code>
This sample shows how to call GetModelEvaluationResults with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (UtteranceEvaluationResult item in client.GetModelEvaluationResults("<projectName>", "<trainedModelLabel>", StringIndexType.Utf16CodeUnit, maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetModelEvaluationResultsAsync(string,string,string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetModelEvaluationResultsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetModelEvaluationResultsAsync("<projectName>", "<trainedModelLabel>", "Utf16CodeUnit"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("text").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("offset").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("length").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("offset").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("length").ToString());
    Console.WriteLine(result.GetProperty("intentsResult").GetProperty("expectedIntent").ToString());
    Console.WriteLine(result.GetProperty("intentsResult").GetProperty("predictedIntent").ToString());
}
]]></code>
This sample shows how to call GetModelEvaluationResultsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetModelEvaluationResultsAsync("<projectName>", "<trainedModelLabel>", "Utf16CodeUnit", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("text").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("offset").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("length").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("offset").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("length").ToString());
    Console.WriteLine(result.GetProperty("intentsResult").GetProperty("expectedIntent").ToString());
    Console.WriteLine(result.GetProperty("intentsResult").GetProperty("predictedIntent").ToString());
}
]]></code></example>
    </member>
    <member name="GetModelEvaluationResults(string,string,string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetModelEvaluationResults and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetModelEvaluationResults("<projectName>", "<trainedModelLabel>", "Utf16CodeUnit"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("text").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("offset").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("length").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("offset").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("length").ToString());
    Console.WriteLine(result.GetProperty("intentsResult").GetProperty("expectedIntent").ToString());
    Console.WriteLine(result.GetProperty("intentsResult").GetProperty("predictedIntent").ToString());
}
]]></code>
This sample shows how to call GetModelEvaluationResults with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetModelEvaluationResults("<projectName>", "<trainedModelLabel>", "Utf16CodeUnit", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("text").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("offset").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("expectedEntities")[0].GetProperty("length").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("offset").ToString());
    Console.WriteLine(result.GetProperty("entitiesResult").GetProperty("predictedEntities")[0].GetProperty("length").ToString());
    Console.WriteLine(result.GetProperty("intentsResult").GetProperty("expectedIntent").ToString());
    Console.WriteLine(result.GetProperty("intentsResult").GetProperty("predictedIntent").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentResourcesAsync(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentResourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (AssignedDeploymentResource item in client.GetDeploymentResourcesAsync("<projectName>"))
{
}
]]></code>
This sample shows how to call GetDeploymentResourcesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (AssignedDeploymentResource item in client.GetDeploymentResourcesAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetDeploymentResources(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentResources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (AssignedDeploymentResource item in client.GetDeploymentResources("<projectName>"))
{
}
]]></code>
This sample shows how to call GetDeploymentResources with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (AssignedDeploymentResource item in client.GetDeploymentResources("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetDeploymentResourcesAsync(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetDeploymentResourcesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetDeploymentResourcesAsync("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("azureResourceId").ToString());
    Console.WriteLine(result.GetProperty("region").ToString());
}
]]></code>
This sample shows how to call GetDeploymentResourcesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetDeploymentResourcesAsync("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("azureResourceId").ToString());
    Console.WriteLine(result.GetProperty("region").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentResources(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetDeploymentResources and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetDeploymentResources("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("azureResourceId").ToString());
    Console.WriteLine(result.GetProperty("region").ToString());
}
]]></code>
This sample shows how to call GetDeploymentResources with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetDeploymentResources("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("azureResourceId").ToString());
    Console.WriteLine(result.GetProperty("region").ToString());
}
]]></code></example>
    </member>
    <member name="GetTrainingJobsAsync(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetTrainingJobsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (TrainingJobState item in client.GetTrainingJobsAsync("<projectName>"))
{
}
]]></code>
This sample shows how to call GetTrainingJobsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (TrainingJobState item in client.GetTrainingJobsAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetTrainingJobs(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetTrainingJobs.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (TrainingJobState item in client.GetTrainingJobs("<projectName>"))
{
}
]]></code>
This sample shows how to call GetTrainingJobs with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (TrainingJobState item in client.GetTrainingJobs("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetTrainingJobsAsync(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainingJobsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetTrainingJobsAsync("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetTrainingJobsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetTrainingJobsAsync("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
    Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingMode").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndDateTime").ToString());
}
]]></code></example>
    </member>
    <member name="GetTrainingJobs(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainingJobs and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetTrainingJobs("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetTrainingJobs with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetTrainingJobs("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
    Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingMode").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndDateTime").ToString());
}
]]></code></example>
    </member>
    <member name="GetExportedModelsAsync(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetExportedModelsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (ExportedTrainedModel item in client.GetExportedModelsAsync("<projectName>"))
{
}
]]></code>
This sample shows how to call GetExportedModelsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (ExportedTrainedModel item in client.GetExportedModelsAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetExportedModels(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetExportedModels.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (ExportedTrainedModel item in client.GetExportedModels("<projectName>"))
{
}
]]></code>
This sample shows how to call GetExportedModels with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (ExportedTrainedModel item in client.GetExportedModels("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetExportedModelsAsync(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetExportedModelsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetExportedModelsAsync("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("exportedModelName").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastExportedModelDateTime").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
}
]]></code>
This sample shows how to call GetExportedModelsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

await foreach (BinaryData item in client.GetExportedModelsAsync("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("exportedModelName").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastExportedModelDateTime").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
}
]]></code></example>
    </member>
    <member name="GetExportedModels(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetExportedModels and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetExportedModels("<projectName>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("exportedModelName").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastExportedModelDateTime").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
}
]]></code>
This sample shows how to call GetExportedModels with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

foreach (BinaryData item in client.GetExportedModels("<projectName>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("exportedModelName").ToString());
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastExportedModelDateTime").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
    Console.WriteLine(result.GetProperty("modelTrainingConfigVersion").ToString());
}
]]></code></example>
    </member>
    <member name="DeleteProjectAsync(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call DeleteProjectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
]]></code>
This sample shows how to call DeleteProjectAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
]]></code></example>
    </member>
    <member name="DeleteProject(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call DeleteProject.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.DeleteProject(WaitUntil.Completed, "<projectName>");
]]></code>
This sample shows how to call DeleteProject with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.DeleteProject(WaitUntil.Completed, "<projectName>");
]]></code></example>
    </member>
    <member name="CopyProjectAsync(WaitUntil,string,CopyProjectConfig,CancellationToken)">
      <example>
This sample shows how to call CopyProjectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

CopyProjectConfig body = new CopyProjectConfig(
ProjectKind.Conversation,
"<targetProjectName>",
"<accessToken>",
DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
"<targetResourceId>",
"<targetResourceRegion>");
Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call CopyProjectAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

CopyProjectConfig body = new CopyProjectConfig(
ProjectKind.Conversation,
"<targetProjectName>",
"<accessToken>",
DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
"<targetResourceId>",
"<targetResourceRegion>");
Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="CopyProject(WaitUntil,string,CopyProjectConfig,CancellationToken)">
      <example>
This sample shows how to call CopyProject.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

CopyProjectConfig body = new CopyProjectConfig(
ProjectKind.Conversation,
"<targetProjectName>",
"<accessToken>",
DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
"<targetResourceId>",
"<targetResourceRegion>");
Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call CopyProject with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

CopyProjectConfig body = new CopyProjectConfig(
ProjectKind.Conversation,
"<targetProjectName>",
"<accessToken>",
DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
"<targetResourceId>",
"<targetResourceRegion>");
Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="CopyProjectAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CopyProjectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    targetProjectName = "<targetProjectName>",
    accessToken = "<accessToken>",
    expiresAt = "2022-05-10T18:57:31.2311892Z",
    targetResourceId = "<targetResourceId>",
    targetResourceRegion = "<targetResourceRegion>",
});
Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call CopyProjectAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    targetProjectName = "<targetProjectName>",
    accessToken = "<accessToken>",
    expiresAt = "2022-05-10T18:57:31.2311892Z",
    targetResourceId = "<targetResourceId>",
    targetResourceRegion = "<targetResourceRegion>",
});
Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="CopyProject(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CopyProject.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    targetProjectName = "<targetProjectName>",
    accessToken = "<accessToken>",
    expiresAt = "2022-05-10T18:57:31.2311892Z",
    targetResourceId = "<targetResourceId>",
    targetResourceRegion = "<targetResourceRegion>",
});
Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call CopyProject with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectKind = "Conversation",
    targetProjectName = "<targetProjectName>",
    accessToken = "<accessToken>",
    expiresAt = "2022-05-10T18:57:31.2311892Z",
    targetResourceId = "<targetResourceId>",
    targetResourceRegion = "<targetResourceRegion>",
});
Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="ExportAsync(WaitUntil,string,StringIndexType,ExportedProjectFormat?,string,string,CancellationToken)">
      <example>
This sample shows how to call ExportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit);
]]></code>
This sample shows how to call ExportAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit, exportedProjectFormat: ExportedProjectFormat.Conversation, assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="Export(WaitUntil,string,StringIndexType,ExportedProjectFormat?,string,string,CancellationToken)">
      <example>
This sample shows how to call Export.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.Export(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit);
]]></code>
This sample shows how to call Export with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.Export(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit, exportedProjectFormat: ExportedProjectFormat.Conversation, assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="ExportAsync(WaitUntil,string,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call ExportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit");
]]></code>
This sample shows how to call ExportAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit", exportedProjectFormat: "Conversation", assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="Export(WaitUntil,string,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call Export.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit");
]]></code>
This sample shows how to call Export with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit", exportedProjectFormat: "Conversation", assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="ImportAsync(WaitUntil,string,ExportedProject,ExportedProjectFormat?,CancellationToken)">
      <example>
This sample shows how to call ImportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectConfig(ProjectKind.Conversation, "<projectName>", "<language>"));
Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call ImportAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectConfig(ProjectKind.Conversation, "<projectName>", "<language>")
{
    Settings = new ProjectSettings(123.45F),
    StorageInputContainerName = "<storageInputContainerName>",
    Multilingual = true,
    Description = "<description>",
})
{
    Assets = new ConversationExportedProjectAssets
    {
        Intents = { new ConversationExportedIntent("<category>") },
        Entities = {new ConversationExportedEntity("<category>")
        {
            CompositionSetting = CompositionSetting.ReturnLongestOverlap,
            List = new ExportedEntityList
            {
                Sublists = {new ExportedEntitySublist
                {
                    ListKey = "<listKey>",
                    Synonyms = {new ExportedEntityListSynonym
                    {
                        Language = "<language>",
                        Values = {"<values>"},
                    }},
                }},
            },
            Prebuilts = {new ExportedPrebuiltEntity("<category>")},
            Regex = new ExportedEntityRegex
            {
                Expressions = {new ExportedEntityRegexExpression
                {
                    RegexKey = "<regexKey>",
                    Language = "<language>",
                    RegexPattern = "<regexPattern>",
                }},
            },
            RequiredComponents = {"<requiredComponents>"},
        }},
        Utterances = {new ConversationExportedUtterance("<text>", "<intent>")
        {
            Entities = {new ExportedUtteranceEntityLabel("<category>", 1234, 1234)},
            Language = "<language>",
            Dataset = "<dataset>",
        }},
    },
};
Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body, exportedProjectFormat: ExportedProjectFormat.Conversation);
]]></code></example>
    </member>
    <member name="Import(WaitUntil,string,ExportedProject,ExportedProjectFormat?,CancellationToken)">
      <example>
This sample shows how to call Import.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectConfig(ProjectKind.Conversation, "<projectName>", "<language>"));
Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call Import with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectConfig(ProjectKind.Conversation, "<projectName>", "<language>")
{
    Settings = new ProjectSettings(123.45F),
    StorageInputContainerName = "<storageInputContainerName>",
    Multilingual = true,
    Description = "<description>",
})
{
    Assets = new ConversationExportedProjectAssets
    {
        Intents = { new ConversationExportedIntent("<category>") },
        Entities = {new ConversationExportedEntity("<category>")
        {
            CompositionSetting = CompositionSetting.ReturnLongestOverlap,
            List = new ExportedEntityList
            {
                Sublists = {new ExportedEntitySublist
                {
                    ListKey = "<listKey>",
                    Synonyms = {new ExportedEntityListSynonym
                    {
                        Language = "<language>",
                        Values = {"<values>"},
                    }},
                }},
            },
            Prebuilts = {new ExportedPrebuiltEntity("<category>")},
            Regex = new ExportedEntityRegex
            {
                Expressions = {new ExportedEntityRegexExpression
                {
                    RegexKey = "<regexKey>",
                    Language = "<language>",
                    RegexPattern = "<regexPattern>",
                }},
            },
            RequiredComponents = {"<requiredComponents>"},
        }},
        Utterances = {new ConversationExportedUtterance("<text>", "<intent>")
        {
            Entities = {new ExportedUtteranceEntityLabel("<category>", 1234, 1234)},
            Language = "<language>",
            Dataset = "<dataset>",
        }},
    },
};
Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body, exportedProjectFormat: ExportedProjectFormat.Conversation);
]]></code></example>
    </member>
    <member name="ImportAsync(WaitUntil,string,RequestContent,string,RequestContext)">
      <example>
This sample shows how to call ImportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectFileVersion = "<projectFileVersion>",
    stringIndexType = "Utf16CodeUnit",
    metadata = new
    {
        projectKind = "Conversation",
        projectName = "<projectName>",
        language = "<language>",
    },
});
Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call ImportAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectFileVersion = "<projectFileVersion>",
    stringIndexType = "Utf16CodeUnit",
    metadata = new
    {
        projectKind = "Conversation",
        settings = new
        {
            confidenceThreshold = 123.45F,
        },
        storageInputContainerName = "<storageInputContainerName>",
        projectName = "<projectName>",
        multilingual = true,
        description = "<description>",
        language = "<language>",
    },
    assets = new
    {
        intents = new object[]
        {
            new
            {
                category = "<category>",
            }
        },
        entities = new object[]
        {
            new
            {
                category = "<category>",
                compositionSetting = "returnLongestOverlap",
                list = new
                {
                    sublists = new object[]
                    {
                        new
                        {
                            listKey = "<listKey>",
                            synonyms = new object[]
                            {
                                new
                                {
                                    language = "<language>",
                                    values = new object[]
                                    {
                                        "<values>"
                                    },
                                }
                            },
                        }
                    },
                },
                prebuilts = new object[]
                {
                    new
                    {
                        category = "<category>",
                    }
                },
                regex = new
                {
                    expressions = new object[]
                    {
                        new
                        {
                            regexKey = "<regexKey>",
                            language = "<language>",
                            regexPattern = "<regexPattern>",
                        }
                    },
                },
                requiredComponents = new object[]
                {
                    "<requiredComponents>"
                },
            }
        },
        utterances = new object[]
        {
            new
            {
                entities = new object[]
                {
                    new
                    {
                        category = "<category>",
                        offset = 1234,
                        length = 1234,
                    }
                },
                text = "<text>",
                language = "<language>",
                intent = "<intent>",
                dataset = "<dataset>",
            }
        },
        projectKind = "Conversation",
    },
});
Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content, exportedProjectFormat: "Conversation");
]]></code></example>
    </member>
    <member name="Import(WaitUntil,string,RequestContent,string,RequestContext)">
      <example>
This sample shows how to call Import.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectFileVersion = "<projectFileVersion>",
    stringIndexType = "Utf16CodeUnit",
    metadata = new
    {
        projectKind = "Conversation",
        projectName = "<projectName>",
        language = "<language>",
    },
});
Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call Import with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    projectFileVersion = "<projectFileVersion>",
    stringIndexType = "Utf16CodeUnit",
    metadata = new
    {
        projectKind = "Conversation",
        settings = new
        {
            confidenceThreshold = 123.45F,
        },
        storageInputContainerName = "<storageInputContainerName>",
        projectName = "<projectName>",
        multilingual = true,
        description = "<description>",
        language = "<language>",
    },
    assets = new
    {
        intents = new object[]
        {
            new
            {
                category = "<category>",
            }
        },
        entities = new object[]
        {
            new
            {
                category = "<category>",
                compositionSetting = "returnLongestOverlap",
                list = new
                {
                    sublists = new object[]
                    {
                        new
                        {
                            listKey = "<listKey>",
                            synonyms = new object[]
                            {
                                new
                                {
                                    language = "<language>",
                                    values = new object[]
                                    {
                                        "<values>"
                                    },
                                }
                            },
                        }
                    },
                },
                prebuilts = new object[]
                {
                    new
                    {
                        category = "<category>",
                    }
                },
                regex = new
                {
                    expressions = new object[]
                    {
                        new
                        {
                            regexKey = "<regexKey>",
                            language = "<language>",
                            regexPattern = "<regexPattern>",
                        }
                    },
                },
                requiredComponents = new object[]
                {
                    "<requiredComponents>"
                },
            }
        },
        utterances = new object[]
        {
            new
            {
                entities = new object[]
                {
                    new
                    {
                        category = "<category>",
                        offset = 1234,
                        length = 1234,
                    }
                },
                text = "<text>",
                language = "<language>",
                intent = "<intent>",
                dataset = "<dataset>",
            }
        },
        projectKind = "Conversation",
    },
});
Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content, exportedProjectFormat: "Conversation");
]]></code></example>
    </member>
    <member name="TrainAsync(WaitUntil,string,TrainingJobConfig,CancellationToken)">
      <example>
This sample shows how to call TrainAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

TrainingJobConfig body = new TrainingJobConfig("<modelLabel>", TrainingMode.Advanced);
Operation<TrainingJobResult> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", body);
TrainingJobResult responseData = operation.Value;
]]></code>
This sample shows how to call TrainAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

TrainingJobConfig body = new TrainingJobConfig("<modelLabel>", TrainingMode.Advanced)
{
    TrainingConfigVersion = "<trainingConfigVersion>",
    EvaluationOptions = new EvaluationConfig
    {
        Kind = EvaluationKind.Percentage,
        TrainingSplitPercentage = 1234,
        TestingSplitPercentage = 1234,
    },
};
Operation<TrainingJobResult> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", body);
TrainingJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="Train(WaitUntil,string,TrainingJobConfig,CancellationToken)">
      <example>
This sample shows how to call Train.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

TrainingJobConfig body = new TrainingJobConfig("<modelLabel>", TrainingMode.Advanced);
Operation<TrainingJobResult> operation = client.Train(WaitUntil.Completed, "<projectName>", body);
TrainingJobResult responseData = operation.Value;
]]></code>
This sample shows how to call Train with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

TrainingJobConfig body = new TrainingJobConfig("<modelLabel>", TrainingMode.Advanced)
{
    TrainingConfigVersion = "<trainingConfigVersion>",
    EvaluationOptions = new EvaluationConfig
    {
        Kind = EvaluationKind.Percentage,
        TrainingSplitPercentage = 1234,
        TestingSplitPercentage = 1234,
    },
};
Operation<TrainingJobResult> operation = client.Train(WaitUntil.Completed, "<projectName>", body);
TrainingJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="TrainAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call TrainAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
    trainingMode = "advanced",
});
Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call TrainAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
    trainingConfigVersion = "<trainingConfigVersion>",
    trainingMode = "advanced",
    evaluationOptions = new
    {
        kind = "percentage",
        trainingSplitPercentage = 1234,
        testingSplitPercentage = 1234,
    },
});
Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingMode").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="Train(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Train and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
    trainingMode = "advanced",
});
Operation<BinaryData> operation = client.Train(WaitUntil.Completed, "<projectName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call Train with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
    trainingConfigVersion = "<trainingConfigVersion>",
    trainingMode = "advanced",
    evaluationOptions = new
    {
        kind = "percentage",
        trainingSplitPercentage = 1234,
        testingSplitPercentage = 1234,
    },
});
Operation<BinaryData> operation = client.Train(WaitUntil.Completed, "<projectName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingMode").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="SwapDeploymentsAsync(WaitUntil,string,SwapDeploymentsConfig,CancellationToken)">
      <example>
This sample shows how to call SwapDeploymentsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

SwapDeploymentsConfig body = new SwapDeploymentsConfig("<firstDeploymentName>", "<secondDeploymentName>");
Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call SwapDeploymentsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

SwapDeploymentsConfig body = new SwapDeploymentsConfig("<firstDeploymentName>", "<secondDeploymentName>");
Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="SwapDeployments(WaitUntil,string,SwapDeploymentsConfig,CancellationToken)">
      <example>
This sample shows how to call SwapDeployments.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

SwapDeploymentsConfig body = new SwapDeploymentsConfig("<firstDeploymentName>", "<secondDeploymentName>");
Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call SwapDeployments with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

SwapDeploymentsConfig body = new SwapDeploymentsConfig("<firstDeploymentName>", "<secondDeploymentName>");
Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="SwapDeploymentsAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SwapDeploymentsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
});
Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call SwapDeploymentsAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
});
Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="SwapDeployments(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SwapDeployments.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
});
Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call SwapDeployments with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
});
Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="DeployProjectAsync(WaitUntil,string,string,CreateDeploymentConfig,CancellationToken)">
      <example>
This sample shows how to call DeployProjectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

CreateDeploymentConfig body = new CreateDeploymentConfig("<trainedModelLabel>");
Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
]]></code>
This sample shows how to call DeployProjectAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

CreateDeploymentConfig body = new CreateDeploymentConfig("<trainedModelLabel>")
{
    AssignedResourceIds = { "<assignedResourceIds>" },
};
Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
]]></code></example>
    </member>
    <member name="DeployProject(WaitUntil,string,string,CreateDeploymentConfig,CancellationToken)">
      <example>
This sample shows how to call DeployProject.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

CreateDeploymentConfig body = new CreateDeploymentConfig("<trainedModelLabel>");
Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
]]></code>
This sample shows how to call DeployProject with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

CreateDeploymentConfig body = new CreateDeploymentConfig("<trainedModelLabel>")
{
    AssignedResourceIds = { "<assignedResourceIds>" },
};
Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
]]></code></example>
    </member>
    <member name="DeployProjectAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeployProjectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    trainedModelLabel = "<trainedModelLabel>",
});
Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
]]></code>
This sample shows how to call DeployProjectAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    trainedModelLabel = "<trainedModelLabel>",
    assignedResourceIds = new object[]
    {
        "<assignedResourceIds>"
    },
});
Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
]]></code></example>
    </member>
    <member name="DeployProject(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeployProject.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    trainedModelLabel = "<trainedModelLabel>",
});
Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
]]></code>
This sample shows how to call DeployProject with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    trainedModelLabel = "<trainedModelLabel>",
    assignedResourceIds = new object[]
    {
        "<assignedResourceIds>"
    },
});
Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
]]></code></example>
    </member>
    <member name="DeleteDeploymentAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
]]></code>
This sample shows how to call DeleteDeploymentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
]]></code></example>
    </member>
    <member name="DeleteDeployment(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeployment.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.DeleteDeployment(WaitUntil.Completed, "<projectName>", "<deploymentName>");
]]></code>
This sample shows how to call DeleteDeployment with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.DeleteDeployment(WaitUntil.Completed, "<projectName>", "<deploymentName>");
]]></code></example>
    </member>
    <member name="DeleteDeploymentFromResourcesAsync(WaitUntil,string,string,DeleteDeploymentConfig,CancellationToken)">
      <example>
This sample shows how to call DeleteDeploymentFromResourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

DeleteDeploymentConfig body = new DeleteDeploymentConfig();
Operation operation = await client.DeleteDeploymentFromResourcesAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
]]></code>
This sample shows how to call DeleteDeploymentFromResourcesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

DeleteDeploymentConfig body = new DeleteDeploymentConfig
{
    AssignedResourceIds = { "<assignedResourceIds>" },
};
Operation operation = await client.DeleteDeploymentFromResourcesAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
]]></code></example>
    </member>
    <member name="DeleteDeploymentFromResources(WaitUntil,string,string,DeleteDeploymentConfig,CancellationToken)">
      <example>
This sample shows how to call DeleteDeploymentFromResources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

DeleteDeploymentConfig body = new DeleteDeploymentConfig();
Operation operation = client.DeleteDeploymentFromResources(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
]]></code>
This sample shows how to call DeleteDeploymentFromResources with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

DeleteDeploymentConfig body = new DeleteDeploymentConfig
{
    AssignedResourceIds = { "<assignedResourceIds>" },
};
Operation operation = client.DeleteDeploymentFromResources(WaitUntil.Completed, "<projectName>", "<deploymentName>", body);
]]></code></example>
    </member>
    <member name="DeleteDeploymentFromResourcesAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentFromResourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new object());
Operation operation = await client.DeleteDeploymentFromResourcesAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
]]></code>
This sample shows how to call DeleteDeploymentFromResourcesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    assignedResourceIds = new object[]
    {
        "<assignedResourceIds>"
    },
});
Operation operation = await client.DeleteDeploymentFromResourcesAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
]]></code></example>
    </member>
    <member name="DeleteDeploymentFromResources(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentFromResources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new object());
Operation operation = client.DeleteDeploymentFromResources(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
]]></code>
This sample shows how to call DeleteDeploymentFromResources with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    assignedResourceIds = new object[]
    {
        "<assignedResourceIds>"
    },
});
Operation operation = client.DeleteDeploymentFromResources(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
]]></code></example>
    </member>
    <member name="EvaluateModelAsync(WaitUntil,string,string,EvaluationConfig,CancellationToken)">
      <example>
This sample shows how to call EvaluateModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

EvaluationConfig body = new EvaluationConfig();
Operation<EvaluationJobResult> operation = await client.EvaluateModelAsync(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>", body);
EvaluationJobResult responseData = operation.Value;
]]></code>
This sample shows how to call EvaluateModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

EvaluationConfig body = new EvaluationConfig
{
    Kind = EvaluationKind.Percentage,
    TrainingSplitPercentage = 1234,
    TestingSplitPercentage = 1234,
};
Operation<EvaluationJobResult> operation = await client.EvaluateModelAsync(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>", body);
EvaluationJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="EvaluateModel(WaitUntil,string,string,EvaluationConfig,CancellationToken)">
      <example>
This sample shows how to call EvaluateModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

EvaluationConfig body = new EvaluationConfig();
Operation<EvaluationJobResult> operation = client.EvaluateModel(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>", body);
EvaluationJobResult responseData = operation.Value;
]]></code>
This sample shows how to call EvaluateModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

EvaluationConfig body = new EvaluationConfig
{
    Kind = EvaluationKind.Percentage,
    TrainingSplitPercentage = 1234,
    TestingSplitPercentage = 1234,
};
Operation<EvaluationJobResult> operation = client.EvaluateModel(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>", body);
EvaluationJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="EvaluateModelAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call EvaluateModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.EvaluateModelAsync(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("evaluationOptions").ToString());
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
]]></code>
This sample shows how to call EvaluateModelAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    kind = "percentage",
    trainingSplitPercentage = 1234,
    testingSplitPercentage = 1234,
});
Operation<BinaryData> operation = await client.EvaluateModelAsync(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("trainingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("testingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
]]></code></example>
    </member>
    <member name="EvaluateModel(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call EvaluateModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.EvaluateModel(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("evaluationOptions").ToString());
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
]]></code>
This sample shows how to call EvaluateModel with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    kind = "percentage",
    trainingSplitPercentage = 1234,
    testingSplitPercentage = 1234,
});
Operation<BinaryData> operation = client.EvaluateModel(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("trainingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("evaluationOptions").GetProperty("testingSplitPercentage").ToString());
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
]]></code></example>
    </member>
    <member name="LoadSnapshotAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call LoadSnapshotAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.LoadSnapshotAsync(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>");
]]></code>
This sample shows how to call LoadSnapshotAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.LoadSnapshotAsync(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="LoadSnapshot(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call LoadSnapshot.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.LoadSnapshot(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>");
]]></code>
This sample shows how to call LoadSnapshot with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.LoadSnapshot(WaitUntil.Completed, "<projectName>", "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="AssignDeploymentResourcesAsync(WaitUntil,string,AssignDeploymentResourcesConfig,CancellationToken)">
      <example>
This sample shows how to call AssignDeploymentResourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

AssignDeploymentResourcesConfig body = new AssignDeploymentResourcesConfig(new ResourceMetadata[]
{
    new ResourceMetadata("<azureResourceId>", "<customDomain>", "<region>")
});
Operation operation = await client.AssignDeploymentResourcesAsync(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call AssignDeploymentResourcesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

AssignDeploymentResourcesConfig body = new AssignDeploymentResourcesConfig(new ResourceMetadata[]
{
    new ResourceMetadata("<azureResourceId>", "<customDomain>", "<region>")
});
Operation operation = await client.AssignDeploymentResourcesAsync(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="AssignDeploymentResources(WaitUntil,string,AssignDeploymentResourcesConfig,CancellationToken)">
      <example>
This sample shows how to call AssignDeploymentResources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

AssignDeploymentResourcesConfig body = new AssignDeploymentResourcesConfig(new ResourceMetadata[]
{
    new ResourceMetadata("<azureResourceId>", "<customDomain>", "<region>")
});
Operation operation = client.AssignDeploymentResources(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call AssignDeploymentResources with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

AssignDeploymentResourcesConfig body = new AssignDeploymentResourcesConfig(new ResourceMetadata[]
{
    new ResourceMetadata("<azureResourceId>", "<customDomain>", "<region>")
});
Operation operation = client.AssignDeploymentResources(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="AssignDeploymentResourcesAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AssignDeploymentResourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    resourcesMetadata = new object[]
    {
        new
        {
            azureResourceId = "<azureResourceId>",
            customDomain = "<customDomain>",
            region = "<region>",
        }
    },
});
Operation operation = await client.AssignDeploymentResourcesAsync(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call AssignDeploymentResourcesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    resourcesMetadata = new object[]
    {
        new
        {
            azureResourceId = "<azureResourceId>",
            customDomain = "<customDomain>",
            region = "<region>",
        }
    },
});
Operation operation = await client.AssignDeploymentResourcesAsync(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="AssignDeploymentResources(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AssignDeploymentResources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    resourcesMetadata = new object[]
    {
        new
        {
            azureResourceId = "<azureResourceId>",
            customDomain = "<customDomain>",
            region = "<region>",
        }
    },
});
Operation operation = client.AssignDeploymentResources(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call AssignDeploymentResources with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    resourcesMetadata = new object[]
    {
        new
        {
            azureResourceId = "<azureResourceId>",
            customDomain = "<customDomain>",
            region = "<region>",
        }
    },
});
Operation operation = client.AssignDeploymentResources(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="UnassignDeploymentResourcesAsync(WaitUntil,string,UnassignDeploymentResourcesConfig,CancellationToken)">
      <example>
This sample shows how to call UnassignDeploymentResourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

UnassignDeploymentResourcesConfig body = new UnassignDeploymentResourcesConfig(new string[] { "<assignedResourceIds>" });
Operation operation = await client.UnassignDeploymentResourcesAsync(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call UnassignDeploymentResourcesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

UnassignDeploymentResourcesConfig body = new UnassignDeploymentResourcesConfig(new string[] { "<assignedResourceIds>" });
Operation operation = await client.UnassignDeploymentResourcesAsync(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="UnassignDeploymentResources(WaitUntil,string,UnassignDeploymentResourcesConfig,CancellationToken)">
      <example>
This sample shows how to call UnassignDeploymentResources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

UnassignDeploymentResourcesConfig body = new UnassignDeploymentResourcesConfig(new string[] { "<assignedResourceIds>" });
Operation operation = client.UnassignDeploymentResources(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call UnassignDeploymentResources with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

UnassignDeploymentResourcesConfig body = new UnassignDeploymentResourcesConfig(new string[] { "<assignedResourceIds>" });
Operation operation = client.UnassignDeploymentResources(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="UnassignDeploymentResourcesAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UnassignDeploymentResourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    assignedResourceIds = new object[]
    {
        "<assignedResourceIds>"
    },
});
Operation operation = await client.UnassignDeploymentResourcesAsync(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call UnassignDeploymentResourcesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    assignedResourceIds = new object[]
    {
        "<assignedResourceIds>"
    },
});
Operation operation = await client.UnassignDeploymentResourcesAsync(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="UnassignDeploymentResources(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UnassignDeploymentResources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    assignedResourceIds = new object[]
    {
        "<assignedResourceIds>"
    },
});
Operation operation = client.UnassignDeploymentResources(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call UnassignDeploymentResources with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    assignedResourceIds = new object[]
    {
        "<assignedResourceIds>"
    },
});
Operation operation = client.UnassignDeploymentResources(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="CancelTrainingJobAsync(WaitUntil,string,string,CancellationToken)">
      <example>
This sample shows how to call CancelTrainingJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation<TrainingJobResult> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>");
TrainingJobResult responseData = operation.Value;
]]></code>
This sample shows how to call CancelTrainingJobAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation<TrainingJobResult> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>");
TrainingJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="CancelTrainingJob(WaitUntil,string,string,CancellationToken)">
      <example>
This sample shows how to call CancelTrainingJob.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation<TrainingJobResult> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>");
TrainingJobResult responseData = operation.Value;
]]></code>
This sample shows how to call CancelTrainingJob with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation<TrainingJobResult> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>");
TrainingJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="CancelTrainingJobAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call CancelTrainingJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation<BinaryData> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call CancelTrainingJobAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation<BinaryData> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingMode").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="CancelTrainingJob(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call CancelTrainingJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation<BinaryData> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call CancelTrainingJob with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation<BinaryData> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingMode").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="DeleteExportedModelAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteExportedModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.DeleteExportedModelAsync(WaitUntil.Completed, "<projectName>", "<exportedModelName>");
]]></code>
This sample shows how to call DeleteExportedModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = await client.DeleteExportedModelAsync(WaitUntil.Completed, "<projectName>", "<exportedModelName>");
]]></code></example>
    </member>
    <member name="DeleteExportedModel(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteExportedModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.DeleteExportedModel(WaitUntil.Completed, "<projectName>", "<exportedModelName>");
]]></code>
This sample shows how to call DeleteExportedModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

Operation operation = client.DeleteExportedModel(WaitUntil.Completed, "<projectName>", "<exportedModelName>");
]]></code></example>
    </member>
    <member name="CreateOrUpdateExportedModelAsync(WaitUntil,string,string,ExportedModelConfig,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateExportedModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

ExportedModelConfig body = new ExportedModelConfig("<trainedModelLabel>");
Operation operation = await client.CreateOrUpdateExportedModelAsync(WaitUntil.Completed, "<projectName>", "<exportedModelName>", body);
]]></code>
This sample shows how to call CreateOrUpdateExportedModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

ExportedModelConfig body = new ExportedModelConfig("<trainedModelLabel>");
Operation operation = await client.CreateOrUpdateExportedModelAsync(WaitUntil.Completed, "<projectName>", "<exportedModelName>", body);
]]></code></example>
    </member>
    <member name="CreateOrUpdateExportedModel(WaitUntil,string,string,ExportedModelConfig,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateExportedModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

ExportedModelConfig body = new ExportedModelConfig("<trainedModelLabel>");
Operation operation = client.CreateOrUpdateExportedModel(WaitUntil.Completed, "<projectName>", "<exportedModelName>", body);
]]></code>
This sample shows how to call CreateOrUpdateExportedModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

ExportedModelConfig body = new ExportedModelConfig("<trainedModelLabel>");
Operation operation = client.CreateOrUpdateExportedModel(WaitUntil.Completed, "<projectName>", "<exportedModelName>", body);
]]></code></example>
    </member>
    <member name="CreateOrUpdateExportedModelAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateExportedModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    trainedModelLabel = "<trainedModelLabel>",
});
Operation operation = await client.CreateOrUpdateExportedModelAsync(WaitUntil.Completed, "<projectName>", "<exportedModelName>", content);
]]></code>
This sample shows how to call CreateOrUpdateExportedModelAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    trainedModelLabel = "<trainedModelLabel>",
});
Operation operation = await client.CreateOrUpdateExportedModelAsync(WaitUntil.Completed, "<projectName>", "<exportedModelName>", content);
]]></code></example>
    </member>
    <member name="CreateOrUpdateExportedModel(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateExportedModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    trainedModelLabel = "<trainedModelLabel>",
});
Operation operation = client.CreateOrUpdateExportedModel(WaitUntil.Completed, "<projectName>", "<exportedModelName>", content);
]]></code>
This sample shows how to call CreateOrUpdateExportedModel with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationalAnalysisAuthoring client = new AuthoringClient(endpoint, credential).GetConversationalAnalysisAuthoringClient(apiVersion: "2024-11-15-preview");

using RequestContent content = RequestContent.Create(new
{
    trainedModelLabel = "<trainedModelLabel>",
});
Operation operation = client.CreateOrUpdateExportedModel(WaitUntil.Completed, "<projectName>", "<exportedModelName>", content);
]]></code></example>
    </member>
  </members>
</doc>