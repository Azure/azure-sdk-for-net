// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text
{
    public readonly partial struct NumericRangeKind : IEquatable<NumericRangeKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NumericRangeKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NumericRangeKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NumberValue = "Number";
        private const string SpeedValue = "Speed";
        private const string WeightValue = "Weight";
        private const string LengthValue = "Length";
        private const string VolumeValue = "Volume";
        private const string AreaValue = "Area";
        private const string AgeValue = "Age";
        private const string InformationValue = "Information";
        private const string TemperatureValue = "Temperature";
        private const string CurrencyValue = "Currency";

        /// <summary> Number. </summary>
        public static NumericRangeKind Number { get; } = new NumericRangeKind(NumberValue);
        /// <summary> Speed. </summary>
        public static NumericRangeKind Speed { get; } = new NumericRangeKind(SpeedValue);
        /// <summary> Weight. </summary>
        public static NumericRangeKind Weight { get; } = new NumericRangeKind(WeightValue);
        /// <summary> Length. </summary>
        public static NumericRangeKind Length { get; } = new NumericRangeKind(LengthValue);
        /// <summary> Volume. </summary>
        public static NumericRangeKind Volume { get; } = new NumericRangeKind(VolumeValue);
        /// <summary> Area. </summary>
        public static NumericRangeKind Area { get; } = new NumericRangeKind(AreaValue);
        /// <summary> Age. </summary>
        public static NumericRangeKind Age { get; } = new NumericRangeKind(AgeValue);
        /// <summary> Information. </summary>
        public static NumericRangeKind Information { get; } = new NumericRangeKind(InformationValue);
        /// <summary> Temperature. </summary>
        public static NumericRangeKind Temperature { get; } = new NumericRangeKind(TemperatureValue);
        /// <summary> Currency. </summary>
        public static NumericRangeKind Currency { get; } = new NumericRangeKind(CurrencyValue);
        /// <summary> Determines if two <see cref="NumericRangeKind"/> values are the same. </summary>
        public static bool operator ==(NumericRangeKind left, NumericRangeKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NumericRangeKind"/> values are not the same. </summary>
        public static bool operator !=(NumericRangeKind left, NumericRangeKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NumericRangeKind"/>. </summary>
        public static implicit operator NumericRangeKind(string value) => new NumericRangeKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NumericRangeKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NumericRangeKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
