// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text
{
    /// <summary> Describes the entities certainty and polarity. </summary>
    public readonly partial struct Certainty : IEquatable<Certainty>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Certainty"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Certainty(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositiveValue = "positive";
        private const string PositivePossibleValue = "positivePossible";
        private const string NeutralPossibleValue = "neutralPossible";
        private const string NegativePossibleValue = "negativePossible";
        private const string NegativeValue = "negative";

        /// <summary> positive. </summary>
        public static Certainty Positive { get; } = new Certainty(PositiveValue);
        /// <summary> positivePossible. </summary>
        public static Certainty PositivePossible { get; } = new Certainty(PositivePossibleValue);
        /// <summary> neutralPossible. </summary>
        public static Certainty NeutralPossible { get; } = new Certainty(NeutralPossibleValue);
        /// <summary> negativePossible. </summary>
        public static Certainty NegativePossible { get; } = new Certainty(NegativePossibleValue);
        /// <summary> negative. </summary>
        public static Certainty Negative { get; } = new Certainty(NegativeValue);
        /// <summary> Determines if two <see cref="Certainty"/> values are the same. </summary>
        public static bool operator ==(Certainty left, Certainty right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Certainty"/> values are not the same. </summary>
        public static bool operator !=(Certainty left, Certainty right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Certainty"/>. </summary>
        public static implicit operator Certainty(string value) => new Certainty(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Certainty other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Certainty other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
