<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetProjectDetailsAsync(String,RequestContext)">
<example>
This sample shows how to call GetProjectDetailsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetProjectDetailsAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("multilingualResource").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-project-details

Response Body:

Schema for <c>ProjectMetadata</c>:
<code>{
  projectName: string, # Optional. Name of the project.
  description: string, # Optional. Description of the project.
  language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
  multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
  settings: {
    defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
  }, # Optional. Configurable settings of the Project.
  createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="GetProjectDetails(String,RequestContext)">
<example>
This sample shows how to call GetProjectDetails with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetProjectDetails("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("multilingualResource").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-project-details

Response Body:

Schema for <c>ProjectMetadata</c>:
<code>{
  projectName: string, # Optional. Name of the project.
  description: string, # Optional. Description of the project.
  language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
  multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
  settings: {
    defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
  }, # Optional. Configurable settings of the Project.
  createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="CreateProjectAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateProjectAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    language = "<language>",
};

Response response = await client.CreateProjectAsync("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateProjectAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    description = "<description>",
    language = "<language>",
    multilingualResource = true,
    settings = new {
        defaultAnswer = "<defaultAnswer>",
    },
};

Response response = await client.CreateProjectAsync("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("multilingualResource").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/create-project

Request Body:

Schema for <c>CreateProjectOptions</c>:
<code>{
  description: string, # Optional. Description of the project.
  language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
  multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
  settings: {
    defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
  }, # Optional. Configurable settings of the Project.
}
</code>

Response Body:

Schema for <c>ProjectMetadata</c>:
<code>{
  projectName: string, # Optional. Name of the project.
  description: string, # Optional. Description of the project.
  language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
  multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
  settings: {
    defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
  }, # Optional. Configurable settings of the Project.
  createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="CreateProject(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateProject with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    language = "<language>",
};

Response response = client.CreateProject("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateProject with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    description = "<description>",
    language = "<language>",
    multilingualResource = true,
    settings = new {
        defaultAnswer = "<defaultAnswer>",
    },
};

Response response = client.CreateProject("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("multilingualResource").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/create-project

Request Body:

Schema for <c>CreateProjectOptions</c>:
<code>{
  description: string, # Optional. Description of the project.
  language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
  multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
  settings: {
    defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
  }, # Optional. Configurable settings of the Project.
}
</code>

Response Body:

Schema for <c>ProjectMetadata</c>:
<code>{
  projectName: string, # Optional. Name of the project.
  description: string, # Optional. Description of the project.
  language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
  multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
  settings: {
    defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
  }, # Optional. Configurable settings of the Project.
  createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="GetDeleteStatusAsync(String,RequestContext)">
<example>
This sample shows how to call GetDeleteStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetDeleteStatusAsync("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-delete-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetDeleteStatus(String,RequestContext)">
<example>
This sample shows how to call GetDeleteStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetDeleteStatus("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-delete-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetExportStatusAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetExportStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-export-status

Response Body:

Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>

</remarks>
    </member>
    <member name="GetExportStatus(String,String,RequestContext)">
<example>
This sample shows how to call GetExportStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetExportStatus("<projectName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-export-status

Response Body:

Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>

</remarks>
    </member>
    <member name="GetImportStatusAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetImportStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-import-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetImportStatus(String,String,RequestContext)">
<example>
This sample shows how to call GetImportStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetImportStatus("<projectName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-import-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetDeployStatusAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeployStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetDeployStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-deploy-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetDeployStatus(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeployStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetDeployStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-deploy-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="UpdateSynonymsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateSynonymsAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

Response response = await client.UpdateSynonymsAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateSynonymsAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    value = new[] {
        new {
            alterations = new[] {
                "<String>"
            },
        }
    },
    nextLink = "<nextLink>",
};

Response response = await client.UpdateSynonymsAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-synonyms

Request Body:

Schema for <c>SynonymAssets</c>:
<code>{
  value: [
    {
      alterations: [string], # Required. Collection of word alterations.
    }
  ], # Optional. Collection of synonyms.
  nextLink: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="UpdateSynonyms(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateSynonyms with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

Response response = client.UpdateSynonyms("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateSynonyms with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    value = new[] {
        new {
            alterations = new[] {
                "<String>"
            },
        }
    },
    nextLink = "<nextLink>",
};

Response response = client.UpdateSynonyms("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-synonyms

Request Body:

Schema for <c>SynonymAssets</c>:
<code>{
  value: [
    {
      alterations: [string], # Required. Collection of word alterations.
    }
  ], # Optional. Collection of synonyms.
  nextLink: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetUpdateSourcesStatusAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetUpdateSourcesStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetUpdateSourcesStatusAsync("<projectName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-update-sources-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetUpdateSourcesStatus(String,String,RequestContext)">
<example>
This sample shows how to call GetUpdateSourcesStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetUpdateSourcesStatus("<projectName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-update-sources-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetUpdateQnasStatusAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetUpdateQnasStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetUpdateQnasStatusAsync("<projectName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-update-qnas-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetUpdateQnasStatus(String,String,RequestContext)">
<example>
This sample shows how to call GetUpdateQnasStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetUpdateQnasStatus("<projectName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-update-qnas-status

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="AddFeedbackAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call AddFeedbackAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

Response response = await client.AddFeedbackAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddFeedbackAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    records = new[] {
        new {
            userId = "<userId>",
            userQuestion = "<userQuestion>",
            qnaId = 1234,
        }
    },
};

Response response = await client.AddFeedbackAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/add-feedback

Request Body:

Schema for <c>ActiveLearningFeedback</c>:
<code>{
  records: [
    {
      userId: string, # Optional. Unique identifier of the user.
      userQuestion: string, # Optional. User suggested question for the QnA.
      qnaId: number, # Optional. Unique ID of the QnA.
    }
  ], # Optional. A list of Feedback Records for Active Learning.
}
</code>

</remarks>
    </member>
    <member name="AddFeedback(String,RequestContent,RequestContext)">
<example>
This sample shows how to call AddFeedback with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

Response response = client.AddFeedback("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddFeedback with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    records = new[] {
        new {
            userId = "<userId>",
            userQuestion = "<userQuestion>",
            qnaId = 1234,
        }
    },
};

Response response = client.AddFeedback("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/add-feedback

Request Body:

Schema for <c>ActiveLearningFeedback</c>:
<code>{
  records: [
    {
      userId: string, # Optional. Unique identifier of the user.
      userQuestion: string, # Optional. User suggested question for the QnA.
      qnaId: number, # Optional. Unique ID of the QnA.
    }
  ], # Optional. A list of Feedback Records for Active Learning.
}
</code>

</remarks>
    </member>
    <member name="GetProjectsAsync(RequestContext)">
<example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var data in client.GetProjectsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("multilingualResource").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/list-projects

Response Body:

Schema for <c>ProjectsMetadataValue</c>:
<code>{
  projectName: string, # Optional. Name of the project.
  description: string, # Optional. Description of the project.
  language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
  multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
  settings: {
    defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
  }, # Optional. Configurable settings of the Project.
  createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="GetProjects(RequestContext)">
<example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var data in client.GetProjects())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("multilingualResource").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/list-projects

Response Body:

Schema for <c>ProjectsMetadataValue</c>:
<code>{
  projectName: string, # Optional. Name of the project.
  description: string, # Optional. Description of the project.
  language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
  multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
  settings: {
    defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
  }, # Optional. Configurable settings of the Project.
  createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentsAsync(String,RequestContext)">
<example>
This sample shows how to call GetDeploymentsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var data in client.GetDeploymentsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentName").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/list-deployments

Response Body:

Schema for <c>ProjectDeploymentsList</c>:
<code>{
  deploymentName: string, # Optional. Name of the deployment.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="GetDeployments(String,RequestContext)">
<example>
This sample shows how to call GetDeployments with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var data in client.GetDeployments("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentName").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/list-deployments

Response Body:

Schema for <c>ProjectDeploymentsList</c>:
<code>{
  deploymentName: string, # Optional. Name of the deployment.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="GetSynonymsAsync(String,RequestContext)">
<example>
This sample shows how to call GetSynonymsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var data in client.GetSynonymsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("alterations")[0].ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-synonyms

Response Body:

Schema for <c>SynonymAsset</c>:
<code>{
  alterations: [string], # Required. Collection of word alterations.
}
</code>

</remarks>
    </member>
    <member name="GetSynonyms(String,RequestContext)">
<example>
This sample shows how to call GetSynonyms with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var data in client.GetSynonyms("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("alterations")[0].ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-synonyms

Response Body:

Schema for <c>SynonymAsset</c>:
<code>{
  alterations: [string], # Required. Collection of word alterations.
}
</code>

</remarks>
    </member>
    <member name="GetSourcesAsync(String,RequestContext)">
<example>
This sample shows how to call GetSourcesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var data in client.GetSourcesAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("sourceUri").ToString());
    Console.WriteLine(result.GetProperty("sourceKind").ToString());
    Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-sources

Response Body:

Schema for <c>QnaSourcesMetadata</c>:
<code>{
  displayName: string, # Optional. Friendly name of the Source.
  source: string, # Optional. Unique source identifier. Name of the file if it&apos;s a &apos;file&apos; source; otherwise, the complete URL if it&apos;s a &apos;url&apos; source.
  sourceUri: Uri, # Required. URI location for the file or url.
  sourceKind: &quot;file&quot; | &quot;url&quot;, # Required. Supported source types.
  contentStructureKind: &quot;unstructured&quot;, # Optional. Content structure type for sources.
}
</code>

</remarks>
    </member>
    <member name="GetSources(String,RequestContext)">
<example>
This sample shows how to call GetSources with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var data in client.GetSources("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("sourceUri").ToString());
    Console.WriteLine(result.GetProperty("sourceKind").ToString());
    Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-sources

Response Body:

Schema for <c>QnaSourcesMetadata</c>:
<code>{
  displayName: string, # Optional. Friendly name of the Source.
  source: string, # Optional. Unique source identifier. Name of the file if it&apos;s a &apos;file&apos; source; otherwise, the complete URL if it&apos;s a &apos;url&apos; source.
  sourceUri: Uri, # Required. URI location for the file or url.
  sourceKind: &quot;file&quot; | &quot;url&quot;, # Required. Supported source types.
  contentStructureKind: &quot;unstructured&quot;, # Optional. Content structure type for sources.
}
</code>

</remarks>
    </member>
    <member name="GetQnasAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetQnasAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var data in client.GetQnasAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetQnasAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var data in client.GetQnasAsync("<projectName>", "<source>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-qnas

Response Body:

Schema for <c>QnaAsset</c>:
<code>{
  id: number, # Optional. Unique ID for the QnA.
  answer: string, # Optional. Answer text.
  source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
  questions: [string], # Optional. List of questions associated with the answer.
  metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
  dialog: {
    isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
    prompts: [
      {
        displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
        qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
        qna: {
          id: number, # Optional. Unique ID for the QnA.
          answer: string, # Optional. Answer text.
          source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
          questions: [string], # Optional. List of questions associated with the answer.
          metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
          dialog: QnaDialog, # Optional. Context of a QnA.
          activeLearningSuggestions: [
            {
              clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
              suggestedQuestions: [
                {
                  question: string, # Optional. Question suggested by the Active Learning feature.
                  userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                  autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                }
              ], # Optional. List of all suggested questions for the QnA.
            }
          ], # Optional. List of Active Learning suggestions for the QnA.
        }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
        displayText: string, # Optional. Text displayed to represent a follow up question prompt.
      }
    ], # Optional. List of prompts associated with the answer.
  }, # Optional. Context of a QnA.
  activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
}
</code>

</remarks>
    </member>
    <member name="GetQnas(String,String,RequestContext)">
<example>
This sample shows how to call GetQnas with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var data in client.GetQnas("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetQnas with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var data in client.GetQnas("<projectName>", "<source>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-qnas

Response Body:

Schema for <c>QnaAsset</c>:
<code>{
  id: number, # Optional. Unique ID for the QnA.
  answer: string, # Optional. Answer text.
  source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
  questions: [string], # Optional. List of questions associated with the answer.
  metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
  dialog: {
    isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
    prompts: [
      {
        displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
        qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
        qna: {
          id: number, # Optional. Unique ID for the QnA.
          answer: string, # Optional. Answer text.
          source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
          questions: [string], # Optional. List of questions associated with the answer.
          metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
          dialog: QnaDialog, # Optional. Context of a QnA.
          activeLearningSuggestions: [
            {
              clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
              suggestedQuestions: [
                {
                  question: string, # Optional. Question suggested by the Active Learning feature.
                  userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                  autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                }
              ], # Optional. List of all suggested questions for the QnA.
            }
          ], # Optional. List of Active Learning suggestions for the QnA.
        }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
        displayText: string, # Optional. Text displayed to represent a follow up question prompt.
      }
    ], # Optional. List of prompts associated with the answer.
  }, # Optional. Context of a QnA.
  activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
}
</code>

</remarks>
    </member>
    <member name="DeleteProjectAsync(WaitUntil,String,RequestContext)">
<example>
This sample shows how to call DeleteProjectAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = await client.DeleteProjectAsync(WaitUntil.Started, "<projectName>");

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
    </member>
    <member name="DeleteProject(WaitUntil,String,RequestContext)">
<example>
This sample shows how to call DeleteProject with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = client.DeleteProject(WaitUntil.Started, "<projectName>");

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
    </member>
    <member name="ExportAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call ExportAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = await client.ExportAsync(WaitUntil.Started, "<projectName>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call ExportAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = await client.ExportAsync(WaitUntil.Started, "<projectName>", "<format>", "<assetKind>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/export

Response Body:

Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>

</remarks>
    </member>
    <member name="Export(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call Export with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = client.Export(WaitUntil.Started, "<projectName>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call Export with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = client.Export(WaitUntil.Started, "<projectName>", "<format>", "<assetKind>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/export

Response Body:

Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>

</remarks>
    </member>
    <member name="ImportAsync(WaitUntil,String,RequestContent,String,String,RequestContext)">
<example>
This sample shows how to call ImportAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

var operation = await client.ImportAsync(WaitUntil.Started, "<projectName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call ImportAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    metadata = new {
        description = "<description>",
        language = "<language>",
        multilingualResource = true,
        settings = new {
            defaultAnswer = "<defaultAnswer>",
        },
    },
    assets = new {
        synonyms = new[] {
            new {
                alterations = new[] {
                    "<String>"
                },
            }
        },
        qnas = new[] {
            new {
                id = 1234,
                answer = "<answer>",
                source = "<source>",
                questions = new[] {
                    "<String>"
                },
                metadata = new {
                    key = "<String>",
                },
                dialog = new {
                    isContextOnly = true,
                    prompts = new[] {
                        new {
                            displayOrder = 1234,
                            qnaId = 1234,
                            qna = new {
                                id = 1234,
                                answer = "<answer>",
                                source = "<source>",
                                questions = new[] {
                                    "<String>"
                                },
                                metadata = new {
                                    key = "<String>",
                                },
                                activeLearningSuggestions = new[] {
                                    new {
                                        clusterHead = "<clusterHead>",
                                        suggestedQuestions = new[] {
                                            new {
                                                question = "<question>",
                                                userSuggestedCount = 1234,
                                                autoSuggestedCount = 1234,
                                            }
                                        },
                                    }
                                },
                            },
                            displayText = "<displayText>",
                        }
                    },
                },
                activeLearningSuggestions = new[] {
                    new {
                        clusterHead = "<clusterHead>",
                        suggestedQuestions = new[] {
                            new {
                                question = "<question>",
                                userSuggestedCount = 1234,
                                autoSuggestedCount = 1234,
                            }
                        },
                    }
                },
            }
        },
    },
    fileUri = "<fileUri>",
};

var operation = await client.ImportAsync(WaitUntil.Started, "<projectName>", RequestContent.Create(data), "<format>", "<assetKind>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/import

Request Body:

Schema for <c>ImportJobOptions</c>:
<code>{
  metadata: {
    description: string, # Optional. Description of the project.
    language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
    multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
    settings: {
      defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
    }, # Optional. Configurable settings of the Project.
  }, # Optional. Parameters needed to create the project.
  assets: {
    synonyms: [
      {
        alterations: [string], # Required. Collection of word alterations.
      }
    ], # Optional. Collection of synonyms.
    qnas: [
      {
        id: number, # Optional. Unique ID for the QnA.
        answer: string, # Optional. Answer text.
        source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        questions: [string], # Optional. List of questions associated with the answer.
        metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
        dialog: {
          isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
          prompts: [
            {
              displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
              qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
              qna: {
                id: number, # Optional. Unique ID for the QnA.
                answer: string, # Optional. Answer text.
                source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                questions: [string], # Optional. List of questions associated with the answer.
                metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                dialog: QnaDialog, # Optional. Context of a QnA.
                activeLearningSuggestions: [
                  {
                    clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                    suggestedQuestions: [
                      {
                        question: string, # Optional. Question suggested by the Active Learning feature.
                        userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                        autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                      }
                    ], # Optional. List of all suggested questions for the QnA.
                  }
                ], # Optional. List of Active Learning suggestions for the QnA.
              }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
              displayText: string, # Optional. Text displayed to represent a follow up question prompt.
            }
          ], # Optional. List of prompts associated with the answer.
        }, # Optional. Context of a QnA.
        activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
      }
    ], # Optional. List of QnA records to import.
  }, # Optional. All assets for this project.
  fileUri: string, # Optional. Import data File URI.
}
</code>

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="Import(WaitUntil,String,RequestContent,String,String,RequestContext)">
<example>
This sample shows how to call Import with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

var operation = client.Import(WaitUntil.Started, "<projectName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call Import with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    metadata = new {
        description = "<description>",
        language = "<language>",
        multilingualResource = true,
        settings = new {
            defaultAnswer = "<defaultAnswer>",
        },
    },
    assets = new {
        synonyms = new[] {
            new {
                alterations = new[] {
                    "<String>"
                },
            }
        },
        qnas = new[] {
            new {
                id = 1234,
                answer = "<answer>",
                source = "<source>",
                questions = new[] {
                    "<String>"
                },
                metadata = new {
                    key = "<String>",
                },
                dialog = new {
                    isContextOnly = true,
                    prompts = new[] {
                        new {
                            displayOrder = 1234,
                            qnaId = 1234,
                            qna = new {
                                id = 1234,
                                answer = "<answer>",
                                source = "<source>",
                                questions = new[] {
                                    "<String>"
                                },
                                metadata = new {
                                    key = "<String>",
                                },
                                activeLearningSuggestions = new[] {
                                    new {
                                        clusterHead = "<clusterHead>",
                                        suggestedQuestions = new[] {
                                            new {
                                                question = "<question>",
                                                userSuggestedCount = 1234,
                                                autoSuggestedCount = 1234,
                                            }
                                        },
                                    }
                                },
                            },
                            displayText = "<displayText>",
                        }
                    },
                },
                activeLearningSuggestions = new[] {
                    new {
                        clusterHead = "<clusterHead>",
                        suggestedQuestions = new[] {
                            new {
                                question = "<question>",
                                userSuggestedCount = 1234,
                                autoSuggestedCount = 1234,
                            }
                        },
                    }
                },
            }
        },
    },
    fileUri = "<fileUri>",
};

var operation = client.Import(WaitUntil.Started, "<projectName>", RequestContent.Create(data), "<format>", "<assetKind>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/import

Request Body:

Schema for <c>ImportJobOptions</c>:
<code>{
  metadata: {
    description: string, # Optional. Description of the project.
    language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. If not set, use &quot;en&quot; for English as default.
    multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
    settings: {
      defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
    }, # Optional. Configurable settings of the Project.
  }, # Optional. Parameters needed to create the project.
  assets: {
    synonyms: [
      {
        alterations: [string], # Required. Collection of word alterations.
      }
    ], # Optional. Collection of synonyms.
    qnas: [
      {
        id: number, # Optional. Unique ID for the QnA.
        answer: string, # Optional. Answer text.
        source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        questions: [string], # Optional. List of questions associated with the answer.
        metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
        dialog: {
          isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
          prompts: [
            {
              displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
              qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
              qna: {
                id: number, # Optional. Unique ID for the QnA.
                answer: string, # Optional. Answer text.
                source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                questions: [string], # Optional. List of questions associated with the answer.
                metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                dialog: QnaDialog, # Optional. Context of a QnA.
                activeLearningSuggestions: [
                  {
                    clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                    suggestedQuestions: [
                      {
                        question: string, # Optional. Question suggested by the Active Learning feature.
                        userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                        autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                      }
                    ], # Optional. List of all suggested questions for the QnA.
                  }
                ], # Optional. List of Active Learning suggestions for the QnA.
              }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
              displayText: string, # Optional. Text displayed to represent a follow up question prompt.
            }
          ], # Optional. List of prompts associated with the answer.
        }, # Optional. Context of a QnA.
        activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
      }
    ], # Optional. List of QnA records to import.
  }, # Optional. All assets for this project.
  fileUri: string, # Optional. Import data File URI.
}
</code>

Response Body:

<details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
<code>{
  createdDateTime: string (ISO 8601 Format), # Required.
  expirationDateTime: string (ISO 8601 Format), # Optional.
  jobId: string, # Required.
  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. Job Status.
}
</code>
</details>

</remarks>
    </member>
    <member name="DeployProjectAsync(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call DeployProjectAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = await client.DeployProjectAsync(WaitUntil.Started, "<projectName>", "<deploymentName>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("deploymentName").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/deploy-project

Response Body:

Schema for <c>ProjectDeployment</c>:
<code>{
  deploymentName: string, # Optional. Name of the deployment.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="DeployProject(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call DeployProject with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = client.DeployProject(WaitUntil.Started, "<projectName>", "<deploymentName>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("deploymentName").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/deploy-project

Response Body:

Schema for <c>ProjectDeployment</c>:
<code>{
  deploymentName: string, # Optional. Name of the deployment.
  lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
}
</code>

</remarks>
    </member>
    <member name="UpdateSourcesAsync(WaitUntil,String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateSourcesAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new[] {
    new {
        op = "add",
        value = new {
            displayName = "<displayName>",
            source = "<source>",
            sourceUri = new {},
            sourceKind = "file",
            contentStructureKind = "unstructured",
        },
    }
};

var operation = await client.UpdateSourcesAsync(WaitUntil.Started, "<projectName>", RequestContent.Create(data));

var response = await operation.WaitForCompletionAsync();
await foreach (var data in response.Value)
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("sourceUri").ToString());
    Console.WriteLine(result.GetProperty("sourceKind").ToString());
    Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload and one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-sources

Request Body:

Schema for <c>UpdateSourceRecord</c>:
<code>{
  op: &quot;add&quot; | &quot;delete&quot; | &quot;replace&quot;, # Required. Update operation type for assets.
  value: {
    displayName: string, # Optional. Friendly name of the Source.
    source: string, # Optional. Unique source identifier. Name of the file if it&apos;s a &apos;file&apos; source; otherwise, the complete URL if it&apos;s a &apos;url&apos; source.
    sourceUri: Uri, # Required. URI location for the file or url.
    sourceKind: &quot;file&quot; | &quot;url&quot;, # Required. Supported source types.
    contentStructureKind: &quot;unstructured&quot;, # Optional. Content structure type for sources.
  }, # Required. Update source record.
}
</code>

Response Body:

Schema for <c>QnaSourcesMetadata</c>:
<code>{
  displayName: string, # Optional. Friendly name of the Source.
  source: string, # Optional. Unique source identifier. Name of the file if it&apos;s a &apos;file&apos; source; otherwise, the complete URL if it&apos;s a &apos;url&apos; source.
  sourceUri: Uri, # Required. URI location for the file or url.
  sourceKind: &quot;file&quot; | &quot;url&quot;, # Required. Supported source types.
  contentStructureKind: &quot;unstructured&quot;, # Optional. Content structure type for sources.
}
</code>

</remarks>
    </member>
    <member name="UpdateSources(WaitUntil,String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateSources with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new[] {
    new {
        op = "add",
        value = new {
            displayName = "<displayName>",
            source = "<source>",
            sourceUri = new {},
            sourceKind = "file",
            contentStructureKind = "unstructured",
        },
    }
};

var operation = client.UpdateSources(WaitUntil.Started, "<projectName>", RequestContent.Create(data));

var response = operation.WaitForCompletion();
foreach (var data in response.Value)
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("sourceUri").ToString());
    Console.WriteLine(result.GetProperty("sourceKind").ToString());
    Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload and one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-sources

Request Body:

Schema for <c>UpdateSourceRecord</c>:
<code>{
  op: &quot;add&quot; | &quot;delete&quot; | &quot;replace&quot;, # Required. Update operation type for assets.
  value: {
    displayName: string, # Optional. Friendly name of the Source.
    source: string, # Optional. Unique source identifier. Name of the file if it&apos;s a &apos;file&apos; source; otherwise, the complete URL if it&apos;s a &apos;url&apos; source.
    sourceUri: Uri, # Required. URI location for the file or url.
    sourceKind: &quot;file&quot; | &quot;url&quot;, # Required. Supported source types.
    contentStructureKind: &quot;unstructured&quot;, # Optional. Content structure type for sources.
  }, # Required. Update source record.
}
</code>

Response Body:

Schema for <c>QnaSourcesMetadata</c>:
<code>{
  displayName: string, # Optional. Friendly name of the Source.
  source: string, # Optional. Unique source identifier. Name of the file if it&apos;s a &apos;file&apos; source; otherwise, the complete URL if it&apos;s a &apos;url&apos; source.
  sourceUri: Uri, # Required. URI location for the file or url.
  sourceKind: &quot;file&quot; | &quot;url&quot;, # Required. Supported source types.
  contentStructureKind: &quot;unstructured&quot;, # Optional. Content structure type for sources.
}
</code>

</remarks>
    </member>
    <member name="UpdateQnasAsync(WaitUntil,String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateQnasAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new[] {
    new {
        op = "add",
        value = new {
            id = 1234,
            answer = "<answer>",
            source = "<source>",
            questions = new[] {
                "<String>"
            },
            metadata = new {
                key = "<String>",
            },
            dialog = new {
                isContextOnly = true,
                prompts = new[] {
                    new {
                        displayOrder = 1234,
                        qnaId = 1234,
                        displayText = "<displayText>",
                    }
                },
            },
            activeLearningSuggestions = new[] {
                new {
                    clusterHead = "<clusterHead>",
                    suggestedQuestions = new[] {
                        new {
                            question = "<question>",
                            userSuggestedCount = 1234,
                            autoSuggestedCount = 1234,
                        }
                    },
                }
            },
        },
    }
};

var operation = await client.UpdateQnasAsync(WaitUntil.Started, "<projectName>", RequestContent.Create(data));

var response = await operation.WaitForCompletionAsync();
await foreach (var data in response.Value)
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload and one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-qnas

Request Body:

Schema for <c>UpdateQnaRecord</c>:
<code>{
  op: &quot;add&quot; | &quot;delete&quot; | &quot;replace&quot;, # Required. Update operation type for assets.
  value: {
    id: number, # Optional. Unique ID for the QnA.
    answer: string, # Optional. Answer text.
    source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
    questions: [string], # Optional. List of questions associated with the answer.
    metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
    dialog: {
      isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
      prompts: [
        {
          displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
          qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
          qna: QnaRecord, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
          displayText: string, # Optional. Text displayed to represent a follow up question prompt.
        }
      ], # Optional. List of prompts associated with the answer.
    }, # Optional. Context of a QnA.
    activeLearningSuggestions: [
      {
        clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
        suggestedQuestions: [
          {
            question: string, # Optional. Question suggested by the Active Learning feature.
            userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
            autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
          }
        ], # Optional. List of all suggested questions for the QnA.
      }
    ], # Optional. List of Active Learning suggestions for the QnA.
  }, # Required. QnA record.
}
</code>

Response Body:

Schema for <c>QnaAsset</c>:
<code>{
  id: number, # Optional. Unique ID for the QnA.
  answer: string, # Optional. Answer text.
  source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
  questions: [string], # Optional. List of questions associated with the answer.
  metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
  dialog: {
    isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
    prompts: [
      {
        displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
        qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
        qna: {
          id: number, # Optional. Unique ID for the QnA.
          answer: string, # Optional. Answer text.
          source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
          questions: [string], # Optional. List of questions associated with the answer.
          metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
          dialog: QnaDialog, # Optional. Context of a QnA.
          activeLearningSuggestions: [
            {
              clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
              suggestedQuestions: [
                {
                  question: string, # Optional. Question suggested by the Active Learning feature.
                  userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                  autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                }
              ], # Optional. List of all suggested questions for the QnA.
            }
          ], # Optional. List of Active Learning suggestions for the QnA.
        }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
        displayText: string, # Optional. Text displayed to represent a follow up question prompt.
      }
    ], # Optional. List of prompts associated with the answer.
  }, # Optional. Context of a QnA.
  activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
}
</code>

</remarks>
    </member>
    <member name="UpdateQnas(WaitUntil,String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateQnas with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new[] {
    new {
        op = "add",
        value = new {
            id = 1234,
            answer = "<answer>",
            source = "<source>",
            questions = new[] {
                "<String>"
            },
            metadata = new {
                key = "<String>",
            },
            dialog = new {
                isContextOnly = true,
                prompts = new[] {
                    new {
                        displayOrder = 1234,
                        qnaId = 1234,
                        displayText = "<displayText>",
                    }
                },
            },
            activeLearningSuggestions = new[] {
                new {
                    clusterHead = "<clusterHead>",
                    suggestedQuestions = new[] {
                        new {
                            question = "<question>",
                            userSuggestedCount = 1234,
                            autoSuggestedCount = 1234,
                        }
                    },
                }
            },
        },
    }
};

var operation = client.UpdateQnas(WaitUntil.Started, "<projectName>", RequestContent.Create(data));

var response = operation.WaitForCompletion();
foreach (var data in response.Value)
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload and one item in the pageable response.
Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-qnas

Request Body:

Schema for <c>UpdateQnaRecord</c>:
<code>{
  op: &quot;add&quot; | &quot;delete&quot; | &quot;replace&quot;, # Required. Update operation type for assets.
  value: {
    id: number, # Optional. Unique ID for the QnA.
    answer: string, # Optional. Answer text.
    source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
    questions: [string], # Optional. List of questions associated with the answer.
    metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
    dialog: {
      isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
      prompts: [
        {
          displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
          qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
          qna: QnaRecord, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
          displayText: string, # Optional. Text displayed to represent a follow up question prompt.
        }
      ], # Optional. List of prompts associated with the answer.
    }, # Optional. Context of a QnA.
    activeLearningSuggestions: [
      {
        clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
        suggestedQuestions: [
          {
            question: string, # Optional. Question suggested by the Active Learning feature.
            userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
            autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
          }
        ], # Optional. List of all suggested questions for the QnA.
      }
    ], # Optional. List of Active Learning suggestions for the QnA.
  }, # Required. QnA record.
}
</code>

Response Body:

Schema for <c>QnaAsset</c>:
<code>{
  id: number, # Optional. Unique ID for the QnA.
  answer: string, # Optional. Answer text.
  source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
  questions: [string], # Optional. List of questions associated with the answer.
  metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
  dialog: {
    isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
    prompts: [
      {
        displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
        qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
        qna: {
          id: number, # Optional. Unique ID for the QnA.
          answer: string, # Optional. Answer text.
          source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
          questions: [string], # Optional. List of questions associated with the answer.
          metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
          dialog: QnaDialog, # Optional. Context of a QnA.
          activeLearningSuggestions: [
            {
              clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
              suggestedQuestions: [
                {
                  question: string, # Optional. Question suggested by the Active Learning feature.
                  userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                  autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                }
              ], # Optional. List of all suggested questions for the QnA.
            }
          ], # Optional. List of Active Learning suggestions for the QnA.
        }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
        displayText: string, # Optional. Text displayed to represent a follow up question prompt.
      }
    ], # Optional. List of prompts associated with the answer.
  }, # Optional. Context of a QnA.
  activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
}
</code>

</remarks>
    </member>
  </members>
</doc>