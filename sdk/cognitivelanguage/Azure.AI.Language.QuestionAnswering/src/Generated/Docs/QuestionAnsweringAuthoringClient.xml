<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetProjectDetailsAsync(string,RequestContext)">
<example>
This sample shows how to call GetProjectDetailsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetProjectDetailsAsync("<projectName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("multilingualResource").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-project-details

</remarks>
    </member>
    <member name="GetProjectDetails(string,RequestContext)">
<example>
This sample shows how to call GetProjectDetails with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetProjectDetails("<projectName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("multilingualResource").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-project-details

</remarks>
    </member>
    <member name="CreateProjectAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateProjectAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    language = "<language>",
};

Response response = await client.CreateProjectAsync("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateProjectAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    description = "<description>",
    language = "<language>",
    multilingualResource = true,
    settings = new {
        defaultAnswer = "<defaultAnswer>",
    },
};

Response response = await client.CreateProjectAsync("<projectName>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("multilingualResource").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/create-project

</remarks>
    </member>
    <member name="CreateProject(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateProject with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    language = "<language>",
};

Response response = client.CreateProject("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateProject with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    description = "<description>",
    language = "<language>",
    multilingualResource = true,
    settings = new {
        defaultAnswer = "<defaultAnswer>",
    },
};

Response response = client.CreateProject("<projectName>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("multilingualResource").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/create-project

</remarks>
    </member>
    <member name="GetDeleteStatusAsync(string,RequestContext)">
<example>
This sample shows how to call GetDeleteStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetDeleteStatusAsync("<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-delete-status

</remarks>
    </member>
    <member name="GetDeleteStatus(string,RequestContext)">
<example>
This sample shows how to call GetDeleteStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetDeleteStatus("<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-delete-status

</remarks>
    </member>
    <member name="GetExportStatusAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetExportStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-export-status

</remarks>
    </member>
    <member name="GetExportStatus(string,string,RequestContext)">
<example>
This sample shows how to call GetExportStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetExportStatus("<projectName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-export-status

</remarks>
    </member>
    <member name="GetImportStatusAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetImportStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-import-status

</remarks>
    </member>
    <member name="GetImportStatus(string,string,RequestContext)">
<example>
This sample shows how to call GetImportStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetImportStatus("<projectName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-import-status

</remarks>
    </member>
    <member name="GetDeployStatusAsync(string,string,string,RequestContext)">
<example>
This sample shows how to call GetDeployStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetDeployStatusAsync("<projectName>", "<deploymentName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-deploy-status

</remarks>
    </member>
    <member name="GetDeployStatus(string,string,string,RequestContext)">
<example>
This sample shows how to call GetDeployStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetDeployStatus("<projectName>", "<deploymentName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-deploy-status

</remarks>
    </member>
    <member name="UpdateSynonymsAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateSynonymsAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

Response response = await client.UpdateSynonymsAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateSynonymsAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    value = new[] {
        new {
            alterations = new[] {
                "<String>"
            },
        }
    },
    nextLink = "<nextLink>",
};

Response response = await client.UpdateSynonymsAsync("<projectName>", RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-synonyms

</remarks>
    </member>
    <member name="UpdateSynonyms(string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateSynonyms with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

Response response = client.UpdateSynonyms("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateSynonyms with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    value = new[] {
        new {
            alterations = new[] {
                "<String>"
            },
        }
    },
    nextLink = "<nextLink>",
};

Response response = client.UpdateSynonyms("<projectName>", RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-synonyms

</remarks>
    </member>
    <member name="GetUpdateSourcesStatusAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetUpdateSourcesStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetUpdateSourcesStatusAsync("<projectName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-update-sources-status

</remarks>
    </member>
    <member name="GetUpdateSourcesStatus(string,string,RequestContext)">
<example>
This sample shows how to call GetUpdateSourcesStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetUpdateSourcesStatus("<projectName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-update-sources-status

</remarks>
    </member>
    <member name="GetUpdateQnasStatusAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetUpdateQnasStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = await client.GetUpdateQnasStatusAsync("<projectName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-update-qnas-status

</remarks>
    </member>
    <member name="GetUpdateQnasStatus(string,string,RequestContext)">
<example>
This sample shows how to call GetUpdateQnasStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

Response response = client.GetUpdateQnasStatus("<projectName>", "<jobId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-update-qnas-status

</remarks>
    </member>
    <member name="AddFeedbackAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call AddFeedbackAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

Response response = await client.AddFeedbackAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddFeedbackAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    records = new[] {
        new {
            userId = "<userId>",
            userQuestion = "<userQuestion>",
            qnaId = 1234,
        }
    },
};

Response response = await client.AddFeedbackAsync("<projectName>", RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/add-feedback

</remarks>
    </member>
    <member name="AddFeedback(string,RequestContent,RequestContext)">
<example>
This sample shows how to call AddFeedback with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

Response response = client.AddFeedback("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddFeedback with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    records = new[] {
        new {
            userId = "<userId>",
            userQuestion = "<userQuestion>",
            qnaId = 1234,
        }
    },
};

Response response = client.AddFeedback("<projectName>", RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/add-feedback

</remarks>
    </member>
    <member name="GetProjectsAsync(RequestContext)">
<example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var item in client.GetProjectsAsync(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("multilingualResource").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/list-projects

</remarks>
    </member>
    <member name="GetProjects(RequestContext)">
<example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var item in client.GetProjects(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("multilingualResource").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/list-projects

</remarks>
    </member>
    <member name="GetDeploymentsAsync(string,RequestContext)">
<example>
This sample shows how to call GetDeploymentsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var item in client.GetDeploymentsAsync("<projectName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentName").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/list-deployments

</remarks>
    </member>
    <member name="GetDeployments(string,RequestContext)">
<example>
This sample shows how to call GetDeployments with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var item in client.GetDeployments("<projectName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentName").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/list-deployments

</remarks>
    </member>
    <member name="GetSynonymsAsync(string,RequestContext)">
<example>
This sample shows how to call GetSynonymsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var item in client.GetSynonymsAsync("<projectName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("alterations")[0].ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-synonyms

</remarks>
    </member>
    <member name="GetSynonyms(string,RequestContext)">
<example>
This sample shows how to call GetSynonyms with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var item in client.GetSynonyms("<projectName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("alterations")[0].ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-synonyms

</remarks>
    </member>
    <member name="GetSourcesAsync(string,RequestContext)">
<example>
This sample shows how to call GetSourcesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var item in client.GetSourcesAsync("<projectName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("sourceUri").ToString());
    Console.WriteLine(result.GetProperty("sourceKind").ToString());
    Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-sources

</remarks>
    </member>
    <member name="GetSources(string,RequestContext)">
<example>
This sample shows how to call GetSources with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var item in client.GetSources("<projectName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("sourceUri").ToString());
    Console.WriteLine(result.GetProperty("sourceKind").ToString());
    Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-sources

</remarks>
    </member>
    <member name="GetQnasAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetQnasAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var item in client.GetQnasAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetQnasAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

await foreach (var item in client.GetQnasAsync("<projectName>", "<source>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-qnas

</remarks>
    </member>
    <member name="GetQnas(string,string,RequestContext)">
<example>
This sample shows how to call GetQnas with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var item in client.GetQnas("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetQnas with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

foreach (var item in client.GetQnas("<projectName>", "<source>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-qnas

</remarks>
    </member>
    <member name="DeleteProjectAsync(WaitUntil,string,RequestContext)">
<example>
This sample shows how to call DeleteProjectAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>", new RequestContext());

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/delete-project

</remarks>
    </member>
    <member name="DeleteProject(WaitUntil,string,RequestContext)">
<example>
This sample shows how to call DeleteProject with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = client.DeleteProject(WaitUntil.Completed, "<projectName>", new RequestContext());

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/delete-project

</remarks>
    </member>
    <member name="ExportAsync(WaitUntil,string,string,string,RequestContext)">
<example>
This sample shows how to call ExportAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>");

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call ExportAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "<format>", "<assetKind>", new RequestContext());

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/export

</remarks>
    </member>
    <member name="Export(WaitUntil,string,string,string,RequestContext)">
<example>
This sample shows how to call Export with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = client.Export(WaitUntil.Completed, "<projectName>");

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call Export with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = client.Export(WaitUntil.Completed, "<projectName>", "<format>", "<assetKind>", new RequestContext());

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/export

</remarks>
    </member>
    <member name="ImportAsync(WaitUntil,string,RequestContent,string,string,RequestContext)">
<example>
This sample shows how to call ImportAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

var operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call ImportAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    metadata = new {
        description = "<description>",
        language = "<language>",
        multilingualResource = true,
        settings = new {
            defaultAnswer = "<defaultAnswer>",
        },
    },
    assets = new {
        synonyms = new[] {
            new {
                alterations = new[] {
                    "<String>"
                },
            }
        },
        qnas = new[] {
            new {
                id = 1234,
                answer = "<answer>",
                source = "<source>",
                questions = new[] {
                    "<String>"
                },
                metadata = new {
                    key = "<String>",
                },
                dialog = new {
                    isContextOnly = true,
                    prompts = new[] {
                        new {
                            displayOrder = 1234,
                            qnaId = 1234,
                            qna = new {
                                id = 1234,
                                answer = "<answer>",
                                source = "<source>",
                                questions = new[] {
                                    "<String>"
                                },
                                metadata = new {
                                    key = "<String>",
                                },
                                activeLearningSuggestions = new[] {
                                    new {
                                        clusterHead = "<clusterHead>",
                                        suggestedQuestions = new[] {
                                            new {
                                                question = "<question>",
                                                userSuggestedCount = 1234,
                                                autoSuggestedCount = 1234,
                                            }
                                        },
                                    }
                                },
                            },
                            displayText = "<displayText>",
                        }
                    },
                },
                activeLearningSuggestions = new[] {
                    new {
                        clusterHead = "<clusterHead>",
                    }
                },
            }
        },
    },
    fileUri = "<fileUri>",
};

var operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", RequestContent.Create(data), "<format>", "<assetKind>", new RequestContext());

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/import

</remarks>
    </member>
    <member name="Import(WaitUntil,string,RequestContent,string,string,RequestContext)">
<example>
This sample shows how to call Import with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {};

var operation = client.Import(WaitUntil.Completed, "<projectName>", RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call Import with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new {
    metadata = new {
        description = "<description>",
        language = "<language>",
        multilingualResource = true,
        settings = new {
            defaultAnswer = "<defaultAnswer>",
        },
    },
    assets = new {
        synonyms = new[] {
            new {
                alterations = new[] {
                    "<String>"
                },
            }
        },
        qnas = new[] {
            new {
                id = 1234,
                answer = "<answer>",
                source = "<source>",
                questions = new[] {
                    "<String>"
                },
                metadata = new {
                    key = "<String>",
                },
                dialog = new {
                    isContextOnly = true,
                    prompts = new[] {
                        new {
                            displayOrder = 1234,
                            qnaId = 1234,
                            qna = new {
                                id = 1234,
                                answer = "<answer>",
                                source = "<source>",
                                questions = new[] {
                                    "<String>"
                                },
                                metadata = new {
                                    key = "<String>",
                                },
                                activeLearningSuggestions = new[] {
                                    new {
                                        clusterHead = "<clusterHead>",
                                        suggestedQuestions = new[] {
                                            new {
                                                question = "<question>",
                                                userSuggestedCount = 1234,
                                                autoSuggestedCount = 1234,
                                            }
                                        },
                                    }
                                },
                            },
                            displayText = "<displayText>",
                        }
                    },
                },
                activeLearningSuggestions = new[] {
                    new {
                        clusterHead = "<clusterHead>",
                    }
                },
            }
        },
    },
    fileUri = "<fileUri>",
};

var operation = client.Import(WaitUntil.Completed, "<projectName>", RequestContent.Create(data), "<format>", "<assetKind>", new RequestContext());

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/import

</remarks>
    </member>
    <member name="DeployProjectAsync(WaitUntil,string,string,RequestContext)">
<example>
This sample shows how to call DeployProjectAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", new RequestContext());

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("deploymentName").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/deploy-project

</remarks>
    </member>
    <member name="DeployProject(WaitUntil,string,string,RequestContext)">
<example>
This sample shows how to call DeployProject with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", new RequestContext());

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("deploymentName").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/deploy-project

</remarks>
    </member>
    <member name="UpdateSourcesAsync(WaitUntil,string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateSourcesAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new[] {
    new {
        op = "add",
        value = new {
            displayName = "<displayName>",
            source = "<source>",
            sourceUri = "http://localhost:3000",
            sourceKind = "file",
            contentStructureKind = "unstructured",
        },
    }
};

var operation = await client.UpdateSourcesAsync(WaitUntil.Completed, "<projectName>", RequestContent.Create(data), new RequestContext());

await foreach (var item in operation.Value)
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("sourceUri").ToString());
    Console.WriteLine(result.GetProperty("sourceKind").ToString());
    Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-sources

</remarks>
    </member>
    <member name="UpdateSources(WaitUntil,string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateSources with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new[] {
    new {
        op = "add",
        value = new {
            displayName = "<displayName>",
            source = "<source>",
            sourceUri = "http://localhost:3000",
            sourceKind = "file",
            contentStructureKind = "unstructured",
        },
    }
};

var operation = client.UpdateSources(WaitUntil.Completed, "<projectName>", RequestContent.Create(data), new RequestContext());

foreach (var item in operation.Value)
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("sourceUri").ToString());
    Console.WriteLine(result.GetProperty("sourceKind").ToString());
    Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-sources

</remarks>
    </member>
    <member name="UpdateQnasAsync(WaitUntil,string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateQnasAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new[] {
    new {
        op = "add",
        value = new {
            id = 1234,
            answer = "<answer>",
            source = "<source>",
            questions = new[] {
                "<String>"
            },
            metadata = new {
                key = "<String>",
            },
            dialog = new {
                isContextOnly = true,
                prompts = new[] {
                    new {
                        displayOrder = 1234,
                        qnaId = 1234,
                        displayText = "<displayText>",
                    }
                },
            },
            activeLearningSuggestions = new[] {
                new {
                    clusterHead = "<clusterHead>",
                    suggestedQuestions = new[] {
                        new {
                            question = "<question>",
                            userSuggestedCount = 1234,
                            autoSuggestedCount = 1234,
                        }
                    },
                }
            },
        },
    }
};

var operation = await client.UpdateQnasAsync(WaitUntil.Completed, "<projectName>", RequestContent.Create(data), new RequestContext());

await foreach (var item in operation.Value)
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-qnas

</remarks>
    </member>
    <member name="UpdateQnas(WaitUntil,string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateQnas with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new QuestionAnsweringAuthoringClient(endpoint, credential);

var data = new[] {
    new {
        op = "add",
        value = new {
            id = 1234,
            answer = "<answer>",
            source = "<source>",
            questions = new[] {
                "<String>"
            },
            metadata = new {
                key = "<String>",
            },
            dialog = new {
                isContextOnly = true,
                prompts = new[] {
                    new {
                        displayOrder = 1234,
                        qnaId = 1234,
                        displayText = "<displayText>",
                    }
                },
            },
            activeLearningSuggestions = new[] {
                new {
                    clusterHead = "<clusterHead>",
                    suggestedQuestions = new[] {
                        new {
                            question = "<question>",
                            userSuggestedCount = 1234,
                            autoSuggestedCount = 1234,
                        }
                    },
                }
            },
        },
    }
};

var operation = client.UpdateQnas(WaitUntil.Completed, "<projectName>", RequestContent.Create(data), new RequestContext());

foreach (var item in operation.Value)
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
    Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
}
]]></code>
</example>
<remarks>

Additional information can be found in the service REST API documentation:
https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-qnas

</remarks>
    </member>
  </members>
</doc>