// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Language.QuestionAnswering
{
    /// <summary> The question and text record parameters to answer. </summary>
    public partial class AnswersFromTextOptions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AnswersFromTextOptions"/>. </summary>
        /// <param name="question"> User question to query against the given text records. </param>
        /// <param name="textDocuments"> Text records to be searched for given question. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="question"/> or <paramref name="textDocuments"/> is null. </exception>
        public AnswersFromTextOptions(string question, IEnumerable<TextDocument> textDocuments)
        {
            Argument.AssertNotNull(question, nameof(question));
            Argument.AssertNotNull(textDocuments, nameof(textDocuments));

            Question = question;
            TextDocuments = textDocuments.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="AnswersFromTextOptions"/>. </summary>
        /// <param name="question"> User question to query against the given text records. </param>
        /// <param name="textDocuments"> Text records to be searched for given question. </param>
        /// <param name="language"> Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default. </param>
        /// <param name="stringIndexType"> Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AnswersFromTextOptions(string question, IList<TextDocument> textDocuments, string language, StringIndexType? stringIndexType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Question = question;
            TextDocuments = textDocuments;
            Language = language;
            StringIndexType = stringIndexType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AnswersFromTextOptions"/> for deserialization. </summary>
        internal AnswersFromTextOptions()
        {
        }
    }
}
