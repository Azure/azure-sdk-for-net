// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.QuestionAnswering
{
    /// <summary> Fields to be considred for matching policy. </summary>
    public readonly partial struct MatchingPolicyFieldsType : IEquatable<MatchingPolicyFieldsType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MatchingPolicyFieldsType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MatchingPolicyFieldsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string QuestionsValue = "Questions";
        private const string AnswerValue = "Answer";

        /// <summary> Include 'Questions' field. </summary>
        public static MatchingPolicyFieldsType Questions { get; } = new MatchingPolicyFieldsType(QuestionsValue);
        /// <summary> Include 'Answer' field. </summary>
        public static MatchingPolicyFieldsType Answer { get; } = new MatchingPolicyFieldsType(AnswerValue);
        /// <summary> Determines if two <see cref="MatchingPolicyFieldsType"/> values are the same. </summary>
        public static bool operator ==(MatchingPolicyFieldsType left, MatchingPolicyFieldsType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MatchingPolicyFieldsType"/> values are not the same. </summary>
        public static bool operator !=(MatchingPolicyFieldsType left, MatchingPolicyFieldsType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MatchingPolicyFieldsType"/>. </summary>
        public static implicit operator MatchingPolicyFieldsType(string value) => new MatchingPolicyFieldsType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MatchingPolicyFieldsType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MatchingPolicyFieldsType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
