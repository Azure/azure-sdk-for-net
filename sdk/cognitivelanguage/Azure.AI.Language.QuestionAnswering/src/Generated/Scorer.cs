// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.QuestionAnswering
{
    /// <summary> Type of scorer to be used. </summary>
    public readonly partial struct Scorer : IEquatable<Scorer>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Scorer"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Scorer(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ClassicValue = "Classic";
        private const string TransformerValue = "Transformer";
        private const string SemanticValue = "Semantic";

        /// <summary> Set this value for scoring based on classic algorithms like wordnet, tfidf, ngram etc. </summary>
        public static Scorer Classic { get; } = new Scorer(ClassicValue);
        /// <summary> Set this value for scoring based on transformer based models. </summary>
        public static Scorer Transformer { get; } = new Scorer(TransformerValue);
        /// <summary> Set this scorer to use AI search semantic based ranking. Semantic ranking should be configured for this to be used. </summary>
        public static Scorer Semantic { get; } = new Scorer(SemanticValue);
        /// <summary> Determines if two <see cref="Scorer"/> values are the same. </summary>
        public static bool operator ==(Scorer left, Scorer right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Scorer"/> values are not the same. </summary>
        public static bool operator !=(Scorer left, Scorer right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Scorer"/>. </summary>
        public static implicit operator Scorer(string value) => new Scorer(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Scorer other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Scorer other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
