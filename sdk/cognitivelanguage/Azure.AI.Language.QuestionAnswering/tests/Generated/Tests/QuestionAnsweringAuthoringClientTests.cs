// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.AI.Language.QuestionAnswering.Authoring;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.QuestionAnswering.Tests
{
    public partial class QuestionAnsweringAuthoringClientTests : AILanguageQuestionAnsweringTestBase
    {
        public QuestionAnsweringAuthoringClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetProjectDetails_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetProjectDetailsAsync("<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetProjectDetails_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetProjectDetailsAsync("<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                language = "<language>",
            });
            Response response = await client.CreateProjectAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                language = "<language>",
                multilingualResource = true,
                settings = new
                {
                    defaultAnswer = "<defaultAnswer>",
                },
            });
            Response response = await client.CreateProjectAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeleteStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetDeleteStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeleteStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetDeleteStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetExportStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetExportStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetImportStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetImportStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeployStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetDeployStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeployStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetDeployStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateSynonyms_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateSynonymsAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateSynonyms_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
alterations = new object[]
{
"<alterations>"
},
}
            },
                nextLink = "<nextLink>",
            });
            Response response = await client.UpdateSynonymsAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdateSourcesStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetUpdateSourcesStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdateSourcesStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetUpdateSourcesStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdateQnasStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetUpdateQnasStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdateQnasStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Response response = await client.GetUpdateQnasStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddFeedback_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFeedbackAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddFeedback_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                records = new object[]
            {
new
{
userId = "<userId>",
userQuestion = "<userQuestion>",
qnaId = 1234,
}
            },
            });
            Response response = await client.AddFeedbackAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetProjects_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetProjects_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSynonyms_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSynonymsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSynonyms_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSynonymsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSources_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSourcesAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSources_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSourcesAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetQnas_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetQnasAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetQnas_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            await foreach (BinaryData item in client.GetQnasAsync("<projectName>", source: "<source>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Export_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Operation<BinaryData> operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Export_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Operation<BinaryData> operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", format: "json", assetKind: "qnas");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Import_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = null;
            Operation<BinaryData> operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Import_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    description = "<description>",
                    language = "<language>",
                    multilingualResource = true,
                    settings = new
                    {
                        defaultAnswer = "<defaultAnswer>",
                    },
                },
                assets = new
                {
                    synonyms = new object[]
            {
new
{
alterations = new object[]
{
"<alterations>"
},
}
            },
                    qnas = new object[]
            {
new
{
sourceDisplayName = "<sourceDisplayName>",
lastUpdatedDateTime = "2022-05-10T18:57:31.2311892Z",
id = 1234,
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
dialog = new
{
isContextOnly = true,
prompts = new object[]
{
new
{
displayOrder = 1234,
qnaId = 1234,
qna = new
{
id = 1234,
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
activeLearningSuggestions = new object[]
{
new
{
clusterHead = "<clusterHead>",
suggestedQuestions = new object[]
{
new
{
question = "<question>",
userSuggestedCount = 1234,
autoSuggestedCount = 1234,
}
},
}
},
},
displayText = "<displayText>",
}
},
},
activeLearningSuggestions = new object[]
{
null
},
}
            },
                },
                fileUri = "<fileUri>",
            });
            Operation<BinaryData> operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content, format: "json", assetKind: "qnas");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeployProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Operation<BinaryData> operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeployProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            Operation<BinaryData> operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateSources_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
sourceUri = "http://localhost:3000",
sourceKind = "file",
},
}
            });
            Operation<AsyncPageable<BinaryData>> operation = await client.UpdateSourcesAsync(WaitUntil.Completed, "<projectName>", content);
            AsyncPageable<BinaryData> responseData = operation.Value;
            await foreach (BinaryData item in operation.Value)
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateSources_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
refresh = true,
displayName = "<displayName>",
source = "<source>",
sourceUri = "http://localhost:3000",
sourceKind = "file",
contentStructureKind = "unstructured",
},
}
            });
            Operation<AsyncPageable<BinaryData>> operation = await client.UpdateSourcesAsync(WaitUntil.Completed, "<projectName>", content);
            AsyncPageable<BinaryData> responseData = operation.Value;
            await foreach (BinaryData item in operation.Value)
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateQnas_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new object(),
}
            });
            Operation<AsyncPageable<BinaryData>> operation = await client.UpdateQnasAsync(WaitUntil.Completed, "<projectName>", content);
            AsyncPageable<BinaryData> responseData = operation.Value;
            await foreach (BinaryData item in operation.Value)
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateQnas_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringAuthoringClient client = CreateQuestionAnsweringAuthoringClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
id = 1234,
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
dialog = new
{
isContextOnly = true,
prompts = new object[]
{
new
{
displayOrder = 1234,
qnaId = 1234,
displayText = "<displayText>",
}
},
},
activeLearningSuggestions = new object[]
{
new
{
clusterHead = "<clusterHead>",
suggestedQuestions = new object[]
{
new
{
question = "<question>",
userSuggestedCount = 1234,
autoSuggestedCount = 1234,
}
},
}
},
},
}
            });
            Operation<AsyncPageable<BinaryData>> operation = await client.UpdateQnasAsync(WaitUntil.Completed, "<projectName>", content);
            AsyncPageable<BinaryData> responseData = operation.Value;
            await foreach (BinaryData item in operation.Value)
            {
            }
        }
    }
}
