// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text
{
    /// <summary> Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc. </summary>
    public readonly partial struct HealthRelationType : IEquatable<HealthRelationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthRelationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthRelationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AbbreviationValue = "Abbreviation";
        private const string DirectionOfBodyStructureValue = "DirectionOfBodyStructure";
        private const string DirectionOfConditionValue = "DirectionOfCondition";
        private const string DirectionOfExaminationValue = "DirectionOfExamination";
        private const string DirectionOfTreatmentValue = "DirectionOfTreatment";
        private const string DosageOfMedicationValue = "DosageOfMedication";
        private const string FormOfMedicationValue = "FormOfMedication";
        private const string FrequencyOfMedicationValue = "FrequencyOfMedication";
        private const string FrequencyOfTreatmentValue = "FrequencyOfTreatment";
        private const string QualifierOfConditionValue = "QualifierOfCondition";
        private const string RelationOfExaminationValue = "RelationOfExamination";
        private const string RouteOfMedicationValue = "RouteOfMedication";
        private const string TimeOfConditionValue = "TimeOfCondition";
        private const string TimeOfEventValue = "TimeOfEvent";
        private const string TimeOfExaminationValue = "TimeOfExamination";
        private const string TimeOfMedicationValue = "TimeOfMedication";
        private const string TimeOfTreatmentValue = "TimeOfTreatment";
        private const string UnitOfConditionValue = "UnitOfCondition";
        private const string UnitOfExaminationValue = "UnitOfExamination";
        private const string ValueOfConditionValue = "ValueOfCondition";
        private const string ValueOfExaminationValue = "ValueOfExamination";
        private const string BodySiteOfConditionValue = "BodySiteOfCondition";
        private const string BodySiteOfTreatmentValue = "BodySiteOfTreatment";
        private const string CourseOfConditionValue = "CourseOfCondition";
        private const string CourseOfExaminationValue = "CourseOfExamination";
        private const string CourseOfMedicationValue = "CourseOfMedication";
        private const string CourseOfTreatmentValue = "CourseOfTreatment";
        private const string ExaminationFindsConditionValue = "ExaminationFindsCondition";
        private const string ExpressionOfGeneValue = "ExpressionOfGene";
        private const string ExpressionOfVariantValue = "ExpressionOfVariant";
        private const string FrequencyOfConditionValue = "FrequencyOfCondition";
        private const string MutationTypeOfGeneValue = "MutationTypeOfGene";
        private const string MutationTypeOfVariantValue = "MutationTypeOfVariant";
        private const string ScaleOfConditionValue = "ScaleOfCondition";
        private const string VariantOfGeneValue = "VariantOfGene";

        /// <summary> Abbreviation. </summary>
        public static HealthRelationType Abbreviation { get; } = new HealthRelationType(AbbreviationValue);
        /// <summary> DirectionOfBodyStructure. </summary>
        public static HealthRelationType DirectionOfBodyStructure { get; } = new HealthRelationType(DirectionOfBodyStructureValue);
        /// <summary> DirectionOfCondition. </summary>
        public static HealthRelationType DirectionOfCondition { get; } = new HealthRelationType(DirectionOfConditionValue);
        /// <summary> DirectionOfExamination. </summary>
        public static HealthRelationType DirectionOfExamination { get; } = new HealthRelationType(DirectionOfExaminationValue);
        /// <summary> DirectionOfTreatment. </summary>
        public static HealthRelationType DirectionOfTreatment { get; } = new HealthRelationType(DirectionOfTreatmentValue);
        /// <summary> DosageOfMedication. </summary>
        public static HealthRelationType DosageOfMedication { get; } = new HealthRelationType(DosageOfMedicationValue);
        /// <summary> FormOfMedication. </summary>
        public static HealthRelationType FormOfMedication { get; } = new HealthRelationType(FormOfMedicationValue);
        /// <summary> FrequencyOfMedication. </summary>
        public static HealthRelationType FrequencyOfMedication { get; } = new HealthRelationType(FrequencyOfMedicationValue);
        /// <summary> FrequencyOfTreatment. </summary>
        public static HealthRelationType FrequencyOfTreatment { get; } = new HealthRelationType(FrequencyOfTreatmentValue);
        /// <summary> QualifierOfCondition. </summary>
        public static HealthRelationType QualifierOfCondition { get; } = new HealthRelationType(QualifierOfConditionValue);
        /// <summary> RelationOfExamination. </summary>
        public static HealthRelationType RelationOfExamination { get; } = new HealthRelationType(RelationOfExaminationValue);
        /// <summary> RouteOfMedication. </summary>
        public static HealthRelationType RouteOfMedication { get; } = new HealthRelationType(RouteOfMedicationValue);
        /// <summary> TimeOfCondition. </summary>
        public static HealthRelationType TimeOfCondition { get; } = new HealthRelationType(TimeOfConditionValue);
        /// <summary> TimeOfEvent. </summary>
        public static HealthRelationType TimeOfEvent { get; } = new HealthRelationType(TimeOfEventValue);
        /// <summary> TimeOfExamination. </summary>
        public static HealthRelationType TimeOfExamination { get; } = new HealthRelationType(TimeOfExaminationValue);
        /// <summary> TimeOfMedication. </summary>
        public static HealthRelationType TimeOfMedication { get; } = new HealthRelationType(TimeOfMedicationValue);
        /// <summary> TimeOfTreatment. </summary>
        public static HealthRelationType TimeOfTreatment { get; } = new HealthRelationType(TimeOfTreatmentValue);
        /// <summary> UnitOfCondition. </summary>
        public static HealthRelationType UnitOfCondition { get; } = new HealthRelationType(UnitOfConditionValue);
        /// <summary> UnitOfExamination. </summary>
        public static HealthRelationType UnitOfExamination { get; } = new HealthRelationType(UnitOfExaminationValue);
        /// <summary> ValueOfCondition. </summary>
        public static HealthRelationType ValueOfCondition { get; } = new HealthRelationType(ValueOfConditionValue);
        /// <summary> ValueOfExamination. </summary>
        public static HealthRelationType ValueOfExamination { get; } = new HealthRelationType(ValueOfExaminationValue);
        /// <summary> BodySiteOfCondition. </summary>
        public static HealthRelationType BodySiteOfCondition { get; } = new HealthRelationType(BodySiteOfConditionValue);
        /// <summary> BodySiteOfTreatment. </summary>
        public static HealthRelationType BodySiteOfTreatment { get; } = new HealthRelationType(BodySiteOfTreatmentValue);
        /// <summary> CourseOfCondition. </summary>
        public static HealthRelationType CourseOfCondition { get; } = new HealthRelationType(CourseOfConditionValue);
        /// <summary> CourseOfExamination. </summary>
        public static HealthRelationType CourseOfExamination { get; } = new HealthRelationType(CourseOfExaminationValue);
        /// <summary> CourseOfMedication. </summary>
        public static HealthRelationType CourseOfMedication { get; } = new HealthRelationType(CourseOfMedicationValue);
        /// <summary> CourseOfTreatment. </summary>
        public static HealthRelationType CourseOfTreatment { get; } = new HealthRelationType(CourseOfTreatmentValue);
        /// <summary> ExaminationFindsCondition. </summary>
        public static HealthRelationType ExaminationFindsCondition { get; } = new HealthRelationType(ExaminationFindsConditionValue);
        /// <summary> ExpressionOfGene. </summary>
        public static HealthRelationType ExpressionOfGene { get; } = new HealthRelationType(ExpressionOfGeneValue);
        /// <summary> ExpressionOfVariant. </summary>
        public static HealthRelationType ExpressionOfVariant { get; } = new HealthRelationType(ExpressionOfVariantValue);
        /// <summary> FrequencyOfCondition. </summary>
        public static HealthRelationType FrequencyOfCondition { get; } = new HealthRelationType(FrequencyOfConditionValue);
        /// <summary> MutationTypeOfGene. </summary>
        public static HealthRelationType MutationTypeOfGene { get; } = new HealthRelationType(MutationTypeOfGeneValue);
        /// <summary> MutationTypeOfVariant. </summary>
        public static HealthRelationType MutationTypeOfVariant { get; } = new HealthRelationType(MutationTypeOfVariantValue);
        /// <summary> ScaleOfCondition. </summary>
        public static HealthRelationType ScaleOfCondition { get; } = new HealthRelationType(ScaleOfConditionValue);
        /// <summary> VariantOfGene. </summary>
        public static HealthRelationType VariantOfGene { get; } = new HealthRelationType(VariantOfGeneValue);
        /// <summary> Determines if two <see cref="HealthRelationType"/> values are the same. </summary>
        public static bool operator ==(HealthRelationType left, HealthRelationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthRelationType"/> values are not the same. </summary>
        public static bool operator !=(HealthRelationType left, HealthRelationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthRelationType"/>. </summary>
        public static implicit operator HealthRelationType(string value) => new HealthRelationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthRelationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthRelationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
