// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.Language.AnalyzeText
{
    /// <summary> Supported parameters for an Entity Recognition task. </summary>
    public partial class EntitiesTaskParameters : PreBuiltTaskParameters
    {
        /// <summary> Initializes a new instance of <see cref="EntitiesTaskParameters"/>. </summary>
        public EntitiesTaskParameters()
        {
            InclusionList = new ChangeTrackingList<EntityCategory>();
            ExclusionList = new ChangeTrackingList<EntityCategory>();
        }

        /// <summary> Initializes a new instance of <see cref="EntitiesTaskParameters"/>. </summary>
        /// <param name="loggingOptOut"> logging opt out. </param>
        /// <param name="modelVersion"> model version. </param>
        /// <param name="stringIndexType"></param>
        /// <param name="inclusionList"> (Optional) request parameter that limits the output to the requested entity types included in this list. We will apply inclusionList before exclusionList. </param>
        /// <param name="exclusionList"> (Optional) request parameter that filters out any entities that are included the excludeList. When a user specifies an excludeList, they cannot get a prediction returned with an entity in that list. We will apply inclusionList before exclusionList. </param>
        /// <param name="overlapPolicy"> (Optional) describes the type of overlap policy to apply to the ner output. </param>
        /// <param name="inferenceOptions"> (Optional) request parameter that allows the user to provide settings for running the inference. </param>
        internal EntitiesTaskParameters(bool? loggingOptOut, string modelVersion, StringIndexType? stringIndexType, IList<EntityCategory> inclusionList, IList<EntityCategory> exclusionList, BaseEntityOverlapPolicy overlapPolicy, EntityInferenceOptions inferenceOptions) : base(loggingOptOut, modelVersion)
        {
            StringIndexType = stringIndexType;
            InclusionList = inclusionList;
            ExclusionList = exclusionList;
            OverlapPolicy = overlapPolicy;
            InferenceOptions = inferenceOptions;
        }

        /// <summary> Gets or sets the string index type. </summary>
        public StringIndexType? StringIndexType { get; set; }
        /// <summary> (Optional) request parameter that limits the output to the requested entity types included in this list. We will apply inclusionList before exclusionList. </summary>
        public IList<EntityCategory> InclusionList { get; }
        /// <summary> (Optional) request parameter that filters out any entities that are included the excludeList. When a user specifies an excludeList, they cannot get a prediction returned with an entity in that list. We will apply inclusionList before exclusionList. </summary>
        public IList<EntityCategory> ExclusionList { get; }
        /// <summary>
        /// (Optional) describes the type of overlap policy to apply to the ner output.
        /// Please note <see cref="BaseEntityOverlapPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MatchLongestEntityPolicyType"/> and <see cref="AllowOverlapEntityPolicyType"/>.
        /// </summary>
        public BaseEntityOverlapPolicy OverlapPolicy { get; set; }
        /// <summary> (Optional) request parameter that allows the user to provide settings for running the inference. </summary>
        public EntityInferenceOptions InferenceOptions { get; set; }
    }
}
