// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text
{
    /// <summary> Describes the entities certainty and polarity. </summary>
    public readonly partial struct HealthcareCertainty : IEquatable<HealthcareCertainty>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthcareCertainty"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthcareCertainty(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositiveValue = "positive";
        private const string PositivePossibleValue = "positivePossible";
        private const string NeutralPossibleValue = "neutralPossible";
        private const string NegativePossibleValue = "negativePossible";
        private const string NegativeValue = "negative";

        /// <summary> positive. </summary>
        public static HealthcareCertainty Positive { get; } = new HealthcareCertainty(PositiveValue);
        /// <summary> positivePossible. </summary>
        public static HealthcareCertainty PositivePossible { get; } = new HealthcareCertainty(PositivePossibleValue);
        /// <summary> neutralPossible. </summary>
        public static HealthcareCertainty NeutralPossible { get; } = new HealthcareCertainty(NeutralPossibleValue);
        /// <summary> negativePossible. </summary>
        public static HealthcareCertainty NegativePossible { get; } = new HealthcareCertainty(NegativePossibleValue);
        /// <summary> negative. </summary>
        public static HealthcareCertainty Negative { get; } = new HealthcareCertainty(NegativeValue);
        /// <summary> Determines if two <see cref="HealthcareCertainty"/> values are the same. </summary>
        public static bool operator ==(HealthcareCertainty left, HealthcareCertainty right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthcareCertainty"/> values are not the same. </summary>
        public static bool operator !=(HealthcareCertainty left, HealthcareCertainty right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthcareCertainty"/>. </summary>
        public static implicit operator HealthcareCertainty(string value) => new HealthcareCertainty(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthcareCertainty other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthcareCertainty other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
