// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;

namespace Azure.AI.Language.Text
{
    public partial class BaseMetadata
    {
        internal static BaseMetadata DeserializeBaseMetadata(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("metadataKind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AgeMetadata": return AgeMetadata.DeserializeAgeMetadata(element);
                    case "VolumeMetadata": return VolumeMetadata.DeserializeVolumeMetadata(element);
                    case "SpeedMetadata": return SpeedMetadata.DeserializeSpeedMetadata(element);
                    case "AreaMetadata": return AreaMetadata.DeserializeAreaMetadata(element);
                    case "LengthMetadata": return LengthMetadata.DeserializeLengthMetadata(element);
                    case "InformationMetadata": return InformationMetadata.DeserializeInformationMetadata(element);
                    case "TemperatureMetadata": return TemperatureMetadata.DeserializeTemperatureMetadata(element);
                    case "WeightMetadata": return WeightMetadata.DeserializeWeightMetadata(element);
                    case "CurrencyMetadata": return CurrencyMetadata.DeserializeCurrencyMetadata(element);
                    case "DateMetadata": return DateMetadata.DeserializeDateMetadata(element);
                    case "DateTimeMetadata": return DateTimeMetadata.DeserializeDateTimeMetadata(element);
                    case "TemporalSetMetadata": return TemporalSetMetadata.DeserializeTemporalSetMetadata(element);
                    case "TimeMetadata": return TimeMetadata.DeserializeTimeMetadata(element);
                    case "NumberMetadata": return NumberMetadata.DeserializeNumberMetadata(element);
                    case "OrdinalMetadata": return OrdinalMetadata.DeserializeOrdinalMetadata(element);
                    case "TemporalSpanMetadata": return TemporalSpanMetadata.DeserializeTemporalSpanMetadata(element);
                    case "NumericRangeMetadata": return NumericRangeMetadata.DeserializeNumericRangeMetadata(element);
                }
            }
            return UnknownBaseMetadata.DeserializeUnknownBaseMetadata(element);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static BaseMetadata FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeBaseMetadata(document.RootElement);
        }
    }
}
