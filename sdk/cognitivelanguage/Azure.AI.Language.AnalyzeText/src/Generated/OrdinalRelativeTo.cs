// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text
{
    /// <summary> The reference point that the ordinal number denotes. </summary>
    public readonly partial struct OrdinalRelativeTo : IEquatable<OrdinalRelativeTo>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OrdinalRelativeTo"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OrdinalRelativeTo(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CurrentValue = "Current";
        private const string EndValue = "End";
        private const string StartValue = "Start";

        /// <summary> Current. </summary>
        public static OrdinalRelativeTo Current { get; } = new OrdinalRelativeTo(CurrentValue);
        /// <summary> End. </summary>
        public static OrdinalRelativeTo End { get; } = new OrdinalRelativeTo(EndValue);
        /// <summary> Start. </summary>
        public static OrdinalRelativeTo Start { get; } = new OrdinalRelativeTo(StartValue);
        /// <summary> Determines if two <see cref="OrdinalRelativeTo"/> values are the same. </summary>
        public static bool operator ==(OrdinalRelativeTo left, OrdinalRelativeTo right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OrdinalRelativeTo"/> values are not the same. </summary>
        public static bool operator !=(OrdinalRelativeTo left, OrdinalRelativeTo right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OrdinalRelativeTo"/>. </summary>
        public static implicit operator OrdinalRelativeTo(string value) => new OrdinalRelativeTo(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OrdinalRelativeTo other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OrdinalRelativeTo other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
