// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Language.Text
{
    /// <summary> PredictedSentiment analysis per document. </summary>
    public partial class SentimentResponseWithDocumentDetectedLanguage
    {
        /// <summary> Initializes a new instance of <see cref="SentimentResponseWithDocumentDetectedLanguage"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="sentiment"> Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). </param>
        /// <param name="confidenceScores"></param>
        /// <param name="sentences"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="warnings"/>, <paramref name="confidenceScores"/> or <paramref name="sentences"/> is null. </exception>
        internal SentimentResponseWithDocumentDetectedLanguage(string id, IEnumerable<DocumentWarning> warnings, PredictedSentiment sentiment, SentimentConfidenceScores confidenceScores, IEnumerable<SentenceSentiment> sentences)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(warnings, nameof(warnings));
            Argument.AssertNotNull(confidenceScores, nameof(confidenceScores));
            Argument.AssertNotNull(sentences, nameof(sentences));

            Id = id;
            Warnings = warnings.ToList();
            Sentiment = sentiment;
            ConfidenceScores = confidenceScores;
            Sentences = sentences.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SentimentResponseWithDocumentDetectedLanguage"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="sentiment"> Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). </param>
        /// <param name="confidenceScores"></param>
        /// <param name="sentences"></param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        internal SentimentResponseWithDocumentDetectedLanguage(string id, IReadOnlyList<DocumentWarning> warnings, DocumentStatistics statistics, PredictedSentiment sentiment, SentimentConfidenceScores confidenceScores, IReadOnlyList<SentenceSentiment> sentences, string detectedLanguage)
        {
            Id = id;
            Warnings = warnings;
            Statistics = statistics;
            Sentiment = sentiment;
            ConfidenceScores = confidenceScores;
            Sentences = sentences;
            DetectedLanguage = detectedLanguage;
        }

        /// <summary> Unique, non-empty document identifier. </summary>
        public string Id { get; }
        /// <summary> Warnings encountered while processing document. </summary>
        public IReadOnlyList<DocumentWarning> Warnings { get; }
        /// <summary> if showStats=true was specified in the request this field will contain information about the document payload. </summary>
        public DocumentStatistics Statistics { get; }
        /// <summary> Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). </summary>
        public PredictedSentiment Sentiment { get; }
        /// <summary> Gets the confidence scores. </summary>
        public SentimentConfidenceScores ConfidenceScores { get; }
        /// <summary> Gets the sentences. </summary>
        public IReadOnlyList<SentenceSentiment> Sentences { get; }
        /// <summary> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </summary>
        public string DetectedLanguage { get; }
    }
}
