// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Language.Text
{
    public partial class EntitiesTaskContent : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(LoggingOptOut))
            {
                writer.WritePropertyName("loggingOptOut"u8);
                writer.WriteBooleanValue(LoggingOptOut.Value);
            }
            if (Optional.IsDefined(ModelVersion))
            {
                writer.WritePropertyName("modelVersion"u8);
                writer.WriteStringValue(ModelVersion);
            }
            if (Optional.IsDefined(StringIndexType))
            {
                writer.WritePropertyName("stringIndexType"u8);
                writer.WriteStringValue(StringIndexType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(InclusionList))
            {
                writer.WritePropertyName("inclusionList"u8);
                writer.WriteStartArray();
                foreach (var item in InclusionList)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ExclusionList))
            {
                writer.WritePropertyName("exclusionList"u8);
                writer.WriteStartArray();
                foreach (var item in ExclusionList)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(OverlapPolicy))
            {
                writer.WritePropertyName("overlapPolicy"u8);
                writer.WriteObjectValue(OverlapPolicy);
            }
            if (Optional.IsDefined(InferenceOptions))
            {
                writer.WritePropertyName("inferenceOptions"u8);
                writer.WriteObjectValue(InferenceOptions);
            }
            writer.WriteEndObject();
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
