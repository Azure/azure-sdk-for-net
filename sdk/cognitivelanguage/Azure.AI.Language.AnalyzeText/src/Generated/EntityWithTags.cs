// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Language.AnalyzeText
{
    /// <summary> The EntityWithTags. </summary>
    public partial class EntityWithTags : Entity
    {
        /// <summary> Initializes a new instance of <see cref="EntityWithTags"/>. </summary>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="category"> Entity type. </param>
        /// <param name="offset"> Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted entity. </param>
        /// <param name="type"> An entity type is the lowest (or finest) granularity at which the entity has been detected. The type maps to the specific metadata attributes associated with the entity detected. </param>
        /// <param name="tags"> List of entity tags. Tags are to express some similarities/affinity between entities. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/>, <paramref name="category"/>, <paramref name="type"/> or <paramref name="tags"/> is null. </exception>
        internal EntityWithTags(string text, string category, int offset, int length, double confidenceScore, string type, IEnumerable<EntityTag> tags) : base(text, category, offset, length, confidenceScore)
        {
            Argument.AssertNotNull(text, nameof(text));
            Argument.AssertNotNull(category, nameof(category));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(tags, nameof(tags));

            Type = type;
            Tags = tags.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="EntityWithTags"/>. </summary>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="category"> Entity type. </param>
        /// <param name="subcategory"> (Optional) Entity sub type. </param>
        /// <param name="offset"> Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted entity. </param>
        /// <param name="type"> An entity type is the lowest (or finest) granularity at which the entity has been detected. The type maps to the specific metadata attributes associated with the entity detected. </param>
        /// <param name="tags"> List of entity tags. Tags are to express some similarities/affinity between entities. </param>
        internal EntityWithTags(string text, string category, string subcategory, int offset, int length, double confidenceScore, string type, IReadOnlyList<EntityTag> tags) : base(text, category, subcategory, offset, length, confidenceScore)
        {
            Type = type;
            Tags = tags;
        }

        /// <summary> An entity type is the lowest (or finest) granularity at which the entity has been detected. The type maps to the specific metadata attributes associated with the entity detected. </summary>
        public string Type { get; }
        /// <summary> List of entity tags. Tags are to express some similarities/affinity between entities. </summary>
        public IReadOnlyList<EntityTag> Tags { get; }
    }
}
