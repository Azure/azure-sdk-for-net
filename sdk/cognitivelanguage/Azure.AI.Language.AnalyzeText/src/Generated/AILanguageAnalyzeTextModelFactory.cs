// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.AnalyzeText
{
    /// <summary> Model factory for models. </summary>
    public static partial class AILanguageAnalyzeTextModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="AnalyzeText.AnalyzeTextJobState"/>. </summary>
        /// <param name="displayName"> display name. </param>
        /// <param name="createdDateTime"> Date and time job created. </param>
        /// <param name="expirationDateTime"> Date and time job expires. </param>
        /// <param name="jobId"> job ID. </param>
        /// <param name="lastUpdatedDateTime"> last updated date and time. </param>
        /// <param name="status"> status. </param>
        /// <param name="errors"> errors. </param>
        /// <param name="nextLink"> next link. </param>
        /// <param name="tasks"></param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <returns> A new <see cref="AnalyzeText.AnalyzeTextJobState"/> instance for mocking. </returns>
        public static AnalyzeTextJobState AnalyzeTextJobState(string displayName = null, DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, Guid jobId = default, DateTimeOffset lastUpdatedDateTime = default, State status = default, IEnumerable<Error> errors = null, string nextLink = null, Tasks tasks = null, RequestStatistics statistics = null)
        {
            errors ??= new List<Error>();

            return new AnalyzeTextJobState(displayName, createdDateTime, expirationDateTime, jobId, lastUpdatedDateTime, status, errors?.ToList(), nextLink, tasks, statistics);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.Error"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> A human-readable representation of the error. </param>
        /// <param name="target"> The target of the error. </param>
        /// <param name="details"> An array of details about specific errors that led to this reported error. </param>
        /// <param name="innererror"> An object containing more specific information than the current object about the error. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="AnalyzeText.Error"/> instance for mocking. </returns>
        public static Error Error(ErrorCode code = default, string message = null, string target = null, IEnumerable<Error> details = null, InnerErrorModel innererror = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            details ??= new List<Error>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new Error(code, message, target, details?.ToList(), innererror, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.InnerErrorModel"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="details"> Error details. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="innererror"> An object containing more specific information than the current object about the error. </param>
        /// <returns> A new <see cref="AnalyzeText.InnerErrorModel"/> instance for mocking. </returns>
        public static InnerErrorModel InnerErrorModel(InnerErrorCode code = default, string message = null, IReadOnlyDictionary<string, string> details = null, string target = null, InnerErrorModel innererror = null)
        {
            details ??= new Dictionary<string, string>();

            return new InnerErrorModel(code, message, details, target, innererror);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.Tasks"/>. </summary>
        /// <param name="completed"></param>
        /// <param name="failed"></param>
        /// <param name="inProgress"></param>
        /// <param name="total"></param>
        /// <param name="items"></param>
        /// <returns> A new <see cref="AnalyzeText.Tasks"/> instance for mocking. </returns>
        public static Tasks Tasks(int completed = default, int failed = default, int inProgress = default, int total = default, IEnumerable<AnalyzeTextLROResult> items = null)
        {
            items ??= new List<AnalyzeTextLROResult>();

            return new Tasks(completed, failed, inProgress, total, items?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.AnalyzeTextLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="kind"></param>
        /// <returns> A new <see cref="AnalyzeText.AnalyzeTextLROResult"/> instance for mocking. </returns>
        public static AnalyzeTextLROResult AnalyzeTextLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, string kind = "Unknown")
        {
            return new UnknownAnalyzeTextLROResult(lastUpdateDateTime, status, taskName, kind);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.RequestStatistics"/>. </summary>
        /// <param name="documentsCount"> Number of documents submitted in the request. </param>
        /// <param name="validDocumentsCount"> Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="erroneousDocumentsCount"> Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="transactionsCount"> Number of transactions for the request. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="AnalyzeText.RequestStatistics"/> instance for mocking. </returns>
        public static RequestStatistics RequestStatistics(int documentsCount = default, int validDocumentsCount = default, int erroneousDocumentsCount = default, long transactionsCount = default, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RequestStatistics(documentsCount, validDocumentsCount, erroneousDocumentsCount, transactionsCount, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DocumentWarning"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"> Warning message. </param>
        /// <param name="targetRef"> A JSON pointer reference indicating the target object. </param>
        /// <returns> A new <see cref="AnalyzeText.DocumentWarning"/> instance for mocking. </returns>
        public static DocumentWarning DocumentWarning(WarningCodeValue code = default, string message = null, string targetRef = null)
        {
            return new DocumentWarning(code, message, targetRef);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DocumentStatistics"/>. </summary>
        /// <param name="charactersCount"> Number of text elements recognized in the document. </param>
        /// <param name="transactionsCount"> Number of transactions for the document. </param>
        /// <returns> A new <see cref="AnalyzeText.DocumentStatistics"/> instance for mocking. </returns>
        public static DocumentStatistics DocumentStatistics(int charactersCount = default, int transactionsCount = default)
        {
            return new DocumentStatistics(charactersCount, transactionsCount);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DetectedLanguage"/>. </summary>
        /// <param name="name"> Long name of a detected language (e.g. English, French). </param>
        /// <param name="iso6391Name"> A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr). </param>
        /// <param name="confidenceScore"> A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. </param>
        /// <param name="script"> Identifies the script of the input document. </param>
        /// <param name="scriptCode"> Identifies the script of the input document. </param>
        /// <returns> A new <see cref="AnalyzeText.DetectedLanguage"/> instance for mocking. </returns>
        public static DetectedLanguage DetectedLanguage(string name = null, string iso6391Name = null, double confidenceScore = default, ScriptKind? script = null, ScriptCode? scriptCode = null)
        {
            return new DetectedLanguage(name, iso6391Name, confidenceScore, script, scriptCode);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DocumentError"/>. </summary>
        /// <param name="id"> The ID of the input document. </param>
        /// <param name="error"> Error encountered. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="error"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.DocumentError"/> instance for mocking. </returns>
        public static DocumentError DocumentError(string id = null, Error error = null)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (error == null)
            {
                throw new ArgumentNullException(nameof(error));
            }

            return new DocumentError(id, error);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SentimentConfidenceScores"/>. </summary>
        /// <param name="positive"> Confidence score for positive sentiment. </param>
        /// <param name="neutral"> Confidence score for neutral sentiment. </param>
        /// <param name="negative"> Confidence score for negative sentiment. </param>
        /// <returns> A new <see cref="AnalyzeText.SentimentConfidenceScores"/> instance for mocking. </returns>
        public static SentimentConfidenceScores SentimentConfidenceScores(double positive = default, double neutral = default, double negative = default)
        {
            return new SentimentConfidenceScores(positive, neutral, negative);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SummaryContext"/>. </summary>
        /// <param name="offset"> Start position for the context. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> The length of the context. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <returns> A new <see cref="AnalyzeText.SummaryContext"/> instance for mocking. </returns>
        public static SummaryContext SummaryContext(int offset = default, int length = default)
        {
            return new SummaryContext(offset, length);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.Entity"/>. </summary>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="category"> Entity type. </param>
        /// <param name="subcategory"> (Optional) Entity sub type. </param>
        /// <param name="offset"> Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted entity. </param>
        /// <returns> A new <see cref="AnalyzeText.Entity"/> instance for mocking. </returns>
        public static Entity Entity(string text = null, string category = null, string subcategory = null, int offset = default, int length = default, double confidenceScore = default)
        {
            return new Entity(text, category, subcategory, offset, length, confidenceScore);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomEntitiesResultWithDocumentDetectedLanguage"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="projectName"> This field indicates the project name for the model. </param>
        /// <param name="deploymentName"> This field indicates the deployment name for the model. </param>
        /// <param name="documents"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomEntitiesResultWithDocumentDetectedLanguage"/> instance for mocking. </returns>
        public static CustomEntitiesResultWithDocumentDetectedLanguage CustomEntitiesResultWithDocumentDetectedLanguage(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string projectName = null, string deploymentName = null, IEnumerable<EntitiesDocumentResultWithDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<EntitiesDocumentResultWithDetectedLanguage>();

            return new CustomEntitiesResultWithDocumentDetectedLanguage(errors?.ToList(), statistics, projectName, deploymentName, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntitiesDocumentResultWithDetectedLanguage"/>. </summary>
        /// <param name="entities"> Recognized entities in the document. </param>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.EntitiesDocumentResultWithDetectedLanguage"/> instance for mocking. </returns>
        public static EntitiesDocumentResultWithDetectedLanguage EntitiesDocumentResultWithDetectedLanguage(IEnumerable<Entity> entities = null, string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, DetectedLanguage detectedLanguage = null)
        {
            entities ??= new List<Entity>();
            warnings ??= new List<DocumentWarning>();

            return new EntitiesDocumentResultWithDetectedLanguage(entities?.ToList(), id, warnings?.ToList(), statistics, detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.ClassificationResult"/>. </summary>
        /// <param name="category"> Classification type. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the recognized class. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="category"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.ClassificationResult"/> instance for mocking. </returns>
        public static ClassificationResult ClassificationResult(string category = null, double confidenceScore = default)
        {
            if (category == null)
            {
                throw new ArgumentNullException(nameof(category));
            }

            return new ClassificationResult(category, confidenceScore);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomLabelClassificationResultWithDocumentDetectedLanguage"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="projectName"> This field indicates the project name for the model. </param>
        /// <param name="deploymentName"> This field indicates the deployment name for the model. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="AnalyzeText.CustomLabelClassificationResultWithDocumentDetectedLanguage"/> instance for mocking. </returns>
        public static CustomLabelClassificationResultWithDocumentDetectedLanguage CustomLabelClassificationResultWithDocumentDetectedLanguage(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string projectName = null, string deploymentName = null, IEnumerable<ClassificationDocumentResultWithDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<ClassificationDocumentResultWithDetectedLanguage>();

            return new CustomLabelClassificationResultWithDocumentDetectedLanguage(errors?.ToList(), statistics, projectName, deploymentName, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.ClassificationDocumentResultWithDetectedLanguage"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="class"></param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.ClassificationDocumentResultWithDetectedLanguage"/> instance for mocking. </returns>
        public static ClassificationDocumentResultWithDetectedLanguage ClassificationDocumentResultWithDetectedLanguage(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, IEnumerable<ClassificationResult> @class = null, DetectedLanguage detectedLanguage = null)
        {
            warnings ??= new List<DocumentWarning>();
            @class ??= new List<ClassificationResult>();

            return new ClassificationDocumentResultWithDetectedLanguage(id, warnings?.ToList(), statistics, @class?.ToList(), detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomEntityRecognitionLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomEntityRecognitionLROResult"/> instance for mocking. </returns>
        public static CustomEntityRecognitionLROResult CustomEntityRecognitionLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, CustomEntitiesResultWithDocumentDetectedLanguage results = null)
        {
            return new CustomEntityRecognitionLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.CustomEntityRecognitionLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomSingleLabelClassificationLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomSingleLabelClassificationLROResult"/> instance for mocking. </returns>
        public static CustomSingleLabelClassificationLROResult CustomSingleLabelClassificationLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, CustomLabelClassificationResultWithDocumentDetectedLanguage results = null)
        {
            return new CustomSingleLabelClassificationLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.CustomSingleLabelClassificationLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomMultiLabelClassificationLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomMultiLabelClassificationLROResult"/> instance for mocking. </returns>
        public static CustomMultiLabelClassificationLROResult CustomMultiLabelClassificationLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, CustomLabelClassificationResultWithDocumentDetectedLanguage results = null)
        {
            return new CustomMultiLabelClassificationLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.CustomMultiLabelClassificationLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DynamicClassificationDocumentResult"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="classifications"></param>
        /// <returns> A new <see cref="AnalyzeText.DynamicClassificationDocumentResult"/> instance for mocking. </returns>
        public static DynamicClassificationDocumentResult DynamicClassificationDocumentResult(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, IEnumerable<ClassificationResult> classifications = null)
        {
            warnings ??= new List<DocumentWarning>();
            classifications ??= new List<ClassificationResult>();

            return new DynamicClassificationDocumentResult(id, warnings?.ToList(), statistics, classifications?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.PrebuiltComponent"/>. </summary>
        /// <param name="value"> The prebuilt component of an extracted entity type. </param>
        /// <returns> A new <see cref="AnalyzeText.PrebuiltComponent"/> instance for mocking. </returns>
        public static PrebuiltComponent PrebuiltComponent(string value = null)
        {
            return new PrebuiltComponent(EntityComponentKind.PrebuiltComponent, value);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.LearnedComponent"/>. </summary>
        /// <param name="value"> The learned component of an extracted entity type. </param>
        /// <returns> A new <see cref="AnalyzeText.LearnedComponent"/> instance for mocking. </returns>
        public static LearnedComponent LearnedComponent(string value = null)
        {
            return new LearnedComponent(EntityComponentKind.LearnedComponent, value);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.ListComponent"/>. </summary>
        /// <param name="value"> The list key of an extracted entity type. </param>
        /// <returns> A new <see cref="AnalyzeText.ListComponent"/> instance for mocking. </returns>
        public static ListComponent ListComponent(string value = null)
        {
            return new ListComponent(EntityComponentKind.ListComponent, value);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DynamicClassificationResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="AnalyzeText.DynamicClassificationResult"/> instance for mocking. </returns>
        public static DynamicClassificationResult DynamicClassificationResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<DynamicClassificationDocumentResult> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<DynamicClassificationDocumentResult>();

            return new DynamicClassificationResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DynamicClassificationTaskResult"/>. </summary>
        /// <param name="results"> Results for Dynamic Classification task. </param>
        /// <returns> A new <see cref="AnalyzeText.DynamicClassificationTaskResult"/> instance for mocking. </returns>
        public static DynamicClassificationTaskResult DynamicClassificationTaskResult(DynamicClassificationResult results = null)
        {
            return new DynamicClassificationTaskResult(AnalyzeTextTaskResultsKind.DynamicClassificationResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntityLinkingTaskResult"/>. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.EntityLinkingTaskResult"/> instance for mocking. </returns>
        public static EntityLinkingTaskResult EntityLinkingTaskResult(EntityLinkingResult results = null)
        {
            return new EntityLinkingTaskResult(AnalyzeTextTaskResultsKind.EntityLinkingResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntityLinkingResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="AnalyzeText.EntityLinkingResult"/> instance for mocking. </returns>
        public static EntityLinkingResult EntityLinkingResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<EntityLinkingResultWithDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<EntityLinkingResultWithDetectedLanguage>();

            return new EntityLinkingResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntityLinkingResultWithDetectedLanguage"/>. </summary>
        /// <param name="entities"> Recognized well known entities in the document. </param>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.EntityLinkingResultWithDetectedLanguage"/> instance for mocking. </returns>
        public static EntityLinkingResultWithDetectedLanguage EntityLinkingResultWithDetectedLanguage(IEnumerable<LinkedEntity> entities = null, string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, DetectedLanguage detectedLanguage = null)
        {
            entities ??= new List<LinkedEntity>();
            warnings ??= new List<DocumentWarning>();

            return new EntityLinkingResultWithDetectedLanguage(entities?.ToList(), id, warnings?.ToList(), statistics, detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.LinkedEntity"/>. </summary>
        /// <param name="name"> Entity Linking formal name. </param>
        /// <param name="matches"> List of instances this entity appears in the text. </param>
        /// <param name="language"> Language used in the data source. </param>
        /// <param name="id"> Unique identifier of the recognized entity from the data source. </param>
        /// <param name="url"> URL for the entity's page from the data source. </param>
        /// <param name="dataSource"> Data source used to extract entity linking, such as Wiki/Bing etc. </param>
        /// <param name="bingId"> Bing Entity Search API unique identifier of the recognized entity. </param>
        /// <returns> A new <see cref="AnalyzeText.LinkedEntity"/> instance for mocking. </returns>
        public static LinkedEntity LinkedEntity(string name = null, IEnumerable<Match> matches = null, string language = null, string id = null, string url = null, string dataSource = null, string bingId = null)
        {
            matches ??= new List<Match>();

            return new LinkedEntity(name, matches?.ToList(), language, id, url, dataSource, bingId);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.Match"/>. </summary>
        /// <param name="confidenceScore"> If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned. </param>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="offset"> Start position for the entity match text. </param>
        /// <param name="length"> Length for the entity match text. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.Match"/> instance for mocking. </returns>
        public static Match Match(double confidenceScore = default, string text = null, int offset = default, int length = default)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new Match(confidenceScore, text, offset, length);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntityLinkingLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.EntityLinkingLROResult"/> instance for mocking. </returns>
        public static EntityLinkingLROResult EntityLinkingLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, EntityLinkingResult results = null)
        {
            return new EntityLinkingLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.EntityLinkingLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntitiesTaskResult"/>. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.EntitiesTaskResult"/> instance for mocking. </returns>
        public static EntitiesTaskResult EntitiesTaskResult(EntitiesResult results = null)
        {
            return new EntitiesTaskResult(AnalyzeTextTaskResultsKind.EntityRecognitionResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntitiesResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="AnalyzeText.EntitiesResult"/> instance for mocking. </returns>
        public static EntitiesResult EntitiesResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<EntitiesDocumentResultWithMetadataDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<EntitiesDocumentResultWithMetadataDetectedLanguage>();

            return new EntitiesResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntitiesDocumentResultWithMetadataDetectedLanguage"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="entities"> Recognized entities in the document. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.EntitiesDocumentResultWithMetadataDetectedLanguage"/> instance for mocking. </returns>
        public static EntitiesDocumentResultWithMetadataDetectedLanguage EntitiesDocumentResultWithMetadataDetectedLanguage(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, IEnumerable<EntityWithMetadata> entities = null, DetectedLanguage detectedLanguage = null)
        {
            warnings ??= new List<DocumentWarning>();
            entities ??= new List<EntityWithMetadata>();

            return new EntitiesDocumentResultWithMetadataDetectedLanguage(id, warnings?.ToList(), statistics, entities?.ToList(), detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntityWithTags"/>. </summary>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="category"> Entity type. </param>
        /// <param name="subcategory"> (Optional) Entity sub type. </param>
        /// <param name="offset"> Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted entity. </param>
        /// <param name="type"> An entity type is the lowest (or finest) granularity at which the entity has been detected. The type maps to the specific metadata attributes associated with the entity detected. </param>
        /// <param name="tags"> List of entity tags. Tags are to express some similarities/affinity between entities. </param>
        /// <returns> A new <see cref="AnalyzeText.EntityWithTags"/> instance for mocking. </returns>
        public static EntityWithTags EntityWithTags(string text = null, string category = null, string subcategory = null, int offset = default, int length = default, double confidenceScore = default, string type = null, IEnumerable<EntityTag> tags = null)
        {
            tags ??= new List<EntityTag>();

            return new EntityWithTags(text, category, subcategory, offset, length, confidenceScore, type, tags?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntityTag"/>. </summary>
        /// <param name="name"> Tags are to express some similarities/affinity between entities. Entity Tags will be unique globally. </param>
        /// <param name="confidenceScore"> Detection score between 0 and 1 of the extracted entity. </param>
        /// <returns> A new <see cref="AnalyzeText.EntityTag"/> instance for mocking. </returns>
        public static EntityTag EntityTag(string name = null, double? confidenceScore = null)
        {
            return new EntityTag(name, confidenceScore);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntityWithMetadata"/>. </summary>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="category"> Entity type. </param>
        /// <param name="subcategory"> (Optional) Entity sub type. </param>
        /// <param name="offset"> Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted entity. </param>
        /// <param name="type"> An entity type is the lowest (or finest) granularity at which the entity has been detected. The type maps to the specific metadata attributes associated with the entity detected. </param>
        /// <param name="tags"> List of entity tags. Tags are to express some similarities/affinity between entities. </param>
        /// <param name="metadata"> The entity metadata object. </param>
        /// <returns> A new <see cref="AnalyzeText.EntityWithMetadata"/> instance for mocking. </returns>
        public static EntityWithMetadata EntityWithMetadata(string text = null, string category = null, string subcategory = null, int offset = default, int length = default, double confidenceScore = default, string type = null, IEnumerable<EntityTag> tags = null, BaseMetadata metadata = null)
        {
            tags ??= new List<EntityTag>();

            return new EntityWithMetadata(text, category, subcategory, offset, length, confidenceScore, type, tags?.ToList(), metadata);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.EntityRecognitionLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.EntityRecognitionLROResult"/> instance for mocking. </returns>
        public static EntityRecognitionLROResult EntityRecognitionLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, EntitiesResult results = null)
        {
            return new EntityRecognitionLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.EntityRecognitionLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.AgeMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="AnalyzeText.AgeMetadata"/> instance for mocking. </returns>
        public static AgeMetadata AgeMetadata(double value = default, AgeUnit unit = default)
        {
            return new AgeMetadata(MetadataKind.AgeMetadata, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.VolumeMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="AnalyzeText.VolumeMetadata"/> instance for mocking. </returns>
        public static VolumeMetadata VolumeMetadata(double value = default, VolumeUnit unit = default)
        {
            return new VolumeMetadata(MetadataKind.VolumeMetadata, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SpeedMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="AnalyzeText.SpeedMetadata"/> instance for mocking. </returns>
        public static SpeedMetadata SpeedMetadata(double value = default, SpeedUnit unit = default)
        {
            return new SpeedMetadata(MetadataKind.SpeedMetadata, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.AreaMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="AnalyzeText.AreaMetadata"/> instance for mocking. </returns>
        public static AreaMetadata AreaMetadata(double value = default, AreaUnit unit = default)
        {
            return new AreaMetadata(MetadataKind.AreaMetadata, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.LengthMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="AnalyzeText.LengthMetadata"/> instance for mocking. </returns>
        public static LengthMetadata LengthMetadata(double value = default, LengthUnit unit = default)
        {
            return new LengthMetadata(MetadataKind.LengthMetadata, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.InformationMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="AnalyzeText.InformationMetadata"/> instance for mocking. </returns>
        public static InformationMetadata InformationMetadata(double value = default, InformationUnit unit = default)
        {
            return new InformationMetadata(MetadataKind.InformationMetadata, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.TemperatureMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="AnalyzeText.TemperatureMetadata"/> instance for mocking. </returns>
        public static TemperatureMetadata TemperatureMetadata(double value = default, TemperatureUnit unit = default)
        {
            return new TemperatureMetadata(MetadataKind.TemperatureMetadata, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.WeightMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="AnalyzeText.WeightMetadata"/> instance for mocking. </returns>
        public static WeightMetadata WeightMetadata(double value = default, WeightUnit unit = default)
        {
            return new WeightMetadata(MetadataKind.WeightMetadata, value, unit);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CurrencyMetadata"/>. </summary>
        /// <param name="value"> The numeric value that the extracted text denotes. </param>
        /// <param name="unit"></param>
        /// <param name="iso4217"> The alphabetic code based on another ISO standard, ISO 3166, which lists the codes for country names. The first two letters of the ISO 4217 three-letter code are the same as the code for the country name, and, where possible, the third letter corresponds to the first letter of the currency name. </param>
        /// <returns> A new <see cref="AnalyzeText.CurrencyMetadata"/> instance for mocking. </returns>
        public static CurrencyMetadata CurrencyMetadata(double value = default, string unit = null, string iso4217 = null)
        {
            return new CurrencyMetadata(MetadataKind.CurrencyMetadata, value, unit, iso4217);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DateValue"/>. </summary>
        /// <param name="timex"> An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml). </param>
        /// <param name="value"> The actual time that the extracted text denote. </param>
        /// <param name="modifier"></param>
        /// <returns> A new <see cref="AnalyzeText.DateValue"/> instance for mocking. </returns>
        public static DateValue DateValue(string timex = null, string value = null, TemporalModifier? modifier = null)
        {
            return new DateValue(timex, value, modifier);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DateMetadata"/>. </summary>
        /// <param name="dateValues"></param>
        /// <returns> A new <see cref="AnalyzeText.DateMetadata"/> instance for mocking. </returns>
        public static DateMetadata DateMetadata(IEnumerable<DateValue> dateValues = null)
        {
            dateValues ??= new List<DateValue>();

            return new DateMetadata(MetadataKind.DateMetadata, dateValues?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.DateTimeMetadata"/>. </summary>
        /// <param name="dateValues"></param>
        /// <returns> A new <see cref="AnalyzeText.DateTimeMetadata"/> instance for mocking. </returns>
        public static DateTimeMetadata DateTimeMetadata(IEnumerable<DateValue> dateValues = null)
        {
            dateValues ??= new List<DateValue>();

            return new DateTimeMetadata(MetadataKind.DateTimeMetadata, dateValues?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.TemporalSetMetadata"/>. </summary>
        /// <param name="dateValues"></param>
        /// <returns> A new <see cref="AnalyzeText.TemporalSetMetadata"/> instance for mocking. </returns>
        public static TemporalSetMetadata TemporalSetMetadata(IEnumerable<DateValue> dateValues = null)
        {
            dateValues ??= new List<DateValue>();

            return new TemporalSetMetadata(MetadataKind.TemporalSetMetadata, dateValues?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.TimeMetadata"/>. </summary>
        /// <param name="dateValues"></param>
        /// <returns> A new <see cref="AnalyzeText.TimeMetadata"/> instance for mocking. </returns>
        public static TimeMetadata TimeMetadata(IEnumerable<DateValue> dateValues = null)
        {
            dateValues ??= new List<DateValue>();

            return new TimeMetadata(MetadataKind.TimeMetadata, dateValues?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.NumberMetadata"/>. </summary>
        /// <param name="numberKind"></param>
        /// <param name="value"> A numeric representation of what the extracted text denotes. </param>
        /// <returns> A new <see cref="AnalyzeText.NumberMetadata"/> instance for mocking. </returns>
        public static NumberMetadata NumberMetadata(NumberKind numberKind = default, double value = default)
        {
            return new NumberMetadata(MetadataKind.NumberMetadata, numberKind, value);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.OrdinalMetadata"/>. </summary>
        /// <param name="offset"> The offset With respect to the reference (e.g., offset = -1 in "show me the second to last". </param>
        /// <param name="relativeTo"></param>
        /// <param name="value"> A simple arithmetic expression that the ordinal denotes. </param>
        /// <returns> A new <see cref="AnalyzeText.OrdinalMetadata"/> instance for mocking. </returns>
        public static OrdinalMetadata OrdinalMetadata(string offset = null, RelativeTo relativeTo = default, string value = null)
        {
            return new OrdinalMetadata(MetadataKind.OrdinalMetadata, offset, relativeTo, value);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.TemporalSpanMetadata"/>. </summary>
        /// <param name="spanValues"></param>
        /// <returns> A new <see cref="AnalyzeText.TemporalSpanMetadata"/> instance for mocking. </returns>
        public static TemporalSpanMetadata TemporalSpanMetadata(TemporalSpanValues spanValues = null)
        {
            return new TemporalSpanMetadata(MetadataKind.TemporalSpanMetadata, spanValues);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.TemporalSpanValues"/>. </summary>
        /// <param name="begin"></param>
        /// <param name="end"></param>
        /// <param name="duration"> An optional duration value formatted based on the ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601#Durations). </param>
        /// <param name="modifier"></param>
        /// <param name="timex"> An optional triplet containing the beginning, the end, and the duration all stated as ISO 8601 formatted strings. </param>
        /// <returns> A new <see cref="AnalyzeText.TemporalSpanValues"/> instance for mocking. </returns>
        public static TemporalSpanValues TemporalSpanValues(string begin = null, string end = null, string duration = null, TemporalModifier? modifier = null, string timex = null)
        {
            return new TemporalSpanValues(begin, end, duration, modifier, timex);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.NumericRangeMetadata"/>. </summary>
        /// <param name="rangeKind"></param>
        /// <param name="minimum"> The beginning value of  the interval. </param>
        /// <param name="maximum"> The ending value of the interval. </param>
        /// <param name="rangeInclusivity"></param>
        /// <returns> A new <see cref="AnalyzeText.NumericRangeMetadata"/> instance for mocking. </returns>
        public static NumericRangeMetadata NumericRangeMetadata(RangeKind rangeKind = default, double minimum = default, double maximum = default, RangeInclusivity? rangeInclusivity = null)
        {
            return new NumericRangeMetadata(MetadataKind.NumericRangeMetadata, rangeKind, minimum, maximum, rangeInclusivity);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.HealthcareResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"></param>
        /// <returns> A new <see cref="AnalyzeText.HealthcareResult"/> instance for mocking. </returns>
        public static HealthcareResult HealthcareResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage>();

            return new HealthcareResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="entities"> Healthcare entities. </param>
        /// <param name="relations"> Healthcare entity relations. </param>
        /// <param name="fhirBundle"> JSON bundle containing a FHIR compatible object for consumption in other Healthcare tools. For additional information see https://www.hl7.org/fhir/overview.html. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage"/> instance for mocking. </returns>
        public static HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, IEnumerable<HealthcareEntity> entities = null, IEnumerable<HealthcareRelation> relations = null, IReadOnlyDictionary<string, BinaryData> fhirBundle = null, DetectedLanguage detectedLanguage = null)
        {
            warnings ??= new List<DocumentWarning>();
            entities ??= new List<HealthcareEntity>();
            relations ??= new List<HealthcareRelation>();
            fhirBundle ??= new Dictionary<string, BinaryData>();

            return new HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage(id, warnings?.ToList(), statistics, entities?.ToList(), relations?.ToList(), fhirBundle, detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.HealthcareEntity"/>. </summary>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="category"> Healthcare Entity Category. </param>
        /// <param name="subcategory"> (Optional) Entity sub type. </param>
        /// <param name="offset"> Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted entity. </param>
        /// <param name="assertion"></param>
        /// <param name="name"> Preferred name for the entity. Example: 'histologically' would have a 'name' of 'histologic'. </param>
        /// <param name="links"> Entity references in known data sources. </param>
        /// <returns> A new <see cref="AnalyzeText.HealthcareEntity"/> instance for mocking. </returns>
        public static HealthcareEntity HealthcareEntity(string text = null, HealthcareEntityCategory category = default, string subcategory = null, int offset = default, int length = default, double confidenceScore = default, HealthcareAssertion assertion = null, string name = null, IEnumerable<HealthcareEntityLink> links = null)
        {
            links ??= new List<HealthcareEntityLink>();

            return new HealthcareEntity(text, category, subcategory, offset, length, confidenceScore, assertion, name, links?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.HealthcareAssertion"/>. </summary>
        /// <param name="conditionality"> Describes any conditionality on the entity. </param>
        /// <param name="certainty"> Describes the entities certainty and polarity. </param>
        /// <param name="association"> Describes if the entity is the subject of the text or if it describes someone else. </param>
        /// <param name="temporality"> Describes temporal information regarding the entity. </param>
        /// <returns> A new <see cref="AnalyzeText.HealthcareAssertion"/> instance for mocking. </returns>
        public static HealthcareAssertion HealthcareAssertion(Conditionality? conditionality = null, Certainty? certainty = null, Association? association = null, Temporality? temporality = null)
        {
            return new HealthcareAssertion(conditionality, certainty, association, temporality);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.HealthcareEntityLink"/>. </summary>
        /// <param name="dataSource"> Entity Catalog. Examples include: UMLS, CHV, MSH, etc. </param>
        /// <param name="id"> Entity id in the given source catalog. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSource"/> or <paramref name="id"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.HealthcareEntityLink"/> instance for mocking. </returns>
        public static HealthcareEntityLink HealthcareEntityLink(string dataSource = null, string id = null)
        {
            if (dataSource == null)
            {
                throw new ArgumentNullException(nameof(dataSource));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            return new HealthcareEntityLink(dataSource, id);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.HealthcareRelation"/>. </summary>
        /// <param name="relationType"> Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc. </param>
        /// <param name="entities"> The entities in the relation. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted relation. </param>
        /// <returns> A new <see cref="AnalyzeText.HealthcareRelation"/> instance for mocking. </returns>
        public static HealthcareRelation HealthcareRelation(RelationType relationType = default, IEnumerable<HealthcareRelationEntity> entities = null, double? confidenceScore = null)
        {
            entities ??= new List<HealthcareRelationEntity>();

            return new HealthcareRelation(relationType, entities?.ToList(), confidenceScore);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.HealthcareRelationEntity"/>. </summary>
        /// <param name="ref"> Reference link object, using a JSON pointer RFC 6901 (URI Fragment Identifier Representation), pointing to the entity . </param>
        /// <param name="role"> Role of entity in the relationship. For example: 'CD20-positive diffuse large B-cell lymphoma' has the following entities with their roles in parenthesis:  CD20 (GeneOrProtein), Positive (Expression), diffuse large B-cell lymphoma (Diagnosis). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ref"/> or <paramref name="role"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.HealthcareRelationEntity"/> instance for mocking. </returns>
        public static HealthcareRelationEntity HealthcareRelationEntity(string @ref = null, string role = null)
        {
            if (@ref == null)
            {
                throw new ArgumentNullException(nameof(@ref));
            }
            if (role == null)
            {
                throw new ArgumentNullException(nameof(role));
            }

            return new HealthcareRelationEntity(@ref, role);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.HealthcareLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.HealthcareLROResult"/> instance for mocking. </returns>
        public static HealthcareLROResult HealthcareLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, HealthcareResult results = null)
        {
            return new HealthcareLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.HealthcareLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.KeyPhraseTaskResult"/>. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.KeyPhraseTaskResult"/> instance for mocking. </returns>
        public static KeyPhraseTaskResult KeyPhraseTaskResult(KeyPhraseResult results = null)
        {
            return new KeyPhraseTaskResult(AnalyzeTextTaskResultsKind.KeyPhraseExtractionResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.KeyPhraseResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="AnalyzeText.KeyPhraseResult"/> instance for mocking. </returns>
        public static KeyPhraseResult KeyPhraseResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<KeyPhrasesDocumentResultWithDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<KeyPhrasesDocumentResultWithDetectedLanguage>();

            return new KeyPhraseResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.KeyPhrasesDocumentResultWithDetectedLanguage"/>. </summary>
        /// <param name="keyPhrases"> A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document. </param>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.KeyPhrasesDocumentResultWithDetectedLanguage"/> instance for mocking. </returns>
        public static KeyPhrasesDocumentResultWithDetectedLanguage KeyPhrasesDocumentResultWithDetectedLanguage(IEnumerable<string> keyPhrases = null, string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, DetectedLanguage detectedLanguage = null)
        {
            keyPhrases ??= new List<string>();
            warnings ??= new List<DocumentWarning>();

            return new KeyPhrasesDocumentResultWithDetectedLanguage(keyPhrases?.ToList(), id, warnings?.ToList(), statistics, detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.KeyPhraseExtractionLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.KeyPhraseExtractionLROResult"/> instance for mocking. </returns>
        public static KeyPhraseExtractionLROResult KeyPhraseExtractionLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, KeyPhraseResult results = null)
        {
            return new KeyPhraseExtractionLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.KeyPhraseExtractionLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.LanguageDetectionTaskResult"/>. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.LanguageDetectionTaskResult"/> instance for mocking. </returns>
        public static LanguageDetectionTaskResult LanguageDetectionTaskResult(LanguageDetectionResult results = null)
        {
            return new LanguageDetectionTaskResult(AnalyzeTextTaskResultsKind.LanguageDetectionResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.LanguageDetectionResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"></param>
        /// <returns> A new <see cref="AnalyzeText.LanguageDetectionResult"/> instance for mocking. </returns>
        public static LanguageDetectionResult LanguageDetectionResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<LanguageDetectionDocumentResult> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<LanguageDetectionDocumentResult>();

            return new LanguageDetectionResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.LanguageDetectionDocumentResult"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="detectedLanguage"> Detected Language. </param>
        /// <returns> A new <see cref="AnalyzeText.LanguageDetectionDocumentResult"/> instance for mocking. </returns>
        public static LanguageDetectionDocumentResult LanguageDetectionDocumentResult(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, DetectedLanguage detectedLanguage = null)
        {
            warnings ??= new List<DocumentWarning>();

            return new LanguageDetectionDocumentResult(id, warnings?.ToList(), statistics, detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.PiiTaskResult"/>. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.PiiTaskResult"/> instance for mocking. </returns>
        public static PiiTaskResult PiiTaskResult(PiiResult results = null)
        {
            return new PiiTaskResult(AnalyzeTextTaskResultsKind.PiiEntityRecognitionResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.PiiResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="AnalyzeText.PiiResult"/> instance for mocking. </returns>
        public static PiiResult PiiResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<PiiResultWithDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<PiiResultWithDetectedLanguage>();

            return new PiiResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.PiiResultWithDetectedLanguage"/>. </summary>
        /// <param name="redactedText"> Returns redacted text. </param>
        /// <param name="entities"> Recognized entities in the document. </param>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.PiiResultWithDetectedLanguage"/> instance for mocking. </returns>
        public static PiiResultWithDetectedLanguage PiiResultWithDetectedLanguage(string redactedText = null, IEnumerable<Entity> entities = null, string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, DetectedLanguage detectedLanguage = null)
        {
            entities ??= new List<Entity>();
            warnings ??= new List<DocumentWarning>();

            return new PiiResultWithDetectedLanguage(redactedText, entities?.ToList(), id, warnings?.ToList(), statistics, detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.PiiEntityRecognitionLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.PiiEntityRecognitionLROResult"/> instance for mocking. </returns>
        public static PiiEntityRecognitionLROResult PiiEntityRecognitionLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, PiiResult results = null)
        {
            return new PiiEntityRecognitionLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.PiiEntityRecognitionLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SentimentTaskResult"/>. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.SentimentTaskResult"/> instance for mocking. </returns>
        public static SentimentTaskResult SentimentTaskResult(SentimentResponse results = null)
        {
            return new SentimentTaskResult(AnalyzeTextTaskResultsKind.SentimentAnalysisResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SentimentResponse"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"> The sentiment analysis results for each document in the input. </param>
        /// <returns> A new <see cref="AnalyzeText.SentimentResponse"/> instance for mocking. </returns>
        public static SentimentResponse SentimentResponse(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<SentimentDocumentResultWithDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<SentimentDocumentResultWithDetectedLanguage>();

            return new SentimentResponse(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SentimentDocumentResultWithDetectedLanguage"/>. </summary>
        /// <param name="sentiment"> Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). </param>
        /// <param name="confidenceScores"></param>
        /// <param name="sentences"></param>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.SentimentDocumentResultWithDetectedLanguage"/> instance for mocking. </returns>
        public static SentimentDocumentResultWithDetectedLanguage SentimentDocumentResultWithDetectedLanguage(DocumentSentimentValue sentiment = default, SentimentConfidenceScores confidenceScores = null, IEnumerable<SentenceSentiment> sentences = null, string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, DetectedLanguage detectedLanguage = null)
        {
            sentences ??= new List<SentenceSentiment>();
            warnings ??= new List<DocumentWarning>();

            return new SentimentDocumentResultWithDetectedLanguage(sentiment, confidenceScores, sentences?.ToList(), id, warnings?.ToList(), statistics, detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SentenceSentiment"/>. </summary>
        /// <param name="text"> The sentence text. </param>
        /// <param name="sentiment"> The predicted Sentiment for the sentence. </param>
        /// <param name="confidenceScores"> The sentiment confidence score between 0 and 1 for the sentence for all classes. </param>
        /// <param name="offset"> The target offset from the start of the sentence. </param>
        /// <param name="length"> The length of the target. </param>
        /// <param name="targets"> The array of sentence targets for the sentence. </param>
        /// <param name="assessments"> The array of assessments for the sentence. </param>
        /// <returns> A new <see cref="AnalyzeText.SentenceSentiment"/> instance for mocking. </returns>
        public static SentenceSentiment SentenceSentiment(string text = null, SentenceSentimentValue sentiment = default, SentimentConfidenceScores confidenceScores = null, int offset = default, int length = default, IEnumerable<SentenceTarget> targets = null, IEnumerable<SentenceAssessment> assessments = null)
        {
            targets ??= new List<SentenceTarget>();
            assessments ??= new List<SentenceAssessment>();

            return new SentenceSentiment(text, sentiment, confidenceScores, offset, length, targets?.ToList(), assessments?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SentenceTarget"/>. </summary>
        /// <param name="sentiment"></param>
        /// <param name="confidenceScores"></param>
        /// <param name="offset"> The target offset from the start of the sentence. </param>
        /// <param name="length"> The length of the target. </param>
        /// <param name="text"> The target text detected. </param>
        /// <param name="relations"> The array of either assessment or target objects which is related to the target. </param>
        /// <returns> A new <see cref="AnalyzeText.SentenceTarget"/> instance for mocking. </returns>
        public static SentenceTarget SentenceTarget(TokenSentimentValue sentiment = default, TargetConfidenceScoreLabel confidenceScores = null, int offset = default, int length = default, string text = null, IEnumerable<TargetRelation> relations = null)
        {
            relations ??= new List<TargetRelation>();

            return new SentenceTarget(sentiment, confidenceScores, offset, length, text, relations?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.TargetConfidenceScoreLabel"/>. </summary>
        /// <param name="positive"> Confidence score for positive sentiment. </param>
        /// <param name="negative"> Confidence score for negative sentiment. </param>
        /// <returns> A new <see cref="AnalyzeText.TargetConfidenceScoreLabel"/> instance for mocking. </returns>
        public static TargetConfidenceScoreLabel TargetConfidenceScoreLabel(double positive = default, double negative = default)
        {
            return new TargetConfidenceScoreLabel(positive, negative);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.TargetRelation"/>. </summary>
        /// <param name="ref"> The JSON pointer indicating the linked object. </param>
        /// <param name="relationType"> The type related to the target. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ref"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.TargetRelation"/> instance for mocking. </returns>
        public static TargetRelation TargetRelation(string @ref = null, TargetRelationType relationType = default)
        {
            if (@ref == null)
            {
                throw new ArgumentNullException(nameof(@ref));
            }

            return new TargetRelation(@ref, relationType);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SentenceAssessment"/>. </summary>
        /// <param name="sentiment"></param>
        /// <param name="confidenceScores"></param>
        /// <param name="offset"> The target offset from the start of the sentence. </param>
        /// <param name="length"> The length of the target. </param>
        /// <param name="text"> The target text detected. </param>
        /// <param name="isNegated"> The indicator representing if the assessment is negated. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="confidenceScores"/> or <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.SentenceAssessment"/> instance for mocking. </returns>
        public static SentenceAssessment SentenceAssessment(TokenSentimentValue sentiment = default, TargetConfidenceScoreLabel confidenceScores = null, int offset = default, int length = default, string text = null, bool isNegated = default)
        {
            if (confidenceScores == null)
            {
                throw new ArgumentNullException(nameof(confidenceScores));
            }
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new SentenceAssessment(sentiment, confidenceScores, offset, length, text, isNegated);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.SentimentLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.SentimentLROResult"/> instance for mocking. </returns>
        public static SentimentLROResult SentimentLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, SentimentResponse results = null)
        {
            return new SentimentLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.SentimentAnalysisLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomSentenceSentiment"/>. </summary>
        /// <param name="text"> The sentence text. </param>
        /// <param name="sentiment"> The predicted Sentiment for the sentence. </param>
        /// <param name="confidenceScores"> The sentiment confidence score between 0 and 1 for the sentence for all classes. </param>
        /// <param name="offset"> The target offset from the start of the sentence. </param>
        /// <param name="length"> The length of the target. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> or <paramref name="confidenceScores"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.CustomSentenceSentiment"/> instance for mocking. </returns>
        public static CustomSentenceSentiment CustomSentenceSentiment(string text = null, SentenceSentimentValue sentiment = default, SentimentConfidenceScores confidenceScores = null, int offset = default, int length = default)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }
            if (confidenceScores == null)
            {
                throw new ArgumentNullException(nameof(confidenceScores));
            }

            return new CustomSentenceSentiment(text, sentiment, confidenceScores, offset, length);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomSentimentAnalysisResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="projectName"> This field indicates the project name for the model. </param>
        /// <param name="deploymentName"> This field indicates the deployment name for the model. </param>
        /// <param name="documents"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomSentimentAnalysisResult"/> instance for mocking. </returns>
        public static CustomSentimentAnalysisResult CustomSentimentAnalysisResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string projectName = null, string deploymentName = null, IEnumerable<CustomSentimentAnalysisResultDocument> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<CustomSentimentAnalysisResultDocument>();

            return new CustomSentimentAnalysisResult(errors?.ToList(), statistics, projectName, deploymentName, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomSentimentAnalysisResultDocument"/>. </summary>
        /// <param name="sentiment"> Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). </param>
        /// <param name="confidenceScores"> The sentiment confidence score between 0 and 1 for the sentence for all classes. </param>
        /// <param name="sentences"></param>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.CustomSentimentAnalysisResultDocument"/> instance for mocking. </returns>
        public static CustomSentimentAnalysisResultDocument CustomSentimentAnalysisResultDocument(DocumentSentimentValue sentiment = default, SentimentConfidenceScores confidenceScores = null, IEnumerable<CustomSentenceSentiment> sentences = null, string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, DetectedLanguage detectedLanguage = null)
        {
            sentences ??= new List<CustomSentenceSentiment>();
            warnings ??= new List<DocumentWarning>();

            return new CustomSentimentAnalysisResultDocument(sentiment, confidenceScores, sentences?.ToList(), id, warnings?.ToList(), statistics, detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomSentimentAnalysisLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomSentimentAnalysisLROResult"/> instance for mocking. </returns>
        public static CustomSentimentAnalysisLROResult CustomSentimentAnalysisLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, CustomSentimentAnalysisResult results = null)
        {
            return new CustomSentimentAnalysisLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.CustomSentimentAnalysisLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.ExtractiveSummarizationResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="AnalyzeText.ExtractiveSummarizationResult"/> instance for mocking. </returns>
        public static ExtractiveSummarizationResult ExtractiveSummarizationResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<ExtractedSummaryDocumentResultWithDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<ExtractedSummaryDocumentResultWithDetectedLanguage>();

            return new ExtractiveSummarizationResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.ExtractedSummaryDocumentResultWithDetectedLanguage"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="sentences"></param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.ExtractedSummaryDocumentResultWithDetectedLanguage"/> instance for mocking. </returns>
        public static ExtractedSummaryDocumentResultWithDetectedLanguage ExtractedSummaryDocumentResultWithDetectedLanguage(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, IEnumerable<ExtractedSummarySentence> sentences = null, DetectedLanguage detectedLanguage = null)
        {
            warnings ??= new List<DocumentWarning>();
            sentences ??= new List<ExtractedSummarySentence>();

            return new ExtractedSummaryDocumentResultWithDetectedLanguage(id, warnings?.ToList(), statistics, sentences?.ToList(), detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.ExtractedSummarySentence"/>. </summary>
        /// <param name="text"> The extracted sentence text. </param>
        /// <param name="rankScore"> A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance. </param>
        /// <param name="offset"> The sentence offset from the start of the document, based on the value of the parameter StringIndexType. </param>
        /// <param name="length"> The length of the sentence. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="AnalyzeText.ExtractedSummarySentence"/> instance for mocking. </returns>
        public static ExtractedSummarySentence ExtractedSummarySentence(string text = null, double rankScore = default, int offset = default, int length = default)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new ExtractedSummarySentence(text, rankScore, offset, length);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.ExtractiveSummarizationLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.ExtractiveSummarizationLROResult"/> instance for mocking. </returns>
        public static ExtractiveSummarizationLROResult ExtractiveSummarizationLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, ExtractiveSummarizationResult results = null)
        {
            return new ExtractiveSummarizationLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.ExtractiveSummarizationLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.AbstractiveSummarizationLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.AbstractiveSummarizationLROResult"/> instance for mocking. </returns>
        public static AbstractiveSummarizationLROResult AbstractiveSummarizationLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, AbstractiveSummarizationResult results = null)
        {
            return new AbstractiveSummarizationLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.AbstractiveSummarizationLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.AbstractiveSummarizationResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for scoring. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="AnalyzeText.AbstractiveSummarizationResult"/> instance for mocking. </returns>
        public static AbstractiveSummarizationResult AbstractiveSummarizationResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<AbstractiveSummaryDocumentResultWithDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<AbstractiveSummaryDocumentResultWithDetectedLanguage>();

            return new AbstractiveSummarizationResult(errors?.ToList(), statistics, modelVersion, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.AbstractiveSummaryDocumentResultWithDetectedLanguage"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="summaries"> A list of abstractive summaries. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.AbstractiveSummaryDocumentResultWithDetectedLanguage"/> instance for mocking. </returns>
        public static AbstractiveSummaryDocumentResultWithDetectedLanguage AbstractiveSummaryDocumentResultWithDetectedLanguage(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, IEnumerable<AbstractiveSummary> summaries = null, DetectedLanguage detectedLanguage = null)
        {
            warnings ??= new List<DocumentWarning>();
            summaries ??= new List<AbstractiveSummary>();

            return new AbstractiveSummaryDocumentResultWithDetectedLanguage(id, warnings?.ToList(), statistics, summaries?.ToList(), detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.AbstractiveSummary"/>. </summary>
        /// <param name="text"> The text of the summary. </param>
        /// <param name="contexts"> The context list of the summary. </param>
        /// <returns> A new <see cref="AnalyzeText.AbstractiveSummary"/> instance for mocking. </returns>
        public static AbstractiveSummary AbstractiveSummary(string text = null, IEnumerable<SummaryContext> contexts = null)
        {
            contexts ??= new List<SummaryContext>();

            return new AbstractiveSummary(text, contexts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomAbstractiveSummarizationLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomAbstractiveSummarizationLROResult"/> instance for mocking. </returns>
        public static CustomAbstractiveSummarizationLROResult CustomAbstractiveSummarizationLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, CustomAbstractiveSummarizationResult results = null)
        {
            return new CustomAbstractiveSummarizationLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.CustomAbstractiveSummarizationLROResults, results);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomAbstractiveSummarizationResult"/>. </summary>
        /// <param name="documents"> Response by document. </param>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="projectName"> This field indicates the project name for the model. </param>
        /// <param name="deploymentName"> This field indicates the deployment name for the model. </param>
        /// <returns> A new <see cref="AnalyzeText.CustomAbstractiveSummarizationResult"/> instance for mocking. </returns>
        public static CustomAbstractiveSummarizationResult CustomAbstractiveSummarizationResult(IEnumerable<AbstractiveSummaryDocumentResultWithDetectedLanguage> documents = null, IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string projectName = null, string deploymentName = null)
        {
            documents ??= new List<AbstractiveSummaryDocumentResultWithDetectedLanguage>();
            errors ??= new List<DocumentError>();

            return new CustomAbstractiveSummarizationResult(documents?.ToList(), errors?.ToList(), statistics, projectName, deploymentName);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomHealthcareResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="projectName"> This field indicates the project name for the model. </param>
        /// <param name="deploymentName"> This field indicates the deployment name for the model. </param>
        /// <param name="documents"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomHealthcareResult"/> instance for mocking. </returns>
        public static CustomHealthcareResult CustomHealthcareResult(IEnumerable<DocumentError> errors = null, RequestStatistics statistics = null, string projectName = null, string deploymentName = null, IEnumerable<CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage> documents = null)
        {
            errors ??= new List<DocumentError>();
            documents ??= new List<CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage>();

            return new CustomHealthcareResult(errors?.ToList(), statistics, projectName, deploymentName, documents?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="entities"> Healthcare entities. </param>
        /// <param name="relations"> Healthcare entity relations. </param>
        /// <param name="detectedLanguage"> If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. </param>
        /// <returns> A new <see cref="AnalyzeText.CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage"/> instance for mocking. </returns>
        public static CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, IEnumerable<CustomHealthcareEntity> entities = null, IEnumerable<HealthcareRelation> relations = null, DetectedLanguage detectedLanguage = null)
        {
            warnings ??= new List<DocumentWarning>();
            entities ??= new List<CustomHealthcareEntity>();
            relations ??= new List<HealthcareRelation>();

            return new CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage(id, warnings?.ToList(), statistics, entities?.ToList(), relations?.ToList(), detectedLanguage);
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomHealthcareEntity"/>. </summary>
        /// <param name="text"> Entity text as appears in the request. </param>
        /// <param name="category"> Healthcare Entity Category. </param>
        /// <param name="subcategory"> (Optional) Entity sub type. </param>
        /// <param name="offset"> Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. </param>
        /// <param name="length"> Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. </param>
        /// <param name="confidenceScore"> Confidence score between 0 and 1 of the extracted entity. </param>
        /// <param name="assertion"></param>
        /// <param name="name"> Preferred name for the entity. Example: 'histologically' would have a 'name' of 'histologic'. </param>
        /// <param name="links"> Entity references in known data sources. </param>
        /// <param name="entityComponentInformation"> (Optional) Entity component information listing fired components of the extracted entity. This object only applies for custom healthcare. </param>
        /// <returns> A new <see cref="AnalyzeText.CustomHealthcareEntity"/> instance for mocking. </returns>
        public static CustomHealthcareEntity CustomHealthcareEntity(string text = null, HealthcareEntityCategory category = default, string subcategory = null, int offset = default, int length = default, double confidenceScore = default, HealthcareAssertion assertion = null, string name = null, IEnumerable<HealthcareEntityLink> links = null, IEnumerable<EntityComponentInformation> entityComponentInformation = null)
        {
            links ??= new List<HealthcareEntityLink>();
            entityComponentInformation ??= new List<EntityComponentInformation>();

            return new CustomHealthcareEntity(text, category, subcategory, offset, length, confidenceScore, assertion, name, links?.ToList(), entityComponentInformation?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeText.CustomHealthcareLROResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="AnalyzeText.CustomHealthcareLROResult"/> instance for mocking. </returns>
        public static CustomHealthcareLROResult CustomHealthcareLROResult(DateTimeOffset lastUpdateDateTime = default, State status = default, string taskName = null, CustomHealthcareResult results = null)
        {
            return new CustomHealthcareLROResult(lastUpdateDateTime, status, taskName, AnalyzeTextLROResultsKind.CustomHealthcareLROResults, results);
        }
    }
}
