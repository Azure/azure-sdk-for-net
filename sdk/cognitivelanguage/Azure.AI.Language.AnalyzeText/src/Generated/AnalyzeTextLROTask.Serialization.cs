// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Language.AnalyzeText
{
    [PersistableModelProxy(typeof(UnknownAnalyzeTextLROTask))]
    public partial class AnalyzeTextLROTask : IUtf8JsonSerializable, IJsonModel<AnalyzeTextLROTask>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AnalyzeTextLROTask>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<AnalyzeTextLROTask>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AnalyzeTextLROTask>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AnalyzeTextLROTask)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind.ToString());
            if (Optional.IsDefined(TaskName))
            {
                writer.WritePropertyName("taskName"u8);
                writer.WriteStringValue(TaskName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AnalyzeTextLROTask IJsonModel<AnalyzeTextLROTask>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AnalyzeTextLROTask>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AnalyzeTextLROTask)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAnalyzeTextLROTask(document.RootElement, options);
        }

        internal static AnalyzeTextLROTask DeserializeAnalyzeTextLROTask(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("kind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AbstractiveSummarization": return AbstractiveSummarizationLROTask.DeserializeAbstractiveSummarizationLROTask(element, options);
                    case "CustomAbstractiveSummarization": return CustomAbstractiveSummarizationLROTask.DeserializeCustomAbstractiveSummarizationLROTask(element, options);
                    case "CustomEntityRecognition": return CustomEntitiesLROTask.DeserializeCustomEntitiesLROTask(element, options);
                    case "CustomHealthcare": return CustomHealthcareLROTask.DeserializeCustomHealthcareLROTask(element, options);
                    case "CustomMultiLabelClassification": return CustomMultiLabelClassificationLROTask.DeserializeCustomMultiLabelClassificationLROTask(element, options);
                    case "CustomSentimentAnalysis": return CustomSentimentAnalysisLROTask.DeserializeCustomSentimentAnalysisLROTask(element, options);
                    case "CustomSingleLabelClassification": return CustomSingleLabelClassificationLROTask.DeserializeCustomSingleLabelClassificationLROTask(element, options);
                    case "EntityLinking": return EntityLinkingLROTask.DeserializeEntityLinkingLROTask(element, options);
                    case "EntityRecognition": return EntitiesLROTask.DeserializeEntitiesLROTask(element, options);
                    case "ExtractiveSummarization": return ExtractiveSummarizationLROTask.DeserializeExtractiveSummarizationLROTask(element, options);
                    case "Healthcare": return HealthcareLROTask.DeserializeHealthcareLROTask(element, options);
                    case "KeyPhraseExtraction": return KeyPhraseLROTask.DeserializeKeyPhraseLROTask(element, options);
                    case "PiiEntityRecognition": return PiiLROTask.DeserializePiiLROTask(element, options);
                    case "SentimentAnalysis": return SentimentAnalysisLROTask.DeserializeSentimentAnalysisLROTask(element, options);
                }
            }
            return UnknownAnalyzeTextLROTask.DeserializeUnknownAnalyzeTextLROTask(element, options);
        }

        BinaryData IPersistableModel<AnalyzeTextLROTask>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AnalyzeTextLROTask>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AnalyzeTextLROTask)} does not support writing '{options.Format}' format.");
            }
        }

        AnalyzeTextLROTask IPersistableModel<AnalyzeTextLROTask>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AnalyzeTextLROTask>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAnalyzeTextLROTask(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AnalyzeTextLROTask)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AnalyzeTextLROTask>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new AnalyzeTextLROTask FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAnalyzeTextLROTask(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue<AnalyzeTextLROTask>(this, new ModelReaderWriterOptions("W"));
            return content;
        }
    }
}
