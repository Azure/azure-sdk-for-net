// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Language.AnalyzeText;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.AnalyzeText.Samples
{
    public partial class Samples_AnalyzeTextClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeText_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "DynamicClassification",
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeText_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "DynamicClassification",
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeText_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            AnalyzeTextTask body = new AnalyzeTextDynamicClassificationInput();
            Response<AnalyzeTextTaskResult> response = client.AnalyzeText(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeText_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            AnalyzeTextTask body = new AnalyzeTextDynamicClassificationInput();
            Response<AnalyzeTextTaskResult> response = await client.AnalyzeTextAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeText_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                parameters = new
                {
                    classificationType = "Multi",
                    categories = new object[]
            {
"<categories>"
            },
                    modelVersion = "<modelVersion>",
                    loggingOptOut = true,
                },
                kind = "DynamicClassification",
            });
            Response response = client.AnalyzeText(content, showStats: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeText_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                parameters = new
                {
                    classificationType = "Multi",
                    categories = new object[]
            {
"<categories>"
            },
                    modelVersion = "<modelVersion>",
                    loggingOptOut = true,
                },
                kind = "DynamicClassification",
            });
            Response response = await client.AnalyzeTextAsync(content, showStats: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeText_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            AnalyzeTextTask body = new AnalyzeTextDynamicClassificationInput
            {
                AnalysisInput = new MultiLanguageAnalysisInput
                {
                    Documents = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
                },
                Parameters = new DynamicClassificationTaskParameters(new string[] { "<categories>" })
                {
                    ClassificationType = ClassificationType.Multi,
                },
            };
            Response<AnalyzeTextTaskResult> response = client.AnalyzeText(body, showStats: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeText_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            AnalyzeTextTask body = new AnalyzeTextDynamicClassificationInput
            {
                AnalysisInput = new MultiLanguageAnalysisInput
                {
                    Documents = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
                },
                Parameters = new DynamicClassificationTaskParameters(new string[] { "<categories>" })
                {
                    ClassificationType = ClassificationType.Multi,
                },
            };
            Response<AnalyzeTextTaskResult> response = await client.AnalyzeTextAsync(body, showStats: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextJobStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Response response = client.AnalyzeTextJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextJobStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Response response = await client.AnalyzeTextJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextJobStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Response<AnalyzeTextJobState> response = client.AnalyzeTextJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextJobStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Response<AnalyzeTextJobState> response = await client.AnalyzeTextJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextJobStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Response response = client.AnalyzeTextJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextJobStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Response response = await client.AnalyzeTextJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextJobStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Response<AnalyzeTextJobState> response = client.AnalyzeTextJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextJobStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Response<AnalyzeTextJobState> response = await client.AnalyzeTextJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextSubmitJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new object(),
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
}
            },
            });
            Operation operation = client.AnalyzeTextSubmitJob(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextSubmitJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new object(),
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
}
            },
            });
            Operation operation = await client.AnalyzeTextSubmitJobAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextSubmitJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            AnalyzeTextJobsInput analyzeTextJobsInput = new AnalyzeTextJobsInput(new MultiLanguageAnalysisInput(), new AnalyzeTextLROTask[]
            {
new CustomEntitiesLROTask()
            });
            Operation operation = client.AnalyzeTextSubmitJob(WaitUntil.Completed, analyzeTextJobsInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextSubmitJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            AnalyzeTextJobsInput analyzeTextJobsInput = new AnalyzeTextJobsInput(new MultiLanguageAnalysisInput(), new AnalyzeTextLROTask[]
            {
new CustomEntitiesLROTask()
            });
            Operation operation = await client.AnalyzeTextSubmitJobAsync(WaitUntil.Completed, analyzeTextJobsInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextSubmitJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                tasks = new object[]
            {
new
{
parameters = new
{
stringIndexType = "TextElements_v8",
projectName = "<projectName>",
deploymentName = "<deploymentName>",
loggingOptOut = true,
},
kind = "CustomEntityRecognition",
taskName = "<taskName>",
}
            },
                defaultLanguage = "<defaultLanguage>",
            });
            Operation operation = client.AnalyzeTextSubmitJob(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextSubmitJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                tasks = new object[]
            {
new
{
parameters = new
{
stringIndexType = "TextElements_v8",
projectName = "<projectName>",
deploymentName = "<deploymentName>",
loggingOptOut = true,
},
kind = "CustomEntityRecognition",
taskName = "<taskName>",
}
            },
                defaultLanguage = "<defaultLanguage>",
            });
            Operation operation = await client.AnalyzeTextSubmitJobAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextSubmitJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            AnalyzeTextJobsInput analyzeTextJobsInput = new AnalyzeTextJobsInput(new MultiLanguageAnalysisInput
            {
                Documents = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
            }, new AnalyzeTextLROTask[]
            {
new CustomEntitiesLROTask
{
Parameters = new CustomEntitiesTaskParameters("<projectName>", "<deploymentName>")
{
StringIndexType = StringIndexType.TextElementsV8,
},
}
            })
            {
                DisplayName = "<displayName>",
                DefaultLanguage = "<defaultLanguage>",
            };
            Operation operation = client.AnalyzeTextSubmitJob(WaitUntil.Completed, analyzeTextJobsInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextSubmitJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            AnalyzeTextJobsInput analyzeTextJobsInput = new AnalyzeTextJobsInput(new MultiLanguageAnalysisInput
            {
                Documents = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
            }, new AnalyzeTextLROTask[]
            {
new CustomEntitiesLROTask
{
Parameters = new CustomEntitiesTaskParameters("<projectName>", "<deploymentName>")
{
StringIndexType = StringIndexType.TextElementsV8,
},
}
            })
            {
                DisplayName = "<displayName>",
                DefaultLanguage = "<defaultLanguage>",
            };
            Operation operation = await client.AnalyzeTextSubmitJobAsync(WaitUntil.Completed, analyzeTextJobsInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextCancelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Operation operation = client.AnalyzeTextCancelJob(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextCancelJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Operation operation = await client.AnalyzeTextCancelJobAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AnalyzeTextCancelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Operation operation = client.AnalyzeTextCancelJob(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AnalyzeTextCancelJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeTextClient client = new AnalyzeTextClient(endpoint, credential);

            Operation operation = await client.AnalyzeTextCancelJobAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }
    }
}
