// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Language.Text.Authoring.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Text.Authoring.Samples
{
    public partial class Samples_TextAuthoringProjects
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringImportProjectJobState_GetImportStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetImportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringImportProjectJobState_GetImportStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringImportProjectJobState_GetImportStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ImportProjectOperationState> response = client.GetImportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringImportProjectJobState_GetImportStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ImportProjectOperationState> response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringImportProjectJobState_GetImportStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetImportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringImportProjectJobState_GetImportStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringImportProjectJobState_GetImportStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ImportProjectOperationState> response = client.GetImportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringImportProjectJobState_GetImportStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ImportProjectOperationState> response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringExportProjectJobState_GetExportStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetExportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringExportProjectJobState_GetExportStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringExportProjectJobState_GetExportStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ExportProjectOperationState> response = client.GetExportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringExportProjectJobState_GetExportStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ExportProjectOperationState> response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringExportProjectJobState_GetExportStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetExportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("resultUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringExportProjectJobState_GetExportStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("resultUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringExportProjectJobState_GetExportStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ExportProjectOperationState> response = client.GetExportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringExportProjectJobState_GetExportStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ExportProjectOperationState> response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectMetadata_GetProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetProject("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectMetadata_GetProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetProjectAsync("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectMetadata_GetProject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ProjectMetadata> response = client.GetProject("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectMetadata_GetProject_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ProjectMetadata> response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectMetadata_GetProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetProject("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("amlProjectPath").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("isLabelingLocked").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("runGptPredictions").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("gptPredictiveLookahead").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("multilingual").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectMetadata_GetProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetProjectAsync("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("amlProjectPath").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("isLabelingLocked").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("runGptPredictions").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("gptPredictiveLookahead").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("multilingual").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectMetadata_GetProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ProjectMetadata> response = client.GetProject("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectMetadata_GetProject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ProjectMetadata> response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectMetadata_CreateProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                projectName = "<projectName>",
                language = "<language>",
            });
            Response response = client.CreateProject("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectMetadata_CreateProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                projectName = "<projectName>",
                language = "<language>",
            });
            Response response = await client.CreateProjectAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectMetadata_CreateProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                settings = new
                {
                    confidenceThreshold = 123.45F,
                    amlProjectPath = "<amlProjectPath>",
                    isLabelingLocked = true,
                    runGptPredictions = true,
                    gptPredictiveLookahead = 1234,
                },
                projectName = "<projectName>",
                multilingual = true,
                description = "<description>",
                language = "<language>",
            });
            Response response = client.CreateProject("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("amlProjectPath").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("isLabelingLocked").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("runGptPredictions").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("gptPredictiveLookahead").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("multilingual").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectMetadata_CreateProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                settings = new
                {
                    confidenceThreshold = 123.45F,
                    amlProjectPath = "<amlProjectPath>",
                    isLabelingLocked = true,
                    runGptPredictions = true,
                    gptPredictiveLookahead = 1234,
                },
                projectName = "<projectName>",
                multilingual = true,
                description = "<description>",
                language = "<language>",
            });
            Response response = await client.CreateProjectAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("confidenceThreshold").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("amlProjectPath").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("isLabelingLocked").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("runGptPredictions").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("gptPredictiveLookahead").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("multilingual").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CopyProjectAuthorization_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
            });
            Response response = client.CopyProjectAuthorization("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("targetProjectName").ToString());
            Console.WriteLine(result.GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CopyProjectAuthorization_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
            });
            Response response = await client.CopyProjectAuthorizationAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("targetProjectName").ToString());
            Console.WriteLine(result.GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CopyProjectAuthorization_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<CopyProjectDetails> response = client.CopyProjectAuthorization("<projectName>", AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CopyProjectAuthorization_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<CopyProjectDetails> response = await client.CopyProjectAuthorizationAsync("<projectName>", AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CopyProjectAuthorization_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                allowOverwrite = true,
            });
            Response response = client.CopyProjectAuthorization("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("targetProjectName").ToString());
            Console.WriteLine(result.GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CopyProjectAuthorization_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                allowOverwrite = true,
            });
            Response response = await client.CopyProjectAuthorizationAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectKind").ToString());
            Console.WriteLine(result.GetProperty("targetProjectName").ToString());
            Console.WriteLine(result.GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CopyProjectAuthorization_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<CopyProjectDetails> response = client.CopyProjectAuthorization("<projectName>", AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, storageInputContainerName: "<storageInputContainerName>", allowOverwrite: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CopyProjectAuthorization_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<CopyProjectDetails> response = await client.CopyProjectAuthorizationAsync("<projectName>", AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, storageInputContainerName: "<storageInputContainerName>", allowOverwrite: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringCopyProjectJobState_GetCopyProjectStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetCopyProjectStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringCopyProjectJobState_GetCopyProjectStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringCopyProjectJobState_GetCopyProjectStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<CopyProjectOperationState> response = client.GetCopyProjectStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringCopyProjectJobState_GetCopyProjectStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<CopyProjectOperationState> response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringCopyProjectJobState_GetCopyProjectStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetCopyProjectStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringCopyProjectJobState_GetCopyProjectStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringCopyProjectJobState_GetCopyProjectStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<CopyProjectOperationState> response = client.GetCopyProjectStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringCopyProjectJobState_GetCopyProjectStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<CopyProjectOperationState> response = await client.GetCopyProjectStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringTrainingJobState_GetTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetTrainingStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringTrainingJobState_GetTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringTrainingJobState_GetTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<TrainingTrainingJobs> response = client.GetTrainingStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringTrainingJobState_GetTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<TrainingTrainingJobs> response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringTrainingJobState_GetTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetTrainingStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringTrainingJobState_GetTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringTrainingJobState_GetTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<TrainingTrainingJobs> response = client.GetTrainingStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringTrainingJobState_GetTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<TrainingTrainingJobs> response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectDeletionJobState_GetProjectDeletionStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetProjectDeletionStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectDeletionJobState_GetProjectDeletionStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetProjectDeletionStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectDeletionJobState_GetProjectDeletionStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ProjectDeletionOperationState> response = client.GetProjectDeletionStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectDeletionJobState_GetProjectDeletionStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ProjectDeletionOperationState> response = await client.GetProjectDeletionStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectDeletionJobState_GetProjectDeletionStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = client.GetProjectDeletionStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectDeletionJobState_GetProjectDeletionStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response response = await client.GetProjectDeletionStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAnalysisAuthoringProjectDeletionJobState_GetProjectDeletionStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ProjectDeletionOperationState> response = client.GetProjectDeletionStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAnalysisAuthoringProjectDeletionJobState_GetProjectDeletionStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Response<ProjectDeletionOperationState> response = await client.GetProjectDeletionStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_DeleteProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = client.DeleteProject(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_DeleteProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_DeleteProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = client.DeleteProject(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_DeleteProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CopyProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                targetProjectName = "<targetProjectName>",
                accessToken = "<accessToken>",
                expiresAt = "2022-05-10T18:57:31.2311892Z",
                targetResourceId = "<targetResourceId>",
                targetResourceRegion = "<targetResourceRegion>",
            });
            Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CopyProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                targetProjectName = "<targetProjectName>",
                accessToken = "<accessToken>",
                expiresAt = "2022-05-10T18:57:31.2311892Z",
                targetResourceId = "<targetResourceId>",
                targetResourceRegion = "<targetResourceRegion>",
            });
            Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CopyProject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            CopyProjectDetails body = new CopyProjectDetails(
                AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification,
                "<targetProjectName>",
                "<accessToken>",
                DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                "<targetResourceId>",
                "<targetResourceRegion>");
            Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CopyProject_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            CopyProjectDetails body = new CopyProjectDetails(
                AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification,
                "<targetProjectName>",
                "<accessToken>",
                DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                "<targetResourceId>",
                "<targetResourceRegion>");
            Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CopyProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                targetProjectName = "<targetProjectName>",
                accessToken = "<accessToken>",
                expiresAt = "2022-05-10T18:57:31.2311892Z",
                targetResourceId = "<targetResourceId>",
                targetResourceRegion = "<targetResourceRegion>",
            });
            Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CopyProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                targetProjectName = "<targetProjectName>",
                accessToken = "<accessToken>",
                expiresAt = "2022-05-10T18:57:31.2311892Z",
                targetResourceId = "<targetResourceId>",
                targetResourceRegion = "<targetResourceRegion>",
            });
            Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CopyProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            CopyProjectDetails body = new CopyProjectDetails(
                AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification,
                "<targetProjectName>",
                "<accessToken>",
                DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                "<targetResourceId>",
                "<targetResourceRegion>");
            Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CopyProject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            CopyProjectDetails body = new CopyProjectDetails(
                AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification,
                "<targetProjectName>",
                "<accessToken>",
                DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                "<targetResourceId>",
                "<targetResourceRegion>");
            Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Export_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Export_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Export_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Export_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Export_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit", assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Export_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit", assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Export_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit, assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Export_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit, assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Import_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectFileVersion = "<projectFileVersion>",
                stringIndexType = "Utf16CodeUnit",
                metadata = new
                {
                    projectKind = "CustomSingleLabelClassification",
                    storageInputContainerName = "<storageInputContainerName>",
                    projectName = "<projectName>",
                    language = "<language>",
                },
            });
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Import_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectFileVersion = "<projectFileVersion>",
                stringIndexType = "Utf16CodeUnit",
                metadata = new
                {
                    projectKind = "CustomSingleLabelClassification",
                    storageInputContainerName = "<storageInputContainerName>",
                    projectName = "<projectName>",
                    language = "<language>",
                },
            });
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Import_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectDetails(AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, "<storageInputContainerName>", "<projectName>", "<language>"));
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Import_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectDetails(AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, "<storageInputContainerName>", "<projectName>", "<language>"));
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Import_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectFileVersion = "<projectFileVersion>",
                stringIndexType = "Utf16CodeUnit",
                metadata = new
                {
                    projectKind = "CustomSingleLabelClassification",
                    storageInputContainerName = "<storageInputContainerName>",
                    settings = new
                    {
                        confidenceThreshold = 123.45F,
                        amlProjectPath = "<amlProjectPath>",
                        isLabelingLocked = true,
                        runGptPredictions = true,
                        gptPredictiveLookahead = 1234,
                    },
                    projectName = "<projectName>",
                    multilingual = true,
                    description = "<description>",
                    language = "<language>",
                },
                assets = new
                {
                    documents = new object[]
            {
new
{
summaryLocation = "<summaryLocation>",
location = "<location>",
language = "<language>",
dataset = "<dataset>",
}
            },
                    projectKind = "CustomAbstractiveSummarization",
                },
            });
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content, format: "<format>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Import_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                projectFileVersion = "<projectFileVersion>",
                stringIndexType = "Utf16CodeUnit",
                metadata = new
                {
                    projectKind = "CustomSingleLabelClassification",
                    storageInputContainerName = "<storageInputContainerName>",
                    settings = new
                    {
                        confidenceThreshold = 123.45F,
                        amlProjectPath = "<amlProjectPath>",
                        isLabelingLocked = true,
                        runGptPredictions = true,
                        gptPredictiveLookahead = 1234,
                    },
                    projectName = "<projectName>",
                    multilingual = true,
                    description = "<description>",
                    language = "<language>",
                },
                assets = new
                {
                    documents = new object[]
            {
new
{
summaryLocation = "<summaryLocation>",
location = "<location>",
language = "<language>",
dataset = "<dataset>",
}
            },
                    projectKind = "CustomAbstractiveSummarization",
                },
            });
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content, format: "<format>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Import_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectDetails(AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, "<storageInputContainerName>", "<projectName>", "<language>")
            {
                Settings = new AnalyzeTextAuthoringProjectSettings
                {
                    ConfidenceThreshold = 123.45F,
                    AmlProjectPath = "<amlProjectPath>",
                    IsLabelingLocked = true,
                    RunGptPredictions = true,
                    GptPredictiveLookahead = 1234,
                },
                Multilingual = true,
                Description = "<description>",
            })
            {
                Assets = new ExportedCustomAbstractiveSummarizationProjectAsset
                {
                    Documents = {new ExportedCustomAbstractiveSummarizationDocument("<summaryLocation>")
{
Location = "<location>",
Language = "<language>",
Dataset = "<dataset>",
}},
                },
            };
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body, format: "<format>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Import_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            ExportedProject body = new ExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new CreateProjectDetails(AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, "<storageInputContainerName>", "<projectName>", "<language>")
            {
                Settings = new AnalyzeTextAuthoringProjectSettings
                {
                    ConfidenceThreshold = 123.45F,
                    AmlProjectPath = "<amlProjectPath>",
                    IsLabelingLocked = true,
                    RunGptPredictions = true,
                    GptPredictiveLookahead = 1234,
                },
                Multilingual = true,
                Description = "<description>",
            })
            {
                Assets = new ExportedCustomAbstractiveSummarizationProjectAsset
                {
                    Documents = {new ExportedCustomAbstractiveSummarizationDocument("<summaryLocation>")
{
Location = "<location>",
Language = "<language>",
Dataset = "<dataset>",
}},
                },
            };
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body, format: "<format>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Train_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
                trainingConfigVersion = "<trainingConfigVersion>",
            });
            Operation<BinaryData> operation = client.Train(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Train_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
                trainingConfigVersion = "<trainingConfigVersion>",
            });
            Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Train_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            TrainingJobDetails body = new TrainingJobDetails("<modelLabel>", "<trainingConfigVersion>");
            Operation<TrainingJobResult> operation = client.Train(WaitUntil.Completed, "<projectName>", body);
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Train_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            TrainingJobDetails body = new TrainingJobDetails("<modelLabel>", "<trainingConfigVersion>");
            Operation<TrainingJobResult> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", body);
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Train_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
                trainingConfigVersion = "<trainingConfigVersion>",
                evaluationOptions = new
                {
                    kind = "percentage",
                    trainingSplitPercentage = 1234,
                    testingSplitPercentage = 1234,
                },
                dataGenerationSettings = new
                {
                    enableDataGeneration = true,
                    dataGenerationConnectionInfo = new
                    {
                        kind = "azureOpenAI",
                        resourceId = "<resourceId>",
                        deploymentName = "<deploymentName>",
                    },
                },
            });
            Operation<BinaryData> operation = client.Train(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Train_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
                trainingConfigVersion = "<trainingConfigVersion>",
                evaluationOptions = new
                {
                    kind = "percentage",
                    trainingSplitPercentage = 1234,
                    testingSplitPercentage = 1234,
                },
                dataGenerationSettings = new
                {
                    enableDataGeneration = true,
                    dataGenerationConnectionInfo = new
                    {
                        kind = "azureOpenAI",
                        resourceId = "<resourceId>",
                        deploymentName = "<deploymentName>",
                    },
                },
            });
            Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_Train_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            TrainingJobDetails body = new TrainingJobDetails("<modelLabel>", "<trainingConfigVersion>")
            {
                EvaluationOptions = new EvaluationDetails
                {
                    Kind = AnalyzeTextAuthoringEvaluationKind.Percentage,
                    TrainingSplitPercentage = 1234,
                    TestingSplitPercentage = 1234,
                },
                DataGenerationSettings = new DataGenerationSetting(true, new DataGenerationConnectionInfo("<resourceId>", "<deploymentName>")),
            };
            Operation<TrainingJobResult> operation = client.Train(WaitUntil.Completed, "<projectName>", body);
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_Train_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            TrainingJobDetails body = new TrainingJobDetails("<modelLabel>", "<trainingConfigVersion>")
            {
                EvaluationOptions = new EvaluationDetails
                {
                    Kind = AnalyzeTextAuthoringEvaluationKind.Percentage,
                    TrainingSplitPercentage = 1234,
                    TestingSplitPercentage = 1234,
                },
                DataGenerationSettings = new DataGenerationSetting(true, new DataGenerationConnectionInfo("<resourceId>", "<deploymentName>")),
            };
            Operation<TrainingJobResult> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", body);
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CancelTrainingJob_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation<BinaryData> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CancelTrainingJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation<BinaryData> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CancelTrainingJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation<TrainingJobResult> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>");
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CancelTrainingJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation<TrainingJobResult> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>");
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CancelTrainingJob_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation<BinaryData> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CancelTrainingJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation<BinaryData> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("modelLabel").ToString());
            Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextAuthoringProjects_CancelTrainingJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation<TrainingJobResult> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>");
            TrainingJobResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextAuthoringProjects_CancelTrainingJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAuthoringProjects client = new AuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

            Operation<TrainingJobResult> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>");
            TrainingJobResult responseData = operation.Value;
        }
    }
}
