// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.Text.Authoring
{
    /// <summary> Represents the comparison between the expected and predicted sentiment that result from an evaluation operation. </summary>
    public partial class DocumentTextSentimentEvalResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DocumentTextSentimentEvalResult"/>. </summary>
        /// <param name="expectedSentimentSpans"> Represents the document's expected sentiment labels. </param>
        /// <param name="predictedSentimentSpans"> Represents the document's predicted sentiment labels. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="expectedSentimentSpans"/> or <paramref name="predictedSentimentSpans"/> is null. </exception>
        internal DocumentTextSentimentEvalResult(IEnumerable<DocumentSentimentLabelEvalResult> expectedSentimentSpans, IEnumerable<DocumentSentimentLabelEvalResult> predictedSentimentSpans)
        {
            Argument.AssertNotNull(expectedSentimentSpans, nameof(expectedSentimentSpans));
            Argument.AssertNotNull(predictedSentimentSpans, nameof(predictedSentimentSpans));

            ExpectedSentimentSpans = expectedSentimentSpans.ToList();
            PredictedSentimentSpans = predictedSentimentSpans.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentTextSentimentEvalResult"/>. </summary>
        /// <param name="expectedSentimentSpans"> Represents the document's expected sentiment labels. </param>
        /// <param name="predictedSentimentSpans"> Represents the document's predicted sentiment labels. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DocumentTextSentimentEvalResult(IReadOnlyList<DocumentSentimentLabelEvalResult> expectedSentimentSpans, IReadOnlyList<DocumentSentimentLabelEvalResult> predictedSentimentSpans, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ExpectedSentimentSpans = expectedSentimentSpans;
            PredictedSentimentSpans = predictedSentimentSpans;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentTextSentimentEvalResult"/> for deserialization. </summary>
        internal DocumentTextSentimentEvalResult()
        {
        }

        /// <summary> Represents the document's expected sentiment labels. </summary>
        public IReadOnlyList<DocumentSentimentLabelEvalResult> ExpectedSentimentSpans { get; }
        /// <summary> Represents the document's predicted sentiment labels. </summary>
        public IReadOnlyList<DocumentSentimentLabelEvalResult> PredictedSentimentSpans { get; }
    }
}
