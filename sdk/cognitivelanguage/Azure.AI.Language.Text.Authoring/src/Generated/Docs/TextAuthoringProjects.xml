<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="AuthorizeProjectCopyAsync(string,AnalyzeTextAuthoringProjectKind,string,bool?,CancellationToken)">
      <example>
This sample shows how to call AuthorizeProjectCopyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringCopyProjectDetails> response = await client.AuthorizeProjectCopyAsync("<projectName>", AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification);
]]></code>
This sample shows how to call AuthorizeProjectCopyAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringCopyProjectDetails> response = await client.AuthorizeProjectCopyAsync("<projectName>", AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, storageInputContainerName: "<storageInputContainerName>", allowOverwrite: true);
]]></code></example>
    </member>
    <member name="AuthorizeProjectCopy(string,AnalyzeTextAuthoringProjectKind,string,bool?,CancellationToken)">
      <example>
This sample shows how to call AuthorizeProjectCopy.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringCopyProjectDetails> response = client.AuthorizeProjectCopy("<projectName>", AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification);
]]></code>
This sample shows how to call AuthorizeProjectCopy with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringCopyProjectDetails> response = client.AuthorizeProjectCopy("<projectName>", AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, storageInputContainerName: "<storageInputContainerName>", allowOverwrite: true);
]]></code></example>
    </member>
    <member name="AuthorizeProjectCopyAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AuthorizeProjectCopyAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
});
Response response = await client.AuthorizeProjectCopyAsync("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("targetProjectName").ToString());
Console.WriteLine(result.GetProperty("accessToken").ToString());
Console.WriteLine(result.GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("targetResourceId").ToString());
Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
]]></code>
This sample shows how to call AuthorizeProjectCopyAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    allowOverwrite = true,
});
Response response = await client.AuthorizeProjectCopyAsync("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("targetProjectName").ToString());
Console.WriteLine(result.GetProperty("accessToken").ToString());
Console.WriteLine(result.GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("targetResourceId").ToString());
Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
]]></code></example>
    </member>
    <member name="AuthorizeProjectCopy(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AuthorizeProjectCopy and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
});
Response response = client.AuthorizeProjectCopy("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("targetProjectName").ToString());
Console.WriteLine(result.GetProperty("accessToken").ToString());
Console.WriteLine(result.GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("targetResourceId").ToString());
Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
]]></code>
This sample shows how to call AuthorizeProjectCopy with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    allowOverwrite = true,
});
Response response = client.AuthorizeProjectCopy("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("targetProjectName").ToString());
Console.WriteLine(result.GetProperty("accessToken").ToString());
Console.WriteLine(result.GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("targetResourceId").ToString());
Console.WriteLine(result.GetProperty("targetResourceRegion").ToString());
]]></code></example>
    </member>
    <member name="GetTrainingStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetTrainingStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringTrainingOperationState> response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetTrainingStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringTrainingOperationState> response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetTrainingStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetTrainingStatus.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringTrainingOperationState> response = client.GetTrainingStatus("<projectName>", "<jobId>");
]]></code>
This sample shows how to call GetTrainingStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringTrainingOperationState> response = client.GetTrainingStatus("<projectName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetTrainingStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetTrainingStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>", (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call GetTrainingStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response response = await client.GetTrainingStatusAsync("<projectName>", "<jobId>", (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="GetTrainingStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetTrainingStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response response = client.GetTrainingStatus("<projectName>", "<jobId>", (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call GetTrainingStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response response = client.GetTrainingStatus("<projectName>", "<jobId>", (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result").GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="GetProjectDeletionStatusAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetProjectDeletionStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringProjectDeletionOperationState> response = await client.GetProjectDeletionStatusAsync("<jobId>");
]]></code>
This sample shows how to call GetProjectDeletionStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringProjectDeletionOperationState> response = await client.GetProjectDeletionStatusAsync("<jobId>");
]]></code></example>
    </member>
    <member name="GetProjectDeletionStatus(string,CancellationToken)">
      <example>
This sample shows how to call GetProjectDeletionStatus.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringProjectDeletionOperationState> response = client.GetProjectDeletionStatus("<jobId>");
]]></code>
This sample shows how to call GetProjectDeletionStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response<AnalyzeTextAuthoringProjectDeletionOperationState> response = client.GetProjectDeletionStatus("<jobId>");
]]></code></example>
    </member>
    <member name="GetProjectDeletionStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetProjectDeletionStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response response = await client.GetProjectDeletionStatusAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetProjectDeletionStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response response = await client.GetProjectDeletionStatusAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
]]></code></example>
    </member>
    <member name="GetProjectDeletionStatus(string,RequestContext)">
      <example>
This sample shows how to call GetProjectDeletionStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response response = client.GetProjectDeletionStatus("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetProjectDeletionStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Response response = client.GetProjectDeletionStatus("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
]]></code></example>
    </member>
    <member name="CopyProjectAsync(WaitUntil,string,AnalyzeTextAuthoringCopyProjectDetails,CancellationToken)">
      <example>
This sample shows how to call CopyProjectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringCopyProjectDetails body = new AnalyzeTextAuthoringCopyProjectDetails(
AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification,
"<targetProjectName>",
"<accessToken>",
DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
"<targetResourceId>",
"<targetResourceRegion>");
Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call CopyProjectAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringCopyProjectDetails body = new AnalyzeTextAuthoringCopyProjectDetails(
AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification,
"<targetProjectName>",
"<accessToken>",
DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
"<targetResourceId>",
"<targetResourceRegion>");
Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="CopyProject(WaitUntil,string,AnalyzeTextAuthoringCopyProjectDetails,CancellationToken)">
      <example>
This sample shows how to call CopyProject.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringCopyProjectDetails body = new AnalyzeTextAuthoringCopyProjectDetails(
AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification,
"<targetProjectName>",
"<accessToken>",
DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
"<targetResourceId>",
"<targetResourceRegion>");
Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call CopyProject with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringCopyProjectDetails body = new AnalyzeTextAuthoringCopyProjectDetails(
AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification,
"<targetProjectName>",
"<accessToken>",
DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
"<targetResourceId>",
"<targetResourceRegion>");
Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", body);
]]></code></example>
    </member>
    <member name="CopyProjectAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CopyProjectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    targetProjectName = "<targetProjectName>",
    accessToken = "<accessToken>",
    expiresAt = "2022-05-10T18:57:31.2311892Z",
    targetResourceId = "<targetResourceId>",
    targetResourceRegion = "<targetResourceRegion>",
});
Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call CopyProjectAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    targetProjectName = "<targetProjectName>",
    accessToken = "<accessToken>",
    expiresAt = "2022-05-10T18:57:31.2311892Z",
    targetResourceId = "<targetResourceId>",
    targetResourceRegion = "<targetResourceRegion>",
});
Operation operation = await client.CopyProjectAsync(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="CopyProject(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CopyProject.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    targetProjectName = "<targetProjectName>",
    accessToken = "<accessToken>",
    expiresAt = "2022-05-10T18:57:31.2311892Z",
    targetResourceId = "<targetResourceId>",
    targetResourceRegion = "<targetResourceRegion>",
});
Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call CopyProject with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    targetProjectName = "<targetProjectName>",
    accessToken = "<accessToken>",
    expiresAt = "2022-05-10T18:57:31.2311892Z",
    targetResourceId = "<targetResourceId>",
    targetResourceRegion = "<targetResourceRegion>",
});
Operation operation = client.CopyProject(WaitUntil.Completed, "<projectName>", content);
]]></code></example>
    </member>
    <member name="ExportAsync(WaitUntil,string,StringIndexType,string,string,CancellationToken)">
      <example>
This sample shows how to call ExportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit);
]]></code>
This sample shows how to call ExportAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit, assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="Export(WaitUntil,string,StringIndexType,string,string,CancellationToken)">
      <example>
This sample shows how to call Export.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation operation = client.Export(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit);
]]></code>
This sample shows how to call Export with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation operation = client.Export(WaitUntil.Completed, "<projectName>", StringIndexType.Utf16CodeUnit, assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="ExportAsync(WaitUntil,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call ExportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit");
]]></code>
This sample shows how to call ExportAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit", assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="Export(WaitUntil,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call Export.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit");
]]></code>
This sample shows how to call Export with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "Utf16CodeUnit", assetKind: "<assetKind>", trainedModelLabel: "<trainedModelLabel>");
]]></code></example>
    </member>
    <member name="ImportAsync(WaitUntil,string,AnalyzeTextAuthoringExportedProject,string,CancellationToken)">
      <example>
This sample shows how to call ImportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringExportedProject body = new AnalyzeTextAuthoringExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new AnalyzeTextAuthoringCreateProjectDetails(AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, "<storageInputContainerName>", "<projectName>", "<language>"));
Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call ImportAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringExportedProject body = new AnalyzeTextAuthoringExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new AnalyzeTextAuthoringCreateProjectDetails(AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, "<storageInputContainerName>", "<projectName>", "<language>")
{
    Settings = new AnalyzeTextAuthoringProjectSettings
    {
        ConfidenceThreshold = 123.45F,
        AmlProjectPath = "<amlProjectPath>",
        IsLabelingLocked = true,
        RunGptPredictions = true,
        GptPredictiveLookahead = 1234,
    },
    Multilingual = true,
    Description = "<description>",
})
{
    Assets = new AnalyzeTextAuthoringExportedCustomAbstractiveSummarizationProjectAsset
    {
        Documents = {new AnalyzeTextAuthoringExportedCustomAbstractiveSummarizationDocument("<summaryLocation>")
        {
            Location = "<location>",
            Language = "<language>",
            Dataset = "<dataset>",
        }},
    },
};
Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body, format: "<format>");
]]></code></example>
    </member>
    <member name="Import(WaitUntil,string,AnalyzeTextAuthoringExportedProject,string,CancellationToken)">
      <example>
This sample shows how to call Import.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringExportedProject body = new AnalyzeTextAuthoringExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new AnalyzeTextAuthoringCreateProjectDetails(AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, "<storageInputContainerName>", "<projectName>", "<language>"));
Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body);
]]></code>
This sample shows how to call Import with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringExportedProject body = new AnalyzeTextAuthoringExportedProject("<projectFileVersion>", StringIndexType.Utf16CodeUnit, new AnalyzeTextAuthoringCreateProjectDetails(AnalyzeTextAuthoringProjectKind.CustomSingleLabelClassification, "<storageInputContainerName>", "<projectName>", "<language>")
{
    Settings = new AnalyzeTextAuthoringProjectSettings
    {
        ConfidenceThreshold = 123.45F,
        AmlProjectPath = "<amlProjectPath>",
        IsLabelingLocked = true,
        RunGptPredictions = true,
        GptPredictiveLookahead = 1234,
    },
    Multilingual = true,
    Description = "<description>",
})
{
    Assets = new AnalyzeTextAuthoringExportedCustomAbstractiveSummarizationProjectAsset
    {
        Documents = {new AnalyzeTextAuthoringExportedCustomAbstractiveSummarizationDocument("<summaryLocation>")
        {
            Location = "<location>",
            Language = "<language>",
            Dataset = "<dataset>",
        }},
    },
};
Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body, format: "<format>");
]]></code></example>
    </member>
    <member name="ImportAsync(WaitUntil,string,RequestContent,string,RequestContext)">
      <example>
This sample shows how to call ImportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectFileVersion = "<projectFileVersion>",
    stringIndexType = "Utf16CodeUnit",
    metadata = new
    {
        projectKind = "CustomSingleLabelClassification",
        storageInputContainerName = "<storageInputContainerName>",
        projectName = "<projectName>",
        language = "<language>",
    },
});
Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call ImportAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectFileVersion = "<projectFileVersion>",
    stringIndexType = "Utf16CodeUnit",
    metadata = new
    {
        projectKind = "CustomSingleLabelClassification",
        storageInputContainerName = "<storageInputContainerName>",
        settings = new
        {
            confidenceThreshold = 123.45F,
            amlProjectPath = "<amlProjectPath>",
            isLabelingLocked = true,
            runGptPredictions = true,
            gptPredictiveLookahead = 1234,
        },
        projectName = "<projectName>",
        multilingual = true,
        description = "<description>",
        language = "<language>",
    },
    assets = new
    {
        documents = new object[]
        {
            new
            {
                summaryLocation = "<summaryLocation>",
                location = "<location>",
                language = "<language>",
                dataset = "<dataset>",
            }
        },
        projectKind = "CustomAbstractiveSummarization",
    },
});
Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content, format: "<format>");
]]></code></example>
    </member>
    <member name="Import(WaitUntil,string,RequestContent,string,RequestContext)">
      <example>
This sample shows how to call Import.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectFileVersion = "<projectFileVersion>",
    stringIndexType = "Utf16CodeUnit",
    metadata = new
    {
        projectKind = "CustomSingleLabelClassification",
        storageInputContainerName = "<storageInputContainerName>",
        projectName = "<projectName>",
        language = "<language>",
    },
});
Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content);
]]></code>
This sample shows how to call Import with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    projectFileVersion = "<projectFileVersion>",
    stringIndexType = "Utf16CodeUnit",
    metadata = new
    {
        projectKind = "CustomSingleLabelClassification",
        storageInputContainerName = "<storageInputContainerName>",
        settings = new
        {
            confidenceThreshold = 123.45F,
            amlProjectPath = "<amlProjectPath>",
            isLabelingLocked = true,
            runGptPredictions = true,
            gptPredictiveLookahead = 1234,
        },
        projectName = "<projectName>",
        multilingual = true,
        description = "<description>",
        language = "<language>",
    },
    assets = new
    {
        documents = new object[]
        {
            new
            {
                summaryLocation = "<summaryLocation>",
                location = "<location>",
                language = "<language>",
                dataset = "<dataset>",
            }
        },
        projectKind = "CustomAbstractiveSummarization",
    },
});
Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content, format: "<format>");
]]></code></example>
    </member>
    <member name="TrainAsync(WaitUntil,string,AnalyzeTextAuthoringTrainingJobDetails,CancellationToken)">
      <example>
This sample shows how to call TrainAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringTrainingJobDetails body = new AnalyzeTextAuthoringTrainingJobDetails("<modelLabel>", "<trainingConfigVersion>");
Operation<AnalyzeTextAuthoringTrainingJobResult> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", body);
AnalyzeTextAuthoringTrainingJobResult responseData = operation.Value;
]]></code>
This sample shows how to call TrainAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringTrainingJobDetails body = new AnalyzeTextAuthoringTrainingJobDetails("<modelLabel>", "<trainingConfigVersion>")
{
    EvaluationOptions = new AnalyzeTextAuthoringEvaluationDetails
    {
        Kind = AnalyzeTextAuthoringEvaluationKind.Percentage,
        TrainingSplitPercentage = 1234,
        TestingSplitPercentage = 1234,
    },
    DataGenerationSettings = new AnalyzeTextAuthoringDataGenerationSetting(true, new AnalyzeTextAuthoringDataGenerationConnectionInfo("<resourceId>", "<deploymentName>")),
};
Operation<AnalyzeTextAuthoringTrainingJobResult> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", body);
AnalyzeTextAuthoringTrainingJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="Train(WaitUntil,string,AnalyzeTextAuthoringTrainingJobDetails,CancellationToken)">
      <example>
This sample shows how to call Train.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringTrainingJobDetails body = new AnalyzeTextAuthoringTrainingJobDetails("<modelLabel>", "<trainingConfigVersion>");
Operation<AnalyzeTextAuthoringTrainingJobResult> operation = client.Train(WaitUntil.Completed, "<projectName>", body);
AnalyzeTextAuthoringTrainingJobResult responseData = operation.Value;
]]></code>
This sample shows how to call Train with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

AnalyzeTextAuthoringTrainingJobDetails body = new AnalyzeTextAuthoringTrainingJobDetails("<modelLabel>", "<trainingConfigVersion>")
{
    EvaluationOptions = new AnalyzeTextAuthoringEvaluationDetails
    {
        Kind = AnalyzeTextAuthoringEvaluationKind.Percentage,
        TrainingSplitPercentage = 1234,
        TestingSplitPercentage = 1234,
    },
    DataGenerationSettings = new AnalyzeTextAuthoringDataGenerationSetting(true, new AnalyzeTextAuthoringDataGenerationConnectionInfo("<resourceId>", "<deploymentName>")),
};
Operation<AnalyzeTextAuthoringTrainingJobResult> operation = client.Train(WaitUntil.Completed, "<projectName>", body);
AnalyzeTextAuthoringTrainingJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="TrainAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call TrainAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
    trainingConfigVersion = "<trainingConfigVersion>",
});
Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call TrainAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
    trainingConfigVersion = "<trainingConfigVersion>",
    evaluationOptions = new
    {
        kind = "percentage",
        trainingSplitPercentage = 1234,
        testingSplitPercentage = 1234,
    },
    dataGenerationSettings = new
    {
        enableDataGeneration = true,
        dataGenerationConnectionInfo = new
        {
            kind = "azureOpenAI",
            resourceId = "<resourceId>",
            deploymentName = "<deploymentName>",
        },
    },
});
Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="Train(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Train and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
    trainingConfigVersion = "<trainingConfigVersion>",
});
Operation<BinaryData> operation = client.Train(WaitUntil.Completed, "<projectName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call Train with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

using RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
    trainingConfigVersion = "<trainingConfigVersion>",
    evaluationOptions = new
    {
        kind = "percentage",
        trainingSplitPercentage = 1234,
        testingSplitPercentage = 1234,
    },
    dataGenerationSettings = new
    {
        enableDataGeneration = true,
        dataGenerationConnectionInfo = new
        {
            kind = "azureOpenAI",
            resourceId = "<resourceId>",
            deploymentName = "<deploymentName>",
        },
    },
});
Operation<BinaryData> operation = client.Train(WaitUntil.Completed, "<projectName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="CancelTrainingJobAsync(WaitUntil,string,string,CancellationToken)">
      <example>
This sample shows how to call CancelTrainingJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation<AnalyzeTextAuthoringTrainingJobResult> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>");
AnalyzeTextAuthoringTrainingJobResult responseData = operation.Value;
]]></code>
This sample shows how to call CancelTrainingJobAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation<AnalyzeTextAuthoringTrainingJobResult> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>");
AnalyzeTextAuthoringTrainingJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="CancelTrainingJob(WaitUntil,string,string,CancellationToken)">
      <example>
This sample shows how to call CancelTrainingJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation<AnalyzeTextAuthoringTrainingJobResult> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>");
AnalyzeTextAuthoringTrainingJobResult responseData = operation.Value;
]]></code>
This sample shows how to call CancelTrainingJob with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation<AnalyzeTextAuthoringTrainingJobResult> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>");
AnalyzeTextAuthoringTrainingJobResult responseData = operation.Value;
]]></code></example>
    </member>
    <member name="CancelTrainingJobAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call CancelTrainingJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation<BinaryData> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>", (RequestContext)null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call CancelTrainingJobAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation<BinaryData> operation = await client.CancelTrainingJobAsync(WaitUntil.Completed, "<projectName>", "<jobId>", (RequestContext)null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
    <member name="CancelTrainingJob(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call CancelTrainingJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation<BinaryData> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>", (RequestContext)null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
]]></code>
This sample shows how to call CancelTrainingJob with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAuthoringProjects client = new TextAnalysisAuthoringClient(endpoint, credential).GetTextAuthoringProjectsClient();

Operation<BinaryData> operation = client.CancelTrainingJob(WaitUntil.Completed, "<projectName>", "<jobId>", (RequestContext)null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("modelLabel").ToString());
Console.WriteLine(result.GetProperty("trainingConfigVersion").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("trainingStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("evaluationStatus").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("estimatedEndDateTime").ToString());
]]></code></example>
    </member>
  </members>
</doc>