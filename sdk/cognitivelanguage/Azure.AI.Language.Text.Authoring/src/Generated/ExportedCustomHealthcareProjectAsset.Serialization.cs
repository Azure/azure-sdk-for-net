// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Language.Text.Authoring
{
    public partial class ExportedCustomHealthcareProjectAsset : IUtf8JsonSerializable, IJsonModel<ExportedCustomHealthcareProjectAsset>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExportedCustomHealthcareProjectAsset>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ExportedCustomHealthcareProjectAsset>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedCustomHealthcareProjectAsset>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExportedCustomHealthcareProjectAsset)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsCollectionDefined(Entities))
            {
                writer.WritePropertyName("entities"u8);
                writer.WriteStartArray();
                foreach (var item in Entities)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Documents))
            {
                writer.WritePropertyName("documents"u8);
                writer.WriteStartArray();
                foreach (var item in Documents)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
        }

        ExportedCustomHealthcareProjectAsset IJsonModel<ExportedCustomHealthcareProjectAsset>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedCustomHealthcareProjectAsset>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExportedCustomHealthcareProjectAsset)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExportedCustomHealthcareProjectAsset(document.RootElement, options);
        }

        internal static ExportedCustomHealthcareProjectAsset DeserializeExportedCustomHealthcareProjectAsset(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<TextAuthoringExportedCompositeEntity> entities = default;
            IList<ExportedCustomHealthcareDocument> documents = default;
            TextAuthoringProjectKind projectKind = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("entities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TextAuthoringExportedCompositeEntity> array = new List<TextAuthoringExportedCompositeEntity>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TextAuthoringExportedCompositeEntity.DeserializeTextAuthoringExportedCompositeEntity(item, options));
                    }
                    entities = array;
                    continue;
                }
                if (property.NameEquals("documents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ExportedCustomHealthcareDocument> array = new List<ExportedCustomHealthcareDocument>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ExportedCustomHealthcareDocument.DeserializeExportedCustomHealthcareDocument(item, options));
                    }
                    documents = array;
                    continue;
                }
                if (property.NameEquals("projectKind"u8))
                {
                    projectKind = new TextAuthoringProjectKind(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ExportedCustomHealthcareProjectAsset(projectKind, serializedAdditionalRawData, entities ?? new ChangeTrackingList<TextAuthoringExportedCompositeEntity>(), documents ?? new ChangeTrackingList<ExportedCustomHealthcareDocument>());
        }

        BinaryData IPersistableModel<ExportedCustomHealthcareProjectAsset>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedCustomHealthcareProjectAsset>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ExportedCustomHealthcareProjectAsset)} does not support writing '{options.Format}' format.");
            }
        }

        ExportedCustomHealthcareProjectAsset IPersistableModel<ExportedCustomHealthcareProjectAsset>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedCustomHealthcareProjectAsset>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeExportedCustomHealthcareProjectAsset(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExportedCustomHealthcareProjectAsset)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ExportedCustomHealthcareProjectAsset>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new ExportedCustomHealthcareProjectAsset FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeExportedCustomHealthcareProjectAsset(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
