// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text.Authoring.Models
{
    /// <summary> The AnalyzeTextAuthoringSentiment. </summary>
    public readonly partial struct AnalyzeTextAuthoringSentiment : IEquatable<AnalyzeTextAuthoringSentiment>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalyzeTextAuthoringSentiment"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalyzeTextAuthoringSentiment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositiveValue = "positive";
        private const string NegativeValue = "negative";
        private const string NeutralValue = "neutral";

        /// <summary> positive. </summary>
        public static AnalyzeTextAuthoringSentiment Positive { get; } = new AnalyzeTextAuthoringSentiment(PositiveValue);
        /// <summary> negative. </summary>
        public static AnalyzeTextAuthoringSentiment Negative { get; } = new AnalyzeTextAuthoringSentiment(NegativeValue);
        /// <summary> neutral. </summary>
        public static AnalyzeTextAuthoringSentiment Neutral { get; } = new AnalyzeTextAuthoringSentiment(NeutralValue);
        /// <summary> Determines if two <see cref="AnalyzeTextAuthoringSentiment"/> values are the same. </summary>
        public static bool operator ==(AnalyzeTextAuthoringSentiment left, AnalyzeTextAuthoringSentiment right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalyzeTextAuthoringSentiment"/> values are not the same. </summary>
        public static bool operator !=(AnalyzeTextAuthoringSentiment left, AnalyzeTextAuthoringSentiment right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AnalyzeTextAuthoringSentiment"/>. </summary>
        public static implicit operator AnalyzeTextAuthoringSentiment(string value) => new AnalyzeTextAuthoringSentiment(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalyzeTextAuthoringSentiment other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalyzeTextAuthoringSentiment other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
