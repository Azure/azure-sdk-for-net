// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Text.Authoring.Models
{
    /// <summary> The ProjectKind. </summary>
    public readonly partial struct ProjectKind : IEquatable<ProjectKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProjectKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProjectKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CustomSingleLabelClassificationValue = "CustomSingleLabelClassification";
        private const string CustomMultiLabelClassificationValue = "CustomMultiLabelClassification";
        private const string CustomEntityRecognitionValue = "CustomEntityRecognition";
        private const string CustomAbstractiveSummarizationValue = "CustomAbstractiveSummarization";
        private const string CustomHealthcareValue = "CustomHealthcare";
        private const string CustomTextSentimentValue = "CustomTextSentiment";

        /// <summary> For building a classification model to classify text using your own data. Each file will have only one label. For example, file 1 is classified as A and file 2 is classified as B. </summary>
        public static ProjectKind CustomSingleLabelClassification { get; } = new ProjectKind(CustomSingleLabelClassificationValue);
        /// <summary> For building a classification model to classify text using your own data. Each file can have one or many labels. For example, file 1 is classified as A, B, and C and file 2 is classified as B and C. </summary>
        public static ProjectKind CustomMultiLabelClassification { get; } = new ProjectKind(CustomMultiLabelClassificationValue);
        /// <summary> For building an extraction model to identify your domain categories using your own data. </summary>
        public static ProjectKind CustomEntityRecognition { get; } = new ProjectKind(CustomEntityRecognitionValue);
        /// <summary> For building an abstractive summarization models which are able to summarize long documents. </summary>
        public static ProjectKind CustomAbstractiveSummarization { get; } = new ProjectKind(CustomAbstractiveSummarizationValue);
        /// <summary> For building an text analytics for health model to identify your health domain data. </summary>
        public static ProjectKind CustomHealthcare { get; } = new ProjectKind(CustomHealthcareValue);
        /// <summary> For building a sentiment models which are able to extract sentiment for long documents. </summary>
        public static ProjectKind CustomTextSentiment { get; } = new ProjectKind(CustomTextSentimentValue);
        /// <summary> Determines if two <see cref="ProjectKind"/> values are the same. </summary>
        public static bool operator ==(ProjectKind left, ProjectKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProjectKind"/> values are not the same. </summary>
        public static bool operator !=(ProjectKind left, ProjectKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProjectKind"/>. </summary>
        public static implicit operator ProjectKind(string value) => new ProjectKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProjectKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProjectKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
