// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Text.Authoring.Models
{
    /// <summary> Represents the options for starting a new training job. </summary>
    public partial class TrainingJobDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TrainingJobDetails"/>. </summary>
        /// <param name="modelLabel"> Represents the output model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelLabel"/> or <paramref name="trainingConfigVersion"/> is null. </exception>
        public TrainingJobDetails(string modelLabel, string trainingConfigVersion)
        {
            Argument.AssertNotNull(modelLabel, nameof(modelLabel));
            Argument.AssertNotNull(trainingConfigVersion, nameof(trainingConfigVersion));

            ModelLabel = modelLabel;
            TrainingConfigVersion = trainingConfigVersion;
        }

        /// <summary> Initializes a new instance of <see cref="TrainingJobDetails"/>. </summary>
        /// <param name="modelLabel"> Represents the output model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="evaluationOptions"> Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage as 80, and testing split percentage as 20. </param>
        /// <param name="dataGenerationSettings"> Represents the settings for using data generation as part of training a custom model. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TrainingJobDetails(string modelLabel, string trainingConfigVersion, EvaluationDetails evaluationOptions, DataGenerationSettings dataGenerationSettings, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ModelLabel = modelLabel;
            TrainingConfigVersion = trainingConfigVersion;
            EvaluationOptions = evaluationOptions;
            DataGenerationSettings = dataGenerationSettings;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TrainingJobDetails"/> for deserialization. </summary>
        internal TrainingJobDetails()
        {
        }

        /// <summary> Represents the output model label. </summary>
        public string ModelLabel { get; }
        /// <summary> Represents training config version. </summary>
        public string TrainingConfigVersion { get; }
        /// <summary> Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage as 80, and testing split percentage as 20. </summary>
        public EvaluationDetails EvaluationOptions { get; set; }
        /// <summary> Represents the settings for using data generation as part of training a custom model. </summary>
        public DataGenerationSettings DataGenerationSettings { get; set; }
    }
}
