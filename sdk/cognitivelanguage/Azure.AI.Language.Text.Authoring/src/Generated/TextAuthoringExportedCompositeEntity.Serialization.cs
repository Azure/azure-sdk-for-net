// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
namespace Azure.AI.Language.Text.Authoring.Models
{
    public partial class DocumentEntityRegionEvaluationResult : IUtf8JsonSerializable, IJsonModel<DocumentEntityRegionEvaluationResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DocumentEntityRegionEvaluationResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DocumentEntityRegionEvaluationResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.AI.Language.Text.Authoring
{
    public partial class TextAuthoringExportedCompositeEntity : IUtf8JsonSerializable, IJsonModel<TextAuthoringExportedCompositeEntity>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TextAuthoringExportedCompositeEntity>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TextAuthoringExportedCompositeEntity>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<DocumentEntityRegionEvaluationResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DocumentEntityRegionEvaluationResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("expectedEntities"u8);
            writer.WriteStartArray();
            foreach (var item in ExpectedEntities)
========
            var format = options.Format == "W" ? ((IPersistableModel<TextAuthoringExportedCompositeEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TextAuthoringExportedCompositeEntity)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(CompositionSetting))
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs
            {
                writer.WritePropertyName("compositionSetting"u8);
                writer.WriteStringValue(CompositionSetting.Value.ToString());
            }
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
            writer.WriteEndArray();
            writer.WritePropertyName("predictedEntities"u8);
            writer.WriteStartArray();
            foreach (var item in PredictedEntities)
========
            if (Optional.IsDefined(List))
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs
            {
                writer.WritePropertyName("list"u8);
                writer.WriteObjectValue(List, options);
            }
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
            writer.WriteEndArray();
            writer.WritePropertyName("regionOffset"u8);
            writer.WriteNumberValue(RegionOffset);
            writer.WritePropertyName("regionLength"u8);
            writer.WriteNumberValue(RegionLength);
========
            if (Optional.IsCollectionDefined(Prebuilts))
            {
                writer.WritePropertyName("prebuilts"u8);
                writer.WriteStartArray();
                foreach (var item in Prebuilts)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Category))
            {
                writer.WritePropertyName("category"u8);
                writer.WriteStringValue(Category);
            }
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
        DocumentEntityRegionEvaluationResult IJsonModel<DocumentEntityRegionEvaluationResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DocumentEntityRegionEvaluationResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DocumentEntityRegionEvaluationResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDocumentEntityRegionEvaluationResult(document.RootElement, options);
        }

        internal static DocumentEntityRegionEvaluationResult DeserializeDocumentEntityRegionEvaluationResult(JsonElement element, ModelReaderWriterOptions options = null)
========
        TextAuthoringExportedCompositeEntity IJsonModel<TextAuthoringExportedCompositeEntity>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TextAuthoringExportedCompositeEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TextAuthoringExportedCompositeEntity)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTextAuthoringExportedCompositeEntity(document.RootElement, options);
        }

        internal static TextAuthoringExportedCompositeEntity DeserializeTextAuthoringExportedCompositeEntity(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
            IReadOnlyList<DocumentEntityLabelEvaluationResult> expectedEntities = default;
            IReadOnlyList<DocumentEntityLabelEvaluationResult> predictedEntities = default;
            int regionOffset = default;
            int regionLength = default;
========
            TextAuthoringCompositionMode? compositionSetting = default;
            TextAuthoringExportedEntityList list = default;
            IList<TextAuthoringExportedPrebuiltEntity> prebuilts = default;
            string category = default;
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
                if (property.NameEquals("expectedEntities"u8))
                {
                    List<DocumentEntityLabelEvaluationResult> array = new List<DocumentEntityLabelEvaluationResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DocumentEntityLabelEvaluationResult.DeserializeDocumentEntityLabelEvaluationResult(item, options));
                    }
                    expectedEntities = array;
                    continue;
                }
                if (property.NameEquals("predictedEntities"u8))
                {
                    List<DocumentEntityLabelEvaluationResult> array = new List<DocumentEntityLabelEvaluationResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DocumentEntityLabelEvaluationResult.DeserializeDocumentEntityLabelEvaluationResult(item, options));
                    }
                    predictedEntities = array;
                    continue;
                }
                if (property.NameEquals("regionOffset"u8))
                {
                    regionOffset = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("regionLength"u8))
                {
                    regionLength = property.Value.GetInt32();
========
                if (property.NameEquals("compositionSetting"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    compositionSetting = new TextAuthoringCompositionMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("list"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    list = TextAuthoringExportedEntityList.DeserializeTextAuthoringExportedEntityList(property.Value, options);
                    continue;
                }
                if (property.NameEquals("prebuilts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TextAuthoringExportedPrebuiltEntity> array = new List<TextAuthoringExportedPrebuiltEntity>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TextAuthoringExportedPrebuiltEntity.DeserializeTextAuthoringExportedPrebuiltEntity(item, options));
                    }
                    prebuilts = array;
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = property.Value.GetString();
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
            return new DocumentEntityRegionEvaluationResult(expectedEntities, predictedEntities, regionOffset, regionLength, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DocumentEntityRegionEvaluationResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DocumentEntityRegionEvaluationResult>)this).GetFormatFromOptions(options) : options.Format;
========
            return new TextAuthoringExportedCompositeEntity(compositionSetting, list, prebuilts ?? new ChangeTrackingList<TextAuthoringExportedPrebuiltEntity>(), category, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TextAuthoringExportedCompositeEntity>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TextAuthoringExportedCompositeEntity>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
                    throw new FormatException($"The model {nameof(DocumentEntityRegionEvaluationResult)} does not support writing '{options.Format}' format.");
            }
        }

        DocumentEntityRegionEvaluationResult IPersistableModel<DocumentEntityRegionEvaluationResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DocumentEntityRegionEvaluationResult>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(TextAuthoringExportedCompositeEntity)} does not support writing '{options.Format}' format.");
            }
        }

        TextAuthoringExportedCompositeEntity IPersistableModel<TextAuthoringExportedCompositeEntity>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TextAuthoringExportedCompositeEntity>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs

            switch (format)
            {
                case "J":
                    {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/DocumentEntityRegionEvaluationResult.Serialization.cs
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDocumentEntityRegionEvaluationResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DocumentEntityRegionEvaluationResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DocumentEntityRegionEvaluationResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DocumentEntityRegionEvaluationResult FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDocumentEntityRegionEvaluationResult(document.RootElement);
========
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTextAuthoringExportedCompositeEntity(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TextAuthoringExportedCompositeEntity)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TextAuthoringExportedCompositeEntity>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TextAuthoringExportedCompositeEntity FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeTextAuthoringExportedCompositeEntity(document.RootElement);
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringExportedCompositeEntity.Serialization.cs
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
