// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.AI.Language.Text.Authoring.Models;

namespace Azure.AI.Language.Text.Authoring
{
    /// <summary> Model factory for models. </summary>
    public static partial class TextAuthoringModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ProjectMetadata"/>. </summary>
        /// <param name="createdDateTime"> Represents the project creation datetime. </param>
        /// <param name="lastModifiedDateTime"> Represents the project last modification datetime. </param>
        /// <param name="lastTrainedDateTime"> Represents the project last training datetime. </param>
        /// <param name="lastDeployedDateTime"> Represents the project last deployment datetime. </param>
        /// <param name="projectKind"> The project kind. </param>
        /// <param name="storageInputContainerName"> The storage container name. </param>
        /// <param name="settings"> The project settings. </param>
        /// <param name="projectName"> The new project name. </param>
        /// <param name="multilingual"> Whether the project would be used for multiple languages or not. </param>
        /// <param name="description"> The project description. </param>
        /// <param name="language"> The project language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Models.ProjectMetadata"/> instance for mocking. </returns>
        public static ProjectMetadata ProjectMetadata(DateTimeOffset createdDateTime = default, DateTimeOffset lastModifiedDateTime = default, DateTimeOffset? lastTrainedDateTime = null, DateTimeOffset? lastDeployedDateTime = null, ProjectKind projectKind = default, string storageInputContainerName = null, ProjectSettings settings = null, string projectName = null, bool? multilingual = null, string description = null, string language = null)
        {
            return new ProjectMetadata(
                createdDateTime,
                lastModifiedDateTime,
                lastTrainedDateTime,
                lastDeployedDateTime,
                projectKind,
                storageInputContainerName,
                settings,
                projectName,
                multilingual,
                description,
                language,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAnalysisAuthoringError"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> A human-readable representation of the error. </param>
        /// <param name="target"> The target of the error. </param>
        /// <param name="details"> An array of details about specific errors that led to this reported error. </param>
        /// <param name="innererror"> An object containing more specific information than the current object about the error. </param>
        /// <returns> A new <see cref="Models.TextAnalysisAuthoringError"/> instance for mocking. </returns>
        public static TextAnalysisAuthoringError TextAnalysisAuthoringError(ErrorCode code = default, string message = null, string target = null, IEnumerable<TextAnalysisAuthoringError> details = null, InnerErrorModel innererror = null)
        {
            details ??= new List<TextAnalysisAuthoringError>();

            return new TextAnalysisAuthoringError(
                code,
                message,
                target,
                details?.ToList(),
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InnerErrorModel"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="details"> Error details. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="innererror"> An object containing more specific information than the current object about the error. </param>
        /// <returns> A new <see cref="Models.InnerErrorModel"/> instance for mocking. </returns>
        public static InnerErrorModel InnerErrorModel(InnerErrorCode code = default, string message = null, IReadOnlyDictionary<string, string> details = null, string target = null, InnerErrorModel innererror = null)
        {
            details ??= new Dictionary<string, string>();

            return new InnerErrorModel(
                code,
                message,
                details,
                target,
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateProjectDetails"/>. </summary>
        /// <param name="projectKind"> The project kind. </param>
        /// <param name="storageInputContainerName"> The storage container name. </param>
        /// <param name="settings"> The project settings. </param>
        /// <param name="projectName"> The new project name. </param>
        /// <param name="multilingual"> Whether the project would be used for multiple languages or not. </param>
        /// <param name="description"> The project description. </param>
        /// <param name="language"> The project language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Models.CreateProjectDetails"/> instance for mocking. </returns>
        public static CreateProjectDetails CreateProjectDetails(ProjectKind projectKind = default, string storageInputContainerName = null, ProjectSettings settings = null, string projectName = null, bool? multilingual = null, string description = null, string language = null)
        {
            return new CreateProjectDetails(
                projectKind,
                storageInputContainerName,
                settings,
                projectName,
                multilingual,
                description,
                language,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProjectDeletionJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ProjectDeletionJobState"/> instance for mocking. </returns>
        public static ProjectDeletionJobState ProjectDeletionJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new ProjectDeletionJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAnalysisAuthoringWarning"/>. </summary>
        /// <param name="code"> The warning code. </param>
        /// <param name="message"> The warning message. </param>
        /// <returns> A new <see cref="Models.TextAnalysisAuthoringWarning"/> instance for mocking. </returns>
        public static TextAnalysisAuthoringWarning TextAnalysisAuthoringWarning(string code = null, string message = null)
        {
            return new TextAnalysisAuthoringWarning(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CopyProjectJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.CopyProjectJobState"/> instance for mocking. </returns>
        public static CopyProjectJobState CopyProjectJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new CopyProjectJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportProjectJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="resultUrl"> The URL to use in order to download the exported project. </param>
        /// <returns> A new <see cref="Models.ExportProjectJobState"/> instance for mocking. </returns>
        public static ExportProjectJobState ExportProjectJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null, string resultUrl = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new ExportProjectJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                resultUrl,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportedProject"/>. </summary>
        /// <param name="projectFileVersion"> The version of the exported file. </param>
        /// <param name="stringIndexType"> Specifies the method used to interpret string offsets. For additional information see https://aka.ms/text-analytics-offsets. </param>
        /// <param name="metadata"> Represents the project metadata. </param>
        /// <param name="assets">
        /// Represents the project assets.
        /// Please note <see cref="ExportedProjectAssets"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExportedCustomAbstractiveSummarizationProjectAssets"/>, <see cref="ExportedCustomEntityRecognitionProjectAssets"/>, <see cref="ExportedCustomHealthcareProjectAssets"/>, <see cref="ExportedCustomMultiLabelClassificationProjectAssets"/>, <see cref="ExportedCustomSingleLabelClassificationProjectAssets"/> and <see cref="ExportedCustomTextSentimentProjectAssets"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ExportedProject"/> instance for mocking. </returns>
        public static ExportedProject ExportedProject(string projectFileVersion = null, StringIndexType stringIndexType = default, CreateProjectDetails metadata = null, ExportedProjectAssets assets = null)
        {
            return new ExportedProject(projectFileVersion, stringIndexType, metadata, assets, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportedCustomAbstractiveSummarizationDocument"/>. </summary>
        /// <param name="summaryLocation"> Represents the summary file location in the blob store container associated with the project. </param>
        /// <param name="location"> The location of the document in the storage. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="dataset"> The dataset for this document. Allowed values are 'Train' and 'Test'. </param>
        /// <returns> A new <see cref="Models.ExportedCustomAbstractiveSummarizationDocument"/> instance for mocking. </returns>
        public static ExportedCustomAbstractiveSummarizationDocument ExportedCustomAbstractiveSummarizationDocument(string summaryLocation = null, string location = null, string language = null, string dataset = null)
        {
            return new ExportedCustomAbstractiveSummarizationDocument(summaryLocation, location, language, dataset, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ImportProjectJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ImportProjectJobState"/> instance for mocking. </returns>
        public static ImportProjectJobState ImportProjectJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new ImportProjectJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TrainingJobDetails"/>. </summary>
        /// <param name="modelLabel"> Represents the output model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="evaluationOptions"> Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage as 80, and testing split percentage as 20. </param>
        /// <param name="dataGenerationSettings"> Represents the settings for using data generation as part of training a custom model. </param>
        /// <returns> A new <see cref="Models.TrainingJobDetails"/> instance for mocking. </returns>
        public static TrainingJobDetails TrainingJobDetails(string modelLabel = null, string trainingConfigVersion = null, EvaluationDetails evaluationOptions = null, DataGenerationSettings dataGenerationSettings = null)
        {
            return new TrainingJobDetails(modelLabel, trainingConfigVersion, evaluationOptions, dataGenerationSettings, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataGenerationConnectionInfo"/>. </summary>
        /// <param name="kind"> Connection type for data generation settings. Currently only supports Azure Open AI. </param>
        /// <param name="resourceId"> Resource ID for the data generation resource. Looks something like "/subscriptions/&lt;SUBSCRIPTION-ID-GUID&gt;/resourceGroups/&lt;RG-NAME&gt;/providers/Microsoft.CognitiveServices/accounts/&lt;AOAI-ACCOUNT-NAME&gt;". </param>
        /// <param name="deploymentName"> Deployment name of model to be used for synthetic data generation. </param>
        /// <returns> A new <see cref="Models.DataGenerationConnectionInfo"/> instance for mocking. </returns>
        public static DataGenerationConnectionInfo DataGenerationConnectionInfo(DataGenerationConnectionInfoKind kind = default, string resourceId = null, string deploymentName = null)
        {
            return new DataGenerationConnectionInfo(kind, resourceId, deploymentName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TrainingJobResult"/>. </summary>
        /// <param name="modelLabel"> Represents trained model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="trainingStatus"> Represents model train status. </param>
        /// <param name="evaluationStatus"> Represents model evaluation status. </param>
        /// <param name="estimatedEndDateTime"> Represents the estimate end date time for training and evaluation. </param>
        /// <returns> A new <see cref="Models.TrainingJobResult"/> instance for mocking. </returns>
        public static TrainingJobResult TrainingJobResult(string modelLabel = null, string trainingConfigVersion = null, SubTrainingJobState trainingStatus = null, SubTrainingJobState evaluationStatus = null, DateTimeOffset? estimatedEndDateTime = null)
        {
            return new TrainingJobResult(
                modelLabel,
                trainingConfigVersion,
                trainingStatus,
                evaluationStatus,
                estimatedEndDateTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SubTrainingJobState"/>. </summary>
        /// <param name="percentComplete"> Represents progress percentage. </param>
        /// <param name="startDateTime"> Represents the start date time. </param>
        /// <param name="endDateTime"> Represents the end date time. </param>
        /// <param name="status"> Represents the status of the sub-operation. </param>
        /// <returns> A new <see cref="Models.SubTrainingJobState"/> instance for mocking. </returns>
        public static SubTrainingJobState SubTrainingJobState(int percentComplete = default, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, JobStatus status = default)
        {
            return new SubTrainingJobState(percentComplete, startDateTime, endDateTime, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TrainingJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents training tasks detailed result. </param>
        /// <returns> A new <see cref="Models.TrainingJobState"/> instance for mocking. </returns>
        public static TrainingJobState TrainingJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null, TrainingJobResult result = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new TrainingJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProjectDeployment"/>. </summary>
        /// <param name="deploymentName"> Represents deployment name. </param>
        /// <param name="modelId"> Represents deployment modelId. </param>
        /// <param name="lastTrainedDateTime"> Represents deployment last trained time. </param>
        /// <param name="lastDeployedDateTime"> Represents deployment last deployed time. </param>
        /// <param name="deploymentExpirationDate"> Represents deployment expiration date in the runtime. </param>
        /// <param name="modelTrainingConfigVersion"> Represents model training config version. </param>
        /// <param name="assignedResources"> Represents the metadata of the assigned Azure resources. </param>
        /// <returns> A new <see cref="Models.ProjectDeployment"/> instance for mocking. </returns>
        public static ProjectDeployment ProjectDeployment(string deploymentName = null, string modelId = null, DateTimeOffset lastTrainedDateTime = default, DateTimeOffset lastDeployedDateTime = default, DateTimeOffset deploymentExpirationDate = default, string modelTrainingConfigVersion = null, IEnumerable<DeploymentResource> assignedResources = null)
        {
            assignedResources ??= new List<DeploymentResource>();

            return new ProjectDeployment(
                deploymentName,
                modelId,
                lastTrainedDateTime,
                lastDeployedDateTime,
                deploymentExpirationDate,
                modelTrainingConfigVersion,
                assignedResources?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentResource"/>. </summary>
        /// <param name="resourceId"> Represents the Azure resource Id. </param>
        /// <param name="region"> Represents the resource region. </param>
        /// <returns> A new <see cref="Models.DeploymentResource"/> instance for mocking. </returns>
        public static DeploymentResource DeploymentResource(string resourceId = null, string region = null)
        {
            return new DeploymentResource(resourceId, region, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateDeploymentDetails"/>. </summary>
        /// <param name="trainedModelLabel"> Represents the trained model label. </param>
        /// <param name="assignedResourceIds"> Represents the resource IDs to be assigned to the deployment. If provided, the deployment will be rolled out to the resources provided here as well as the original resource in which the project is created. </param>
        /// <returns> A new <see cref="Models.CreateDeploymentDetails"/> instance for mocking. </returns>
        public static CreateDeploymentDetails CreateDeploymentDetails(string trainedModelLabel = null, IEnumerable<string> assignedResourceIds = null)
        {
            assignedResourceIds ??= new List<string>();

            return new CreateDeploymentDetails(trainedModelLabel, assignedResourceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.DeploymentJobState"/> instance for mocking. </returns>
        public static DeploymentJobState DeploymentJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new DeploymentJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentDeleteFromResourcesJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.DeploymentDeleteFromResourcesJobState"/> instance for mocking. </returns>
        public static DeploymentDeleteFromResourcesJobState DeploymentDeleteFromResourcesJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new DeploymentDeleteFromResourcesJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SwapDeploymentsJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.SwapDeploymentsJobState"/> instance for mocking. </returns>
        public static SwapDeploymentsJobState SwapDeploymentsJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new SwapDeploymentsJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportedTrainedModel"/>. </summary>
        /// <param name="exportedModelName"> The exported model name. </param>
        /// <param name="modelId"> The model ID. </param>
        /// <param name="lastTrainedDateTime"> The last trained date time of the model. </param>
        /// <param name="lastExportedModelDateTime"> The last exported date time of the model. </param>
        /// <param name="modelExpirationDate"> The model expiration date. </param>
        /// <param name="modelTrainingConfigVersion"> The model training config version. </param>
        /// <returns> A new <see cref="Models.ExportedTrainedModel"/> instance for mocking. </returns>
        public static ExportedTrainedModel ExportedTrainedModel(string exportedModelName = null, string modelId = null, DateTimeOffset lastTrainedDateTime = default, DateTimeOffset lastExportedModelDateTime = default, DateTimeOffset modelExpirationDate = default, string modelTrainingConfigVersion = null)
        {
            return new ExportedTrainedModel(
                exportedModelName,
                modelId,
                lastTrainedDateTime,
                lastExportedModelDateTime,
                modelExpirationDate,
                modelTrainingConfigVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportedModelJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ExportedModelJobState"/> instance for mocking. </returns>
        public static ExportedModelJobState ExportedModelJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new ExportedModelJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportedModelManifest"/>. </summary>
        /// <param name="modelFiles"> The model files belonging to this model. </param>
        /// <returns> A new <see cref="Models.ExportedModelManifest"/> instance for mocking. </returns>
        public static ExportedModelManifest ExportedModelManifest(IEnumerable<ModelFile> modelFiles = null)
        {
            modelFiles ??= new List<ModelFile>();

            return new ExportedModelManifest(modelFiles?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelFile"/>. </summary>
        /// <param name="name"> The name of the file. </param>
        /// <param name="contentUri"> The URI to retrieve the content of the file. </param>
        /// <returns> A new <see cref="Models.ModelFile"/> instance for mocking. </returns>
        public static ModelFile ModelFile(string name = null, Uri contentUri = null)
        {
            return new ModelFile(name, contentUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProjectTrainedModel"/>. </summary>
        /// <param name="label"> The trained model label. </param>
        /// <param name="modelId"> The model ID. </param>
        /// <param name="lastTrainedDateTime"> The last trained date time of the model. </param>
        /// <param name="lastTrainingDurationInSeconds"> The duration of the model's last training request in seconds. </param>
        /// <param name="modelExpirationDate"> The model expiration date. </param>
        /// <param name="modelTrainingConfigVersion"> The model training config version. </param>
        /// <param name="hasSnapshot"> The flag to indicate if the trained model has a snapshot ready. </param>
        /// <returns> A new <see cref="Models.ProjectTrainedModel"/> instance for mocking. </returns>
        public static ProjectTrainedModel ProjectTrainedModel(string label = null, string modelId = null, DateTimeOffset lastTrainedDateTime = default, int lastTrainingDurationInSeconds = default, DateTimeOffset modelExpirationDate = default, string modelTrainingConfigVersion = null, bool hasSnapshot = default)
        {
            return new ProjectTrainedModel(
                label,
                modelId,
                lastTrainedDateTime,
                lastTrainingDurationInSeconds,
                modelExpirationDate,
                modelTrainingConfigVersion,
                hasSnapshot,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EvaluationJobResult"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="modelLabel"> Represents trained model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="percentComplete"> Represents progress percentage. </param>
        /// <returns> A new <see cref="Models.EvaluationJobResult"/> instance for mocking. </returns>
        public static EvaluationJobResult EvaluationJobResult(EvaluationDetails evaluationOptions = null, string modelLabel = null, string trainingConfigVersion = null, int percentComplete = default)
        {
            return new EvaluationJobResult(evaluationOptions, modelLabel, trainingConfigVersion, percentComplete, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EvaluationJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents evaluation task detailed result. </param>
        /// <returns> A new <see cref="Models.EvaluationJobState"/> instance for mocking. </returns>
        public static EvaluationJobState EvaluationJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null, EvaluationJobResult result = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new EvaluationJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LoadSnapshotJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.LoadSnapshotJobState"/> instance for mocking. </returns>
        public static LoadSnapshotJobState LoadSnapshotJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new LoadSnapshotJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentEvaluationResult"/>. </summary>
        /// <param name="projectKind"> Represents the project kind. </param>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Models.DocumentEvaluationResult"/> instance for mocking. </returns>
        public static DocumentEvaluationResult DocumentEvaluationResult(string projectKind = null, string location = null, string language = null)
        {
            return new UnknownDocumentEvaluationResult(projectKind == null ? default : new ProjectKind(projectKind), location, language, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomEntityRecognitionDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customEntityRecognitionResult"> Represents the evaluation prediction for entity recognition. </param>
        /// <returns> A new <see cref="Models.CustomEntityRecognitionDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomEntityRecognitionDocumentEvaluationResult CustomEntityRecognitionDocumentEvaluationResult(string location = null, string language = null, DocumentEntityRecognitionEvaluationResult customEntityRecognitionResult = null)
        {
            return new CustomEntityRecognitionDocumentEvaluationResult(ProjectKind.CustomEntityRecognition, location, language, serializedAdditionalRawData: null, customEntityRecognitionResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentEntityRecognitionEvaluationResult"/>. </summary>
        /// <param name="entities"> Represents the document labelled entities. </param>
        /// <returns> A new <see cref="Models.DocumentEntityRecognitionEvaluationResult"/> instance for mocking. </returns>
        public static DocumentEntityRecognitionEvaluationResult DocumentEntityRecognitionEvaluationResult(IEnumerable<DocumentEntityRegionEvaluationResult> entities = null)
        {
            entities ??= new List<DocumentEntityRegionEvaluationResult>();

            return new DocumentEntityRecognitionEvaluationResult(entities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentEntityRegionEvaluationResult"/>. </summary>
        /// <param name="expectedEntities"> Represents the region's expected entity labels. </param>
        /// <param name="predictedEntities"> Represents the region's predicted entity labels. </param>
        /// <param name="regionOffset"> Represents the region offset. </param>
        /// <param name="regionLength"> Represents the region length. </param>
        /// <returns> A new <see cref="Models.DocumentEntityRegionEvaluationResult"/> instance for mocking. </returns>
        public static DocumentEntityRegionEvaluationResult DocumentEntityRegionEvaluationResult(IEnumerable<DocumentEntityLabelEvaluationResult> expectedEntities = null, IEnumerable<DocumentEntityLabelEvaluationResult> predictedEntities = null, int regionOffset = default, int regionLength = default)
        {
            expectedEntities ??= new List<DocumentEntityLabelEvaluationResult>();
            predictedEntities ??= new List<DocumentEntityLabelEvaluationResult>();

            return new DocumentEntityRegionEvaluationResult(expectedEntities?.ToList(), predictedEntities?.ToList(), regionOffset, regionLength, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentEntityLabelEvaluationResult"/>. </summary>
        /// <param name="category"> Represents the entity category. </param>
        /// <param name="offset"> Represents the entity offset index relative to the original text. </param>
        /// <param name="length"> Represents the entity length. </param>
        /// <returns> A new <see cref="Models.DocumentEntityLabelEvaluationResult"/> instance for mocking. </returns>
        public static DocumentEntityLabelEvaluationResult DocumentEntityLabelEvaluationResult(string category = null, int offset = default, int length = default)
        {
            return new DocumentEntityLabelEvaluationResult(category, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomHealthcareDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customHealthcareResult"> Represents the evaluation prediction for entity recognition. </param>
        /// <returns> A new <see cref="Models.CustomHealthcareDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomHealthcareDocumentEvaluationResult CustomHealthcareDocumentEvaluationResult(string location = null, string language = null, DocumentHealthcareEvaluationResult customHealthcareResult = null)
        {
            return new CustomHealthcareDocumentEvaluationResult(ProjectKind.CustomHealthcare, location, language, serializedAdditionalRawData: null, customHealthcareResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentHealthcareEvaluationResult"/>. </summary>
        /// <param name="entities"> Represents the document labelled entities. </param>
        /// <returns> A new <see cref="Models.DocumentHealthcareEvaluationResult"/> instance for mocking. </returns>
        public static DocumentHealthcareEvaluationResult DocumentHealthcareEvaluationResult(IEnumerable<DocumentEntityRegionEvaluationResult> entities = null)
        {
            entities ??= new List<DocumentEntityRegionEvaluationResult>();

            return new DocumentHealthcareEvaluationResult(entities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomMultiLabelClassificationDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customMultiLabelClassificationResult"> Represents the evaluation prediction for multi label classification. </param>
        /// <returns> A new <see cref="Models.CustomMultiLabelClassificationDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomMultiLabelClassificationDocumentEvaluationResult CustomMultiLabelClassificationDocumentEvaluationResult(string location = null, string language = null, DocumentMultiLabelClassificationEvaluationResult customMultiLabelClassificationResult = null)
        {
            return new CustomMultiLabelClassificationDocumentEvaluationResult(ProjectKind.CustomMultiLabelClassification, location, language, serializedAdditionalRawData: null, customMultiLabelClassificationResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentMultiLabelClassificationEvaluationResult"/>. </summary>
        /// <param name="expectedClasses"> Represents the document's expected classes. </param>
        /// <param name="predictedClasses"> Represents the document's predicted classes. </param>
        /// <returns> A new <see cref="Models.DocumentMultiLabelClassificationEvaluationResult"/> instance for mocking. </returns>
        public static DocumentMultiLabelClassificationEvaluationResult DocumentMultiLabelClassificationEvaluationResult(IEnumerable<string> expectedClasses = null, IEnumerable<string> predictedClasses = null)
        {
            expectedClasses ??= new List<string>();
            predictedClasses ??= new List<string>();

            return new DocumentMultiLabelClassificationEvaluationResult(expectedClasses?.ToList(), predictedClasses?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomSingleLabelClassificationDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customSingleLabelClassificationResult"> Represents the evaluation prediction for single label classification. </param>
        /// <returns> A new <see cref="Models.CustomSingleLabelClassificationDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomSingleLabelClassificationDocumentEvaluationResult CustomSingleLabelClassificationDocumentEvaluationResult(string location = null, string language = null, DocumentSingleLabelClassificationEvaluationResult customSingleLabelClassificationResult = null)
        {
            return new CustomSingleLabelClassificationDocumentEvaluationResult(ProjectKind.CustomSingleLabelClassification, location, language, serializedAdditionalRawData: null, customSingleLabelClassificationResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentSingleLabelClassificationEvaluationResult"/>. </summary>
        /// <param name="expectedClass"> Represents the document's expected class. </param>
        /// <param name="predictedClass"> Represents the document's predicted class. </param>
        /// <returns> A new <see cref="Models.DocumentSingleLabelClassificationEvaluationResult"/> instance for mocking. </returns>
        public static DocumentSingleLabelClassificationEvaluationResult DocumentSingleLabelClassificationEvaluationResult(string expectedClass = null, string predictedClass = null)
        {
            return new DocumentSingleLabelClassificationEvaluationResult(expectedClass, predictedClass, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomTextSentimentDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customTextSentimentResult"> Represents the evaluation prediction for text sentiment. </param>
        /// <returns> A new <see cref="Models.CustomTextSentimentDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomTextSentimentDocumentEvaluationResult CustomTextSentimentDocumentEvaluationResult(string location = null, string language = null, DocumentTextSentimentEvaluationResult customTextSentimentResult = null)
        {
            return new CustomTextSentimentDocumentEvaluationResult(ProjectKind.CustomTextSentiment, location, language, serializedAdditionalRawData: null, customTextSentimentResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentTextSentimentEvaluationResult"/>. </summary>
        /// <param name="expectedSentimentSpans"> Represents the document's expected sentiment labels. </param>
        /// <param name="predictedSentimentSpans"> Represents the document's predicted sentiment labels. </param>
        /// <returns> A new <see cref="Models.DocumentTextSentimentEvaluationResult"/> instance for mocking. </returns>
        public static DocumentTextSentimentEvaluationResult DocumentTextSentimentEvaluationResult(IEnumerable<DocumentSentimentLabelEvaluationResult> expectedSentimentSpans = null, IEnumerable<DocumentSentimentLabelEvaluationResult> predictedSentimentSpans = null)
        {
            expectedSentimentSpans ??= new List<DocumentSentimentLabelEvaluationResult>();
            predictedSentimentSpans ??= new List<DocumentSentimentLabelEvaluationResult>();

            return new DocumentTextSentimentEvaluationResult(expectedSentimentSpans?.ToList(), predictedSentimentSpans?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentSentimentLabelEvaluationResult"/>. </summary>
        /// <param name="category"> Represents the sentiment category. </param>
        /// <param name="offset"> Represents the sentiment offset index relative to the original text. </param>
        /// <param name="length"> Represents the sentiment length. </param>
        /// <returns> A new <see cref="Models.DocumentSentimentLabelEvaluationResult"/> instance for mocking. </returns>
        public static DocumentSentimentLabelEvaluationResult DocumentSentimentLabelEvaluationResult(TextAnalysisAuthoringSentiment category = default, int offset = default, int length = default)
        {
            return new DocumentSentimentLabelEvaluationResult(category, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EvaluationSummary"/>. </summary>
        /// <param name="projectKind"> Represents the project type that the evaluation ran on. </param>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <returns> A new <see cref="Models.EvaluationSummary"/> instance for mocking. </returns>
        public static EvaluationSummary EvaluationSummary(string projectKind = null, EvaluationDetails evaluationOptions = null)
        {
            return new UnknownEvaluationSummary(projectKind == null ? default : new ProjectKind(projectKind), evaluationOptions, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomEntityRecognitionEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customEntityRecognitionEvaluation"> Contains the data related to extraction evaluation. </param>
        /// <returns> A new <see cref="Models.CustomEntityRecognitionEvaluationSummary"/> instance for mocking. </returns>
        public static CustomEntityRecognitionEvaluationSummary CustomEntityRecognitionEvaluationSummary(EvaluationDetails evaluationOptions = null, EntityRecognitionEvaluationSummary customEntityRecognitionEvaluation = null)
        {
            return new CustomEntityRecognitionEvaluationSummary(ProjectKind.CustomEntityRecognition, evaluationOptions, serializedAdditionalRawData: null, customEntityRecognitionEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EntityRecognitionEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix"> Represents the confusion matrix between two entities (the two entities can be the same). The matrix is between the entity that was labelled and the entity that was predicted. </param>
        /// <param name="entities"> Represents the entities evaluation. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.EntityRecognitionEvaluationSummary"/> instance for mocking. </returns>
        public static EntityRecognitionEvaluationSummary EntityRecognitionEvaluationSummary(ConfusionMatrix confusionMatrix = null, IReadOnlyDictionary<string, EntityEvaluationSummary> entities = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            entities ??= new Dictionary<string, EntityEvaluationSummary>();

            return new EntityRecognitionEvaluationSummary(
                confusionMatrix,
                entities,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConfusionMatrix"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ConfusionMatrix"/> instance for mocking. </returns>
        public static ConfusionMatrix ConfusionMatrix(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ConfusionMatrix(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConfusionMatrixRow"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ConfusionMatrixRow"/> instance for mocking. </returns>
        public static ConfusionMatrixRow ConfusionMatrixRow(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ConfusionMatrixRow(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConfusionMatrixCell"/>. </summary>
        /// <param name="normalizedValue"> Represents normalized value in percentages. </param>
        /// <param name="rawValue"> Represents raw value. </param>
        /// <returns> A new <see cref="Models.ConfusionMatrixCell"/> instance for mocking. </returns>
        public static ConfusionMatrixCell ConfusionMatrixCell(float normalizedValue = default, float rawValue = default)
        {
            return new ConfusionMatrixCell(normalizedValue, rawValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EntityEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.EntityEvaluationSummary"/> instance for mocking. </returns>
        public static EntityEvaluationSummary EntityEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new EntityEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomHealthcareEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customHealthcareEvaluation"> Contains the data related to health care evaluation. </param>
        /// <returns> A new <see cref="Models.CustomHealthcareEvaluationSummary"/> instance for mocking. </returns>
        public static CustomHealthcareEvaluationSummary CustomHealthcareEvaluationSummary(EvaluationDetails evaluationOptions = null, EntityRecognitionEvaluationSummary customHealthcareEvaluation = null)
        {
            return new CustomHealthcareEvaluationSummary(ProjectKind.CustomHealthcare, evaluationOptions, serializedAdditionalRawData: null, customHealthcareEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomMultiLabelClassificationEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customMultiLabelClassificationEvaluation"> Contains the data related to multi label classification evaluation. </param>
        /// <returns> A new <see cref="Models.CustomMultiLabelClassificationEvaluationSummary"/> instance for mocking. </returns>
        public static CustomMultiLabelClassificationEvaluationSummary CustomMultiLabelClassificationEvaluationSummary(EvaluationDetails evaluationOptions = null, MultiLabelClassificationEvaluationSummary customMultiLabelClassificationEvaluation = null)
        {
            return new CustomMultiLabelClassificationEvaluationSummary(ProjectKind.CustomMultiLabelClassification, evaluationOptions, serializedAdditionalRawData: null, customMultiLabelClassificationEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MultiLabelClassificationEvaluationSummary"/>. </summary>
        /// <param name="classes"> Represents the classes evaluation. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.MultiLabelClassificationEvaluationSummary"/> instance for mocking. </returns>
        public static MultiLabelClassificationEvaluationSummary MultiLabelClassificationEvaluationSummary(IReadOnlyDictionary<string, MultiLabelClassEvaluationSummary> classes = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            classes ??= new Dictionary<string, MultiLabelClassEvaluationSummary>();

            return new MultiLabelClassificationEvaluationSummary(
                classes,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MultiLabelClassEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.MultiLabelClassEvaluationSummary"/> instance for mocking. </returns>
        public static MultiLabelClassEvaluationSummary MultiLabelClassEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new MultiLabelClassEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomSingleLabelClassificationEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customSingleLabelClassificationEvaluation"> Contains the data related to single label classification evaluation. </param>
        /// <returns> A new <see cref="Models.CustomSingleLabelClassificationEvaluationSummary"/> instance for mocking. </returns>
        public static CustomSingleLabelClassificationEvaluationSummary CustomSingleLabelClassificationEvaluationSummary(EvaluationDetails evaluationOptions = null, SingleLabelClassificationEvaluationSummary customSingleLabelClassificationEvaluation = null)
        {
            return new CustomSingleLabelClassificationEvaluationSummary(ProjectKind.CustomSingleLabelClassification, evaluationOptions, serializedAdditionalRawData: null, customSingleLabelClassificationEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SingleLabelClassificationEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix"> Represents the confusion matrix between two classes (the two classes can be the same). The matrix is between the class that was labelled and the class that was predicted. </param>
        /// <param name="classes"> Represents the classes evaluation. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.SingleLabelClassificationEvaluationSummary"/> instance for mocking. </returns>
        public static SingleLabelClassificationEvaluationSummary SingleLabelClassificationEvaluationSummary(ConfusionMatrix confusionMatrix = null, IReadOnlyDictionary<string, SingleLabelClassEvaluationSummary> classes = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            classes ??= new Dictionary<string, SingleLabelClassEvaluationSummary>();

            return new SingleLabelClassificationEvaluationSummary(
                confusionMatrix,
                classes,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SingleLabelClassEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.SingleLabelClassEvaluationSummary"/> instance for mocking. </returns>
        public static SingleLabelClassEvaluationSummary SingleLabelClassEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new SingleLabelClassEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomTextSentimentEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customTextSentimentEvaluation"> Contains the data related to custom sentiment evaluation. </param>
        /// <returns> A new <see cref="Models.CustomTextSentimentEvaluationSummary"/> instance for mocking. </returns>
        public static CustomTextSentimentEvaluationSummary CustomTextSentimentEvaluationSummary(EvaluationDetails evaluationOptions = null, TextSentimentEvaluationSummary customTextSentimentEvaluation = null)
        {
            return new CustomTextSentimentEvaluationSummary(ProjectKind.CustomTextSentiment, evaluationOptions, serializedAdditionalRawData: null, customTextSentimentEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextSentimentEvaluationSummary"/>. </summary>
        /// <param name="spanSentimentsEvaluation"> Represents evaluation of span level sentiments. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.TextSentimentEvaluationSummary"/> instance for mocking. </returns>
        public static TextSentimentEvaluationSummary TextSentimentEvaluationSummary(SpanSentimentEvaluationSummary spanSentimentsEvaluation = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            return new TextSentimentEvaluationSummary(
                spanSentimentsEvaluation,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpanSentimentEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix"> Represents the confusion matrix between two sentiments (the two sentiments can be the same). The matrix is between the sentiment that was labelled and the sentiment that was predicted. </param>
        /// <param name="sentiments"> Represents the sentiment evaluation. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.SpanSentimentEvaluationSummary"/> instance for mocking. </returns>
        public static SpanSentimentEvaluationSummary SpanSentimentEvaluationSummary(ConfusionMatrix confusionMatrix = null, IReadOnlyDictionary<string, SentimentEvaluationSummary> sentiments = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            sentiments ??= new Dictionary<string, SentimentEvaluationSummary>();

            return new SpanSentimentEvaluationSummary(
                confusionMatrix,
                sentiments,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SentimentEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.SentimentEvaluationSummary"/> instance for mocking. </returns>
        public static SentimentEvaluationSummary SentimentEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new SentimentEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssignedDeploymentResource"/>. </summary>
        /// <param name="azureResourceId"> The resource ID. </param>
        /// <param name="region"> The resource region. </param>
        /// <returns> A new <see cref="Models.AssignedDeploymentResource"/> instance for mocking. </returns>
        public static AssignedDeploymentResource AssignedDeploymentResource(string azureResourceId = null, string region = null)
        {
            return new AssignedDeploymentResource(azureResourceId, region, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssignDeploymentResourcesJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.AssignDeploymentResourcesJobState"/> instance for mocking. </returns>
        public static AssignDeploymentResourcesJobState AssignDeploymentResourcesJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new AssignDeploymentResourcesJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UnassignDeploymentResourcesJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.UnassignDeploymentResourcesJobState"/> instance for mocking. </returns>
        public static UnassignDeploymentResourcesJobState UnassignDeploymentResourcesJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, JobStatus status = default, IEnumerable<TextAnalysisAuthoringWarning> warnings = null, IEnumerable<TextAnalysisAuthoringError> errors = null)
        {
            warnings ??= new List<TextAnalysisAuthoringWarning>();
            errors ??= new List<TextAnalysisAuthoringError>();

            return new UnassignDeploymentResourcesJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssignedProjectDeploymentsMetadata"/>. </summary>
        /// <param name="projectName"> Represents the project name. </param>
        /// <param name="deploymentsMetadata"> Represents the resource region. </param>
        /// <returns> A new <see cref="Models.AssignedProjectDeploymentsMetadata"/> instance for mocking. </returns>
        public static AssignedProjectDeploymentsMetadata AssignedProjectDeploymentsMetadata(string projectName = null, IEnumerable<AssignedProjectDeploymentMetadata> deploymentsMetadata = null)
        {
            deploymentsMetadata ??= new List<AssignedProjectDeploymentMetadata>();

            return new AssignedProjectDeploymentsMetadata(projectName, deploymentsMetadata?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssignedProjectDeploymentMetadata"/>. </summary>
        /// <param name="deploymentName"> Represents the deployment name. </param>
        /// <param name="lastDeployedDateTime"> Represents deployment last deployed time. </param>
        /// <param name="deploymentExpirationDate"> Represents deployment expiration date in the runtime. </param>
        /// <returns> A new <see cref="Models.AssignedProjectDeploymentMetadata"/> instance for mocking. </returns>
        public static AssignedProjectDeploymentMetadata AssignedProjectDeploymentMetadata(string deploymentName = null, DateTimeOffset lastDeployedDateTime = default, DateTimeOffset deploymentExpirationDate = default)
        {
            return new AssignedProjectDeploymentMetadata(deploymentName, lastDeployedDateTime, deploymentExpirationDate, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SupportedLanguage"/>. </summary>
        /// <param name="languageName"> The language name. </param>
        /// <param name="languageCode"> The language code. This is BCP-47 representation of a language. For example, "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Models.SupportedLanguage"/> instance for mocking. </returns>
        public static SupportedLanguage SupportedLanguage(string languageName = null, string languageCode = null)
        {
            return new SupportedLanguage(languageName, languageCode, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrebuiltEntity"/>. </summary>
        /// <param name="category"> The prebuilt entity category. </param>
        /// <param name="description"> The description. </param>
        /// <param name="examples"> English examples for the entity. </param>
        /// <returns> A new <see cref="Models.PrebuiltEntity"/> instance for mocking. </returns>
        public static PrebuiltEntity PrebuiltEntity(string category = null, string description = null, string examples = null)
        {
            return new PrebuiltEntity(category, description, examples, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TrainingConfigVersion"/>. </summary>
        /// <param name="trainingConfigVersionProperty"> Represents the version of the config. </param>
        /// <param name="modelExpirationDate"> Represents the training config version expiration date. </param>
        /// <returns> A new <see cref="Models.TrainingConfigVersion"/> instance for mocking. </returns>
        public static TrainingConfigVersion TrainingConfigVersion(string trainingConfigVersionProperty = null, DateTimeOffset modelExpirationDate = default)
        {
            return new TrainingConfigVersion(trainingConfigVersionProperty, modelExpirationDate, serializedAdditionalRawData: null);
        }
    }
}
