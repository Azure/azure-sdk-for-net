// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Conversations.Authoring/src/Generated/Models/ExportedEntityRegexExpression.Serialization.cs
namespace Azure.AI.Language.Conversations.Authoring.Models
{
    public partial class ExportedEntityRegexExpression : IUtf8JsonSerializable, IJsonModel<ExportedEntityRegexExpression>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExportedEntityRegexExpression>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ExportedEntityRegexExpression>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.AI.Language.Text.Authoring
{
    public partial class TextAuthoringSubTrainingState : IUtf8JsonSerializable, IJsonModel<TextAuthoringSubTrainingState>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TextAuthoringSubTrainingState>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TextAuthoringSubTrainingState>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringSubTrainingState.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Conversations.Authoring/src/Generated/Models/ExportedEntityRegexExpression.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<ExportedEntityRegexExpression>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExportedEntityRegexExpression)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(RegexKey))
            {
                writer.WritePropertyName("regexKey"u8);
                writer.WriteStringValue(RegexKey);
            }
            if (Optional.IsDefined(Language))
            {
                writer.WritePropertyName("language"u8);
                writer.WriteStringValue(Language);
            }
            if (Optional.IsDefined(RegexPattern))
            {
                writer.WritePropertyName("regexPattern"u8);
                writer.WriteStringValue(RegexPattern);
========
            var format = options.Format == "W" ? ((IPersistableModel<TextAuthoringSubTrainingState>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TextAuthoringSubTrainingState)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("percentComplete"u8);
            writer.WriteNumberValue(PercentComplete);
            if (Optional.IsDefined(StartedOn))
            {
                writer.WritePropertyName("startDateTime"u8);
                writer.WriteStringValue(StartedOn.Value, "O");
            }
            if (Optional.IsDefined(EndedOn))
            {
                writer.WritePropertyName("endDateTime"u8);
                writer.WriteStringValue(EndedOn.Value, "O");
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringSubTrainingState.Serialization.cs
            }
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Conversations.Authoring/src/Generated/Models/ExportedEntityRegexExpression.Serialization.cs
        ExportedEntityRegexExpression IJsonModel<ExportedEntityRegexExpression>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedEntityRegexExpression>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExportedEntityRegexExpression)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExportedEntityRegexExpression(document.RootElement, options);
        }

        internal static ExportedEntityRegexExpression DeserializeExportedEntityRegexExpression(JsonElement element, ModelReaderWriterOptions options = null)
========
        TextAuthoringSubTrainingState IJsonModel<TextAuthoringSubTrainingState>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TextAuthoringSubTrainingState>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TextAuthoringSubTrainingState)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTextAuthoringSubTrainingState(document.RootElement, options);
        }

        internal static TextAuthoringSubTrainingState DeserializeTextAuthoringSubTrainingState(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringSubTrainingState.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Conversations.Authoring/src/Generated/Models/ExportedEntityRegexExpression.Serialization.cs
            string regexKey = default;
            string language = default;
            string regexPattern = default;
========
            int percentComplete = default;
            DateTimeOffset? startDateTime = default;
            DateTimeOffset? endDateTime = default;
            TextAuthoringOperationStatus status = default;
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringSubTrainingState.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Conversations.Authoring/src/Generated/Models/ExportedEntityRegexExpression.Serialization.cs
                if (property.NameEquals("regexKey"u8))
                {
                    regexKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("language"u8))
                {
                    language = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("regexPattern"u8))
                {
                    regexPattern = property.Value.GetString();
========
                if (property.NameEquals("percentComplete"u8))
                {
                    percentComplete = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("startDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = new TextAuthoringOperationStatus(property.Value.GetString());
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringSubTrainingState.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Conversations.Authoring/src/Generated/Models/ExportedEntityRegexExpression.Serialization.cs
            return new ExportedEntityRegexExpression(regexKey, language, regexPattern, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ExportedEntityRegexExpression>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedEntityRegexExpression>)this).GetFormatFromOptions(options) : options.Format;
========
            return new TextAuthoringSubTrainingState(percentComplete, startDateTime, endDateTime, status, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TextAuthoringSubTrainingState>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TextAuthoringSubTrainingState>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringSubTrainingState.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Conversations.Authoring/src/Generated/Models/ExportedEntityRegexExpression.Serialization.cs
                    throw new FormatException($"The model {nameof(ExportedEntityRegexExpression)} does not support writing '{options.Format}' format.");
            }
        }

        ExportedEntityRegexExpression IPersistableModel<ExportedEntityRegexExpression>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedEntityRegexExpression>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(TextAuthoringSubTrainingState)} does not support writing '{options.Format}' format.");
            }
        }

        TextAuthoringSubTrainingState IPersistableModel<TextAuthoringSubTrainingState>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TextAuthoringSubTrainingState>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringSubTrainingState.Serialization.cs

            switch (format)
            {
                case "J":
                    {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Conversations.Authoring/src/Generated/Models/ExportedEntityRegexExpression.Serialization.cs
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeExportedEntityRegexExpression(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExportedEntityRegexExpression)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ExportedEntityRegexExpression>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ExportedEntityRegexExpression FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeExportedEntityRegexExpression(document.RootElement);
========
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTextAuthoringSubTrainingState(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TextAuthoringSubTrainingState)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TextAuthoringSubTrainingState>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TextAuthoringSubTrainingState FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeTextAuthoringSubTrainingState(document.RootElement);
>>>>>>>> main:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/TextAuthoringSubTrainingState.Serialization.cs
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
