<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="AnalyzeTextAsync(AnalyzeTextInput,bool?,CancellationToken)">
      <example>
This sample shows how to call AnalyzeTextAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput();
Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
]]></code>
This sample shows how to call AnalyzeTextAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput
{
    TextInput = new MultiLanguageTextInput
    {
        MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
        {
            Language = "<language>",
        }},
    },
    ActionContent = new DynamicClassificationActionContent(new string[] { "<categories>" })
    {
        LoggingOptOut = true,
        ModelVersion = "<modelVersion>",
        ClassificationType = ClassificationType.Multi,
    },
};
Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput, showStatistics: true);
]]></code></example>
    </member>
    <member name="AnalyzeText(AnalyzeTextInput,bool?,CancellationToken)">
      <example>
This sample shows how to call AnalyzeText.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput();
Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
]]></code>
This sample shows how to call AnalyzeText with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput
{
    TextInput = new MultiLanguageTextInput
    {
        MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
        {
            Language = "<language>",
        }},
    },
    ActionContent = new DynamicClassificationActionContent(new string[] { "<categories>" })
    {
        LoggingOptOut = true,
        ModelVersion = "<modelVersion>",
        ClassificationType = ClassificationType.Multi,
    },
};
Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput, showStatistics: true);
]]></code></example>
    </member>
    <member name="AnalyzeTextAsync(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call AnalyzeTextAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    kind = "DynamicClassification",
});
Response response = await client.AnalyzeTextAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeTextAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    kind = "DynamicClassification",
    analysisInput = new
    {
        documents = new object[]
        {
            new
            {
                id = "<id>",
                text = "<text>",
                language = "<language>",
            }
        },
    },
    parameters = new
    {
        loggingOptOut = true,
        modelVersion = "<modelVersion>",
        classificationType = "Multi",
        categories = new object[]
        {
            "<categories>"
        },
    },
});
Response response = await client.AnalyzeTextAsync(content, showStatistics: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeText(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call AnalyzeText and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    kind = "DynamicClassification",
});
Response response = client.AnalyzeText(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeText with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    kind = "DynamicClassification",
    analysisInput = new
    {
        documents = new object[]
        {
            new
            {
                id = "<id>",
                text = "<text>",
                language = "<language>",
            }
        },
    },
    parameters = new
    {
        loggingOptOut = true,
        modelVersion = "<modelVersion>",
        classificationType = "Multi",
        categories = new object[]
        {
            "<categories>"
        },
    },
});
Response response = client.AnalyzeText(content, showStatistics: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeTextOperationStatusAsync(Guid,bool?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call AnalyzeTextOperationStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Response<AnalyzeTextOperationState> response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeTextOperationStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Response<AnalyzeTextOperationState> response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
]]></code></example>
    </member>
    <member name="AnalyzeTextOperationStatus(Guid,bool?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call AnalyzeTextOperationStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Response<AnalyzeTextOperationState> response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeTextOperationStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Response<AnalyzeTextOperationState> response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
]]></code></example>
    </member>
    <member name="AnalyzeTextOperationStatusAsync(Guid,bool?,int?,int?,RequestContext)">
      <example>
This sample shows how to call AnalyzeTextOperationStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Response response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code>
This sample shows how to call AnalyzeTextOperationStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Response response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeTextOperationStatus(Guid,bool?,int?,int?,RequestContext)">
      <example>
This sample shows how to call AnalyzeTextOperationStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Response response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code>
This sample shows how to call AnalyzeTextOperationStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Response response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeTextSubmitOperationAsync(WaitUntil,MultiLanguageTextInput,IEnumerable{AnalyzeTextOperationAction},string,string,CancellationToken)">
      <example>
This sample shows how to call AnalyzeTextSubmitOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

MultiLanguageTextInput textInput = new MultiLanguageTextInput();
Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
{
    new CustomEntitiesOperationAction()
});
]]></code>
This sample shows how to call AnalyzeTextSubmitOperationAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

MultiLanguageTextInput textInput = new MultiLanguageTextInput
{
    MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
    {
        Language = "<language>",
    }},
};
Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
{
    new CustomEntitiesOperationAction
    {
        ActionContent = new CustomEntitiesActionContent("<projectName>", "<deploymentName>")
        {
            LoggingOptOut = true,
            StringIndexType = StringIndexType.TextElementsV8,
        },
        Name = "<taskName>",
    }
}, displayName: "<displayName>", defaultLanguage: "<defaultLanguage>");
]]></code></example>
    </member>
    <member name="AnalyzeTextSubmitOperation(WaitUntil,MultiLanguageTextInput,IEnumerable{AnalyzeTextOperationAction},string,string,CancellationToken)">
      <example>
This sample shows how to call AnalyzeTextSubmitOperation.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

MultiLanguageTextInput textInput = new MultiLanguageTextInput();
Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
{
    new CustomEntitiesOperationAction()
});
]]></code>
This sample shows how to call AnalyzeTextSubmitOperation with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

MultiLanguageTextInput textInput = new MultiLanguageTextInput
{
    MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
    {
        Language = "<language>",
    }},
};
Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
{
    new CustomEntitiesOperationAction
    {
        ActionContent = new CustomEntitiesActionContent("<projectName>", "<deploymentName>")
        {
            LoggingOptOut = true,
            StringIndexType = StringIndexType.TextElementsV8,
        },
        Name = "<taskName>",
    }
}, displayName: "<displayName>", defaultLanguage: "<defaultLanguage>");
]]></code></example>
    </member>
    <member name="AnalyzeTextSubmitOperationAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeTextSubmitOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new object(),
    tasks = new object[]
    {
        new
        {
            kind = "CustomEntityRecognition",
        }
    },
});
Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, content);
]]></code>
This sample shows how to call AnalyzeTextSubmitOperationAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "<displayName>",
    analysisInput = new
    {
        documents = new object[]
        {
            new
            {
                id = "<id>",
                text = "<text>",
                language = "<language>",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "CustomEntityRecognition",
            parameters = new
            {
                loggingOptOut = true,
                projectName = "<projectName>",
                deploymentName = "<deploymentName>",
                stringIndexType = "TextElements_v8",
            },
            taskName = "<taskName>",
        }
    },
    defaultLanguage = "<defaultLanguage>",
});
Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="AnalyzeTextSubmitOperation(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeTextSubmitOperation.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new object(),
    tasks = new object[]
    {
        new
        {
            kind = "CustomEntityRecognition",
        }
    },
});
Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, content);
]]></code>
This sample shows how to call AnalyzeTextSubmitOperation with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "<displayName>",
    analysisInput = new
    {
        documents = new object[]
        {
            new
            {
                id = "<id>",
                text = "<text>",
                language = "<language>",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "CustomEntityRecognition",
            parameters = new
            {
                loggingOptOut = true,
                projectName = "<projectName>",
                deploymentName = "<deploymentName>",
                stringIndexType = "TextElements_v8",
            },
            taskName = "<taskName>",
        }
    },
    defaultLanguage = "<defaultLanguage>",
});
Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="AnalyzeTextCancelOperationAsync(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call AnalyzeTextCancelOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Operation operation = await client.AnalyzeTextCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeTextCancelOperationAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Operation operation = await client.AnalyzeTextCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="AnalyzeTextCancelOperation(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call AnalyzeTextCancelOperation.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Operation operation = client.AnalyzeTextCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeTextCancelOperation with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

Operation operation = client.AnalyzeTextCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
  </members>
</doc>