// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Text.Samples
{
    public partial class Samples_TextAnalysisClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "DynamicClassification",
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "DynamicClassification",
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput();
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput();
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "DynamicClassification",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                parameters = new
                {
                    loggingOptOut = true,
                    modelVersion = "<modelVersion>",
                    classificationType = "Multi",
                    categories = new object[]
            {
"<categories>"
            },
                },
            });
            Response response = client.AnalyzeText(content, showStatistics: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "DynamicClassification",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                parameters = new
                {
                    loggingOptOut = true,
                    modelVersion = "<modelVersion>",
                    classificationType = "Multi",
                    categories = new object[]
            {
"<categories>"
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content, showStatistics: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
                },
                ActionContent = new DynamicClassificationActionContent(new string[] { "<categories>" })
                {
                    LoggingOptOut = true,
                    ModelVersion = "<modelVersion>",
                    ClassificationType = ClassificationType.Multi,
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput, showStatistics: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
                },
                ActionContent = new DynamicClassificationActionContent(new string[] { "<categories>" })
                {
                    LoggingOptOut = true,
                    ModelVersion = "<modelVersion>",
                    ClassificationType = ClassificationType.Multi,
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput, showStatistics: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response<AnalyzeTextOperationState> response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response<AnalyzeTextOperationState> response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response<AnalyzeTextOperationState> response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response<AnalyzeTextOperationState> response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextSubmitOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new object(),
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
}
            },
            });
            Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextSubmitOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new object(),
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
}
            },
            });
            Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextSubmitOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            MultiLanguageTextInput textInput = new MultiLanguageTextInput();
            Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
            {
new CustomEntitiesOperationAction()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextSubmitOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            MultiLanguageTextInput textInput = new MultiLanguageTextInput();
            Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
            {
new CustomEntitiesOperationAction()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextSubmitOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
parameters = new
{
loggingOptOut = true,
projectName = "<projectName>",
deploymentName = "<deploymentName>",
stringIndexType = "TextElements_v8",
},
taskName = "<taskName>",
}
            },
                defaultLanguage = "<defaultLanguage>",
            });
            Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextSubmitOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
parameters = new
{
loggingOptOut = true,
projectName = "<projectName>",
deploymentName = "<deploymentName>",
stringIndexType = "TextElements_v8",
},
taskName = "<taskName>",
}
            },
                defaultLanguage = "<defaultLanguage>",
            });
            Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextSubmitOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            MultiLanguageTextInput textInput = new MultiLanguageTextInput
            {
                MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
            };
            Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
            {
new CustomEntitiesOperationAction
{
ActionContent = new CustomEntitiesActionContent("<projectName>", "<deploymentName>")
{
LoggingOptOut = true,
StringIndexType = StringIndexType.TextElementsV8,
},
Name = "<taskName>",
}
            }, displayName: "<displayName>", defaultLanguage: "<defaultLanguage>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextSubmitOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            MultiLanguageTextInput textInput = new MultiLanguageTextInput
            {
                MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
            };
            Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
            {
new CustomEntitiesOperationAction
{
ActionContent = new CustomEntitiesActionContent("<projectName>", "<deploymentName>")
{
LoggingOptOut = true,
StringIndexType = StringIndexType.TextElementsV8,
},
Name = "<taskName>",
}
            }, displayName: "<displayName>", defaultLanguage: "<defaultLanguage>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextCancelOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Operation operation = client.AnalyzeTextCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextCancelOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Operation operation = await client.AnalyzeTextCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextCancelOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Operation operation = client.AnalyzeTextCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextCancelOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Operation operation = await client.AnalyzeTextCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }
    }
}
