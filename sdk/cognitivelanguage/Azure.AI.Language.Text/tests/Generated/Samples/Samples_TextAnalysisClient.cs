// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Text.Samples
{
    public partial class Samples_TextAnalysisClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulDynamicClassificationRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "DynamicClassification",
                parameters = new
                {
                    categories = new object[]
            {
"Health",
"Politics",
"Music",
"Sports"
            },
                    classificationType = "Multi",
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "The WHO is issuing a warning about Monkey Pox.",
},
new
{
id = "2",
language = "en",
text = "Mo Salah plays in Liverpool FC in England.",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulDynamicClassificationRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "DynamicClassification",
                parameters = new
                {
                    categories = new object[]
            {
"Health",
"Politics",
"Music",
"Sports"
            },
                    classificationType = "Multi",
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "The WHO is issuing a warning about Monkey Pox.",
},
new
{
id = "2",
language = "en",
text = "Mo Salah plays in Liverpool FC in England.",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulDynamicClassificationRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "The WHO is issuing a warning about Monkey Pox.")
{
Language = "en",
}, new MultiLanguageInput("2", "Mo Salah plays in Liverpool FC in England.")
{
Language = "en",
}},
                },
                ActionContent = new DynamicClassificationActionContent(new string[] { "Health", "Politics", "Music", "Sports" })
                {
                    ModelVersion = "latest",
                    ClassificationType = ClassificationType.Multi,
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulDynamicClassificationRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextDynamicClassificationInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "The WHO is issuing a warning about Monkey Pox.")
{
Language = "en",
}, new MultiLanguageInput("2", "Mo Salah plays in Liverpool FC in England.")
{
Language = "en",
}},
                },
                ActionContent = new DynamicClassificationActionContent(new string[] { "Health", "Politics", "Music", "Sports" })
                {
                    ModelVersion = "latest",
                    ClassificationType = ClassificationType.Multi,
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityLinkingRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityLinking",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "Microsoft was founded by Bill Gates and Paul Allen.",
},
new
{
id = "2",
language = "en",
text = "Pike place market is my favorite Seattle attraction.",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityLinkingRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityLinking",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "Microsoft was founded by Bill Gates and Paul Allen.",
},
new
{
id = "2",
language = "en",
text = "Pike place market is my favorite Seattle attraction.",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityLinkingRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityLinkingInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "Microsoft was founded by Bill Gates and Paul Allen.")
{
Language = "en",
}, new MultiLanguageInput("2", "Pike place market is my favorite Seattle attraction.")
{
Language = "en",
}},
                },
                ActionContent = new EntityLinkingActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityLinkingRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityLinkingInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "Microsoft was founded by Bill Gates and Paul Allen.")
{
Language = "en",
}, new MultiLanguageInput("2", "Pike place market is my favorite Seattle attraction.")
{
Language = "en",
}},
                },
                ActionContent = new EntityLinkingActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionExclusionRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    exclusionList = new object[]
            {
"Numeric"
            },
                    overlapPolicy = new
                    {
                        policyKind = "allowOverlap",
                    },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "2",
language = "en",
text = "When I was 5 years old I had $90.00 dollars to my name.",
},
new
{
id = "3",
language = "en",
text = "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionExclusionRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    exclusionList = new object[]
            {
"Numeric"
            },
                    overlapPolicy = new
                    {
                        policyKind = "allowOverlap",
                    },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "2",
language = "en",
text = "When I was 5 years old I had $90.00 dollars to my name.",
},
new
{
id = "3",
language = "en",
text = "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionExclusionRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("2", "When I was 5 years old I had $90.00 dollars to my name.")
{
Language = "en",
}, new MultiLanguageInput("3", "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    Exclusions = { EntityCategory.Numeric },
                    OverlapPolicy = new AllowOverlapEntityPolicyType(),
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionExclusionRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("2", "When I was 5 years old I had $90.00 dollars to my name.")
{
Language = "en",
}, new MultiLanguageInput("3", "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    Exclusions = { EntityCategory.Numeric },
                    OverlapPolicy = new AllowOverlapEntityPolicyType(),
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionInclusionRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    inclusionList = new object[]
            {
"Location"
            },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "2",
language = "en",
text = "When I was 5 years old I had $90.00 dollars to my name.",
},
new
{
id = "3",
language = "en",
text = "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionInclusionRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    inclusionList = new object[]
            {
"Location"
            },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "2",
language = "en",
text = "When I was 5 years old I had $90.00 dollars to my name.",
},
new
{
id = "3",
language = "en",
text = "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionInclusionRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("2", "When I was 5 years old I had $90.00 dollars to my name.")
{
Language = "en",
}, new MultiLanguageInput("3", "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    Inclusions = { EntityCategory.Location },
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionInclusionRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("2", "When I was 5 years old I had $90.00 dollars to my name.")
{
Language = "en",
}, new MultiLanguageInput("3", "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    Inclusions = { EntityCategory.Location },
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionInferenceOptionsRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    inferenceOptions = new
                    {
                        excludeNormalizedValues = true,
                    },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "When I was 5 years old I had $90.00 dollars to my name.",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionInferenceOptionsRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    inferenceOptions = new
                    {
                        excludeNormalizedValues = true,
                    },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "When I was 5 years old I had $90.00 dollars to my name.",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionInferenceOptionsRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "When I was 5 years old I had $90.00 dollars to my name.")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    InferenceOptions = new EntityInferenceConfig
                    {
                        ExcludeNormalizedValues = true,
                    },
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionInferenceOptionsRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "When I was 5 years old I had $90.00 dollars to my name.")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    InferenceOptions = new EntityInferenceConfig
                    {
                        ExcludeNormalizedValues = true,
                    },
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionOverlapPolicy()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    overlapPolicy = new
                    {
                        policyKind = "matchLongest",
                    },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "4",
language = "en",
text = "25th April Meeting was an intresting one. At least we gont to experience the WorldCup",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionOverlapPolicy_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    overlapPolicy = new
                    {
                        policyKind = "matchLongest",
                    },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "4",
language = "en",
text = "25th April Meeting was an intresting one. At least we gont to experience the WorldCup",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionOverlapPolicy_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("4", "25th April Meeting was an intresting one. At least we gont to experience the WorldCup")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    OverlapPolicy = new MatchLongestEntityPolicyType(),
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionOverlapPolicy_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("4", "25th April Meeting was an intresting one. At least we gont to experience the WorldCup")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    OverlapPolicy = new MatchLongestEntityPolicyType(),
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    overlapPolicy = new
                    {
                        policyKind = "allowOverlap",
                    },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "2",
language = "en",
text = "When I was 5 years old I had $90.00 dollars to my name.",
},
new
{
id = "3",
language = "en",
text = "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.",
},
new
{
id = "4",
language = "en",
text = "25th April Meeting was an intresting one. At least we gont to experience the WorldCup",
},
new
{
id = "5",
language = "en",
text = "My IP is 127.12.1.1 and my phone   number is 5555555555",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "EntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    overlapPolicy = new
                    {
                        policyKind = "allowOverlap",
                    },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "2",
language = "en",
text = "When I was 5 years old I had $90.00 dollars to my name.",
},
new
{
id = "3",
language = "en",
text = "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.",
},
new
{
id = "4",
language = "en",
text = "25th April Meeting was an intresting one. At least we gont to experience the WorldCup",
},
new
{
id = "5",
language = "en",
text = "My IP is 127.12.1.1 and my phone   number is 5555555555",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulEntityRecognitionRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("2", "When I was 5 years old I had $90.00 dollars to my name.")
{
Language = "en",
}, new MultiLanguageInput("3", "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.")
{
Language = "en",
}, new MultiLanguageInput("4", "25th April Meeting was an intresting one. At least we gont to experience the WorldCup")
{
Language = "en",
}, new MultiLanguageInput("5", "My IP is 127.12.1.1 and my phone   number is 5555555555")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    OverlapPolicy = new AllowOverlapEntityPolicyType(),
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulEntityRecognitionRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextEntityRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("2", "When I was 5 years old I had $90.00 dollars to my name.")
{
Language = "en",
}, new MultiLanguageInput("3", "When we flew from LAX it seemed like we were moving at 10 meters per second. I was lucky to see Amsterdam, Effile Tower, and the Nile.")
{
Language = "en",
}, new MultiLanguageInput("4", "25th April Meeting was an intresting one. At least we gont to experience the WorldCup")
{
Language = "en",
}, new MultiLanguageInput("5", "My IP is 127.12.1.1 and my phone   number is 5555555555")
{
Language = "en",
}},
                },
                ActionContent = new EntitiesActionContent
                {
                    ModelVersion = "latest",
                    OverlapPolicy = new AllowOverlapEntityPolicyType(),
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulKeyPhraseExtractionRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "KeyPhraseExtraction",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "Microsoft was founded by Bill Gates and Paul Allen.",
},
new
{
id = "2",
language = "en",
text = "Text Analytics is one of the Azure Cognitive Services.",
},
new
{
id = "3",
language = "en",
text = "My cat might need to see a veterinarian.",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulKeyPhraseExtractionRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "KeyPhraseExtraction",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "Microsoft was founded by Bill Gates and Paul Allen.",
},
new
{
id = "2",
language = "en",
text = "Text Analytics is one of the Azure Cognitive Services.",
},
new
{
id = "3",
language = "en",
text = "My cat might need to see a veterinarian.",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulKeyPhraseExtractionRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextKeyPhraseExtractionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "Microsoft was founded by Bill Gates and Paul Allen.")
{
Language = "en",
}, new MultiLanguageInput("2", "Text Analytics is one of the Azure Cognitive Services.")
{
Language = "en",
}, new MultiLanguageInput("3", "My cat might need to see a veterinarian.")
{
Language = "en",
}},
                },
                ActionContent = new KeyPhraseActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulKeyPhraseExtractionRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextKeyPhraseExtractionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "Microsoft was founded by Bill Gates and Paul Allen.")
{
Language = "en",
}, new MultiLanguageInput("2", "Text Analytics is one of the Azure Cognitive Services.")
{
Language = "en",
}, new MultiLanguageInput("3", "My cat might need to see a veterinarian.")
{
Language = "en",
}},
                },
                ActionContent = new KeyPhraseActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulLanguageDetectionRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "LanguageDetection",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
text = "Hello world",
},
new
{
id = "2",
text = "Bonjour tout le monde",
},
new
{
id = "3",
text = "Hola mundo",
},
new
{
id = "4",
text = "Tumhara naam kya hai?",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulLanguageDetectionRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "LanguageDetection",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
text = "Hello world",
},
new
{
id = "2",
text = "Bonjour tout le monde",
},
new
{
id = "3",
text = "Hola mundo",
},
new
{
id = "4",
text = "Tumhara naam kya hai?",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulLanguageDetectionRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextLanguageDetectionInput
            {
                TextInput = new LanguageDetectionTextInput
                {
                    LanguageInputs = { new LanguageInput("1", "Hello world"), new LanguageInput("2", "Bonjour tout le monde"), new LanguageInput("3", "Hola mundo"), new LanguageInput("4", "Tumhara naam kya hai?") },
                },
                ActionContent = new LanguageDetectionActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulLanguageDetectionRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextLanguageDetectionInput
            {
                TextInput = new LanguageDetectionTextInput
                {
                    LanguageInputs = { new LanguageInput("1", "Hello world"), new LanguageInput("2", "Bonjour tout le monde"), new LanguageInput("3", "Hola mundo"), new LanguageInput("4", "Tumhara naam kya hai?") },
                },
                ActionContent = new LanguageDetectionActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionExclusionRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "PiiEntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    excludePiiCategories = new object[]
            {
"USSocialSecurityNumber"
            },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "My SSN is 859-98-0987",
},
new
{
id = "2",
language = "en",
text = "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.",
},
new
{
id = "3",
language = "en",
text = "Is 998.214.865-68 your Brazilian CPF number?",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionExclusionRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "PiiEntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    excludePiiCategories = new object[]
            {
"USSocialSecurityNumber"
            },
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "My SSN is 859-98-0987",
},
new
{
id = "2",
language = "en",
text = "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.",
},
new
{
id = "3",
language = "en",
text = "Is 998.214.865-68 your Brazilian CPF number?",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionExclusionRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextPiiEntitiesRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "My SSN is 859-98-0987")
{
Language = "en",
}, new MultiLanguageInput("2", "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.")
{
Language = "en",
}, new MultiLanguageInput("3", "Is 998.214.865-68 your Brazilian CPF number?")
{
Language = "en",
}},
                },
                ActionContent = new PiiActionContent
                {
                    ModelVersion = "latest",
                    ExcludePiiCategories = { PiiCategoriesExclude.UsSocialSecurityNumber },
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionExclusionRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextPiiEntitiesRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "My SSN is 859-98-0987")
{
Language = "en",
}, new MultiLanguageInput("2", "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.")
{
Language = "en",
}, new MultiLanguageInput("3", "Is 998.214.865-68 your Brazilian CPF number?")
{
Language = "en",
}},
                },
                ActionContent = new PiiActionContent
                {
                    ModelVersion = "latest",
                    ExcludePiiCategories = { PiiCategoriesExclude.UsSocialSecurityNumber },
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionRedactionRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "PiiEntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    redactionCharacter = "-",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "My SSN is 859-98-0987",
},
new
{
id = "2",
language = "en",
text = "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.",
},
new
{
id = "3",
language = "en",
text = "Is 998.214.865-68 your Brazilian CPF number?",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionRedactionRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "PiiEntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                    redactionCharacter = "-",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "My SSN is 859-98-0987",
},
new
{
id = "2",
language = "en",
text = "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.",
},
new
{
id = "3",
language = "en",
text = "Is 998.214.865-68 your Brazilian CPF number?",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionRedactionRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextPiiEntitiesRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "My SSN is 859-98-0987")
{
Language = "en",
}, new MultiLanguageInput("2", "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.")
{
Language = "en",
}, new MultiLanguageInput("3", "Is 998.214.865-68 your Brazilian CPF number?")
{
Language = "en",
}},
                },
                ActionContent = new PiiActionContent
                {
                    ModelVersion = "latest",
                    RedactionCharacter = RedactionCharacter.Minus,
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionRedactionRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextPiiEntitiesRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "My SSN is 859-98-0987")
{
Language = "en",
}, new MultiLanguageInput("2", "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.")
{
Language = "en",
}, new MultiLanguageInput("3", "Is 998.214.865-68 your Brazilian CPF number?")
{
Language = "en",
}},
                },
                ActionContent = new PiiActionContent
                {
                    ModelVersion = "latest",
                    RedactionCharacter = RedactionCharacter.Minus,
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "PiiEntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "My SSN is 859-98-0987",
},
new
{
id = "2",
language = "en",
text = "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.",
},
new
{
id = "3",
language = "en",
text = "Is 998.214.865-68 your Brazilian CPF number?",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "PiiEntityRecognition",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "My SSN is 859-98-0987",
},
new
{
id = "2",
language = "en",
text = "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.",
},
new
{
id = "3",
language = "en",
text = "Is 998.214.865-68 your Brazilian CPF number?",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextPiiEntitiesRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "My SSN is 859-98-0987")
{
Language = "en",
}, new MultiLanguageInput("2", "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.")
{
Language = "en",
}, new MultiLanguageInput("3", "Is 998.214.865-68 your Brazilian CPF number?")
{
Language = "en",
}},
                },
                ActionContent = new PiiActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulPiiEntityRecognitionRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextPiiEntitiesRecognitionInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "My SSN is 859-98-0987")
{
Language = "en",
}, new MultiLanguageInput("2", "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check.")
{
Language = "en",
}, new MultiLanguageInput("3", "Is 998.214.865-68 your Brazilian CPF number?")
{
Language = "en",
}},
                },
                ActionContent = new PiiActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulSentimentAnalysisRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "SentimentAnalysis",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "Great atmosphere. Close to plenty of restaurants, hotels, and transit! Staff are friendly and helpful.",
}
            },
                },
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulSentimentAnalysisRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "SentimentAnalysis",
                parameters = new
                {
                    modelVersion = "latest",
                },
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
text = "Great atmosphere. Close to plenty of restaurants, hotels, and transit! Staff are friendly and helpful.",
}
            },
                },
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeText_SuccessfulSentimentAnalysisRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextSentimentAnalysisInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "Great atmosphere. Close to plenty of restaurants, hotels, and transit! Staff are friendly and helpful.")
{
Language = "en",
}},
                },
                ActionContent = new SentimentAnalysisActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeText_SuccessfulSentimentAnalysisRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            AnalyzeTextInput analyzeTextInput = new TextSentimentAnalysisInput
            {
                TextInput = new MultiLanguageTextInput
                {
                    MultiLanguageInputs = {new MultiLanguageInput("1", "Great atmosphere. Close to plenty of restaurants, hotels, and transit! Staff are friendly and helpful.")
{
Language = "en",
}},
                },
                ActionContent = new SentimentAnalysisActionContent
                {
                    ModelVersion = "latest",
                },
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(analyzeTextInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response<AnalyzeTextOperationState> response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response<AnalyzeTextOperationState> response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response<AnalyzeTextOperationState> response = client.AnalyzeTextOperationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeTextJobState_AnalyzeTextOperationStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Response<AnalyzeTextOperationState> response = await client.AnalyzeTextOperationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextSubmitOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new object(),
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
}
            },
            });
            Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextSubmitOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new object(),
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
}
            },
            });
            Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextSubmitOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            MultiLanguageTextInput textInput = new MultiLanguageTextInput();
            Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
            {
new CustomEntitiesOperationAction()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextSubmitOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            MultiLanguageTextInput textInput = new MultiLanguageTextInput();
            Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
            {
new CustomEntitiesOperationAction()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextSubmitOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
parameters = new
{
loggingOptOut = true,
projectName = "<projectName>",
deploymentName = "<deploymentName>",
stringIndexType = "TextElements_v8",
},
taskName = "<taskName>",
}
            },
                defaultLanguage = "<defaultLanguage>",
            });
            Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextSubmitOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
text = "<text>",
language = "<language>",
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "CustomEntityRecognition",
parameters = new
{
loggingOptOut = true,
projectName = "<projectName>",
deploymentName = "<deploymentName>",
stringIndexType = "TextElements_v8",
},
taskName = "<taskName>",
}
            },
                defaultLanguage = "<defaultLanguage>",
            });
            Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextSubmitOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            MultiLanguageTextInput textInput = new MultiLanguageTextInput
            {
                MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
            };
            Operation operation = client.AnalyzeTextSubmitOperation(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
            {
new CustomEntitiesOperationAction
{
ActionContent = new CustomEntitiesActionContent("<projectName>", "<deploymentName>")
{
LoggingOptOut = true,
StringIndexType = StringIndexType.TextElementsV8,
},
Name = "<taskName>",
}
            }, displayName: "<displayName>", defaultLanguage: "<defaultLanguage>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextSubmitOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            MultiLanguageTextInput textInput = new MultiLanguageTextInput
            {
                MultiLanguageInputs = {new MultiLanguageInput("<id>", "<text>")
{
Language = "<language>",
}},
            };
            Operation operation = await client.AnalyzeTextSubmitOperationAsync(WaitUntil.Completed, textInput, new AnalyzeTextOperationAction[]
            {
new CustomEntitiesOperationAction
{
ActionContent = new CustomEntitiesActionContent("<projectName>", "<deploymentName>")
{
LoggingOptOut = true,
StringIndexType = StringIndexType.TextElementsV8,
},
Name = "<taskName>",
}
            }, displayName: "<displayName>", defaultLanguage: "<defaultLanguage>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextCancelOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Operation operation = client.AnalyzeTextCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextCancelOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Operation operation = await client.AnalyzeTextCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Text_AnalyzeTextCancelOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Operation operation = client.AnalyzeTextCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Text_AnalyzeTextCancelOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TextAnalysisClient client = new TextAnalysisClient(endpoint, credential);

            Operation operation = await client.AnalyzeTextCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }
    }
}
