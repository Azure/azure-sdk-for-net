// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.QuestionAnswering.Inference
{
    /// <summary> Kind of matching policy to be used. </summary>
    internal readonly partial struct MatchingPolicyKind : IEquatable<MatchingPolicyKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MatchingPolicyKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MatchingPolicyKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrebuiltValue = "Prebuilt";

        /// <summary> Prebuilt weights will be used for giving preference to question and answer columns when quering AI search. </summary>
        public static MatchingPolicyKind Prebuilt { get; } = new MatchingPolicyKind(PrebuiltValue);
        /// <summary> Determines if two <see cref="MatchingPolicyKind"/> values are the same. </summary>
        public static bool operator ==(MatchingPolicyKind left, MatchingPolicyKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MatchingPolicyKind"/> values are not the same. </summary>
        public static bool operator !=(MatchingPolicyKind left, MatchingPolicyKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MatchingPolicyKind"/>. </summary>
        public static implicit operator MatchingPolicyKind(string value) => new MatchingPolicyKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MatchingPolicyKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MatchingPolicyKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
