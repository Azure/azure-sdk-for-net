// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ScomManagedInstance.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmScomManagedInstanceModelFactory
    {
        /// <summary> Initializes a new instance of ManagedInstance. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The properties of a SCOM instance resource. </param>
        /// <param name="identity"> The Azure Active Directory identity of the SCOM instance. </param>
        /// <returns> A new <see cref="Models.ManagedInstance"/> instance for mocking. </returns>
        public static ManagedInstance ManagedInstance(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, MonitoringInstanceProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ManagedInstance(id, name, resourceType, systemData, tags, location, properties, identity);
        }

        /// <summary> Initializes a new instance of MonitoringInstanceProperties. </summary>
        /// <param name="productVersion"> SCOM product version to be installed on instance. </param>
        /// <param name="vNetSubnetId"> Virtual Network subnet id on which Aquila instance will be provisioned. </param>
        /// <param name="managementEndpoints"> List of management server endpoints. </param>
        /// <param name="databaseInstance"> The database instance where the SCOM Operational and Warehouse databases will be stored. </param>
        /// <param name="domainController"> Domain controller details. </param>
        /// <param name="domainUserCredentials"> Domain user which will be used to join VMs to domain and login to VMs. </param>
        /// <param name="gmsaDetails"> Gmsa Details for load balancer and vmss. </param>
        /// <param name="azureHybridBenefit"> The properties to enable Azure Hybrid benefit for various SCOM infrastructure license. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state. </param>
        /// <param name="logAnalyticsProperties"> Details of Log Analytics workspace and data being ingested. </param>
        /// <param name="operationsStatus"> Gets status of current and latest SCOM managed instance operations. </param>
        /// <returns> A new <see cref="Models.MonitoringInstanceProperties"/> instance for mocking. </returns>
        public static MonitoringInstanceProperties MonitoringInstanceProperties(string productVersion = null, string vNetSubnetId = null, IEnumerable<ManagementServerProperties> managementEndpoints = null, DatabaseInstanceProperties databaseInstance = null, DomainControllerProperties domainController = null, DomainUserCredentials domainUserCredentials = null, GmsaDetails gmsaDetails = null, AzureHybridBenefitProperties azureHybridBenefit = null, string provisioningState = null, LogAnalyticsConfiguration logAnalyticsProperties = null, IEnumerable<ManagedInstanceOperationStatus> operationsStatus = null)
        {
            managementEndpoints ??= new List<ManagementServerProperties>();
            operationsStatus ??= new List<ManagedInstanceOperationStatus>();

            return new MonitoringInstanceProperties(productVersion, vNetSubnetId, managementEndpoints?.ToList(), databaseInstance, domainController, domainUserCredentials, gmsaDetails, azureHybridBenefit, provisioningState, logAnalyticsProperties, operationsStatus?.ToList());
        }

        /// <summary> Initializes a new instance of ManagementServerProperties. </summary>
        /// <param name="serverName"> Management server Name. </param>
        /// <param name="vmResId"> Azure VM Resource Id of the Management server. </param>
        /// <param name="fqdn"> Management server Fully Qualified Domain Name. </param>
        /// <param name="serverRoles"> Represent whether the Server is a Management Server and/or Web Console Server. </param>
        /// <param name="healthState"> Management server health state. </param>
        /// <returns> A new <see cref="Models.ManagementServerProperties"/> instance for mocking. </returns>
        public static ManagementServerProperties ManagementServerProperties(string serverName = null, string vmResId = null, string fqdn = null, string serverRoles = null, string healthState = null)
        {
            return new ManagementServerProperties(serverName, vmResId, fqdn, serverRoles, healthState);
        }

        /// <summary> Initializes a new instance of DatabaseInstanceProperties. </summary>
        /// <param name="databaseInstanceId"> Resource Id of existing database instance. </param>
        /// <param name="databaseFqdn"> Fully qualified domain name of existing database instance. </param>
        /// <param name="dwDatabaseName"> Name of warehouse database on database instance. </param>
        /// <param name="operationalDatabaseId"> Resource Id of operational database on database instance. </param>
        /// <param name="dwDatabaseId"> Resource Id of warehouse database on database instance. </param>
        /// <returns> A new <see cref="Models.DatabaseInstanceProperties"/> instance for mocking. </returns>
        public static DatabaseInstanceProperties DatabaseInstanceProperties(string databaseInstanceId = null, string databaseFqdn = null, string dwDatabaseName = null, string operationalDatabaseId = null, string dwDatabaseId = null)
        {
            return new DatabaseInstanceProperties(databaseInstanceId, databaseFqdn, dwDatabaseName, operationalDatabaseId, dwDatabaseId);
        }

        /// <summary> Initializes a new instance of ManagedInstanceOperationStatus. </summary>
        /// <param name="operationName"> Operation Name. </param>
        /// <param name="operationState"> Operation status. </param>
        /// <param name="id"> Operation id. </param>
        /// <returns> A new <see cref="Models.ManagedInstanceOperationStatus"/> instance for mocking. </returns>
        public static ManagedInstanceOperationStatus ManagedInstanceOperationStatus(string operationName = null, string operationState = null, string id = null)
        {
            return new ManagedInstanceOperationStatus(operationName, operationState, id);
        }

        /// <summary> Initializes a new instance of SetServerCountResponseProperties. </summary>
        /// <param name="serverCount"> Management server count. </param>
        /// <returns> A new <see cref="Models.SetServerCountResponseProperties"/> instance for mocking. </returns>
        public static SetServerCountResponseProperties SetServerCountResponseProperties(long? serverCount = null)
        {
            return new SetServerCountResponseProperties(serverCount);
        }

        /// <summary> Initializes a new instance of PatchServersResponseProperties. </summary>
        /// <param name="status"> Status of the patch operation. </param>
        /// <returns> A new <see cref="Models.PatchServersResponseProperties"/> instance for mocking. </returns>
        public static PatchServersResponseProperties PatchServersResponseProperties(string status = null)
        {
            return new PatchServersResponseProperties(status);
        }

        /// <summary> Initializes a new instance of UnlinkLogAnalyticsResponseProperties. </summary>
        /// <param name="status"> Status of the unlink operation. </param>
        /// <returns> A new <see cref="Models.UnlinkLogAnalyticsResponseProperties"/> instance for mocking. </returns>
        public static UnlinkLogAnalyticsResponseProperties UnlinkLogAnalyticsResponseProperties(string status = null)
        {
            return new UnlinkLogAnalyticsResponseProperties(status);
        }

        /// <summary> Initializes a new instance of MonitoredResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The properties of a monitored resource. </param>
        /// <returns> A new <see cref="Models.MonitoredResource"/> instance for mocking. </returns>
        public static MonitoredResource MonitoredResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MonitoredResourceProperties properties = null)
        {
            return new MonitoredResource(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MonitoredResourceProperties. </summary>
        /// <param name="resourceId"> ArmId of the monitored resource. </param>
        /// <param name="resourceLocation"> Location of the monitored resource. </param>
        /// <param name="computerName"> ComputerName of the monitored resource. </param>
        /// <param name="domainName"> The domain name associated with the monitored resource. </param>
        /// <param name="managementServerEndpoint"> The management server endpoint to which the monitored resource is directed. </param>
        /// <param name="healthStatus"> The health status of the monitored resource. </param>
        /// <param name="connectionStatus"> The connection status of the monitored resource. </param>
        /// <param name="agentVersion"> The version of the monitored resource agent version. </param>
        /// <param name="installType"> Install type of monitored resource. </param>
        /// <param name="provisioningState"></param>
        /// <returns> A new <see cref="Models.MonitoredResourceProperties"/> instance for mocking. </returns>
        public static MonitoredResourceProperties MonitoredResourceProperties(string resourceId = null, string resourceLocation = null, string computerName = null, string domainName = null, string managementServerEndpoint = null, string healthStatus = null, string connectionStatus = null, string agentVersion = null, string installType = null, string provisioningState = null)
        {
            return new MonitoredResourceProperties(resourceId, resourceLocation, computerName, domainName, managementServerEndpoint, healthStatus, connectionStatus, agentVersion, installType, provisioningState);
        }

        /// <summary> Initializes a new instance of ManagedGateway. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The properties of a gateway resource. </param>
        /// <returns> A new <see cref="Models.ManagedGateway"/> instance for mocking. </returns>
        public static ManagedGateway ManagedGateway(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedGatewayProperties properties = null)
        {
            return new ManagedGateway(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ManagedGatewayProperties. </summary>
        /// <param name="resourceId"> ArmId of the gateway to be monitored. </param>
        /// <param name="resourceLocation"> Location of the gateway to be monitored. </param>
        /// <param name="computerName"> ComputerName of the gateway to be monitored. </param>
        /// <param name="domainName"> The domain name associated with the gateway to be monitored. </param>
        /// <param name="managementServerEndpoint"> The management server endpoint to which the gateway is directed. </param>
        /// <param name="healthStatus"> The health status of the gateway resource. </param>
        /// <param name="connectionStatus"> The connection status of the gateway resource. </param>
        /// <param name="version"> The version of the gateway resource. </param>
        /// <param name="installType"> Install type of gateway resource. </param>
        /// <param name="provisioningState"></param>
        /// <returns> A new <see cref="Models.ManagedGatewayProperties"/> instance for mocking. </returns>
        public static ManagedGatewayProperties ManagedGatewayProperties(string resourceId = null, string resourceLocation = null, string computerName = null, string domainName = null, string managementServerEndpoint = null, string healthStatus = null, string connectionStatus = null, string version = null, string installType = null, string provisioningState = null)
        {
            return new ManagedGatewayProperties(resourceId, resourceLocation, computerName, domainName, managementServerEndpoint, healthStatus, connectionStatus, version, installType, provisioningState);
        }
    }
}
