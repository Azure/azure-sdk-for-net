// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure;
using Azure.Core;
using Azure.ResourceManager.ContainerService;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ContainerServiceModelFactory
    {
        /// <summary> Initializes a new instance of OSOptionProfileData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="osOptionPropertyList"> The list of OS options. </param>
        /// <returns> A new <see cref="ContainerService.OSOptionProfileData"/> instance for mocking. </returns>
        public static OSOptionProfileData OSOptionProfileData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<ContainerServiceOSOptionProperty> osOptionPropertyList = null)
        {
            osOptionPropertyList ??= new List<ContainerServiceOSOptionProperty>();

            return new OSOptionProfileData(id, name, resourceType, systemData, osOptionPropertyList?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerServiceOSOptionProperty. </summary>
        /// <param name="osType"> The OS type. </param>
        /// <param name="enableFipsImage"> Whether the image is FIPS-enabled. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="osType"/> is null. </exception>
        /// <returns> A new <see cref="Models.ContainerServiceOSOptionProperty"/> instance for mocking. </returns>
        public static ContainerServiceOSOptionProperty ContainerServiceOSOptionProperty(string osType = null, bool enableFipsImage = default)
        {
            if (osType == null)
            {
                throw new ArgumentNullException(nameof(osType));
            }

            return new ContainerServiceOSOptionProperty(osType, enableFipsImage);
        }

        /// <summary> Initializes a new instance of ContainerServiceManagedClusterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The managed cluster SKU. </param>
        /// <param name="extendedLocation"> The extended location of the Virtual Machine. </param>
        /// <param name="identity"> The identity of the managed cluster, if configured. Current supported identity types: None, SystemAssigned, UserAssigned. </param>
        /// <param name="provisioningState"> The current provisioning state. </param>
        /// <param name="powerStateCode"> The Power State of the cluster. </param>
        /// <param name="maxAgentPools"> The max number of agent pools for the managed cluster. </param>
        /// <param name="kubernetesVersion"> Both patch version &lt;major.minor.patch&gt; (e.g. 1.20.13) and &lt;major.minor&gt; (e.g. 1.20) are supported. When &lt;major.minor&gt; is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same &lt;major.minor&gt; once it has been created (e.g. 1.14.x -&gt; 1.14) will not trigger an upgrade, even if a newer patch version is available. When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between 1.14.x -&gt; 1.15.x or 1.15.x -&gt; 1.16.x are allowed, however 1.14.x -&gt; 1.16.x is not allowed. See [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details. </param>
        /// <param name="currentKubernetesVersion"> If kubernetesVersion was a fully specified version &lt;major.minor.patch&gt;, this field will be exactly equal to it. If kubernetesVersion was &lt;major.minor&gt;, this field will contain the full &lt;major.minor.patch&gt; version being used. </param>
        /// <param name="dnsPrefix"> This cannot be updated once the Managed Cluster has been created. </param>
        /// <param name="fqdnSubdomain"> This cannot be updated once the Managed Cluster has been created. </param>
        /// <param name="fqdn"> The FQDN of the master pool. </param>
        /// <param name="privateFqdn"> The FQDN of private cluster. </param>
        /// <param name="azurePortalFqdn"> The Azure Portal requires certain Cross-Origin Resource Sharing (CORS) headers to be sent in some responses, which Kubernetes APIServer doesn&apos;t handle by default. This special FQDN supports CORS, allowing the Azure Portal to function properly. </param>
        /// <param name="agentPoolProfiles"> The agent pool properties. </param>
        /// <param name="linuxProfile"> The profile for Linux VMs in the Managed Cluster. </param>
        /// <param name="windowsProfile"> The profile for Windows VMs in the Managed Cluster. </param>
        /// <param name="servicePrincipalProfile"> Information about a service principal identity for the cluster to use for manipulating Azure APIs. </param>
        /// <param name="addonProfiles"> The profile of managed cluster add-on. </param>
        /// <param name="podIdentityProfile"> See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod identity integration. </param>
        /// <param name="nodeResourceGroup"> The name of the resource group containing agent pool nodes. </param>
        /// <param name="enableRbac"> Whether to enable Kubernetes Role-Based Access Control. </param>
        /// <param name="enablePodSecurityPolicy"> (DEPRECATING) Whether to enable Kubernetes pod security policy (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy. </param>
        /// <param name="networkProfile"> The network configuration profile. </param>
        /// <param name="aadProfile"> The Azure Active Directory configuration. </param>
        /// <param name="upgradeChannel"> The auto upgrade configuration. </param>
        /// <param name="autoScalerProfile"> Parameters to be applied to the cluster-autoscaler when enabled. </param>
        /// <param name="apiServerAccessProfile"> The access profile for managed cluster API server. </param>
        /// <param name="diskEncryptionSetId"> This is of the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}&apos;. </param>
        /// <param name="identityProfile"> Identities associated with the cluster. </param>
        /// <param name="privateLinkResources"> Private link resources associated with the cluster. </param>
        /// <param name="disableLocalAccounts"> If set to true, getting static credentials will be disabled for this cluster. This must only be used on Managed Clusters that are AAD enabled. For more details see [disable local accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview). </param>
        /// <param name="httpProxyConfig"> Configurations for provisioning the cluster with HTTP proxy servers. </param>
        /// <param name="securityAzureDefender"> Security profile for the managed cluster. </param>
        /// <param name="storageProfile"> Storage profile for the managed cluster. </param>
        /// <param name="publicNetworkAccess"> Allow or deny public network access for AKS. </param>
        /// <returns> A new <see cref="ContainerService.ContainerServiceManagedClusterData"/> instance for mocking. </returns>
        public static ContainerServiceManagedClusterData ContainerServiceManagedClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedClusterSku sku = null, ExtendedLocation extendedLocation = null, ManagedServiceIdentity identity = null, string provisioningState = null, ContainerServiceStateCode? powerStateCode = null, int? maxAgentPools = null, string kubernetesVersion = null, string currentKubernetesVersion = null, string dnsPrefix = null, string fqdnSubdomain = null, string fqdn = null, string privateFqdn = null, string azurePortalFqdn = null, IEnumerable<ManagedClusterAgentPoolProfile> agentPoolProfiles = null, ContainerServiceLinuxProfile linuxProfile = null, ManagedClusterWindowsProfile windowsProfile = null, ManagedClusterServicePrincipalProfile servicePrincipalProfile = null, IDictionary<string, ManagedClusterAddonProfile> addonProfiles = null, ManagedClusterPodIdentityProfile podIdentityProfile = null, string nodeResourceGroup = null, bool? enableRbac = null, bool? enablePodSecurityPolicy = null, ContainerServiceNetworkProfile networkProfile = null, ManagedClusterAadProfile aadProfile = null, UpgradeChannel? upgradeChannel = null, ManagedClusterAutoScalerProfile autoScalerProfile = null, ManagedClusterApiServerAccessProfile apiServerAccessProfile = null, ResourceIdentifier diskEncryptionSetId = null, IDictionary<string, ContainerServiceUserAssignedIdentity> identityProfile = null, IEnumerable<ContainerServicePrivateLinkResourceData> privateLinkResources = null, bool? disableLocalAccounts = null, ManagedClusterHttpProxyConfig httpProxyConfig = null, ManagedClusterSecurityProfileAzureDefender securityAzureDefender = null, ManagedClusterStorageProfile storageProfile = null, ContainerServicePublicNetworkAccess? publicNetworkAccess = null)
        {
            tags ??= new Dictionary<string, string>();
            agentPoolProfiles ??= new List<ManagedClusterAgentPoolProfile>();
            addonProfiles ??= new Dictionary<string, ManagedClusterAddonProfile>();
            identityProfile ??= new Dictionary<string, ContainerServiceUserAssignedIdentity>();
            privateLinkResources ??= new List<ContainerServicePrivateLinkResourceData>();

            return new ContainerServiceManagedClusterData(id, name, resourceType, systemData, tags, location, sku, extendedLocation, identity, provisioningState, new ContainerServicePowerState(powerStateCode), maxAgentPools, kubernetesVersion, currentKubernetesVersion, dnsPrefix, fqdnSubdomain, fqdn, privateFqdn, azurePortalFqdn, agentPoolProfiles?.ToList(), linuxProfile, windowsProfile, servicePrincipalProfile, addonProfiles, podIdentityProfile, nodeResourceGroup, enableRbac, enablePodSecurityPolicy, networkProfile, aadProfile, new ManagedClusterAutoUpgradeProfile(upgradeChannel), autoScalerProfile, apiServerAccessProfile, diskEncryptionSetId, identityProfile, privateLinkResources?.ToList(), disableLocalAccounts, httpProxyConfig, new ManagedClusterSecurityProfile(securityAzureDefender), storageProfile, publicNetworkAccess);
        }

        /// <summary> Initializes a new instance of ManagedClusterSku. </summary>
        /// <param name="name"> The name of a managed cluster SKU. </param>
        /// <param name="tier"> If not specified, the default is &apos;Free&apos;. See [uptime SLA](https://docs.microsoft.com/azure/aks/uptime-sla) for more details. </param>
        /// <returns> A new <see cref="Models.ManagedClusterSku"/> instance for mocking. </returns>
        public static ManagedClusterSku ManagedClusterSku(ManagedClusterSkuName? name = null, ManagedClusterSkuTier? tier = null)
        {
            return new ManagedClusterSku(name, tier);
        }

        /// <summary> Initializes a new instance of ManagedClusterAgentPoolProfile. </summary>
        /// <param name="count"> Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1. </param>
        /// <param name="vmSize"> VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions. </param>
        /// <param name="osDiskSizeInGB"> OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified. </param>
        /// <param name="osDiskType"> The default is &apos;Ephemeral&apos; if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to &apos;Managed&apos;. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os). </param>
        /// <param name="kubeletDiskType"> Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. </param>
        /// <param name="workloadRuntime"> Determines the type of workload a node can run. </param>
        /// <param name="vnetSubnetId"> If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. </param>
        /// <param name="podSubnetId"> If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. </param>
        /// <param name="maxPods"> The maximum number of pods that can run on a node. </param>
        /// <param name="osType"> The operating system type. The default is Linux. </param>
        /// <param name="osSku"> Specifies an OS SKU. This value must not be specified if OSType is Windows. </param>
        /// <param name="maxCount"> The maximum number of nodes for auto-scaling. </param>
        /// <param name="minCount"> The minimum number of nodes for auto-scaling. </param>
        /// <param name="enableAutoScaling"> Whether to enable auto-scaler. </param>
        /// <param name="scaleDownMode"> This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete. </param>
        /// <param name="agentPoolType"> The type of Agent Pool. </param>
        /// <param name="mode"> A cluster must have at least one &apos;System&apos; Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools. </param>
        /// <param name="orchestratorVersion"> Both patch version &lt;major.minor.patch&gt; (e.g. 1.20.13) and &lt;major.minor&gt; (e.g. 1.20) are supported. When &lt;major.minor&gt; is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same &lt;major.minor&gt; once it has been created (e.g. 1.14.x -&gt; 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool). </param>
        /// <param name="currentOrchestratorVersion"> If orchestratorVersion is a fully specified version &lt;major.minor.patch&gt;, this field will be exactly equal to it. If orchestratorVersion is &lt;major.minor&gt;, this field will contain the full &lt;major.minor.patch&gt; version being used. </param>
        /// <param name="nodeImageVersion"> The version of node image. </param>
        /// <param name="upgradeMaxSurge"> Settings for upgrading the agentpool. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state. </param>
        /// <param name="powerStateCode"> When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded. </param>
        /// <param name="availabilityZones"> The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is &apos;VirtualMachineScaleSets&apos;. </param>
        /// <param name="enableNodePublicIP"> Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false. </param>
        /// <param name="nodePublicIPPrefixId"> This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}. </param>
        /// <param name="scaleSetPriority"> The Virtual Machine Scale Set priority. If not specified, the default is &apos;Regular&apos;. </param>
        /// <param name="scaleSetEvictionPolicy"> This cannot be specified unless the scaleSetPriority is &apos;Spot&apos;. If not specified, the default is &apos;Delete&apos;. </param>
        /// <param name="spotMaxPrice"> Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing). </param>
        /// <param name="tags"> The tags to be persisted on the agent pool virtual machine scale set. </param>
        /// <param name="nodeLabels"> The node labels to be persisted across all nodes in agent pool. </param>
        /// <param name="nodeTaints"> The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. </param>
        /// <param name="proximityPlacementGroupId"> The ID for Proximity Placement Group. </param>
        /// <param name="kubeletConfig"> The Kubelet configuration on the agent pool nodes. </param>
        /// <param name="linuxOSConfig"> The OS configuration of Linux agent nodes. </param>
        /// <param name="enableEncryptionAtHost"> This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption. </param>
        /// <param name="enableUltraSsd"> Whether to enable UltraSSD. </param>
        /// <param name="enableFips"> See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details. </param>
        /// <param name="gpuInstanceProfile"> GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. </param>
        /// <param name="creationDataSourceResourceId"> CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot. </param>
        /// <param name="name"> Windows agent pool names must be 6 characters or less. </param>
        /// <returns> A new <see cref="Models.ManagedClusterAgentPoolProfile"/> instance for mocking. </returns>
        public static ManagedClusterAgentPoolProfile ManagedClusterAgentPoolProfile(int? count = null, string vmSize = null, int? osDiskSizeInGB = null, ContainerServiceOSDiskType? osDiskType = null, KubeletDiskType? kubeletDiskType = null, WorkloadRuntime? workloadRuntime = null, ResourceIdentifier vnetSubnetId = null, ResourceIdentifier podSubnetId = null, int? maxPods = null, ContainerServiceOSType? osType = null, ContainerServiceOSSku? osSku = null, int? maxCount = null, int? minCount = null, bool? enableAutoScaling = null, ScaleDownMode? scaleDownMode = null, AgentPoolType? agentPoolType = null, AgentPoolMode? mode = null, string orchestratorVersion = null, string currentOrchestratorVersion = null, string nodeImageVersion = null, string upgradeMaxSurge = null, string provisioningState = null, ContainerServiceStateCode? powerStateCode = null, IEnumerable<string> availabilityZones = null, bool? enableNodePublicIP = null, ResourceIdentifier nodePublicIPPrefixId = null, ScaleSetPriority? scaleSetPriority = null, ScaleSetEvictionPolicy? scaleSetEvictionPolicy = null, float? spotMaxPrice = null, IDictionary<string, string> tags = null, IDictionary<string, string> nodeLabels = null, IEnumerable<string> nodeTaints = null, ResourceIdentifier proximityPlacementGroupId = null, KubeletConfig kubeletConfig = null, LinuxOSConfig linuxOSConfig = null, bool? enableEncryptionAtHost = null, bool? enableUltraSsd = null, bool? enableFips = null, GpuInstanceProfile? gpuInstanceProfile = null, ResourceIdentifier creationDataSourceResourceId = null, string name = null)
        {
            availabilityZones ??= new List<string>();
            tags ??= new Dictionary<string, string>();
            nodeLabels ??= new Dictionary<string, string>();
            nodeTaints ??= new List<string>();

            return new ManagedClusterAgentPoolProfile(count, vmSize, osDiskSizeInGB, osDiskType, kubeletDiskType, workloadRuntime, vnetSubnetId, podSubnetId, maxPods, osType, osSku, maxCount, minCount, enableAutoScaling, scaleDownMode, agentPoolType, mode, orchestratorVersion, currentOrchestratorVersion, nodeImageVersion, new AgentPoolUpgradeSettings(upgradeMaxSurge), provisioningState, new ContainerServicePowerState(powerStateCode), availabilityZones?.ToList(), enableNodePublicIP, nodePublicIPPrefixId, scaleSetPriority, scaleSetEvictionPolicy, spotMaxPrice, tags, nodeLabels, nodeTaints?.ToList(), proximityPlacementGroupId, kubeletConfig, linuxOSConfig, enableEncryptionAtHost, enableUltraSsd, enableFips, gpuInstanceProfile, new ContainerServiceCreationData(creationDataSourceResourceId), name);
        }

        /// <summary> Initializes a new instance of ManagedClusterAgentPoolProfileProperties. </summary>
        /// <param name="count"> Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1. </param>
        /// <param name="vmSize"> VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions. </param>
        /// <param name="osDiskSizeInGB"> OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified. </param>
        /// <param name="osDiskType"> The default is &apos;Ephemeral&apos; if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to &apos;Managed&apos;. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os). </param>
        /// <param name="kubeletDiskType"> Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. </param>
        /// <param name="workloadRuntime"> Determines the type of workload a node can run. </param>
        /// <param name="vnetSubnetId"> If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. </param>
        /// <param name="podSubnetId"> If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. </param>
        /// <param name="maxPods"> The maximum number of pods that can run on a node. </param>
        /// <param name="osType"> The operating system type. The default is Linux. </param>
        /// <param name="osSku"> Specifies an OS SKU. This value must not be specified if OSType is Windows. </param>
        /// <param name="maxCount"> The maximum number of nodes for auto-scaling. </param>
        /// <param name="minCount"> The minimum number of nodes for auto-scaling. </param>
        /// <param name="enableAutoScaling"> Whether to enable auto-scaler. </param>
        /// <param name="scaleDownMode"> This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete. </param>
        /// <param name="agentPoolType"> The type of Agent Pool. </param>
        /// <param name="mode"> A cluster must have at least one &apos;System&apos; Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools. </param>
        /// <param name="orchestratorVersion"> Both patch version &lt;major.minor.patch&gt; (e.g. 1.20.13) and &lt;major.minor&gt; (e.g. 1.20) are supported. When &lt;major.minor&gt; is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same &lt;major.minor&gt; once it has been created (e.g. 1.14.x -&gt; 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool). </param>
        /// <param name="currentOrchestratorVersion"> If orchestratorVersion is a fully specified version &lt;major.minor.patch&gt;, this field will be exactly equal to it. If orchestratorVersion is &lt;major.minor&gt;, this field will contain the full &lt;major.minor.patch&gt; version being used. </param>
        /// <param name="nodeImageVersion"> The version of node image. </param>
        /// <param name="upgradeMaxSurge"> Settings for upgrading the agentpool. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state. </param>
        /// <param name="powerStateCode"> When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded. </param>
        /// <param name="availabilityZones"> The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is &apos;VirtualMachineScaleSets&apos;. </param>
        /// <param name="enableNodePublicIP"> Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false. </param>
        /// <param name="nodePublicIPPrefixId"> This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}. </param>
        /// <param name="scaleSetPriority"> The Virtual Machine Scale Set priority. If not specified, the default is &apos;Regular&apos;. </param>
        /// <param name="scaleSetEvictionPolicy"> This cannot be specified unless the scaleSetPriority is &apos;Spot&apos;. If not specified, the default is &apos;Delete&apos;. </param>
        /// <param name="spotMaxPrice"> Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing). </param>
        /// <param name="tags"> The tags to be persisted on the agent pool virtual machine scale set. </param>
        /// <param name="nodeLabels"> The node labels to be persisted across all nodes in agent pool. </param>
        /// <param name="nodeTaints"> The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. </param>
        /// <param name="proximityPlacementGroupId"> The ID for Proximity Placement Group. </param>
        /// <param name="kubeletConfig"> The Kubelet configuration on the agent pool nodes. </param>
        /// <param name="linuxOSConfig"> The OS configuration of Linux agent nodes. </param>
        /// <param name="enableEncryptionAtHost"> This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption. </param>
        /// <param name="enableUltraSsd"> Whether to enable UltraSSD. </param>
        /// <param name="enableFips"> See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details. </param>
        /// <param name="gpuInstanceProfile"> GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. </param>
        /// <param name="creationDataSourceResourceId"> CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot. </param>
        /// <returns> A new <see cref="Models.ManagedClusterAgentPoolProfileProperties"/> instance for mocking. </returns>
        public static ManagedClusterAgentPoolProfileProperties ManagedClusterAgentPoolProfileProperties(int? count = null, string vmSize = null, int? osDiskSizeInGB = null, ContainerServiceOSDiskType? osDiskType = null, KubeletDiskType? kubeletDiskType = null, WorkloadRuntime? workloadRuntime = null, ResourceIdentifier vnetSubnetId = null, ResourceIdentifier podSubnetId = null, int? maxPods = null, ContainerServiceOSType? osType = null, ContainerServiceOSSku? osSku = null, int? maxCount = null, int? minCount = null, bool? enableAutoScaling = null, ScaleDownMode? scaleDownMode = null, AgentPoolType? agentPoolType = null, AgentPoolMode? mode = null, string orchestratorVersion = null, string currentOrchestratorVersion = null, string nodeImageVersion = null, string upgradeMaxSurge = null, string provisioningState = null, ContainerServiceStateCode? powerStateCode = null, IEnumerable<string> availabilityZones = null, bool? enableNodePublicIP = null, ResourceIdentifier nodePublicIPPrefixId = null, ScaleSetPriority? scaleSetPriority = null, ScaleSetEvictionPolicy? scaleSetEvictionPolicy = null, float? spotMaxPrice = null, IDictionary<string, string> tags = null, IDictionary<string, string> nodeLabels = null, IEnumerable<string> nodeTaints = null, ResourceIdentifier proximityPlacementGroupId = null, KubeletConfig kubeletConfig = null, LinuxOSConfig linuxOSConfig = null, bool? enableEncryptionAtHost = null, bool? enableUltraSsd = null, bool? enableFips = null, GpuInstanceProfile? gpuInstanceProfile = null, ResourceIdentifier creationDataSourceResourceId = null)
        {
            availabilityZones ??= new List<string>();
            tags ??= new Dictionary<string, string>();
            nodeLabels ??= new Dictionary<string, string>();
            nodeTaints ??= new List<string>();

            return new ManagedClusterAgentPoolProfileProperties(count, vmSize, osDiskSizeInGB, osDiskType, kubeletDiskType, workloadRuntime, vnetSubnetId, podSubnetId, maxPods, osType, osSku, maxCount, minCount, enableAutoScaling, scaleDownMode, agentPoolType, mode, orchestratorVersion, currentOrchestratorVersion, nodeImageVersion, new AgentPoolUpgradeSettings(upgradeMaxSurge), provisioningState, new ContainerServicePowerState(powerStateCode), availabilityZones?.ToList(), enableNodePublicIP, nodePublicIPPrefixId, scaleSetPriority, scaleSetEvictionPolicy, spotMaxPrice, tags, nodeLabels, nodeTaints?.ToList(), proximityPlacementGroupId, kubeletConfig, linuxOSConfig, enableEncryptionAtHost, enableUltraSsd, enableFips, gpuInstanceProfile, new ContainerServiceCreationData(creationDataSourceResourceId));
        }

        /// <summary> Initializes a new instance of KubeletConfig. </summary>
        /// <param name="cpuManagerPolicy"> The default is &apos;none&apos;. See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information. Allowed values are &apos;none&apos; and &apos;static&apos;. </param>
        /// <param name="isCpuCfsQuotaEnabled"> The default is true. </param>
        /// <param name="cpuCfsQuotaPeriod"> The default is &apos;100ms.&apos; Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix. For example: &apos;300ms&apos;, &apos;2h45m&apos;. Supported units are &apos;ns&apos;, &apos;us&apos;, &apos;ms&apos;, &apos;s&apos;, &apos;m&apos;, and &apos;h&apos;. </param>
        /// <param name="imageGcHighThreshold"> To disable image garbage collection, set to 100. The default is 85%. </param>
        /// <param name="imageGcLowThreshold"> This cannot be set higher than imageGcHighThreshold. The default is 80%. </param>
        /// <param name="topologyManagerPolicy"> For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is &apos;none&apos;. Allowed values are &apos;none&apos;, &apos;best-effort&apos;, &apos;restricted&apos;, and &apos;single-numa-node&apos;. </param>
        /// <param name="allowedUnsafeSysctls"> Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`). </param>
        /// <param name="failStartWithSwapOn"> If set to true it will make the Kubelet fail to start if swap is enabled on the node. </param>
        /// <param name="containerLogMaxSizeInMB"> The maximum size (e.g. 10Mi) of container log file before it is rotated. </param>
        /// <param name="containerLogMaxFiles"> The maximum number of container log files that can be present for a container. The number must be ≥ 2. </param>
        /// <param name="podMaxPids"> The maximum number of processes per pod. </param>
        /// <returns> A new <see cref="Models.KubeletConfig"/> instance for mocking. </returns>
        public static KubeletConfig KubeletConfig(string cpuManagerPolicy = null, bool? isCpuCfsQuotaEnabled = null, string cpuCfsQuotaPeriod = null, int? imageGcHighThreshold = null, int? imageGcLowThreshold = null, string topologyManagerPolicy = null, IEnumerable<string> allowedUnsafeSysctls = null, bool? failStartWithSwapOn = null, int? containerLogMaxSizeInMB = null, int? containerLogMaxFiles = null, int? podMaxPids = null)
        {
            allowedUnsafeSysctls ??= new List<string>();

            return new KubeletConfig(cpuManagerPolicy, isCpuCfsQuotaEnabled, cpuCfsQuotaPeriod, imageGcHighThreshold, imageGcLowThreshold, topologyManagerPolicy, allowedUnsafeSysctls?.ToList(), failStartWithSwapOn, containerLogMaxSizeInMB, containerLogMaxFiles, podMaxPids);
        }

        /// <summary> Initializes a new instance of LinuxOSConfig. </summary>
        /// <param name="sysctls"> Sysctl settings for Linux agent nodes. </param>
        /// <param name="transparentHugePageEnabled"> Valid values are &apos;always&apos;, &apos;madvise&apos;, and &apos;never&apos;. The default is &apos;always&apos;. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge). </param>
        /// <param name="transparentHugePageDefrag"> Valid values are &apos;always&apos;, &apos;defer&apos;, &apos;defer+madvise&apos;, &apos;madvise&apos; and &apos;never&apos;. The default is &apos;madvise&apos;. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge). </param>
        /// <param name="swapFileSizeInMB"> The size in MB of a swap file that will be created on each node. </param>
        /// <returns> A new <see cref="Models.LinuxOSConfig"/> instance for mocking. </returns>
        public static LinuxOSConfig LinuxOSConfig(SysctlConfig sysctls = null, string transparentHugePageEnabled = null, string transparentHugePageDefrag = null, int? swapFileSizeInMB = null)
        {
            return new LinuxOSConfig(sysctls, transparentHugePageEnabled, transparentHugePageDefrag, swapFileSizeInMB);
        }

        /// <summary> Initializes a new instance of SysctlConfig. </summary>
        /// <param name="netCoreSomaxconn"> Sysctl setting net.core.somaxconn. </param>
        /// <param name="netCoreNetdevMaxBacklog"> Sysctl setting net.core.netdev_max_backlog. </param>
        /// <param name="netCoreRmemDefault"> Sysctl setting net.core.rmem_default. </param>
        /// <param name="netCoreRmemMax"> Sysctl setting net.core.rmem_max. </param>
        /// <param name="netCoreWmemDefault"> Sysctl setting net.core.wmem_default. </param>
        /// <param name="netCoreWmemMax"> Sysctl setting net.core.wmem_max. </param>
        /// <param name="netCoreOptmemMax"> Sysctl setting net.core.optmem_max. </param>
        /// <param name="netIPv4TcpMaxSynBacklog"> Sysctl setting net.ipv4.tcp_max_syn_backlog. </param>
        /// <param name="netIPv4TcpMaxTwBuckets"> Sysctl setting net.ipv4.tcp_max_tw_buckets. </param>
        /// <param name="netIPv4TcpFinTimeout"> Sysctl setting net.ipv4.tcp_fin_timeout. </param>
        /// <param name="netIPv4TcpKeepaliveTime"> Sysctl setting net.ipv4.tcp_keepalive_time. </param>
        /// <param name="netIPv4TcpKeepaliveProbes"> Sysctl setting net.ipv4.tcp_keepalive_probes. </param>
        /// <param name="netIPv4TcpKeepaliveIntvl"> Sysctl setting net.ipv4.tcp_keepalive_intvl. </param>
        /// <param name="netIPv4TcpTwReuse"> Sysctl setting net.ipv4.tcp_tw_reuse. </param>
        /// <param name="netIPv4IPLocalPortRange"> Sysctl setting net.ipv4.ip_local_port_range. </param>
        /// <param name="netIPv4NeighDefaultGcThresh1"> Sysctl setting net.ipv4.neigh.default.gc_thresh1. </param>
        /// <param name="netIPv4NeighDefaultGcThresh2"> Sysctl setting net.ipv4.neigh.default.gc_thresh2. </param>
        /// <param name="netIPv4NeighDefaultGcThresh3"> Sysctl setting net.ipv4.neigh.default.gc_thresh3. </param>
        /// <param name="netNetfilterNfConntrackMax"> Sysctl setting net.netfilter.nf_conntrack_max. </param>
        /// <param name="netNetfilterNfConntrackBuckets"> Sysctl setting net.netfilter.nf_conntrack_buckets. </param>
        /// <param name="fsInotifyMaxUserWatches"> Sysctl setting fs.inotify.max_user_watches. </param>
        /// <param name="fsFileMax"> Sysctl setting fs.file-max. </param>
        /// <param name="fsAioMaxNr"> Sysctl setting fs.aio-max-nr. </param>
        /// <param name="fsNrOpen"> Sysctl setting fs.nr_open. </param>
        /// <param name="kernelThreadsMax"> Sysctl setting kernel.threads-max. </param>
        /// <param name="vmMaxMapCount"> Sysctl setting vm.max_map_count. </param>
        /// <param name="vmSwappiness"> Sysctl setting vm.swappiness. </param>
        /// <param name="vmVfsCachePressure"> Sysctl setting vm.vfs_cache_pressure. </param>
        /// <returns> A new <see cref="Models.SysctlConfig"/> instance for mocking. </returns>
        public static SysctlConfig SysctlConfig(int? netCoreSomaxconn = null, int? netCoreNetdevMaxBacklog = null, int? netCoreRmemDefault = null, int? netCoreRmemMax = null, int? netCoreWmemDefault = null, int? netCoreWmemMax = null, int? netCoreOptmemMax = null, int? netIPv4TcpMaxSynBacklog = null, int? netIPv4TcpMaxTwBuckets = null, int? netIPv4TcpFinTimeout = null, int? netIPv4TcpKeepaliveTime = null, int? netIPv4TcpKeepaliveProbes = null, int? netIPv4TcpKeepaliveIntvl = null, bool? netIPv4TcpTwReuse = null, string netIPv4IPLocalPortRange = null, int? netIPv4NeighDefaultGcThresh1 = null, int? netIPv4NeighDefaultGcThresh2 = null, int? netIPv4NeighDefaultGcThresh3 = null, int? netNetfilterNfConntrackMax = null, int? netNetfilterNfConntrackBuckets = null, int? fsInotifyMaxUserWatches = null, int? fsFileMax = null, int? fsAioMaxNr = null, int? fsNrOpen = null, int? kernelThreadsMax = null, int? vmMaxMapCount = null, int? vmSwappiness = null, int? vmVfsCachePressure = null)
        {
            return new SysctlConfig(netCoreSomaxconn, netCoreNetdevMaxBacklog, netCoreRmemDefault, netCoreRmemMax, netCoreWmemDefault, netCoreWmemMax, netCoreOptmemMax, netIPv4TcpMaxSynBacklog, netIPv4TcpMaxTwBuckets, netIPv4TcpFinTimeout, netIPv4TcpKeepaliveTime, netIPv4TcpKeepaliveProbes, netIPv4TcpKeepaliveIntvl, netIPv4TcpTwReuse, netIPv4IPLocalPortRange, netIPv4NeighDefaultGcThresh1, netIPv4NeighDefaultGcThresh2, netIPv4NeighDefaultGcThresh3, netNetfilterNfConntrackMax, netNetfilterNfConntrackBuckets, fsInotifyMaxUserWatches, fsFileMax, fsAioMaxNr, fsNrOpen, kernelThreadsMax, vmMaxMapCount, vmSwappiness, vmVfsCachePressure);
        }

        /// <summary> Initializes a new instance of ManagedClusterWindowsProfile. </summary>
        /// <param name="adminUsername"> Specifies the name of the administrator account. &lt;br&gt;&lt;br&gt; **Restriction:** Cannot end in &quot;.&quot; &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;administrator&quot;, &quot;admin&quot;, &quot;user&quot;, &quot;user1&quot;, &quot;test&quot;, &quot;user2&quot;, &quot;test1&quot;, &quot;user3&quot;, &quot;admin1&quot;, &quot;1&quot;, &quot;123&quot;, &quot;a&quot;, &quot;actuser&quot;, &quot;adm&quot;, &quot;admin2&quot;, &quot;aspnet&quot;, &quot;backup&quot;, &quot;console&quot;, &quot;david&quot;, &quot;guest&quot;, &quot;john&quot;, &quot;owner&quot;, &quot;root&quot;, &quot;server&quot;, &quot;sql&quot;, &quot;support&quot;, &quot;support_388945a0&quot;, &quot;sys&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;user4&quot;, &quot;user5&quot;. &lt;br&gt;&lt;br&gt; **Minimum-length:** 1 character &lt;br&gt;&lt;br&gt; **Max-length:** 20 characters. </param>
        /// <param name="adminPassword"> Specifies the password of the administrator account. &lt;br&gt;&lt;br&gt; **Minimum-length:** 8 characters &lt;br&gt;&lt;br&gt; **Max-length:** 123 characters &lt;br&gt;&lt;br&gt; **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled &lt;br&gt; Has lower characters &lt;br&gt;Has upper characters &lt;br&gt; Has a digit &lt;br&gt; Has a special character (Regex match [\W_]) &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;abc@123&quot;, &quot;P@$$w0rd&quot;, &quot;P@ssw0rd&quot;, &quot;P@ssword123&quot;, &quot;Pa$$word&quot;, &quot;pass@word1&quot;, &quot;Password!&quot;, &quot;Password1&quot;, &quot;Password22&quot;, &quot;iloveyou!&quot;. </param>
        /// <param name="licenseType"> The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details. </param>
        /// <param name="isCsiProxyEnabled"> For more details on CSI proxy, see the [CSI proxy GitHub repo](https://github.com/kubernetes-csi/csi-proxy). </param>
        /// <param name="gmsaProfile"> The Windows gMSA Profile in the Managed Cluster. </param>
        /// <returns> A new <see cref="Models.ManagedClusterWindowsProfile"/> instance for mocking. </returns>
        public static ManagedClusterWindowsProfile ManagedClusterWindowsProfile(string adminUsername = null, string adminPassword = null, WindowsVmLicenseType? licenseType = null, bool? isCsiProxyEnabled = null, WindowsGmsaProfile gmsaProfile = null)
        {
            return new ManagedClusterWindowsProfile(adminUsername, adminPassword, licenseType, isCsiProxyEnabled, gmsaProfile);
        }

        /// <summary> Initializes a new instance of WindowsGmsaProfile. </summary>
        /// <param name="isEnabled"> Specifies whether to enable Windows gMSA in the managed cluster. </param>
        /// <param name="dnsServer"> Specifies the DNS server for Windows gMSA. &lt;br&gt;&lt;br&gt; Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster. </param>
        /// <param name="rootDomainName"> Specifies the root domain name for Windows gMSA. &lt;br&gt;&lt;br&gt; Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster. </param>
        /// <returns> A new <see cref="Models.WindowsGmsaProfile"/> instance for mocking. </returns>
        public static WindowsGmsaProfile WindowsGmsaProfile(bool? isEnabled = null, string dnsServer = null, string rootDomainName = null)
        {
            return new WindowsGmsaProfile(isEnabled, dnsServer, rootDomainName);
        }

        /// <summary> Initializes a new instance of ManagedClusterServicePrincipalProfile. </summary>
        /// <param name="clientId"> The ID for the service principal. </param>
        /// <param name="secret"> The secret password associated with the service principal in plain text. </param>
        /// <returns> A new <see cref="Models.ManagedClusterServicePrincipalProfile"/> instance for mocking. </returns>
        public static ManagedClusterServicePrincipalProfile ManagedClusterServicePrincipalProfile(string clientId = null, string secret = null)
        {
            return new ManagedClusterServicePrincipalProfile(clientId, secret);
        }

        /// <summary> Initializes a new instance of ManagedClusterAddonProfile. </summary>
        /// <param name="isEnabled"> Whether the add-on is enabled or not. </param>
        /// <param name="config"> Key-value pairs for configuring an add-on. </param>
        /// <param name="identity"> Information of user assigned identity used by this add-on. </param>
        /// <returns> A new <see cref="Models.ManagedClusterAddonProfile"/> instance for mocking. </returns>
        public static ManagedClusterAddonProfile ManagedClusterAddonProfile(bool isEnabled = default, IDictionary<string, string> config = null, ManagedClusterAddonProfileIdentity identity = null)
        {
            config ??= new Dictionary<string, string>();

            return new ManagedClusterAddonProfile(isEnabled, config, identity);
        }

        /// <summary> Initializes a new instance of ManagedClusterAddonProfileIdentity. </summary>
        /// <param name="resourceId"> The resource ID of the user assigned identity. </param>
        /// <param name="clientId"> The client ID of the user assigned identity. </param>
        /// <param name="objectId"> The object ID of the user assigned identity. </param>
        /// <returns> A new <see cref="Models.ManagedClusterAddonProfileIdentity"/> instance for mocking. </returns>
        public static ManagedClusterAddonProfileIdentity ManagedClusterAddonProfileIdentity(ResourceIdentifier resourceId = null, Guid? clientId = null, Guid? objectId = null)
        {
            return new ManagedClusterAddonProfileIdentity(resourceId, clientId, objectId);
        }

        /// <summary> Initializes a new instance of ContainerServiceUserAssignedIdentity. </summary>
        /// <param name="resourceId"> The resource ID of the user assigned identity. </param>
        /// <param name="clientId"> The client ID of the user assigned identity. </param>
        /// <param name="objectId"> The object ID of the user assigned identity. </param>
        /// <returns> A new <see cref="Models.ContainerServiceUserAssignedIdentity"/> instance for mocking. </returns>
        public static ContainerServiceUserAssignedIdentity ContainerServiceUserAssignedIdentity(ResourceIdentifier resourceId = null, Guid? clientId = null, Guid? objectId = null)
        {
            return new ContainerServiceUserAssignedIdentity(resourceId, clientId, objectId);
        }

        /// <summary> Initializes a new instance of ManagedClusterPodIdentityProfile. </summary>
        /// <param name="isEnabled"> Whether the pod identity addon is enabled. </param>
        /// <param name="allowNetworkPluginKubenet"> Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing. See [using Kubenet network plugin with AAD Pod Identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity#using-kubenet-network-plugin-with-azure-active-directory-pod-managed-identities) for more information. </param>
        /// <param name="userAssignedIdentities"> The pod identities to use in the cluster. </param>
        /// <param name="userAssignedIdentityExceptions"> The pod identity exceptions to allow. </param>
        /// <returns> A new <see cref="Models.ManagedClusterPodIdentityProfile"/> instance for mocking. </returns>
        public static ManagedClusterPodIdentityProfile ManagedClusterPodIdentityProfile(bool? isEnabled = null, bool? allowNetworkPluginKubenet = null, IEnumerable<ManagedClusterPodIdentity> userAssignedIdentities = null, IEnumerable<ManagedClusterPodIdentityException> userAssignedIdentityExceptions = null)
        {
            userAssignedIdentities ??= new List<ManagedClusterPodIdentity>();
            userAssignedIdentityExceptions ??= new List<ManagedClusterPodIdentityException>();

            return new ManagedClusterPodIdentityProfile(isEnabled, allowNetworkPluginKubenet, userAssignedIdentities?.ToList(), userAssignedIdentityExceptions?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedClusterPodIdentity. </summary>
        /// <param name="name"> The name of the pod identity. </param>
        /// <param name="namespace"> The namespace of the pod identity. </param>
        /// <param name="bindingSelector"> The binding selector to use for the AzureIdentityBinding resource. </param>
        /// <param name="identity"> The user assigned identity details. </param>
        /// <param name="provisioningState"> The current provisioning state of the pod identity. </param>
        /// <param name="errorDetail"></param>
        /// <returns> A new <see cref="Models.ManagedClusterPodIdentity"/> instance for mocking. </returns>
        public static ManagedClusterPodIdentity ManagedClusterPodIdentity(string name = null, string @namespace = null, string bindingSelector = null, ContainerServiceUserAssignedIdentity identity = null, ManagedClusterPodIdentityProvisioningState? provisioningState = null, ResponseError errorDetail = null)
        {
            return new ManagedClusterPodIdentity(name, @namespace, bindingSelector, identity, provisioningState, new ManagedClusterPodIdentityProvisioningInfo(new ManagedClusterPodIdentityProvisioningError(errorDetail)));
        }

        /// <summary> Initializes a new instance of ContainerServiceNetworkProfile. </summary>
        /// <param name="networkPlugin"> Network plugin used for building the Kubernetes network. </param>
        /// <param name="networkPolicy"> Network policy used for building the Kubernetes network. </param>
        /// <param name="networkMode"> This cannot be specified if networkPlugin is anything other than &apos;azure&apos;. </param>
        /// <param name="podCidr"> A CIDR notation IP range from which to assign pod IPs when kubenet is used. </param>
        /// <param name="serviceCidr"> A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges. </param>
        /// <param name="dnsServiceIP"> An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr. </param>
        /// <param name="dockerBridgeCidr"> A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range. </param>
        /// <param name="outboundType"> This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype). </param>
        /// <param name="loadBalancerSku"> The default is &apos;standard&apos;. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs. </param>
        /// <param name="loadBalancerProfile"> Profile of the cluster load balancer. </param>
        /// <param name="natGatewayProfile"> Profile of the cluster NAT gateway. </param>
        /// <param name="podCidrs"> One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. </param>
        /// <param name="serviceCidrs"> One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges. </param>
        /// <param name="ipFamilies"> IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6. </param>
        /// <returns> A new <see cref="Models.ContainerServiceNetworkProfile"/> instance for mocking. </returns>
        public static ContainerServiceNetworkProfile ContainerServiceNetworkProfile(ContainerServiceNetworkPlugin? networkPlugin = null, ContainerServiceNetworkPolicy? networkPolicy = null, ContainerServiceNetworkMode? networkMode = null, string podCidr = null, string serviceCidr = null, string dnsServiceIP = null, string dockerBridgeCidr = null, ContainerServiceOutboundType? outboundType = null, ContainerServiceLoadBalancerSku? loadBalancerSku = null, ManagedClusterLoadBalancerProfile loadBalancerProfile = null, ManagedClusterNatGatewayProfile natGatewayProfile = null, IEnumerable<string> podCidrs = null, IEnumerable<string> serviceCidrs = null, IEnumerable<IPFamily> ipFamilies = null)
        {
            podCidrs ??= new List<string>();
            serviceCidrs ??= new List<string>();
            ipFamilies ??= new List<IPFamily>();

            return new ContainerServiceNetworkProfile(networkPlugin, networkPolicy, networkMode, podCidr, serviceCidr, dnsServiceIP, dockerBridgeCidr, outboundType, loadBalancerSku, loadBalancerProfile, natGatewayProfile, podCidrs?.ToList(), serviceCidrs?.ToList(), ipFamilies?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedClusterLoadBalancerProfile. </summary>
        /// <param name="managedOutboundIPs"> Desired managed outbound IPs for the cluster load balancer. </param>
        /// <param name="outboundPublicIPPrefixes"> Desired outbound IP Prefix resources for the cluster load balancer. </param>
        /// <param name="outboundPublicIPs"> Desired outbound IP resources for the cluster load balancer. </param>
        /// <param name="effectiveOutboundIPs"> The effective outbound IP resources of the cluster load balancer. </param>
        /// <param name="allocatedOutboundPorts"> The desired number of allocated SNAT ports per VM. Allowed values are in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports. </param>
        /// <param name="idleTimeoutInMinutes"> Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 30 minutes. </param>
        /// <param name="enableMultipleStandardLoadBalancers"> Enable multiple standard load balancers per AKS cluster or not. </param>
        /// <returns> A new <see cref="Models.ManagedClusterLoadBalancerProfile"/> instance for mocking. </returns>
        public static ManagedClusterLoadBalancerProfile ManagedClusterLoadBalancerProfile(ManagedClusterLoadBalancerProfileManagedOutboundIPs managedOutboundIPs = null, IEnumerable<WritableSubResource> outboundPublicIPPrefixes = null, IEnumerable<WritableSubResource> outboundPublicIPs = null, IEnumerable<WritableSubResource> effectiveOutboundIPs = null, int? allocatedOutboundPorts = null, int? idleTimeoutInMinutes = null, bool? enableMultipleStandardLoadBalancers = null)
        {
            outboundPublicIPPrefixes ??= new List<WritableSubResource>();
            outboundPublicIPs ??= new List<WritableSubResource>();
            effectiveOutboundIPs ??= new List<WritableSubResource>();

            return new ManagedClusterLoadBalancerProfile(managedOutboundIPs, new ManagedClusterLoadBalancerProfileOutboundIPPrefixes(outboundPublicIPPrefixes?.ToList()), new ManagedClusterLoadBalancerProfileOutboundIPs(outboundPublicIPs?.ToList()), effectiveOutboundIPs?.ToList(), allocatedOutboundPorts, idleTimeoutInMinutes, enableMultipleStandardLoadBalancers);
        }

        /// <summary> Initializes a new instance of ManagedClusterLoadBalancerProfileManagedOutboundIPs. </summary>
        /// <param name="count"> The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. </param>
        /// <param name="countIPv6"> The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack. </param>
        /// <returns> A new <see cref="Models.ManagedClusterLoadBalancerProfileManagedOutboundIPs"/> instance for mocking. </returns>
        public static ManagedClusterLoadBalancerProfileManagedOutboundIPs ManagedClusterLoadBalancerProfileManagedOutboundIPs(int? count = null, int? countIPv6 = null)
        {
            return new ManagedClusterLoadBalancerProfileManagedOutboundIPs(count, countIPv6);
        }

        /// <summary> Initializes a new instance of ManagedClusterNatGatewayProfile. </summary>
        /// <param name="managedOutboundIPCount"> Profile of the managed outbound IP resources of the cluster NAT gateway. </param>
        /// <param name="effectiveOutboundIPs"> The effective outbound IP resources of the cluster NAT gateway. </param>
        /// <param name="idleTimeoutInMinutes"> Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 4 minutes. </param>
        /// <returns> A new <see cref="Models.ManagedClusterNatGatewayProfile"/> instance for mocking. </returns>
        public static ManagedClusterNatGatewayProfile ManagedClusterNatGatewayProfile(int? managedOutboundIPCount = null, IEnumerable<WritableSubResource> effectiveOutboundIPs = null, int? idleTimeoutInMinutes = null)
        {
            effectiveOutboundIPs ??= new List<WritableSubResource>();

            return new ManagedClusterNatGatewayProfile(new ManagedClusterManagedOutboundIPProfile(managedOutboundIPCount), effectiveOutboundIPs?.ToList(), idleTimeoutInMinutes);
        }

        /// <summary> Initializes a new instance of ManagedClusterAadProfile. </summary>
        /// <param name="isManagedAadEnabled"> Whether to enable managed AAD. </param>
        /// <param name="isAzureRbacEnabled"> Whether to enable Azure RBAC for Kubernetes authorization. </param>
        /// <param name="adminGroupObjectIds"> The list of AAD group object IDs that will have admin role of the cluster. </param>
        /// <param name="clientAppId"> The client AAD application ID. </param>
        /// <param name="serverAppId"> The server AAD application ID. </param>
        /// <param name="serverAppSecret"> The server AAD application secret. </param>
        /// <param name="tenantId"> The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription. </param>
        /// <returns> A new <see cref="Models.ManagedClusterAadProfile"/> instance for mocking. </returns>
        public static ManagedClusterAadProfile ManagedClusterAadProfile(bool? isManagedAadEnabled = null, bool? isAzureRbacEnabled = null, IEnumerable<Guid> adminGroupObjectIds = null, Guid? clientAppId = null, Guid? serverAppId = null, string serverAppSecret = null, Guid? tenantId = null)
        {
            adminGroupObjectIds ??= new List<Guid>();

            return new ManagedClusterAadProfile(isManagedAadEnabled, isAzureRbacEnabled, adminGroupObjectIds?.ToList(), clientAppId, serverAppId, serverAppSecret, tenantId);
        }

        /// <summary> Initializes a new instance of ManagedClusterAutoScalerProfile. </summary>
        /// <param name="balanceSimilarNodeGroups"> Valid values are &apos;true&apos; and &apos;false&apos;. </param>
        /// <param name="expander"> If not specified, the default is &apos;random&apos;. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information. </param>
        /// <param name="maxEmptyBulkDelete"> The default is 10. </param>
        /// <param name="maxGracefulTerminationSec"> The default is 600. </param>
        /// <param name="maxNodeProvisionTime"> The default is &apos;15m&apos;. Values must be an integer followed by an &apos;m&apos;. No unit of time other than minutes (m) is supported. </param>
        /// <param name="maxTotalUnreadyPercentage"> The default is 45. The maximum is 100 and the minimum is 0. </param>
        /// <param name="newPodScaleUpDelay"> For scenarios like burst/batch scale where you don&apos;t want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they&apos;re a certain age. The default is &apos;0s&apos;. Values must be an integer followed by a unit (&apos;s&apos; for seconds, &apos;m&apos; for minutes, &apos;h&apos; for hours, etc). </param>
        /// <param name="okTotalUnreadyCount"> This must be an integer. The default is 3. </param>
        /// <param name="scanIntervalInSeconds"> The default is &apos;10&apos;. Values must be an integer number of seconds. </param>
        /// <param name="scaleDownDelayAfterAdd"> The default is &apos;10m&apos;. Values must be an integer followed by an &apos;m&apos;. No unit of time other than minutes (m) is supported. </param>
        /// <param name="scaleDownDelayAfterDelete"> The default is the scan-interval. Values must be an integer followed by an &apos;m&apos;. No unit of time other than minutes (m) is supported. </param>
        /// <param name="scaleDownDelayAfterFailure"> The default is &apos;3m&apos;. Values must be an integer followed by an &apos;m&apos;. No unit of time other than minutes (m) is supported. </param>
        /// <param name="scaleDownUnneededTime"> The default is &apos;10m&apos;. Values must be an integer followed by an &apos;m&apos;. No unit of time other than minutes (m) is supported. </param>
        /// <param name="scaleDownUnreadyTime"> The default is &apos;20m&apos;. Values must be an integer followed by an &apos;m&apos;. No unit of time other than minutes (m) is supported. </param>
        /// <param name="scaleDownUtilizationThreshold"> The default is &apos;0.5&apos;. </param>
        /// <param name="skipNodesWithLocalStorage"> The default is true. </param>
        /// <param name="skipNodesWithSystemPods"> The default is true. </param>
        /// <returns> A new <see cref="Models.ManagedClusterAutoScalerProfile"/> instance for mocking. </returns>
        public static ManagedClusterAutoScalerProfile ManagedClusterAutoScalerProfile(string balanceSimilarNodeGroups = null, AutoScaleExpander? expander = null, string maxEmptyBulkDelete = null, string maxGracefulTerminationSec = null, string maxNodeProvisionTime = null, string maxTotalUnreadyPercentage = null, string newPodScaleUpDelay = null, string okTotalUnreadyCount = null, string scanIntervalInSeconds = null, string scaleDownDelayAfterAdd = null, string scaleDownDelayAfterDelete = null, string scaleDownDelayAfterFailure = null, string scaleDownUnneededTime = null, string scaleDownUnreadyTime = null, string scaleDownUtilizationThreshold = null, string skipNodesWithLocalStorage = null, string skipNodesWithSystemPods = null)
        {
            return new ManagedClusterAutoScalerProfile(balanceSimilarNodeGroups, expander, maxEmptyBulkDelete, maxGracefulTerminationSec, maxNodeProvisionTime, maxTotalUnreadyPercentage, newPodScaleUpDelay, okTotalUnreadyCount, scanIntervalInSeconds, scaleDownDelayAfterAdd, scaleDownDelayAfterDelete, scaleDownDelayAfterFailure, scaleDownUnneededTime, scaleDownUnreadyTime, scaleDownUtilizationThreshold, skipNodesWithLocalStorage, skipNodesWithSystemPods);
        }

        /// <summary> Initializes a new instance of ManagedClusterApiServerAccessProfile. </summary>
        /// <param name="authorizedIPRanges"> IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer. For more information see [API server authorized IP ranges](https://docs.microsoft.com/azure/aks/api-server-authorized-ip-ranges). </param>
        /// <param name="enablePrivateCluster"> For more details, see [Creating a private AKS cluster](https://docs.microsoft.com/azure/aks/private-clusters). </param>
        /// <param name="privateDnsZone"> The default is System. For more details see [configure private DNS zone](https://docs.microsoft.com/azure/aks/private-clusters#configure-private-dns-zone). Allowed values are &apos;system&apos; and &apos;none&apos;. </param>
        /// <param name="enablePrivateClusterPublicFqdn"> Whether to create additional public FQDN for private cluster or not. </param>
        /// <param name="disableRunCommand"> Whether to disable run command for the cluster or not. </param>
        /// <returns> A new <see cref="Models.ManagedClusterApiServerAccessProfile"/> instance for mocking. </returns>
        public static ManagedClusterApiServerAccessProfile ManagedClusterApiServerAccessProfile(IEnumerable<string> authorizedIPRanges = null, bool? enablePrivateCluster = null, string privateDnsZone = null, bool? enablePrivateClusterPublicFqdn = null, bool? disableRunCommand = null)
        {
            authorizedIPRanges ??= new List<string>();

            return new ManagedClusterApiServerAccessProfile(authorizedIPRanges?.ToList(), enablePrivateCluster, privateDnsZone, enablePrivateClusterPublicFqdn, disableRunCommand);
        }

        /// <summary> Initializes a new instance of ContainerServicePrivateLinkResourceData. </summary>
        /// <param name="id"> The ID of the private link resource. </param>
        /// <param name="name"> The name of the private link resource. </param>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="groupId"> The group ID of the resource. </param>
        /// <param name="requiredMembers"> The RequiredMembers of the resource. </param>
        /// <param name="privateLinkServiceId"> The private link service ID of the resource, this field is exposed only to NRP internally. </param>
        /// <returns> A new <see cref="Models.ContainerServicePrivateLinkResourceData"/> instance for mocking. </returns>
        public static ContainerServicePrivateLinkResourceData ContainerServicePrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, string groupId = null, IEnumerable<string> requiredMembers = null, ResourceIdentifier privateLinkServiceId = null)
        {
            requiredMembers ??= new List<string>();

            return new ContainerServicePrivateLinkResourceData(id, name, resourceType, groupId, requiredMembers?.ToList(), privateLinkServiceId);
        }

        /// <summary> Initializes a new instance of ManagedClusterHttpProxyConfig. </summary>
        /// <param name="httpProxy"> The HTTP proxy server endpoint to use. </param>
        /// <param name="httpsProxy"> The HTTPS proxy server endpoint to use. </param>
        /// <param name="noProxy"> The endpoints that should not go through proxy. </param>
        /// <param name="trustedCA"> Alternative CA cert to use for connecting to proxy servers. </param>
        /// <returns> A new <see cref="Models.ManagedClusterHttpProxyConfig"/> instance for mocking. </returns>
        public static ManagedClusterHttpProxyConfig ManagedClusterHttpProxyConfig(string httpProxy = null, string httpsProxy = null, IEnumerable<string> noProxy = null, string trustedCA = null)
        {
            noProxy ??= new List<string>();

            return new ManagedClusterHttpProxyConfig(httpProxy, httpsProxy, noProxy?.ToList(), trustedCA);
        }

        /// <summary> Initializes a new instance of ManagedClusterSecurityProfileAzureDefender. </summary>
        /// <param name="isEnabled"> Whether to enable Azure Defender. </param>
        /// <param name="logAnalyticsWorkspaceResourceId"> Resource ID of the Log Analytics workspace to be associated with Azure Defender.  When Azure Defender is enabled, this field is required and must be a valid workspace resource ID. When Azure Defender is disabled, leave the field empty. </param>
        /// <returns> A new <see cref="Models.ManagedClusterSecurityProfileAzureDefender"/> instance for mocking. </returns>
        public static ManagedClusterSecurityProfileAzureDefender ManagedClusterSecurityProfileAzureDefender(bool? isEnabled = null, ResourceIdentifier logAnalyticsWorkspaceResourceId = null)
        {
            return new ManagedClusterSecurityProfileAzureDefender(isEnabled, logAnalyticsWorkspaceResourceId);
        }

        /// <summary> Initializes a new instance of ManagedClusterStorageProfile. </summary>
        /// <param name="isEnabled"> AzureDisk CSI Driver settings for the storage profile. </param>
        /// <param name="isEnabled"> AzureFile CSI Driver settings for the storage profile. </param>
        /// <param name="isEnabled"> Snapshot Controller settings for the storage profile. </param>
        /// <returns> A new <see cref="Models.ManagedClusterStorageProfile"/> instance for mocking. </returns>
        public static ManagedClusterStorageProfile ManagedClusterStorageProfile(bool? isEnabled = null, bool? isEnabled = null, bool? isEnabled = null)
        {
            return new ManagedClusterStorageProfile(new ManagedClusterStorageProfileDiskCsiDriver(isEnabled), new ManagedClusterStorageProfileFileCsiDriver(isEnabled), new ManagedClusterStorageProfileSnapshotController(isEnabled));
        }

        /// <summary> Initializes a new instance of ManagedClusterUpgradeProfileData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="controlPlaneProfile"> The list of available upgrade versions for the control plane. </param>
        /// <param name="agentPoolProfiles"> The list of available upgrade versions for agent pools. </param>
        /// <returns> A new <see cref="ContainerService.ManagedClusterUpgradeProfileData"/> instance for mocking. </returns>
        public static ManagedClusterUpgradeProfileData ManagedClusterUpgradeProfileData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedClusterPoolUpgradeProfile controlPlaneProfile = null, IEnumerable<ManagedClusterPoolUpgradeProfile> agentPoolProfiles = null)
        {
            agentPoolProfiles ??= new List<ManagedClusterPoolUpgradeProfile>();

            return new ManagedClusterUpgradeProfileData(id, name, resourceType, systemData, controlPlaneProfile, agentPoolProfiles?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedClusterPoolUpgradeProfile. </summary>
        /// <param name="kubernetesVersion"> The Kubernetes version (major.minor.patch). </param>
        /// <param name="name"> The Agent Pool name. </param>
        /// <param name="osType"> The operating system type. The default is Linux. </param>
        /// <param name="upgrades"> List of orchestrator types and versions available for upgrade. </param>
        /// <returns> A new <see cref="Models.ManagedClusterPoolUpgradeProfile"/> instance for mocking. </returns>
        public static ManagedClusterPoolUpgradeProfile ManagedClusterPoolUpgradeProfile(string kubernetesVersion = null, string name = null, ContainerServiceOSType osType = default, IEnumerable<ManagedClusterPoolUpgradeProfileUpgradesItem> upgrades = null)
        {
            upgrades ??= new List<ManagedClusterPoolUpgradeProfileUpgradesItem>();

            return new ManagedClusterPoolUpgradeProfile(kubernetesVersion, name, osType, upgrades?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedClusterPoolUpgradeProfileUpgradesItem. </summary>
        /// <param name="kubernetesVersion"> The Kubernetes version (major.minor.patch). </param>
        /// <param name="isPreview"> Whether the Kubernetes version is currently in preview. </param>
        /// <returns> A new <see cref="Models.ManagedClusterPoolUpgradeProfileUpgradesItem"/> instance for mocking. </returns>
        public static ManagedClusterPoolUpgradeProfileUpgradesItem ManagedClusterPoolUpgradeProfileUpgradesItem(string kubernetesVersion = null, bool? isPreview = null)
        {
            return new ManagedClusterPoolUpgradeProfileUpgradesItem(kubernetesVersion, isPreview);
        }

        /// <summary> Initializes a new instance of ManagedClusterAccessProfile. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kubeConfig"> Base64-encoded Kubernetes configuration file. </param>
        /// <returns> A new <see cref="Models.ManagedClusterAccessProfile"/> instance for mocking. </returns>
        public static ManagedClusterAccessProfile ManagedClusterAccessProfile(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, byte[] kubeConfig = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ManagedClusterAccessProfile(id, name, resourceType, systemData, tags, location, kubeConfig);
        }

        /// <summary> Initializes a new instance of ManagedClusterCredentials. </summary>
        /// <param name="kubeconfigs"> Base64-encoded Kubernetes configuration file. </param>
        /// <returns> A new <see cref="Models.ManagedClusterCredentials"/> instance for mocking. </returns>
        public static ManagedClusterCredentials ManagedClusterCredentials(IEnumerable<ManagedClusterCredential> kubeconfigs = null)
        {
            kubeconfigs ??= new List<ManagedClusterCredential>();

            return new ManagedClusterCredentials(kubeconfigs?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedClusterCredential. </summary>
        /// <param name="name"> The name of the credential. </param>
        /// <param name="value"> Base64-encoded Kubernetes configuration file. </param>
        /// <returns> A new <see cref="Models.ManagedClusterCredential"/> instance for mocking. </returns>
        public static ManagedClusterCredential ManagedClusterCredential(string name = null, byte[] value = null)
        {
            return new ManagedClusterCredential(name, value);
        }

        /// <summary> Initializes a new instance of ContainerServiceMaintenanceConfigurationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="timesInWeek"> If two array entries specify the same day of the week, the applied configuration is the union of times in both entries. </param>
        /// <param name="notAllowedTimes"> Time slots on which upgrade is not allowed. </param>
        /// <returns> A new <see cref="ContainerService.ContainerServiceMaintenanceConfigurationData"/> instance for mocking. </returns>
        public static ContainerServiceMaintenanceConfigurationData ContainerServiceMaintenanceConfigurationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<ContainerServiceTimeInWeek> timesInWeek = null, IEnumerable<ContainerServiceTimeSpan> notAllowedTimes = null)
        {
            timesInWeek ??= new List<ContainerServiceTimeInWeek>();
            notAllowedTimes ??= new List<ContainerServiceTimeSpan>();

            return new ContainerServiceMaintenanceConfigurationData(id, name, resourceType, systemData, timesInWeek?.ToList(), notAllowedTimes?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerServiceTimeInWeek. </summary>
        /// <param name="day"> The day of the week. </param>
        /// <param name="hourSlots"> Each integer hour represents a time range beginning at 0m after the hour ending at the next hour (non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC time range. </param>
        /// <returns> A new <see cref="Models.ContainerServiceTimeInWeek"/> instance for mocking. </returns>
        public static ContainerServiceTimeInWeek ContainerServiceTimeInWeek(ContainerServiceWeekDay? day = null, IEnumerable<int> hourSlots = null)
        {
            hourSlots ??= new List<int>();

            return new ContainerServiceTimeInWeek(day, hourSlots?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerServiceTimeSpan. </summary>
        /// <param name="startOn"> The start of a time span. </param>
        /// <param name="endOn"> The end of a time span. </param>
        /// <returns> A new <see cref="Models.ContainerServiceTimeSpan"/> instance for mocking. </returns>
        public static ContainerServiceTimeSpan ContainerServiceTimeSpan(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null)
        {
            return new ContainerServiceTimeSpan(startOn, endOn);
        }

        /// <summary> Initializes a new instance of ContainerServiceAgentPoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="count"> Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1. </param>
        /// <param name="vmSize"> VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions. </param>
        /// <param name="osDiskSizeInGB"> OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified. </param>
        /// <param name="osDiskType"> The default is &apos;Ephemeral&apos; if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to &apos;Managed&apos;. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os). </param>
        /// <param name="kubeletDiskType"> Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. </param>
        /// <param name="workloadRuntime"> Determines the type of workload a node can run. </param>
        /// <param name="vnetSubnetId"> If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. </param>
        /// <param name="podSubnetId"> If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. </param>
        /// <param name="maxPods"> The maximum number of pods that can run on a node. </param>
        /// <param name="osType"> The operating system type. The default is Linux. </param>
        /// <param name="osSku"> Specifies an OS SKU. This value must not be specified if OSType is Windows. </param>
        /// <param name="maxCount"> The maximum number of nodes for auto-scaling. </param>
        /// <param name="minCount"> The minimum number of nodes for auto-scaling. </param>
        /// <param name="enableAutoScaling"> Whether to enable auto-scaler. </param>
        /// <param name="scaleDownMode"> This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete. </param>
        /// <param name="typePropertiesType"> The type of Agent Pool. </param>
        /// <param name="mode"> A cluster must have at least one &apos;System&apos; Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools. </param>
        /// <param name="orchestratorVersion"> Both patch version &lt;major.minor.patch&gt; (e.g. 1.20.13) and &lt;major.minor&gt; (e.g. 1.20) are supported. When &lt;major.minor&gt; is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same &lt;major.minor&gt; once it has been created (e.g. 1.14.x -&gt; 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool). </param>
        /// <param name="currentOrchestratorVersion"> If orchestratorVersion is a fully specified version &lt;major.minor.patch&gt;, this field will be exactly equal to it. If orchestratorVersion is &lt;major.minor&gt;, this field will contain the full &lt;major.minor.patch&gt; version being used. </param>
        /// <param name="nodeImageVersion"> The version of node image. </param>
        /// <param name="upgradeMaxSurge"> Settings for upgrading the agentpool. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state. </param>
        /// <param name="powerStateCode"> When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded. </param>
        /// <param name="availabilityZones"> The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is &apos;VirtualMachineScaleSets&apos;. </param>
        /// <param name="enableNodePublicIP"> Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false. </param>
        /// <param name="nodePublicIPPrefixId"> This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}. </param>
        /// <param name="scaleSetPriority"> The Virtual Machine Scale Set priority. If not specified, the default is &apos;Regular&apos;. </param>
        /// <param name="scaleSetEvictionPolicy"> This cannot be specified unless the scaleSetPriority is &apos;Spot&apos;. If not specified, the default is &apos;Delete&apos;. </param>
        /// <param name="spotMaxPrice"> Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing). </param>
        /// <param name="tags"> The tags to be persisted on the agent pool virtual machine scale set. </param>
        /// <param name="nodeLabels"> The node labels to be persisted across all nodes in agent pool. </param>
        /// <param name="nodeTaints"> The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. </param>
        /// <param name="proximityPlacementGroupId"> The ID for Proximity Placement Group. </param>
        /// <param name="kubeletConfig"> The Kubelet configuration on the agent pool nodes. </param>
        /// <param name="linuxOSConfig"> The OS configuration of Linux agent nodes. </param>
        /// <param name="enableEncryptionAtHost"> This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption. </param>
        /// <param name="enableUltraSsd"> Whether to enable UltraSSD. </param>
        /// <param name="enableFips"> See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details. </param>
        /// <param name="gpuInstanceProfile"> GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. </param>
        /// <param name="creationDataSourceResourceId"> CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot. </param>
        /// <returns> A new <see cref="ContainerService.ContainerServiceAgentPoolData"/> instance for mocking. </returns>
        public static ContainerServiceAgentPoolData ContainerServiceAgentPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? count = null, string vmSize = null, int? osDiskSizeInGB = null, ContainerServiceOSDiskType? osDiskType = null, KubeletDiskType? kubeletDiskType = null, WorkloadRuntime? workloadRuntime = null, ResourceIdentifier vnetSubnetId = null, ResourceIdentifier podSubnetId = null, int? maxPods = null, ContainerServiceOSType? osType = null, ContainerServiceOSSku? osSku = null, int? maxCount = null, int? minCount = null, bool? enableAutoScaling = null, ScaleDownMode? scaleDownMode = null, AgentPoolType? typePropertiesType = null, AgentPoolMode? mode = null, string orchestratorVersion = null, string currentOrchestratorVersion = null, string nodeImageVersion = null, string upgradeMaxSurge = null, string provisioningState = null, ContainerServiceStateCode? powerStateCode = null, IEnumerable<string> availabilityZones = null, bool? enableNodePublicIP = null, ResourceIdentifier nodePublicIPPrefixId = null, ScaleSetPriority? scaleSetPriority = null, ScaleSetEvictionPolicy? scaleSetEvictionPolicy = null, float? spotMaxPrice = null, IDictionary<string, string> tags = null, IDictionary<string, string> nodeLabels = null, IEnumerable<string> nodeTaints = null, ResourceIdentifier proximityPlacementGroupId = null, KubeletConfig kubeletConfig = null, LinuxOSConfig linuxOSConfig = null, bool? enableEncryptionAtHost = null, bool? enableUltraSsd = null, bool? enableFips = null, GpuInstanceProfile? gpuInstanceProfile = null, ResourceIdentifier creationDataSourceResourceId = null)
        {
            availabilityZones ??= new List<string>();
            tags ??= new Dictionary<string, string>();
            nodeLabels ??= new Dictionary<string, string>();
            nodeTaints ??= new List<string>();

            return new ContainerServiceAgentPoolData(id, name, resourceType, systemData, count, vmSize, osDiskSizeInGB, osDiskType, kubeletDiskType, workloadRuntime, vnetSubnetId, podSubnetId, maxPods, osType, osSku, maxCount, minCount, enableAutoScaling, scaleDownMode, typePropertiesType, mode, orchestratorVersion, currentOrchestratorVersion, nodeImageVersion, new AgentPoolUpgradeSettings(upgradeMaxSurge), provisioningState, new ContainerServicePowerState(powerStateCode), availabilityZones?.ToList(), enableNodePublicIP, nodePublicIPPrefixId, scaleSetPriority, scaleSetEvictionPolicy, spotMaxPrice, tags, nodeLabels, nodeTaints?.ToList(), proximityPlacementGroupId, kubeletConfig, linuxOSConfig, enableEncryptionAtHost, enableUltraSsd, enableFips, gpuInstanceProfile, new ContainerServiceCreationData(creationDataSourceResourceId));
        }

        /// <summary> Initializes a new instance of AgentPoolUpgradeProfileData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kubernetesVersion"> The Kubernetes version (major.minor.patch). </param>
        /// <param name="osType"> The operating system type. The default is Linux. </param>
        /// <param name="upgrades"> List of orchestrator types and versions available for upgrade. </param>
        /// <param name="latestNodeImageVersion"> The latest AKS supported node image version. </param>
        /// <returns> A new <see cref="ContainerService.AgentPoolUpgradeProfileData"/> instance for mocking. </returns>
        public static AgentPoolUpgradeProfileData AgentPoolUpgradeProfileData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string kubernetesVersion = null, ContainerServiceOSType osType = default, IEnumerable<AgentPoolUpgradeProfilePropertiesUpgradesItem> upgrades = null, string latestNodeImageVersion = null)
        {
            upgrades ??= new List<AgentPoolUpgradeProfilePropertiesUpgradesItem>();

            return new AgentPoolUpgradeProfileData(id, name, resourceType, systemData, kubernetesVersion, osType, upgrades?.ToList(), latestNodeImageVersion);
        }

        /// <summary> Initializes a new instance of AgentPoolUpgradeProfilePropertiesUpgradesItem. </summary>
        /// <param name="kubernetesVersion"> The Kubernetes version (major.minor.patch). </param>
        /// <param name="isPreview"> Whether the Kubernetes version is currently in preview. </param>
        /// <returns> A new <see cref="Models.AgentPoolUpgradeProfilePropertiesUpgradesItem"/> instance for mocking. </returns>
        public static AgentPoolUpgradeProfilePropertiesUpgradesItem AgentPoolUpgradeProfilePropertiesUpgradesItem(string kubernetesVersion = null, bool? isPreview = null)
        {
            return new AgentPoolUpgradeProfilePropertiesUpgradesItem(kubernetesVersion, isPreview);
        }

        /// <summary> Initializes a new instance of AgentPoolAvailableVersions. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="agentPoolVersions"> List of versions available for agent pool. </param>
        /// <returns> A new <see cref="Models.AgentPoolAvailableVersions"/> instance for mocking. </returns>
        public static AgentPoolAvailableVersions AgentPoolAvailableVersions(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<AgentPoolAvailableVersion> agentPoolVersions = null)
        {
            agentPoolVersions ??= new List<AgentPoolAvailableVersion>();

            return new AgentPoolAvailableVersions(id, name, resourceType, systemData, agentPoolVersions?.ToList());
        }

        /// <summary> Initializes a new instance of AgentPoolAvailableVersion. </summary>
        /// <param name="isDefault"> Whether this version is the default agent pool version. </param>
        /// <param name="kubernetesVersion"> The Kubernetes version (major.minor.patch). </param>
        /// <param name="isPreview"> Whether Kubernetes version is currently in preview. </param>
        /// <returns> A new <see cref="Models.AgentPoolAvailableVersion"/> instance for mocking. </returns>
        public static AgentPoolAvailableVersion AgentPoolAvailableVersion(bool? isDefault = null, string kubernetesVersion = null, bool? isPreview = null)
        {
            return new AgentPoolAvailableVersion(isDefault, kubernetesVersion, isPreview);
        }

        /// <summary> Initializes a new instance of ContainerServicePrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The current provisioning state. </param>
        /// <param name="privateEndpointId"> The resource of private endpoint. </param>
        /// <param name="connectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <returns> A new <see cref="ContainerService.ContainerServicePrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static ContainerServicePrivateEndpointConnectionData ContainerServicePrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ContainerServicePrivateEndpointConnectionProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, ContainerServicePrivateLinkServiceConnectionState connectionState = null)
        {
            return new ContainerServicePrivateEndpointConnectionData(id, name, resourceType, systemData, provisioningState, ResourceManagerModelFactory.WritableSubResource(privateEndpointId), connectionState);
        }

        /// <summary> Initializes a new instance of ContainerServicePrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> The private link service connection status. </param>
        /// <param name="description"> The private link service connection description. </param>
        /// <returns> A new <see cref="Models.ContainerServicePrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static ContainerServicePrivateLinkServiceConnectionState ContainerServicePrivateLinkServiceConnectionState(ContainerServicePrivateLinkServiceConnectionStatus? status = null, string description = null)
        {
            return new ContainerServicePrivateLinkServiceConnectionState(status, description);
        }

        /// <summary> Initializes a new instance of ManagedClusterRunCommandResult. </summary>
        /// <param name="id"> The command id. </param>
        /// <param name="provisioningState"> provisioning State. </param>
        /// <param name="exitCode"> The exit code of the command. </param>
        /// <param name="startedOn"> The time when the command started. </param>
        /// <param name="finishedOn"> The time when the command finished. </param>
        /// <param name="logs"> The command output. </param>
        /// <param name="reason"> An explanation of why provisioningState is set to failed (if so). </param>
        /// <returns> A new <see cref="Models.ManagedClusterRunCommandResult"/> instance for mocking. </returns>
        public static ManagedClusterRunCommandResult ManagedClusterRunCommandResult(string id = null, string provisioningState = null, int? exitCode = null, DateTimeOffset? startedOn = null, DateTimeOffset? finishedOn = null, string logs = null, string reason = null)
        {
            return new ManagedClusterRunCommandResult(id, provisioningState, exitCode, startedOn, finishedOn, logs, reason);
        }

        /// <summary> Initializes a new instance of ContainerServiceOutboundEnvironmentEndpoint. </summary>
        /// <param name="category"> The category of endpoints accessed by the AKS agent node, e.g. azure-resource-management, apiserver, etc. </param>
        /// <param name="endpoints"> The endpoints that AKS agent nodes connect to. </param>
        /// <returns> A new <see cref="Models.ContainerServiceOutboundEnvironmentEndpoint"/> instance for mocking. </returns>
        public static ContainerServiceOutboundEnvironmentEndpoint ContainerServiceOutboundEnvironmentEndpoint(string category = null, IEnumerable<ContainerServiceEndpointDependency> endpoints = null)
        {
            endpoints ??= new List<ContainerServiceEndpointDependency>();

            return new ContainerServiceOutboundEnvironmentEndpoint(category, endpoints?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerServiceEndpointDependency. </summary>
        /// <param name="domainName"> The domain name of the dependency. </param>
        /// <param name="endpointDetails"> The Ports and Protocols used when connecting to domainName. </param>
        /// <returns> A new <see cref="Models.ContainerServiceEndpointDependency"/> instance for mocking. </returns>
        public static ContainerServiceEndpointDependency ContainerServiceEndpointDependency(string domainName = null, IEnumerable<ContainerServiceEndpointDetail> endpointDetails = null)
        {
            endpointDetails ??= new List<ContainerServiceEndpointDetail>();

            return new ContainerServiceEndpointDependency(domainName, endpointDetails?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerServiceEndpointDetail. </summary>
        /// <param name="ipAddress"> An IP Address that Domain Name currently resolves to. </param>
        /// <param name="port"> The port an endpoint is connected to. </param>
        /// <param name="protocol"> The protocol used for connection. </param>
        /// <param name="description"> Description of the detail. </param>
        /// <returns> A new <see cref="Models.ContainerServiceEndpointDetail"/> instance for mocking. </returns>
        public static ContainerServiceEndpointDetail ContainerServiceEndpointDetail(IPAddress ipAddress = null, int? port = null, string protocol = null, string description = null)
        {
            return new ContainerServiceEndpointDetail(ipAddress, port, protocol, description);
        }

        /// <summary> Initializes a new instance of AgentPoolSnapshotData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="creationDataSourceResourceId"> CreationData to be used to specify the source agent pool resource ID to create this snapshot. </param>
        /// <param name="snapshotType"> The type of a snapshot. The default is NodePool. </param>
        /// <param name="kubernetesVersion"> The version of Kubernetes. </param>
        /// <param name="nodeImageVersion"> The version of node image. </param>
        /// <param name="osType"> The operating system type. The default is Linux. </param>
        /// <param name="osSku"> Specifies an OS SKU. This value must not be specified if OSType is Windows. </param>
        /// <param name="vmSize"> The size of the VM. </param>
        /// <param name="enableFips"> Whether to use a FIPS-enabled OS. </param>
        /// <returns> A new <see cref="ContainerService.AgentPoolSnapshotData"/> instance for mocking. </returns>
        public static AgentPoolSnapshotData AgentPoolSnapshotData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ResourceIdentifier creationDataSourceResourceId = null, SnapshotType? snapshotType = null, string kubernetesVersion = null, string nodeImageVersion = null, ContainerServiceOSType? osType = null, ContainerServiceOSSku? osSku = null, string vmSize = null, bool? enableFips = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AgentPoolSnapshotData(id, name, resourceType, systemData, tags, location, new ContainerServiceCreationData(creationDataSourceResourceId), snapshotType, kubernetesVersion, nodeImageVersion, osType, osSku, vmSize, enableFips);
        }
    }
}
