// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Kubernetes version profile for given major.minor release. </summary>
    public partial class KubernetesVersion
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="KubernetesVersion"/>. </summary>
        internal KubernetesVersion()
        {
            PatchVersions = new ChangeTrackingDictionary<string, KubernetesPatchVersion>();
        }

        /// <summary> Initializes a new instance of <see cref="KubernetesVersion"/>. </summary>
        /// <param name="version"> major.minor version of Kubernetes release. </param>
        /// <param name="capabilities"> Capabilities on this Kubernetes version. </param>
        /// <param name="isPreview"> Whether this version is in preview mode. </param>
        /// <param name="patchVersions"> Patch versions of Kubernetes release. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal KubernetesVersion(string version, KubernetesVersionCapabilities capabilities, bool? isPreview, IReadOnlyDictionary<string, KubernetesPatchVersion> patchVersions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Version = version;
            Capabilities = capabilities;
            IsPreview = isPreview;
            PatchVersions = patchVersions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> major.minor version of Kubernetes release. </summary>
        public string Version { get; }
        /// <summary> Capabilities on this Kubernetes version. </summary>
        internal KubernetesVersionCapabilities Capabilities { get; }
        /// <summary> Gets the capabilities support plan. </summary>
        public IReadOnlyList<KubernetesSupportPlan> CapabilitiesSupportPlan
        {
            get => Capabilities?.SupportPlan;
        }

        /// <summary> Whether this version is in preview mode. </summary>
        public bool? IsPreview { get; }
        /// <summary> Patch versions of Kubernetes release. </summary>
        public IReadOnlyDictionary<string, KubernetesPatchVersion> PatchVersions { get; }
    }
}
