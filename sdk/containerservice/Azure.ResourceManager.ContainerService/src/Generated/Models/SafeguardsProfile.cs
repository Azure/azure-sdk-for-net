// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> The Safeguards profile. </summary>
    public partial class SafeguardsProfile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SafeguardsProfile"/>. </summary>
        /// <param name="level"> The Safeguards level to be used. By default, Safeguards is enabled for all namespaces except those that AKS excludes via systemExcludedNamespaces. </param>
        public SafeguardsProfile(Level level)
        {
            SystemExcludedNamespaces = new ChangeTrackingList<string>();
            Level = level;
            ExcludedNamespaces = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="SafeguardsProfile"/>. </summary>
        /// <param name="systemExcludedNamespaces"> List of namespaces specified by AKS to be excluded from Safeguards. </param>
        /// <param name="version"> The version of constraints to use. </param>
        /// <param name="level"> The Safeguards level to be used. By default, Safeguards is enabled for all namespaces except those that AKS excludes via systemExcludedNamespaces. </param>
        /// <param name="excludedNamespaces"> List of namespaces excluded from Safeguards checks. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SafeguardsProfile(IReadOnlyList<string> systemExcludedNamespaces, string version, Level level, IList<string> excludedNamespaces, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SystemExcludedNamespaces = systemExcludedNamespaces;
            Version = version;
            Level = level;
            ExcludedNamespaces = excludedNamespaces;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SafeguardsProfile"/> for deserialization. </summary>
        internal SafeguardsProfile()
        {
        }

        /// <summary> List of namespaces specified by AKS to be excluded from Safeguards. </summary>
        [WirePath("systemExcludedNamespaces")]
        public IReadOnlyList<string> SystemExcludedNamespaces { get; }
        /// <summary> The version of constraints to use. </summary>
        [WirePath("version")]
        public string Version { get; set; }
        /// <summary> The Safeguards level to be used. By default, Safeguards is enabled for all namespaces except those that AKS excludes via systemExcludedNamespaces. </summary>
        [WirePath("level")]
        public Level Level { get; set; }
        /// <summary> List of namespaces excluded from Safeguards checks. </summary>
        [WirePath("excludedNamespaces")]
        public IList<string> ExcludedNamespaces { get; }
    }
}
