// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Specifies the default seccomp profile applied to all workloads. If not specified, 'Unconfined' will be used by default. </summary>
    public readonly partial struct SeccompDefault : IEquatable<SeccompDefault>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SeccompDefault"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SeccompDefault(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnconfinedValue = "Unconfined";
        private const string RuntimeDefaultValue = "RuntimeDefault";

        /// <summary> No seccomp profile is applied, allowing all system calls. </summary>
        public static SeccompDefault Unconfined { get; } = new SeccompDefault(UnconfinedValue);
        /// <summary> The default seccomp profile for container runtime is applied, which restricts certain system calls for enhanced security. </summary>
        public static SeccompDefault RuntimeDefault { get; } = new SeccompDefault(RuntimeDefaultValue);
        /// <summary> Determines if two <see cref="SeccompDefault"/> values are the same. </summary>
        public static bool operator ==(SeccompDefault left, SeccompDefault right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SeccompDefault"/> values are not the same. </summary>
        public static bool operator !=(SeccompDefault left, SeccompDefault right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SeccompDefault"/>. </summary>
        public static implicit operator SeccompDefault(string value) => new SeccompDefault(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SeccompDefault other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SeccompDefault other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
