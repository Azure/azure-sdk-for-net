// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    public partial class ManagedClusterAadProfile : IUtf8JsonSerializable, IJsonModel<ManagedClusterAadProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ManagedClusterAadProfile>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ManagedClusterAadProfile>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ManagedClusterAadProfile>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ManagedClusterAadProfile)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(IsManagedAadEnabled))
            {
                writer.WritePropertyName("managed"u8);
                writer.WriteBooleanValue(IsManagedAadEnabled.Value);
            }
            if (Optional.IsDefined(IsAzureRbacEnabled))
            {
                writer.WritePropertyName("enableAzureRBAC"u8);
                writer.WriteBooleanValue(IsAzureRbacEnabled.Value);
            }
            if (Optional.IsCollectionDefined(AdminGroupObjectIds))
            {
                writer.WritePropertyName("adminGroupObjectIDs"u8);
                writer.WriteStartArray();
                foreach (var item in AdminGroupObjectIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ClientAppId))
            {
                writer.WritePropertyName("clientAppID"u8);
                writer.WriteStringValue(ClientAppId.Value);
            }
            if (Optional.IsDefined(ServerAppId))
            {
                writer.WritePropertyName("serverAppID"u8);
                writer.WriteStringValue(ServerAppId.Value);
            }
            if (Optional.IsDefined(ServerAppSecret))
            {
                writer.WritePropertyName("serverAppSecret"u8);
                writer.WriteStringValue(ServerAppSecret);
            }
            if (Optional.IsDefined(TenantId))
            {
                writer.WritePropertyName("tenantID"u8);
                writer.WriteStringValue(TenantId.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ManagedClusterAadProfile IJsonModel<ManagedClusterAadProfile>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ManagedClusterAadProfile>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ManagedClusterAadProfile)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeManagedClusterAadProfile(document.RootElement, options);
        }

        internal static ManagedClusterAadProfile DeserializeManagedClusterAadProfile(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> managed = default;
            Optional<bool> enableAzureRBAC = default;
            Optional<IList<Guid>> adminGroupObjectIds = default;
            Optional<Guid> clientAppId = default;
            Optional<Guid> serverAppId = default;
            Optional<string> serverAppSecret = default;
            Optional<Guid> tenantId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("managed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableAzureRBAC"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAzureRBAC = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("adminGroupObjectIDs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Guid> array = new List<Guid>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetGuid());
                    }
                    adminGroupObjectIds = array;
                    continue;
                }
                if (property.NameEquals("clientAppID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clientAppId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("serverAppID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serverAppId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("serverAppSecret"u8))
                {
                    serverAppSecret = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tenantID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tenantId = property.Value.GetGuid();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ManagedClusterAadProfile(Optional.ToNullable(managed), Optional.ToNullable(enableAzureRBAC), Optional.ToList(adminGroupObjectIds), Optional.ToNullable(clientAppId), Optional.ToNullable(serverAppId), serverAppSecret.Value, Optional.ToNullable(tenantId), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(IsManagedAadEnabled))
            {
                builder.Append("  managed:");
                var boolValue = IsManagedAadEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsAzureRbacEnabled))
            {
                builder.Append("  enableAzureRBAC:");
                var boolValue = IsAzureRbacEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsCollectionDefined(AdminGroupObjectIds))
            {
                if (AdminGroupObjectIds.Any())
                {
                    builder.Append("  adminGroupObjectIDs:");
                    builder.AppendLine(" [");
                    foreach (var item in AdminGroupObjectIds)
                    {
                        builder.AppendLine($"    '{item.ToString()}'");
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(ClientAppId))
            {
                builder.Append("  clientAppID:");
                builder.AppendLine($" '{ClientAppId.Value.ToString()}'");
            }

            if (Optional.IsDefined(ServerAppId))
            {
                builder.Append("  serverAppID:");
                builder.AppendLine($" '{ServerAppId.Value.ToString()}'");
            }

            if (Optional.IsDefined(ServerAppSecret))
            {
                builder.Append("  serverAppSecret:");
                if (ServerAppSecret.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ServerAppSecret}'''");
                }
                else
                {
                    builder.AppendLine($" '{ServerAppSecret}'");
                }
            }

            if (Optional.IsDefined(TenantId))
            {
                builder.Append("  tenantID:");
                builder.AppendLine($" '{TenantId.Value.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<ManagedClusterAadProfile>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ManagedClusterAadProfile>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ManagedClusterAadProfile)} does not support '{options.Format}' format.");
            }
        }

        ManagedClusterAadProfile IPersistableModel<ManagedClusterAadProfile>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ManagedClusterAadProfile>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeManagedClusterAadProfile(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(ManagedClusterAadProfile)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ManagedClusterAadProfile>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
