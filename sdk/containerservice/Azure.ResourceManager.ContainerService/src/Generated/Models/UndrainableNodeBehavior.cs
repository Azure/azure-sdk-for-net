// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Defines the behavior for undrainable nodes during upgrade. The most common cause of undrainable nodes is Pod Disruption Budgets (PDBs), but other issues, such as pod termination grace period is exceeding the remaining per-node drain timeout or pod is still being in a running state, can also cause undrainable nodes. </summary>
    public readonly partial struct UndrainableNodeBehavior : IEquatable<UndrainableNodeBehavior>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UndrainableNodeBehavior"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UndrainableNodeBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CordonValue = "Cordon";
        private const string ScheduleValue = "Schedule";

        /// <summary> AKS will cordon the blocked nodes and replace them with surge nodes during upgrade. The blocked nodes will be cordoned and replaced by surge nodes. The blocked nodes will have label 'kubernetes.azure.com/upgrade-status:Quarantined'. A surge node will be retained for each blocked node. A best-effort attempt will be made to delete all other surge nodes. If there are enough surge nodes to replace blocked nodes, then the upgrade operation and the managed cluster will be in failed state. Otherwise, the upgrade operation and the managed cluster will be in canceled state. </summary>
        public static UndrainableNodeBehavior Cordon { get; } = new UndrainableNodeBehavior(CordonValue);
        /// <summary> AKS will mark the blocked nodes schedulable, but the blocked nodes are not upgraded. A best-effort attempt will be made to delete all surge nodes. The upgrade operation and the managed cluster will be in failed state if there are any blocked nodes. </summary>
        public static UndrainableNodeBehavior Schedule { get; } = new UndrainableNodeBehavior(ScheduleValue);
        /// <summary> Determines if two <see cref="UndrainableNodeBehavior"/> values are the same. </summary>
        public static bool operator ==(UndrainableNodeBehavior left, UndrainableNodeBehavior right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UndrainableNodeBehavior"/> values are not the same. </summary>
        public static bool operator !=(UndrainableNodeBehavior left, UndrainableNodeBehavior right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="UndrainableNodeBehavior"/>. </summary>
        public static implicit operator UndrainableNodeBehavior(string value) => new UndrainableNodeBehavior(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UndrainableNodeBehavior other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UndrainableNodeBehavior other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
