// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> The IP allocation mode for pods in the agent pool. Must be used with podSubnetId. The default is 'DynamicIndividual'. </summary>
    public readonly partial struct PodIPAllocationMode : IEquatable<PodIPAllocationMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PodIPAllocationMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PodIPAllocationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DynamicIndividualValue = "DynamicIndividual";
        private const string StaticBlockValue = "StaticBlock";

        /// <summary> Each pod gets a single IP address assigned. This is better for maximizing a small to medium subnet of size /16 or smaller. The Azure CNI cluster with dynamic IP allocation defaults to this mode if the customer does not explicitly specify a podIPAllocationMode. </summary>
        public static PodIPAllocationMode DynamicIndividual { get; } = new PodIPAllocationMode(DynamicIndividualValue);
        /// <summary> Each node is statically allocated CIDR block(s) of size /28 = 16 IPs per block to satisfy the maxPods per node. Number of CIDR blocks &gt;= (maxPods / 16). The block, rather than a single IP, counts against the Azure Vnet Private IP limit of 65K. Therefore block mode is suitable for running larger workloads with more than the current limit of 65K pods in a cluster. This mode is better suited to scale with larger subnets of /15 or bigger. </summary>
        public static PodIPAllocationMode StaticBlock { get; } = new PodIPAllocationMode(StaticBlockValue);
        /// <summary> Determines if two <see cref="PodIPAllocationMode"/> values are the same. </summary>
        public static bool operator ==(PodIPAllocationMode left, PodIPAllocationMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PodIPAllocationMode"/> values are not the same. </summary>
        public static bool operator !=(PodIPAllocationMode left, PodIPAllocationMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PodIPAllocationMode"/>. </summary>
        public static implicit operator PodIPAllocationMode(string value) => new PodIPAllocationMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PodIPAllocationMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PodIPAllocationMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
