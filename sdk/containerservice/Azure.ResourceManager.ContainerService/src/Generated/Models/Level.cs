// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> The Safeguards level to be used. By default, Safeguards is enabled for all namespaces except those that AKS excludes via systemExcludedNamespaces. </summary>
    public readonly partial struct Level : IEquatable<Level>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Level"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Level(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OffValue = "Off";
        private const string WarningValue = "Warning";
        private const string EnforcementValue = "Enforcement";

        /// <summary> Off. </summary>
        public static Level Off { get; } = new Level(OffValue);
        /// <summary> Warning. </summary>
        public static Level Warning { get; } = new Level(WarningValue);
        /// <summary> Enforcement. </summary>
        public static Level Enforcement { get; } = new Level(EnforcementValue);
        /// <summary> Determines if two <see cref="Level"/> values are the same. </summary>
        public static bool operator ==(Level left, Level right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Level"/> values are not the same. </summary>
        public static bool operator !=(Level left, Level right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Level"/>. </summary>
        public static implicit operator Level(string value) => new Level(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Level other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Level other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
