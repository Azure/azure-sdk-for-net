// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Profile of network configuration. </summary>
    public partial class ContainerServiceNetworkProfile
    {
        /// <summary> Initializes a new instance of ContainerServiceNetworkProfile. </summary>
        public ContainerServiceNetworkProfile()
        {
            PodCidrs = new ChangeTrackingList<string>();
            ServiceCidrs = new ChangeTrackingList<string>();
            IPFamilies = new ChangeTrackingList<IPFamily>();
        }

        /// <summary> Initializes a new instance of ContainerServiceNetworkProfile. </summary>
        /// <param name="networkPlugin"> Network plugin used for building the Kubernetes network. </param>
        /// <param name="networkPolicy"> Network policy used for building the Kubernetes network. </param>
        /// <param name="networkMode"> This cannot be specified if networkPlugin is anything other than &apos;azure&apos;. </param>
        /// <param name="podCidr"> A CIDR notation IP range from which to assign pod IPs when kubenet is used. </param>
        /// <param name="serviceCidr"> A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges. </param>
        /// <param name="dnsServiceIP"> An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr. </param>
        /// <param name="dockerBridgeCidr"> A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range. </param>
        /// <param name="outboundType"> This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype). </param>
        /// <param name="loadBalancerSku"> The default is &apos;standard&apos;. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs. </param>
        /// <param name="loadBalancerProfile"> Profile of the cluster load balancer. </param>
        /// <param name="natGatewayProfile"> Profile of the cluster NAT gateway. </param>
        /// <param name="podCidrs"> One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. </param>
        /// <param name="serviceCidrs"> One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges. </param>
        /// <param name="ipFamilies"> IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6. </param>
        internal ContainerServiceNetworkProfile(NetworkPlugin? networkPlugin, NetworkPolicy? networkPolicy, NetworkMode? networkMode, string podCidr, string serviceCidr, string dnsServiceIP, string dockerBridgeCidr, OutboundType? outboundType, LoadBalancerSku? loadBalancerSku, ManagedClusterLoadBalancerProfile loadBalancerProfile, ManagedClusterNatGatewayProfile natGatewayProfile, IList<string> podCidrs, IList<string> serviceCidrs, IList<IPFamily> ipFamilies)
        {
            NetworkPlugin = networkPlugin;
            NetworkPolicy = networkPolicy;
            NetworkMode = networkMode;
            PodCidr = podCidr;
            ServiceCidr = serviceCidr;
            DnsServiceIP = dnsServiceIP;
            DockerBridgeCidr = dockerBridgeCidr;
            OutboundType = outboundType;
            LoadBalancerSku = loadBalancerSku;
            LoadBalancerProfile = loadBalancerProfile;
            NatGatewayProfile = natGatewayProfile;
            PodCidrs = podCidrs;
            ServiceCidrs = serviceCidrs;
            IPFamilies = ipFamilies;
        }

        /// <summary> Network plugin used for building the Kubernetes network. </summary>
        public NetworkPlugin? NetworkPlugin { get; set; }
        /// <summary> Network policy used for building the Kubernetes network. </summary>
        public NetworkPolicy? NetworkPolicy { get; set; }
        /// <summary> This cannot be specified if networkPlugin is anything other than &apos;azure&apos;. </summary>
        public NetworkMode? NetworkMode { get; set; }
        /// <summary> A CIDR notation IP range from which to assign pod IPs when kubenet is used. </summary>
        public string PodCidr { get; set; }
        /// <summary> A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges. </summary>
        public string ServiceCidr { get; set; }
        /// <summary> An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr. </summary>
        public string DnsServiceIP { get; set; }
        /// <summary> A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range. </summary>
        public string DockerBridgeCidr { get; set; }
        /// <summary> This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype). </summary>
        public OutboundType? OutboundType { get; set; }
        /// <summary> The default is &apos;standard&apos;. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs. </summary>
        public LoadBalancerSku? LoadBalancerSku { get; set; }
        /// <summary> Profile of the cluster load balancer. </summary>
        public ManagedClusterLoadBalancerProfile LoadBalancerProfile { get; set; }
        /// <summary> Profile of the cluster NAT gateway. </summary>
        public ManagedClusterNatGatewayProfile NatGatewayProfile { get; set; }
        /// <summary> One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. </summary>
        public IList<string> PodCidrs { get; }
        /// <summary> One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges. </summary>
        public IList<string> ServiceCidrs { get; }
        /// <summary> IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6. </summary>
        public IList<IPFamily> IPFamilies { get; }
    }
}
