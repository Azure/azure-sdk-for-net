// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    public partial class ManagedClusterApiServerAccessProfile : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsCollectionDefined(AuthorizedIPRanges))
            {
                writer.WritePropertyName("authorizedIPRanges"u8);
                writer.WriteStartArray();
                foreach (var item in AuthorizedIPRanges)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(EnablePrivateCluster))
            {
                writer.WritePropertyName("enablePrivateCluster"u8);
                writer.WriteBooleanValue(EnablePrivateCluster.Value);
            }
            if (Core.Optional.IsDefined(PrivateDnsZone))
            {
                writer.WritePropertyName("privateDNSZone"u8);
                writer.WriteStringValue(PrivateDnsZone);
            }
            if (Core.Optional.IsDefined(EnablePrivateClusterPublicFqdn))
            {
                writer.WritePropertyName("enablePrivateClusterPublicFQDN"u8);
                writer.WriteBooleanValue(EnablePrivateClusterPublicFqdn.Value);
            }
            if (Core.Optional.IsDefined(DisableRunCommand))
            {
                writer.WritePropertyName("disableRunCommand"u8);
                writer.WriteBooleanValue(DisableRunCommand.Value);
            }
            if (Core.Optional.IsDefined(EnableVnetIntegration))
            {
                writer.WritePropertyName("enableVnetIntegration"u8);
                writer.WriteBooleanValue(EnableVnetIntegration.Value);
            }
            if (Core.Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId"u8);
                writer.WriteStringValue(SubnetId);
            }
            writer.WriteEndObject();
        }

        internal static ManagedClusterApiServerAccessProfile DeserializeManagedClusterApiServerAccessProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<IList<string>> authorizedIPRanges = default;
            Core.Optional<bool> enablePrivateCluster = default;
            Core.Optional<string> privateDnsZone = default;
            Core.Optional<bool> enablePrivateClusterPublicFQDN = default;
            Core.Optional<bool> disableRunCommand = default;
            Core.Optional<bool> enableVnetIntegration = default;
            Core.Optional<ResourceIdentifier> subnetId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authorizedIPRanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    authorizedIPRanges = array;
                    continue;
                }
                if (property.NameEquals("enablePrivateCluster"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enablePrivateCluster = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("privateDNSZone"u8))
                {
                    privateDnsZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enablePrivateClusterPublicFQDN"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enablePrivateClusterPublicFQDN = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("disableRunCommand"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disableRunCommand = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableVnetIntegration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableVnetIntegration = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("subnetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subnetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
            }
            return new ManagedClusterApiServerAccessProfile(Core.Optional.ToList(authorizedIPRanges), Core.Optional.ToNullable(enablePrivateCluster), privateDnsZone.Value, Core.Optional.ToNullable(enablePrivateClusterPublicFQDN), Core.Optional.ToNullable(disableRunCommand), Core.Optional.ToNullable(enableVnetIntegration), subnetId.Value);
        }
    }
}
