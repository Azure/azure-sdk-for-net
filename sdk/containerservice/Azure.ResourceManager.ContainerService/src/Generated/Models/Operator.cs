// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> operator represents a key's relationship to a set of values. Valid operators are In and NotIn. </summary>
    public readonly partial struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Operator"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InValue = "In";
        private const string NotInValue = "NotIn";
        private const string ExistsValue = "Exists";
        private const string DoesNotExistValue = "DoesNotExist";

        /// <summary> The value of the key should be in the given list. </summary>
        public static Operator In { get; } = new Operator(InValue);
        /// <summary> The value of the key should not be in the given list. </summary>
        public static Operator NotIn { get; } = new Operator(NotInValue);
        /// <summary> The value of the key should exist. </summary>
        public static Operator Exists { get; } = new Operator(ExistsValue);
        /// <summary> The value of the key should not exist. </summary>
        public static Operator DoesNotExist { get; } = new Operator(DoesNotExistValue);
        /// <summary> Determines if two <see cref="Operator"/> values are the same. </summary>
        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Operator"/> values are not the same. </summary>
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Operator"/>. </summary>
        public static implicit operator Operator(string value) => new Operator(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Operator other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
