// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> node image version profile for given major.minor.patch release. </summary>
    public partial class NodeImageVersion
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NodeImageVersion"/>. </summary>
        internal NodeImageVersion()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NodeImageVersion"/>. </summary>
        /// <param name="os"> The operating system of the node image. Example: AKSUbuntu. </param>
        /// <param name="sku"> The SKU or flavor of the node image. Example: 2004gen2containerd. </param>
        /// <param name="version"> major.minor.patch version of the node image version release. Example: 2024.02.02. </param>
        /// <param name="fullName"> The OS + SKU + version of the node image. Example: AKSUbuntu-1804gen2containerd-2024.02.02. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NodeImageVersion(string os, string sku, string version, string fullName, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            OS = os;
            Sku = sku;
            Version = version;
            FullName = fullName;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The operating system of the node image. Example: AKSUbuntu. </summary>
        [WirePath("os")]
        public string OS { get; }
        /// <summary> The SKU or flavor of the node image. Example: 2004gen2containerd. </summary>
        [WirePath("sku")]
        public string Sku { get; }
        /// <summary> major.minor.patch version of the node image version release. Example: 2024.02.02. </summary>
        [WirePath("version")]
        public string Version { get; }
        /// <summary> The OS + SKU + version of the node image. Example: AKSUbuntu-1804gen2containerd-2024.02.02. </summary>
        [WirePath("fullName")]
        public string FullName { get; }
    }
}
