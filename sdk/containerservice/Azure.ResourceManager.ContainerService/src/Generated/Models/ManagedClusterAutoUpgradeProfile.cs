// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Auto upgrade profile for a managed cluster. </summary>
    public partial class ManagedClusterAutoUpgradeProfile
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="ManagedClusterAutoUpgradeProfile"/>. </summary>
        public ManagedClusterAutoUpgradeProfile()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ManagedClusterAutoUpgradeProfile"/>. </summary>
        /// <param name="upgradeChannel"> For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel). </param>
        /// <param name="nodeOSUpgradeChannel"> The default is Unmanaged, but may change to either NodeImage or SecurityPatch at GA. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal ManagedClusterAutoUpgradeProfile(UpgradeChannel? upgradeChannel, ManagedClusterNodeOSUpgradeChannel? nodeOSUpgradeChannel, Dictionary<string, BinaryData> rawData)
        {
            UpgradeChannel = upgradeChannel;
            NodeOSUpgradeChannel = nodeOSUpgradeChannel;
            _rawData = rawData;
        }

        /// <summary> For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel). </summary>
        public UpgradeChannel? UpgradeChannel { get; set; }
        /// <summary> The default is Unmanaged, but may change to either NodeImage or SecurityPatch at GA. </summary>
        public ManagedClusterNodeOSUpgradeChannel? NodeOSUpgradeChannel { get; set; }
    }
}
