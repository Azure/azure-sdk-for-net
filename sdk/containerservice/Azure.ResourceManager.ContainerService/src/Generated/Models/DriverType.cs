// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Specify the type of GPU driver to install when creating Windows agent pools. If not provided, AKS selects the driver based on system compatibility. This cannot be changed once the AgentPool has been created. This cannot be set on Linux AgentPools. For Linux AgentPools, the driver is selected based on system compatibility. </summary>
    public readonly partial struct DriverType : IEquatable<DriverType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DriverType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DriverType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GridValue = "GRID";
        private const string CudaValue = "CUDA";

        /// <summary> Install the GRID driver for the GPU, suitable for applications requiring virtualization support. </summary>
        public static DriverType Grid { get; } = new DriverType(GridValue);
        /// <summary> Install the CUDA driver for the GPU, optimized for computational tasks in scientific computing and data-intensive applications. </summary>
        public static DriverType Cuda { get; } = new DriverType(CudaValue);
        /// <summary> Determines if two <see cref="DriverType"/> values are the same. </summary>
        public static bool operator ==(DriverType left, DriverType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DriverType"/> values are not the same. </summary>
        public static bool operator !=(DriverType left, DriverType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DriverType"/>. </summary>
        public static implicit operator DriverType(string value) => new DriverType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DriverType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DriverType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
