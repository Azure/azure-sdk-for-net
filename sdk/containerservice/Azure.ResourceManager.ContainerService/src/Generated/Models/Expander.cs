// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> If not specified, the default is &apos;random&apos;. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information. </summary>
    public readonly partial struct Expander : IEquatable<Expander>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Expander"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Expander(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LeastWasteValue = "least-waste";
        private const string MostPodsValue = "most-pods";
        private const string PriorityValue = "priority";
        private const string RandomValue = "random";

        /// <summary> Selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources. </summary>
        public static Expander LeastWaste { get; } = new Expander(LeastWasteValue);
        /// <summary> Selects the node group that would be able to schedule the most pods when scaling up. This is useful when you are using nodeSelector to make sure certain pods land on certain nodes. Note that this won&apos;t cause the autoscaler to select bigger nodes vs. smaller, as it can add multiple smaller nodes at once. </summary>
        public static Expander MostPods { get; } = new Expander(MostPodsValue);
        /// <summary> Selects the node group that has the highest priority assigned by the user. It&apos;s configuration is described in more details [here](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/expander/priority/readme.md). </summary>
        public static Expander Priority { get; } = new Expander(PriorityValue);
        /// <summary> Used when you don&apos;t have a particular need for the node groups to scale differently. </summary>
        public static Expander Random { get; } = new Expander(RandomValue);
        /// <summary> Determines if two <see cref="Expander"/> values are the same. </summary>
        public static bool operator ==(Expander left, Expander right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Expander"/> values are not the same. </summary>
        public static bool operator !=(Expander left, Expander right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Expander"/>. </summary>
        public static implicit operator Expander(string value) => new Expander(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Expander other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Expander other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
