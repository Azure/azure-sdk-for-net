// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    public partial class SysctlConfig : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(NetCoreSomaxconn))
            {
                writer.WritePropertyName("netCoreSomaxconn");
                writer.WriteNumberValue(NetCoreSomaxconn.Value);
            }
            if (Optional.IsDefined(NetCoreNetdevMaxBacklog))
            {
                writer.WritePropertyName("netCoreNetdevMaxBacklog");
                writer.WriteNumberValue(NetCoreNetdevMaxBacklog.Value);
            }
            if (Optional.IsDefined(NetCoreRmemDefault))
            {
                writer.WritePropertyName("netCoreRmemDefault");
                writer.WriteNumberValue(NetCoreRmemDefault.Value);
            }
            if (Optional.IsDefined(NetCoreRmemMax))
            {
                writer.WritePropertyName("netCoreRmemMax");
                writer.WriteNumberValue(NetCoreRmemMax.Value);
            }
            if (Optional.IsDefined(NetCoreWmemDefault))
            {
                writer.WritePropertyName("netCoreWmemDefault");
                writer.WriteNumberValue(NetCoreWmemDefault.Value);
            }
            if (Optional.IsDefined(NetCoreWmemMax))
            {
                writer.WritePropertyName("netCoreWmemMax");
                writer.WriteNumberValue(NetCoreWmemMax.Value);
            }
            if (Optional.IsDefined(NetCoreOptmemMax))
            {
                writer.WritePropertyName("netCoreOptmemMax");
                writer.WriteNumberValue(NetCoreOptmemMax.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpMaxSynBacklog))
            {
                writer.WritePropertyName("netIpv4TcpMaxSynBacklog");
                writer.WriteNumberValue(NetIPv4TcpMaxSynBacklog.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpMaxTwBuckets))
            {
                writer.WritePropertyName("netIpv4TcpMaxTwBuckets");
                writer.WriteNumberValue(NetIPv4TcpMaxTwBuckets.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpFinTimeout))
            {
                writer.WritePropertyName("netIpv4TcpFinTimeout");
                writer.WriteNumberValue(NetIPv4TcpFinTimeout.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpKeepaliveTime))
            {
                writer.WritePropertyName("netIpv4TcpKeepaliveTime");
                writer.WriteNumberValue(NetIPv4TcpKeepaliveTime.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpKeepaliveProbes))
            {
                writer.WritePropertyName("netIpv4TcpKeepaliveProbes");
                writer.WriteNumberValue(NetIPv4TcpKeepaliveProbes.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpkeepaliveIntvl))
            {
                writer.WritePropertyName("netIpv4TcpkeepaliveIntvl");
                writer.WriteNumberValue(NetIPv4TcpkeepaliveIntvl.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpTwReuse))
            {
                writer.WritePropertyName("netIpv4TcpTwReuse");
                writer.WriteBooleanValue(NetIPv4TcpTwReuse.Value);
            }
            if (Optional.IsDefined(NetIPv4IPLocalPortRange))
            {
                writer.WritePropertyName("netIpv4IpLocalPortRange");
                writer.WriteStringValue(NetIPv4IPLocalPortRange);
            }
            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh1))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh1");
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh1.Value);
            }
            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh2))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh2");
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh2.Value);
            }
            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh3))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh3");
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh3.Value);
            }
            if (Optional.IsDefined(NetNetfilterNfConntrackMax))
            {
                writer.WritePropertyName("netNetfilterNfConntrackMax");
                writer.WriteNumberValue(NetNetfilterNfConntrackMax.Value);
            }
            if (Optional.IsDefined(NetNetfilterNfConntrackBuckets))
            {
                writer.WritePropertyName("netNetfilterNfConntrackBuckets");
                writer.WriteNumberValue(NetNetfilterNfConntrackBuckets.Value);
            }
            if (Optional.IsDefined(FsInotifyMaxUserWatches))
            {
                writer.WritePropertyName("fsInotifyMaxUserWatches");
                writer.WriteNumberValue(FsInotifyMaxUserWatches.Value);
            }
            if (Optional.IsDefined(FsFileMax))
            {
                writer.WritePropertyName("fsFileMax");
                writer.WriteNumberValue(FsFileMax.Value);
            }
            if (Optional.IsDefined(FsAioMaxNr))
            {
                writer.WritePropertyName("fsAioMaxNr");
                writer.WriteNumberValue(FsAioMaxNr.Value);
            }
            if (Optional.IsDefined(FsNrOpen))
            {
                writer.WritePropertyName("fsNrOpen");
                writer.WriteNumberValue(FsNrOpen.Value);
            }
            if (Optional.IsDefined(KernelThreadsMax))
            {
                writer.WritePropertyName("kernelThreadsMax");
                writer.WriteNumberValue(KernelThreadsMax.Value);
            }
            if (Optional.IsDefined(VmMaxMapCount))
            {
                writer.WritePropertyName("vmMaxMapCount");
                writer.WriteNumberValue(VmMaxMapCount.Value);
            }
            if (Optional.IsDefined(VmSwappiness))
            {
                writer.WritePropertyName("vmSwappiness");
                writer.WriteNumberValue(VmSwappiness.Value);
            }
            if (Optional.IsDefined(VmVfsCachePressure))
            {
                writer.WritePropertyName("vmVfsCachePressure");
                writer.WriteNumberValue(VmVfsCachePressure.Value);
            }
            writer.WriteEndObject();
        }

        internal static SysctlConfig DeserializeSysctlConfig(JsonElement element)
        {
            Optional<int> netCoreSomaxconn = default;
            Optional<int> netCoreNetdevMaxBacklog = default;
            Optional<int> netCoreRmemDefault = default;
            Optional<int> netCoreRmemMax = default;
            Optional<int> netCoreWmemDefault = default;
            Optional<int> netCoreWmemMax = default;
            Optional<int> netCoreOptmemMax = default;
            Optional<int> netIPv4TcpMaxSynBacklog = default;
            Optional<int> netIPv4TcpMaxTwBuckets = default;
            Optional<int> netIPv4TcpFinTimeout = default;
            Optional<int> netIPv4TcpKeepaliveTime = default;
            Optional<int> netIPv4TcpKeepaliveProbes = default;
            Optional<int> netIPv4TcpkeepaliveIntvl = default;
            Optional<bool> netIPv4TcpTwReuse = default;
            Optional<string> netIPv4IPLocalPortRange = default;
            Optional<int> netIPv4NeighDefaultGcThresh1 = default;
            Optional<int> netIPv4NeighDefaultGcThresh2 = default;
            Optional<int> netIPv4NeighDefaultGcThresh3 = default;
            Optional<int> netNetfilterNfConntrackMax = default;
            Optional<int> netNetfilterNfConntrackBuckets = default;
            Optional<int> fsInotifyMaxUserWatches = default;
            Optional<int> fsFileMax = default;
            Optional<int> fsAioMaxNr = default;
            Optional<int> fsNrOpen = default;
            Optional<int> kernelThreadsMax = default;
            Optional<int> vmMaxMapCount = default;
            Optional<int> vmSwappiness = default;
            Optional<int> vmVfsCachePressure = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("netCoreSomaxconn"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netCoreSomaxconn = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreNetdevMaxBacklog"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netCoreNetdevMaxBacklog = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreRmemDefault"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netCoreRmemDefault = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreRmemMax"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netCoreRmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreWmemDefault"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netCoreWmemDefault = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreWmemMax"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netCoreWmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreOptmemMax"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netCoreOptmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpMaxSynBacklog"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4TcpMaxSynBacklog = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpMaxTwBuckets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4TcpMaxTwBuckets = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpFinTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4TcpFinTimeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpKeepaliveTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4TcpKeepaliveTime = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpKeepaliveProbes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4TcpKeepaliveProbes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpkeepaliveIntvl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4TcpkeepaliveIntvl = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpTwReuse"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4TcpTwReuse = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("netIpv4IpLocalPortRange"))
                {
                    netIPv4IPLocalPortRange = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh1"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh1 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh2"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh2 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh3"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh3 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netNetfilterNfConntrackMax"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netNetfilterNfConntrackMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netNetfilterNfConntrackBuckets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netNetfilterNfConntrackBuckets = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsInotifyMaxUserWatches"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fsInotifyMaxUserWatches = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsFileMax"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fsFileMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsAioMaxNr"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fsAioMaxNr = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsNrOpen"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fsNrOpen = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("kernelThreadsMax"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    kernelThreadsMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmMaxMapCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    vmMaxMapCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmSwappiness"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    vmSwappiness = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmVfsCachePressure"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    vmVfsCachePressure = property.Value.GetInt32();
                    continue;
                }
            }
            return new SysctlConfig(Optional.ToNullable(netCoreSomaxconn), Optional.ToNullable(netCoreNetdevMaxBacklog), Optional.ToNullable(netCoreRmemDefault), Optional.ToNullable(netCoreRmemMax), Optional.ToNullable(netCoreWmemDefault), Optional.ToNullable(netCoreWmemMax), Optional.ToNullable(netCoreOptmemMax), Optional.ToNullable(netIPv4TcpMaxSynBacklog), Optional.ToNullable(netIPv4TcpMaxTwBuckets), Optional.ToNullable(netIPv4TcpFinTimeout), Optional.ToNullable(netIPv4TcpKeepaliveTime), Optional.ToNullable(netIPv4TcpKeepaliveProbes), Optional.ToNullable(netIPv4TcpkeepaliveIntvl), Optional.ToNullable(netIPv4TcpTwReuse), netIPv4IPLocalPortRange.Value, Optional.ToNullable(netIPv4NeighDefaultGcThresh1), Optional.ToNullable(netIPv4NeighDefaultGcThresh2), Optional.ToNullable(netIPv4NeighDefaultGcThresh3), Optional.ToNullable(netNetfilterNfConntrackMax), Optional.ToNullable(netNetfilterNfConntrackBuckets), Optional.ToNullable(fsInotifyMaxUserWatches), Optional.ToNullable(fsFileMax), Optional.ToNullable(fsAioMaxNr), Optional.ToNullable(fsNrOpen), Optional.ToNullable(kernelThreadsMax), Optional.ToNullable(vmMaxMapCount), Optional.ToNullable(vmSwappiness), Optional.ToNullable(vmVfsCachePressure));
        }
    }
}
