// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    public partial class SysctlConfig : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(NetCoreSomaxconn))
            {
                writer.WritePropertyName("netCoreSomaxconn"u8);
                writer.WriteNumberValue(NetCoreSomaxconn.Value);
            }
            if (Core.Optional.IsDefined(NetCoreNetdevMaxBacklog))
            {
                writer.WritePropertyName("netCoreNetdevMaxBacklog"u8);
                writer.WriteNumberValue(NetCoreNetdevMaxBacklog.Value);
            }
            if (Core.Optional.IsDefined(NetCoreRmemDefault))
            {
                writer.WritePropertyName("netCoreRmemDefault"u8);
                writer.WriteNumberValue(NetCoreRmemDefault.Value);
            }
            if (Core.Optional.IsDefined(NetCoreRmemMax))
            {
                writer.WritePropertyName("netCoreRmemMax"u8);
                writer.WriteNumberValue(NetCoreRmemMax.Value);
            }
            if (Core.Optional.IsDefined(NetCoreWmemDefault))
            {
                writer.WritePropertyName("netCoreWmemDefault"u8);
                writer.WriteNumberValue(NetCoreWmemDefault.Value);
            }
            if (Core.Optional.IsDefined(NetCoreWmemMax))
            {
                writer.WritePropertyName("netCoreWmemMax"u8);
                writer.WriteNumberValue(NetCoreWmemMax.Value);
            }
            if (Core.Optional.IsDefined(NetCoreOptmemMax))
            {
                writer.WritePropertyName("netCoreOptmemMax"u8);
                writer.WriteNumberValue(NetCoreOptmemMax.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4TcpMaxSynBacklog))
            {
                writer.WritePropertyName("netIpv4TcpMaxSynBacklog"u8);
                writer.WriteNumberValue(NetIPv4TcpMaxSynBacklog.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4TcpMaxTwBuckets))
            {
                writer.WritePropertyName("netIpv4TcpMaxTwBuckets"u8);
                writer.WriteNumberValue(NetIPv4TcpMaxTwBuckets.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4TcpFinTimeout))
            {
                writer.WritePropertyName("netIpv4TcpFinTimeout"u8);
                writer.WriteNumberValue(NetIPv4TcpFinTimeout.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4TcpKeepaliveTime))
            {
                writer.WritePropertyName("netIpv4TcpKeepaliveTime"u8);
                writer.WriteNumberValue(NetIPv4TcpKeepaliveTime.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4TcpKeepaliveProbes))
            {
                writer.WritePropertyName("netIpv4TcpKeepaliveProbes"u8);
                writer.WriteNumberValue(NetIPv4TcpKeepaliveProbes.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4TcpKeepaliveIntvl))
            {
                writer.WritePropertyName("netIpv4TcpkeepaliveIntvl"u8);
                writer.WriteNumberValue(NetIPv4TcpKeepaliveIntvl.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4TcpTwReuse))
            {
                writer.WritePropertyName("netIpv4TcpTwReuse"u8);
                writer.WriteBooleanValue(NetIPv4TcpTwReuse.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4IPLocalPortRange))
            {
                writer.WritePropertyName("netIpv4IpLocalPortRange"u8);
                writer.WriteStringValue(NetIPv4IPLocalPortRange);
            }
            if (Core.Optional.IsDefined(NetIPv4NeighDefaultGcThresh1))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh1"u8);
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh1.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4NeighDefaultGcThresh2))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh2"u8);
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh2.Value);
            }
            if (Core.Optional.IsDefined(NetIPv4NeighDefaultGcThresh3))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh3"u8);
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh3.Value);
            }
            if (Core.Optional.IsDefined(NetNetfilterNfConntrackMax))
            {
                writer.WritePropertyName("netNetfilterNfConntrackMax"u8);
                writer.WriteNumberValue(NetNetfilterNfConntrackMax.Value);
            }
            if (Core.Optional.IsDefined(NetNetfilterNfConntrackBuckets))
            {
                writer.WritePropertyName("netNetfilterNfConntrackBuckets"u8);
                writer.WriteNumberValue(NetNetfilterNfConntrackBuckets.Value);
            }
            if (Core.Optional.IsDefined(FsInotifyMaxUserWatches))
            {
                writer.WritePropertyName("fsInotifyMaxUserWatches"u8);
                writer.WriteNumberValue(FsInotifyMaxUserWatches.Value);
            }
            if (Core.Optional.IsDefined(FsFileMax))
            {
                writer.WritePropertyName("fsFileMax"u8);
                writer.WriteNumberValue(FsFileMax.Value);
            }
            if (Core.Optional.IsDefined(FsAioMaxNr))
            {
                writer.WritePropertyName("fsAioMaxNr"u8);
                writer.WriteNumberValue(FsAioMaxNr.Value);
            }
            if (Core.Optional.IsDefined(FsNrOpen))
            {
                writer.WritePropertyName("fsNrOpen"u8);
                writer.WriteNumberValue(FsNrOpen.Value);
            }
            if (Core.Optional.IsDefined(KernelThreadsMax))
            {
                writer.WritePropertyName("kernelThreadsMax"u8);
                writer.WriteNumberValue(KernelThreadsMax.Value);
            }
            if (Core.Optional.IsDefined(VmMaxMapCount))
            {
                writer.WritePropertyName("vmMaxMapCount"u8);
                writer.WriteNumberValue(VmMaxMapCount.Value);
            }
            if (Core.Optional.IsDefined(VmSwappiness))
            {
                writer.WritePropertyName("vmSwappiness"u8);
                writer.WriteNumberValue(VmSwappiness.Value);
            }
            if (Core.Optional.IsDefined(VmVfsCachePressure))
            {
                writer.WritePropertyName("vmVfsCachePressure"u8);
                writer.WriteNumberValue(VmVfsCachePressure.Value);
            }
            writer.WriteEndObject();
        }

        internal static SysctlConfig DeserializeSysctlConfig(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<int> netCoreSomaxconn = default;
            Core.Optional<int> netCoreNetdevMaxBacklog = default;
            Core.Optional<int> netCoreRmemDefault = default;
            Core.Optional<int> netCoreRmemMax = default;
            Core.Optional<int> netCoreWmemDefault = default;
            Core.Optional<int> netCoreWmemMax = default;
            Core.Optional<int> netCoreOptmemMax = default;
            Core.Optional<int> netIPv4TcpMaxSynBacklog = default;
            Core.Optional<int> netIPv4TcpMaxTwBuckets = default;
            Core.Optional<int> netIPv4TcpFinTimeout = default;
            Core.Optional<int> netIPv4TcpKeepaliveTime = default;
            Core.Optional<int> netIPv4TcpKeepaliveProbes = default;
            Core.Optional<int> netIPv4TcpKeepaliveIntvl = default;
            Core.Optional<bool> netIPv4TcpTwReuse = default;
            Core.Optional<string> netIPv4IPLocalPortRange = default;
            Core.Optional<int> netIPv4NeighDefaultGcThresh1 = default;
            Core.Optional<int> netIPv4NeighDefaultGcThresh2 = default;
            Core.Optional<int> netIPv4NeighDefaultGcThresh3 = default;
            Core.Optional<int> netNetfilterNfConntrackMax = default;
            Core.Optional<int> netNetfilterNfConntrackBuckets = default;
            Core.Optional<int> fsInotifyMaxUserWatches = default;
            Core.Optional<int> fsFileMax = default;
            Core.Optional<int> fsAioMaxNr = default;
            Core.Optional<int> fsNrOpen = default;
            Core.Optional<int> kernelThreadsMax = default;
            Core.Optional<int> vmMaxMapCount = default;
            Core.Optional<int> vmSwappiness = default;
            Core.Optional<int> vmVfsCachePressure = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("netCoreSomaxconn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreSomaxconn = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreNetdevMaxBacklog"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreNetdevMaxBacklog = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreRmemDefault"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreRmemDefault = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreRmemMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreRmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreWmemDefault"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreWmemDefault = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreWmemMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreWmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreOptmemMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreOptmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpMaxSynBacklog"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpMaxSynBacklog = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpMaxTwBuckets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpMaxTwBuckets = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpFinTimeout"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpFinTimeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpKeepaliveTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpKeepaliveTime = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpKeepaliveProbes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpKeepaliveProbes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpkeepaliveIntvl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpKeepaliveIntvl = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpTwReuse"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpTwReuse = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("netIpv4IpLocalPortRange"u8))
                {
                    netIPv4IPLocalPortRange = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh1"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh1 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh2"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh2 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh3"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh3 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netNetfilterNfConntrackMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netNetfilterNfConntrackMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netNetfilterNfConntrackBuckets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netNetfilterNfConntrackBuckets = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsInotifyMaxUserWatches"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fsInotifyMaxUserWatches = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsFileMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fsFileMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsAioMaxNr"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fsAioMaxNr = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsNrOpen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fsNrOpen = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("kernelThreadsMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kernelThreadsMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmMaxMapCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmMaxMapCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmSwappiness"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmSwappiness = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmVfsCachePressure"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmVfsCachePressure = property.Value.GetInt32();
                    continue;
                }
            }
            return new SysctlConfig(Core.Optional.ToNullable(netCoreSomaxconn), Core.Optional.ToNullable(netCoreNetdevMaxBacklog), Core.Optional.ToNullable(netCoreRmemDefault), Core.Optional.ToNullable(netCoreRmemMax), Core.Optional.ToNullable(netCoreWmemDefault), Core.Optional.ToNullable(netCoreWmemMax), Core.Optional.ToNullable(netCoreOptmemMax), Core.Optional.ToNullable(netIPv4TcpMaxSynBacklog), Core.Optional.ToNullable(netIPv4TcpMaxTwBuckets), Core.Optional.ToNullable(netIPv4TcpFinTimeout), Core.Optional.ToNullable(netIPv4TcpKeepaliveTime), Core.Optional.ToNullable(netIPv4TcpKeepaliveProbes), Core.Optional.ToNullable(netIPv4TcpKeepaliveIntvl), Core.Optional.ToNullable(netIPv4TcpTwReuse), netIPv4IPLocalPortRange.Value, Core.Optional.ToNullable(netIPv4NeighDefaultGcThresh1), Core.Optional.ToNullable(netIPv4NeighDefaultGcThresh2), Core.Optional.ToNullable(netIPv4NeighDefaultGcThresh3), Core.Optional.ToNullable(netNetfilterNfConntrackMax), Core.Optional.ToNullable(netNetfilterNfConntrackBuckets), Core.Optional.ToNullable(fsInotifyMaxUserWatches), Core.Optional.ToNullable(fsFileMax), Core.Optional.ToNullable(fsAioMaxNr), Core.Optional.ToNullable(fsNrOpen), Core.Optional.ToNullable(kernelThreadsMax), Core.Optional.ToNullable(vmMaxMapCount), Core.Optional.ToNullable(vmSwappiness), Core.Optional.ToNullable(vmVfsCachePressure));
        }
    }
}
