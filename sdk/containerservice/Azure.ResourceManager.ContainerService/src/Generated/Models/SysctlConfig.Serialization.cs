// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    public partial class SysctlConfig : IUtf8JsonSerializable, IJsonModel<SysctlConfig>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SysctlConfig>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SysctlConfig>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SysctlConfig>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SysctlConfig)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(NetCoreSomaxconn))
            {
                writer.WritePropertyName("netCoreSomaxconn"u8);
                writer.WriteNumberValue(NetCoreSomaxconn.Value);
            }
            if (Optional.IsDefined(NetCoreNetdevMaxBacklog))
            {
                writer.WritePropertyName("netCoreNetdevMaxBacklog"u8);
                writer.WriteNumberValue(NetCoreNetdevMaxBacklog.Value);
            }
            if (Optional.IsDefined(NetCoreRmemDefault))
            {
                writer.WritePropertyName("netCoreRmemDefault"u8);
                writer.WriteNumberValue(NetCoreRmemDefault.Value);
            }
            if (Optional.IsDefined(NetCoreRmemMax))
            {
                writer.WritePropertyName("netCoreRmemMax"u8);
                writer.WriteNumberValue(NetCoreRmemMax.Value);
            }
            if (Optional.IsDefined(NetCoreWmemDefault))
            {
                writer.WritePropertyName("netCoreWmemDefault"u8);
                writer.WriteNumberValue(NetCoreWmemDefault.Value);
            }
            if (Optional.IsDefined(NetCoreWmemMax))
            {
                writer.WritePropertyName("netCoreWmemMax"u8);
                writer.WriteNumberValue(NetCoreWmemMax.Value);
            }
            if (Optional.IsDefined(NetCoreOptmemMax))
            {
                writer.WritePropertyName("netCoreOptmemMax"u8);
                writer.WriteNumberValue(NetCoreOptmemMax.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpMaxSynBacklog))
            {
                writer.WritePropertyName("netIpv4TcpMaxSynBacklog"u8);
                writer.WriteNumberValue(NetIPv4TcpMaxSynBacklog.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpMaxTwBuckets))
            {
                writer.WritePropertyName("netIpv4TcpMaxTwBuckets"u8);
                writer.WriteNumberValue(NetIPv4TcpMaxTwBuckets.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpFinTimeout))
            {
                writer.WritePropertyName("netIpv4TcpFinTimeout"u8);
                writer.WriteNumberValue(NetIPv4TcpFinTimeout.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpKeepaliveTime))
            {
                writer.WritePropertyName("netIpv4TcpKeepaliveTime"u8);
                writer.WriteNumberValue(NetIPv4TcpKeepaliveTime.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpKeepaliveProbes))
            {
                writer.WritePropertyName("netIpv4TcpKeepaliveProbes"u8);
                writer.WriteNumberValue(NetIPv4TcpKeepaliveProbes.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpKeepaliveIntvl))
            {
                writer.WritePropertyName("netIpv4TcpkeepaliveIntvl"u8);
                writer.WriteNumberValue(NetIPv4TcpKeepaliveIntvl.Value);
            }
            if (Optional.IsDefined(NetIPv4TcpTwReuse))
            {
                writer.WritePropertyName("netIpv4TcpTwReuse"u8);
                writer.WriteBooleanValue(NetIPv4TcpTwReuse.Value);
            }
            if (Optional.IsDefined(NetIPv4IPLocalPortRange))
            {
                writer.WritePropertyName("netIpv4IpLocalPortRange"u8);
                writer.WriteStringValue(NetIPv4IPLocalPortRange);
            }
            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh1))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh1"u8);
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh1.Value);
            }
            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh2))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh2"u8);
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh2.Value);
            }
            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh3))
            {
                writer.WritePropertyName("netIpv4NeighDefaultGcThresh3"u8);
                writer.WriteNumberValue(NetIPv4NeighDefaultGcThresh3.Value);
            }
            if (Optional.IsDefined(NetNetfilterNfConntrackMax))
            {
                writer.WritePropertyName("netNetfilterNfConntrackMax"u8);
                writer.WriteNumberValue(NetNetfilterNfConntrackMax.Value);
            }
            if (Optional.IsDefined(NetNetfilterNfConntrackBuckets))
            {
                writer.WritePropertyName("netNetfilterNfConntrackBuckets"u8);
                writer.WriteNumberValue(NetNetfilterNfConntrackBuckets.Value);
            }
            if (Optional.IsDefined(FsInotifyMaxUserWatches))
            {
                writer.WritePropertyName("fsInotifyMaxUserWatches"u8);
                writer.WriteNumberValue(FsInotifyMaxUserWatches.Value);
            }
            if (Optional.IsDefined(FsFileMax))
            {
                writer.WritePropertyName("fsFileMax"u8);
                writer.WriteNumberValue(FsFileMax.Value);
            }
            if (Optional.IsDefined(FsAioMaxNr))
            {
                writer.WritePropertyName("fsAioMaxNr"u8);
                writer.WriteNumberValue(FsAioMaxNr.Value);
            }
            if (Optional.IsDefined(FsNrOpen))
            {
                writer.WritePropertyName("fsNrOpen"u8);
                writer.WriteNumberValue(FsNrOpen.Value);
            }
            if (Optional.IsDefined(KernelThreadsMax))
            {
                writer.WritePropertyName("kernelThreadsMax"u8);
                writer.WriteNumberValue(KernelThreadsMax.Value);
            }
            if (Optional.IsDefined(VmMaxMapCount))
            {
                writer.WritePropertyName("vmMaxMapCount"u8);
                writer.WriteNumberValue(VmMaxMapCount.Value);
            }
            if (Optional.IsDefined(VmSwappiness))
            {
                writer.WritePropertyName("vmSwappiness"u8);
                writer.WriteNumberValue(VmSwappiness.Value);
            }
            if (Optional.IsDefined(VmVfsCachePressure))
            {
                writer.WritePropertyName("vmVfsCachePressure"u8);
                writer.WriteNumberValue(VmVfsCachePressure.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SysctlConfig IJsonModel<SysctlConfig>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SysctlConfig>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SysctlConfig)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSysctlConfig(document.RootElement, options);
        }

        internal static SysctlConfig DeserializeSysctlConfig(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> netCoreSomaxconn = default;
            Optional<int> netCoreNetdevMaxBacklog = default;
            Optional<int> netCoreRmemDefault = default;
            Optional<int> netCoreRmemMax = default;
            Optional<int> netCoreWmemDefault = default;
            Optional<int> netCoreWmemMax = default;
            Optional<int> netCoreOptmemMax = default;
            Optional<int> netIPv4TcpMaxSynBacklog = default;
            Optional<int> netIPv4TcpMaxTwBuckets = default;
            Optional<int> netIPv4TcpFinTimeout = default;
            Optional<int> netIPv4TcpKeepaliveTime = default;
            Optional<int> netIPv4TcpKeepaliveProbes = default;
            Optional<int> netIPv4TcpKeepaliveIntvl = default;
            Optional<bool> netIPv4TcpTwReuse = default;
            Optional<string> netIPv4IPLocalPortRange = default;
            Optional<int> netIPv4NeighDefaultGcThresh1 = default;
            Optional<int> netIPv4NeighDefaultGcThresh2 = default;
            Optional<int> netIPv4NeighDefaultGcThresh3 = default;
            Optional<int> netNetfilterNfConntrackMax = default;
            Optional<int> netNetfilterNfConntrackBuckets = default;
            Optional<int> fsInotifyMaxUserWatches = default;
            Optional<int> fsFileMax = default;
            Optional<int> fsAioMaxNr = default;
            Optional<int> fsNrOpen = default;
            Optional<int> kernelThreadsMax = default;
            Optional<int> vmMaxMapCount = default;
            Optional<int> vmSwappiness = default;
            Optional<int> vmVfsCachePressure = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("netCoreSomaxconn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreSomaxconn = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreNetdevMaxBacklog"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreNetdevMaxBacklog = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreRmemDefault"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreRmemDefault = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreRmemMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreRmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreWmemDefault"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreWmemDefault = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreWmemMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreWmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netCoreOptmemMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netCoreOptmemMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpMaxSynBacklog"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpMaxSynBacklog = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpMaxTwBuckets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpMaxTwBuckets = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpFinTimeout"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpFinTimeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpKeepaliveTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpKeepaliveTime = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpKeepaliveProbes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpKeepaliveProbes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpkeepaliveIntvl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpKeepaliveIntvl = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4TcpTwReuse"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4TcpTwReuse = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("netIpv4IpLocalPortRange"u8))
                {
                    netIPv4IPLocalPortRange = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh1"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh1 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh2"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh2 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netIpv4NeighDefaultGcThresh3"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netIPv4NeighDefaultGcThresh3 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netNetfilterNfConntrackMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netNetfilterNfConntrackMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("netNetfilterNfConntrackBuckets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    netNetfilterNfConntrackBuckets = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsInotifyMaxUserWatches"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fsInotifyMaxUserWatches = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsFileMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fsFileMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsAioMaxNr"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fsAioMaxNr = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fsNrOpen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fsNrOpen = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("kernelThreadsMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kernelThreadsMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmMaxMapCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmMaxMapCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmSwappiness"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmSwappiness = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmVfsCachePressure"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmVfsCachePressure = property.Value.GetInt32();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SysctlConfig(Optional.ToNullable(netCoreSomaxconn), Optional.ToNullable(netCoreNetdevMaxBacklog), Optional.ToNullable(netCoreRmemDefault), Optional.ToNullable(netCoreRmemMax), Optional.ToNullable(netCoreWmemDefault), Optional.ToNullable(netCoreWmemMax), Optional.ToNullable(netCoreOptmemMax), Optional.ToNullable(netIPv4TcpMaxSynBacklog), Optional.ToNullable(netIPv4TcpMaxTwBuckets), Optional.ToNullable(netIPv4TcpFinTimeout), Optional.ToNullable(netIPv4TcpKeepaliveTime), Optional.ToNullable(netIPv4TcpKeepaliveProbes), Optional.ToNullable(netIPv4TcpKeepaliveIntvl), Optional.ToNullable(netIPv4TcpTwReuse), netIPv4IPLocalPortRange.Value, Optional.ToNullable(netIPv4NeighDefaultGcThresh1), Optional.ToNullable(netIPv4NeighDefaultGcThresh2), Optional.ToNullable(netIPv4NeighDefaultGcThresh3), Optional.ToNullable(netNetfilterNfConntrackMax), Optional.ToNullable(netNetfilterNfConntrackBuckets), Optional.ToNullable(fsInotifyMaxUserWatches), Optional.ToNullable(fsFileMax), Optional.ToNullable(fsAioMaxNr), Optional.ToNullable(fsNrOpen), Optional.ToNullable(kernelThreadsMax), Optional.ToNullable(vmMaxMapCount), Optional.ToNullable(vmSwappiness), Optional.ToNullable(vmVfsCachePressure), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(NetCoreSomaxconn))
            {
                builder.Append("  netCoreSomaxconn:");
                builder.AppendLine($" {NetCoreSomaxconn.Value}");
            }

            if (Optional.IsDefined(NetCoreNetdevMaxBacklog))
            {
                builder.Append("  netCoreNetdevMaxBacklog:");
                builder.AppendLine($" {NetCoreNetdevMaxBacklog.Value}");
            }

            if (Optional.IsDefined(NetCoreRmemDefault))
            {
                builder.Append("  netCoreRmemDefault:");
                builder.AppendLine($" {NetCoreRmemDefault.Value}");
            }

            if (Optional.IsDefined(NetCoreRmemMax))
            {
                builder.Append("  netCoreRmemMax:");
                builder.AppendLine($" {NetCoreRmemMax.Value}");
            }

            if (Optional.IsDefined(NetCoreWmemDefault))
            {
                builder.Append("  netCoreWmemDefault:");
                builder.AppendLine($" {NetCoreWmemDefault.Value}");
            }

            if (Optional.IsDefined(NetCoreWmemMax))
            {
                builder.Append("  netCoreWmemMax:");
                builder.AppendLine($" {NetCoreWmemMax.Value}");
            }

            if (Optional.IsDefined(NetCoreOptmemMax))
            {
                builder.Append("  netCoreOptmemMax:");
                builder.AppendLine($" {NetCoreOptmemMax.Value}");
            }

            if (Optional.IsDefined(NetIPv4TcpMaxSynBacklog))
            {
                builder.Append("  netIpv4TcpMaxSynBacklog:");
                builder.AppendLine($" {NetIPv4TcpMaxSynBacklog.Value}");
            }

            if (Optional.IsDefined(NetIPv4TcpMaxTwBuckets))
            {
                builder.Append("  netIpv4TcpMaxTwBuckets:");
                builder.AppendLine($" {NetIPv4TcpMaxTwBuckets.Value}");
            }

            if (Optional.IsDefined(NetIPv4TcpFinTimeout))
            {
                builder.Append("  netIpv4TcpFinTimeout:");
                builder.AppendLine($" {NetIPv4TcpFinTimeout.Value}");
            }

            if (Optional.IsDefined(NetIPv4TcpKeepaliveTime))
            {
                builder.Append("  netIpv4TcpKeepaliveTime:");
                builder.AppendLine($" {NetIPv4TcpKeepaliveTime.Value}");
            }

            if (Optional.IsDefined(NetIPv4TcpKeepaliveProbes))
            {
                builder.Append("  netIpv4TcpKeepaliveProbes:");
                builder.AppendLine($" {NetIPv4TcpKeepaliveProbes.Value}");
            }

            if (Optional.IsDefined(NetIPv4TcpKeepaliveIntvl))
            {
                builder.Append("  netIpv4TcpkeepaliveIntvl:");
                builder.AppendLine($" {NetIPv4TcpKeepaliveIntvl.Value}");
            }

            if (Optional.IsDefined(NetIPv4TcpTwReuse))
            {
                builder.Append("  netIpv4TcpTwReuse:");
                var boolValue = NetIPv4TcpTwReuse.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(NetIPv4IPLocalPortRange))
            {
                builder.Append("  netIpv4IpLocalPortRange:");
                if (NetIPv4IPLocalPortRange.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{NetIPv4IPLocalPortRange}'''");
                }
                else
                {
                    builder.AppendLine($" '{NetIPv4IPLocalPortRange}'");
                }
            }

            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh1))
            {
                builder.Append("  netIpv4NeighDefaultGcThresh1:");
                builder.AppendLine($" {NetIPv4NeighDefaultGcThresh1.Value}");
            }

            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh2))
            {
                builder.Append("  netIpv4NeighDefaultGcThresh2:");
                builder.AppendLine($" {NetIPv4NeighDefaultGcThresh2.Value}");
            }

            if (Optional.IsDefined(NetIPv4NeighDefaultGcThresh3))
            {
                builder.Append("  netIpv4NeighDefaultGcThresh3:");
                builder.AppendLine($" {NetIPv4NeighDefaultGcThresh3.Value}");
            }

            if (Optional.IsDefined(NetNetfilterNfConntrackMax))
            {
                builder.Append("  netNetfilterNfConntrackMax:");
                builder.AppendLine($" {NetNetfilterNfConntrackMax.Value}");
            }

            if (Optional.IsDefined(NetNetfilterNfConntrackBuckets))
            {
                builder.Append("  netNetfilterNfConntrackBuckets:");
                builder.AppendLine($" {NetNetfilterNfConntrackBuckets.Value}");
            }

            if (Optional.IsDefined(FsInotifyMaxUserWatches))
            {
                builder.Append("  fsInotifyMaxUserWatches:");
                builder.AppendLine($" {FsInotifyMaxUserWatches.Value}");
            }

            if (Optional.IsDefined(FsFileMax))
            {
                builder.Append("  fsFileMax:");
                builder.AppendLine($" {FsFileMax.Value}");
            }

            if (Optional.IsDefined(FsAioMaxNr))
            {
                builder.Append("  fsAioMaxNr:");
                builder.AppendLine($" {FsAioMaxNr.Value}");
            }

            if (Optional.IsDefined(FsNrOpen))
            {
                builder.Append("  fsNrOpen:");
                builder.AppendLine($" {FsNrOpen.Value}");
            }

            if (Optional.IsDefined(KernelThreadsMax))
            {
                builder.Append("  kernelThreadsMax:");
                builder.AppendLine($" {KernelThreadsMax.Value}");
            }

            if (Optional.IsDefined(VmMaxMapCount))
            {
                builder.Append("  vmMaxMapCount:");
                builder.AppendLine($" {VmMaxMapCount.Value}");
            }

            if (Optional.IsDefined(VmSwappiness))
            {
                builder.Append("  vmSwappiness:");
                builder.AppendLine($" {VmSwappiness.Value}");
            }

            if (Optional.IsDefined(VmVfsCachePressure))
            {
                builder.Append("  vmVfsCachePressure:");
                builder.AppendLine($" {VmVfsCachePressure.Value}");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<SysctlConfig>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SysctlConfig>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(SysctlConfig)} does not support '{options.Format}' format.");
            }
        }

        SysctlConfig IPersistableModel<SysctlConfig>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SysctlConfig>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSysctlConfig(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(SysctlConfig)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SysctlConfig>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
