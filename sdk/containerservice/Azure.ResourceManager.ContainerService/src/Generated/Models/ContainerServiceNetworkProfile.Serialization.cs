// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    public partial class ContainerServiceNetworkProfile : IUtf8JsonSerializable, IJsonModel<ContainerServiceNetworkProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContainerServiceNetworkProfile>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ContainerServiceNetworkProfile>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerServiceNetworkProfile>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerServiceNetworkProfile)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (NetworkPlugin.HasValue)
            {
                writer.WritePropertyName("networkPlugin"u8);
                writer.WriteStringValue(NetworkPlugin.Value.ToString());
            }
            if (NetworkPluginMode.HasValue)
            {
                writer.WritePropertyName("networkPluginMode"u8);
                writer.WriteStringValue(NetworkPluginMode.Value.ToString());
            }
            if (NetworkPolicy.HasValue)
            {
                writer.WritePropertyName("networkPolicy"u8);
                writer.WriteStringValue(NetworkPolicy.Value.ToString());
            }
            if (NetworkMode.HasValue)
            {
                writer.WritePropertyName("networkMode"u8);
                writer.WriteStringValue(NetworkMode.Value.ToString());
            }
            if (NetworkDataplane.HasValue)
            {
                writer.WritePropertyName("networkDataplane"u8);
                writer.WriteStringValue(NetworkDataplane.Value.ToString());
            }
            if (PodCidr != null)
            {
                writer.WritePropertyName("podCidr"u8);
                writer.WriteStringValue(PodCidr);
            }
            if (ServiceCidr != null)
            {
                writer.WritePropertyName("serviceCidr"u8);
                writer.WriteStringValue(ServiceCidr);
            }
            if (DnsServiceIP != null)
            {
                writer.WritePropertyName("dnsServiceIP"u8);
                writer.WriteStringValue(DnsServiceIP);
            }
            if (OutboundType.HasValue)
            {
                writer.WritePropertyName("outboundType"u8);
                writer.WriteStringValue(OutboundType.Value.ToString());
            }
            if (LoadBalancerSku.HasValue)
            {
                writer.WritePropertyName("loadBalancerSku"u8);
                writer.WriteStringValue(LoadBalancerSku.Value.ToString());
            }
            if (LoadBalancerProfile != null)
            {
                writer.WritePropertyName("loadBalancerProfile"u8);
                writer.WriteObjectValue(LoadBalancerProfile);
            }
            if (NatGatewayProfile != null)
            {
                writer.WritePropertyName("natGatewayProfile"u8);
                writer.WriteObjectValue(NatGatewayProfile);
            }
            if (!(PodCidrs is ChangeTrackingList<string> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("podCidrs"u8);
                writer.WriteStartArray();
                foreach (var item in PodCidrs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ServiceCidrs is ChangeTrackingList<string> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("serviceCidrs"u8);
                writer.WriteStartArray();
                foreach (var item in ServiceCidrs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(IPFamilies is ChangeTrackingList<IPFamily> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("ipFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in IPFamilies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ContainerServiceNetworkProfile IJsonModel<ContainerServiceNetworkProfile>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerServiceNetworkProfile>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerServiceNetworkProfile)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerServiceNetworkProfile(document.RootElement, options);
        }

        internal static ContainerServiceNetworkProfile DeserializeContainerServiceNetworkProfile(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ContainerServiceNetworkPlugin> networkPlugin = default;
            Optional<ContainerServiceNetworkPluginMode> networkPluginMode = default;
            Optional<ContainerServiceNetworkPolicy> networkPolicy = default;
            Optional<ContainerServiceNetworkMode> networkMode = default;
            Optional<NetworkDataplane> networkDataplane = default;
            Optional<string> podCidr = default;
            Optional<string> serviceCidr = default;
            Optional<string> dnsServiceIP = default;
            Optional<ContainerServiceOutboundType> outboundType = default;
            Optional<ContainerServiceLoadBalancerSku> loadBalancerSku = default;
            Optional<ManagedClusterLoadBalancerProfile> loadBalancerProfile = default;
            Optional<ManagedClusterNatGatewayProfile> natGatewayProfile = default;
            IList<string> podCidrs = default;
            IList<string> serviceCidrs = default;
            IList<IPFamily> ipFamilies = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("networkPlugin"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkPlugin = new ContainerServiceNetworkPlugin(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkPluginMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkPluginMode = new ContainerServiceNetworkPluginMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkPolicy = new ContainerServiceNetworkPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkMode = new ContainerServiceNetworkMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkDataplane"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkDataplane = new NetworkDataplane(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("podCidr"u8))
                {
                    podCidr = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceCidr"u8))
                {
                    serviceCidr = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsServiceIP"u8))
                {
                    dnsServiceIP = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outboundType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outboundType = new ContainerServiceOutboundType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("loadBalancerSku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    loadBalancerSku = new ContainerServiceLoadBalancerSku(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("loadBalancerProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    loadBalancerProfile = ManagedClusterLoadBalancerProfile.DeserializeManagedClusterLoadBalancerProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("natGatewayProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    natGatewayProfile = ManagedClusterNatGatewayProfile.DeserializeManagedClusterNatGatewayProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("podCidrs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    podCidrs = array;
                    continue;
                }
                if (property.NameEquals("serviceCidrs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    serviceCidrs = array;
                    continue;
                }
                if (property.NameEquals("ipFamilies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IPFamily> array = new List<IPFamily>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new IPFamily(item.GetString()));
                    }
                    ipFamilies = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ContainerServiceNetworkProfile(
                Optional.ToNullable(networkPlugin),
                Optional.ToNullable(networkPluginMode),
                Optional.ToNullable(networkPolicy),
                Optional.ToNullable(networkMode),
                Optional.ToNullable(networkDataplane),
                podCidr.Value,
                serviceCidr.Value,
                dnsServiceIP.Value,
                Optional.ToNullable(outboundType),
                Optional.ToNullable(loadBalancerSku),
                loadBalancerProfile.Value,
                natGatewayProfile.Value,
                podCidrs ?? new ChangeTrackingList<string>(),
                serviceCidrs ?? new ChangeTrackingList<string>(),
                ipFamilies ?? new ChangeTrackingList<IPFamily>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ContainerServiceNetworkProfile>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerServiceNetworkProfile>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ContainerServiceNetworkProfile)} does not support '{options.Format}' format.");
            }
        }

        ContainerServiceNetworkProfile IPersistableModel<ContainerServiceNetworkProfile>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerServiceNetworkProfile>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeContainerServiceNetworkProfile(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContainerServiceNetworkProfile)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContainerServiceNetworkProfile>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
