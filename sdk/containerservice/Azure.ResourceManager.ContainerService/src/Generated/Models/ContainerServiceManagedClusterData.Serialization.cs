// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.ContainerService.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ContainerService
{
    public partial class ContainerServiceManagedClusterData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                JsonSerializer.Serialize(writer, ExtendedLocation);
            }
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                JsonSerializer.Serialize(writer, Identity);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(CreationData))
            {
                writer.WritePropertyName("creationData"u8);
                writer.WriteObjectValue(CreationData);
            }
            if (Optional.IsDefined(KubernetesVersion))
            {
                writer.WritePropertyName("kubernetesVersion"u8);
                writer.WriteStringValue(KubernetesVersion);
            }
            if (Optional.IsDefined(DnsPrefix))
            {
                writer.WritePropertyName("dnsPrefix"u8);
                writer.WriteStringValue(DnsPrefix);
            }
            if (Optional.IsDefined(FqdnSubdomain))
            {
                writer.WritePropertyName("fqdnSubdomain"u8);
                writer.WriteStringValue(FqdnSubdomain);
            }
            if (Optional.IsCollectionDefined(AgentPoolProfiles))
            {
                writer.WritePropertyName("agentPoolProfiles"u8);
                writer.WriteStartArray();
                foreach (var item in AgentPoolProfiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LinuxProfile))
            {
                writer.WritePropertyName("linuxProfile"u8);
                writer.WriteObjectValue(LinuxProfile);
            }
            if (Optional.IsDefined(WindowsProfile))
            {
                writer.WritePropertyName("windowsProfile"u8);
                writer.WriteObjectValue(WindowsProfile);
            }
            if (Optional.IsDefined(ServicePrincipalProfile))
            {
                writer.WritePropertyName("servicePrincipalProfile"u8);
                writer.WriteObjectValue(ServicePrincipalProfile);
            }
            if (Optional.IsCollectionDefined(AddonProfiles))
            {
                writer.WritePropertyName("addonProfiles"u8);
                writer.WriteStartObject();
                foreach (var item in AddonProfiles)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(PodIdentityProfile))
            {
                writer.WritePropertyName("podIdentityProfile"u8);
                writer.WriteObjectValue(PodIdentityProfile);
            }
            if (Optional.IsDefined(OidcIssuerProfile))
            {
                writer.WritePropertyName("oidcIssuerProfile"u8);
                writer.WriteObjectValue(OidcIssuerProfile);
            }
            if (Optional.IsDefined(NodeResourceGroup))
            {
                writer.WritePropertyName("nodeResourceGroup"u8);
                writer.WriteStringValue(NodeResourceGroup);
            }
            if (Optional.IsDefined(NodeResourceGroupProfile))
            {
                writer.WritePropertyName("nodeResourceGroupProfile"u8);
                writer.WriteObjectValue(NodeResourceGroupProfile);
            }
            if (Optional.IsDefined(EnableRbac))
            {
                writer.WritePropertyName("enableRBAC"u8);
                writer.WriteBooleanValue(EnableRbac.Value);
            }
            if (Optional.IsDefined(EnablePodSecurityPolicy))
            {
                writer.WritePropertyName("enablePodSecurityPolicy"u8);
                writer.WriteBooleanValue(EnablePodSecurityPolicy.Value);
            }
            if (Optional.IsDefined(EnableNamespaceResources))
            {
                writer.WritePropertyName("enableNamespaceResources"u8);
                writer.WriteBooleanValue(EnableNamespaceResources.Value);
            }
            if (Optional.IsDefined(NetworkProfile))
            {
                writer.WritePropertyName("networkProfile"u8);
                writer.WriteObjectValue(NetworkProfile);
            }
            if (Optional.IsDefined(AadProfile))
            {
                writer.WritePropertyName("aadProfile"u8);
                writer.WriteObjectValue(AadProfile);
            }
            if (Optional.IsDefined(AutoUpgradeProfile))
            {
                writer.WritePropertyName("autoUpgradeProfile"u8);
                writer.WriteObjectValue(AutoUpgradeProfile);
            }
            if (Optional.IsDefined(AutoScalerProfile))
            {
                writer.WritePropertyName("autoScalerProfile"u8);
                writer.WriteObjectValue(AutoScalerProfile);
            }
            if (Optional.IsDefined(ApiServerAccessProfile))
            {
                writer.WritePropertyName("apiServerAccessProfile"u8);
                writer.WriteObjectValue(ApiServerAccessProfile);
            }
            if (Optional.IsDefined(DiskEncryptionSetId))
            {
                writer.WritePropertyName("diskEncryptionSetID"u8);
                writer.WriteStringValue(DiskEncryptionSetId);
            }
            if (Optional.IsCollectionDefined(IdentityProfile))
            {
                writer.WritePropertyName("identityProfile"u8);
                writer.WriteStartObject();
                foreach (var item in IdentityProfile)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(PrivateLinkResources))
            {
                writer.WritePropertyName("privateLinkResources"u8);
                writer.WriteStartArray();
                foreach (var item in PrivateLinkResources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DisableLocalAccounts))
            {
                writer.WritePropertyName("disableLocalAccounts"u8);
                writer.WriteBooleanValue(DisableLocalAccounts.Value);
            }
            if (Optional.IsDefined(HttpProxyConfig))
            {
                writer.WritePropertyName("httpProxyConfig"u8);
                writer.WriteObjectValue(HttpProxyConfig);
            }
            if (Optional.IsDefined(SecurityProfile))
            {
                writer.WritePropertyName("securityProfile"u8);
                writer.WriteObjectValue(SecurityProfile);
            }
            if (Optional.IsDefined(StorageProfile))
            {
                writer.WritePropertyName("storageProfile"u8);
                writer.WriteObjectValue(StorageProfile);
            }
            if (Optional.IsDefined(IngressProfile))
            {
                writer.WritePropertyName("ingressProfile"u8);
                writer.WriteObjectValue(IngressProfile);
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            if (Optional.IsDefined(WorkloadAutoScalerProfile))
            {
                writer.WritePropertyName("workloadAutoScalerProfile"u8);
                writer.WriteObjectValue(WorkloadAutoScalerProfile);
            }
            if (Optional.IsDefined(AzureMonitorProfile))
            {
                writer.WritePropertyName("azureMonitorProfile"u8);
                writer.WriteObjectValue(AzureMonitorProfile);
            }
            if (Optional.IsDefined(GuardrailsProfile))
            {
                writer.WritePropertyName("guardrailsProfile"u8);
                writer.WriteObjectValue(GuardrailsProfile);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ContainerServiceManagedClusterData DeserializeContainerServiceManagedClusterData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ManagedClusterSku> sku = default;
            Optional<ExtendedLocation> extendedLocation = default;
            Optional<ManagedServiceIdentity> identity = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> provisioningState = default;
            Optional<ContainerServicePowerState> powerState = default;
            Optional<ContainerServiceCreationData> creationData = default;
            Optional<int> maxAgentPools = default;
            Optional<string> kubernetesVersion = default;
            Optional<string> currentKubernetesVersion = default;
            Optional<string> dnsPrefix = default;
            Optional<string> fqdnSubdomain = default;
            Optional<string> fqdn = default;
            Optional<string> privateFQDN = default;
            Optional<string> azurePortalFQDN = default;
            Optional<IList<ManagedClusterAgentPoolProfile>> agentPoolProfiles = default;
            Optional<ContainerServiceLinuxProfile> linuxProfile = default;
            Optional<ManagedClusterWindowsProfile> windowsProfile = default;
            Optional<ManagedClusterServicePrincipalProfile> servicePrincipalProfile = default;
            Optional<IDictionary<string, ManagedClusterAddonProfile>> addonProfiles = default;
            Optional<ManagedClusterPodIdentityProfile> podIdentityProfile = default;
            Optional<ManagedClusterOidcIssuerProfile> oidcIssuerProfile = default;
            Optional<string> nodeResourceGroup = default;
            Optional<ManagedClusterNodeResourceGroupProfile> nodeResourceGroupProfile = default;
            Optional<bool> enableRBAC = default;
            Optional<bool> enablePodSecurityPolicy = default;
            Optional<bool> enableNamespaceResources = default;
            Optional<ContainerServiceNetworkProfile> networkProfile = default;
            Optional<ManagedClusterAadProfile> aadProfile = default;
            Optional<ManagedClusterAutoUpgradeProfile> autoUpgradeProfile = default;
            Optional<ManagedClusterAutoScalerProfile> autoScalerProfile = default;
            Optional<ManagedClusterApiServerAccessProfile> apiServerAccessProfile = default;
            Optional<ResourceIdentifier> diskEncryptionSetId = default;
            Optional<IDictionary<string, ContainerServiceUserAssignedIdentity>> identityProfile = default;
            Optional<IList<ContainerServicePrivateLinkResourceData>> privateLinkResources = default;
            Optional<bool> disableLocalAccounts = default;
            Optional<ManagedClusterHttpProxyConfig> httpProxyConfig = default;
            Optional<ManagedClusterSecurityProfile> securityProfile = default;
            Optional<ManagedClusterStorageProfile> storageProfile = default;
            Optional<ManagedClusterIngressProfile> ingressProfile = default;
            Optional<ContainerServicePublicNetworkAccess> publicNetworkAccess = default;
            Optional<ManagedClusterWorkloadAutoScalerProfile> workloadAutoScalerProfile = default;
            Optional<ManagedClusterAzureMonitorProfile> azureMonitorProfile = default;
            Optional<ManagedClusterGuardrailsProfile> guardrailsProfile = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = ManagedClusterSku.DeserializeManagedClusterSku(property.Value);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = JsonSerializer.Deserialize<ExtendedLocation>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("powerState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            powerState = ContainerServicePowerState.DeserializeContainerServicePowerState(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("creationData"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            creationData = ContainerServiceCreationData.DeserializeContainerServiceCreationData(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("maxAgentPools"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxAgentPools = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("kubernetesVersion"u8))
                        {
                            kubernetesVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("currentKubernetesVersion"u8))
                        {
                            currentKubernetesVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dnsPrefix"u8))
                        {
                            dnsPrefix = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("fqdnSubdomain"u8))
                        {
                            fqdnSubdomain = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("fqdn"u8))
                        {
                            fqdn = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("privateFQDN"u8))
                        {
                            privateFQDN = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("azurePortalFQDN"u8))
                        {
                            azurePortalFQDN = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("agentPoolProfiles"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ManagedClusterAgentPoolProfile> array = new List<ManagedClusterAgentPoolProfile>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ManagedClusterAgentPoolProfile.DeserializeManagedClusterAgentPoolProfile(item));
                            }
                            agentPoolProfiles = array;
                            continue;
                        }
                        if (property0.NameEquals("linuxProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            linuxProfile = ContainerServiceLinuxProfile.DeserializeContainerServiceLinuxProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("windowsProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            windowsProfile = ManagedClusterWindowsProfile.DeserializeManagedClusterWindowsProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("servicePrincipalProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            servicePrincipalProfile = ManagedClusterServicePrincipalProfile.DeserializeManagedClusterServicePrincipalProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("addonProfiles"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, ManagedClusterAddonProfile> dictionary = new Dictionary<string, ManagedClusterAddonProfile>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, ManagedClusterAddonProfile.DeserializeManagedClusterAddonProfile(property1.Value));
                            }
                            addonProfiles = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("podIdentityProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            podIdentityProfile = ManagedClusterPodIdentityProfile.DeserializeManagedClusterPodIdentityProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("oidcIssuerProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            oidcIssuerProfile = ManagedClusterOidcIssuerProfile.DeserializeManagedClusterOidcIssuerProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("nodeResourceGroup"u8))
                        {
                            nodeResourceGroup = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("nodeResourceGroupProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            nodeResourceGroupProfile = ManagedClusterNodeResourceGroupProfile.DeserializeManagedClusterNodeResourceGroupProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("enableRBAC"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableRBAC = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("enablePodSecurityPolicy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enablePodSecurityPolicy = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("enableNamespaceResources"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableNamespaceResources = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("networkProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            networkProfile = ContainerServiceNetworkProfile.DeserializeContainerServiceNetworkProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("aadProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            aadProfile = ManagedClusterAadProfile.DeserializeManagedClusterAadProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("autoUpgradeProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autoUpgradeProfile = ManagedClusterAutoUpgradeProfile.DeserializeManagedClusterAutoUpgradeProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("autoScalerProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autoScalerProfile = ManagedClusterAutoScalerProfile.DeserializeManagedClusterAutoScalerProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("apiServerAccessProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            apiServerAccessProfile = ManagedClusterApiServerAccessProfile.DeserializeManagedClusterApiServerAccessProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("diskEncryptionSetID"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            diskEncryptionSetId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("identityProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, ContainerServiceUserAssignedIdentity> dictionary = new Dictionary<string, ContainerServiceUserAssignedIdentity>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, ContainerServiceUserAssignedIdentity.DeserializeContainerServiceUserAssignedIdentity(property1.Value));
                            }
                            identityProfile = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("privateLinkResources"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ContainerServicePrivateLinkResourceData> array = new List<ContainerServicePrivateLinkResourceData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ContainerServicePrivateLinkResourceData.DeserializeContainerServicePrivateLinkResourceData(item));
                            }
                            privateLinkResources = array;
                            continue;
                        }
                        if (property0.NameEquals("disableLocalAccounts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            disableLocalAccounts = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("httpProxyConfig"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            httpProxyConfig = ManagedClusterHttpProxyConfig.DeserializeManagedClusterHttpProxyConfig(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("securityProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            securityProfile = ManagedClusterSecurityProfile.DeserializeManagedClusterSecurityProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("storageProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            storageProfile = ManagedClusterStorageProfile.DeserializeManagedClusterStorageProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("ingressProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ingressProfile = ManagedClusterIngressProfile.DeserializeManagedClusterIngressProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccess"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            publicNetworkAccess = new ContainerServicePublicNetworkAccess(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("workloadAutoScalerProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            workloadAutoScalerProfile = ManagedClusterWorkloadAutoScalerProfile.DeserializeManagedClusterWorkloadAutoScalerProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("azureMonitorProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureMonitorProfile = ManagedClusterAzureMonitorProfile.DeserializeManagedClusterAzureMonitorProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("guardrailsProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            guardrailsProfile = ManagedClusterGuardrailsProfile.DeserializeManagedClusterGuardrailsProfile(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ContainerServiceManagedClusterData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, sku.Value, extendedLocation, identity, provisioningState.Value, powerState.Value, creationData.Value, Optional.ToNullable(maxAgentPools), kubernetesVersion.Value, currentKubernetesVersion.Value, dnsPrefix.Value, fqdnSubdomain.Value, fqdn.Value, privateFQDN.Value, azurePortalFQDN.Value, Optional.ToList(agentPoolProfiles), linuxProfile.Value, windowsProfile.Value, servicePrincipalProfile.Value, Optional.ToDictionary(addonProfiles), podIdentityProfile.Value, oidcIssuerProfile.Value, nodeResourceGroup.Value, nodeResourceGroupProfile.Value, Optional.ToNullable(enableRBAC), Optional.ToNullable(enablePodSecurityPolicy), Optional.ToNullable(enableNamespaceResources), networkProfile.Value, aadProfile.Value, autoUpgradeProfile.Value, autoScalerProfile.Value, apiServerAccessProfile.Value, diskEncryptionSetId.Value, Optional.ToDictionary(identityProfile), Optional.ToList(privateLinkResources), Optional.ToNullable(disableLocalAccounts), httpProxyConfig.Value, securityProfile.Value, storageProfile.Value, ingressProfile.Value, Optional.ToNullable(publicNetworkAccess), workloadAutoScalerProfile.Value, azureMonitorProfile.Value, guardrailsProfile.Value);
        }
    }
}
