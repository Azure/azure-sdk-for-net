// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    public partial class ManagedClusterAgentPoolProfile : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Core.Optional.IsDefined(Count))
            {
                writer.WritePropertyName("count"u8);
                writer.WriteNumberValue(Count.Value);
            }
            if (Core.Optional.IsDefined(VmSize))
            {
                writer.WritePropertyName("vmSize"u8);
                writer.WriteStringValue(VmSize);
            }
            if (Core.Optional.IsDefined(OSDiskSizeInGB))
            {
                writer.WritePropertyName("osDiskSizeGB"u8);
                writer.WriteNumberValue(OSDiskSizeInGB.Value);
            }
            if (Core.Optional.IsDefined(OSDiskType))
            {
                writer.WritePropertyName("osDiskType"u8);
                writer.WriteStringValue(OSDiskType.Value.ToString());
            }
            if (Core.Optional.IsDefined(KubeletDiskType))
            {
                writer.WritePropertyName("kubeletDiskType"u8);
                writer.WriteStringValue(KubeletDiskType.Value.ToString());
            }
            if (Core.Optional.IsDefined(WorkloadRuntime))
            {
                writer.WritePropertyName("workloadRuntime"u8);
                writer.WriteStringValue(WorkloadRuntime.Value.ToString());
            }
            if (Core.Optional.IsDefined(MessageOfTheDay))
            {
                writer.WritePropertyName("messageOfTheDay"u8);
                writer.WriteStringValue(MessageOfTheDay);
            }
            if (Core.Optional.IsDefined(VnetSubnetId))
            {
                writer.WritePropertyName("vnetSubnetID"u8);
                writer.WriteStringValue(VnetSubnetId);
            }
            if (Core.Optional.IsDefined(PodSubnetId))
            {
                writer.WritePropertyName("podSubnetID"u8);
                writer.WriteStringValue(PodSubnetId);
            }
            if (Core.Optional.IsDefined(MaxPods))
            {
                writer.WritePropertyName("maxPods"u8);
                writer.WriteNumberValue(MaxPods.Value);
            }
            if (Core.Optional.IsDefined(OSType))
            {
                writer.WritePropertyName("osType"u8);
                writer.WriteStringValue(OSType.Value.ToString());
            }
            if (Core.Optional.IsDefined(OSSku))
            {
                writer.WritePropertyName("osSKU"u8);
                writer.WriteStringValue(OSSku.Value.ToString());
            }
            if (Core.Optional.IsDefined(MaxCount))
            {
                writer.WritePropertyName("maxCount"u8);
                writer.WriteNumberValue(MaxCount.Value);
            }
            if (Core.Optional.IsDefined(MinCount))
            {
                writer.WritePropertyName("minCount"u8);
                writer.WriteNumberValue(MinCount.Value);
            }
            if (Core.Optional.IsDefined(EnableAutoScaling))
            {
                writer.WritePropertyName("enableAutoScaling"u8);
                writer.WriteBooleanValue(EnableAutoScaling.Value);
            }
            if (Core.Optional.IsDefined(ScaleDownMode))
            {
                writer.WritePropertyName("scaleDownMode"u8);
                writer.WriteStringValue(ScaleDownMode.Value.ToString());
            }
            if (Core.Optional.IsDefined(AgentPoolType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(AgentPoolType.Value.ToString());
            }
            if (Core.Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode"u8);
                writer.WriteStringValue(Mode.Value.ToString());
            }
            if (Core.Optional.IsDefined(OrchestratorVersion))
            {
                writer.WritePropertyName("orchestratorVersion"u8);
                writer.WriteStringValue(OrchestratorVersion);
            }
            if (Core.Optional.IsDefined(UpgradeSettings))
            {
                writer.WritePropertyName("upgradeSettings"u8);
                writer.WriteObjectValue(UpgradeSettings);
            }
            if (Core.Optional.IsDefined(PowerState))
            {
                writer.WritePropertyName("powerState"u8);
                writer.WriteObjectValue(PowerState);
            }
            if (Core.Optional.IsCollectionDefined(AvailabilityZones))
            {
                writer.WritePropertyName("availabilityZones"u8);
                writer.WriteStartArray();
                foreach (var item in AvailabilityZones)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(EnableNodePublicIP))
            {
                writer.WritePropertyName("enableNodePublicIP"u8);
                writer.WriteBooleanValue(EnableNodePublicIP.Value);
            }
            if (Core.Optional.IsDefined(EnableCustomCATrust))
            {
                writer.WritePropertyName("enableCustomCATrust"u8);
                writer.WriteBooleanValue(EnableCustomCATrust.Value);
            }
            if (Core.Optional.IsDefined(NodePublicIPPrefixId))
            {
                writer.WritePropertyName("nodePublicIPPrefixID"u8);
                writer.WriteStringValue(NodePublicIPPrefixId);
            }
            if (Core.Optional.IsDefined(ScaleSetPriority))
            {
                writer.WritePropertyName("scaleSetPriority"u8);
                writer.WriteStringValue(ScaleSetPriority.Value.ToString());
            }
            if (Core.Optional.IsDefined(ScaleSetEvictionPolicy))
            {
                writer.WritePropertyName("scaleSetEvictionPolicy"u8);
                writer.WriteStringValue(ScaleSetEvictionPolicy.Value.ToString());
            }
            if (Core.Optional.IsDefined(SpotMaxPrice))
            {
                writer.WritePropertyName("spotMaxPrice"u8);
                writer.WriteNumberValue(SpotMaxPrice.Value);
            }
            if (Core.Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsCollectionDefined(NodeLabels))
            {
                writer.WritePropertyName("nodeLabels"u8);
                writer.WriteStartObject();
                foreach (var item in NodeLabels)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsCollectionDefined(NodeTaints))
            {
                writer.WritePropertyName("nodeTaints"u8);
                writer.WriteStartArray();
                foreach (var item in NodeTaints)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(ProximityPlacementGroupId))
            {
                writer.WritePropertyName("proximityPlacementGroupID"u8);
                writer.WriteStringValue(ProximityPlacementGroupId);
            }
            if (Core.Optional.IsDefined(KubeletConfig))
            {
                writer.WritePropertyName("kubeletConfig"u8);
                writer.WriteObjectValue(KubeletConfig);
            }
            if (Core.Optional.IsDefined(LinuxOSConfig))
            {
                writer.WritePropertyName("linuxOSConfig"u8);
                writer.WriteObjectValue(LinuxOSConfig);
            }
            if (Core.Optional.IsDefined(EnableEncryptionAtHost))
            {
                writer.WritePropertyName("enableEncryptionAtHost"u8);
                writer.WriteBooleanValue(EnableEncryptionAtHost.Value);
            }
            if (Core.Optional.IsDefined(EnableUltraSsd))
            {
                writer.WritePropertyName("enableUltraSSD"u8);
                writer.WriteBooleanValue(EnableUltraSsd.Value);
            }
            if (Core.Optional.IsDefined(EnableFips))
            {
                writer.WritePropertyName("enableFIPS"u8);
                writer.WriteBooleanValue(EnableFips.Value);
            }
            if (Core.Optional.IsDefined(GpuInstanceProfile))
            {
                writer.WritePropertyName("gpuInstanceProfile"u8);
                writer.WriteStringValue(GpuInstanceProfile.Value.ToString());
            }
            if (Core.Optional.IsDefined(CreationData))
            {
                writer.WritePropertyName("creationData"u8);
                writer.WriteObjectValue(CreationData);
            }
            if (Core.Optional.IsDefined(CapacityReservationGroupId))
            {
                writer.WritePropertyName("capacityReservationGroupID"u8);
                writer.WriteStringValue(CapacityReservationGroupId);
            }
            if (Core.Optional.IsDefined(HostGroupId))
            {
                writer.WritePropertyName("hostGroupID"u8);
                writer.WriteStringValue(HostGroupId);
            }
            if (Core.Optional.IsDefined(WindowsProfile))
            {
                writer.WritePropertyName("windowsProfile"u8);
                writer.WriteObjectValue(WindowsProfile);
            }
            if (Core.Optional.IsDefined(NetworkProfile))
            {
                writer.WritePropertyName("networkProfile"u8);
                writer.WriteObjectValue(NetworkProfile);
            }
            writer.WriteEndObject();
        }

        internal static ManagedClusterAgentPoolProfile DeserializeManagedClusterAgentPoolProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            Core.Optional<int> count = default;
            Core.Optional<string> vmSize = default;
            Core.Optional<int> osDiskSizeGB = default;
            Core.Optional<ContainerServiceOSDiskType> osDiskType = default;
            Core.Optional<KubeletDiskType> kubeletDiskType = default;
            Core.Optional<WorkloadRuntime> workloadRuntime = default;
            Core.Optional<string> messageOfTheDay = default;
            Core.Optional<ResourceIdentifier> vnetSubnetId = default;
            Core.Optional<ResourceIdentifier> podSubnetId = default;
            Core.Optional<int> maxPods = default;
            Core.Optional<ContainerServiceOSType> osType = default;
            Core.Optional<ContainerServiceOSSku> osSku = default;
            Core.Optional<int> maxCount = default;
            Core.Optional<int> minCount = default;
            Core.Optional<bool> enableAutoScaling = default;
            Core.Optional<ScaleDownMode> scaleDownMode = default;
            Core.Optional<AgentPoolType> type = default;
            Core.Optional<AgentPoolMode> mode = default;
            Core.Optional<string> orchestratorVersion = default;
            Core.Optional<string> currentOrchestratorVersion = default;
            Core.Optional<string> nodeImageVersion = default;
            Core.Optional<AgentPoolUpgradeSettings> upgradeSettings = default;
            Core.Optional<string> provisioningState = default;
            Core.Optional<ContainerServicePowerState> powerState = default;
            Core.Optional<IList<string>> availabilityZones = default;
            Core.Optional<bool> enableNodePublicIP = default;
            Core.Optional<bool> enableCustomCATrust = default;
            Core.Optional<ResourceIdentifier> nodePublicIPPrefixId = default;
            Core.Optional<ScaleSetPriority> scaleSetPriority = default;
            Core.Optional<ScaleSetEvictionPolicy> scaleSetEvictionPolicy = default;
            Core.Optional<float> spotMaxPrice = default;
            Core.Optional<IDictionary<string, string>> tags = default;
            Core.Optional<IDictionary<string, string>> nodeLabels = default;
            Core.Optional<IList<string>> nodeTaints = default;
            Core.Optional<ResourceIdentifier> proximityPlacementGroupId = default;
            Core.Optional<KubeletConfig> kubeletConfig = default;
            Core.Optional<LinuxOSConfig> linuxOSConfig = default;
            Core.Optional<bool> enableEncryptionAtHost = default;
            Core.Optional<bool> enableUltraSsd = default;
            Core.Optional<bool> enableFIPS = default;
            Core.Optional<GpuInstanceProfile> gpuInstanceProfile = default;
            Core.Optional<ContainerServiceCreationData> creationData = default;
            Core.Optional<ResourceIdentifier> capacityReservationGroupId = default;
            Core.Optional<ResourceIdentifier> hostGroupId = default;
            Core.Optional<AgentPoolWindowsProfile> windowsProfile = default;
            Core.Optional<AgentPoolNetworkProfile> networkProfile = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    count = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmSize"u8))
                {
                    vmSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osDiskSizeGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osDiskSizeGB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("osDiskType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osDiskType = new ContainerServiceOSDiskType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("kubeletDiskType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kubeletDiskType = new KubeletDiskType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("workloadRuntime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    workloadRuntime = new WorkloadRuntime(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("messageOfTheDay"u8))
                {
                    messageOfTheDay = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vnetSubnetID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vnetSubnetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("podSubnetID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    podSubnetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxPods"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxPods = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osType = new ContainerServiceOSType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("osSKU"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osSku = new ContainerServiceOSSku(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("enableAutoScaling"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAutoScaling = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("scaleDownMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scaleDownMode = new ScaleDownMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new AgentPoolType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("mode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new AgentPoolMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("orchestratorVersion"u8))
                {
                    orchestratorVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("currentOrchestratorVersion"u8))
                {
                    currentOrchestratorVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeImageVersion"u8))
                {
                    nodeImageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("upgradeSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    upgradeSettings = AgentPoolUpgradeSettings.DeserializeAgentPoolUpgradeSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("powerState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    powerState = ContainerServicePowerState.DeserializeContainerServicePowerState(property.Value);
                    continue;
                }
                if (property.NameEquals("availabilityZones"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    availabilityZones = array;
                    continue;
                }
                if (property.NameEquals("enableNodePublicIP"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableNodePublicIP = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableCustomCATrust"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableCustomCATrust = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("nodePublicIPPrefixID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodePublicIPPrefixId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scaleSetPriority"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scaleSetPriority = new ScaleSetPriority(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scaleSetEvictionPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scaleSetEvictionPolicy = new ScaleSetEvictionPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("spotMaxPrice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    spotMaxPrice = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("nodeLabels"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    nodeLabels = dictionary;
                    continue;
                }
                if (property.NameEquals("nodeTaints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    nodeTaints = array;
                    continue;
                }
                if (property.NameEquals("proximityPlacementGroupID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    proximityPlacementGroupId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("kubeletConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kubeletConfig = KubeletConfig.DeserializeKubeletConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("linuxOSConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    linuxOSConfig = LinuxOSConfig.DeserializeLinuxOSConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("enableEncryptionAtHost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableEncryptionAtHost = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableUltraSSD"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableUltraSsd = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableFIPS"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableFIPS = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("gpuInstanceProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gpuInstanceProfile = new GpuInstanceProfile(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("creationData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    creationData = ContainerServiceCreationData.DeserializeContainerServiceCreationData(property.Value);
                    continue;
                }
                if (property.NameEquals("capacityReservationGroupID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capacityReservationGroupId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hostGroupID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hostGroupId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("windowsProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    windowsProfile = AgentPoolWindowsProfile.DeserializeAgentPoolWindowsProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("networkProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkProfile = AgentPoolNetworkProfile.DeserializeAgentPoolNetworkProfile(property.Value);
                    continue;
                }
            }
            return new ManagedClusterAgentPoolProfile(Core.Optional.ToNullable(count), vmSize.Value, Core.Optional.ToNullable(osDiskSizeGB), Core.Optional.ToNullable(osDiskType), Core.Optional.ToNullable(kubeletDiskType), Core.Optional.ToNullable(workloadRuntime), messageOfTheDay.Value, vnetSubnetId.Value, podSubnetId.Value, Core.Optional.ToNullable(maxPods), Core.Optional.ToNullable(osType), Core.Optional.ToNullable(osSku), Core.Optional.ToNullable(maxCount), Core.Optional.ToNullable(minCount), Core.Optional.ToNullable(enableAutoScaling), Core.Optional.ToNullable(scaleDownMode), Core.Optional.ToNullable(type), Core.Optional.ToNullable(mode), orchestratorVersion.Value, currentOrchestratorVersion.Value, nodeImageVersion.Value, upgradeSettings.Value, provisioningState.Value, powerState.Value, Core.Optional.ToList(availabilityZones), Core.Optional.ToNullable(enableNodePublicIP), Core.Optional.ToNullable(enableCustomCATrust), nodePublicIPPrefixId.Value, Core.Optional.ToNullable(scaleSetPriority), Core.Optional.ToNullable(scaleSetEvictionPolicy), Core.Optional.ToNullable(spotMaxPrice), Core.Optional.ToDictionary(tags), Core.Optional.ToDictionary(nodeLabels), Core.Optional.ToList(nodeTaints), proximityPlacementGroupId.Value, kubeletConfig.Value, linuxOSConfig.Value, Core.Optional.ToNullable(enableEncryptionAtHost), Core.Optional.ToNullable(enableUltraSsd), Core.Optional.ToNullable(enableFIPS), Core.Optional.ToNullable(gpuInstanceProfile), creationData.Value, capacityReservationGroupId.Value, hostGroupId.Value, windowsProfile.Value, networkProfile.Value, name);
        }
    }
}
