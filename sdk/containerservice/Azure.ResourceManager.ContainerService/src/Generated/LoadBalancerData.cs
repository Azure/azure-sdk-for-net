// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.ContainerService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ContainerService
{
    /// <summary>
    /// A class representing the LoadBalancer data model.
    /// The configurations regarding multiple standard load balancers. If not supplied, single load balancer mode will be used. Multiple standard load balancers mode will be used if at lease one configuration is supplied. There has to be a configuration named `kubernetes`.
    /// </summary>
    public partial class LoadBalancerData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LoadBalancerData"/>. </summary>
        public LoadBalancerData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="LoadBalancerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="namePropertiesName"> Name of the public load balancer. There will be an internal load balancer created if needed, and the name will be `&lt;name&gt;-internal`. The internal lb shares the same configurations as the external one. The internal lbs are not needed to be included in LoadBalancer list. There must be a name of kubernetes in the list. </param>
        /// <param name="primaryAgentPoolName"> Required field. A string value that must specify the ID of an existing agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary pool for a single load balancer. </param>
        /// <param name="allowServicePlacement"> Whether to automatically place services on the load balancer. If not supplied, the default value is true. If set to false manually, both of the external and the internal load balancer will not be selected for services unless they explicitly target it. </param>
        /// <param name="serviceLabelSelector"> Only services that must match this selector can be placed on this load balancer. </param>
        /// <param name="serviceNamespaceSelector"> Services created in namespaces that match the selector can be placed on this load balancer. </param>
        /// <param name="nodeSelector"> Nodes that match this selector will be possible members of this load balancer. </param>
        /// <param name="provisioningState"> The current provisioning state. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LoadBalancerData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string namePropertiesName, string primaryAgentPoolName, bool? allowServicePlacement, LabelSelector serviceLabelSelector, LabelSelector serviceNamespaceSelector, LabelSelector nodeSelector, string provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            NamePropertiesName = namePropertiesName;
            PrimaryAgentPoolName = primaryAgentPoolName;
            AllowServicePlacement = allowServicePlacement;
            ServiceLabelSelector = serviceLabelSelector;
            ServiceNamespaceSelector = serviceNamespaceSelector;
            NodeSelector = nodeSelector;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Name of the public load balancer. There will be an internal load balancer created if needed, and the name will be `&lt;name&gt;-internal`. The internal lb shares the same configurations as the external one. The internal lbs are not needed to be included in LoadBalancer list. There must be a name of kubernetes in the list. </summary>
        [WirePath("properties.name")]
        public string NamePropertiesName { get; set; }
        /// <summary> Required field. A string value that must specify the ID of an existing agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary pool for a single load balancer. </summary>
        [WirePath("properties.primaryAgentPoolName")]
        public string PrimaryAgentPoolName { get; set; }
        /// <summary> Whether to automatically place services on the load balancer. If not supplied, the default value is true. If set to false manually, both of the external and the internal load balancer will not be selected for services unless they explicitly target it. </summary>
        [WirePath("properties.allowServicePlacement")]
        public bool? AllowServicePlacement { get; set; }
        /// <summary> Only services that must match this selector can be placed on this load balancer. </summary>
        [WirePath("properties.serviceLabelSelector")]
        public LabelSelector ServiceLabelSelector { get; set; }
        /// <summary> Services created in namespaces that match the selector can be placed on this load balancer. </summary>
        [WirePath("properties.serviceNamespaceSelector")]
        public LabelSelector ServiceNamespaceSelector { get; set; }
        /// <summary> Nodes that match this selector will be possible members of this load balancer. </summary>
        [WirePath("properties.nodeSelector")]
        public LabelSelector NodeSelector { get; set; }
        /// <summary> The current provisioning state. </summary>
        [WirePath("properties.provisioningState")]
        public string ProvisioningState { get; }
    }
}
