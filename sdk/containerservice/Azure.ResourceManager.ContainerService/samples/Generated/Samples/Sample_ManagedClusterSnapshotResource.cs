// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ContainerService.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ContainerService.Samples
{
    public partial class Sample_ManagedClusterSnapshotResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetManagedClusterSnapshot()
        {
            // Generated from example definition: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-01-02-preview/examples/ManagedClusterSnapshotsGet.json
            // this example is just showing the usage of "ManagedClusterSnapshots_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ManagedClusterSnapshotResource created on azure
            // for more information of creating ManagedClusterSnapshotResource, please refer to the document of ManagedClusterSnapshotResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string resourceName = "snapshot1";
            ResourceIdentifier managedClusterSnapshotResourceId = ManagedClusterSnapshotResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            ManagedClusterSnapshotResource managedClusterSnapshot = client.GetManagedClusterSnapshotResource(managedClusterSnapshotResourceId);

            // invoke the operation
            ManagedClusterSnapshotResource result = await managedClusterSnapshot.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ManagedClusterSnapshotData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteManagedClusterSnapshot()
        {
            // Generated from example definition: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-01-02-preview/examples/ManagedClusterSnapshotsDelete.json
            // this example is just showing the usage of "ManagedClusterSnapshots_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ManagedClusterSnapshotResource created on azure
            // for more information of creating ManagedClusterSnapshotResource, please refer to the document of ManagedClusterSnapshotResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string resourceName = "snapshot1";
            ResourceIdentifier managedClusterSnapshotResourceId = ManagedClusterSnapshotResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            ManagedClusterSnapshotResource managedClusterSnapshot = client.GetManagedClusterSnapshotResource(managedClusterSnapshotResourceId);

            // invoke the operation
            await managedClusterSnapshot.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateManagedClusterSnapshotTags()
        {
            // Generated from example definition: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-01-02-preview/examples/ManagedClusterSnapshotsUpdateTags.json
            // this example is just showing the usage of "ManagedClusterSnapshots_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ManagedClusterSnapshotResource created on azure
            // for more information of creating ManagedClusterSnapshotResource, please refer to the document of ManagedClusterSnapshotResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string resourceName = "snapshot1";
            ResourceIdentifier managedClusterSnapshotResourceId = ManagedClusterSnapshotResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            ManagedClusterSnapshotResource managedClusterSnapshot = client.GetManagedClusterSnapshotResource(managedClusterSnapshotResourceId);

            // invoke the operation
            ContainerServiceTagsObject containerServiceTagsObject = new ContainerServiceTagsObject
            {
                Tags =
{
["key2"] = "new-val2",
["key3"] = "val3"
},
            };
            ManagedClusterSnapshotResource result = await managedClusterSnapshot.UpdateAsync(containerServiceTagsObject);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ManagedClusterSnapshotData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
