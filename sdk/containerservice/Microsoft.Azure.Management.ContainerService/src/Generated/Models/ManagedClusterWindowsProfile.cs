// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Profile for Windows VMs in the container service cluster.
    /// </summary>
    public partial class ManagedClusterWindowsProfile
    {
        /// <summary>
        /// Initializes a new instance of the ManagedClusterWindowsProfile
        /// class.
        /// </summary>
        public ManagedClusterWindowsProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedClusterWindowsProfile
        /// class.
        /// </summary>
        /// <param name="adminUsername">The administrator username to use for
        /// Windows VMs.</param>
        /// <param name="adminPassword">The administrator password to use for
        /// Windows VMs.</param>
        /// <param name="licenseType">The licenseType to use for Windows VMs.
        /// Windows_Server is used to enable Azure Hybrid User Benefits for
        /// Windows VMs. Possible values include: 'None',
        /// 'Windows_Server'</param>
        public ManagedClusterWindowsProfile(string adminUsername, string adminPassword = default(string), string licenseType = default(string))
        {
            AdminUsername = adminUsername;
            AdminPassword = adminPassword;
            LicenseType = licenseType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the administrator username to use for Windows VMs.
        /// </summary>
        [JsonProperty(PropertyName = "adminUsername")]
        public string AdminUsername { get; set; }

        /// <summary>
        /// Gets or sets the administrator password to use for Windows VMs.
        /// </summary>
        [JsonProperty(PropertyName = "adminPassword")]
        public string AdminPassword { get; set; }

        /// <summary>
        /// Gets or sets the licenseType to use for Windows VMs. Windows_Server
        /// is used to enable Azure Hybrid User Benefits for Windows VMs.
        /// Possible values include: 'None', 'Windows_Server'
        /// </summary>
        [JsonProperty(PropertyName = "licenseType")]
        public string LicenseType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AdminUsername == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AdminUsername");
            }
            if (AdminUsername != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(AdminUsername, "^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "AdminUsername", "^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$");
                }
            }
            if (AdminPassword != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(AdminPassword, "^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\\^&\\*\\(\\)])[a-zA-Z\\d!@#$%\\^&\\*\\(\\)]{12,123}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "AdminPassword", "^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\\^&\\*\\(\\)])[a-zA-Z\\d!@#$%\\^&\\*\\(\\)]{12,123}$");
                }
            }
        }
    }
}
