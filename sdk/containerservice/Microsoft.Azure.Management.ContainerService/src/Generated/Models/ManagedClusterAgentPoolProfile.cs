// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Profile for the container service agent pool.
    /// </summary>
    public partial class ManagedClusterAgentPoolProfile : ManagedClusterAgentPoolProfileProperties
    {
        /// <summary>
        /// Initializes a new instance of the ManagedClusterAgentPoolProfile
        /// class.
        /// </summary>
        public ManagedClusterAgentPoolProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedClusterAgentPoolProfile
        /// class.
        /// </summary>
        /// <param name="name">Unique name of the agent pool profile in the
        /// context of the subscription and resource group.</param>
        /// <param name="count">Number of agents (VMs) to host docker
        /// containers. Allowed values must be in the range of 0 to 1000
        /// (inclusive) for user pools and in the range of 1 to 1000
        /// (inclusive) for system pools. The default value is 1.</param>
        /// <param name="vmSize">The size of the agent pool VMs.</param>
        /// <param name="osDiskType">Possible values include: 'Managed',
        /// 'Ephemeral'</param>
        /// <param name="kubeletDiskType">Possible values include: 'OS',
        /// 'Temporary'</param>
        /// <param name="vnetSubnetID">The ID of the subnet which agent pool
        /// nodes and optionally pods will join on startup.</param>
        /// <param name="podSubnetID">The ID of the subnet which pods will join
        /// when launched.</param>
        /// <param name="maxPods">The maximum number of pods that can run on a
        /// node.</param>
        /// <param name="osType">Possible values include: 'Linux',
        /// 'Windows'</param>
        /// <param name="osSKU">Possible values include: 'Ubuntu',
        /// 'CBLMariner'</param>
        /// <param name="maxCount">The maximum number of nodes for
        /// auto-scaling</param>
        /// <param name="minCount">The minimum number of nodes for
        /// auto-scaling</param>
        /// <param name="enableAutoScaling">Whether to enable
        /// auto-scaler</param>
        /// <param name="type">Possible values include:
        /// 'VirtualMachineScaleSets', 'AvailabilitySet'</param>
        /// <param name="mode">Possible values include: 'System',
        /// 'User'</param>
        /// <param name="orchestratorVersion">The version of Kubernetes running
        /// on the Agent Pool.</param>
        /// <param name="nodeImageVersion">The version of node image</param>
        /// <param name="upgradeSettings">Settings for upgrading the
        /// agentpool</param>
        /// <param name="provisioningState">The current deployment or
        /// provisioning state.</param>
        /// <param name="powerState">Describes whether the Agent Pool is
        /// Running or Stopped</param>
        /// <param name="availabilityZones">The list of Availability zones to
        /// use for nodes. This can only be specified if the AgentPoolType
        /// property is 'VirtualMachineScaleSets'.</param>
        /// <param name="enableNodePublicIP">Whether each node is allocated its
        /// own public IP.</param>
        /// <param name="nodePublicIPPrefixID">The public IP prefix ID which VM
        /// nodes should use IPs from.</param>
        /// <param name="scaleSetPriority">The Virtual Machine Scale Set
        /// priority. If not specified, the default is 'Regular'. Possible
        /// values include: 'Spot', 'Regular'</param>
        /// <param name="scaleSetEvictionPolicy">The Virtual Machine Scale Set
        /// eviction policy to use.</param>
        /// <param name="spotMaxPrice">The max price (in US Dollars) you are
        /// willing to pay for spot instances. Possible values are any decimal
        /// value greater than zero or -1 which indicates default price to be
        /// up-to on-demand.</param>
        /// <param name="tags">The tags to be persisted on the agent pool
        /// virtual machine scale set.</param>
        /// <param name="nodeLabels">The node labels to be persisted across all
        /// nodes in agent pool.</param>
        /// <param name="nodeTaints">The taints added to new nodes during node
        /// pool create and scale. For example, key=value:NoSchedule.</param>
        /// <param name="proximityPlacementGroupID">The ID for Proximity
        /// Placement Group.</param>
        /// <param name="kubeletConfig">The Kubelet configuration on the agent
        /// pool nodes.</param>
        /// <param name="linuxOSConfig">The OS configuration of Linux agent
        /// nodes.</param>
        /// <param name="enableEncryptionAtHost">Whether to enable host based
        /// OS and data drive encryption.</param>
        /// <param name="enableUltraSSD">Whether to enable UltraSSD</param>
        /// <param name="enableFIPS">Whether to use a FIPS-enabled OS.</param>
        /// <param name="gpuInstanceProfile">GPUInstanceProfile to be used to
        /// specify GPU MIG instance profile for supported GPU VM SKU. Possible
        /// values include: 'MIG1g', 'MIG2g', 'MIG3g', 'MIG4g', 'MIG7g'</param>
        public ManagedClusterAgentPoolProfile(string name, int? count = default(int?), string vmSize = default(string), int? osDiskSizeGB = default(int?), string osDiskType = default(string), string kubeletDiskType = default(string), string vnetSubnetID = default(string), string podSubnetID = default(string), int? maxPods = default(int?), string osType = default(string), string osSKU = default(string), int? maxCount = default(int?), int? minCount = default(int?), bool? enableAutoScaling = default(bool?), string type = default(string), string mode = default(string), string orchestratorVersion = default(string), string nodeImageVersion = default(string), AgentPoolUpgradeSettings upgradeSettings = default(AgentPoolUpgradeSettings), string provisioningState = default(string), PowerState powerState = default(PowerState), IList<string> availabilityZones = default(IList<string>), bool? enableNodePublicIP = default(bool?), string nodePublicIPPrefixID = default(string), string scaleSetPriority = default(string), string scaleSetEvictionPolicy = default(string), double? spotMaxPrice = default(double?), IDictionary<string, string> tags = default(IDictionary<string, string>), IDictionary<string, string> nodeLabels = default(IDictionary<string, string>), IList<string> nodeTaints = default(IList<string>), string proximityPlacementGroupID = default(string), KubeletConfig kubeletConfig = default(KubeletConfig), LinuxOSConfig linuxOSConfig = default(LinuxOSConfig), bool? enableEncryptionAtHost = default(bool?), bool? enableUltraSSD = default(bool?), bool? enableFIPS = default(bool?), string gpuInstanceProfile = default(string))
            : base(count, vmSize, osDiskSizeGB, osDiskType, kubeletDiskType, vnetSubnetID, podSubnetID, maxPods, osType, osSKU, maxCount, minCount, enableAutoScaling, type, mode, orchestratorVersion, nodeImageVersion, upgradeSettings, provisioningState, powerState, availabilityZones, enableNodePublicIP, nodePublicIPPrefixID, scaleSetPriority, scaleSetEvictionPolicy, spotMaxPrice, tags, nodeLabels, nodeTaints, proximityPlacementGroupID, kubeletConfig, linuxOSConfig, enableEncryptionAtHost, enableUltraSSD, enableFIPS, gpuInstanceProfile)
        {
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique name of the agent pool profile in the context
        /// of the subscription and resource group.
        /// </summary>
        /// <remarks>
        /// Windows agent pool names must be 6 characters or less.
        /// </remarks>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Name, "^[a-z][a-z0-9]{0,11}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Name", "^[a-z][a-z0-9]{0,11}$");
                }
            }
        }
    }
}
