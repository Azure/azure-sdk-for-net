// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Reference to a secret stored in Azure Key Vault.
    /// </summary>
    public partial class KeyVaultSecretRef
    {
        /// <summary>
        /// Initializes a new instance of the KeyVaultSecretRef class.
        /// </summary>
        public KeyVaultSecretRef()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KeyVaultSecretRef class.
        /// </summary>
        /// <param name="vaultID">Key vault identifier.</param>
        /// <param name="secretName">The secret name.</param>
        /// <param name="version">The secret version.</param>
        public KeyVaultSecretRef(string vaultID, string secretName, string version = default(string))
        {
            VaultID = vaultID;
            SecretName = secretName;
            Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets key vault identifier.
        /// </summary>
        [JsonProperty(PropertyName = "vaultID")]
        public string VaultID { get; set; }

        /// <summary>
        /// Gets or sets the secret name.
        /// </summary>
        [JsonProperty(PropertyName = "secretName")]
        public string SecretName { get; set; }

        /// <summary>
        /// Gets or sets the secret version.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VaultID == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VaultID");
            }
            if (SecretName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SecretName");
            }
        }
    }
}
