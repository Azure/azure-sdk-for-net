// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Desired managed outbound IPs for the cluster load balancer.
    /// </summary>
    public partial class ManagedClusterLoadBalancerProfileManagedOutboundIPs
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ManagedClusterLoadBalancerProfileManagedOutboundIPs class.
        /// </summary>
        public ManagedClusterLoadBalancerProfileManagedOutboundIPs()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ManagedClusterLoadBalancerProfileManagedOutboundIPs class.
        /// </summary>
        /// <param name="count">The desired number of outbound IPs
        /// created/managed by Azure for the cluster load balancer. Allowed
        /// values must be in the range of 1 to 100 (inclusive). The default
        /// value is 1. </param>
        public ManagedClusterLoadBalancerProfileManagedOutboundIPs(int? count = default(int?))
        {
            Count = count;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the desired number of outbound IPs created/managed by
        /// Azure for the cluster load balancer. Allowed values must be in the
        /// range of 1 to 100 (inclusive). The default value is 1.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Count > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Count", 100);
            }
            if (Count < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Count", 1);
            }
        }
    }
}
