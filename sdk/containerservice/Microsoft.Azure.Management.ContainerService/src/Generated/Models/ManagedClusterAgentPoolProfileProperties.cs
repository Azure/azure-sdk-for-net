// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties for the container service agent pool profile.
    /// </summary>
    public partial class ManagedClusterAgentPoolProfileProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ManagedClusterAgentPoolProfileProperties class.
        /// </summary>
        public ManagedClusterAgentPoolProfileProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ManagedClusterAgentPoolProfileProperties class.
        /// </summary>
        /// <param name="count">Number of agents (VMs) to host docker
        /// containers. Allowed values must be in the range of 0 to 1000
        /// (inclusive) for user pools and in the range of 1 to 1000
        /// (inclusive) for system pools. The default value is 1.</param>
        /// <param name="vmSize">Size of agent VMs.</param>
        /// <param name="osDiskSizeGB">OS Disk Size in GB to be used to specify
        /// the disk size for every machine in this master/agent pool. If you
        /// specify 0, it will apply the default osDisk size according to the
        /// vmSize specified.</param>
        /// <param name="osDiskType">OS disk type to be used for machines in a
        /// given agent pool. Allowed values are 'Ephemeral' and 'Managed'. If
        /// unspecified, defaults to 'Ephemeral' when the VM supports ephemeral
        /// OS and has a cache disk larger than the requested OSDiskSizeGB.
        /// Otherwise, defaults to 'Managed'. May not be changed after
        /// creation. Possible values include: 'Managed', 'Ephemeral'</param>
        /// <param name="kubeletDiskType">KubeletDiskType determines the
        /// placement of emptyDir volumes, container runtime data root, and
        /// Kubelet ephemeral storage. Currently allows one value, OS,
        /// resulting in Kubelet using the OS disk for data. Possible values
        /// include: 'OS', 'Temporary'</param>
        /// <param name="vnetSubnetID">VNet SubnetID specifies the VNet's
        /// subnet identifier for nodes and maybe pods</param>
        /// <param name="podSubnetID">Pod SubnetID specifies the VNet's subnet
        /// identifier for pods.</param>
        /// <param name="maxPods">Maximum number of pods that can run on a
        /// node.</param>
        /// <param name="osType">OsType to be used to specify os type. Choose
        /// from Linux and Windows. Default to Linux. Possible values include:
        /// 'Linux', 'Windows'</param>
        /// <param name="osSKU">OsSKU to be used to specify os sku. Choose from
        /// Ubuntu(default) and CBLMariner for Linux OSType. Not applicable to
        /// Windows OSType. Possible values include: 'Ubuntu',
        /// 'CBLMariner'</param>
        /// <param name="maxCount">Maximum number of nodes for
        /// auto-scaling</param>
        /// <param name="minCount">Minimum number of nodes for
        /// auto-scaling</param>
        /// <param name="enableAutoScaling">Whether to enable
        /// auto-scaler</param>
        /// <param name="type">AgentPoolType represents types of an agent pool.
        /// Possible values include: 'VirtualMachineScaleSets',
        /// 'AvailabilitySet'</param>
        /// <param name="mode">AgentPoolMode represents mode of an agent pool.
        /// Possible values include: 'System', 'User'</param>
        /// <param name="orchestratorVersion">Version of orchestrator specified
        /// when creating the managed cluster.</param>
        /// <param name="nodeImageVersion">Version of node image</param>
        /// <param name="upgradeSettings">Settings for upgrading the
        /// agentpool</param>
        /// <param name="provisioningState">The current deployment or
        /// provisioning state, which only appears in the response.</param>
        /// <param name="powerState">Describes whether the Agent Pool is
        /// Running or Stopped</param>
        /// <param name="availabilityZones">Availability zones for nodes. Must
        /// use VirtualMachineScaleSets AgentPoolType.</param>
        /// <param name="enableNodePublicIP">Enable public IP for nodes</param>
        /// <param name="nodePublicIPPrefixID">Public IP Prefix ID. VM nodes
        /// use IPs assigned from this Public IP Prefix.</param>
        /// <param name="scaleSetPriority">ScaleSetPriority to be used to
        /// specify virtual machine scale set priority. Default to regular.
        /// Possible values include: 'Spot', 'Regular'</param>
        /// <param name="scaleSetEvictionPolicy">ScaleSetEvictionPolicy to be
        /// used to specify eviction policy for Spot virtual machine scale set.
        /// Default to Delete. Possible values include: 'Delete',
        /// 'Deallocate'</param>
        /// <param name="spotMaxPrice">SpotMaxPrice to be used to specify the
        /// maximum price you are willing to pay in US Dollars. Possible values
        /// are any decimal value greater than zero or -1 which indicates
        /// default price to be up-to on-demand.</param>
        /// <param name="tags">Agent pool tags to be persisted on the agent
        /// pool virtual machine scale set.</param>
        /// <param name="nodeLabels">Agent pool node labels to be persisted
        /// across all nodes in agent pool.</param>
        /// <param name="nodeTaints">Taints added to new nodes during node pool
        /// create and scale. For example, key=value:NoSchedule.</param>
        /// <param name="proximityPlacementGroupID">The ID for Proximity
        /// Placement Group.</param>
        /// <param name="kubeletConfig">KubeletConfig specifies the
        /// configuration of kubelet on agent nodes.</param>
        /// <param name="linuxOSConfig">LinuxOSConfig specifies the OS
        /// configuration of linux agent nodes.</param>
        /// <param name="enableEncryptionAtHost">Whether to enable
        /// EncryptionAtHost</param>
        /// <param name="enableUltraSSD">Whether to enable UltraSSD</param>
        /// <param name="enableFIPS">Whether to use FIPS enabled OS</param>
        /// <param name="gpuInstanceProfile">GPUInstanceProfile to be used to
        /// specify GPU MIG instance profile for supported GPU VM SKU.
        /// Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g. Possible
        /// values include: 'MIG1g', 'MIG2g', 'MIG3g', 'MIG4g', 'MIG7g'</param>
        public ManagedClusterAgentPoolProfileProperties(int? count = default(int?), string vmSize = default(string), int? osDiskSizeGB = default(int?), string osDiskType = default(string), string kubeletDiskType = default(string), string vnetSubnetID = default(string), string podSubnetID = default(string), int? maxPods = default(int?), string osType = default(string), string osSKU = default(string), int? maxCount = default(int?), int? minCount = default(int?), bool? enableAutoScaling = default(bool?), string type = default(string), string mode = default(string), string orchestratorVersion = default(string), string nodeImageVersion = default(string), AgentPoolUpgradeSettings upgradeSettings = default(AgentPoolUpgradeSettings), string provisioningState = default(string), PowerState powerState = default(PowerState), IList<string> availabilityZones = default(IList<string>), bool? enableNodePublicIP = default(bool?), string nodePublicIPPrefixID = default(string), string scaleSetPriority = default(string), string scaleSetEvictionPolicy = default(string), double? spotMaxPrice = default(double?), IDictionary<string, string> tags = default(IDictionary<string, string>), IDictionary<string, string> nodeLabels = default(IDictionary<string, string>), IList<string> nodeTaints = default(IList<string>), string proximityPlacementGroupID = default(string), KubeletConfig kubeletConfig = default(KubeletConfig), LinuxOSConfig linuxOSConfig = default(LinuxOSConfig), bool? enableEncryptionAtHost = default(bool?), bool? enableUltraSSD = default(bool?), bool? enableFIPS = default(bool?), string gpuInstanceProfile = default(string))
        {
            Count = count;
            VmSize = vmSize;
            OsDiskSizeGB = osDiskSizeGB;
            OsDiskType = osDiskType;
            KubeletDiskType = kubeletDiskType;
            VnetSubnetID = vnetSubnetID;
            PodSubnetID = podSubnetID;
            MaxPods = maxPods;
            OsType = osType;
            OsSKU = osSKU;
            MaxCount = maxCount;
            MinCount = minCount;
            EnableAutoScaling = enableAutoScaling;
            Type = type;
            Mode = mode;
            OrchestratorVersion = orchestratorVersion;
            NodeImageVersion = nodeImageVersion;
            UpgradeSettings = upgradeSettings;
            ProvisioningState = provisioningState;
            PowerState = powerState;
            AvailabilityZones = availabilityZones;
            EnableNodePublicIP = enableNodePublicIP;
            NodePublicIPPrefixID = nodePublicIPPrefixID;
            ScaleSetPriority = scaleSetPriority;
            ScaleSetEvictionPolicy = scaleSetEvictionPolicy;
            SpotMaxPrice = spotMaxPrice;
            Tags = tags;
            NodeLabels = nodeLabels;
            NodeTaints = nodeTaints;
            ProximityPlacementGroupID = proximityPlacementGroupID;
            KubeletConfig = kubeletConfig;
            LinuxOSConfig = linuxOSConfig;
            EnableEncryptionAtHost = enableEncryptionAtHost;
            EnableUltraSSD = enableUltraSSD;
            EnableFIPS = enableFIPS;
            GpuInstanceProfile = gpuInstanceProfile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets number of agents (VMs) to host docker containers.
        /// Allowed values must be in the range of 0 to 1000 (inclusive) for
        /// user pools and in the range of 1 to 1000 (inclusive) for system
        /// pools. The default value is 1.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or sets size of agent VMs.
        /// </summary>
        [JsonProperty(PropertyName = "vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets OS Disk Size in GB to be used to specify the disk size
        /// for every machine in this master/agent pool. If you specify 0, it
        /// will apply the default osDisk size according to the vmSize
        /// specified.
        /// </summary>
        [JsonProperty(PropertyName = "osDiskSizeGB")]
        public int? OsDiskSizeGB { get; set; }

        /// <summary>
        /// Gets or sets OS disk type to be used for machines in a given agent
        /// pool. Allowed values are 'Ephemeral' and 'Managed'. If unspecified,
        /// defaults to 'Ephemeral' when the VM supports ephemeral OS and has a
        /// cache disk larger than the requested OSDiskSizeGB. Otherwise,
        /// defaults to 'Managed'. May not be changed after creation. Possible
        /// values include: 'Managed', 'Ephemeral'
        /// </summary>
        [JsonProperty(PropertyName = "osDiskType")]
        public string OsDiskType { get; set; }

        /// <summary>
        /// Gets or sets kubeletDiskType determines the placement of emptyDir
        /// volumes, container runtime data root, and Kubelet ephemeral
        /// storage. Currently allows one value, OS, resulting in Kubelet using
        /// the OS disk for data. Possible values include: 'OS', 'Temporary'
        /// </summary>
        [JsonProperty(PropertyName = "kubeletDiskType")]
        public string KubeletDiskType { get; set; }

        /// <summary>
        /// Gets or sets vNet SubnetID specifies the VNet's subnet identifier
        /// for nodes and maybe pods
        /// </summary>
        [JsonProperty(PropertyName = "vnetSubnetID")]
        public string VnetSubnetID { get; set; }

        /// <summary>
        /// Gets or sets pod SubnetID specifies the VNet's subnet identifier
        /// for pods.
        /// </summary>
        [JsonProperty(PropertyName = "podSubnetID")]
        public string PodSubnetID { get; set; }

        /// <summary>
        /// Gets or sets maximum number of pods that can run on a node.
        /// </summary>
        [JsonProperty(PropertyName = "maxPods")]
        public int? MaxPods { get; set; }

        /// <summary>
        /// Gets or sets osType to be used to specify os type. Choose from
        /// Linux and Windows. Default to Linux. Possible values include:
        /// 'Linux', 'Windows'
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; set; }

        /// <summary>
        /// Gets or sets osSKU to be used to specify os sku. Choose from
        /// Ubuntu(default) and CBLMariner for Linux OSType. Not applicable to
        /// Windows OSType. Possible values include: 'Ubuntu', 'CBLMariner'
        /// </summary>
        [JsonProperty(PropertyName = "osSKU")]
        public string OsSKU { get; set; }

        /// <summary>
        /// Gets or sets maximum number of nodes for auto-scaling
        /// </summary>
        [JsonProperty(PropertyName = "maxCount")]
        public int? MaxCount { get; set; }

        /// <summary>
        /// Gets or sets minimum number of nodes for auto-scaling
        /// </summary>
        [JsonProperty(PropertyName = "minCount")]
        public int? MinCount { get; set; }

        /// <summary>
        /// Gets or sets whether to enable auto-scaler
        /// </summary>
        [JsonProperty(PropertyName = "enableAutoScaling")]
        public bool? EnableAutoScaling { get; set; }

        /// <summary>
        /// Gets or sets agentPoolType represents types of an agent pool.
        /// Possible values include: 'VirtualMachineScaleSets',
        /// 'AvailabilitySet'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets agentPoolMode represents mode of an agent pool.
        /// Possible values include: 'System', 'User'
        /// </summary>
        [JsonProperty(PropertyName = "mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or sets version of orchestrator specified when creating the
        /// managed cluster.
        /// </summary>
        [JsonProperty(PropertyName = "orchestratorVersion")]
        public string OrchestratorVersion { get; set; }

        /// <summary>
        /// Gets version of node image
        /// </summary>
        [JsonProperty(PropertyName = "nodeImageVersion")]
        public string NodeImageVersion { get; private set; }

        /// <summary>
        /// Gets or sets settings for upgrading the agentpool
        /// </summary>
        [JsonProperty(PropertyName = "upgradeSettings")]
        public AgentPoolUpgradeSettings UpgradeSettings { get; set; }

        /// <summary>
        /// Gets the current deployment or provisioning state, which only
        /// appears in the response.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets describes whether the Agent Pool is Running or Stopped
        /// </summary>
        [JsonProperty(PropertyName = "powerState")]
        public PowerState PowerState { get; private set; }

        /// <summary>
        /// Gets or sets availability zones for nodes. Must use
        /// VirtualMachineScaleSets AgentPoolType.
        /// </summary>
        [JsonProperty(PropertyName = "availabilityZones")]
        public IList<string> AvailabilityZones { get; set; }

        /// <summary>
        /// Gets or sets enable public IP for nodes
        /// </summary>
        [JsonProperty(PropertyName = "enableNodePublicIP")]
        public bool? EnableNodePublicIP { get; set; }

        /// <summary>
        /// Gets or sets public IP Prefix ID. VM nodes use IPs assigned from
        /// this Public IP Prefix.
        /// </summary>
        [JsonProperty(PropertyName = "nodePublicIPPrefixID")]
        public string NodePublicIPPrefixID { get; set; }

        /// <summary>
        /// Gets or sets scaleSetPriority to be used to specify virtual machine
        /// scale set priority. Default to regular. Possible values include:
        /// 'Spot', 'Regular'
        /// </summary>
        [JsonProperty(PropertyName = "scaleSetPriority")]
        public string ScaleSetPriority { get; set; }

        /// <summary>
        /// Gets or sets scaleSetEvictionPolicy to be used to specify eviction
        /// policy for Spot virtual machine scale set. Default to Delete.
        /// Possible values include: 'Delete', 'Deallocate'
        /// </summary>
        [JsonProperty(PropertyName = "scaleSetEvictionPolicy")]
        public string ScaleSetEvictionPolicy { get; set; }

        /// <summary>
        /// Gets or sets spotMaxPrice to be used to specify the maximum price
        /// you are willing to pay in US Dollars. Possible values are any
        /// decimal value greater than zero or -1 which indicates default price
        /// to be up-to on-demand.
        /// </summary>
        [JsonProperty(PropertyName = "spotMaxPrice")]
        public double? SpotMaxPrice { get; set; }

        /// <summary>
        /// Gets or sets agent pool tags to be persisted on the agent pool
        /// virtual machine scale set.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets agent pool node labels to be persisted across all
        /// nodes in agent pool.
        /// </summary>
        [JsonProperty(PropertyName = "nodeLabels")]
        public IDictionary<string, string> NodeLabels { get; set; }

        /// <summary>
        /// Gets or sets taints added to new nodes during node pool create and
        /// scale. For example, key=value:NoSchedule.
        /// </summary>
        [JsonProperty(PropertyName = "nodeTaints")]
        public IList<string> NodeTaints { get; set; }

        /// <summary>
        /// Gets or sets the ID for Proximity Placement Group.
        /// </summary>
        [JsonProperty(PropertyName = "proximityPlacementGroupID")]
        public string ProximityPlacementGroupID { get; set; }

        /// <summary>
        /// Gets or sets kubeletConfig specifies the configuration of kubelet
        /// on agent nodes.
        /// </summary>
        [JsonProperty(PropertyName = "kubeletConfig")]
        public KubeletConfig KubeletConfig { get; set; }

        /// <summary>
        /// Gets or sets linuxOSConfig specifies the OS configuration of linux
        /// agent nodes.
        /// </summary>
        [JsonProperty(PropertyName = "linuxOSConfig")]
        public LinuxOSConfig LinuxOSConfig { get; set; }

        /// <summary>
        /// Gets or sets whether to enable EncryptionAtHost
        /// </summary>
        [JsonProperty(PropertyName = "enableEncryptionAtHost")]
        public bool? EnableEncryptionAtHost { get; set; }

        /// <summary>
        /// Gets or sets whether to enable UltraSSD
        /// </summary>
        [JsonProperty(PropertyName = "enableUltraSSD")]
        public bool? EnableUltraSSD { get; set; }

        /// <summary>
        /// Gets or sets whether to use FIPS enabled OS
        /// </summary>
        [JsonProperty(PropertyName = "enableFIPS")]
        public bool? EnableFIPS { get; set; }

        /// <summary>
        /// Gets or sets gPUInstanceProfile to be used to specify GPU MIG
        /// instance profile for supported GPU VM SKU. Supported values are
        /// MIG1g, MIG2g, MIG3g, MIG4g and MIG7g. Possible values include:
        /// 'MIG1g', 'MIG2g', 'MIG3g', 'MIG4g', 'MIG7g'
        /// </summary>
        [JsonProperty(PropertyName = "gpuInstanceProfile")]
        public string GpuInstanceProfile { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KubeletConfig != null)
            {
                KubeletConfig.Validate();
            }
        }
    }
}
