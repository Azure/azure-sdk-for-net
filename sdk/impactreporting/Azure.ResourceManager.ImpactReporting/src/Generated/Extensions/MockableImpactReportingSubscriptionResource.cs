// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.ImpactReporting.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableImpactReportingSubscriptionResource : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableImpactReportingSubscriptionResource"/> class for mocking. </summary>
        protected MockableImpactReportingSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableImpactReportingSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableImpactReportingSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of WorkloadImpactResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of WorkloadImpactResources and their operations over a WorkloadImpactResource. </returns>
        public virtual WorkloadImpactCollection GetWorkloadImpacts()
        {
            return GetCachedClient(client => new WorkloadImpactCollection(client, Id));
        }

        /// <summary>
        /// Get a WorkloadImpact
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/workloadImpacts/{workloadImpactName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkloadImpact_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkloadImpactResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workloadImpactName"> workloadImpact resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadImpactName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workloadImpactName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<WorkloadImpactResource>> GetWorkloadImpactAsync(string workloadImpactName, CancellationToken cancellationToken = default)
        {
            return await GetWorkloadImpacts().GetAsync(workloadImpactName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a WorkloadImpact
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/workloadImpacts/{workloadImpactName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkloadImpact_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkloadImpactResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workloadImpactName"> workloadImpact resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadImpactName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workloadImpactName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<WorkloadImpactResource> GetWorkloadImpact(string workloadImpactName, CancellationToken cancellationToken = default)
        {
            return GetWorkloadImpacts().Get(workloadImpactName, cancellationToken);
        }

        /// <summary> Gets a collection of ImpactCategoryResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of ImpactCategoryResources and their operations over a ImpactCategoryResource. </returns>
        public virtual ImpactCategoryCollection GetImpactCategories()
        {
            return GetCachedClient(client => new ImpactCategoryCollection(client, Id));
        }

        /// <summary>
        /// Get a ImpactCategory
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="impactCategoryName"> Name of the impact category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="impactCategoryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="impactCategoryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ImpactCategoryResource>> GetImpactCategoryAsync(string impactCategoryName, CancellationToken cancellationToken = default)
        {
            return await GetImpactCategories().GetAsync(impactCategoryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ImpactCategory
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="impactCategoryName"> Name of the impact category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="impactCategoryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="impactCategoryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ImpactCategoryResource> GetImpactCategory(string impactCategoryName, CancellationToken cancellationToken = default)
        {
            return GetImpactCategories().Get(impactCategoryName, cancellationToken);
        }

        /// <summary> Gets a collection of ConnectorResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of ConnectorResources and their operations over a ConnectorResource. </returns>
        public virtual ConnectorCollection GetConnectors()
        {
            return GetCachedClient(client => new ConnectorCollection(client, Id));
        }

        /// <summary>
        /// Get a Connector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/connectors/{connectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Connector_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectorName"> The name of the connector. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="connectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ConnectorResource>> GetConnectorAsync(string connectorName, CancellationToken cancellationToken = default)
        {
            return await GetConnectors().GetAsync(connectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Connector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/connectors/{connectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Connector_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectorName"> The name of the connector. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="connectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ConnectorResource> GetConnector(string connectorName, CancellationToken cancellationToken = default)
        {
            return GetConnectors().Get(connectorName, cancellationToken);
        }
    }
}
