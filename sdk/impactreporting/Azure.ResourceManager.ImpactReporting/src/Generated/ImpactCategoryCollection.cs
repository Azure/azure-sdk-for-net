// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ImpactReporting
{
    /// <summary>
    /// A class representing a collection of <see cref="ImpactCategoryResource"/> and their operations.
    /// Each <see cref="ImpactCategoryResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get an <see cref="ImpactCategoryCollection"/> instance call the GetImpactCategories method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class ImpactCategoryCollection : ArmCollection
    {
        private readonly ClientDiagnostics _impactCategoryClientDiagnostics;
        private readonly ImpactCategoriesRestOperations _impactCategoryRestClient;

        /// <summary> Initializes a new instance of the <see cref="ImpactCategoryCollection"/> class for mocking. </summary>
        protected ImpactCategoryCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ImpactCategoryCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ImpactCategoryCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _impactCategoryClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ImpactReporting", ImpactCategoryResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ImpactCategoryResource.ResourceType, out string impactCategoryApiVersion);
            _impactCategoryRestClient = new ImpactCategoriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, impactCategoryApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a ImpactCategory
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="impactCategoryName"> Name of the impact category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="impactCategoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="impactCategoryName"/> is null. </exception>
        public virtual async Task<Response<ImpactCategoryResource>> GetAsync(string impactCategoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(impactCategoryName, nameof(impactCategoryName));

            using var scope = _impactCategoryClientDiagnostics.CreateScope("ImpactCategoryCollection.Get");
            scope.Start();
            try
            {
                var response = await _impactCategoryRestClient.GetAsync(Id.SubscriptionId, impactCategoryName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ImpactCategoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ImpactCategory
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="impactCategoryName"> Name of the impact category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="impactCategoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="impactCategoryName"/> is null. </exception>
        public virtual Response<ImpactCategoryResource> Get(string impactCategoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(impactCategoryName, nameof(impactCategoryName));

            using var scope = _impactCategoryClientDiagnostics.CreateScope("ImpactCategoryCollection.Get");
            scope.Start();
            try
            {
                var response = _impactCategoryRestClient.Get(Id.SubscriptionId, impactCategoryName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ImpactCategoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List ImpactCategory resources by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceType"> Filter by resource type. </param>
        /// <param name="categoryName"> Filter by category name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceType"/> is null. </exception>
        /// <returns> An async collection of <see cref="ImpactCategoryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ImpactCategoryResource> GetAllAsync(string resourceType, string categoryName = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _impactCategoryRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, resourceType, categoryName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _impactCategoryRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, resourceType, categoryName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ImpactCategoryResource(Client, ImpactCategoryData.DeserializeImpactCategoryData(e)), _impactCategoryClientDiagnostics, Pipeline, "ImpactCategoryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List ImpactCategory resources by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceType"> Filter by resource type. </param>
        /// <param name="categoryName"> Filter by category name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceType"/> is null. </exception>
        /// <returns> A collection of <see cref="ImpactCategoryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ImpactCategoryResource> GetAll(string resourceType, string categoryName = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _impactCategoryRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, resourceType, categoryName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _impactCategoryRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, resourceType, categoryName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ImpactCategoryResource(Client, ImpactCategoryData.DeserializeImpactCategoryData(e)), _impactCategoryClientDiagnostics, Pipeline, "ImpactCategoryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="impactCategoryName"> Name of the impact category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="impactCategoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="impactCategoryName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string impactCategoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(impactCategoryName, nameof(impactCategoryName));

            using var scope = _impactCategoryClientDiagnostics.CreateScope("ImpactCategoryCollection.Exists");
            scope.Start();
            try
            {
                var response = await _impactCategoryRestClient.GetAsync(Id.SubscriptionId, impactCategoryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="impactCategoryName"> Name of the impact category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="impactCategoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="impactCategoryName"/> is null. </exception>
        public virtual Response<bool> Exists(string impactCategoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(impactCategoryName, nameof(impactCategoryName));

            using var scope = _impactCategoryClientDiagnostics.CreateScope("ImpactCategoryCollection.Exists");
            scope.Start();
            try
            {
                var response = _impactCategoryRestClient.Get(Id.SubscriptionId, impactCategoryName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="impactCategoryName"> Name of the impact category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="impactCategoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="impactCategoryName"/> is null. </exception>
        public virtual async Task<NullableResponse<ImpactCategoryResource>> GetIfExistsAsync(string impactCategoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(impactCategoryName, nameof(impactCategoryName));

            using var scope = _impactCategoryClientDiagnostics.CreateScope("ImpactCategoryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _impactCategoryRestClient.GetAsync(Id.SubscriptionId, impactCategoryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ImpactCategoryResource>(response.GetRawResponse());
                return Response.FromValue(new ImpactCategoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImpactCategory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ImpactCategoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="impactCategoryName"> Name of the impact category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="impactCategoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="impactCategoryName"/> is null. </exception>
        public virtual NullableResponse<ImpactCategoryResource> GetIfExists(string impactCategoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(impactCategoryName, nameof(impactCategoryName));

            using var scope = _impactCategoryClientDiagnostics.CreateScope("ImpactCategoryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _impactCategoryRestClient.Get(Id.SubscriptionId, impactCategoryName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ImpactCategoryResource>(response.GetRawResponse());
                return Response.FromValue(new ImpactCategoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
