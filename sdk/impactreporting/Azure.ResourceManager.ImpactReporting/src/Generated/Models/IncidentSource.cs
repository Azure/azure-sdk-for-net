// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> List of incident interfaces. </summary>
    public readonly partial struct IncidentSource : IEquatable<IncidentSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IncidentSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IncidentSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureDevopsValue = "AzureDevops";
        private const string ICMValue = "ICM";
        private const string JiraValue = "Jira";
        private const string ServiceNowValue = "ServiceNow";
        private const string OtherValue = "Other";

        /// <summary> When source of Incident is AzureDevops. </summary>
        public static IncidentSource AzureDevops { get; } = new IncidentSource(AzureDevopsValue);
        /// <summary> When source of Incident is Microsoft ICM. </summary>
        public static IncidentSource ICM { get; } = new IncidentSource(ICMValue);
        /// <summary> When source of Incident is Jira. </summary>
        public static IncidentSource Jira { get; } = new IncidentSource(JiraValue);
        /// <summary> When source of Incident is ServiceNow. </summary>
        public static IncidentSource ServiceNow { get; } = new IncidentSource(ServiceNowValue);
        /// <summary> When source of Incident is Other. </summary>
        public static IncidentSource Other { get; } = new IncidentSource(OtherValue);
        /// <summary> Determines if two <see cref="IncidentSource"/> values are the same. </summary>
        public static bool operator ==(IncidentSource left, IncidentSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IncidentSource"/> values are not the same. </summary>
        public static bool operator !=(IncidentSource left, IncidentSource right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="IncidentSource"/>. </summary>
        public static implicit operator IncidentSource(string value) => new IncidentSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IncidentSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IncidentSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
