// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> Details of the Connector. </summary>
    public partial class ConnectorProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConnectorProperties"/>. </summary>
        /// <param name="connectorId"> unique id of the connector. </param>
        /// <param name="tenantId"> tenant id of this connector. </param>
        /// <param name="connectorType"> connector type. </param>
        /// <param name="lastRunTimeStamp"> last run time stamp of this connector in UTC time zone. </param>
        public ConnectorProperties(string connectorId, string tenantId, Platform connectorType, DateTimeOffset lastRunTimeStamp)
        {
            ConnectorId = connectorId;
            TenantId = tenantId;
            ConnectorType = connectorType;
            LastRunTimeStamp = lastRunTimeStamp;
        }

        /// <summary> Initializes a new instance of <see cref="ConnectorProperties"/>. </summary>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="connectorId"> unique id of the connector. </param>
        /// <param name="tenantId"> tenant id of this connector. </param>
        /// <param name="connectorType"> connector type. </param>
        /// <param name="lastRunTimeStamp"> last run time stamp of this connector in UTC time zone. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConnectorProperties(ProvisioningState? provisioningState, string connectorId, string tenantId, Platform connectorType, DateTimeOffset lastRunTimeStamp, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            ConnectorId = connectorId;
            TenantId = tenantId;
            ConnectorType = connectorType;
            LastRunTimeStamp = lastRunTimeStamp;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ConnectorProperties"/> for deserialization. </summary>
        internal ConnectorProperties()
        {
        }

        /// <summary> Resource provisioning state. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> unique id of the connector. </summary>
        public string ConnectorId { get; }
        /// <summary> tenant id of this connector. </summary>
        public string TenantId { get; }
        /// <summary> connector type. </summary>
        public Platform ConnectorType { get; set; }
        /// <summary> last run time stamp of this connector in UTC time zone. </summary>
        public DateTimeOffset LastRunTimeStamp { get; }
    }
}
