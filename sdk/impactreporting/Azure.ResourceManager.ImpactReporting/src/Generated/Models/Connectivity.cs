// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource could be VM or the network. In such cases, the connectivity field will have the details about both VM and network. </summary>
    public partial class Connectivity
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Connectivity"/>. </summary>
        public Connectivity()
        {
        }

        /// <summary> Initializes a new instance of <see cref="Connectivity"/>. </summary>
        /// <param name="protocol"> Protocol used for the connection. </param>
        /// <param name="port"> Port number for the connection. </param>
        /// <param name="source"> Source from which the connection was attempted. </param>
        /// <param name="target"> target which connection was attempted. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Connectivity(Protocol? protocol, int? port, SourceOrTarget source, SourceOrTarget target, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Protocol = protocol;
            Port = port;
            Source = source;
            Target = target;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Protocol used for the connection. </summary>
        public Protocol? Protocol { get; set; }
        /// <summary> Port number for the connection. </summary>
        public int? Port { get; set; }
        /// <summary> Source from which the connection was attempted. </summary>
        internal SourceOrTarget Source { get; set; }
        /// <summary> Azure resource id, example /subscription/{subscription}/resourceGroup/{rg}/Microsoft.compute/virtualMachine/{vmName}. </summary>
        public string SourceAzureResourceId
        {
            get => Source is null ? default : Source.AzureResourceId;
            set
            {
                if (Source is null)
                    Source = new SourceOrTarget();
                Source.AzureResourceId = value;
            }
        }

        /// <summary> target which connection was attempted. </summary>
        internal SourceOrTarget Target { get; set; }
        /// <summary> Azure resource id, example /subscription/{subscription}/resourceGroup/{rg}/Microsoft.compute/virtualMachine/{vmName}. </summary>
        public string TargetAzureResourceId
        {
            get => Target is null ? default : Target.AzureResourceId;
            set
            {
                if (Target is null)
                    Target = new SourceOrTarget();
                Target.AzureResourceId = value;
            }
        }
    }
}
