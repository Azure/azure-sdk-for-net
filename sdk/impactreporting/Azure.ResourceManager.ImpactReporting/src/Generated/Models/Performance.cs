// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> Details about impacted performance metrics. Applicable for performance related impact. </summary>
    public partial class Performance
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Performance"/>. </summary>
        public Performance()
        {
        }

        /// <summary> Initializes a new instance of <see cref="Performance"/>. </summary>
        /// <param name="metricName"> Name of the Metric examples:  Disk, IOPs, CPU, GPU, Memory, details can be found from /impactCategories API. </param>
        /// <param name="expected"> Threshold value for the metric. </param>
        /// <param name="actual"> Observed value for the metric. </param>
        /// <param name="expectedValueRange"> Max and Min Threshold values for the metric. </param>
        /// <param name="unit"> Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Performance(string metricName, double? expected, double? actual, ExpectedValueRange expectedValueRange, MetricUnit? unit, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            MetricName = metricName;
            Expected = expected;
            Actual = actual;
            ExpectedValueRange = expectedValueRange;
            Unit = unit;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Name of the Metric examples:  Disk, IOPs, CPU, GPU, Memory, details can be found from /impactCategories API. </summary>
        public string MetricName { get; set; }
        /// <summary> Threshold value for the metric. </summary>
        public double? Expected { get; set; }
        /// <summary> Observed value for the metric. </summary>
        public double? Actual { get; set; }
        /// <summary> Max and Min Threshold values for the metric. </summary>
        public ExpectedValueRange ExpectedValueRange { get; set; }
        /// <summary> Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other. </summary>
        public MetricUnit? Unit { get; set; }
    }
}
