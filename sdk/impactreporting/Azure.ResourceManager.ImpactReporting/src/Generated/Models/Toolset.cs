// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> List of azure interfaces. </summary>
    public readonly partial struct Toolset : IEquatable<Toolset>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Toolset"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Toolset(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TerraformValue = "Terraform";
        private const string PuppetValue = "Puppet";
        private const string ChefValue = "Chef";
        private const string SDKValue = "SDK";
        private const string AnsibleValue = "Ansible";
        private const string ARMValue = "ARM";
        private const string PortalValue = "Portal";
        private const string ShellValue = "Shell";
        private const string OtherValue = "Other";

        /// <summary> If communication toolset is Terraform. </summary>
        public static Toolset Terraform { get; } = new Toolset(TerraformValue);
        /// <summary> If communication toolset is Puppet. </summary>
        public static Toolset Puppet { get; } = new Toolset(PuppetValue);
        /// <summary> If communication toolset is Chef. </summary>
        public static Toolset Chef { get; } = new Toolset(ChefValue);
        /// <summary> If communication toolset is SDK. </summary>
        public static Toolset SDK { get; } = new Toolset(SDKValue);
        /// <summary> If communication toolset is Ansible. </summary>
        public static Toolset Ansible { get; } = new Toolset(AnsibleValue);
        /// <summary> If communication toolset is ARM. </summary>
        public static Toolset ARM { get; } = new Toolset(ARMValue);
        /// <summary> If communication toolset is Portal. </summary>
        public static Toolset Portal { get; } = new Toolset(PortalValue);
        /// <summary> If communication toolset is Shell. </summary>
        public static Toolset Shell { get; } = new Toolset(ShellValue);
        /// <summary> If communication toolset is Other. </summary>
        public static Toolset Other { get; } = new Toolset(OtherValue);
        /// <summary> Determines if two <see cref="Toolset"/> values are the same. </summary>
        public static bool operator ==(Toolset left, Toolset right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Toolset"/> values are not the same. </summary>
        public static bool operator !=(Toolset left, Toolset right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Toolset"/>. </summary>
        public static implicit operator Toolset(string value) => new Toolset(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Toolset other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Toolset other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
