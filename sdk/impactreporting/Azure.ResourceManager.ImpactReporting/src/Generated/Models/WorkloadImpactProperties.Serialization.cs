// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    public partial class WorkloadImpactProperties : IUtf8JsonSerializable, IJsonModel<WorkloadImpactProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<WorkloadImpactProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<WorkloadImpactProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkloadImpactProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkloadImpactProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WritePropertyName("startDateTime"u8);
            writer.WriteStringValue(StartOn, "O");
            if (Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endDateTime"u8);
                writer.WriteStringValue(EndOn.Value, "O");
            }
            writer.WritePropertyName("impactedResourceId"u8);
            writer.WriteStringValue(ImpactedResourceId);
            if (options.Format != "W" && Optional.IsDefined(ImpactUniqueId))
            {
                writer.WritePropertyName("impactUniqueId"u8);
                writer.WriteStringValue(ImpactUniqueId);
            }
            if (options.Format != "W" && Optional.IsDefined(ReportedTimeUtc))
            {
                writer.WritePropertyName("reportedTimeUtc"u8);
                writer.WriteStringValue(ReportedTimeUtc.Value, "O");
            }
            writer.WritePropertyName("impactCategory"u8);
            writer.WriteStringValue(ImpactCategory);
            if (Optional.IsDefined(ImpactDescription))
            {
                writer.WritePropertyName("impactDescription"u8);
                writer.WriteStringValue(ImpactDescription);
            }
            if (Optional.IsCollectionDefined(ArmCorrelationIds))
            {
                writer.WritePropertyName("armCorrelationIds"u8);
                writer.WriteStartArray();
                foreach (var item in ArmCorrelationIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Performance))
            {
                writer.WritePropertyName("performance"u8);
                writer.WriteStartArray();
                foreach (var item in Performance)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Connectivity))
            {
                writer.WritePropertyName("connectivity"u8);
                writer.WriteObjectValue(Connectivity, options);
            }
            if (Optional.IsCollectionDefined(AdditionalProperties))
            {
                writer.WritePropertyName("additionalProperties"u8);
                writer.WriteStartObject();
                foreach (var item in AdditionalProperties)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails"u8);
                writer.WriteObjectValue(ErrorDetails, options);
            }
            if (Optional.IsDefined(Workload))
            {
                writer.WritePropertyName("workload"u8);
                writer.WriteObjectValue(Workload, options);
            }
            if (Optional.IsDefined(ImpactGroupId))
            {
                writer.WritePropertyName("impactGroupId"u8);
                writer.WriteStringValue(ImpactGroupId);
            }
            if (Optional.IsDefined(ConfidenceLevel))
            {
                writer.WritePropertyName("confidenceLevel"u8);
                writer.WriteStringValue(ConfidenceLevel.Value.ToString());
            }
            if (Optional.IsDefined(ClientIncidentDetails))
            {
                writer.WritePropertyName("clientIncidentDetails"u8);
                writer.WriteObjectValue(ClientIncidentDetails, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        WorkloadImpactProperties IJsonModel<WorkloadImpactProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkloadImpactProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkloadImpactProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWorkloadImpactProperties(document.RootElement, options);
        }

        internal static WorkloadImpactProperties DeserializeWorkloadImpactProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ProvisioningState? provisioningState = default;
            DateTimeOffset startDateTime = default;
            DateTimeOffset? endDateTime = default;
            string impactedResourceId = default;
            string impactUniqueId = default;
            DateTimeOffset? reportedTimeUtc = default;
            string impactCategory = default;
            string impactDescription = default;
            IList<string> armCorrelationIds = default;
            IList<Performance> performance = default;
            Connectivity connectivity = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            ErrorDetailProperties errorDetails = default;
            Workload workload = default;
            string impactGroupId = default;
            ConfidenceLevel? confidenceLevel = default;
            ClientIncidentDetails clientIncidentDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startDateTime"u8))
                {
                    startDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("impactedResourceId"u8))
                {
                    impactedResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("impactUniqueId"u8))
                {
                    impactUniqueId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reportedTimeUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reportedTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("impactCategory"u8))
                {
                    impactCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("impactDescription"u8))
                {
                    impactDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("armCorrelationIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    armCorrelationIds = array;
                    continue;
                }
                if (property.NameEquals("performance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Performance> array = new List<Performance>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.Performance.DeserializePerformance(item, options));
                    }
                    performance = array;
                    continue;
                }
                if (property.NameEquals("connectivity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectivity = Connectivity.DeserializeConnectivity(property.Value, options);
                    continue;
                }
                if (property.NameEquals("additionalProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    additionalProperties = dictionary;
                    continue;
                }
                if (property.NameEquals("errorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorDetails = ErrorDetailProperties.DeserializeErrorDetailProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("workload"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    workload = Workload.DeserializeWorkload(property.Value, options);
                    continue;
                }
                if (property.NameEquals("impactGroupId"u8))
                {
                    impactGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("confidenceLevel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    confidenceLevel = new ConfidenceLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("clientIncidentDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clientIncidentDetails = ClientIncidentDetails.DeserializeClientIncidentDetails(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new WorkloadImpactProperties(
                provisioningState,
                startDateTime,
                endDateTime,
                impactedResourceId,
                impactUniqueId,
                reportedTimeUtc,
                impactCategory,
                impactDescription,
                armCorrelationIds ?? new ChangeTrackingList<string>(),
                performance ?? new ChangeTrackingList<Performance>(),
                connectivity,
                additionalProperties ?? new ChangeTrackingDictionary<string, BinaryData>(),
                errorDetails,
                workload,
                impactGroupId,
                confidenceLevel,
                clientIncidentDetails,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<WorkloadImpactProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkloadImpactProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerImpactReportingContext.Default);
                default:
                    throw new FormatException($"The model {nameof(WorkloadImpactProperties)} does not support writing '{options.Format}' format.");
            }
        }

        WorkloadImpactProperties IPersistableModel<WorkloadImpactProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkloadImpactProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeWorkloadImpactProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(WorkloadImpactProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<WorkloadImpactProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
