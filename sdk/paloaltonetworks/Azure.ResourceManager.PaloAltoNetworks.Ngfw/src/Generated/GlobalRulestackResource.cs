// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw
{
    /// <summary>
    /// A Class representing a GlobalRulestackResource along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="GlobalRulestackResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetGlobalRulestackResource method.
    /// Otherwise you can get one from its parent resource <see cref="TenantResource" /> using the GetGlobalRulestackResource method.
    /// </summary>
    public partial class GlobalRulestackResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="GlobalRulestackResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string globalRulestackName)
        {
            var resourceId = $"/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _globalRulestackResourceGlobalRulestackClientDiagnostics;
        private readonly GlobalRulestackRestOperations _globalRulestackResourceGlobalRulestackRestClient;
        private readonly GlobalRulestackResourceData _data;

        /// <summary> Initializes a new instance of the <see cref="GlobalRulestackResource"/> class for mocking. </summary>
        protected GlobalRulestackResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "GlobalRulestackResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal GlobalRulestackResource(ArmClient client, GlobalRulestackResourceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="GlobalRulestackResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal GlobalRulestackResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _globalRulestackResourceGlobalRulestackClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.PaloAltoNetworks.Ngfw", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string globalRulestackResourceGlobalRulestackApiVersion);
            _globalRulestackResourceGlobalRulestackRestClient = new GlobalRulestackRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, globalRulestackResourceGlobalRulestackApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "PaloAltoNetworks.Cloudngfw/globalRulestacks";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual GlobalRulestackResourceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of CertificateObjectGlobalRulestackResources in the GlobalRulestackResource. </summary>
        /// <returns> An object representing collection of CertificateObjectGlobalRulestackResources and their operations over a CertificateObjectGlobalRulestackResource. </returns>
        public virtual CertificateObjectGlobalRulestackResourceCollection GetCertificateObjectGlobalRulestackResources()
        {
            return GetCachedClient(Client => new CertificateObjectGlobalRulestackResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get a CertificateObjectGlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/certificates/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateObjectGlobalRulestack_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> certificate name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CertificateObjectGlobalRulestackResource>> GetCertificateObjectGlobalRulestackResourceAsync(string name, CancellationToken cancellationToken = default)
        {
            return await GetCertificateObjectGlobalRulestackResources().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a CertificateObjectGlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/certificates/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateObjectGlobalRulestack_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> certificate name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<CertificateObjectGlobalRulestackResource> GetCertificateObjectGlobalRulestackResource(string name, CancellationToken cancellationToken = default)
        {
            return GetCertificateObjectGlobalRulestackResources().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of FqdnListGlobalRulestackResources in the GlobalRulestackResource. </summary>
        /// <returns> An object representing collection of FqdnListGlobalRulestackResources and their operations over a FqdnListGlobalRulestackResource. </returns>
        public virtual FqdnListGlobalRulestackResourceCollection GetFqdnListGlobalRulestackResources()
        {
            return GetCachedClient(Client => new FqdnListGlobalRulestackResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get a FqdnListGlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/fqdnlists/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FqdnListGlobalRulestack_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> fqdn list name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<FqdnListGlobalRulestackResource>> GetFqdnListGlobalRulestackResourceAsync(string name, CancellationToken cancellationToken = default)
        {
            return await GetFqdnListGlobalRulestackResources().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a FqdnListGlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/fqdnlists/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FqdnListGlobalRulestack_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> fqdn list name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<FqdnListGlobalRulestackResource> GetFqdnListGlobalRulestackResource(string name, CancellationToken cancellationToken = default)
        {
            return GetFqdnListGlobalRulestackResources().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of PostRulesResources in the GlobalRulestackResource. </summary>
        /// <returns> An object representing collection of PostRulesResources and their operations over a PostRulesResource. </returns>
        public virtual PostRulesResourceCollection GetPostRulesResources()
        {
            return GetCachedClient(Client => new PostRulesResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get a PostRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Post Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PostRulesResource>> GetPostRulesResourceAsync(string priority, CancellationToken cancellationToken = default)
        {
            return await GetPostRulesResources().GetAsync(priority, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PostRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Post Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<PostRulesResource> GetPostRulesResource(string priority, CancellationToken cancellationToken = default)
        {
            return GetPostRulesResources().Get(priority, cancellationToken);
        }

        /// <summary> Gets a collection of PrefixListGlobalRulestackResources in the GlobalRulestackResource. </summary>
        /// <returns> An object representing collection of PrefixListGlobalRulestackResources and their operations over a PrefixListGlobalRulestackResource. </returns>
        public virtual PrefixListGlobalRulestackResourceCollection GetPrefixListGlobalRulestackResources()
        {
            return GetCachedClient(Client => new PrefixListGlobalRulestackResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get a PrefixListGlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/prefixlists/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrefixListGlobalRulestack_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> Local Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PrefixListGlobalRulestackResource>> GetPrefixListGlobalRulestackResourceAsync(string name, CancellationToken cancellationToken = default)
        {
            return await GetPrefixListGlobalRulestackResources().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PrefixListGlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/prefixlists/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrefixListGlobalRulestack_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> Local Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<PrefixListGlobalRulestackResource> GetPrefixListGlobalRulestackResource(string name, CancellationToken cancellationToken = default)
        {
            return GetPrefixListGlobalRulestackResources().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of PreRulesResources in the GlobalRulestackResource. </summary>
        /// <returns> An object representing collection of PreRulesResources and their operations over a PreRulesResource. </returns>
        public virtual PreRulesResourceCollection GetPreRulesResources()
        {
            return GetCachedClient(Client => new PreRulesResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get a PreRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PreRulesResource>> GetPreRulesResourceAsync(string priority, CancellationToken cancellationToken = default)
        {
            return await GetPreRulesResources().GetAsync(priority, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PreRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<PreRulesResource> GetPreRulesResource(string priority, CancellationToken cancellationToken = default)
        {
            return GetPreRulesResources().Get(priority, cancellationToken);
        }

        /// <summary>
        /// Get a GlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GlobalRulestackResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Get");
            scope.Start();
            try
            {
                var response = await _globalRulestackResourceGlobalRulestackRestClient.GetAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GlobalRulestackResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a GlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GlobalRulestackResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Get");
            scope.Start();
            try
            {
                var response = _globalRulestackResourceGlobalRulestackRestClient.Get(Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GlobalRulestackResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a GlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Delete");
            scope.Start();
            try
            {
                var response = await _globalRulestackResourceGlobalRulestackRestClient.DeleteAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new NgfwArmOperation(_globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, _globalRulestackResourceGlobalRulestackRestClient.CreateDeleteRequest(Id.Name).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a GlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Delete");
            scope.Start();
            try
            {
                var response = _globalRulestackResourceGlobalRulestackRestClient.Delete(Id.Name, cancellationToken);
                var operation = new NgfwArmOperation(_globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, _globalRulestackResourceGlobalRulestackRestClient.CreateDeleteRequest(Id.Name).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a GlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<GlobalRulestackResource>> UpdateAsync(GlobalRulestackResourcePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Update");
            scope.Start();
            try
            {
                var response = await _globalRulestackResourceGlobalRulestackRestClient.UpdateAsync(Id.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new GlobalRulestackResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a GlobalRulestackResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<GlobalRulestackResource> Update(GlobalRulestackResourcePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Update");
            scope.Start();
            try
            {
                var response = _globalRulestackResourceGlobalRulestackRestClient.Update(Id.Name, patch, cancellationToken);
                return Response.FromValue(new GlobalRulestackResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Commit rulestack configuration
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/commit</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_commit</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> CommitAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Commit");
            scope.Start();
            try
            {
                var response = await _globalRulestackResourceGlobalRulestackRestClient.CommitAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new NgfwArmOperation(_globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, _globalRulestackResourceGlobalRulestackRestClient.CreateCommitRequest(Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Commit rulestack configuration
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/commit</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_commit</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Commit(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Commit");
            scope.Start();
            try
            {
                var response = _globalRulestackResourceGlobalRulestackRestClient.Commit(Id.Name, cancellationToken);
                var operation = new NgfwArmOperation(_globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, _globalRulestackResourceGlobalRulestackRestClient.CreateCommitRequest(Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get changelog
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/getChangeLog</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_getChangeLog</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Changelog>> GetChangeLogAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.GetChangeLog");
            scope.Start();
            try
            {
                var response = await _globalRulestackResourceGlobalRulestackRestClient.GetChangeLogAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get changelog
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/getChangeLog</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_getChangeLog</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Changelog> GetChangeLog(CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.GetChangeLog");
            scope.Start();
            try
            {
                var response = _globalRulestackResourceGlobalRulestackRestClient.GetChangeLog(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the list of advanced security objects
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listAdvancedSecurityObjects</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listAdvancedSecurityObjects</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="type"> The AdvSecurityObjectTypeEnum to use. </param>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AdvSecurityObjectListResponse>> GetAdvancedSecurityObjectsAsync(AdvSecurityObjectTypeEnum type, string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.GetAdvancedSecurityObjects");
            scope.Start();
            try
            {
                var response = await _globalRulestackResourceGlobalRulestackRestClient.ListAdvancedSecurityObjectsAsync(Id.Name, type, skip, top, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the list of advanced security objects
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listAdvancedSecurityObjects</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listAdvancedSecurityObjects</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="type"> The AdvSecurityObjectTypeEnum to use. </param>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AdvSecurityObjectListResponse> GetAdvancedSecurityObjects(AdvSecurityObjectTypeEnum type, string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.GetAdvancedSecurityObjects");
            scope.Start();
            try
            {
                var response = _globalRulestackResourceGlobalRulestackRestClient.ListAdvancedSecurityObjects(Id.Name, type, skip, top, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List of AppIds for GlobalRulestack ApiVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listAppIds</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listAppIds</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="appIdVersion"> The String to use. </param>
        /// <param name="appPrefix"> The String to use. </param>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<string> GetAppIdsAsync(string appIdVersion = null, string appPrefix = null, string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _globalRulestackResourceGlobalRulestackRestClient.CreateListAppIdsRequest(Id.Name, appIdVersion, appPrefix, skip, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => e.GetString(), _globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, "GlobalRulestackResource.GetAppIds", "value", null, cancellationToken);
        }

        /// <summary>
        /// List of AppIds for GlobalRulestack ApiVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listAppIds</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listAppIds</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="appIdVersion"> The String to use. </param>
        /// <param name="appPrefix"> The String to use. </param>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<string> GetAppIds(string appIdVersion = null, string appPrefix = null, string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _globalRulestackResourceGlobalRulestackRestClient.CreateListAppIdsRequest(Id.Name, appIdVersion, appPrefix, skip, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, e => e.GetString(), _globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, "GlobalRulestackResource.GetAppIds", "value", null, cancellationToken);
        }

        /// <summary>
        /// List of countries for Rulestack
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listCountries</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listCountries</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Country" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Country> GetCountriesAsync(string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _globalRulestackResourceGlobalRulestackRestClient.CreateListCountriesRequest(Id.Name, skip, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, Country.DeserializeCountry, _globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, "GlobalRulestackResource.GetCountries", "value", null, cancellationToken);
        }

        /// <summary>
        /// List of countries for Rulestack
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listCountries</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listCountries</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Country" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Country> GetCountries(string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _globalRulestackResourceGlobalRulestackRestClient.CreateListCountriesRequest(Id.Name, skip, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, Country.DeserializeCountry, _globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, "GlobalRulestackResource.GetCountries", "value", null, cancellationToken);
        }

        /// <summary>
        /// List of Firewalls associated with Rulestack
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listFirewalls</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listFirewalls</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<string> GetFirewallsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _globalRulestackResourceGlobalRulestackRestClient.CreateListFirewallsRequest(Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => e.GetString(), _globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, "GlobalRulestackResource.GetFirewalls", "value", null, cancellationToken);
        }

        /// <summary>
        /// List of Firewalls associated with Rulestack
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listFirewalls</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listFirewalls</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<string> GetFirewalls(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _globalRulestackResourceGlobalRulestackRestClient.CreateListFirewallsRequest(Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, e => e.GetString(), _globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, "GlobalRulestackResource.GetFirewalls", "value", null, cancellationToken);
        }

        /// <summary>
        /// List predefined URL categories for rulestack
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listPredefinedUrlCategories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listPredefinedUrlCategories</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PredefinedUrlCategory" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PredefinedUrlCategory> GetPredefinedUrlCategoriesAsync(string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _globalRulestackResourceGlobalRulestackRestClient.CreateListPredefinedUrlCategoriesRequest(Id.Name, skip, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, PredefinedUrlCategory.DeserializePredefinedUrlCategory, _globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, "GlobalRulestackResource.GetPredefinedUrlCategories", "value", null, cancellationToken);
        }

        /// <summary>
        /// List predefined URL categories for rulestack
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listPredefinedUrlCategories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listPredefinedUrlCategories</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PredefinedUrlCategory" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PredefinedUrlCategory> GetPredefinedUrlCategories(string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _globalRulestackResourceGlobalRulestackRestClient.CreateListPredefinedUrlCategoriesRequest(Id.Name, skip, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, PredefinedUrlCategory.DeserializePredefinedUrlCategory, _globalRulestackResourceGlobalRulestackClientDiagnostics, Pipeline, "GlobalRulestackResource.GetPredefinedUrlCategories", "value", null, cancellationToken);
        }

        /// <summary>
        /// List the security services for rulestack
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listSecurityServices</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listSecurityServices</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="type"> The SecurityServicesTypeEnum to use. </param>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SecurityServicesResponse>> GetSecurityServicesAsync(SecurityServicesTypeEnum type, string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.GetSecurityServices");
            scope.Start();
            try
            {
                var response = await _globalRulestackResourceGlobalRulestackRestClient.ListSecurityServicesAsync(Id.Name, type, skip, top, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List the security services for rulestack
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listSecurityServices</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_listSecurityServices</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="type"> The SecurityServicesTypeEnum to use. </param>
        /// <param name="skip"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SecurityServicesResponse> GetSecurityServices(SecurityServicesTypeEnum type, string skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.GetSecurityServices");
            scope.Start();
            try
            {
                var response = _globalRulestackResourceGlobalRulestackRestClient.ListSecurityServices(Id.Name, type, skip, top, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Revert rulestack configuration
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/revert</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_revert</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RevertAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Revert");
            scope.Start();
            try
            {
                var response = await _globalRulestackResourceGlobalRulestackRestClient.RevertAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Revert rulestack configuration
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/revert</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalRulestack_revert</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Revert(CancellationToken cancellationToken = default)
        {
            using var scope = _globalRulestackResourceGlobalRulestackClientDiagnostics.CreateScope("GlobalRulestackResource.Revert");
            scope.Start();
            try
            {
                var response = _globalRulestackResourceGlobalRulestackRestClient.Revert(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
