// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    /// <summary> The ActionEnum. </summary>
    public readonly partial struct ActionEnum : IEquatable<ActionEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ActionEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ActionEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllowValue = "Allow";
        private const string DenySilentValue = "DenySilent";
        private const string DenyResetServerValue = "DenyResetServer";
        private const string DenyResetBothValue = "DenyResetBoth";

        /// <summary> Allow. </summary>
        public static ActionEnum Allow { get; } = new ActionEnum(AllowValue);
        /// <summary> DenySilent. </summary>
        public static ActionEnum DenySilent { get; } = new ActionEnum(DenySilentValue);
        /// <summary> DenyResetServer. </summary>
        public static ActionEnum DenyResetServer { get; } = new ActionEnum(DenyResetServerValue);
        /// <summary> DenyResetBoth. </summary>
        public static ActionEnum DenyResetBoth { get; } = new ActionEnum(DenyResetBothValue);
        /// <summary> Determines if two <see cref="ActionEnum"/> values are the same. </summary>
        public static bool operator ==(ActionEnum left, ActionEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ActionEnum"/> values are not the same. </summary>
        public static bool operator !=(ActionEnum left, ActionEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ActionEnum"/>. </summary>
        public static implicit operator ActionEnum(string value) => new ActionEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ActionEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ActionEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
