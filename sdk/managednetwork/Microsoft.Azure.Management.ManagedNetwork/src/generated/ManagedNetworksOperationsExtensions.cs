// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagedNetwork
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagedNetworksOperations.
    /// </summary>
    public static partial class ManagedNetworksOperationsExtensions
    {
            /// <summary>
            /// The Get ManagedNetworks operation gets a Managed Network Resource,
            /// specified by the resource group and Managed Network name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            public static ManagedNetworkModel Get(this IManagedNetworksOperations operations, string resourceGroupName, string managedNetworkName)
            {
                return operations.GetAsync(resourceGroupName, managedNetworkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Get ManagedNetworks operation gets a Managed Network Resource,
            /// specified by the resource group and Managed Network name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedNetworkModel> GetAsync(this IManagedNetworksOperations operations, string resourceGroupName, string managedNetworkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, managedNetworkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Put ManagedNetworks operation creates/updates a Managed Network
            /// Resource, specified by resource group and Managed Network name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managedNetwork'>
            /// Parameters supplied to the create/update a Managed Network Resource
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            public static ManagedNetworkModel CreateOrUpdate(this IManagedNetworksOperations operations, ManagedNetworkModel managedNetwork, string resourceGroupName, string managedNetworkName)
            {
                return operations.CreateOrUpdateAsync(managedNetwork, resourceGroupName, managedNetworkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Put ManagedNetworks operation creates/updates a Managed Network
            /// Resource, specified by resource group and Managed Network name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managedNetwork'>
            /// Parameters supplied to the create/update a Managed Network Resource
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedNetworkModel> CreateOrUpdateAsync(this IManagedNetworksOperations operations, ManagedNetworkModel managedNetwork, string resourceGroupName, string managedNetworkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(managedNetwork, resourceGroupName, managedNetworkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Delete ManagedNetworks operation deletes a Managed Network Resource,
            /// specified by the  resource group and Managed Network name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            public static void Delete(this IManagedNetworksOperations operations, string resourceGroupName, string managedNetworkName)
            {
                operations.DeleteAsync(resourceGroupName, managedNetworkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Delete ManagedNetworks operation deletes a Managed Network Resource,
            /// specified by the  resource group and Managed Network name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagedNetworksOperations operations, string resourceGroupName, string managedNetworkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, managedNetworkName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the specified Managed Network resource tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update application gateway tags and/or scope.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            public static ManagedNetworkModel Update(this IManagedNetworksOperations operations, ManagedNetworkUpdate parameters, string resourceGroupName, string managedNetworkName)
            {
                return operations.UpdateAsync(parameters, resourceGroupName, managedNetworkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified Managed Network resource tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update application gateway tags and/or scope.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedNetworkModel> UpdateAsync(this IManagedNetworksOperations operations, ManagedNetworkUpdate parameters, string resourceGroupName, string managedNetworkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(parameters, resourceGroupName, managedNetworkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The ListByResourceGroup ManagedNetwork operation retrieves all the Managed
            /// Network resources in a resource group in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            public static IPage<ManagedNetworkModel> ListByResourceGroup(this IManagedNetworksOperations operations, string resourceGroupName, int? top = default(int?), string skiptoken = default(string))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, top, skiptoken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The ListByResourceGroup ManagedNetwork operation retrieves all the Managed
            /// Network resources in a resource group in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedNetworkModel>> ListByResourceGroupAsync(this IManagedNetworksOperations operations, string resourceGroupName, int? top = default(int?), string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, top, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The ListBySubscription  ManagedNetwork operation retrieves all the Managed
            /// Network Resources in the current subscription in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            public static IPage<ManagedNetworkModel> ListBySubscription(this IManagedNetworksOperations operations, int? top = default(int?), string skiptoken = default(string))
            {
                return operations.ListBySubscriptionAsync(top, skiptoken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The ListBySubscription  ManagedNetwork operation retrieves all the Managed
            /// Network Resources in the current subscription in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedNetworkModel>> ListBySubscriptionAsync(this IManagedNetworksOperations operations, int? top = default(int?), string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(top, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Delete ManagedNetworks operation deletes a Managed Network Resource,
            /// specified by the  resource group and Managed Network name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            public static void BeginDelete(this IManagedNetworksOperations operations, string resourceGroupName, string managedNetworkName)
            {
                operations.BeginDeleteAsync(resourceGroupName, managedNetworkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Delete ManagedNetworks operation deletes a Managed Network Resource,
            /// specified by the  resource group and Managed Network name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IManagedNetworksOperations operations, string resourceGroupName, string managedNetworkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, managedNetworkName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the specified Managed Network resource tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update application gateway tags and/or scope.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            public static ManagedNetworkModel BeginUpdate(this IManagedNetworksOperations operations, ManagedNetworkUpdate parameters, string resourceGroupName, string managedNetworkName)
            {
                return operations.BeginUpdateAsync(parameters, resourceGroupName, managedNetworkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified Managed Network resource tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update application gateway tags and/or scope.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedNetworkModel> BeginUpdateAsync(this IManagedNetworksOperations operations, ManagedNetworkUpdate parameters, string resourceGroupName, string managedNetworkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(parameters, resourceGroupName, managedNetworkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The ListByResourceGroup ManagedNetwork operation retrieves all the Managed
            /// Network resources in a resource group in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ManagedNetworkModel> ListByResourceGroupNext(this IManagedNetworksOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The ListByResourceGroup ManagedNetwork operation retrieves all the Managed
            /// Network resources in a resource group in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedNetworkModel>> ListByResourceGroupNextAsync(this IManagedNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The ListBySubscription  ManagedNetwork operation retrieves all the Managed
            /// Network Resources in the current subscription in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ManagedNetworkModel> ListBySubscriptionNext(this IManagedNetworksOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The ListBySubscription  ManagedNetwork operation retrieves all the Managed
            /// Network Resources in the current subscription in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedNetworkModel>> ListBySubscriptionNextAsync(this IManagedNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
