// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagedNetwork
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagedNetworkPeeringPoliciesOperations.
    /// </summary>
    public static partial class ManagedNetworkPeeringPoliciesOperationsExtensions
    {
            /// <summary>
            /// The Get ManagedNetworkPeeringPolicies operation gets a Managed Network
            /// Peering Policy resource, specified by the  resource group, Managed Network
            /// name, and peering policy name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            public static ManagedNetworkPeeringPolicy Get(this IManagedNetworkPeeringPoliciesOperations operations, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName)
            {
                return operations.GetAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Get ManagedNetworkPeeringPolicies operation gets a Managed Network
            /// Peering Policy resource, specified by the  resource group, Managed Network
            /// name, and peering policy name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedNetworkPeeringPolicy> GetAsync(this IManagedNetworkPeeringPoliciesOperations operations, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Put ManagedNetworkPeeringPolicies operation creates/updates a new
            /// Managed Network Peering Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managedNetworkPolicy'>
            /// Parameters supplied to create/update a Managed Network Peering Policy
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            public static ManagedNetworkPeeringPolicy CreateOrUpdate(this IManagedNetworkPeeringPoliciesOperations operations, ManagedNetworkPeeringPolicy managedNetworkPolicy, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName)
            {
                return operations.CreateOrUpdateAsync(managedNetworkPolicy, resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Put ManagedNetworkPeeringPolicies operation creates/updates a new
            /// Managed Network Peering Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managedNetworkPolicy'>
            /// Parameters supplied to create/update a Managed Network Peering Policy
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedNetworkPeeringPolicy> CreateOrUpdateAsync(this IManagedNetworkPeeringPoliciesOperations operations, ManagedNetworkPeeringPolicy managedNetworkPolicy, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(managedNetworkPolicy, resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Delete ManagedNetworkPeeringPolicies operation deletes a Managed
            /// Network Peering Policy, specified by the  resource group, Managed Network
            /// name, and peering policy name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            public static void Delete(this IManagedNetworkPeeringPoliciesOperations operations, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName)
            {
                operations.DeleteAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Delete ManagedNetworkPeeringPolicies operation deletes a Managed
            /// Network Peering Policy, specified by the  resource group, Managed Network
            /// name, and peering policy name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagedNetworkPeeringPoliciesOperations operations, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// The ListByManagedNetwork PeeringPolicies operation retrieves all the
            /// Managed Network Peering Policies in a specified Managed Network, in a
            /// paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            public static IPage<ManagedNetworkPeeringPolicy> ListByManagedNetwork(this IManagedNetworkPeeringPoliciesOperations operations, string resourceGroupName, string managedNetworkName, int? top = default(int?), string skiptoken = default(string))
            {
                return operations.ListByManagedNetworkAsync(resourceGroupName, managedNetworkName, top, skiptoken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The ListByManagedNetwork PeeringPolicies operation retrieves all the
            /// Managed Network Peering Policies in a specified Managed Network, in a
            /// paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedNetworkPeeringPolicy>> ListByManagedNetworkAsync(this IManagedNetworkPeeringPoliciesOperations operations, string resourceGroupName, string managedNetworkName, int? top = default(int?), string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByManagedNetworkWithHttpMessagesAsync(resourceGroupName, managedNetworkName, top, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Put ManagedNetworkPeeringPolicies operation creates/updates a new
            /// Managed Network Peering Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managedNetworkPolicy'>
            /// Parameters supplied to create/update a Managed Network Peering Policy
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            public static ManagedNetworkPeeringPolicy BeginCreateOrUpdate(this IManagedNetworkPeeringPoliciesOperations operations, ManagedNetworkPeeringPolicy managedNetworkPolicy, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName)
            {
                return operations.BeginCreateOrUpdateAsync(managedNetworkPolicy, resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Put ManagedNetworkPeeringPolicies operation creates/updates a new
            /// Managed Network Peering Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managedNetworkPolicy'>
            /// Parameters supplied to create/update a Managed Network Peering Policy
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedNetworkPeeringPolicy> BeginCreateOrUpdateAsync(this IManagedNetworkPeeringPoliciesOperations operations, ManagedNetworkPeeringPolicy managedNetworkPolicy, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(managedNetworkPolicy, resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Delete ManagedNetworkPeeringPolicies operation deletes a Managed
            /// Network Peering Policy, specified by the  resource group, Managed Network
            /// name, and peering policy name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            public static void BeginDelete(this IManagedNetworkPeeringPoliciesOperations operations, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName)
            {
                operations.BeginDeleteAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Delete ManagedNetworkPeeringPolicies operation deletes a Managed
            /// Network Peering Policy, specified by the  resource group, Managed Network
            /// name, and peering policy name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='managedNetworkName'>
            /// The name of the Managed Network.
            /// </param>
            /// <param name='managedNetworkPeeringPolicyName'>
            /// The name of the Managed Network Peering Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IManagedNetworkPeeringPoliciesOperations operations, string resourceGroupName, string managedNetworkName, string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// The ListByManagedNetwork PeeringPolicies operation retrieves all the
            /// Managed Network Peering Policies in a specified Managed Network, in a
            /// paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ManagedNetworkPeeringPolicy> ListByManagedNetworkNext(this IManagedNetworkPeeringPoliciesOperations operations, string nextPageLink)
            {
                return operations.ListByManagedNetworkNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The ListByManagedNetwork PeeringPolicies operation retrieves all the
            /// Managed Network Peering Policies in a specified Managed Network, in a
            /// paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedNetworkPeeringPolicy>> ListByManagedNetworkNextAsync(this IManagedNetworkPeeringPoliciesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByManagedNetworkNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
