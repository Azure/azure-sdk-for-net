// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagedNetwork.Models
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties of a Hub and Spoke Peering Policy
    /// </summary>
    public partial class HubAndSpokePeeringPolicyProperties : ManagedNetworkPeeringPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// HubAndSpokePeeringPolicyProperties class.
        /// </summary>
        public HubAndSpokePeeringPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// HubAndSpokePeeringPolicyProperties class.
        /// </summary>
        /// <param name="type">Gets or sets the connectivity type of a network
        /// structure policy. Possible values include: 'HubAndSpokeTopology',
        /// 'MeshTopology'</param>
        /// <param name="provisioningState">Provisioning state of the
        /// ManagedNetwork resource. Possible values are: 'Updating',
        /// 'Deleting', and 'Failed'. Possible values include: 'Updating',
        /// 'Deleting', 'Failed', 'Succeeded'</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        /// <param name="hub">Gets or sets the hub virtual network ID</param>
        /// <param name="spokes">Gets or sets the spokes group IDs</param>
        /// <param name="mesh">Gets or sets the mesh group IDs</param>
        public HubAndSpokePeeringPolicyProperties(string type, string provisioningState = default(string), string etag = default(string), ResourceId hub = default(ResourceId), IList<ResourceId> spokes = default(IList<ResourceId>), IList<ResourceId> mesh = default(IList<ResourceId>))
            : base(type, provisioningState, etag, hub, spokes, mesh)
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
