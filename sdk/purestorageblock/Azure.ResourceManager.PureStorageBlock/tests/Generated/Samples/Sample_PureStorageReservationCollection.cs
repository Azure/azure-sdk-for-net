// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.PureStorageBlock.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.PureStorageBlock.Samples
{
    public partial class Sample_PureStorageReservationCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ReservationsCreate()
        {
            // Generated from example definition: 2024-11-01/Reservations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "Reservation_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PureStorageReservationResource
            PureStorageReservationCollection collection = resourceGroupResource.GetPureStorageReservations();

            // invoke the operation
            string reservationName = "storagePoolname";
            PureStorageReservationData data = new PureStorageReservationData(new AzureLocation("jynnbjysbc"))
            {
                Properties = new PureStorageReservationProperties(new PureStorageMarketplaceDetails(new PureStorageOfferDetails("vejockfhoavaqjvhtwvctdnaefvw", "efojrbphbimq", "caj")
                {
                    PlanName = "lvvzchm",
                    TermUnit = "ose",
                    TermId = "ucyvzkedohfjazifxweylhnbcmeza",
                })
                {
                    SubscriptionStatus = PureStorageMarketplaceSubscriptionStatus.PendingFulfillmentStart,
                }, new PureStorageUserDetails("bucysqbbclhwxrzig", "fnsvxlop", "abc@example.com")
                {
                    Upn = "ekqbqgpdylggddusuiifrnjcwiefay",
                    PhoneNumber = "jglihtgsacdxocc",
                    CompanyDetails = new PureStorageCompanyDetails("nrndfzmrakk")
                    {
                        Address = new PureStorageAddressDetails("f", "qxzhxjoatyuajoljfkd", "dnusygshfvmebpmcjsd", "nuexbknolfphlfguyzq", "yjzqichkfffbdtcswzolmrl")
                        {
                            AddressLine2 = "gycfosmknj",
                        },
                    },
                }),
                Tags =
{
["key1110"] = "euhfdmtfpucwurtu"
},
            };
            ArmOperation<PureStorageReservationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, reservationName, data);
            PureStorageReservationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PureStorageReservationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ReservationsGet()
        {
            // Generated from example definition: 2024-11-01/Reservations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Reservation_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PureStorageReservationResource
            PureStorageReservationCollection collection = resourceGroupResource.GetPureStorageReservations();

            // invoke the operation
            string reservationName = "storagePoolname";
            PureStorageReservationResource result = await collection.GetAsync(reservationName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PureStorageReservationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ReservationsListByResourceGroup()
        {
            // Generated from example definition: 2024-11-01/Reservations_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "Reservation_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PureStorageReservationResource
            PureStorageReservationCollection collection = resourceGroupResource.GetPureStorageReservations();

            // invoke the operation and iterate over the result
            await foreach (PureStorageReservationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PureStorageReservationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ReservationsGet()
        {
            // Generated from example definition: 2024-11-01/Reservations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Reservation_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PureStorageReservationResource
            PureStorageReservationCollection collection = resourceGroupResource.GetPureStorageReservations();

            // invoke the operation
            string reservationName = "storagePoolname";
            bool result = await collection.ExistsAsync(reservationName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ReservationsGet()
        {
            // Generated from example definition: 2024-11-01/Reservations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Reservation_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PureStorageReservationResource
            PureStorageReservationCollection collection = resourceGroupResource.GetPureStorageReservations();

            // invoke the operation
            string reservationName = "storagePoolname";
            NullableResponse<PureStorageReservationResource> response = await collection.GetIfExistsAsync(reservationName);
            PureStorageReservationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PureStorageReservationData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
