// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.PureStorageBlock.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.PureStorageBlock.Samples
{
    public partial class Sample_PureStorageAvsStorageContainerVolumeResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AvsStorageContainerVolumesGet()
        {
            // Generated from example definition: 2024-11-01-preview/AvsStorageContainerVolumes_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsStorageContainerVolume_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStorageAvsStorageContainerVolumeResource created on azure
            // for more information of creating PureStorageAvsStorageContainerVolumeResource, please refer to the document of PureStorageAvsStorageContainerVolumeResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            string storageContainerName = "name";
            string volumeId = "cbdec-ddbb";
            ResourceIdentifier pureStorageAvsStorageContainerVolumeResourceId = PureStorageAvsStorageContainerVolumeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName, storageContainerName, volumeId);
            PureStorageAvsStorageContainerVolumeResource pureStorageAvsStorageContainerVolume = client.GetPureStorageAvsStorageContainerVolumeResource(pureStorageAvsStorageContainerVolumeResourceId);

            // invoke the operation
            PureStorageAvsStorageContainerVolumeResource result = await pureStorageAvsStorageContainerVolume.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PureStorageAvsStorageContainerVolumeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AvsStorageContainerVolumesDelete()
        {
            // Generated from example definition: 2024-11-01-preview/AvsStorageContainerVolumes_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsStorageContainerVolume_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStorageAvsStorageContainerVolumeResource created on azure
            // for more information of creating PureStorageAvsStorageContainerVolumeResource, please refer to the document of PureStorageAvsStorageContainerVolumeResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            string storageContainerName = "name";
            string volumeId = "cbdec-ddbb";
            ResourceIdentifier pureStorageAvsStorageContainerVolumeResourceId = PureStorageAvsStorageContainerVolumeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName, storageContainerName, volumeId);
            PureStorageAvsStorageContainerVolumeResource pureStorageAvsStorageContainerVolume = client.GetPureStorageAvsStorageContainerVolumeResource(pureStorageAvsStorageContainerVolumeResourceId);

            // invoke the operation
            await pureStorageAvsStorageContainerVolume.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AvsStorageContainerVolumesUpdate()
        {
            // Generated from example definition: 2024-11-01-preview/AvsStorageContainerVolumes_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsStorageContainerVolume_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStorageAvsStorageContainerVolumeResource created on azure
            // for more information of creating PureStorageAvsStorageContainerVolumeResource, please refer to the document of PureStorageAvsStorageContainerVolumeResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            string storageContainerName = "name";
            string volumeId = "cbdec-ddbb";
            ResourceIdentifier pureStorageAvsStorageContainerVolumeResourceId = PureStorageAvsStorageContainerVolumeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName, storageContainerName, volumeId);
            PureStorageAvsStorageContainerVolumeResource pureStorageAvsStorageContainerVolume = client.GetPureStorageAvsStorageContainerVolumeResource(pureStorageAvsStorageContainerVolumeResourceId);

            // invoke the operation
            PureStorageAvsStorageContainerVolumePatch patch = new PureStorageAvsStorageContainerVolumePatch
            {
                AvsStorageContainerVolumeUpdateSoftDeletion = new PureStorageSoftDeletionState(true),
            };
            ArmOperation<PureStorageAvsStorageContainerVolumeResource> lro = await pureStorageAvsStorageContainerVolume.UpdateAsync(WaitUntil.Completed, patch);
            PureStorageAvsStorageContainerVolumeResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PureStorageAvsStorageContainerVolumeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
