// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PureStorageBlock.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.PureStorageBlock.Samples
{
    public partial class Sample_PureStoragePoolResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_StoragePoolsGet()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePool_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            PureStoragePoolResource result = await pureStoragePool.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PureStoragePoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_StoragePoolsDelete()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePool_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            await pureStoragePool.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_StoragePoolsUpdate()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePool_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            PureStoragePoolPatch patch = new PureStoragePoolPatch
            {
                Identity = new ManagedServiceIdentity("None")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key4211")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["key9065"] = "ebgmkwxqewe"
},
                StoragePoolUpdateProvisionedBandwidthMbPerSec = 23L,
            };
            ArmOperation<PureStoragePoolResource> lro = await pureStoragePool.UpdateAsync(WaitUntil.Completed, patch);
            PureStoragePoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PureStoragePoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetHealthStatus_StoragePoolsGetHealthStatus()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_GetHealthStatus_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePools_GetHealthStatus" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            StoragePoolHealthInfo result = await pureStoragePool.GetHealthStatusAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAvsConnection_StoragePoolsGetAvsConnection()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_GetAvsConnection_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePools_GetAvsConnection" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            PureStorageAvsConnection result = await pureStoragePool.GetAvsConnectionAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAvsStatus_StoragePoolsGetAvsStatus()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_GetAvsStatus_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePools_GetAvsStatus" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            PureStorageAvsStatus result = await pureStoragePool.GetAvsStatusAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task EnableAvsConnection_StoragePoolsEnableAvsConnection()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_EnableAvsConnection_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePools_EnableAvsConnection" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            StoragePoolEnableAvsConnectionContent content = new StoragePoolEnableAvsConnectionContent(new ResourceIdentifier("tghkgktlddwlszbeh"));
            await pureStoragePool.EnableAvsConnectionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DisableAvsConnection_StoragePoolsDisableAvsConnection()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_DisableAvsConnection_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePools_DisableAvsConnection" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            await pureStoragePool.DisableAvsConnectionAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task FinalizeAvsConnection_StoragePoolsFinalizeAvsConnection()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_FinalizeAvsConnection_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePools_FinalizeAvsConnection" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            StoragePoolFinalizeAvsConnectionContent content = new StoragePoolFinalizeAvsConnectionContent
            {
                ServiceInitializationDataEnc = "hlgzaxrohv",
                ServiceInitializationData = new ServiceInitializationInfo
                {
                    ServiceAccountUsername = "axchgm",
                    ServiceAccountPassword = "i",
                    VSphereIP = "lhbajnykbznxnxpxozyfdjaciennks",
                    VSphereCertificate = "s",
                },
            };
            await pureStoragePool.FinalizeAvsConnectionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RepairAvsConnection_StoragePoolsRepairAvsConnection()
        {
            // Generated from example definition: 2024-11-01-preview/StoragePools_RepairAvsConnection_MaximumSet_Gen.json
            // this example is just showing the usage of "StoragePools_RepairAvsConnection" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PureStoragePoolResource created on azure
            // for more information of creating PureStoragePoolResource, please refer to the document of PureStoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolname";
            ResourceIdentifier pureStoragePoolResourceId = PureStoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            PureStoragePoolResource pureStoragePool = client.GetPureStoragePoolResource(pureStoragePoolResourceId);

            // invoke the operation
            await pureStoragePool.RepairAvsConnectionAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }
    }
}
