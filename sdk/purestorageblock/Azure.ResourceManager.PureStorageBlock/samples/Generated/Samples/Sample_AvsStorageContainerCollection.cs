// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.PureStorageBlock.Samples
{
    public partial class Sample_AvsStorageContainerCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AvsStorageContainersGet()
        {
            // Generated from example definition: 2024-11-01-preview/AvsStorageContainers_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsStorageContainer_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StoragePoolResource created on azure
            // for more information of creating StoragePoolResource, please refer to the document of StoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolName";
            ResourceIdentifier storagePoolResourceId = StoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            StoragePoolResource storagePool = client.GetStoragePoolResource(storagePoolResourceId);

            // get the collection of this AvsStorageContainerResource
            AvsStorageContainerCollection collection = storagePool.GetAvsStorageContainers();

            // invoke the operation
            string storageContainerName = "storageContainerName";
            AvsStorageContainerResource result = await collection.GetAsync(storageContainerName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AvsStorageContainerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AvsStorageContainersListByStoragePool()
        {
            // Generated from example definition: 2024-11-01-preview/AvsStorageContainers_ListByStoragePool_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsStorageContainer_ListByStoragePool" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StoragePoolResource created on azure
            // for more information of creating StoragePoolResource, please refer to the document of StoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "spName";
            ResourceIdentifier storagePoolResourceId = StoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            StoragePoolResource storagePool = client.GetStoragePoolResource(storagePoolResourceId);

            // get the collection of this AvsStorageContainerResource
            AvsStorageContainerCollection collection = storagePool.GetAvsStorageContainers();

            // invoke the operation and iterate over the result
            await foreach (AvsStorageContainerResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AvsStorageContainerData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AvsStorageContainersGet()
        {
            // Generated from example definition: 2024-11-01-preview/AvsStorageContainers_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsStorageContainer_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StoragePoolResource created on azure
            // for more information of creating StoragePoolResource, please refer to the document of StoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolName";
            ResourceIdentifier storagePoolResourceId = StoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            StoragePoolResource storagePool = client.GetStoragePoolResource(storagePoolResourceId);

            // get the collection of this AvsStorageContainerResource
            AvsStorageContainerCollection collection = storagePool.GetAvsStorageContainers();

            // invoke the operation
            string storageContainerName = "storageContainerName";
            bool result = await collection.ExistsAsync(storageContainerName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AvsStorageContainersGet()
        {
            // Generated from example definition: 2024-11-01-preview/AvsStorageContainers_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsStorageContainer_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StoragePoolResource created on azure
            // for more information of creating StoragePoolResource, please refer to the document of StoragePoolResource
            string subscriptionId = "BC47D6CC-AA80-4374-86F8-19D94EC70666";
            string resourceGroupName = "rgpurestorage";
            string storagePoolName = "storagePoolName";
            ResourceIdentifier storagePoolResourceId = StoragePoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storagePoolName);
            StoragePoolResource storagePool = client.GetStoragePoolResource(storagePoolResourceId);

            // get the collection of this AvsStorageContainerResource
            AvsStorageContainerCollection collection = storagePool.GetAvsStorageContainers();

            // invoke the operation
            string storageContainerName = "storageContainerName";
            NullableResponse<AvsStorageContainerResource> response = await collection.GetIfExistsAsync(storageContainerName);
            AvsStorageContainerResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AvsStorageContainerData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
