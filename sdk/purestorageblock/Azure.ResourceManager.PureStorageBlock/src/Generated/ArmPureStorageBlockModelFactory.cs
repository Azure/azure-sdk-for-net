// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmPureStorageBlockModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="PureStorageBlock.ReservationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="PureStorageBlock.ReservationData"/> instance for mocking. </returns>
        public static ReservationData ReservationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ReservationPropertiesBaseResourceProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ReservationData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReservationPropertiesBaseResourceProperties"/>. </summary>
        /// <param name="reservationInternalId"> Pure Storage's internal ID for the reservation. </param>
        /// <param name="marketplace"> Marketplace details. </param>
        /// <param name="user"> User details. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.ReservationPropertiesBaseResourceProperties"/> instance for mocking. </returns>
        public static ReservationPropertiesBaseResourceProperties ReservationPropertiesBaseResourceProperties(string reservationInternalId = null, MarketplaceDetails marketplace = null, UserDetails user = null, ProvisioningState? provisioningState = null)
        {
            return new ReservationPropertiesBaseResourceProperties(reservationInternalId, marketplace, user, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceDetails"/>. </summary>
        /// <param name="subscriptionId"> Marketplace subscription ID. </param>
        /// <param name="subscriptionStatus"> Marketplace subscription status. </param>
        /// <param name="offerDetails"> Offer details of the marketplace subscription. </param>
        /// <returns> A new <see cref="Models.MarketplaceDetails"/> instance for mocking. </returns>
        public static MarketplaceDetails MarketplaceDetails(string subscriptionId = null, MarketplaceSubscriptionStatus? subscriptionStatus = null, OfferDetails offerDetails = null)
        {
            return new MarketplaceDetails(subscriptionId, subscriptionStatus, offerDetails, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LimitDetails"/>. </summary>
        /// <param name="storagePool"> Limits used for storage pool resources. </param>
        /// <param name="volumeProvisionedSize"> Limits used for volume resources. </param>
        /// <param name="protectionPolicy"> internal. </param>
        /// <param name="performancePolicy"> internal. </param>
        /// <returns> A new <see cref="Models.LimitDetails"/> instance for mocking. </returns>
        public static LimitDetails LimitDetails(StoragePoolLimits storagePool = null, RangeLimits volumeProvisionedSize = null, ProtectionPolicyLimits protectionPolicy = null, PerformancePolicyLimits performancePolicy = null)
        {
            return new LimitDetails(storagePool, volumeProvisionedSize != null ? new VolumeLimits(volumeProvisionedSize, serializedAdditionalRawData: null) : null, protectionPolicy, performancePolicy, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StoragePoolLimits"/>. </summary>
        /// <param name="provisionedBandwidthMbPerSec"> Allowed provisioned bandwidth range for a storage pool, in MB/s. </param>
        /// <param name="provisionedIops"> Allowed provisioned IOPS range for a storage pool, as a number of operations. </param>
        /// <param name="physicalAvailabilityZones"> List of physical availability zones in the region in which storage pools can be deployed; some Azure regions do not support the necessary resources in all availability zones. </param>
        /// <returns> A new <see cref="Models.StoragePoolLimits"/> instance for mocking. </returns>
        public static StoragePoolLimits StoragePoolLimits(RangeLimits provisionedBandwidthMbPerSec = null, RangeLimits provisionedIops = null, IEnumerable<string> physicalAvailabilityZones = null)
        {
            physicalAvailabilityZones ??= new List<string>();

            return new StoragePoolLimits(provisionedBandwidthMbPerSec, provisionedIops, physicalAvailabilityZones?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RangeLimits"/>. </summary>
        /// <param name="min"> Minimum value of the property. </param>
        /// <param name="max"> Maximum value of the property. </param>
        /// <returns> A new <see cref="Models.RangeLimits"/> instance for mocking. </returns>
        public static RangeLimits RangeLimits(long min = default, long max = default)
        {
            return new RangeLimits(min, max, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProtectionPolicyLimits"/>. </summary>
        /// <param name="frequency"> internal. </param>
        /// <param name="retention"> internal. </param>
        /// <returns> A new <see cref="Models.ProtectionPolicyLimits"/> instance for mocking. </returns>
        public static ProtectionPolicyLimits ProtectionPolicyLimits(RangeLimits frequency = null, RangeLimits retention = null)
        {
            return new ProtectionPolicyLimits(frequency, retention, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PerformancePolicyLimits"/>. </summary>
        /// <param name="iopsLimit"> internal. </param>
        /// <param name="bandwidthLimit"> internal. </param>
        /// <returns> A new <see cref="Models.PerformancePolicyLimits"/> instance for mocking. </returns>
        public static PerformancePolicyLimits PerformancePolicyLimits(RangeLimits iopsLimit = null, RangeLimits bandwidthLimit = null)
        {
            return new PerformancePolicyLimits(iopsLimit, bandwidthLimit, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReservationBillingStatus"/>. </summary>
        /// <param name="timestamp"> Timestamp for the latest update of this billing status, in RFC 3339 format. </param>
        /// <param name="totalUsedCapacityReported"> Total used capacity as reported by associated storage pools. In bytes. </param>
        /// <param name="lowDrrPoolCount"> How many associated storage pools reported low data reduction ratio (DRR). </param>
        /// <param name="drrWeightedAverage"> Weighted average of the data-reduction ratio for all associated pools. </param>
        /// <param name="totalNonReducibleReported"> The sum of total used capacity for all pools with low DRR, if the DRR penalty applies. In bytes. </param>
        /// <param name="extraUsedCapacityNonReducible"> Extra capacity added because of low DRR storage pools; In bytes. </param>
        /// <param name="extraUsedCapacityLowUsageRounding"> Extra capacity added when rounding up low-usage pools to 30TiB. In bytes. </param>
        /// <param name="extraUsedCapacityNonReduciblePlanDiscount"> Extra capacity discounted due to plan forgiving some low-DRR usage. In bytes. </param>
        /// <param name="totalUsedCapacityBilled"> Total used capacity actually billed. In bytes. </param>
        /// <param name="totalUsedCapacityIncludedPlan"> Total used capacity included in plan. In bytes. </param>
        /// <param name="totalUsedCapacityOverage"> Total used capacity reported at on-demand price. In bytes. </param>
        /// <param name="totalPerformanceReported"> The sum of all performance settings across the pools under this reservation. In MB per second. </param>
        /// <param name="totalPerformanceIncludedPlan"> Total performance amount included in plan. In bytes per second. </param>
        /// <param name="totalPerformanceOverage"> Total performance amount reported at on-demand price. In MB per second. </param>
        /// <returns> A new <see cref="Models.ReservationBillingStatus"/> instance for mocking. </returns>
        public static ReservationBillingStatus ReservationBillingStatus(string timestamp = null, long totalUsedCapacityReported = default, int lowDrrPoolCount = default, double drrWeightedAverage = default, long totalNonReducibleReported = default, long extraUsedCapacityNonReducible = default, long extraUsedCapacityLowUsageRounding = default, long extraUsedCapacityNonReduciblePlanDiscount = default, long totalUsedCapacityBilled = default, long totalUsedCapacityIncludedPlan = default, long totalUsedCapacityOverage = default, long totalPerformanceReported = default, long totalPerformanceIncludedPlan = default, long totalPerformanceOverage = default)
        {
            return new ReservationBillingStatus(
                timestamp,
                totalUsedCapacityReported,
                lowDrrPoolCount,
                drrWeightedAverage,
                totalNonReducibleReported,
                extraUsedCapacityNonReducible,
                extraUsedCapacityLowUsageRounding,
                extraUsedCapacityNonReduciblePlanDiscount,
                totalUsedCapacityBilled,
                totalUsedCapacityIncludedPlan,
                totalUsedCapacityOverage,
                totalPerformanceReported,
                totalPerformanceIncludedPlan,
                totalPerformanceOverage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReservationBillingUsageReport"/>. </summary>
        /// <param name="timestamp"> Latest formatted billing report for this reservation. </param>
        /// <param name="billingUsageProperties"> A list of detailed billing usage properties. </param>
        /// <param name="overallStatusMessage"> Overall status message of the billing usage report. </param>
        /// <returns> A new <see cref="Models.ReservationBillingUsageReport"/> instance for mocking. </returns>
        public static ReservationBillingUsageReport ReservationBillingUsageReport(string timestamp = null, IEnumerable<BillingUsageProperty> billingUsageProperties = null, string overallStatusMessage = null)
        {
            billingUsageProperties ??= new List<BillingUsageProperty>();

            return new ReservationBillingUsageReport(timestamp, billingUsageProperties?.ToList(), overallStatusMessage, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BillingUsageProperty"/>. </summary>
        /// <param name="propertyId"> Unique identifier for the billing usage property. </param>
        /// <param name="propertyName"> Name of the billing usage property. </param>
        /// <param name="currentValue"> Current value of the billing usage property. </param>
        /// <param name="previousValue"> Previous value of the billing usage property. </param>
        /// <param name="severity"> Severity level of the usage. </param>
        /// <param name="statusMessage"> Status message for the billing usage against a property. </param>
        /// <param name="subProperties"> Optional list of sub-properties providing additional details. </param>
        /// <returns> A new <see cref="Models.BillingUsageProperty"/> instance for mocking. </returns>
        public static BillingUsageProperty BillingUsageProperty(string propertyId = null, string propertyName = null, string currentValue = null, string previousValue = null, UsageSeverity severity = default, string statusMessage = null, IEnumerable<BillingUsageProperty> subProperties = null)
        {
            subProperties ??= new List<BillingUsageProperty>();

            return new BillingUsageProperty(
                propertyId,
                propertyName,
                currentValue,
                previousValue,
                severity,
                statusMessage,
                subProperties?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageBlock.StoragePoolData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="PureStorageBlock.StoragePoolData"/> instance for mocking. </returns>
        public static StoragePoolData StoragePoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, StoragePoolProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StoragePoolData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StoragePoolProperties"/>. </summary>
        /// <param name="storagePoolInternalId"> Pure Storage's internal ID of the storage pool. </param>
        /// <param name="availabilityZone"> Azure Availability Zone the Pool is located in. </param>
        /// <param name="vnetInjection"> Network properties of the storage pool. </param>
        /// <param name="dataRetentionPeriod"> How long a destroyed object is kept before being eradicated, in seconds. </param>
        /// <param name="provisionedBandwidthMbPerSec"> Total bandwidth provisioned for the pool, in MB/s. </param>
        /// <param name="provisionedIops"> Total I/O operations per second (IOPS) provisioned for the pool. </param>
        /// <param name="avs"> AVS connection state summary. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="reservationResourceId"> Azure resource ID of the Pure Storage Cloud service (reservation resource) this storage pool belongs to. </param>
        /// <returns> A new <see cref="Models.StoragePoolProperties"/> instance for mocking. </returns>
        public static StoragePoolProperties StoragePoolProperties(string storagePoolInternalId = null, string availabilityZone = null, VnetInjection vnetInjection = null, long? dataRetentionPeriod = null, long provisionedBandwidthMbPerSec = default, long? provisionedIops = null, AzureVmwareService avs = null, ProvisioningState? provisioningState = null, string reservationResourceId = null)
        {
            return new StoragePoolProperties(
                storagePoolInternalId,
                availabilityZone,
                vnetInjection,
                dataRetentionPeriod,
                provisionedBandwidthMbPerSec,
                provisionedIops,
                avs,
                provisioningState,
                reservationResourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AzureVmwareService"/>. </summary>
        /// <param name="avsEnabled"> If true, an AVS SDDC is successfully connected to the storage pool. </param>
        /// <param name="sddcResourceId"> Azure resource ID of the AVS SDDC the storage pool is connected to. </param>
        /// <returns> A new <see cref="Models.AzureVmwareService"/> instance for mocking. </returns>
        public static AzureVmwareService AzureVmwareService(bool avsEnabled = default, string sddcResourceId = null)
        {
            return new AzureVmwareService(avsEnabled, sddcResourceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HealthResponse"/>. </summary>
        /// <param name="health"> Health metrics. </param>
        /// <param name="alerts"> List of health alerts. </param>
        /// <returns> A new <see cref="Models.HealthResponse"/> instance for mocking. </returns>
        public static HealthResponse HealthResponse(HealthDetails health = null, IEnumerable<Alert> alerts = null)
        {
            alerts ??= new List<Alert>();

            return new HealthResponse(health, alerts?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HealthDetails"/>. </summary>
        /// <param name="usedCapacityPercentage"> How full the pool is right now, in %, compared to the maximum size it can grow to; estimated based on current usage and data reduction ratio. </param>
        /// <param name="bandwidthUsage"> Bandwidth usage metrics. </param>
        /// <param name="iopsUsage"> IOPS usage metrics. </param>
        /// <param name="space"> Storage space usage. </param>
        /// <param name="dataReductionRatio"> Data reduction ratio achieved on this pool. </param>
        /// <param name="estimatedMaxCapacity"> Estimated maximum capacity of the pool, in bytes, based on current usage and data reduction ratio. </param>
        /// <returns> A new <see cref="Models.HealthDetails"/> instance for mocking. </returns>
        public static HealthDetails HealthDetails(double usedCapacityPercentage = default, BandwidthUsage bandwidthUsage = null, IopsUsage iopsUsage = null, Space space = null, double dataReductionRatio = default, long estimatedMaxCapacity = default)
        {
            return new HealthDetails(
                usedCapacityPercentage,
                bandwidthUsage,
                iopsUsage,
                space,
                dataReductionRatio,
                estimatedMaxCapacity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BandwidthUsage"/>. </summary>
        /// <param name="current"> Number of bytes written and read per second (maximum value over the last 10 minutes). </param>
        /// <param name="provisioned"> Bandwidth value currently provisioned for the storage pool, in MB/s. </param>
        /// <param name="max"> Maximum bandwidth value that can be provisioned for the storage pool. </param>
        /// <returns> A new <see cref="Models.BandwidthUsage"/> instance for mocking. </returns>
        public static BandwidthUsage BandwidthUsage(long current = default, long provisioned = default, long max = default)
        {
            return new BandwidthUsage(current, provisioned, max, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IopsUsage"/>. </summary>
        /// <param name="current"> Current number of IOPS (maximum value over the last 10 minutes). </param>
        /// <param name="provisioned"> IOPS value currently provisioned for the storage pool. </param>
        /// <param name="max"> Maximum IOPS value that can be provisioned for the storage pool. </param>
        /// <returns> A new <see cref="Models.IopsUsage"/> instance for mocking. </returns>
        public static IopsUsage IopsUsage(long current = default, long provisioned = default, long max = default)
        {
            return new IopsUsage(current, provisioned, max, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Space"/>. </summary>
        /// <param name="totalUsed"> Total space occupied by customer data (i.e., being billed for), in bytes. </param>
        /// <param name="unique"> Unique space occupied by customer data, in bytes; for a volume, this is the amount of storage that would be freed by deleting the volume, since snapshot and shared data would be kept. </param>
        /// <param name="snapshots"> Space occupied by data unique to one or more snapshots, in bytes. </param>
        /// <param name="shared"> Space occupied by duplicated data, meaning data shared with other volumes and snapshots as a result of data deduplication, in bytes. </param>
        /// <returns> A new <see cref="Models.Space"/> instance for mocking. </returns>
        public static Space Space(long totalUsed = default, long unique = default, long snapshots = default, long shared = default)
        {
            return new Space(totalUsed, unique, snapshots, shared, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Alert"/>. </summary>
        /// <param name="level"> Severity level. </param>
        /// <param name="message"> A short description of the alert. </param>
        /// <returns> A new <see cref="Models.Alert"/> instance for mocking. </returns>
        public static Alert Alert(AlertLevel level = default, string message = null)
        {
            return new Alert(level, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvsConnection"/>. </summary>
        /// <param name="serviceInitializationCompleted"> Indicates whether service initialization is complete. </param>
        /// <param name="serviceInitializationHandleEnc"> Encoded service account credentials alongside connection information. </param>
        /// <param name="serviceInitializationHandle"> Explicit service account credentials. </param>
        /// <returns> A new <see cref="Models.AvsConnection"/> instance for mocking. </returns>
        public static AvsConnection AvsConnection(bool serviceInitializationCompleted = default, string serviceInitializationHandleEnc = null, ServiceInitializationHandle serviceInitializationHandle = null)
        {
            return new AvsConnection(serviceInitializationCompleted, serviceInitializationHandleEnc, serviceInitializationHandle, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ServiceInitializationHandle"/>. </summary>
        /// <param name="sddcResourceId"> Azure resource ID of the AVS SDDC the pool is connecting to. </param>
        /// <param name="serviceAccountUsername"> Requested service account username. </param>
        /// <returns> A new <see cref="Models.ServiceInitializationHandle"/> instance for mocking. </returns>
        public static ServiceInitializationHandle ServiceInitializationHandle(string sddcResourceId = null, string serviceAccountUsername = null)
        {
            return new ServiceInitializationHandle(sddcResourceId, serviceAccountUsername, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvsStatus"/>. </summary>
        /// <param name="avsEnabled"> If true, an AVS connection has been successfully completed. </param>
        /// <param name="currentConnectionStatus"> Human-readable current AVS connection status. </param>
        /// <param name="sddcResourceId"> Azure resource ID of the AVS SDDC the pool is connected to. </param>
        /// <returns> A new <see cref="Models.AvsStatus"/> instance for mocking. </returns>
        public static AvsStatus AvsStatus(bool avsEnabled = default, string currentConnectionStatus = null, string sddcResourceId = null)
        {
            return new AvsStatus(avsEnabled, currentConnectionStatus, sddcResourceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageBlock.AvsStorageContainerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="PureStorageBlock.AvsStorageContainerData"/> instance for mocking. </returns>
        public static AvsStorageContainerData AvsStorageContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AvsStorageContainerProperties properties = null)
        {
            return new AvsStorageContainerData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvsStorageContainerProperties"/>. </summary>
        /// <param name="space"> Storage space usage. </param>
        /// <param name="resourceName"> Name of the storage container. </param>
        /// <param name="provisionedLimit"> Maximum amount of bytes that can be provisioned in this storage container; it must be a multiple of 512; each time a volume is provisioned in this container, its provisionedSize will be counted against the provisionLimit and the provisioning will fail if it goes over (minimum: 1048576 (1MiB), maximum: 4503599627370496 (4PiB)); by default it is unrestricted. </param>
        /// <param name="datastore"> VMware datastore associated with this storage container (if any). </param>
        /// <param name="mounted"> Whether the datastore is mounted in VMware or not. </param>
        /// <returns> A new <see cref="Models.AvsStorageContainerProperties"/> instance for mocking. </returns>
        public static AvsStorageContainerProperties AvsStorageContainerProperties(Space space = null, string resourceName = null, long? provisionedLimit = null, string datastore = null, bool? mounted = null)
        {
            return new AvsStorageContainerProperties(
                space,
                resourceName,
                provisionedLimit,
                datastore,
                mounted,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SoftDeletion"/>. </summary>
        /// <param name="destroyed"> If false, the resource is active; if true, the resource has been destroyed; resources can be soft-deleted by setting destroyed to true, and recovered by setting it to false. </param>
        /// <param name="eradicationTimestamp"> Date at which the resource will be eradicated and impossible to recover, as an RFC 3339 timestamp; invalid if destroyed is false;. </param>
        /// <returns> A new <see cref="Models.SoftDeletion"/> instance for mocking. </returns>
        public static SoftDeletion SoftDeletion(bool destroyed = default, string eradicationTimestamp = null)
        {
            return new SoftDeletion(destroyed, eradicationTimestamp, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageBlock.AvsStorageContainerVolumeData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="PureStorageBlock.AvsStorageContainerVolumeData"/> instance for mocking. </returns>
        public static AvsStorageContainerVolumeData AvsStorageContainerVolumeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, VolumeProperties properties = null)
        {
            return new AvsStorageContainerVolumeData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VolumeProperties"/>. </summary>
        /// <param name="storagePoolInternalId"> Pure Storage's internal ID for the storage pool containing the volume. </param>
        /// <param name="storagePoolResourceId"> Azure Resource ID of the storage pool containing this volume. </param>
        /// <param name="volumeInternalId"> Pure Storage's internal ID for the volume. </param>
        /// <param name="displayName"> Human-readable name of the volume. </param>
        /// <param name="space"> Storage space usage. </param>
        /// <param name="softDeletion"> Volume's soft-deletion state. </param>
        /// <param name="createdTimestamp"> Volume creation date, as an RFC 3339 timestamp. </param>
        /// <param name="provisionedSize"> Currently provisioned size of the volume, in bytes. </param>
        /// <param name="volumeType"> Specify which control plane handles the lifecycle of the volume. </param>
        /// <param name="avs"> AVS-specific volume information. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.VolumeProperties"/> instance for mocking. </returns>
        public static VolumeProperties VolumeProperties(string storagePoolInternalId = null, string storagePoolResourceId = null, string volumeInternalId = null, string displayName = null, Space space = null, SoftDeletion softDeletion = null, string createdTimestamp = null, long? provisionedSize = null, VolumeType? volumeType = null, AvsDiskDetails avs = null, ResourceProvisioningState? provisioningState = null)
        {
            return new VolumeProperties(
                storagePoolInternalId,
                storagePoolResourceId,
                volumeInternalId,
                displayName,
                space,
                softDeletion,
                createdTimestamp,
                provisionedSize,
                volumeType,
                avs,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvsDiskDetails"/>. </summary>
        /// <param name="diskId"> VMware ID of the disk/volume. </param>
        /// <param name="diskName"> VMware name of the disk/volume. </param>
        /// <param name="folder"> Name of the top-level folder in the datastore that contains the disk/volume. </param>
        /// <param name="avsVmInternalId"> VMware ID assigned to the disk/volume. </param>
        /// <param name="avsVmResourceId"> Azure resource ID of the AVS VM connected to this disk/volume. </param>
        /// <param name="avsVmName"> Name of the AVS VM connected to this disk/volume. </param>
        /// <param name="avsStorageContainerResourceId"> Azure resource ID of the AVS storage container containing this disk/volume. </param>
        /// <returns> A new <see cref="Models.AvsDiskDetails"/> instance for mocking. </returns>
        public static AvsDiskDetails AvsDiskDetails(string diskId = null, string diskName = null, string folder = null, string avsVmInternalId = null, string avsVmResourceId = null, string avsVmName = null, string avsStorageContainerResourceId = null)
        {
            return new AvsDiskDetails(
                diskId,
                diskName,
                folder,
                avsVmInternalId,
                avsVmResourceId,
                avsVmName,
                avsStorageContainerResourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageBlock.AvsVmData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="PureStorageBlock.AvsVmData"/> instance for mocking. </returns>
        public static AvsVmData AvsVmData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AvsVmProperties properties = null)
        {
            return new AvsVmData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvsVmProperties"/>. </summary>
        /// <param name="storagePoolInternalId"> Pure Storage's internal ID for the storage pool. </param>
        /// <param name="storagePoolResourceId"> Azure resource ID of the storage pool. </param>
        /// <param name="displayName"> Human-readable name of the AVS VM. </param>
        /// <param name="createdTimestamp"> Date at which the AVS VM was created, as an RFC 3339 timestamp. </param>
        /// <param name="softDeletion"> AVS VM's soft-deletion state. </param>
        /// <param name="volumeContainerType"> Specify which control plane handles the lifecycle of the volume container. </param>
        /// <param name="avs"> AVS VM details. </param>
        /// <param name="space"> Contains properties related to used Flash space. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.AvsVmProperties"/> instance for mocking. </returns>
        public static AvsVmProperties AvsVmProperties(string storagePoolInternalId = null, string storagePoolResourceId = null, string displayName = null, string createdTimestamp = null, SoftDeletion softDeletion = null, VolumeContainerType? volumeContainerType = null, AvsVmDetails avs = null, Space space = null, ResourceProvisioningState? provisioningState = null)
        {
            return new AvsVmProperties(
                storagePoolInternalId,
                storagePoolResourceId,
                displayName,
                createdTimestamp,
                softDeletion,
                volumeContainerType,
                avs,
                space,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvsVmDetails"/>. </summary>
        /// <param name="vmId"> ID of the AVS VM using this set of volumes. </param>
        /// <param name="vmName"> Name of the VMware VM using this set of volumes. </param>
        /// <param name="vmType"> Type of the VMware VM using this set of volumes. </param>
        /// <param name="avsVmInternalId"> Pure Storage's internal ID for this AVS VM. </param>
        /// <returns> A new <see cref="Models.AvsVmDetails"/> instance for mocking. </returns>
        public static AvsVmDetails AvsVmDetails(string vmId = null, string vmName = null, VmType vmType = default, string avsVmInternalId = null)
        {
            return new AvsVmDetails(vmId, vmName, vmType, avsVmInternalId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageBlock.AvsVmVolumeData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="PureStorageBlock.AvsVmVolumeData"/> instance for mocking. </returns>
        public static AvsVmVolumeData AvsVmVolumeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, VolumeProperties properties = null)
        {
            return new AvsVmVolumeData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }
    }
}
