// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.PureStorageBlock
{
    /// <summary>
    /// A class representing a collection of <see cref="PureStorageAvsVmResource"/> and their operations.
    /// Each <see cref="PureStorageAvsVmResource"/> in the collection will belong to the same instance of <see cref="PureStoragePoolResource"/>.
    /// To get a <see cref="PureStorageAvsVmCollection"/> instance call the GetPureStorageAvsVms method from an instance of <see cref="PureStoragePoolResource"/>.
    /// </summary>
    public partial class PureStorageAvsVmCollection : ArmCollection, IEnumerable<PureStorageAvsVmResource>, IAsyncEnumerable<PureStorageAvsVmResource>
    {
        private readonly ClientDiagnostics _pureStorageAvsVmAvsVmsClientDiagnostics;
        private readonly AvsVmsRestOperations _pureStorageAvsVmAvsVmsRestClient;

        /// <summary> Initializes a new instance of the <see cref="PureStorageAvsVmCollection"/> class for mocking. </summary>
        protected PureStorageAvsVmCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PureStorageAvsVmCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal PureStorageAvsVmCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _pureStorageAvsVmAvsVmsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.PureStorageBlock", PureStorageAvsVmResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PureStorageAvsVmResource.ResourceType, out string pureStorageAvsVmAvsVmsApiVersion);
            _pureStorageAvsVmAvsVmsRestClient = new AvsVmsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, pureStorageAvsVmAvsVmsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PureStoragePoolResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PureStoragePoolResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get an AVS VM
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms/{avsVmId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsVm_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageAvsVmResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsVmId"> ID of the AVS VM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="avsVmId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="avsVmId"/> is null. </exception>
        public virtual async Task<Response<PureStorageAvsVmResource>> GetAsync(string avsVmId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(avsVmId, nameof(avsVmId));

            using var scope = _pureStorageAvsVmAvsVmsClientDiagnostics.CreateScope("PureStorageAvsVmCollection.Get");
            scope.Start();
            try
            {
                var response = await _pureStorageAvsVmAvsVmsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, avsVmId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PureStorageAvsVmResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an AVS VM
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms/{avsVmId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsVm_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageAvsVmResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsVmId"> ID of the AVS VM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="avsVmId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="avsVmId"/> is null. </exception>
        public virtual Response<PureStorageAvsVmResource> Get(string avsVmId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(avsVmId, nameof(avsVmId));

            using var scope = _pureStorageAvsVmAvsVmsClientDiagnostics.CreateScope("PureStorageAvsVmCollection.Get");
            scope.Start();
            try
            {
                var response = _pureStorageAvsVmAvsVmsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, avsVmId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PureStorageAvsVmResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List AVS VMs by storage pool
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsVm_ListByStoragePool</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageAvsVmResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PureStorageAvsVmResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PureStorageAvsVmResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _pureStorageAvsVmAvsVmsRestClient.CreateListByStoragePoolRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _pureStorageAvsVmAvsVmsRestClient.CreateListByStoragePoolNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PureStorageAvsVmResource(Client, PureStorageAvsVmData.DeserializePureStorageAvsVmData(e)), _pureStorageAvsVmAvsVmsClientDiagnostics, Pipeline, "PureStorageAvsVmCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List AVS VMs by storage pool
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsVm_ListByStoragePool</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageAvsVmResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PureStorageAvsVmResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PureStorageAvsVmResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _pureStorageAvsVmAvsVmsRestClient.CreateListByStoragePoolRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _pureStorageAvsVmAvsVmsRestClient.CreateListByStoragePoolNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PureStorageAvsVmResource(Client, PureStorageAvsVmData.DeserializePureStorageAvsVmData(e)), _pureStorageAvsVmAvsVmsClientDiagnostics, Pipeline, "PureStorageAvsVmCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms/{avsVmId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsVm_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageAvsVmResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsVmId"> ID of the AVS VM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="avsVmId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="avsVmId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string avsVmId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(avsVmId, nameof(avsVmId));

            using var scope = _pureStorageAvsVmAvsVmsClientDiagnostics.CreateScope("PureStorageAvsVmCollection.Exists");
            scope.Start();
            try
            {
                var response = await _pureStorageAvsVmAvsVmsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, avsVmId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms/{avsVmId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsVm_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageAvsVmResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsVmId"> ID of the AVS VM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="avsVmId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="avsVmId"/> is null. </exception>
        public virtual Response<bool> Exists(string avsVmId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(avsVmId, nameof(avsVmId));

            using var scope = _pureStorageAvsVmAvsVmsClientDiagnostics.CreateScope("PureStorageAvsVmCollection.Exists");
            scope.Start();
            try
            {
                var response = _pureStorageAvsVmAvsVmsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, avsVmId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms/{avsVmId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsVm_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageAvsVmResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsVmId"> ID of the AVS VM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="avsVmId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="avsVmId"/> is null. </exception>
        public virtual async Task<NullableResponse<PureStorageAvsVmResource>> GetIfExistsAsync(string avsVmId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(avsVmId, nameof(avsVmId));

            using var scope = _pureStorageAvsVmAvsVmsClientDiagnostics.CreateScope("PureStorageAvsVmCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _pureStorageAvsVmAvsVmsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, avsVmId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<PureStorageAvsVmResource>(response.GetRawResponse());
                return Response.FromValue(new PureStorageAvsVmResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms/{avsVmId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsVm_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageAvsVmResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsVmId"> ID of the AVS VM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="avsVmId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="avsVmId"/> is null. </exception>
        public virtual NullableResponse<PureStorageAvsVmResource> GetIfExists(string avsVmId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(avsVmId, nameof(avsVmId));

            using var scope = _pureStorageAvsVmAvsVmsClientDiagnostics.CreateScope("PureStorageAvsVmCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _pureStorageAvsVmAvsVmsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, avsVmId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<PureStorageAvsVmResource>(response.GetRawResponse());
                return Response.FromValue(new PureStorageAvsVmResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PureStorageAvsVmResource> IEnumerable<PureStorageAvsVmResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PureStorageAvsVmResource> IAsyncEnumerable<PureStorageAvsVmResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
