// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    public partial class PureStorageHealthDetails : IUtf8JsonSerializable, IJsonModel<PureStorageHealthDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PureStorageHealthDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<PureStorageHealthDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PureStorageHealthDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PureStorageHealthDetails)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("usedCapacityPercentage"u8);
            writer.WriteNumberValue(UsedCapacityPercentage);
            writer.WritePropertyName("bandwidthUsage"u8);
            writer.WriteObjectValue(BandwidthUsage, options);
            writer.WritePropertyName("iopsUsage"u8);
            writer.WriteObjectValue(IopsUsage, options);
            writer.WritePropertyName("space"u8);
            writer.WriteObjectValue(Space, options);
            writer.WritePropertyName("dataReductionRatio"u8);
            writer.WriteNumberValue(DataReductionRatio);
            writer.WritePropertyName("estimatedMaxCapacity"u8);
            writer.WriteNumberValue(EstimatedMaxCapacity);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        PureStorageHealthDetails IJsonModel<PureStorageHealthDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PureStorageHealthDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PureStorageHealthDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePureStorageHealthDetails(document.RootElement, options);
        }

        internal static PureStorageHealthDetails DeserializePureStorageHealthDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            double usedCapacityPercentage = default;
            PureStorageBandwidthUsage bandwidthUsage = default;
            PureStorageIopsUsage iopsUsage = default;
            PureStorageSpaceUsage space = default;
            double dataReductionRatio = default;
            long estimatedMaxCapacity = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("usedCapacityPercentage"u8))
                {
                    usedCapacityPercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("bandwidthUsage"u8))
                {
                    bandwidthUsage = PureStorageBandwidthUsage.DeserializePureStorageBandwidthUsage(property.Value, options);
                    continue;
                }
                if (property.NameEquals("iopsUsage"u8))
                {
                    iopsUsage = PureStorageIopsUsage.DeserializePureStorageIopsUsage(property.Value, options);
                    continue;
                }
                if (property.NameEquals("space"u8))
                {
                    space = PureStorageSpaceUsage.DeserializePureStorageSpaceUsage(property.Value, options);
                    continue;
                }
                if (property.NameEquals("dataReductionRatio"u8))
                {
                    dataReductionRatio = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("estimatedMaxCapacity"u8))
                {
                    estimatedMaxCapacity = property.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new PureStorageHealthDetails(
                usedCapacityPercentage,
                bandwidthUsage,
                iopsUsage,
                space,
                dataReductionRatio,
                estimatedMaxCapacity,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<PureStorageHealthDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PureStorageHealthDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerPureStorageBlockContext.Default);
                default:
                    throw new FormatException($"The model {nameof(PureStorageHealthDetails)} does not support writing '{options.Format}' format.");
            }
        }

        PureStorageHealthDetails IPersistableModel<PureStorageHealthDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PureStorageHealthDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializePureStorageHealthDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(PureStorageHealthDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<PureStorageHealthDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
