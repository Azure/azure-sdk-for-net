// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    /// <summary> Represents an individual billing usage property. </summary>
    public partial class PureStorageBillingUsageProperty
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PureStorageBillingUsageProperty"/>. </summary>
        /// <param name="propertyId"> Unique identifier for the billing usage property. </param>
        /// <param name="propertyName"> Name of the billing usage property. </param>
        /// <param name="currentValue"> Current value of the billing usage property. </param>
        /// <param name="severity"> Severity level of the usage. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="propertyId"/>, <paramref name="propertyName"/> or <paramref name="currentValue"/> is null. </exception>
        internal PureStorageBillingUsageProperty(string propertyId, string propertyName, string currentValue, PureStorageBillingUsageSeverity severity)
        {
            Argument.AssertNotNull(propertyId, nameof(propertyId));
            Argument.AssertNotNull(propertyName, nameof(propertyName));
            Argument.AssertNotNull(currentValue, nameof(currentValue));

            PropertyId = propertyId;
            PropertyName = propertyName;
            CurrentValue = currentValue;
            Severity = severity;
            SubProperties = new ChangeTrackingList<PureStorageBillingUsageProperty>();
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageBillingUsageProperty"/>. </summary>
        /// <param name="propertyId"> Unique identifier for the billing usage property. </param>
        /// <param name="propertyName"> Name of the billing usage property. </param>
        /// <param name="currentValue"> Current value of the billing usage property. </param>
        /// <param name="previousValue"> Previous value of the billing usage property. </param>
        /// <param name="severity"> Severity level of the usage. </param>
        /// <param name="statusMessage"> Status message for the billing usage against a property. </param>
        /// <param name="subProperties"> Optional list of sub-properties providing additional details. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PureStorageBillingUsageProperty(string propertyId, string propertyName, string currentValue, string previousValue, PureStorageBillingUsageSeverity severity, string statusMessage, IReadOnlyList<PureStorageBillingUsageProperty> subProperties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PropertyId = propertyId;
            PropertyName = propertyName;
            CurrentValue = currentValue;
            PreviousValue = previousValue;
            Severity = severity;
            StatusMessage = statusMessage;
            SubProperties = subProperties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageBillingUsageProperty"/> for deserialization. </summary>
        internal PureStorageBillingUsageProperty()
        {
        }

        /// <summary> Unique identifier for the billing usage property. </summary>
        public string PropertyId { get; }
        /// <summary> Name of the billing usage property. </summary>
        public string PropertyName { get; }
        /// <summary> Current value of the billing usage property. </summary>
        public string CurrentValue { get; }
        /// <summary> Previous value of the billing usage property. </summary>
        public string PreviousValue { get; }
        /// <summary> Severity level of the usage. </summary>
        public PureStorageBillingUsageSeverity Severity { get; }
        /// <summary> Status message for the billing usage against a property. </summary>
        public string StatusMessage { get; }
        /// <summary> Optional list of sub-properties providing additional details. </summary>
        public IReadOnlyList<PureStorageBillingUsageProperty> SubProperties { get; }
    }
}
