// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    /// <summary> Health metrics for a storage pool. </summary>
    public partial class PureStorageHealthDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PureStorageHealthDetails"/>. </summary>
        /// <param name="usedCapacityPercentage"> How full the pool is right now, in %, compared to the maximum size it can grow to; estimated based on current usage and data reduction ratio. </param>
        /// <param name="bandwidthUsage"> Bandwidth usage metrics. </param>
        /// <param name="iopsUsage"> IOPS usage metrics. </param>
        /// <param name="space"> Storage space usage. </param>
        /// <param name="dataReductionRatio"> Data reduction ratio achieved on this pool. </param>
        /// <param name="estimatedMaxCapacity"> Estimated maximum capacity of the pool, in bytes, based on current usage and data reduction ratio. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bandwidthUsage"/>, <paramref name="iopsUsage"/> or <paramref name="space"/> is null. </exception>
        internal PureStorageHealthDetails(double usedCapacityPercentage, PureStorageBandwidthUsage bandwidthUsage, PureStorageIopsUsage iopsUsage, PureStorageSpaceUsage space, double dataReductionRatio, long estimatedMaxCapacity)
        {
            Argument.AssertNotNull(bandwidthUsage, nameof(bandwidthUsage));
            Argument.AssertNotNull(iopsUsage, nameof(iopsUsage));
            Argument.AssertNotNull(space, nameof(space));

            UsedCapacityPercentage = usedCapacityPercentage;
            BandwidthUsage = bandwidthUsage;
            IopsUsage = iopsUsage;
            Space = space;
            DataReductionRatio = dataReductionRatio;
            EstimatedMaxCapacity = estimatedMaxCapacity;
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageHealthDetails"/>. </summary>
        /// <param name="usedCapacityPercentage"> How full the pool is right now, in %, compared to the maximum size it can grow to; estimated based on current usage and data reduction ratio. </param>
        /// <param name="bandwidthUsage"> Bandwidth usage metrics. </param>
        /// <param name="iopsUsage"> IOPS usage metrics. </param>
        /// <param name="space"> Storage space usage. </param>
        /// <param name="dataReductionRatio"> Data reduction ratio achieved on this pool. </param>
        /// <param name="estimatedMaxCapacity"> Estimated maximum capacity of the pool, in bytes, based on current usage and data reduction ratio. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PureStorageHealthDetails(double usedCapacityPercentage, PureStorageBandwidthUsage bandwidthUsage, PureStorageIopsUsage iopsUsage, PureStorageSpaceUsage space, double dataReductionRatio, long estimatedMaxCapacity, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UsedCapacityPercentage = usedCapacityPercentage;
            BandwidthUsage = bandwidthUsage;
            IopsUsage = iopsUsage;
            Space = space;
            DataReductionRatio = dataReductionRatio;
            EstimatedMaxCapacity = estimatedMaxCapacity;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageHealthDetails"/> for deserialization. </summary>
        internal PureStorageHealthDetails()
        {
        }

        /// <summary> How full the pool is right now, in %, compared to the maximum size it can grow to; estimated based on current usage and data reduction ratio. </summary>
        public double UsedCapacityPercentage { get; }
        /// <summary> Bandwidth usage metrics. </summary>
        public PureStorageBandwidthUsage BandwidthUsage { get; }
        /// <summary> IOPS usage metrics. </summary>
        public PureStorageIopsUsage IopsUsage { get; }
        /// <summary> Storage space usage. </summary>
        public PureStorageSpaceUsage Space { get; }
        /// <summary> Data reduction ratio achieved on this pool. </summary>
        public double DataReductionRatio { get; }
        /// <summary> Estimated maximum capacity of the pool, in bytes, based on current usage and data reduction ratio. </summary>
        public long EstimatedMaxCapacity { get; }
    }
}
