// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    /// <summary> Severity levels for billing usage properties. </summary>
    public readonly partial struct PureStorageBillingUsageSeverity : IEquatable<PureStorageBillingUsageSeverity>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PureStorageBillingUsageSeverity"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PureStorageBillingUsageSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ALERTValue = "alert";
        private const string INFORMATIONValue = "information";
        private const string WARNINGValue = "warning";
        private const string NONEValue = "none";

        /// <summary> Indicates an alert condition. </summary>
        public static PureStorageBillingUsageSeverity ALERT { get; } = new PureStorageBillingUsageSeverity(ALERTValue);
        /// <summary> Provides informational details. </summary>
        public static PureStorageBillingUsageSeverity INFORMATION { get; } = new PureStorageBillingUsageSeverity(INFORMATIONValue);
        /// <summary> Indicates a warning condition. </summary>
        public static PureStorageBillingUsageSeverity WARNING { get; } = new PureStorageBillingUsageSeverity(WARNINGValue);
        /// <summary> Indicates no severity. </summary>
        public static PureStorageBillingUsageSeverity NONE { get; } = new PureStorageBillingUsageSeverity(NONEValue);
        /// <summary> Determines if two <see cref="PureStorageBillingUsageSeverity"/> values are the same. </summary>
        public static bool operator ==(PureStorageBillingUsageSeverity left, PureStorageBillingUsageSeverity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PureStorageBillingUsageSeverity"/> values are not the same. </summary>
        public static bool operator !=(PureStorageBillingUsageSeverity left, PureStorageBillingUsageSeverity right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PureStorageBillingUsageSeverity"/>. </summary>
        public static implicit operator PureStorageBillingUsageSeverity(string value) => new PureStorageBillingUsageSeverity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PureStorageBillingUsageSeverity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PureStorageBillingUsageSeverity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
