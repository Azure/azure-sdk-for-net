// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    public partial class PureStoragePoolProperties : IUtf8JsonSerializable, IJsonModel<PureStoragePoolProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PureStoragePoolProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<PureStoragePoolProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PureStoragePoolProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PureStoragePoolProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(StoragePoolInternalId))
            {
                writer.WritePropertyName("storagePoolInternalId"u8);
                writer.WriteStringValue(StoragePoolInternalId);
            }
            writer.WritePropertyName("availabilityZone"u8);
            writer.WriteStringValue(AvailabilityZone);
            writer.WritePropertyName("vnetInjection"u8);
            writer.WriteObjectValue(VnetInjection, options);
            if (options.Format != "W" && Optional.IsDefined(DataRetentionPeriod))
            {
                writer.WritePropertyName("dataRetentionPeriod"u8);
                writer.WriteNumberValue(DataRetentionPeriod.Value);
            }
            writer.WritePropertyName("provisionedBandwidthMbPerSec"u8);
            writer.WriteNumberValue(ProvisionedBandwidthMbPerSec);
            if (options.Format != "W" && Optional.IsDefined(ProvisionedIops))
            {
                writer.WritePropertyName("provisionedIops"u8);
                writer.WriteNumberValue(ProvisionedIops.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Avs))
            {
                writer.WritePropertyName("avs"u8);
                writer.WriteObjectValue(Avs, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WritePropertyName("reservationResourceId"u8);
            writer.WriteStringValue(ReservationResourceId);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        PureStoragePoolProperties IJsonModel<PureStoragePoolProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PureStoragePoolProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PureStoragePoolProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePureStoragePoolProperties(document.RootElement, options);
        }

        internal static PureStoragePoolProperties DeserializePureStoragePoolProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string storagePoolInternalId = default;
            string availabilityZone = default;
            PureStoragePoolVnetInjection vnetInjection = default;
            long? dataRetentionPeriod = default;
            long provisionedBandwidthMbPerSec = default;
            long? provisionedIops = default;
            PureStorageAvs avs = default;
            PureStorageProvisioningState? provisioningState = default;
            ResourceIdentifier reservationResourceId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("storagePoolInternalId"u8))
                {
                    storagePoolInternalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("availabilityZone"u8))
                {
                    availabilityZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vnetInjection"u8))
                {
                    vnetInjection = PureStoragePoolVnetInjection.DeserializePureStoragePoolVnetInjection(property.Value, options);
                    continue;
                }
                if (property.NameEquals("dataRetentionPeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataRetentionPeriod = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("provisionedBandwidthMbPerSec"u8))
                {
                    provisionedBandwidthMbPerSec = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("provisionedIops"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionedIops = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("avs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    avs = PureStorageAvs.DeserializePureStorageAvs(property.Value, options);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new PureStorageProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("reservationResourceId"u8))
                {
                    reservationResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new PureStoragePoolProperties(
                storagePoolInternalId,
                availabilityZone,
                vnetInjection,
                dataRetentionPeriod,
                provisionedBandwidthMbPerSec,
                provisionedIops,
                avs,
                provisioningState,
                reservationResourceId,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<PureStoragePoolProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PureStoragePoolProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerPureStorageBlockContext.Default);
                default:
                    throw new FormatException($"The model {nameof(PureStoragePoolProperties)} does not support writing '{options.Format}' format.");
            }
        }

        PureStoragePoolProperties IPersistableModel<PureStoragePoolProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PureStoragePoolProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializePureStoragePoolProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(PureStoragePoolProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<PureStoragePoolProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
