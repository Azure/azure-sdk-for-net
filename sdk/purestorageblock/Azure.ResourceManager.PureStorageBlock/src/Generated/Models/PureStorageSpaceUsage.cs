// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    /// <summary> Storage space usage. </summary>
    public partial class PureStorageSpaceUsage
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PureStorageSpaceUsage"/>. </summary>
        /// <param name="totalUsed"> Total space occupied by customer data (i.e., being billed for), in bytes. </param>
        /// <param name="unique"> Unique space occupied by customer data, in bytes; for a volume, this is the amount of storage that would be freed by deleting the volume, since snapshot and shared data would be kept. </param>
        /// <param name="snapshots"> Space occupied by data unique to one or more snapshots, in bytes. </param>
        /// <param name="shared"> Space occupied by duplicated data, meaning data shared with other volumes and snapshots as a result of data deduplication, in bytes. </param>
        internal PureStorageSpaceUsage(long totalUsed, long unique, long snapshots, long shared)
        {
            TotalUsed = totalUsed;
            Unique = unique;
            Snapshots = snapshots;
            Shared = shared;
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageSpaceUsage"/>. </summary>
        /// <param name="totalUsed"> Total space occupied by customer data (i.e., being billed for), in bytes. </param>
        /// <param name="unique"> Unique space occupied by customer data, in bytes; for a volume, this is the amount of storage that would be freed by deleting the volume, since snapshot and shared data would be kept. </param>
        /// <param name="snapshots"> Space occupied by data unique to one or more snapshots, in bytes. </param>
        /// <param name="shared"> Space occupied by duplicated data, meaning data shared with other volumes and snapshots as a result of data deduplication, in bytes. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PureStorageSpaceUsage(long totalUsed, long unique, long snapshots, long shared, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TotalUsed = totalUsed;
            Unique = unique;
            Snapshots = snapshots;
            Shared = shared;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageSpaceUsage"/> for deserialization. </summary>
        internal PureStorageSpaceUsage()
        {
        }

        /// <summary> Total space occupied by customer data (i.e., being billed for), in bytes. </summary>
        public long TotalUsed { get; }
        /// <summary> Unique space occupied by customer data, in bytes; for a volume, this is the amount of storage that would be freed by deleting the volume, since snapshot and shared data would be kept. </summary>
        public long Unique { get; }
        /// <summary> Space occupied by data unique to one or more snapshots, in bytes. </summary>
        public long Snapshots { get; }
        /// <summary> Space occupied by duplicated data, meaning data shared with other volumes and snapshots as a result of data deduplication, in bytes. </summary>
        public long Shared { get; }
    }
}
