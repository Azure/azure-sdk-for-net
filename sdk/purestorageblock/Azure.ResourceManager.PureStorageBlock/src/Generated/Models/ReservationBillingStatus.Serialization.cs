// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    public partial class ReservationBillingStatus : IUtf8JsonSerializable, IJsonModel<ReservationBillingStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ReservationBillingStatus>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ReservationBillingStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ReservationBillingStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ReservationBillingStatus)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("timestamp"u8);
            writer.WriteStringValue(Timestamp);
            writer.WritePropertyName("totalUsedCapacityReported"u8);
            writer.WriteNumberValue(TotalUsedCapacityReported);
            writer.WritePropertyName("lowDrrPoolCount"u8);
            writer.WriteNumberValue(LowDrrPoolCount);
            writer.WritePropertyName("drrWeightedAverage"u8);
            writer.WriteNumberValue(DrrWeightedAverage);
            writer.WritePropertyName("totalNonReducibleReported"u8);
            writer.WriteNumberValue(TotalNonReducibleReported);
            writer.WritePropertyName("extraUsedCapacityNonReducible"u8);
            writer.WriteNumberValue(ExtraUsedCapacityNonReducible);
            writer.WritePropertyName("extraUsedCapacityLowUsageRounding"u8);
            writer.WriteNumberValue(ExtraUsedCapacityLowUsageRounding);
            writer.WritePropertyName("extraUsedCapacityNonReduciblePlanDiscount"u8);
            writer.WriteNumberValue(ExtraUsedCapacityNonReduciblePlanDiscount);
            writer.WritePropertyName("totalUsedCapacityBilled"u8);
            writer.WriteNumberValue(TotalUsedCapacityBilled);
            writer.WritePropertyName("totalUsedCapacityIncludedPlan"u8);
            writer.WriteNumberValue(TotalUsedCapacityIncludedPlan);
            writer.WritePropertyName("totalUsedCapacityOverage"u8);
            writer.WriteNumberValue(TotalUsedCapacityOverage);
            writer.WritePropertyName("totalPerformanceReported"u8);
            writer.WriteNumberValue(TotalPerformanceReported);
            writer.WritePropertyName("totalPerformanceIncludedPlan"u8);
            writer.WriteNumberValue(TotalPerformanceIncludedPlan);
            writer.WritePropertyName("totalPerformanceOverage"u8);
            writer.WriteNumberValue(TotalPerformanceOverage);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ReservationBillingStatus IJsonModel<ReservationBillingStatus>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ReservationBillingStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ReservationBillingStatus)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeReservationBillingStatus(document.RootElement, options);
        }

        internal static ReservationBillingStatus DeserializeReservationBillingStatus(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string timestamp = default;
            long totalUsedCapacityReported = default;
            int lowDrrPoolCount = default;
            double drrWeightedAverage = default;
            long totalNonReducibleReported = default;
            long extraUsedCapacityNonReducible = default;
            long extraUsedCapacityLowUsageRounding = default;
            long extraUsedCapacityNonReduciblePlanDiscount = default;
            long totalUsedCapacityBilled = default;
            long totalUsedCapacityIncludedPlan = default;
            long totalUsedCapacityOverage = default;
            long totalPerformanceReported = default;
            long totalPerformanceIncludedPlan = default;
            long totalPerformanceOverage = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalUsedCapacityReported"u8))
                {
                    totalUsedCapacityReported = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("lowDrrPoolCount"u8))
                {
                    lowDrrPoolCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("drrWeightedAverage"u8))
                {
                    drrWeightedAverage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("totalNonReducibleReported"u8))
                {
                    totalNonReducibleReported = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("extraUsedCapacityNonReducible"u8))
                {
                    extraUsedCapacityNonReducible = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("extraUsedCapacityLowUsageRounding"u8))
                {
                    extraUsedCapacityLowUsageRounding = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("extraUsedCapacityNonReduciblePlanDiscount"u8))
                {
                    extraUsedCapacityNonReduciblePlanDiscount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalUsedCapacityBilled"u8))
                {
                    totalUsedCapacityBilled = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalUsedCapacityIncludedPlan"u8))
                {
                    totalUsedCapacityIncludedPlan = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalUsedCapacityOverage"u8))
                {
                    totalUsedCapacityOverage = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalPerformanceReported"u8))
                {
                    totalPerformanceReported = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalPerformanceIncludedPlan"u8))
                {
                    totalPerformanceIncludedPlan = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalPerformanceOverage"u8))
                {
                    totalPerformanceOverage = property.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ReservationBillingStatus(
                timestamp,
                totalUsedCapacityReported,
                lowDrrPoolCount,
                drrWeightedAverage,
                totalNonReducibleReported,
                extraUsedCapacityNonReducible,
                extraUsedCapacityLowUsageRounding,
                extraUsedCapacityNonReduciblePlanDiscount,
                totalUsedCapacityBilled,
                totalUsedCapacityIncludedPlan,
                totalUsedCapacityOverage,
                totalPerformanceReported,
                totalPerformanceIncludedPlan,
                totalPerformanceOverage,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ReservationBillingStatus>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ReservationBillingStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerPureStorageBlockContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ReservationBillingStatus)} does not support writing '{options.Format}' format.");
            }
        }

        ReservationBillingStatus IPersistableModel<ReservationBillingStatus>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ReservationBillingStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeReservationBillingStatus(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ReservationBillingStatus)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ReservationBillingStatus>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
