// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    /// <summary> Severity level of the alert. </summary>
    public readonly partial struct PureStorageHealthAlertLevel : IEquatable<PureStorageHealthAlertLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PureStorageHealthAlertLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PureStorageHealthAlertLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InfoValue = "info";
        private const string WarningValue = "warning";
        private const string ErrorValue = "error";

        /// <summary> Information level. </summary>
        public static PureStorageHealthAlertLevel Info { get; } = new PureStorageHealthAlertLevel(InfoValue);
        /// <summary> Warning level. </summary>
        public static PureStorageHealthAlertLevel Warning { get; } = new PureStorageHealthAlertLevel(WarningValue);
        /// <summary> Error level. </summary>
        public static PureStorageHealthAlertLevel Error { get; } = new PureStorageHealthAlertLevel(ErrorValue);
        /// <summary> Determines if two <see cref="PureStorageHealthAlertLevel"/> values are the same. </summary>
        public static bool operator ==(PureStorageHealthAlertLevel left, PureStorageHealthAlertLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PureStorageHealthAlertLevel"/> values are not the same. </summary>
        public static bool operator !=(PureStorageHealthAlertLevel left, PureStorageHealthAlertLevel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PureStorageHealthAlertLevel"/>. </summary>
        public static implicit operator PureStorageHealthAlertLevel(string value) => new PureStorageHealthAlertLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PureStorageHealthAlertLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PureStorageHealthAlertLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
