// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.PureStorageBlock.Models
{
    /// <summary> Limits constraining certain resource properties. </summary>
    public partial class PureStorageResourceLimitDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PureStorageResourceLimitDetails"/>. </summary>
        /// <param name="storagePool"> Limits used for storage pool resources. </param>
        /// <param name="volume"> Limits used for volume resources. </param>
        /// <param name="protectionPolicy"> internal. </param>
        /// <param name="performancePolicy"> internal. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storagePool"/>, <paramref name="volume"/>, <paramref name="protectionPolicy"/> or <paramref name="performancePolicy"/> is null. </exception>
        internal PureStorageResourceLimitDetails(StoragePoolLimits storagePool, VolumeLimits volume, ProtectionPolicyLimits protectionPolicy, PerformancePolicyLimits performancePolicy)
        {
            Argument.AssertNotNull(storagePool, nameof(storagePool));
            Argument.AssertNotNull(volume, nameof(volume));
            Argument.AssertNotNull(protectionPolicy, nameof(protectionPolicy));
            Argument.AssertNotNull(performancePolicy, nameof(performancePolicy));

            StoragePool = storagePool;
            Volume = volume;
            ProtectionPolicy = protectionPolicy;
            PerformancePolicy = performancePolicy;
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageResourceLimitDetails"/>. </summary>
        /// <param name="storagePool"> Limits used for storage pool resources. </param>
        /// <param name="volume"> Limits used for volume resources. </param>
        /// <param name="protectionPolicy"> internal. </param>
        /// <param name="performancePolicy"> internal. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PureStorageResourceLimitDetails(StoragePoolLimits storagePool, VolumeLimits volume, ProtectionPolicyLimits protectionPolicy, PerformancePolicyLimits performancePolicy, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StoragePool = storagePool;
            Volume = volume;
            ProtectionPolicy = protectionPolicy;
            PerformancePolicy = performancePolicy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PureStorageResourceLimitDetails"/> for deserialization. </summary>
        internal PureStorageResourceLimitDetails()
        {
        }

        /// <summary> Limits used for storage pool resources. </summary>
        public StoragePoolLimits StoragePool { get; }
        /// <summary> Limits used for volume resources. </summary>
        internal VolumeLimits Volume { get; }
        /// <summary> Provisioned size limits for a volume, in bytes. </summary>
        public PropertyValueRangeLimits VolumeProvisionedSize
        {
            get => Volume?.ProvisionedSize;
        }

        /// <summary> internal. </summary>
        public ProtectionPolicyLimits ProtectionPolicy { get; }
        /// <summary> internal. </summary>
        public PerformancePolicyLimits PerformancePolicy { get; }
    }
}
