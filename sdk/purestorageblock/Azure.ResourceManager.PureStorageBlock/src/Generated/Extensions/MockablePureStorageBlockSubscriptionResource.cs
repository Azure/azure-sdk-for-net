// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.PureStorageBlock.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockablePureStorageBlockSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _pureStorageReservationReservationsClientDiagnostics;
        private ReservationsRestOperations _pureStorageReservationReservationsRestClient;
        private ClientDiagnostics _pureStoragePoolStoragePoolsClientDiagnostics;
        private StoragePoolsRestOperations _pureStoragePoolStoragePoolsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockablePureStorageBlockSubscriptionResource"/> class for mocking. </summary>
        protected MockablePureStorageBlockSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockablePureStorageBlockSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockablePureStorageBlockSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics PureStorageReservationReservationsClientDiagnostics => _pureStorageReservationReservationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.PureStorageBlock", PureStorageReservationResource.ResourceType.Namespace, Diagnostics);
        private ReservationsRestOperations PureStorageReservationReservationsRestClient => _pureStorageReservationReservationsRestClient ??= new ReservationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(PureStorageReservationResource.ResourceType));
        private ClientDiagnostics PureStoragePoolStoragePoolsClientDiagnostics => _pureStoragePoolStoragePoolsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.PureStorageBlock", PureStoragePoolResource.ResourceType.Namespace, Diagnostics);
        private StoragePoolsRestOperations PureStoragePoolStoragePoolsRestClient => _pureStoragePoolStoragePoolsRestClient ??= new StoragePoolsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(PureStoragePoolResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List reservations by Azure subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/PureStorage.Block/reservations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Reservation_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageReservationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PureStorageReservationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PureStorageReservationResource> GetPureStorageReservationsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PureStorageReservationReservationsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PureStorageReservationReservationsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PureStorageReservationResource(Client, PureStorageReservationData.DeserializePureStorageReservationData(e)), PureStorageReservationReservationsClientDiagnostics, Pipeline, "MockablePureStorageBlockSubscriptionResource.GetPureStorageReservations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List reservations by Azure subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/PureStorage.Block/reservations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Reservation_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageReservationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PureStorageReservationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PureStorageReservationResource> GetPureStorageReservations(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PureStorageReservationReservationsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PureStorageReservationReservationsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PureStorageReservationResource(Client, PureStorageReservationData.DeserializePureStorageReservationData(e)), PureStorageReservationReservationsClientDiagnostics, Pipeline, "MockablePureStorageBlockSubscriptionResource.GetPureStorageReservations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List storage pools by Azure subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/PureStorage.Block/storagePools</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StoragePool_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStoragePoolResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PureStoragePoolResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PureStoragePoolResource> GetPureStoragePoolsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PureStoragePoolStoragePoolsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PureStoragePoolStoragePoolsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PureStoragePoolResource(Client, PureStoragePoolData.DeserializePureStoragePoolData(e)), PureStoragePoolStoragePoolsClientDiagnostics, Pipeline, "MockablePureStorageBlockSubscriptionResource.GetPureStoragePools", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List storage pools by Azure subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/PureStorage.Block/storagePools</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StoragePool_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStoragePoolResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PureStoragePoolResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PureStoragePoolResource> GetPureStoragePools(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PureStoragePoolStoragePoolsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PureStoragePoolStoragePoolsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PureStoragePoolResource(Client, PureStoragePoolData.DeserializePureStoragePoolData(e)), PureStoragePoolStoragePoolsClientDiagnostics, Pipeline, "MockablePureStorageBlockSubscriptionResource.GetPureStoragePools", "value", "nextLink", cancellationToken);
        }
    }
}
