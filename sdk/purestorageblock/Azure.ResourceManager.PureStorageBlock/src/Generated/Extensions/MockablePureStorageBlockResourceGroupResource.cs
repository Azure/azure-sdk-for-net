// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.PureStorageBlock.Mocking
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    public partial class MockablePureStorageBlockResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockablePureStorageBlockResourceGroupResource"/> class for mocking. </summary>
        protected MockablePureStorageBlockResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockablePureStorageBlockResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockablePureStorageBlockResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of PureStorageReservationResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of PureStorageReservationResources and their operations over a PureStorageReservationResource. </returns>
        public virtual PureStorageReservationCollection GetPureStorageReservations()
        {
            return GetCachedClient(client => new PureStorageReservationCollection(client, Id));
        }

        /// <summary>
        /// Get a reservation
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/reservations/{reservationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Reservation_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageReservationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="reservationName"> Name of the reservation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reservationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="reservationName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PureStorageReservationResource>> GetPureStorageReservationAsync(string reservationName, CancellationToken cancellationToken = default)
        {
            return await GetPureStorageReservations().GetAsync(reservationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a reservation
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/reservations/{reservationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Reservation_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStorageReservationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="reservationName"> Name of the reservation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reservationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="reservationName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<PureStorageReservationResource> GetPureStorageReservation(string reservationName, CancellationToken cancellationToken = default)
        {
            return GetPureStorageReservations().Get(reservationName, cancellationToken);
        }

        /// <summary> Gets a collection of PureStoragePoolResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of PureStoragePoolResources and their operations over a PureStoragePoolResource. </returns>
        public virtual PureStoragePoolCollection GetPureStoragePools()
        {
            return GetCachedClient(client => new PureStoragePoolCollection(client, Id));
        }

        /// <summary>
        /// Get a storage pool
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StoragePool_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStoragePoolResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="storagePoolName"> Name of the storage pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storagePoolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="storagePoolName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PureStoragePoolResource>> GetPureStoragePoolAsync(string storagePoolName, CancellationToken cancellationToken = default)
        {
            return await GetPureStoragePools().GetAsync(storagePoolName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a storage pool
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StoragePool_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PureStoragePoolResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="storagePoolName"> Name of the storage pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storagePoolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="storagePoolName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<PureStoragePoolResource> GetPureStoragePool(string storagePoolName, CancellationToken cancellationToken = default)
        {
            return GetPureStoragePools().Get(storagePoolName, cancellationToken);
        }
    }
}
