// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.SameBoundary.Input
{
    // [Patch] Dictionary property does not have set currently, but we need a way to let customer delete it.
    // Solution 1: We allow `_dictionary = null;` by adding a set.
    // Solution 2: We interpret `_dictionary.Clear()` as delete operation.
    /// <summary> The InputDictionaryModel. </summary>
    public partial class InputDictionaryModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InputDictionaryModel"/>. </summary>
        /// <param name="requiredStringDictionary"></param>
        /// <param name="requiredIntDictionary"></param>
        /// <param name="requiredModelDictionary"></param>
        /// <param name="requiredDictionaryDictionary"></param>
        /// <param name="requiredArrayDictionary"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredStringDictionary"/>, <paramref name="requiredIntDictionary"/>, <paramref name="requiredModelDictionary"/>, <paramref name="requiredDictionaryDictionary"/> or <paramref name="requiredArrayDictionary"/> is null. </exception>
        public InputDictionaryModel(IDictionary<string, string> requiredStringDictionary, IDictionary<string, int?> requiredIntDictionary, IDictionary<string, InputDummy> requiredModelDictionary, IDictionary<string, IDictionary<string, InputDummy>> requiredDictionaryDictionary, IDictionary<string, IList<InputDummy>> requiredArrayDictionary)
        {
            Argument.AssertNotNull(requiredStringDictionary, nameof(requiredStringDictionary));
            Argument.AssertNotNull(requiredIntDictionary, nameof(requiredIntDictionary));
            Argument.AssertNotNull(requiredModelDictionary, nameof(requiredModelDictionary));
            Argument.AssertNotNull(requiredDictionaryDictionary, nameof(requiredDictionaryDictionary));
            Argument.AssertNotNull(requiredArrayDictionary, nameof(requiredArrayDictionary));

            _requiredStringDictionary = new ChangeTrackingDictionary<string, string>(requiredStringDictionary, true);
            _optionalStringDictionary = new ChangeTrackingDictionary<string, string>();
            _requiredIntDictionary = new ChangeTrackingDictionary<string, int?>(requiredIntDictionary, true);
            _optionalIntDictionary = new ChangeTrackingDictionary<string, int?>();
            _requiredModelDictionary = new ChangeTrackingDictionary<string, InputDummy>(requiredModelDictionary, true);
            _optionalModelDictionary = new ChangeTrackingDictionary<string, InputDummy>();
            // [Patch] The dictionary item in the dictionary should be a ChangeTrackingDictionary.
            _requiredDictionaryDictionary = new ChangeTrackingDictionary<string, IDictionary<string, InputDummy>>(
                requiredDictionaryDictionary.ToDictionary(item => item.Key, item => new ChangeTrackingDictionary<string, InputDummy>(item.Value, true) as IDictionary<string, InputDummy>) as IDictionary<string, IDictionary<string, InputDummy>>,
                true);
            _optionalDictionaryDictionary = new ChangeTrackingDictionary<string, IDictionary<string, InputDummy>>();
            // [Patch] The array item in the dictionary should be a ChangeTrackingList.
            _requiredArrayDictionary = new ChangeTrackingDictionary<string, IList<InputDummy>>(
                requiredArrayDictionary.ToDictionary(item => item.Key, item => new ChangeTrackingList<InputDummy>(item.Value, true) as IList<InputDummy>) as IDictionary<string, IList<InputDummy>>,
                true);
            _optionalArrayDictionary = new ChangeTrackingDictionary<string, IList<InputDummy>>();
        }

        /// <summary> Initializes a new instance of <see cref="InputDictionaryModel"/>. </summary>
        /// <param name="requiredStringDictionary"></param>
        /// <param name="optionalStringDictionary"></param>
        /// <param name="requiredIntDictionary"></param>
        /// <param name="optionalIntDictionary"></param>
        /// <param name="requiredModelDictionary"></param>
        /// <param name="optionalModelDictionary"></param>
        /// <param name="requiredDictionaryDictionary"></param>
        /// <param name="optionalDictionaryDictionary"></param>
        /// <param name="requiredArrayDictionary"></param>
        /// <param name="optionalArrayDictionary"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InputDictionaryModel(IDictionary<string, string> requiredStringDictionary, IDictionary<string, string> optionalStringDictionary, IDictionary<string, int?> requiredIntDictionary, IDictionary<string, int?> optionalIntDictionary, IDictionary<string, InputDummy> requiredModelDictionary, IDictionary<string, InputDummy> optionalModelDictionary, IDictionary<string, IDictionary<string, InputDummy>> requiredDictionaryDictionary, IDictionary<string, IDictionary<string, InputDummy>> optionalDictionaryDictionary, IDictionary<string, IList<InputDummy>> requiredArrayDictionary, IDictionary<string, IList<InputDummy>> optionalArrayDictionary, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _requiredStringDictionary = new ChangeTrackingDictionary<string, string>(requiredStringDictionary);
            _optionalStringDictionary = new ChangeTrackingDictionary<string, string>(optionalStringDictionary);
            _requiredIntDictionary = new ChangeTrackingDictionary<string, int?>(requiredIntDictionary);
            _optionalIntDictionary = new ChangeTrackingDictionary<string, int?>(optionalIntDictionary);
            _requiredModelDictionary = new ChangeTrackingDictionary<string, InputDummy>(requiredModelDictionary);
            _optionalModelDictionary = new ChangeTrackingDictionary<string, InputDummy>(optionalModelDictionary);
            // [Patch] Another solution is we put this into deserialization code
            _requiredDictionaryDictionary = new ChangeTrackingDictionary<string, IDictionary<string, InputDummy>>(
                requiredDictionaryDictionary.ToDictionary(item => item.Key, item => new ChangeTrackingDictionary<string, InputDummy>(item.Value) as IDictionary<string, InputDummy>) as IDictionary<string, IDictionary<string, InputDummy>>);
            _optionalDictionaryDictionary = new ChangeTrackingDictionary<string, IDictionary<string, InputDummy>>(
                optionalDictionaryDictionary.ToDictionary(item => item.Key, item => new ChangeTrackingDictionary<string, InputDummy>(item.Value) as IDictionary<string, InputDummy>) as IDictionary<string, IDictionary<string, InputDummy>>);
            _requiredArrayDictionary = new ChangeTrackingDictionary<string, IList<InputDummy>>(
                requiredArrayDictionary.ToDictionary(item => item.Key, item => new ChangeTrackingList<InputDummy>(item.Value, true) as IList<InputDummy>) as IDictionary<string, IList<InputDummy>>);
            _optionalArrayDictionary = new ChangeTrackingDictionary<string, IList<InputDummy>>(
                optionalArrayDictionary.ToDictionary(item => item.Key, item => new ChangeTrackingList<InputDummy>(item.Value, true) as IList<InputDummy>) as IDictionary<string, IList<InputDummy>>);
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InputDictionaryModel"/> for deserialization. </summary>
        internal InputDictionaryModel()
        {
        }

        // [Patch] I add backing field here for the scenario of `ModelReaderWriter.Read()`
        private ChangeTrackingDictionary<string, string> _requiredStringDictionary;
        /// <summary> Gets the required string dictionary. </summary>
        public IDictionary<string, string> RequiredStringDictionary => _requiredStringDictionary;

        private ChangeTrackingDictionary<string, string> _optionalStringDictionary;
        /// <summary> Gets the optional string dictionary. </summary>
        public IDictionary<string, string> OptionalStringDictionary => _optionalStringDictionary;

        // [Patch] The spec of this property is `Record<int>`. For a normal model, we will generate type `IDictionary<string, int>`.
        // However, here the type is `IDictionary<string, int?>`, because we should allow user to delete a key.
        private ChangeTrackingDictionary<string, int?> _requiredIntDictionary;
        /// <summary> Gets the required int dictionary. </summary>
        public IDictionary<string, int?> RequiredIntDictionary => _requiredIntDictionary;

        private ChangeTrackingDictionary<string, int?> _optionalIntDictionary;
        /// <summary> Gets the optional int dictionary. </summary>
        public IDictionary<string, int?> OptionalIntDictionary => _optionalIntDictionary;

        private ChangeTrackingDictionary<string, InputDummy> _requiredModelDictionary;
        /// <summary> Gets the required model dictionary. </summary>
        public IDictionary<string, InputDummy> RequiredModelDictionary => _requiredModelDictionary;

        private ChangeTrackingDictionary<string, InputDummy> _optionalModelDictionary;
        /// <summary> Gets the optional model dictionary. </summary>
        public IDictionary<string, InputDummy> OptionalModelDictionary => _optionalModelDictionary;

        private ChangeTrackingDictionary<string, IDictionary<string, InputDummy>> _requiredDictionaryDictionary;
        /// <summary> Gets the required dictionary dictionary. </summary>
        public IDictionary<string, IDictionary<string, InputDummy>> RequiredDictionaryDictionary => _requiredDictionaryDictionary;

        private ChangeTrackingDictionary<string, IDictionary<string, InputDummy>> _optionalDictionaryDictionary;
        /// <summary> Gets the optional dictionary dictionary. </summary>
        public IDictionary<string, IDictionary<string, InputDummy>> OptionalDictionaryDictionary => _optionalDictionaryDictionary;

        private ChangeTrackingDictionary<string, IList<InputDummy>> _requiredArrayDictionary;
        /// <summary> Gets the required array dictionary. </summary>
        public IDictionary<string, IList<InputDummy>> RequiredArrayDictionary => _requiredArrayDictionary;

        private ChangeTrackingDictionary<string, IList<InputDummy>> _optionalArrayDictionary;
        /// <summary> Gets the optional array dictionary. </summary>
        public IDictionary<string, IList<InputDummy>> OptionalArrayDictionary => _optionalArrayDictionary;
    }
}
