// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Azure.SameBoundary.Input
{
    /// <summary> Model factory for models. </summary>
    public static partial class SameBoundaryInputModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Input.InputPrimitiveModel"/>. </summary>
        /// <param name="requiredString"></param>
        /// <param name="optionalString"></param>
        /// <param name="requiredInt"></param>
        /// <param name="optionalInt"></param>
        /// <returns> A new <see cref="Input.InputPrimitiveModel"/> instance for mocking. </returns>
        public static InputPrimitiveModel InputPrimitiveModel(string requiredString = null, string optionalString = null, int requiredInt = default, int? optionalInt = null)
        {
            return new InputPrimitiveModel(requiredString, optionalString, requiredInt, optionalInt, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Input.InputBaseModel"/>. </summary>
        /// <param name="baseProperty1"></param>
        /// <param name="baseProperty2"></param>
        /// <param name="baseProperty3"></param>
        /// <returns> A new <see cref="Input.InputBaseModel"/> instance for mocking. </returns>
        public static InputBaseModel InputBaseModel(string baseProperty1 = null, int baseProperty2 = default, IDictionary<string, string> baseProperty3 = null)
        {
            baseProperty3 ??= new Dictionary<string, string>();

            return new InputBaseModel(baseProperty1, baseProperty2, baseProperty3, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Input.InputInheritanceModel"/>. </summary>
        /// <param name="baseProperty1"></param>
        /// <param name="baseProperty2"></param>
        /// <param name="baseProperty3"></param>
        /// <param name="extendedProperty"></param>
        /// <returns> A new <see cref="Input.InputInheritanceModel"/> instance for mocking. </returns>
        public static InputInheritanceModel InputInheritanceModel(string baseProperty1 = null, int baseProperty2 = default, IDictionary<string, string> baseProperty3 = null, string extendedProperty = null)
        {
            baseProperty3 ??= new Dictionary<string, string>();

            return new InputInheritanceModel(baseProperty1, baseProperty2, baseProperty3, serializedAdditionalRawData: null, extendedProperty);
        }

        /// <summary> Initializes a new instance of <see cref="Input.InputAddAnotherLevelToInheritanceModel"/>. </summary>
        /// <param name="baseProperty1"></param>
        /// <param name="baseProperty2"></param>
        /// <param name="baseProperty3"></param>
        /// <param name="extendedProperty"></param>
        /// <param name="anotherLevelProperty"></param>
        /// <returns> A new <see cref="Input.InputAddAnotherLevelToInheritanceModel"/> instance for mocking. </returns>
        public static InputAddAnotherLevelToInheritanceModel InputAddAnotherLevelToInheritanceModel(string baseProperty1 = null, int baseProperty2 = default, IDictionary<string, string> baseProperty3 = null, string extendedProperty = null, string anotherLevelProperty = null)
        {
            baseProperty3 ??= new Dictionary<string, string>();

            return new InputAddAnotherLevelToInheritanceModel(
                baseProperty1,
                baseProperty2,
                baseProperty3,
                serializedAdditionalRawData: null,
                extendedProperty,
                anotherLevelProperty);
        }

        /// <summary> Initializes a new instance of <see cref="Input.InputNestedModel"/>. </summary>
        /// <param name="requiredModel"></param>
        /// <param name="optionalModel"></param>
        /// <returns> A new <see cref="Input.InputNestedModel"/> instance for mocking. </returns>
        public static InputNestedModel InputNestedModel(InputDummy requiredModel = null, InputDummy optionalModel = null)
        {
            return new InputNestedModel(requiredModel, optionalModel, serializedAdditionalRawData: null);
        }
    }
}
