// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.SameBoundary.Input
{
    /// <summary> The InputArrayModel. </summary>
    public partial class InputArrayModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InputArrayModel"/>. </summary>
        /// <param name="requiredStringArray"></param>
        /// <param name="requiredIntArray"></param>
        /// <param name="requiredModelArray"></param>
        /// <param name="requiredArrayArray"></param>
        /// <param name="requiredDictionaryArray"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredStringArray"/>, <paramref name="requiredIntArray"/>, <paramref name="requiredModelArray"/>, <paramref name="requiredArrayArray"/> or <paramref name="requiredDictionaryArray"/> is null. </exception>
        public InputArrayModel(IEnumerable<string> requiredStringArray, IEnumerable<int> requiredIntArray, IEnumerable<InputDummy> requiredModelArray, IEnumerable<IList<InputDummy>> requiredArrayArray, IEnumerable<IDictionary<string, InputDummy>> requiredDictionaryArray)
        {
            Argument.AssertNotNull(requiredStringArray, nameof(requiredStringArray));
            Argument.AssertNotNull(requiredIntArray, nameof(requiredIntArray));
            Argument.AssertNotNull(requiredModelArray, nameof(requiredModelArray));
            Argument.AssertNotNull(requiredArrayArray, nameof(requiredArrayArray));
            Argument.AssertNotNull(requiredDictionaryArray, nameof(requiredDictionaryArray));

            RequiredStringArray = requiredStringArray.ToList();
            OptionalStringArray = new ChangeTrackingList<string>();
            RequiredIntArray = requiredIntArray.ToList();
            OptionalIntArray = new ChangeTrackingList<int>();
            RequiredModelArray = requiredModelArray.ToList();
            OptionalModelArray = new ChangeTrackingList<InputDummy>();
            RequiredArrayArray = requiredArrayArray.ToList();
            OptionalArrayArray = new ChangeTrackingList<IList<InputDummy>>();
            RequiredDictionaryArray = requiredDictionaryArray.ToList();
            OptionalDictionaryArray = new ChangeTrackingList<IDictionary<string, InputDummy>>();
        }

        /// <summary> Initializes a new instance of <see cref="InputArrayModel"/>. </summary>
        /// <param name="requiredStringArray"></param>
        /// <param name="optionalStringArray"></param>
        /// <param name="requiredIntArray"></param>
        /// <param name="optionalIntArray"></param>
        /// <param name="requiredModelArray"></param>
        /// <param name="optionalModelArray"></param>
        /// <param name="requiredArrayArray"></param>
        /// <param name="optionalArrayArray"></param>
        /// <param name="requiredDictionaryArray"></param>
        /// <param name="optionalDictionaryArray"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InputArrayModel(IList<string> requiredStringArray, IList<string> optionalStringArray, IList<int> requiredIntArray, IList<int> optionalIntArray, IList<InputDummy> requiredModelArray, IList<InputDummy> optionalModelArray, IList<IList<InputDummy>> requiredArrayArray, IList<IList<InputDummy>> optionalArrayArray, IList<IDictionary<string, InputDummy>> requiredDictionaryArray, IList<IDictionary<string, InputDummy>> optionalDictionaryArray, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RequiredStringArray = requiredStringArray;
            OptionalStringArray = optionalStringArray;
            RequiredIntArray = requiredIntArray;
            OptionalIntArray = optionalIntArray;
            RequiredModelArray = requiredModelArray;
            OptionalModelArray = optionalModelArray;
            RequiredArrayArray = requiredArrayArray;
            OptionalArrayArray = optionalArrayArray;
            RequiredDictionaryArray = requiredDictionaryArray;
            OptionalDictionaryArray = optionalDictionaryArray;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InputArrayModel"/> for deserialization. </summary>
        internal InputArrayModel()
        {
        }

        /// <summary> Gets the required string array. </summary>
        public IList<string> RequiredStringArray { get; }
        /// <summary> Gets the optional string array. </summary>
        public IList<string> OptionalStringArray { get; }
        /// <summary> Gets the required int array. </summary>
        public IList<int> RequiredIntArray { get; }
        /// <summary> Gets the optional int array. </summary>
        public IList<int> OptionalIntArray { get; }
        /// <summary> Gets the required model array. </summary>
        public IList<InputDummy> RequiredModelArray { get; }
        /// <summary> Gets the optional model array. </summary>
        public IList<InputDummy> OptionalModelArray { get; }
        /// <summary> Gets the required array array. </summary>
        public IList<IList<InputDummy>> RequiredArrayArray { get; }
        /// <summary> Gets the optional array array. </summary>
        public IList<IList<InputDummy>> OptionalArrayArray { get; }
        /// <summary> Gets the required dictionary array. </summary>
        public IList<IDictionary<string, InputDummy>> RequiredDictionaryArray { get; }
        /// <summary> Gets the optional dictionary array. </summary>
        public IList<IDictionary<string, InputDummy>> OptionalDictionaryArray { get; }
    }
}
