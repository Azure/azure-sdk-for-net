// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SameBoundary.Input
{
    /// <summary> The InputInheritanceModel. </summary>
    public partial class InputInheritanceModel : InputBaseModel
    {
        /// <summary> Initializes a new instance of <see cref="InputInheritanceModel"/>. </summary>
        /// <param name="baseProperty2"></param>
        public InputInheritanceModel(int baseProperty2) : base(baseProperty2)
        {
        }

        /// <summary> Initializes a new instance of <see cref="InputInheritanceModel"/>. </summary>
        /// <param name="baseProperty1"></param>
        /// <param name="baseProperty2"></param>
        /// <param name="baseProperty3"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="extendedProperty"></param>
        internal InputInheritanceModel(string baseProperty1, int baseProperty2, IDictionary<string, string> baseProperty3, IDictionary<string, BinaryData> serializedAdditionalRawData, string extendedProperty) : base(baseProperty1, baseProperty2, baseProperty3, serializedAdditionalRawData)
        {
            _extendedProperty = extendedProperty;
        }

        /// <summary> Initializes a new instance of <see cref="InputInheritanceModel"/> for deserialization. </summary>
        internal InputInheritanceModel()
        {
        }

        private string _extendedProperty;
        private bool _extendedPrpertyChanged = false;
        /// <summary> Gets or sets the extended property. </summary>
        public string ExtendedProperty
        {
            get => _extendedProperty;
            set
            {
                _extendedProperty = value;
                _extendedPrpertyChanged = true;
                _isChanged = true;
            }
        }

        private bool _isChanged = false;
        internal override bool IsChanged(string name = null)
        {
            if (name == null)
            {
                return _isChanged || base.IsChanged();
            }

            switch (name)
            {
                case "ExtendedProperty":
                    return _extendedPrpertyChanged;
                default:
                    return base.IsChanged(name);
            }
        }
    }
}
