// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SameBoundary.Input
{
    /// <summary> The InputPrimitiveModel. </summary>
    public partial class InputPrimitiveModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InputPrimitiveModel"/>. </summary>
        /// <param name="requiredString"></param>
        /// <param name="requiredInt"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredString"/> is null. </exception>
        public InputPrimitiveModel(string requiredString, int requiredInt)
        {
            Argument.AssertNotNull(requiredString, nameof(requiredString));

            RequiredString = requiredString;
            RequiredInt = requiredInt;
        }

        /// <summary> Initializes a new instance of <see cref="InputPrimitiveModel"/>. </summary>
        /// <param name="requiredString"></param>
        /// <param name="optionalString"></param>
        /// <param name="requiredInt"></param>
        /// <param name="optionalInt"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InputPrimitiveModel(string requiredString, string optionalString, int requiredInt, int? optionalInt, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RequiredString = requiredString;
            OptionalString = optionalString;
            RequiredInt = requiredInt;
            OptionalInt = optionalInt;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InputPrimitiveModel"/> for deserialization. </summary>
        internal InputPrimitiveModel()
        {
        }

        private string _requiredString;
        private bool _requiredStringChanged = false;
        /// <summary> Gets the required string. </summary>
        public string RequiredString
        {
            get => _requiredString;
            private set
            {
                _requiredString = value;
                _requiredStringChanged = true;
            }
        }

        private string _optionalString;
        private bool _optionalStringChanged = false;
        /// <summary> Gets or sets the optional string. </summary>
        public string OptionalString
        {
            get => _optionalString;
            set
            {
                _optionalString = value;
                _optionalStringChanged = true;
            }
        }

        private int _requiredInt;
        private bool _requiredIntChanged = false;
        /// <summary> Gets the required int. </summary>
        public int RequiredInt
        {
            get => _requiredInt;
            private set
            {
                _requiredInt = value;
                _requiredIntChanged = true;
            }
        }

        private int? _optionalInt;
        private bool _optionalIntChanged = false;
        /// <summary> Gets or sets the optional int. </summary>
        public int? OptionalInt
        {
            get => _optionalInt;
            set
            {
                _optionalInt = value;
                _optionalIntChanged = true;
            }
        }
    }
}
