// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;

namespace Azure.CrossBoundary.RoundTrip
{
    internal class ChangeTrackingDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue> where TKey : notnull
    {
        private IDictionary<TKey, TValue> _innerDictionary;
        private List<TKey> _changedKeys;
        // [Patch] If we choose `_dictionary.Clear()` as delete operation, we need this flag, otherwise we don't need it.
        private bool _wasCleared = false;

        public ChangeTrackingDictionary()
        {
        }

        public ChangeTrackingDictionary(IDictionary<TKey, TValue> dictionary, bool asChanged = false)
        {
            if (dictionary == null)
            {
                return;
            }
            _innerDictionary = new Dictionary<TKey, TValue>(dictionary);

            if (asChanged)
            {
                EnsureChangedKeys().AddRange(dictionary.Keys);
            }
        }

        public ChangeTrackingDictionary(IReadOnlyDictionary<TKey, TValue> dictionary, bool asChanged = false)
        {
            if (dictionary == null)
            {
                return;
            }
            _innerDictionary = new Dictionary<TKey, TValue>();
            foreach (var pair in dictionary)
            {
                _innerDictionary.Add(pair);
            }

            if (asChanged)
            {
                EnsureChangedKeys().AddRange(dictionary.Keys);
            }
        }

        public IReadOnlyList<TKey> ChangedKeys => _changedKeys;

        // [Patch] These two methods are consistent with `IsChanged(TKey key = null)`
        public bool IsKeyChanged(TKey key)
        {
            return EnsureChangedKeys().Contains(key);
        }
        public bool IsChanged => _changedKeys?.Count > 0;

        // [Patch] If we choose `_dictionary.Clear()` as delete operation, we need this method, otherwise we don't need it.
        public bool WasCleared()
        {
            return _wasCleared && Count == 0; // Consider this case: call `Clear()` first and then call `Add()`
        }

        public bool IsUndefined => _innerDictionary == null;

        public int Count => IsUndefined ? 0 : EnsureDictionary().Count;

        public bool IsReadOnly => IsUndefined ? false : EnsureDictionary().IsReadOnly;

        public ICollection<TKey> Keys => IsUndefined ? Array.Empty<TKey>() : EnsureDictionary().Keys;

        public ICollection<TValue> Values => IsUndefined ? Array.Empty<TValue>() : EnsureDictionary().Values;

        public TValue this[TKey key]
        {
            get
            {
                if (IsUndefined)
                {
                    throw new KeyNotFoundException(nameof(key));
                }
                return EnsureDictionary()[key];
            }
            set
            {
                EnsureDictionary()[key] = value;
                AddChangedKey(key);
            }
        }

        IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys => Keys;

        IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values => Values;

        public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
        {
            if (IsUndefined)
            {
                IEnumerator<KeyValuePair<TKey, TValue>> enumerateEmpty()
                {
                    yield break;
                }
                return enumerateEmpty();
            }
            return EnsureDictionary().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Add(KeyValuePair<TKey, TValue> item)
        {
            EnsureDictionary().Add(item);
            AddChangedKey(item.Key);
        }

        public void Clear()
        {
            EnsureDictionary().Clear();
            _wasCleared = true;
            _changedKeys = null;
        }

        public bool Contains(KeyValuePair<TKey, TValue> item)
        {
            if (IsUndefined)
            {
                return false;
            }
            return EnsureDictionary().Contains(item);
        }

        public void CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
        {
            if (IsUndefined)
            {
                return;
            }
            EnsureDictionary().CopyTo(array, index);
        }

        public bool Remove(KeyValuePair<TKey, TValue> item)
        {
            if (IsUndefined)
            {
                return false;
            }
            if (EnsureDictionary().Remove(item))
            {
                AddChangedKey(item.Key);
                return true;
            }
            return false;
        }

        public void Add(TKey key, TValue value)
        {
            EnsureDictionary().Add(key, value);
            AddChangedKey(key);
        }

        public bool ContainsKey(TKey key)
        {
            if (IsUndefined)
            {
                return false;
            }
            return EnsureDictionary().ContainsKey(key);
        }

        public bool Remove(TKey key)
        {
            if (IsUndefined)
            {
                return false;
            }
            if (EnsureDictionary().Remove(key))
            {
                AddChangedKey(key);
                return true;
            }
            return false;
        }

        public bool TryGetValue(TKey key, out TValue value)
        {
            if (IsUndefined)
            {
                value = default;
                return false;
            }
            return EnsureDictionary().TryGetValue(key, out value);
        }

        public IDictionary<TKey, TValue> EnsureDictionary()
        {
            return _innerDictionary ??= new Dictionary<TKey, TValue>();
        }

        private List<TKey> EnsureChangedKeys()
        {
            return _changedKeys ??= new List<TKey>();
        }

        private void AddChangedKey(TKey key)
        {
            if (!EnsureChangedKeys().Contains(key))
            {
                EnsureChangedKeys().Add(key);
            }
        }
    }
}
