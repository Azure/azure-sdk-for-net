// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.CrossBoundary.RoundTrip
{
    /// <summary> The RoundTripInheritanceModel. </summary>
    public partial class RoundTripInheritanceModel : Azure.SameBoundary.RoundTrip.RoundTripBaseModel
    {
        // [Patch] AddtionalRawData is going to be changed, so this is just a palceholder to make compilation pass. We are not discussing addtional properties here.
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RoundTripInheritanceModel"/>. </summary>
        /// <param name="baseProperty2"></param>
        public RoundTripInheritanceModel(int baseProperty2) : base(baseProperty2)
        {
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripInheritanceModel"/>. </summary>
        /// <param name="baseProperty1"></param>
        /// <param name="baseProperty2"></param>
        /// <param name="baseProperty3"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="extendedProperty"></param>
        internal RoundTripInheritanceModel(string baseProperty1, int baseProperty2, IDictionary<string, string> baseProperty3, IDictionary<string, BinaryData> serializedAdditionalRawData, string extendedProperty) : base(baseProperty1, baseProperty2, baseProperty3, null)
        {
            _extendedProperty = extendedProperty;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripInheritanceModel"/> for deserialization. </summary>
        internal RoundTripInheritanceModel()
        {
        }

        private string _extendedProperty;
        private bool _extendedPrpertyChanged = false;
        /// <summary> Gets or sets the extended property. </summary>
        public string ExtendedProperty
        {
            get => _extendedProperty;
            set
            {
                _extendedProperty = value;
                _extendedPrpertyChanged = true;
                _isChanged = true;
            }
        }

        private bool _isChanged = false;
        /// <summary> Placeholder. </summary>
        public override bool IsChanged => _isChanged || base.IsChanged;

        /// <summary> Placeholder. </summary>
        protected override bool IsPropertyChanged(string name)
        {
            switch (name)
            {
                case nameof(ExtendedProperty):
                    return _extendedPrpertyChanged;
                default:
                    return base.IsPropertyChanged(name);
            }
        }
    }
}
