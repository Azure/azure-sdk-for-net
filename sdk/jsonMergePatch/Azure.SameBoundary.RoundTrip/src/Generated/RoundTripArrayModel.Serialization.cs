// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using Azure.Core;

namespace Azure.SameBoundary.RoundTrip
{
    public partial class RoundTripArrayModel : IUtf8JsonSerializable, IJsonModel<RoundTripArrayModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RoundTripArrayModel>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RoundTripArrayModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" || options.Format == "JMP" ? ((IPersistableModel<RoundTripArrayModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RoundTripArrayModel)} does not support writing '{format}' format.");
            }

            if (options.Format == "W")
            {
                WriteJson(writer, options);
            }
            else if (options.Format == "JMP")
            {
                WritePatch(writer);
            }
        }

        private void WritePatch(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            ModelSerializationExtensions.WritePatchList(writer, "requiredStringArray"u8, RequiredStringArray, (item) => writer.WriteStringValue(item));
            ModelSerializationExtensions.WritePatchList(writer, "optionalStringArray"u8, OptionalStringArray, (item) => writer.WriteStringValue(item));
            ModelSerializationExtensions.WritePatchList(writer, "requiredIntArray"u8, RequiredIntArray, (item) => writer.WriteNumberValue(item));
            ModelSerializationExtensions.WritePatchList(writer, "optionalIntArray"u8, OptionalIntArray, (item) => writer.WriteNumberValue(item));
            ModelSerializationExtensions.WritePatchList(writer, "requiredModelArray"u8, RequiredModelArray,
                (item) => ((IJsonModel<RoundTripDummy>)item).Write(writer, new ModelReaderWriterOptions("W")), // [Patch] The format is "W"
                (item) => item?.IsChanged == true);
            ModelSerializationExtensions.WritePatchList(writer, "optionalModelArray"u8, OptionalModelArray,
                (item) => ((IJsonModel<RoundTripDummy>)item).Write(writer, new ModelReaderWriterOptions("W")), // [Patch] The format is "W"
                (item) => item?.IsChanged == true);
            ModelSerializationExtensions.WritePatchList(writer, "requiredArrayArray"u8, RequiredArrayArray,
                (item) =>
                {
                    writer.WriteStartArray();
                    foreach (var item0 in item)
                    {
                        if (item0 == null)
                        {
                            writer.WriteNullValue();
                        }
                        else
                        {
                            ((IJsonModel<RoundTripDummy>)item0).Write(writer, new ModelReaderWriterOptions("W"));
                        }
                    }
                    writer.WriteEndArray();
                },
                (item) => item is not ChangeTrackingList<RoundTripDummy> || (item is ChangeTrackingList<RoundTripDummy> trackingItem && (trackingItem.IsChanged || item.Any(item => item?.IsChanged == true))));
            ModelSerializationExtensions.WritePatchList(writer, "optionalArrayArray"u8, OptionalArrayArray,
                (item) =>
                {
                    writer.WriteStartArray();
                    foreach (var item0 in item)
                    {
                        if (item0 == null)
                        {
                            writer.WriteNullValue();
                        }
                        else
                        {
                            ((IJsonModel<RoundTripDummy>)item0).Write(writer, new ModelReaderWriterOptions("W"));
                        }
                    }
                    writer.WriteEndArray();
                },
                (item) => item is not ChangeTrackingList<RoundTripDummy> || (item is ChangeTrackingList<RoundTripDummy> trackingItem && (trackingItem.IsChanged || item.Any(item => item?.IsChanged == true))));
            ModelSerializationExtensions.WritePatchList(writer, "requiredDictionaryArray"u8, RequiredDictionaryArray,
                (item) =>
                {
                    writer.WriteStartObject();
                    foreach (var item0 in item)
                    {
                        writer.WritePropertyName(item0.Key);
                        if (item0.Value == null)
                        {
                            writer.WriteNullValue();
                        }
                        else
                        {
                            ((IJsonModel<RoundTripDummy>)item0.Value).Write(writer, new ModelReaderWriterOptions("W"));
                        }
                    }
                    writer.WriteEndObject();
                },
                (item) => item is not ChangeTrackingDictionary<string, RoundTripDummy> || (item is ChangeTrackingDictionary<string, RoundTripDummy> trackingItem && (trackingItem.IsChanged || item.Any(item => item.Value?.IsChanged == true))));
            ModelSerializationExtensions.WritePatchList(writer, "optionalDictionaryArray"u8, OptionalDictionaryArray,
                (item) =>
                {
                    writer.WriteStartObject();
                    foreach (var item0 in item)
                    {
                        writer.WritePropertyName(item0.Key);
                        if (item0.Value == null)
                        {
                            writer.WriteNullValue();
                        }
                        else
                        {
                            ((IJsonModel<RoundTripDummy>)item0.Value).Write(writer, new ModelReaderWriterOptions("W"));
                        }
                    }
                    writer.WriteEndObject();
                },
                (item) => item is not ChangeTrackingDictionary<string, RoundTripDummy> || (item is ChangeTrackingDictionary<string, RoundTripDummy> trackingItem && (trackingItem.IsChanged || item.Any(item => item.Value?.IsChanged == true))));

            writer.WriteEndObject();
        }

        private void WriteJson(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requiredStringArray"u8);
            writer.WriteStartArray();
            foreach (var item in RequiredStringArray)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(OptionalStringArray))
            {
                writer.WritePropertyName("optionalStringArray"u8);
                writer.WriteStartArray();
                foreach (var item in OptionalStringArray)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("requiredIntArray"u8);
            writer.WriteStartArray();
            foreach (var item in RequiredIntArray)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(OptionalIntArray))
            {
                writer.WritePropertyName("optionalIntArray"u8);
                writer.WriteStartArray();
                foreach (var item in OptionalIntArray)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("requiredModelArray"u8);
            writer.WriteStartArray();
            foreach (var item in RequiredModelArray)
            {
                writer.WriteObjectValue<RoundTripDummy>(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(OptionalModelArray))
            {
                writer.WritePropertyName("optionalModelArray"u8);
                writer.WriteStartArray();
                foreach (var item in OptionalModelArray)
                {
                    writer.WriteObjectValue<RoundTripDummy>(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("requiredArrayArray"u8);
            writer.WriteStartArray();
            foreach (var item in RequiredArrayArray)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartArray();
                foreach (var item0 in item)
                {
                    writer.WriteObjectValue<RoundTripDummy>(item0, options);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(OptionalArrayArray))
            {
                writer.WritePropertyName("optionalArrayArray"u8);
                writer.WriteStartArray();
                foreach (var item in OptionalArrayArray)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartArray();
                    foreach (var item0 in item)
                    {
                        writer.WriteObjectValue<RoundTripDummy>(item0, options);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("requiredDictionaryArray"u8);
            writer.WriteStartArray();
            foreach (var item in RequiredDictionaryArray)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartObject();
                foreach (var item0 in item)
                {
                    writer.WritePropertyName(item0.Key);
                    writer.WriteObjectValue<RoundTripDummy>(item0.Value, options);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(OptionalDictionaryArray))
            {
                writer.WritePropertyName("optionalDictionaryArray"u8);
                writer.WriteStartArray();
                foreach (var item in OptionalDictionaryArray)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartObject();
                    foreach (var item0 in item)
                    {
                        writer.WritePropertyName(item0.Key);
                        writer.WriteObjectValue<RoundTripDummy>(item0.Value, options);
                    }
                    writer.WriteEndObject();
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RoundTripArrayModel IJsonModel<RoundTripArrayModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoundTripArrayModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RoundTripArrayModel)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRoundTripArrayModel(document.RootElement, options);
        }

        internal static RoundTripArrayModel DeserializeRoundTripArrayModel(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<string> requiredStringArray = default;
            IList<string> optionalStringArray = default;
            IList<int> requiredIntArray = default;
            IList<int> optionalIntArray = default;
            IList<RoundTripDummy> requiredModelArray = default;
            IList<RoundTripDummy> optionalModelArray = default;
            IList<IList<RoundTripDummy>> requiredArrayArray = default;
            IList<IList<RoundTripDummy>> optionalArrayArray = default;
            IList<IDictionary<string, RoundTripDummy>> requiredDictionaryArray = default;
            IList<IDictionary<string, RoundTripDummy>> optionalDictionaryArray = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requiredStringArray"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    requiredStringArray = array;
                    continue;
                }
                if (property.NameEquals("optionalStringArray"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    optionalStringArray = array;
                    continue;
                }
                if (property.NameEquals("requiredIntArray"u8))
                {
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    requiredIntArray = array;
                    continue;
                }
                if (property.NameEquals("optionalIntArray"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    optionalIntArray = array;
                    continue;
                }
                if (property.NameEquals("requiredModelArray"u8))
                {
                    List<RoundTripDummy> array = new List<RoundTripDummy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoundTripDummy.DeserializeRoundTripDummy(item, options));
                    }
                    requiredModelArray = array;
                    continue;
                }
                if (property.NameEquals("optionalModelArray"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RoundTripDummy> array = new List<RoundTripDummy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoundTripDummy.DeserializeRoundTripDummy(item, options));
                    }
                    optionalModelArray = array;
                    continue;
                }
                if (property.NameEquals("requiredArrayArray"u8))
                {
                    List<IList<RoundTripDummy>> array = new List<IList<RoundTripDummy>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<RoundTripDummy> array0 = new List<RoundTripDummy>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array0.Add(RoundTripDummy.DeserializeRoundTripDummy(item0, options));
                            }
                            array.Add(array0);
                        }
                    }
                    requiredArrayArray = array;
                    continue;
                }
                if (property.NameEquals("optionalArrayArray"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IList<RoundTripDummy>> array = new List<IList<RoundTripDummy>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<RoundTripDummy> array0 = new List<RoundTripDummy>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array0.Add(RoundTripDummy.DeserializeRoundTripDummy(item0, options));
                            }
                            array.Add(array0);
                        }
                    }
                    optionalArrayArray = array;
                    continue;
                }
                if (property.NameEquals("requiredDictionaryArray"u8))
                {
                    List<IDictionary<string, RoundTripDummy>> array = new List<IDictionary<string, RoundTripDummy>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            Dictionary<string, RoundTripDummy> dictionary = new Dictionary<string, RoundTripDummy>();
                            foreach (var property0 in item.EnumerateObject())
                            {
                                dictionary.Add(property0.Name, RoundTripDummy.DeserializeRoundTripDummy(property0.Value, options));
                            }
                            array.Add(dictionary);
                        }
                    }
                    requiredDictionaryArray = array;
                    continue;
                }
                if (property.NameEquals("optionalDictionaryArray"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IDictionary<string, RoundTripDummy>> array = new List<IDictionary<string, RoundTripDummy>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            Dictionary<string, RoundTripDummy> dictionary = new Dictionary<string, RoundTripDummy>();
                            foreach (var property0 in item.EnumerateObject())
                            {
                                dictionary.Add(property0.Name, RoundTripDummy.DeserializeRoundTripDummy(property0.Value, options));
                            }
                            array.Add(dictionary);
                        }
                    }
                    optionalDictionaryArray = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RoundTripArrayModel(
                requiredStringArray,
                optionalStringArray ?? new ChangeTrackingList<string>(),
                requiredIntArray,
                optionalIntArray ?? new ChangeTrackingList<int>(),
                requiredModelArray,
                optionalModelArray ?? new ChangeTrackingList<RoundTripDummy>(),
                requiredArrayArray,
                optionalArrayArray ?? new ChangeTrackingList<IList<RoundTripDummy>>(),
                requiredDictionaryArray,
                optionalDictionaryArray ?? new ChangeTrackingList<IDictionary<string, RoundTripDummy>>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RoundTripArrayModel>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoundTripArrayModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(RoundTripArrayModel)} does not support writing '{options.Format}' format.");
            }
        }

        RoundTripArrayModel IPersistableModel<RoundTripArrayModel>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoundTripArrayModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRoundTripArrayModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RoundTripArrayModel)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RoundTripArrayModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static RoundTripArrayModel FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeRoundTripArrayModel(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue<RoundTripArrayModel>(this, new ModelReaderWriterOptions("W"));
            return content;
        }
    }
}
