// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SameBoundary.RoundTrip
{
    /// <summary> The RoundTripDictionaryModel. </summary>
    public partial class RoundTripDictionaryModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RoundTripDictionaryModel"/>. </summary>
        /// <param name="requiredStringDictionary"></param>
        /// <param name="requiredIntDictionary"></param>
        /// <param name="requiredModelDictionary"></param>
        /// <param name="requiredDictionaryDictionary"></param>
        /// <param name="requiredArrayDictionary"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredStringDictionary"/>, <paramref name="requiredIntDictionary"/>, <paramref name="requiredModelDictionary"/>, <paramref name="requiredDictionaryDictionary"/> or <paramref name="requiredArrayDictionary"/> is null. </exception>
        public RoundTripDictionaryModel(IDictionary<string, string> requiredStringDictionary, IDictionary<string, int> requiredIntDictionary, IDictionary<string, RoundTripDummy> requiredModelDictionary, IDictionary<string, IDictionary<string, RoundTripDummy>> requiredDictionaryDictionary, IDictionary<string, IList<RoundTripDummy>> requiredArrayDictionary)
        {
            Argument.AssertNotNull(requiredStringDictionary, nameof(requiredStringDictionary));
            Argument.AssertNotNull(requiredIntDictionary, nameof(requiredIntDictionary));
            Argument.AssertNotNull(requiredModelDictionary, nameof(requiredModelDictionary));
            Argument.AssertNotNull(requiredDictionaryDictionary, nameof(requiredDictionaryDictionary));
            Argument.AssertNotNull(requiredArrayDictionary, nameof(requiredArrayDictionary));

            RequiredStringDictionary = requiredStringDictionary;
            OptionalStringDictionary = new ChangeTrackingDictionary<string, string>();
            RequiredIntDictionary = requiredIntDictionary;
            OptionalIntDictionary = new ChangeTrackingDictionary<string, int>();
            RequiredModelDictionary = requiredModelDictionary;
            OptionalModelDictionary = new ChangeTrackingDictionary<string, RoundTripDummy>();
            RequiredDictionaryDictionary = requiredDictionaryDictionary;
            OptionalDictionaryDictionary = new ChangeTrackingDictionary<string, IDictionary<string, RoundTripDummy>>();
            RequiredArrayDictionary = requiredArrayDictionary;
            OptionalArrayDictionary = new ChangeTrackingDictionary<string, IList<RoundTripDummy>>();
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripDictionaryModel"/>. </summary>
        /// <param name="requiredStringDictionary"></param>
        /// <param name="optionalStringDictionary"></param>
        /// <param name="requiredIntDictionary"></param>
        /// <param name="optionalIntDictionary"></param>
        /// <param name="requiredModelDictionary"></param>
        /// <param name="optionalModelDictionary"></param>
        /// <param name="requiredDictionaryDictionary"></param>
        /// <param name="optionalDictionaryDictionary"></param>
        /// <param name="requiredArrayDictionary"></param>
        /// <param name="optionalArrayDictionary"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RoundTripDictionaryModel(IDictionary<string, string> requiredStringDictionary, IDictionary<string, string> optionalStringDictionary, IDictionary<string, int> requiredIntDictionary, IDictionary<string, int> optionalIntDictionary, IDictionary<string, RoundTripDummy> requiredModelDictionary, IDictionary<string, RoundTripDummy> optionalModelDictionary, IDictionary<string, IDictionary<string, RoundTripDummy>> requiredDictionaryDictionary, IDictionary<string, IDictionary<string, RoundTripDummy>> optionalDictionaryDictionary, IDictionary<string, IList<RoundTripDummy>> requiredArrayDictionary, IDictionary<string, IList<RoundTripDummy>> optionalArrayDictionary, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RequiredStringDictionary = requiredStringDictionary;
            OptionalStringDictionary = optionalStringDictionary;
            RequiredIntDictionary = requiredIntDictionary;
            OptionalIntDictionary = optionalIntDictionary;
            RequiredModelDictionary = requiredModelDictionary;
            OptionalModelDictionary = optionalModelDictionary;
            RequiredDictionaryDictionary = requiredDictionaryDictionary;
            OptionalDictionaryDictionary = optionalDictionaryDictionary;
            RequiredArrayDictionary = requiredArrayDictionary;
            OptionalArrayDictionary = optionalArrayDictionary;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripDictionaryModel"/> for deserialization. </summary>
        internal RoundTripDictionaryModel()
        {
        }

        /// <summary> Gets the required string dictionary. </summary>
        public IDictionary<string, string> RequiredStringDictionary { get; }
        /// <summary> Gets the optional string dictionary. </summary>
        public IDictionary<string, string> OptionalStringDictionary { get; }
        /// <summary> Gets the required int dictionary. </summary>
        public IDictionary<string, int> RequiredIntDictionary { get; }
        /// <summary> Gets the optional int dictionary. </summary>
        public IDictionary<string, int> OptionalIntDictionary { get; }
        /// <summary> Gets the required model dictionary. </summary>
        public IDictionary<string, RoundTripDummy> RequiredModelDictionary { get; }
        /// <summary> Gets the optional model dictionary. </summary>
        public IDictionary<string, RoundTripDummy> OptionalModelDictionary { get; }
        /// <summary> Gets the required dictionary dictionary. </summary>
        public IDictionary<string, IDictionary<string, RoundTripDummy>> RequiredDictionaryDictionary { get; }
        /// <summary> Gets the optional dictionary dictionary. </summary>
        public IDictionary<string, IDictionary<string, RoundTripDummy>> OptionalDictionaryDictionary { get; }
        /// <summary> Gets the required array dictionary. </summary>
        public IDictionary<string, IList<RoundTripDummy>> RequiredArrayDictionary { get; }
        /// <summary> Gets the optional array dictionary. </summary>
        public IDictionary<string, IList<RoundTripDummy>> OptionalArrayDictionary { get; }
    }
}
