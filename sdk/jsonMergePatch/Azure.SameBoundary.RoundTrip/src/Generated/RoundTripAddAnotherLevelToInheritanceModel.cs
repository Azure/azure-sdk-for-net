// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.SameBoundary.RoundTrip
{
    /// <summary> The RoundTripAddAnotherLevelToInheritanceModel. </summary>
    public partial class RoundTripAddAnotherLevelToInheritanceModel : RoundTripInheritanceModel
    {
        /// <summary> Initializes a new instance of <see cref="RoundTripAddAnotherLevelToInheritanceModel"/>. </summary>
        /// <param name="baseProperty2"></param>
        public RoundTripAddAnotherLevelToInheritanceModel(int baseProperty2) : base(baseProperty2)
        {
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripAddAnotherLevelToInheritanceModel"/>. </summary>
        /// <param name="baseProperty1"></param>
        /// <param name="baseProperty2"></param>
        /// <param name="baseProperty3"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="extendedProperty"></param>
        /// <param name="anotherLevelProperty"></param>
        internal RoundTripAddAnotherLevelToInheritanceModel(string baseProperty1, int baseProperty2, IDictionary<string, string> baseProperty3, IDictionary<string, BinaryData> serializedAdditionalRawData, string extendedProperty, string anotherLevelProperty) : base(baseProperty1, baseProperty2, baseProperty3, serializedAdditionalRawData, extendedProperty)
        {
            AnotherLevelProperty = anotherLevelProperty;
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripAddAnotherLevelToInheritanceModel"/> for deserialization. </summary>
        internal RoundTripAddAnotherLevelToInheritanceModel()
        {
        }

        /// <summary> Gets or sets the another level property. </summary>
        public string AnotherLevelProperty { get; set; }
    }
}
