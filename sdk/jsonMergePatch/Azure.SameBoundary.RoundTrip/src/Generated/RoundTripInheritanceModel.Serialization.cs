// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.SameBoundary.RoundTrip
{
    public partial class RoundTripInheritanceModel : IUtf8JsonSerializable, IJsonModel<RoundTripInheritanceModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RoundTripInheritanceModel>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RoundTripInheritanceModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" || options.Format == "JMP" ? ((IPersistableModel<RoundTripInheritanceModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RoundTripInheritanceModel)} does not support writing '{format}' format.");
            }

            if (options.Format == "W")
            {
                WriteJson(writer, options);
            }
            else if (options.Format == "JMP")
            {
                WritePatch(writer);
            }
        }

        private void WritePatch(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (_extendedPrpertyChanged)
            {
                writer.WritePropertyName("extendedProperty"u8);
                if (ExtendedProperty == null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    writer.WriteStringValue(ExtendedProperty);
                }
            }
            if (IsChanged(nameof(BaseProperty1)))
            {
                writer.WritePropertyName("baseProperty1"u8);
                if (BaseProperty1 == null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    writer.WriteStringValue(BaseProperty1);
                }
            }
            if (IsChanged(nameof(BaseProperty2)))
            {
                writer.WritePropertyName("baseProperty2"u8);
                writer.WriteNumberValue(BaseProperty2);
            }
            // [Patch] Dictionary serialization is discussed in `InputDictionaryModel`
            if (((ChangeTrackingDictionary<string, string>)BaseProperty3).WasCleared())
            {
                writer.WritePropertyName("baseProperty3"u8);
                writer.WriteNullValue();
            }
            else
            {
                bool baseProperty3 = false;
                foreach (var item in BaseProperty3)
                {
                    if (((ChangeTrackingDictionary<string, string>)BaseProperty3).IsChanged(item.Key))
                    {
                        if (!baseProperty3)
                        {
                            writer.WritePropertyName("baseProperty3"u8);
                            writer.WriteStartObject();
                            baseProperty3 = true;
                        }

                        writer.WritePropertyName(item.Key);
                        if (item.Value != null)
                        {
                            writer.WriteStringValue(item.Value);
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                    }
                }
                foreach (var key in ((ChangeTrackingDictionary<string, string>)BaseProperty3).ChangedKeys ?? new List<string>())
                {
                    if (!BaseProperty3.ContainsKey(key))
                    {
                        if (!baseProperty3)
                        {
                            writer.WritePropertyName("baseProperty3"u8);
                            writer.WriteStartObject();
                            baseProperty3 = true;
                        }

                        writer.WritePropertyName(key);
                        writer.WriteNullValue();
                    }
                }
                if (baseProperty3)
                {
                    writer.WriteEndObject();
                }
            }
            writer.WriteEndObject();
        }

        private void WriteJson(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ExtendedProperty))
            {
                writer.WritePropertyName("extendedProperty"u8);
                writer.WriteStringValue(ExtendedProperty);
            }
            if (Optional.IsDefined(BaseProperty1))
            {
                writer.WritePropertyName("baseProperty1"u8);
                writer.WriteStringValue(BaseProperty1);
            }
            writer.WritePropertyName("baseProperty2"u8);
            writer.WriteNumberValue(BaseProperty2);
            if (Optional.IsCollectionDefined(BaseProperty3))
            {
                writer.WritePropertyName("baseProperty3"u8);
                writer.WriteStartObject();
                foreach (var item in BaseProperty3)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RoundTripInheritanceModel IJsonModel<RoundTripInheritanceModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoundTripInheritanceModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RoundTripInheritanceModel)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRoundTripInheritanceModel(document.RootElement, options);
        }

        internal static RoundTripInheritanceModel DeserializeRoundTripInheritanceModel(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string extendedProperty = default;
            string baseProperty1 = default;
            int baseProperty2 = default;
            IDictionary<string, string> baseProperty3 = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("extendedProperty"u8))
                {
                    extendedProperty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseProperty1"u8))
                {
                    baseProperty1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseProperty2"u8))
                {
                    baseProperty2 = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("baseProperty3"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    baseProperty3 = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RoundTripInheritanceModel(baseProperty1, baseProperty2, baseProperty3 ?? new ChangeTrackingDictionary<string, string>(), serializedAdditionalRawData, extendedProperty);
        }

        BinaryData IPersistableModel<RoundTripInheritanceModel>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoundTripInheritanceModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(RoundTripInheritanceModel)} does not support writing '{options.Format}' format.");
            }
        }

        RoundTripInheritanceModel IPersistableModel<RoundTripInheritanceModel>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoundTripInheritanceModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRoundTripInheritanceModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RoundTripInheritanceModel)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RoundTripInheritanceModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new RoundTripInheritanceModel FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeRoundTripInheritanceModel(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue<RoundTripInheritanceModel>(this, new ModelReaderWriterOptions("W"));
            return content;
        }
    }
}
