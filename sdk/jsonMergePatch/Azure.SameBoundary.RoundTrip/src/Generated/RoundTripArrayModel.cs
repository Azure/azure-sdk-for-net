// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.SameBoundary.RoundTrip
{
    /// <summary> The RoundTripArrayModel. </summary>
    public partial class RoundTripArrayModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RoundTripArrayModel"/>. </summary>
        /// <param name="requiredStringArray"></param>
        /// <param name="requiredIntArray"></param>
        /// <param name="requiredModelArray"></param>
        /// <param name="requiredArrayArray"></param>
        /// <param name="requiredDictionaryArray"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredStringArray"/>, <paramref name="requiredIntArray"/>, <paramref name="requiredModelArray"/>, <paramref name="requiredArrayArray"/> or <paramref name="requiredDictionaryArray"/> is null. </exception>
        public RoundTripArrayModel(IEnumerable<string> requiredStringArray, IEnumerable<int> requiredIntArray, IEnumerable<RoundTripDummy> requiredModelArray, IEnumerable<IList<RoundTripDummy>> requiredArrayArray, IEnumerable<IDictionary<string, RoundTripDummy>> requiredDictionaryArray)
        {
            Argument.AssertNotNull(requiredStringArray, nameof(requiredStringArray));
            Argument.AssertNotNull(requiredIntArray, nameof(requiredIntArray));
            Argument.AssertNotNull(requiredModelArray, nameof(requiredModelArray));
            Argument.AssertNotNull(requiredArrayArray, nameof(requiredArrayArray));
            Argument.AssertNotNull(requiredDictionaryArray, nameof(requiredDictionaryArray));

            _requiredStringArray = new ChangeTrackingList<string>(requiredStringArray.ToList() as IList<string>, true);
            _optionalStringArray = new ChangeTrackingList<string>();
            _requiredIntArray = new ChangeTrackingList<int>(requiredIntArray.ToList() as IList<int>, true);
            _optionalIntArray = new ChangeTrackingList<int>();
            _requiredModelArray = new ChangeTrackingList<RoundTripDummy>(requiredModelArray.ToList() as IList<RoundTripDummy>, true);
            _optionalModelArray = new ChangeTrackingList<RoundTripDummy>();
            // [Patch] The array item in the array should be a ChangeTrackingList.
            _requiredArrayArray = new ChangeTrackingList<IList<RoundTripDummy>>(requiredArrayArray.Select(item => new ChangeTrackingList<RoundTripDummy>(item, true) as IList<RoundTripDummy>).ToList() as IList<IList<RoundTripDummy>>, true);
            _optionalArrayArray = new ChangeTrackingList<IList<RoundTripDummy>>();
            // [Patch] The dictionary item in the array should be a ChangeTrackingDictionary.
            _requiredDictionaryArray = new ChangeTrackingList<IDictionary<string, RoundTripDummy>>(requiredDictionaryArray.Select(item => new ChangeTrackingDictionary<string, RoundTripDummy>(item, true) as IDictionary<string, RoundTripDummy>).ToList() as IList<IDictionary<string, RoundTripDummy>>, true);
            _optionalDictionaryArray = new ChangeTrackingList<IDictionary<string, RoundTripDummy>>();
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripArrayModel"/>. </summary>
        /// <param name="requiredStringArray"></param>
        /// <param name="optionalStringArray"></param>
        /// <param name="requiredIntArray"></param>
        /// <param name="optionalIntArray"></param>
        /// <param name="requiredModelArray"></param>
        /// <param name="optionalModelArray"></param>
        /// <param name="requiredArrayArray"></param>
        /// <param name="optionalArrayArray"></param>
        /// <param name="requiredDictionaryArray"></param>
        /// <param name="optionalDictionaryArray"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RoundTripArrayModel(IList<string> requiredStringArray, IList<string> optionalStringArray, IList<int> requiredIntArray, IList<int> optionalIntArray, IList<RoundTripDummy> requiredModelArray, IList<RoundTripDummy> optionalModelArray, IList<IList<RoundTripDummy>> requiredArrayArray, IList<IList<RoundTripDummy>> optionalArrayArray, IList<IDictionary<string, RoundTripDummy>> requiredDictionaryArray, IList<IDictionary<string, RoundTripDummy>> optionalDictionaryArray, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _requiredStringArray = new ChangeTrackingList<string>(requiredStringArray);
            _optionalStringArray = new ChangeTrackingList<string>(optionalStringArray);
            _requiredIntArray = new ChangeTrackingList<int>(requiredIntArray);
            _optionalIntArray = new ChangeTrackingList<int>(optionalIntArray);
            _requiredModelArray = new ChangeTrackingList<RoundTripDummy>(requiredModelArray);
            _optionalModelArray = new ChangeTrackingList<RoundTripDummy>(optionalModelArray);
            // [Patch] The array item in the array should be a ChangeTrackingList.
            _requiredArrayArray = new ChangeTrackingList<IList<RoundTripDummy>>(requiredArrayArray.Select(item => new ChangeTrackingList<RoundTripDummy>(item) as IList<RoundTripDummy>).ToList() as IList<IList<RoundTripDummy>>);
            _optionalArrayArray = new ChangeTrackingList<IList<RoundTripDummy>>(optionalArrayArray.Select(item => new ChangeTrackingList<RoundTripDummy>(item) as IList<RoundTripDummy>).ToList() as IList<IList<RoundTripDummy>>);
            // [Patch] The dictionary item in the array should be a ChangeTrackingDictionary.
            _requiredDictionaryArray = new ChangeTrackingList<IDictionary<string, RoundTripDummy>>(requiredDictionaryArray.Select(item => new ChangeTrackingDictionary<string, RoundTripDummy>(item) as IDictionary<string, RoundTripDummy>).ToList() as IList<IDictionary<string, RoundTripDummy>>);
            _optionalDictionaryArray = new ChangeTrackingList<IDictionary<string, RoundTripDummy>>(optionalDictionaryArray.Select(item => new ChangeTrackingDictionary<string, RoundTripDummy>(item) as IDictionary<string, RoundTripDummy>).ToList() as IList<IDictionary<string, RoundTripDummy>>);
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripArrayModel"/> for deserialization. </summary>
        internal RoundTripArrayModel()
        {
        }

        private ChangeTrackingList<string> _requiredStringArray;
        /// <summary> Gets the required string array. </summary>
        public IList<string> RequiredStringArray => _requiredStringArray;

        private ChangeTrackingList<string> _optionalStringArray;
        /// <summary> Gets the optional string array. </summary>
        public IList<string> OptionalStringArray => _optionalStringArray;

        private ChangeTrackingList<int> _requiredIntArray;
        /// <summary> Gets the required int array. </summary>
        public IList<int> RequiredIntArray => _requiredIntArray;

        private ChangeTrackingList<int> _optionalIntArray;
        /// <summary> Gets the optional int array. </summary>
        public IList<int> OptionalIntArray => _optionalIntArray;

        private ChangeTrackingList<RoundTripDummy> _requiredModelArray;
        /// <summary> Gets the required model array. </summary>
        public IList<RoundTripDummy> RequiredModelArray => _requiredModelArray;

        private ChangeTrackingList<RoundTripDummy> _optionalModelArray;
        /// <summary> Gets the optional model array. </summary>
        public IList<RoundTripDummy> OptionalModelArray => _optionalModelArray;

        private ChangeTrackingList<IList<RoundTripDummy>> _requiredArrayArray;
        /// <summary> Gets the required array array. </summary>
        public IList<IList<RoundTripDummy>> RequiredArrayArray => _requiredArrayArray;

        private ChangeTrackingList<IList<RoundTripDummy>> _optionalArrayArray;
        /// <summary> Gets the optional array array. </summary>
        public IList<IList<RoundTripDummy>> OptionalArrayArray => _optionalArrayArray;

        private ChangeTrackingList<IDictionary<string, RoundTripDummy>> _requiredDictionaryArray;
        /// <summary> Gets the required dictionary array. </summary>
        public IList<IDictionary<string, RoundTripDummy>> RequiredDictionaryArray => _requiredDictionaryArray;

        private ChangeTrackingList<IDictionary<string, RoundTripDummy>> _optionalDictionaryArray;
        /// <summary> Gets the optional dictionary array. </summary>
        public IList<IDictionary<string, RoundTripDummy>> OptionalDictionaryArray => _optionalDictionaryArray;
    }
}
