// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace System.ClientModel.TestFramework
{
    /// <summary> The ProxyOptionsTransport. </summary>
    internal partial class ProxyOptionsTransport
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ProxyOptionsTransport"/>. </summary>
        /// <param name="allowAutoRedirect"></param>
        /// <param name="tlsValidationCert"></param>
        /// <param name="certificates"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="tlsValidationCert"/> or <paramref name="certificates"/> is null. </exception>
        public ProxyOptionsTransport(bool allowAutoRedirect, string tlsValidationCert, BinaryData certificates)
        {
            Argument.AssertNotNull(tlsValidationCert, nameof(tlsValidationCert));
            Argument.AssertNotNull(certificates, nameof(certificates));

            AllowAutoRedirect = allowAutoRedirect;
            TlsValidationCert = tlsValidationCert;
            Certificates = certificates;
        }

        /// <summary> Initializes a new instance of <see cref="ProxyOptionsTransport"/>. </summary>
        /// <param name="allowAutoRedirect"></param>
        /// <param name="tlsValidationCert"></param>
        /// <param name="certificates"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ProxyOptionsTransport(bool allowAutoRedirect, string tlsValidationCert, BinaryData certificates, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            AllowAutoRedirect = allowAutoRedirect;
            TlsValidationCert = tlsValidationCert;
            Certificates = certificates;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the AllowAutoRedirect. </summary>
        public bool AllowAutoRedirect { get; }

        /// <summary> Gets the TlsValidationCert. </summary>
        public string TlsValidationCert { get; }

        /// <summary>
        /// Gets the Certificates.
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Certificates { get; }
    }
}
