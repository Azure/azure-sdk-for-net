// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace System.ClientModel.TestFramework
{
    /// <summary> The HeaderCondition. </summary>
    public partial class HeaderCondition
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HeaderCondition"/>. </summary>
        /// <param name="key"></param>
        /// <param name="valueRegex"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="valueRegex"/> is null. </exception>
        public HeaderCondition(string key, string valueRegex)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(valueRegex, nameof(valueRegex));

            Key = key;
            ValueRegex = valueRegex;
        }

        /// <summary> Initializes a new instance of <see cref="HeaderCondition"/>. </summary>
        /// <param name="key"></param>
        /// <param name="valueRegex"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HeaderCondition(string key, string valueRegex, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Key = key;
            ValueRegex = valueRegex;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the Key. </summary>
        public string Key { get; }

        /// <summary> Gets the ValueRegex. </summary>
        public string ValueRegex { get; }
    }
}
