// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.TestFramework.TestProxy;

namespace System.ClientModel.TestFramework
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class SystemClientModelTestFrameworkModelFactory
    {

        /// <summary> The CustomDefaultMatcher. </summary>
        /// <param name="excludedHeaders"></param>
        /// <param name="compareBodies"></param>
        /// <param name="ignoredHeaders"></param>
        /// <param name="ignoredQueryParameters"></param>
        /// <returns> A new <see cref="TestFramework.CustomDefaultMatcher"/> instance for mocking. </returns>
        public static CustomDefaultMatcher CustomDefaultMatcher(string excludedHeaders = default, bool compareBodies = default, string ignoredHeaders = default, string ignoredQueryParameters = default)
        {
            return new CustomDefaultMatcher(excludedHeaders, compareBodies, ignoredHeaders, ignoredQueryParameters, additionalBinaryDataProperties: null);
        }

        /// <summary> The HeaderTransform. </summary>
        /// <param name="key"></param>
        /// <param name="value"></param>
        /// <param name="condition"></param>
        /// <returns> A new <see cref="TestFramework.HeaderTransform"/> instance for mocking. </returns>
        public static HeaderTransform HeaderTransform(string key = default, string value = default, Condition condition = default)
        {
            return new HeaderTransform(key, value, condition, additionalBinaryDataProperties: null);
        }

        /// <summary> The Condition. </summary>
        /// <param name="uriRegex"></param>
        /// <param name="responseHeader"></param>
        /// <returns> A new <see cref="TestFramework.Condition"/> instance for mocking. </returns>
        public static Condition Condition(string uriRegex = default, HeaderCondition responseHeader = default)
        {
            return new Condition(uriRegex, responseHeader, additionalBinaryDataProperties: null);
        }

        /// <summary> The HeaderCondition. </summary>
        /// <param name="key"></param>
        /// <param name="valueRegex"></param>
        /// <returns> A new <see cref="TestFramework.HeaderCondition"/> instance for mocking. </returns>
        public static HeaderCondition HeaderCondition(string key = default, string valueRegex = default)
        {
            return new HeaderCondition(key, valueRegex, additionalBinaryDataProperties: null);
        }
    }
}
