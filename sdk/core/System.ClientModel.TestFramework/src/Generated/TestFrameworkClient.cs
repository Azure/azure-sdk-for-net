// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace System.ClientModel.TestFramework
{
    /// <summary></summary>
    public partial class TestFrameworkClient
    {
        private readonly Uri _endpoint;

        /// <summary> Initializes a new instance of TestFrameworkClient for mocking. </summary>
        protected TestFrameworkClient()
        {
        }

        /// <summary> Initializes a new instance of TestFrameworkClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TestFrameworkClient(Uri endpoint) : this(endpoint, new TestFrameworkClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TestFrameworkClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TestFrameworkClient(Uri endpoint, TestFrameworkClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new TestFrameworkClientOptions();

            _endpoint = endpoint;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Start playback for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StartPlayback(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartPlaybackRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Start playback for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StartPlaybackAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartPlaybackRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Start playback for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<StartPlaybackResponse> StartPlayback(StartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = StartPlayback(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((StartPlaybackResponse)result, result.GetRawResponse());
        }

        /// <summary> Start playback for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<StartPlaybackResponse>> StartPlaybackAsync(StartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await StartPlaybackAsync(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((StartPlaybackResponse)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Stop playback for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID to stop playback for. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StopPlayback(string recordingId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            using PipelineMessage message = CreateStopPlaybackRequest(recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Stop playback for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID to stop playback for. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StopPlaybackAsync(string recordingId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            using PipelineMessage message = CreateStopPlaybackRequest(recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Stop playback for a test. </summary>
        /// <param name="recordingId"> The recording ID to stop playback for. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<StopPlaybackResponse> StopPlayback(string recordingId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            ClientResult result = StopPlayback(recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((StopPlaybackResponse)result, result.GetRawResponse());
        }

        /// <summary> Stop playback for a test. </summary>
        /// <param name="recordingId"> The recording ID to stop playback for. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<StopPlaybackResponse>> StopPlaybackAsync(string recordingId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            ClientResult result = await StopPlaybackAsync(recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((StopPlaybackResponse)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Start recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StartRecord(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartRecordRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Start recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StartRecordAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartRecordRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Start recording for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<StartRecordResponse> StartRecord(StartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = StartRecord(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((StartRecordResponse)result, result.GetRawResponse());
        }

        /// <summary> Start recording for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<StartRecordResponse>> StartRecordAsync(StartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await StartRecordAsync(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((StartRecordResponse)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Stop recording a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="recordingSkip"> Set to request-response to skip recording this session. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/>, <paramref name="recordingSkip"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> or <paramref name="recordingSkip"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StopRecord(string recordingId, string recordingSkip, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNullOrEmpty(recordingSkip, nameof(recordingSkip));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStopRecordRequest(recordingId, recordingSkip, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Stop recording a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="recordingSkip"> Set to request-response to skip recording this session. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/>, <paramref name="recordingSkip"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> or <paramref name="recordingSkip"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StopRecordAsync(string recordingId, string recordingSkip, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNullOrEmpty(recordingSkip, nameof(recordingSkip));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStopRecordRequest(recordingId, recordingSkip, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Stop recording a test. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="recordingSkip"> Set to request-response to skip recording this session. </param>
        /// <param name="variables"> Variables for the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/>, <paramref name="recordingSkip"/> or <paramref name="variables"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> or <paramref name="recordingSkip"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult StopRecord(string recordingId, string recordingSkip, StopRecordRequest variables, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNullOrEmpty(recordingSkip, nameof(recordingSkip));
            Argument.AssertNotNull(variables, nameof(variables));

            return StopRecord(recordingId, recordingSkip, variables, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Stop recording a test. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="recordingSkip"> Set to request-response to skip recording this session. </param>
        /// <param name="variables"> Variables for the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/>, <paramref name="recordingSkip"/> or <paramref name="variables"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> or <paramref name="recordingSkip"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> StopRecordAsync(string recordingId, string recordingSkip, StopRecordRequest variables, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNullOrEmpty(recordingSkip, nameof(recordingSkip));
            Argument.AssertNotNull(variables, nameof(variables));

            return await StopRecordAsync(recordingId, recordingSkip, variables, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
