// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.ClientModel.TestFramework.TestProxy;
using System.Threading;
using System.Threading.Tasks;

namespace System.ClientModel.TestFramework
{
    /// <summary></summary>
    public partial class TestFrameworkClient
    {
        private readonly Uri _endpoint;
        private TestProxyClient _cachedTestProxyClient;

        /// <summary> Initializes a new instance of TestFrameworkClient for mocking. </summary>
        protected TestFrameworkClient()
        {
        }

        /// <summary> Initializes a new instance of TestFrameworkClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TestFrameworkClient(Uri endpoint) : this(endpoint, new TestFrameworkClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TestFrameworkClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TestFrameworkClient(Uri endpoint, TestFrameworkClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new TestFrameworkClientOptions();

            _endpoint = endpoint;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Add a matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="matcherType"> The type of matcher. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the matcher to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="matcherType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult SetMatcher(string matcherType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(matcherType, nameof(matcherType));

            using PipelineMessage message = CreateSetMatcherRequest(matcherType, content, recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="matcherType"> The type of matcher. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the matcher to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="matcherType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> SetMatcherAsync(string matcherType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(matcherType, nameof(matcherType));

            using PipelineMessage message = CreateSetMatcherRequest(matcherType, content, recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a matcher. </summary>
        /// <param name="matcherType"> The type of matcher. </param>
        /// <param name="matcher"></param>
        /// <param name="recordingId"> The recording ID to apply the matcher to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="matcherType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult SetMatcher(string matcherType, BinaryData matcher = default, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(matcherType, nameof(matcherType));

            return SetMatcher(matcherType, BinaryContent.Create(matcher), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a matcher. </summary>
        /// <param name="matcherType"> The type of matcher. </param>
        /// <param name="matcher"></param>
        /// <param name="recordingId"> The recording ID to apply the matcher to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="matcherType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> SetMatcherAsync(string matcherType, BinaryData matcher = default, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(matcherType, nameof(matcherType));

            return await SetMatcherAsync(matcherType, BinaryContent.Create(matcher), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a bodiless matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddBodilessMatcher(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddBodilessMatcherRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a bodiless matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddBodilessMatcherAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddBodilessMatcherRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a bodiless matcher. </summary>
        /// <param name="matcherType"></param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddBodilessMatcher(string matcherType, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(matcherType, nameof(matcherType));

            AddBodilessMatcherRequest spreadModel = new AddBodilessMatcherRequest(matcherType, recordingId, null);
            return AddBodilessMatcher(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a bodiless matcher. </summary>
        /// <param name="matcherType"></param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddBodilessMatcherAsync(string matcherType, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(matcherType, nameof(matcherType));

            AddBodilessMatcherRequest spreadModel = new AddBodilessMatcherRequest(matcherType, recordingId, null);
            return await AddBodilessMatcherAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a custom matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddCustomMatcher(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddCustomMatcherRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a custom matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddCustomMatcherAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddCustomMatcherRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a custom matcher. </summary>
        /// <param name="matcherType"></param>
        /// <param name="matcher"> The body for a custom matcher. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> or <paramref name="matcher"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddCustomMatcher(string matcherType, CustomDefaultMatcher matcher, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(matcherType, nameof(matcherType));
            Argument.AssertNotNull(matcher, nameof(matcher));

            AddCustomMatcherRequest spreadModel = new AddCustomMatcherRequest(matcherType, recordingId, matcher, null);
            return AddCustomMatcher(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a custom matcher. </summary>
        /// <param name="matcherType"></param>
        /// <param name="matcher"> The body for a custom matcher. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> or <paramref name="matcher"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddCustomMatcherAsync(string matcherType, CustomDefaultMatcher matcher, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(matcherType, nameof(matcherType));
            Argument.AssertNotNull(matcher, nameof(matcher));

            AddCustomMatcherRequest spreadModel = new AddCustomMatcherRequest(matcherType, recordingId, matcher, null);
            return await AddCustomMatcherAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a transform.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="transformType"> The type of transform. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="transformType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddTransform(string transformType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(transformType, nameof(transformType));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddTransformRequest(transformType, content, recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a transform.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="transformType"> The type of transform. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="transformType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddTransformAsync(string transformType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(transformType, nameof(transformType));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddTransformRequest(transformType, content, recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a transform. </summary>
        /// <param name="transformType"> The type of transform. </param>
        /// <param name="transform"></param>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="transform"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="transformType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddTransform(string transformType, BinaryData transform, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(transformType, nameof(transformType));
            Argument.AssertNotNull(transform, nameof(transform));

            return AddTransform(transformType, BinaryContent.Create(transform), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a transform. </summary>
        /// <param name="transformType"> The type of transform. </param>
        /// <param name="transform"></param>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="transform"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="transformType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddTransformAsync(string transformType, BinaryData transform, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(transformType, nameof(transformType));
            Argument.AssertNotNull(transform, nameof(transform));

            return await AddTransformAsync(transformType, BinaryContent.Create(transform), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a header transform.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddHeaderTransform(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddHeaderTransformRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a header transform.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddHeaderTransformAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddHeaderTransformRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a header transform. </summary>
        /// <param name="transformType"></param>
        /// <param name="transform"> The body for a header transform. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="transform"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddHeaderTransform(string transformType, HeaderTransform transform, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(transformType, nameof(transformType));
            Argument.AssertNotNull(transform, nameof(transform));

            AddHeaderTransformRequest spreadModel = new AddHeaderTransformRequest(transformType, recordingId, transform, null);
            return AddHeaderTransform(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a header transform. </summary>
        /// <param name="transformType"></param>
        /// <param name="transform"> The body for a header transform. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="transform"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddHeaderTransformAsync(string transformType, HeaderTransform transform, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(transformType, nameof(transformType));
            Argument.AssertNotNull(transform, nameof(transform));

            AddHeaderTransformRequest spreadModel = new AddHeaderTransformRequest(transformType, recordingId, transform, null);
            return await AddHeaderTransformAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary> Initializes a new instance of TestProxyClient. </summary>
        public virtual TestProxyClient GetTestProxyClient()
        {
            return Volatile.Read(ref _cachedTestProxyClient) ?? Interlocked.CompareExchange(ref _cachedTestProxyClient, new TestProxyClient(Pipeline, _endpoint), null) ?? _cachedTestProxyClient;
        }
    }
}
