// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System.Buffers.Text;
using System.ClientModel.Primitives;
using System.ClientModel.Tests.Client.Models.ResourceManager.Resources;
using System.ClientModel.Tests.ModelReaderWriterTests;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using ClientModel.Tests.ClientShared;

namespace System.ClientModel.Tests.Client.Models.ResourceManager.Compute
{
    public partial class AvailabilitySetData : IJsonModel<AvailabilitySetData>
    {
        void IJsonModel<AvailabilitySetData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvailabilitySetData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                    throw new FormatException($"The model {nameof(AvailabilitySetData)} does not support writing '{format}' format.");
            }
            Serialize(writer, options);
        }

        private void Serialize(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
            writer.WriteStartObject();
            if (options.Format == "J" && !Patch.Contains("$.name"u8))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format == "J" && !Patch.Contains("$.id"u8))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id.ToString());
            }
            if (options.Format == "J" && !Patch.Contains("$.type"u8))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType.ToString());
            }
            if (OptionalProperty.IsDefined(Sku) && !Patch.Contains("$.sku"u8))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (OptionalProperty.IsCollectionDefined(Tags) && !Patch.Contains("$.tags"u8))
            {
                //TODO: 12% perf hit to call this helper
                //writer.WriteDictionaryWithPatch(options, ref Patch, "tags"u8, "$.tags"u8, Tags, static (writer, value, _) => writer.WriteStringValue(value), null);
                writer.WritePropertyName("tags"u8);

                writer.WriteStartObject();
#if NET8_0_OR_GREATER
                Span<byte> buffer = stackalloc byte[256];
#endif
                foreach (var item in Tags)
                {
#if NET8_0_OR_GREATER
                    int bytesWritten = Encoding.UTF8.GetBytes(item.Key.AsSpan(), buffer);
                    bool patchContains = bytesWritten == 256
                        ? Patch.Contains("$.tags"u8, Encoding.UTF8.GetBytes(item.Key))
                        : Patch.Contains("$.tags"u8, buffer.Slice(0, bytesWritten));
#else
                    bool patchContains = Patch.Contains("$.tags"u8, Encoding.UTF8.GetBytes(item.Key));
#endif
                    if (!patchContains)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                }

                Patch.WriteTo(writer, "$.tags"u8);
                writer.WriteEndObject();
            }
            if (!Patch.Contains("$.location"u8))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStringValue(Location);
            }
            if (!Patch.Contains("$.properties"u8))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteStartObject();
                if (OptionalProperty.IsDefined(PlatformUpdateDomainCount) && !Patch.Contains("$.properties.platformUpdateDomainCount"u8))
                {
                    writer.WritePropertyName("platformUpdateDomainCount"u8);
                    writer.WriteNumberValue(PlatformUpdateDomainCount.Value);
                }
                if (OptionalProperty.IsDefined(PlatformFaultDomainCount) && !Patch.Contains("$.properties.platformFaultDomainCount"u8))
                {
                    writer.WritePropertyName("platformFaultDomainCount"u8);
                    writer.WriteNumberValue(PlatformFaultDomainCount.Value);
                }
                if (Patch.Contains("$.properties.virtualMachines"u8))
                {
                    writer.WritePropertyName("virtualMachines"u8);
                    writer.WriteRawValue(Patch.GetJson("$.properties.virtualMachines"u8));
                }
                else if (OptionalProperty.IsCollectionDefined(VirtualMachines))
                {
                    writer.WritePropertyName("virtualMachines"u8);
                    writer.WriteStartArray();
                    for (int i = 0; i < VirtualMachines.Count; i++)
                    {
                        if (VirtualMachines[i].Patch.IsRemoved("$"u8))
                            continue;

                        ((IJsonModel<WritableSubResource>)VirtualMachines[i]).Write(writer, options);
                    }
                    Patch.WriteArrayTo(writer, "$.properties.virtualMachines"u8);
                    writer.WriteEndArray();
                }
                if (OptionalProperty.IsDefined(ProximityPlacementGroup) && !Patch.Contains("$.properties.proximityPlacementGroup"u8))
                {
                    writer.WritePropertyName("proximityPlacementGroup"u8);
                    ((IJsonModel<WritableSubResource>)ProximityPlacementGroup).Write(writer, options);
                }

                Patch.WriteTo(writer, "$.properties"u8);

                writer.WriteEndObject();
            }

            Patch.WriteTo(writer);

            writer.WriteEndObject();
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
        }

        public static AvailabilitySetData DeserializeAvailabilitySetData(JsonElement element, ModelReaderWriterOptions options, BinaryData data)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            OptionalProperty<ComputeSku> sku = default;
            OptionalProperty<IDictionary<string, string>> tags = default;
            string location = default;
            string id = default;
            string name = default;
            string type = default;
            OptionalProperty<SystemData> systemData = default;
            OptionalProperty<int> platformUpdateDomainCount = default;
            OptionalProperty<int> platformFaultDomainCount = default;
            OptionalProperty<IList<WritableSubResource>> virtualMachines = default;
            OptionalProperty<WritableSubResource> proximityPlacementGroup = default;
            OptionalProperty<IReadOnlyList<InstanceViewStatus>> statuses = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
            JsonPatch jsonPatch = new(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = ComputeSku.DeserializeComputeSku(property.Value, options, property.Value.GetUtf8Bytes());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(property.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("platformUpdateDomainCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            platformUpdateDomainCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("platformFaultDomainCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            platformFaultDomainCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("virtualMachines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<WritableSubResource> array = new List<WritableSubResource>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ModelReaderWriter.Read<WritableSubResource>(item.GetUtf8Bytes(), options));
                            }
                            virtualMachines = array;
                            continue;
                        }
                        if (property0.NameEquals("proximityPlacementGroup"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            proximityPlacementGroup = ModelReaderWriter.Read<WritableSubResource>(property0.Value.GetUtf8Bytes(), options);
                            continue;
                        }
                        if (property0.NameEquals("statuses"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<InstanceViewStatus> array = new List<InstanceViewStatus>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(InstanceViewStatus.DeserializeInstanceViewStatus(item, options));
                            }
                            statuses = array;
                            continue;
                        }
                        jsonPatch.Set([.. "$.properties."u8, .. Encoding.UTF8.GetBytes(property0.Name)], property0.Value.GetUtf8Bytes());

                    }
                    continue;
                }
                jsonPatch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(property.Name)], property.Value.GetUtf8Bytes());
            }

            return new AvailabilitySetData(
                id,
                name,
                type,
                systemData.Value,
                OptionalProperty.ToDictionary(tags),
                location,
                sku.Value,
                OptionalProperty.ToNullable(platformUpdateDomainCount),
                OptionalProperty.ToNullable(platformFaultDomainCount),
                OptionalProperty.ToList(virtualMachines),
                proximityPlacementGroup,
                OptionalProperty.ToList(statuses),
                jsonPatch);
        }

        AvailabilitySetData IPersistableModel<AvailabilitySetData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvailabilitySetData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAvailabilitySetData(document.RootElement, options, data);
                    }
                default:
                    throw new FormatException($"The model {nameof(AvailabilitySetData)} does not support reading '{options.Format}' format.");
            }
        }

        private struct AvailabilitySetDataProperties
        {
            public OptionalProperty<ComputeSku> Sku { get; set; }
            public OptionalProperty<IDictionary<string, string>> Tags { get; set; }
            public string Location { get; set; }
            public string Id { get; set; }
            public string Name { get; set; }
            public string ResourceType { get; set; }
            public OptionalProperty<SystemData> SystemData { get; set; }
            public OptionalProperty<int> PlatformUpdateDomainCount { get; set; }
            public OptionalProperty<int> PlatformFaultDomainCount { get; set; }
            public OptionalProperty<IList<WritableSubResource>> VirtualMachines { get; set; }
            public OptionalProperty<WritableSubResource> ProximityPlacementGroup { get; set; }
            public OptionalProperty<IReadOnlyList<InstanceViewStatus>> Statuses { get; set; }
        }

        AvailabilitySetData IJsonModel<AvailabilitySetData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvailabilitySetData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AvailabilitySetData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAvailabilitySetData(document.RootElement, options, null);
        }

        BinaryData IPersistableModel<AvailabilitySetData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvailabilitySetData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, TestClientModelReaderWriterContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AvailabilitySetData)} does not support writing '{options.Format}' format.");
            }
        }

        string IPersistableModel<AvailabilitySetData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
        private bool PropagateSet(ReadOnlySpan<byte> jsonPath, JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();

            if (local.StartsWith("sku"u8))
            {
                Sku.Patch.Set([.. "$"u8, .. local.Slice("sku"u8.Length)], value);
                return true;
            }
            else if (local.StartsWith("properties.virtualMachines"u8))
            {
                int propertyLength = "properties.virtualMachines"u8.Length;
                ReadOnlySpan<byte> indexSlice = local.Slice(propertyLength);
                if (!TryGetIndex(propertyLength, indexSlice, out int index, out int bytesConsumed))
                    return false;

                if (VirtualMachines.Count > index)
                {
                    VirtualMachines[index].Patch.Set([.. "$"u8, .. indexSlice.Slice(bytesConsumed + 2)], value);
                    return true;
                }
            }

            return false;
        }

        //should i out EncodedValue here ???
        private bool PropagateGet(ReadOnlySpan<byte> jsonPath, out JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();
            value = default;

            if (local.StartsWith("sku"u8))
            {
                return Sku.Patch.TryGetRawValue([.. "$"u8, .. local.Slice("sku"u8.Length)], out value);
            }
            else if (local.StartsWith("properties.virtualMachines"u8))
            {
                int propertyLength = "properties.virtualMachines"u8.Length;
                ReadOnlySpan<byte> indexSlice = local.Slice(propertyLength);
                if (!TryGetIndex(propertyLength, indexSlice, out int index, out int bytesConsumed))
                    return false;

                if (VirtualMachines.Count > index)
                {
                    return VirtualMachines[index].Patch.TryGetRawValue([.. "$"u8, .. indexSlice.Slice(bytesConsumed + 2)], out value);
                }
            }

            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.

        private bool IsFlattened(ReadOnlySpan<byte> jsonPath)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();

            return local.StartsWith("properties"u8) ||
                local.StartsWith("tags"u8);
        }

        private static bool TryGetIndex(int propertyLength, ReadOnlySpan<byte> indexSlice, out int index, out int bytesConsumed)
        {
            index = -1;
            bytesConsumed = 0;

            if (indexSlice.IsEmpty || indexSlice[0] != (byte)'[')
                return false;

            indexSlice = indexSlice.Slice(1);
            if (indexSlice.IsEmpty || indexSlice[0] == (byte)'-')
                return false;

            int indexEnd = indexSlice.Slice(1).IndexOf((byte)']');
            if (indexEnd < 0)
                return false;

            return Utf8Parser.TryParse(indexSlice.Slice(0, indexEnd + 1), out index, out bytesConsumed);
        }
    }
}
