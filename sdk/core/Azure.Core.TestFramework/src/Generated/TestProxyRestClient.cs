// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Core.TestFramework.Models;

namespace Azure.Core.TestFramework
{
    internal partial class TestProxyRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of TestProxyRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public TestProxyRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            this.endpoint = endpoint ?? new Uri("");
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateStartPlaybackRequest(string xRecordingFile)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/playback/start", false);
            request.Uri = uri;
            request.Headers.Add("x-recording-file", xRecordingFile);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Start playback for a test. </summary>
        /// <param name="xRecordingFile"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xRecordingFile"/> is null. </exception>
        public async Task<ResponseWithHeaders<IReadOnlyDictionary<string, string>, TestProxyStartPlaybackHeaders>> StartPlaybackAsync(string xRecordingFile, CancellationToken cancellationToken = default)
        {
            if (xRecordingFile == null)
            {
                throw new ArgumentNullException(nameof(xRecordingFile));
            }

            using var message = CreateStartPlaybackRequest(xRecordingFile);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new TestProxyStartPlaybackHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, string> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, string> dictionary = new Dictionary<string, string>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetString());
                        }
                        value = dictionary;
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start playback for a test. </summary>
        /// <param name="xRecordingFile"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xRecordingFile"/> is null. </exception>
        public ResponseWithHeaders<IReadOnlyDictionary<string, string>, TestProxyStartPlaybackHeaders> StartPlayback(string xRecordingFile, CancellationToken cancellationToken = default)
        {
            if (xRecordingFile == null)
            {
                throw new ArgumentNullException(nameof(xRecordingFile));
            }

            using var message = CreateStartPlaybackRequest(xRecordingFile);
            _pipeline.Send(message, cancellationToken);
            var headers = new TestProxyStartPlaybackHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, string> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, string> dictionary = new Dictionary<string, string>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, property.Value.GetString());
                        }
                        value = dictionary;
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStopPlaybackRequest(string xRecordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/playback/stop", false);
            request.Uri = uri;
            request.Headers.Add("x-recording-id", xRecordingId);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Stop playback for a test. </summary>
        /// <param name="xRecordingId"> References specific schema in registry namespace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xRecordingId"/> is null. </exception>
        public async Task<Response> StopPlaybackAsync(string xRecordingId, CancellationToken cancellationToken = default)
        {
            if (xRecordingId == null)
            {
                throw new ArgumentNullException(nameof(xRecordingId));
            }

            using var message = CreateStopPlaybackRequest(xRecordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stop playback for a test. </summary>
        /// <param name="xRecordingId"> References specific schema in registry namespace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xRecordingId"/> is null. </exception>
        public Response StopPlayback(string xRecordingId, CancellationToken cancellationToken = default)
        {
            if (xRecordingId == null)
            {
                throw new ArgumentNullException(nameof(xRecordingId));
            }

            using var message = CreateStopPlaybackRequest(xRecordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStartRecordRequest(string xRecordingFile)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/record/start", false);
            request.Uri = uri;
            request.Headers.Add("x-recording-file", xRecordingFile);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Start recording for a test. </summary>
        /// <param name="xRecordingFile"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xRecordingFile"/> is null. </exception>
        public async Task<ResponseWithHeaders<TestProxyStartRecordHeaders>> StartRecordAsync(string xRecordingFile, CancellationToken cancellationToken = default)
        {
            if (xRecordingFile == null)
            {
                throw new ArgumentNullException(nameof(xRecordingFile));
            }

            using var message = CreateStartRecordRequest(xRecordingFile);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new TestProxyStartRecordHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start recording for a test. </summary>
        /// <param name="xRecordingFile"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xRecordingFile"/> is null. </exception>
        public ResponseWithHeaders<TestProxyStartRecordHeaders> StartRecord(string xRecordingFile, CancellationToken cancellationToken = default)
        {
            if (xRecordingFile == null)
            {
                throw new ArgumentNullException(nameof(xRecordingFile));
            }

            using var message = CreateStartRecordRequest(xRecordingFile);
            _pipeline.Send(message, cancellationToken);
            var headers = new TestProxyStartRecordHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStopRecordRequest(string xRecordingId, IDictionary<string, string> variables)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/record/stop", false);
            request.Uri = uri;
            request.Headers.Add("x-recording-id", xRecordingId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartObject();
            foreach (var item in variables)
            {
                content.JsonWriter.WritePropertyName(item.Key);
                content.JsonWriter.WriteStringValue(item.Value);
            }
            content.JsonWriter.WriteEndObject();
            request.Content = content;
            return message;
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="xRecordingId"> References specific schema in registry namespace. </param>
        /// <param name="variables"> Variables for the recording. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xRecordingId"/> or <paramref name="variables"/> is null. </exception>
        public async Task<Response> StopRecordAsync(string xRecordingId, IDictionary<string, string> variables, CancellationToken cancellationToken = default)
        {
            if (xRecordingId == null)
            {
                throw new ArgumentNullException(nameof(xRecordingId));
            }
            if (variables == null)
            {
                throw new ArgumentNullException(nameof(variables));
            }

            using var message = CreateStopRecordRequest(xRecordingId, variables);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="xRecordingId"> References specific schema in registry namespace. </param>
        /// <param name="variables"> Variables for the recording. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xRecordingId"/> or <paramref name="variables"/> is null. </exception>
        public Response StopRecord(string xRecordingId, IDictionary<string, string> variables, CancellationToken cancellationToken = default)
        {
            if (xRecordingId == null)
            {
                throw new ArgumentNullException(nameof(xRecordingId));
            }
            if (variables == null)
            {
                throw new ArgumentNullException(nameof(variables));
            }

            using var message = CreateStopRecordRequest(xRecordingId, variables);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddBodySanitizerRequest(BodyKeySanitizer sanitizer)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/admin/addsanitizer", false);
            request.Uri = uri;
            request.Headers.Add("x-abstraction-identifier", "BodyKeySanitizer");
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(sanitizer);
            request.Content = content;
            return message;
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="sanitizer"> The body for a header regex sanitizer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizer"/> is null. </exception>
        public async Task<Response> AddBodySanitizerAsync(BodyKeySanitizer sanitizer, CancellationToken cancellationToken = default)
        {
            if (sanitizer == null)
            {
                throw new ArgumentNullException(nameof(sanitizer));
            }

            using var message = CreateAddBodySanitizerRequest(sanitizer);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="sanitizer"> The body for a header regex sanitizer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizer"/> is null. </exception>
        public Response AddBodySanitizer(BodyKeySanitizer sanitizer, CancellationToken cancellationToken = default)
        {
            if (sanitizer == null)
            {
                throw new ArgumentNullException(nameof(sanitizer));
            }

            using var message = CreateAddBodySanitizerRequest(sanitizer);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddHeaderSanitizerRequest(HeaderRegexSanitizer sanitizer)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/admin/addsanitizer", false);
            request.Uri = uri;
            request.Headers.Add("x-abstraction-identifier", "HeaderRegexSanitizer");
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(sanitizer);
            request.Content = content;
            return message;
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="sanitizer"> The body for a header regex sanitizer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizer"/> is null. </exception>
        public async Task<Response> AddHeaderSanitizerAsync(HeaderRegexSanitizer sanitizer, CancellationToken cancellationToken = default)
        {
            if (sanitizer == null)
            {
                throw new ArgumentNullException(nameof(sanitizer));
            }

            using var message = CreateAddHeaderSanitizerRequest(sanitizer);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="sanitizer"> The body for a header regex sanitizer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizer"/> is null. </exception>
        public Response AddHeaderSanitizer(HeaderRegexSanitizer sanitizer, CancellationToken cancellationToken = default)
        {
            if (sanitizer == null)
            {
                throw new ArgumentNullException(nameof(sanitizer));
            }

            using var message = CreateAddHeaderSanitizerRequest(sanitizer);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
