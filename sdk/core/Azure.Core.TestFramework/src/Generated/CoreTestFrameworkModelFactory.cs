// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Core.TestFramework.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class CoreTestFrameworkModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="StartInformation"/>. </summary>
        /// <param name="xRecordingFile"></param>
        /// <param name="xRecordingAssetsFile"></param>
        /// <returns> A new <see cref="Models.StartInformation"/> instance for mocking. </returns>
        public static StartInformation StartInformation(string xRecordingFile = null, string xRecordingAssetsFile = null)
        {
            return new StartInformation(xRecordingFile, xRecordingAssetsFile, default);
        }

        /// <summary> Initializes a new instance of <see cref="BodyKeySanitizer"/>. </summary>
        /// <param name="jsonPath"></param>
        /// <param name="value"></param>
        /// <param name="regex"></param>
        /// <param name="groupForReplace"></param>
        /// <returns> A new <see cref="Models.BodyKeySanitizer"/> instance for mocking. </returns>
        public static BodyKeySanitizer BodyKeySanitizer(string jsonPath = null, string value = null, string regex = null, string groupForReplace = null)
        {
            return new BodyKeySanitizer(jsonPath, value, regex, groupForReplace, default);
        }

        /// <summary> Initializes a new instance of <see cref="HeaderRegexSanitizer"/>. </summary>
        /// <param name="key"></param>
        /// <param name="value"></param>
        /// <param name="regex"></param>
        /// <param name="groupForReplace"></param>
        /// <returns> A new <see cref="Models.HeaderRegexSanitizer"/> instance for mocking. </returns>
        public static HeaderRegexSanitizer HeaderRegexSanitizer(string key = null, string value = null, string regex = null, string groupForReplace = null)
        {
            return new HeaderRegexSanitizer(key, value, regex, groupForReplace, default);
        }

        /// <summary> Initializes a new instance of <see cref="UriRegexSanitizer"/>. </summary>
        /// <param name="regex"></param>
        /// <param name="value"></param>
        /// <param name="groupForReplace"></param>
        /// <returns> A new <see cref="Models.UriRegexSanitizer"/> instance for mocking. </returns>
        public static UriRegexSanitizer UriRegexSanitizer(string regex = null, string value = null, string groupForReplace = null)
        {
            return new UriRegexSanitizer(regex, value, groupForReplace, default);
        }

        /// <summary> Initializes a new instance of <see cref="BodyRegexSanitizer"/>. </summary>
        /// <param name="regex"></param>
        /// <param name="value"></param>
        /// <param name="groupForReplace"></param>
        /// <param name="condition"> Condition to apply for the sanitization or transform. If the condition is not met, sanitization/transform is not performed. </param>
        /// <returns> A new <see cref="Models.BodyRegexSanitizer"/> instance for mocking. </returns>
        public static BodyRegexSanitizer BodyRegexSanitizer(string regex = null, string value = null, string groupForReplace = null, Condition condition = null)
        {
            return new BodyRegexSanitizer(regex, value, groupForReplace, condition, default);
        }

        /// <summary> Initializes a new instance of <see cref="HeaderTransform"/>. </summary>
        /// <param name="key"></param>
        /// <param name="value"></param>
        /// <param name="condition"> Condition to apply for the sanitization or transform. If the condition is not met, sanitization/transform is not performed. </param>
        /// <returns> A new <see cref="Models.HeaderTransform"/> instance for mocking. </returns>
        public static HeaderTransform HeaderTransform(string key = null, string value = null, Condition condition = null)
        {
            return new HeaderTransform(key, value, condition, default);
        }
    }
}
