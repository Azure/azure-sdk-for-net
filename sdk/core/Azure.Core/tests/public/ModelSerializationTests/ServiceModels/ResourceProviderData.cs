// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Tests.Public.ResourceManager.Resources.Models;
using Azure.Core.Serialization;

namespace Azure.Core.Tests.Public.ResourceManager.Resources
{
    /// <summary>
    /// A class representing the ResourceProvider data model.
    /// Resource provider information.
    /// </summary>
    public partial class ResourceProviderData
    {
        public static implicit operator RequestContent(ResourceProviderData resourceProviderData)
        {
            var content = new MultiBufferRequestContent();
            using var writer = new Utf8JsonWriter(content);
            ((IJsonModelSerializable)resourceProviderData).Serialize(writer, ModelSerializerOptions.AzureSerivceDefault);
            writer.Flush();
            return content;
        }

        public static explicit operator ResourceProviderData(Response response)
        {
            using JsonDocument jsonDocument = JsonDocument.Parse(response.ContentStream);
            return DeserializeResourceProviderData(jsonDocument.RootElement);
        }

        /// <summary> Initializes a new instance of ProviderData. </summary>
        public ResourceProviderData()
        {
            ResourceTypes = new ChangeTrackingList<ProviderResourceType>();
        }

        /// <summary> Initializes a new instance of ProviderData. </summary>
        /// <param name="id"> The provider ID. </param>
        /// <param name="namespace"> The namespace of the resource provider. </param>
        /// <param name="registrationState"> The registration state of the resource provider. </param>
        /// <param name="registrationPolicy"> The registration policy of the resource provider. </param>
        /// <param name="resourceTypes"> The collection of provider resource types. </param>
        /// <param name="providerAuthorizationConsentState"> The provider authorization consent state. </param>
        internal ResourceProviderData(ResourceIdentifier id, string @namespace, string registrationState, string registrationPolicy, IReadOnlyList<ProviderResourceType> resourceTypes, ProviderAuthorizationConsentState? providerAuthorizationConsentState)
        {
            Id = id;
            Namespace = @namespace;
            RegistrationState = registrationState;
            RegistrationPolicy = registrationPolicy;
            ResourceTypes = resourceTypes;
            ProviderAuthorizationConsentState = providerAuthorizationConsentState;
        }

        /// <summary> The provider ID. </summary>
        public ResourceIdentifier Id { get; }

        internal partial class ProviderDataConverter : JsonConverter<ResourceProviderData>
        {
            public override void Write(Utf8JsonWriter writer, ResourceProviderData providerData, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(providerData);
            }
            public override ResourceProviderData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeResourceProviderData(document.RootElement);
            }
        }

        /// <summary> The namespace of the resource provider. </summary>
        public string Namespace { get; }
        /// <summary> The registration state of the resource provider. </summary>
        public string RegistrationState { get; }
        /// <summary> The registration policy of the resource provider. </summary>
        public string RegistrationPolicy { get; }
        /// <summary> The collection of provider resource types. </summary>
        public IReadOnlyList<ProviderResourceType> ResourceTypes { get; }
        /// <summary> The provider authorization consent state. </summary>
        public ProviderAuthorizationConsentState? ProviderAuthorizationConsentState { get; }
    }
}
