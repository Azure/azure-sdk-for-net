// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Diagnostics.Tracing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.Core.Tests.Public.ResourceManager.Compute.Models;
using Azure.Core.Tests.Public.ResourceManager.Models;
using Azure.Core.Tests.Public.ResourceManager.Resources.Models;
using Newtonsoft.Json.Linq;

namespace Azure.Core.Tests.Public.ResourceManager.Compute
{
    public partial class AvailabilitySetData : IUtf8JsonSerializable, IJsonModelSerializable<AvailabilitySetData>, IJsonModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModelSerializable<AvailabilitySetData>)this).Serialize(writer, new ModelSerializerOptions(ModelSerializerFormat.Wire));

        void IJsonModelSerializable<AvailabilitySetData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options) => Serialize(writer, options);

        private void Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            if (options.Format == ModelSerializerFormat.Json)
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format == ModelSerializerFormat.Json)
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id.ToString());
            }
            if (options.Format == ModelSerializerFormat.Json)
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType.ToString());
            }
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(PlatformUpdateDomainCount))
            {
                writer.WritePropertyName("platformUpdateDomainCount"u8);
                writer.WriteNumberValue(PlatformUpdateDomainCount.Value);
            }
            if (Optional.IsDefined(PlatformFaultDomainCount))
            {
                writer.WritePropertyName("platformFaultDomainCount"u8);
                writer.WriteNumberValue(PlatformFaultDomainCount.Value);
            }
            if (Optional.IsCollectionDefined(VirtualMachines))
            {
                writer.WritePropertyName("virtualMachines"u8);
                writer.WriteStartArray();
                foreach (var item in VirtualMachines)
                {
                    JsonSerializer.Serialize(writer, item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ProximityPlacementGroup))
            {
                writer.WritePropertyName("proximityPlacementGroup"u8);
                JsonSerializer.Serialize(writer, ProximityPlacementGroup);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        public static AvailabilitySetData DeserializeAvailabilitySetData(JsonElement element, ModelSerializerOptions? options = default)
        {
            options ??= new ModelSerializerOptions(ModelSerializerFormat.Wire);

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ComputeSku> sku = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<int> platformUpdateDomainCount = default;
            Optional<int> platformFaultDomainCount = default;
            Optional<IList<WritableSubResource>> virtualMachines = default;
            Optional<WritableSubResource> proximityPlacementGroup = default;
            Optional<IReadOnlyList<InstanceViewStatus>> statuses = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = ComputeSku.DeserializeComputeSku(property.Value, options.Value);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("platformUpdateDomainCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            platformUpdateDomainCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("platformFaultDomainCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            platformFaultDomainCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("virtualMachines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<WritableSubResource> array = new List<WritableSubResource>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(JsonSerializer.Deserialize<WritableSubResource>(item.GetRawText()));
                            }
                            virtualMachines = array;
                            continue;
                        }
                        if (property0.NameEquals("proximityPlacementGroup"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            proximityPlacementGroup = JsonSerializer.Deserialize<WritableSubResource>(property0.Value.GetRawText());
                            continue;
                        }
                        if (property0.NameEquals("statuses"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<InstanceViewStatus> array = new List<InstanceViewStatus>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(InstanceViewStatus.DeserializeInstanceViewStatus(item, options.Value));
                            }
                            statuses = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new AvailabilitySetData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, sku.Value, Optional.ToNullable(platformUpdateDomainCount), Optional.ToNullable(platformFaultDomainCount), Optional.ToList(virtualMachines), proximityPlacementGroup, Optional.ToList(statuses));
        }

        AvailabilitySetData IModelSerializable<AvailabilitySetData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            using var doc = JsonDocument.Parse(data);
            return DeserializeAvailabilitySetData(doc.RootElement, options);
        }

        // only used for public access to internal serialize
        public void Serialize(Utf8JsonWriter writer) => ((IUtf8JsonSerializable)this).Write(writer);

        private struct AvailabilitySetDataProperties
        {
            public Optional<ComputeSku> Sku { get; set; }
            public Optional<IDictionary<string, string>> Tags { get; set; }
            public AzureLocation Location { get; set; }
            public ResourceIdentifier Id { get; set; }
            public string Name { get; set; }
            public ResourceType ResourceType { get; set; }
            public Optional<SystemData> SystemData { get; set; }
            public Optional<int> PlatformUpdateDomainCount { get; set; }
            public Optional<int> PlatformFaultDomainCount { get; set; }
            public Optional<IList<WritableSubResource>> VirtualMachines { get; set; }
            public Optional<WritableSubResource> ProximityPlacementGroup { get; set; }
            public Optional<IReadOnlyList<InstanceViewStatus>> Statuses { get; set; }
        }

        AvailabilitySetData IJsonModelSerializable<AvailabilitySetData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            if (!reader.TryDeserialize<AvailabilitySetDataProperties>(options, SetProperty, out var properties))
                return null;

            return new AvailabilitySetData(
                properties.Id,
                properties.Name,
                properties.ResourceType,
                properties.SystemData.Value,
                Optional.ToDictionary(properties.Tags),
                properties.Location,
                properties.Sku.Value,
                Optional.ToNullable(properties.PlatformUpdateDomainCount),
                Optional.ToNullable(properties.PlatformFaultDomainCount),
                Optional.ToList(properties.VirtualMachines),
                properties.ProximityPlacementGroup,
                Optional.ToList(properties.Statuses));
        }

        private static void SetProperty(ReadOnlySpan<byte> propertyName, ref AvailabilitySetDataProperties properties, ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            if (propertyName.SequenceEqual("tags"u8))
            {
                properties.Tags = reader.GetDictionary<string, string>(options);
                return;
            }
            if (propertyName.SequenceEqual("sku"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.Sku = reader.GetObject<ComputeSku>(options);
                return;
            }
            if (propertyName.SequenceEqual("location"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.Location = new AzureLocation(reader.GetString());
                return;
            }
            if (propertyName.SequenceEqual("id"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.Id = new ResourceIdentifier(reader.GetString());
                return;
            }
            if (propertyName.SequenceEqual("name"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.Name = reader.GetString();
                return;
            }
            if (propertyName.SequenceEqual("type"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.ResourceType = new ResourceType(reader.GetString());
                return;
            }
            if (propertyName.SequenceEqual("systemData"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.SystemData = reader.GetObject<SystemData>(options);
                return;
            }
            if (propertyName.SequenceEqual("properties"u8))
            {
                //this is an inline object (from flatten?)
                reader.Read();
                if (reader.TokenType != JsonTokenType.StartObject)
                    throw new FormatException("Expected StartObject token");
                while (reader.Read())
                {
                    if (reader.TokenType == JsonTokenType.EndObject)
                        break;

                    if (reader.TokenType != JsonTokenType.PropertyName)
                        throw new FormatException("Expected PropertyName token");

                    var innerPropertyName = reader.ValueSpan;
                    SetProperty(innerPropertyName, ref properties, ref reader, options);
                }
                return;
            }
            if (propertyName.SequenceEqual("platformUpdateDomainCount"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.PlatformUpdateDomainCount = reader.GetInt32();
                return;
            }
            if (propertyName.SequenceEqual("platformFaultDomainCount"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.PlatformFaultDomainCount = reader.GetInt32();
                return;
            }
            if (propertyName.SequenceEqual("virtualMachines"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                {
                    properties.VirtualMachines = reader.GetList<WritableSubResource>(options);
                }
                return;
            }
            if (propertyName.SequenceEqual("proximityPlacementGroup"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                    properties.ProximityPlacementGroup = reader.GetObject<WritableSubResource>(options);
                return;
            }
            if (propertyName.SequenceEqual("statuses"u8))
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.Null)
                {
                    properties.Statuses = reader.GetList<InstanceViewStatus>(options);
                }
                return;
            }
            reader.Skip();
        }

        BinaryData IModelSerializable<AvailabilitySetData>.Serialize(ModelSerializerOptions options)
        {
            return ModelSerializerHelper.SerializeToBinaryData((writer) => { Serialize(writer, options); });
        }

        object IModelSerializable<object>.Deserialize(BinaryData data, ModelSerializerOptions options) => ((IModelSerializable<AvailabilitySetData>)this).Deserialize(data, options);

        BinaryData IModelSerializable<object>.Serialize(ModelSerializerOptions options) => ((IModelSerializable<AvailabilitySetData>)this).Serialize(options);

        void IJsonModelSerializable<object>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options) => ((IJsonModelSerializable<AvailabilitySetData>)this).Serialize(writer, options);

        object IJsonModelSerializable<object>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options) => ((IJsonModelSerializable<AvailabilitySetData>)this).Deserialize(ref reader, options);
    }
}
