// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy.Admin
{
    /// <summary></summary>
    public partial class TestProxyAdminClient
    {
        private readonly Uri _endpoint;

        /// <summary> Initializes a new instance of TestProxyAdminClient for mocking. </summary>
        protected TestProxyAdminClient()
        {
        }

        /// <summary> Initializes a new instance of TestProxyAdminClient. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        internal TestProxyAdminClient(ClientPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Set the matcher for the test proxy. If a recording ID is provided in the header,
        /// the matcher will be set only for that session. Otherwise, it will be set globally.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="matcherType"> The type of matcher to set. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult SetMatcher(string matcherType, BinaryContent content = null, RequestOptions options = null)
        {
            using PipelineMessage message = CreateSetMatcherRequest(matcherType, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Set the matcher for the test proxy. If a recording ID is provided in the header,
        /// the matcher will be set only for that session. Otherwise, it will be set globally.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="matcherType"> The type of matcher to set. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> SetMatcherAsync(string matcherType, BinaryContent content = null, RequestOptions options = null)
        {
            using PipelineMessage message = CreateSetMatcherRequest(matcherType, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// Set the matcher for the test proxy. If a recording ID is provided in the header,
        /// the matcher will be set only for that session. Otherwise, it will be set globally.
        /// </summary>
        /// <param name="matcherType"> The type of matcher to set. </param>
        /// <param name="matcher"> The matcher configuration. Only required if matcherType is CustomDefaultMatcher. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult SetMatcher(MatcherType matcherType, CustomDefaultMatcher matcher = default, CancellationToken cancellationToken = default)
        {
            return SetMatcher(matcherType.ToSerialString(), matcher, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// Set the matcher for the test proxy. If a recording ID is provided in the header,
        /// the matcher will be set only for that session. Otherwise, it will be set globally.
        /// </summary>
        /// <param name="matcherType"> The type of matcher to set. </param>
        /// <param name="matcher"> The matcher configuration. Only required if matcherType is CustomDefaultMatcher. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> SetMatcherAsync(MatcherType matcherType, CustomDefaultMatcher matcher = default, CancellationToken cancellationToken = default)
        {
            return await SetMatcherAsync(matcherType.ToSerialString(), matcher, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add sanitizers to the test proxy. If a recording ID is provided in the header,
        /// the sanitizers will be added only for that session. Otherwise, they will be added globally.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddSanitizers(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddSanitizersRequest(recordingId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add sanitizers to the test proxy. If a recording ID is provided in the header,
        /// the sanitizers will be added only for that session. Otherwise, they will be added globally.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddSanitizersAsync(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddSanitizersRequest(recordingId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// Add sanitizers to the test proxy. If a recording ID is provided in the header,
        /// the sanitizers will be added only for that session. Otherwise, they will be added globally.
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="sanitizers"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizers"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddSanitizers(string recordingId, IEnumerable<SanitizerAddition> sanitizers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizers, nameof(sanitizers));

            using BinaryContent content = BinaryContentHelper.FromEnumerable(sanitizers);
            return AddSanitizers(recordingId, content, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// Add sanitizers to the test proxy. If a recording ID is provided in the header,
        /// the sanitizers will be added only for that session. Otherwise, they will be added globally.
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="sanitizers"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizers"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddSanitizersAsync(string recordingId, IEnumerable<SanitizerAddition> sanitizers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizers, nameof(sanitizers));

            using BinaryContent content = BinaryContentHelper.FromEnumerable(sanitizers);
            return await AddSanitizersAsync(recordingId, content, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Remove sanitizers from the test proxy. If a recording ID is provided in the header,
        /// the sanitizers will be removed only for that session. Otherwise, they will be removed globally.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult RemoveSanitizers(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateRemoveSanitizersRequest(recordingId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Remove sanitizers from the test proxy. If a recording ID is provided in the header,
        /// the sanitizers will be removed only for that session. Otherwise, they will be removed globally.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> RemoveSanitizersAsync(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateRemoveSanitizersRequest(recordingId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// Remove sanitizers from the test proxy. If a recording ID is provided in the header,
        /// the sanitizers will be removed only for that session. Otherwise, they will be removed globally.
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="sanitizers"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizers"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<RemovedSanitizers> RemoveSanitizers(string recordingId, SanitizerList sanitizers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizers, nameof(sanitizers));

            ClientResult result = RemoveSanitizers(recordingId, sanitizers, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((RemovedSanitizers)result, result.GetRawResponse());
        }

        /// <summary>
        /// Remove sanitizers from the test proxy. If a recording ID is provided in the header,
        /// the sanitizers will be removed only for that session. Otherwise, they will be removed globally.
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="sanitizers"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizers"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<RemovedSanitizers>> RemoveSanitizersAsync(string recordingId, SanitizerList sanitizers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizers, nameof(sanitizers));

            ClientResult result = await RemoveSanitizersAsync(recordingId, sanitizers, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((RemovedSanitizers)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Set recording options for the test proxy. If a recording ID is provided in the header,
        /// the options will be set only for that session. Otherwise, they will be set globally.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult SetRecordingOptions(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateSetRecordingOptionsRequest(recordingId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Set recording options for the test proxy. If a recording ID is provided in the header,
        /// the options will be set only for that session. Otherwise, they will be set globally.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> SetRecordingOptionsAsync(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateSetRecordingOptionsRequest(recordingId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// Set recording options for the test proxy. If a recording ID is provided in the header,
        /// the options will be set only for that session. Otherwise, they will be set globally.
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult SetRecordingOptions(string recordingId, RecordingOptions body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            return SetRecordingOptions(recordingId, body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// Set recording options for the test proxy. If a recording ID is provided in the header,
        /// the options will be set only for that session. Otherwise, they will be set globally.
        /// </summary>
        /// <param name="recordingId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> SetRecordingOptionsAsync(string recordingId, RecordingOptions body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            return await SetRecordingOptionsAsync(recordingId, body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
