// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Threading;
using Microsoft.ClientModel.TestFramework.TestProxy;

namespace Microsoft.ClientModel.TestFramework
{
    /// <summary></summary>
    public partial class TestFrameworkClient
    {
        private readonly Uri _endpoint;
        private TestProxyClient _cachedTestProxyClient;

        /// <summary> Initializes a new instance of TestFrameworkClient for mocking. </summary>
        protected TestFrameworkClient()
        {
        }

        /// <summary> Initializes a new instance of TestFrameworkClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TestFrameworkClient(Uri endpoint) : this(endpoint, new TestFrameworkClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TestFrameworkClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TestFrameworkClient(Uri endpoint, TestFrameworkClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new TestFrameworkClientOptions();

            _endpoint = endpoint;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary> Initializes a new instance of TestProxyClient. </summary>
        public virtual TestProxyClient GetTestProxyClient()
        {
            return Volatile.Read(ref _cachedTestProxyClient) ?? Interlocked.CompareExchange(ref _cachedTestProxyClient, new TestProxyClient(Pipeline, _endpoint), null) ?? _cachedTestProxyClient;
        }
    }
}
