// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy.Admin
{
    /// <summary> The TestProxyCertificate. </summary>
    public partial class TestProxyCertificate
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="TestProxyCertificate"/>. </summary>
        /// <param name="pemValue"></param>
        /// <param name="pemKey"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="pemValue"/> or <paramref name="pemKey"/> is null. </exception>
        public TestProxyCertificate(string pemValue, string pemKey)
        {
            Argument.AssertNotNull(pemValue, nameof(pemValue));
            Argument.AssertNotNull(pemKey, nameof(pemKey));

            PemValue = pemValue;
            PemKey = pemKey;
        }

        /// <summary> Initializes a new instance of <see cref="TestProxyCertificate"/>. </summary>
        /// <param name="pemValue"></param>
        /// <param name="pemKey"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal TestProxyCertificate(string pemValue, string pemKey, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            PemValue = pemValue;
            PemKey = pemKey;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the PemValue. </summary>
        public string PemValue { get; }

        /// <summary> Gets the PemKey. </summary>
        public string PemKey { get; }
    }
}
