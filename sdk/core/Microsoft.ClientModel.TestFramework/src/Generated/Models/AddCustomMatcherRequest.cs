// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy
{
    /// <summary> The AddCustomMatcherRequest. </summary>
    internal partial class AddCustomMatcherRequest
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="AddCustomMatcherRequest"/>. </summary>
        /// <param name="matcher"> The body for a custom matcher. </param>
        internal AddCustomMatcherRequest(CustomDefaultMatcher matcher)
        {
            Matcher = matcher;
        }

        /// <summary> Initializes a new instance of <see cref="AddCustomMatcherRequest"/>. </summary>
        /// <param name="matcherType"></param>
        /// <param name="recordingId"></param>
        /// <param name="matcher"> The body for a custom matcher. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal AddCustomMatcherRequest(string matcherType, string recordingId, CustomDefaultMatcher matcher, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            MatcherType = matcherType;
            RecordingId = recordingId;
            Matcher = matcher;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the MatcherType. </summary>
        public string MatcherType { get; } = "CustomDefaultMatcher";

        /// <summary> Gets the RecordingId. </summary>
        public string RecordingId { get; }

        /// <summary> The body for a custom matcher. </summary>
        public CustomDefaultMatcher Matcher { get; }
    }
}
