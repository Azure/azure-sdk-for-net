// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy.Admin
{
    /// <summary>
    /// The SanitizerAddition.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="BodyKeySanitizer"/>, <see cref="BodyRegexSanitizer"/>, <see cref="BodyStringSanitizer"/>, <see cref="GeneralRegexSanitizer"/>, <see cref="GeneralStringSanitizer"/>, <see cref="HeaderRegexSanitizer"/>, <see cref="HeaderStringSanitizer"/>, <see cref="OAuthResponseSanitizer"/>, <see cref="RegexEntrySanitizer"/>, <see cref="RemoveHeaderSanitizer"/>, <see cref="UriRegexSanitizer"/>, <see cref="UriStringSanitizer"/>, and <see cref="UriSubscriptionIdSanitizer"/>.
    /// </summary>
    [PersistableModelProxy(typeof(UnknownSanitizerAddition))]
    public abstract partial class SanitizerAddition : IJsonModel<SanitizerAddition>
    {
        /// <summary> Initializes a new instance of <see cref="SanitizerAddition"/> for deserialization. </summary>
        internal SanitizerAddition()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<SanitizerAddition>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SanitizerAddition>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SanitizerAddition)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("Name"u8);
            writer.WriteStringValue(Name.ToSerialString());
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SanitizerAddition IJsonModel<SanitizerAddition>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual SanitizerAddition JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SanitizerAddition>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SanitizerAddition)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSanitizerAddition(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static SanitizerAddition DeserializeSanitizerAddition(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("Name"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "BodyKeySanitizer":
                        return BodyKeySanitizer.DeserializeBodyKeySanitizer(element, options);
                    case "BodyRegexSanitizer":
                        return BodyRegexSanitizer.DeserializeBodyRegexSanitizer(element, options);
                    case "BodyStringSanitizer":
                        return BodyStringSanitizer.DeserializeBodyStringSanitizer(element, options);
                    case "GeneralRegexSanitizer":
                        return GeneralRegexSanitizer.DeserializeGeneralRegexSanitizer(element, options);
                    case "GeneralStringSanitizer":
                        return GeneralStringSanitizer.DeserializeGeneralStringSanitizer(element, options);
                    case "HeaderRegexSanitizer":
                        return HeaderRegexSanitizer.DeserializeHeaderRegexSanitizer(element, options);
                    case "HeaderStringSanitizer":
                        return HeaderStringSanitizer.DeserializeHeaderStringSanitizer(element, options);
                    case "OAuthResponseSanitizer":
                        return OAuthResponseSanitizer.DeserializeOAuthResponseSanitizer(element, options);
                    case "RegexEntrySanitizer":
                        return RegexEntrySanitizer.DeserializeRegexEntrySanitizer(element, options);
                    case "RemoveHeaderSanitizer":
                        return RemoveHeaderSanitizer.DeserializeRemoveHeaderSanitizer(element, options);
                    case "UriRegexSanitizer":
                        return UriRegexSanitizer.DeserializeUriRegexSanitizer(element, options);
                    case "UriStringSanitizer":
                        return UriStringSanitizer.DeserializeUriStringSanitizer(element, options);
                    case "UriSubscriptionIdSanitizer":
                        return UriSubscriptionIdSanitizer.DeserializeUriSubscriptionIdSanitizer(element, options);
                }
            }
            return UnknownSanitizerAddition.DeserializeUnknownSanitizerAddition(element, options);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<SanitizerAddition>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SanitizerAddition>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, MicrosoftClientModelTestFrameworkContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SanitizerAddition)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SanitizerAddition IPersistableModel<SanitizerAddition>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual SanitizerAddition PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SanitizerAddition>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeSanitizerAddition(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SanitizerAddition)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<SanitizerAddition>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
