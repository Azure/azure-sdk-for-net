// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy.Admin
{
    /// <summary> The HeaderStringSanitizerBody. </summary>
    public partial class HeaderStringSanitizerBody
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HeaderStringSanitizerBody"/>. </summary>
        /// <param name="key"></param>
        /// <param name="target"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="target"/> is null. </exception>
        public HeaderStringSanitizerBody(string key, string target)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(target, nameof(target));

            Key = key;
            Target = target;
        }

        /// <summary> Initializes a new instance of <see cref="HeaderStringSanitizerBody"/>. </summary>
        /// <param name="key"></param>
        /// <param name="target"></param>
        /// <param name="value"></param>
        /// <param name="condition"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HeaderStringSanitizerBody(string key, string target, string value, ApplyCondition condition, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Key = key;
            Target = target;
            Value = value;
            Condition = condition;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the Key. </summary>
        public string Key { get; }

        /// <summary> Gets the Target. </summary>
        public string Target { get; }

        /// <summary> Gets or sets the Value. </summary>
        public string Value { get; set; }

        /// <summary> Gets or sets the Condition. </summary>
        public ApplyCondition Condition { get; set; }
    }
}
