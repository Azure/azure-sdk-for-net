// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.ClientModel.TestFramework
{
    internal partial class BodyKeySanitizer
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BodyKeySanitizer"/>. </summary>
        /// <param name="jsonPath"></param>
        /// <param name="value"></param>
        /// <param name="regex"></param>
        /// <param name="groupForReplace"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="jsonPath"/>, <paramref name="value"/>, <paramref name="regex"/> or <paramref name="groupForReplace"/> is null. </exception>
        public BodyKeySanitizer(string jsonPath, string value, string regex, string groupForReplace)
        {
            Argument.AssertNotNull(jsonPath, nameof(jsonPath));
            Argument.AssertNotNull(value, nameof(value));
            Argument.AssertNotNull(regex, nameof(regex));
            Argument.AssertNotNull(groupForReplace, nameof(groupForReplace));

            JsonPath = jsonPath;
            Value = value;
            Regex = regex;
            GroupForReplace = groupForReplace;
        }

        /// <summary> Initializes a new instance of <see cref="BodyKeySanitizer"/>. </summary>
        /// <param name="jsonPath"></param>
        /// <param name="value"></param>
        /// <param name="regex"></param>
        /// <param name="groupForReplace"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal BodyKeySanitizer(string jsonPath, string value, string regex, string groupForReplace, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            JsonPath = jsonPath;
            Value = value;
            Regex = regex;
            GroupForReplace = groupForReplace;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the JsonPath. </summary>
        public string JsonPath { get; }

        /// <summary> Gets the Value. </summary>
        public string Value { get; }

        /// <summary> Gets the Regex. </summary>
        public string Regex { get; }

        /// <summary> Gets the GroupForReplace. </summary>
        public string GroupForReplace { get; }
    }
}
