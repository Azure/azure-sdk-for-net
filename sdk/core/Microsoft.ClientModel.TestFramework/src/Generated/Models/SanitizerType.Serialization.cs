// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.ClientModel.TestFramework.TestProxy.Admin
{
    internal static partial class SanitizerTypeExtensions
    {
        /// <param name="value"> The value to serialize. </param>
        public static string ToSerialString(this SanitizerType value) => value switch
        {
            SanitizerType.BodyKeySanitizer => "BodyKeySanitizer",
            SanitizerType.BodyRegexSanitizer => "BodyRegexSanitizer",
            SanitizerType.BodyStringSanitizer => "BodyStringSanitizer",
            SanitizerType.GeneralRegexSanitizer => "GeneralRegexSanitizer",
            SanitizerType.GeneralStringSanitizer => "GeneralStringSanitizer",
            SanitizerType.HeaderRegexSanitizer => "HeaderRegexSanitizer",
            SanitizerType.HeaderStringSanitizer => "HeaderStringSanitizer",
            SanitizerType.OAuthResponseSanitizer => "OAuthResponseSanitizer",
            SanitizerType.RegexEntrySanitizer => "RegexEntrySanitizer",
            SanitizerType.RemoveHeaderSanitizer => "RemoveHeaderSanitizer",
            SanitizerType.UriRegexSanitizer => "UriRegexSanitizer",
            SanitizerType.UriStringSanitizer => "UriStringSanitizer",
            SanitizerType.UriSubscriptionIdSanitizer => "UriSubscriptionIdSanitizer",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown SanitizerType value.")
        };

        /// <param name="value"> The value to deserialize. </param>
        public static SanitizerType ToSanitizerType(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BodyKeySanitizer"))
            {
                return SanitizerType.BodyKeySanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BodyRegexSanitizer"))
            {
                return SanitizerType.BodyRegexSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BodyStringSanitizer"))
            {
                return SanitizerType.BodyStringSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "GeneralRegexSanitizer"))
            {
                return SanitizerType.GeneralRegexSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "GeneralStringSanitizer"))
            {
                return SanitizerType.GeneralStringSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "HeaderRegexSanitizer"))
            {
                return SanitizerType.HeaderRegexSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "HeaderStringSanitizer"))
            {
                return SanitizerType.HeaderStringSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "OAuthResponseSanitizer"))
            {
                return SanitizerType.OAuthResponseSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "RegexEntrySanitizer"))
            {
                return SanitizerType.RegexEntrySanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "RemoveHeaderSanitizer"))
            {
                return SanitizerType.RemoveHeaderSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UriRegexSanitizer"))
            {
                return SanitizerType.UriRegexSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UriStringSanitizer"))
            {
                return SanitizerType.UriStringSanitizer;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UriSubscriptionIdSanitizer"))
            {
                return SanitizerType.UriSubscriptionIdSanitizer;
            }
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown SanitizerType value.");
        }
    }
}
