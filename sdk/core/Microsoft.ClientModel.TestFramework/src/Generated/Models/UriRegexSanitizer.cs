// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy
{
    /// <summary> The UriRegexSanitizer. </summary>
    public partial class UriRegexSanitizer
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="UriRegexSanitizer"/>. </summary>
        /// <param name="regex"></param>
        /// <param name="value"></param>
        /// <param name="groupForReplace"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="regex"/>, <paramref name="value"/> or <paramref name="groupForReplace"/> is null. </exception>
        public UriRegexSanitizer(string regex, string value, string groupForReplace)
        {
            Argument.AssertNotNull(regex, nameof(regex));
            Argument.AssertNotNull(value, nameof(value));
            Argument.AssertNotNull(groupForReplace, nameof(groupForReplace));

            Regex = regex;
            Value = value;
            GroupForReplace = groupForReplace;
        }

        /// <summary> Initializes a new instance of <see cref="UriRegexSanitizer"/>. </summary>
        /// <param name="regex"></param>
        /// <param name="value"></param>
        /// <param name="groupForReplace"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal UriRegexSanitizer(string regex, string value, string groupForReplace, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Regex = regex;
            Value = value;
            GroupForReplace = groupForReplace;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the Regex. </summary>
        public string Regex { get; }

        /// <summary> Gets the Value. </summary>
        public string Value { get; }

        /// <summary> Gets the GroupForReplace. </summary>
        public string GroupForReplace { get; }
    }
}
