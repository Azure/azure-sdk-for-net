// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy
{
    /// <summary> The AddHeaderTransformRequest. </summary>
    internal partial class AddHeaderTransformRequest
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="AddHeaderTransformRequest"/>. </summary>
        /// <param name="transform"> The body for a header transform. </param>
        internal AddHeaderTransformRequest(HeaderTransform transform)
        {
            Transform = transform;
        }

        /// <summary> Initializes a new instance of <see cref="AddHeaderTransformRequest"/>. </summary>
        /// <param name="transformType"></param>
        /// <param name="recordingId"></param>
        /// <param name="transform"> The body for a header transform. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal AddHeaderTransformRequest(string transformType, string recordingId, HeaderTransform transform, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            TransformType = transformType;
            RecordingId = recordingId;
            Transform = transform;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the TransformType. </summary>
        public string TransformType { get; } = "HeaderTransform";

        /// <summary> Gets the RecordingId. </summary>
        public string RecordingId { get; }

        /// <summary> The body for a header transform. </summary>
        public HeaderTransform Transform { get; }
    }
}
