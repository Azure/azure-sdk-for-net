// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy
{
    /// <summary> The ProxyOptionsTransport. </summary>
    public partial class ProxyOptionsTransport
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ProxyOptionsTransport"/>. </summary>
        /// <param name="allowAutoRedirect"></param>
        /// <param name="tlsValidationCert"></param>
        /// <param name="certificates"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="tlsValidationCert"/> or <paramref name="certificates"/> is null. </exception>
        public ProxyOptionsTransport(bool allowAutoRedirect, string tlsValidationCert, IEnumerable<ProxyOptionsTransportCertificationsItem> certificates)
        {
            Argument.AssertNotNull(tlsValidationCert, nameof(tlsValidationCert));
            Argument.AssertNotNull(certificates, nameof(certificates));

            AllowAutoRedirect = allowAutoRedirect;
            TlsValidationCert = tlsValidationCert;
            Certificates = certificates.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ProxyOptionsTransport"/>. </summary>
        /// <param name="allowAutoRedirect"></param>
        /// <param name="tlsValidationCert"></param>
        /// <param name="certificates"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ProxyOptionsTransport(bool allowAutoRedirect, string tlsValidationCert, IList<ProxyOptionsTransportCertificationsItem> certificates, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            AllowAutoRedirect = allowAutoRedirect;
            TlsValidationCert = tlsValidationCert;
            Certificates = certificates;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the AllowAutoRedirect. </summary>
        public bool AllowAutoRedirect { get; }

        /// <summary> Gets the TlsValidationCert. </summary>
        public string TlsValidationCert { get; }

        /// <summary> Gets the Certificates. </summary>
        public IList<ProxyOptionsTransportCertificationsItem> Certificates { get; }
    }
}
