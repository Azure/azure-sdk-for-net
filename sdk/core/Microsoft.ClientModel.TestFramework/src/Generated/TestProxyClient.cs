// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.ClientModel.TestFramework;

namespace Microsoft.ClientModel.TestFramework.TestProxy
{
    /// <summary></summary>
    public partial class TestProxyClient
    {
        private readonly Uri _endpoint;

        /// <summary> Initializes a new instance of TestProxyClient for mocking. </summary>
        protected TestProxyClient()
        {
        }

        /// <summary> Initializes a new instance of TestProxyClient. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        internal TestProxyClient(ClientPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Start playback for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StartPlayback(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartPlaybackRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Start playback for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StartPlaybackAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartPlaybackRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Start playback for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<StartPlaybackResponse> StartPlayback(StartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = StartPlayback(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((StartPlaybackResponse)result, result.GetRawResponse());
        }

        /// <summary> Start playback for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<StartPlaybackResponse>> StartPlaybackAsync(StartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await StartPlaybackAsync(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((StartPlaybackResponse)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Stop playback for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID to stop playback for. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StopPlayback(string recordingId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            using PipelineMessage message = CreateStopPlaybackRequest(recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Stop playback for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID to stop playback for. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StopPlaybackAsync(string recordingId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            using PipelineMessage message = CreateStopPlaybackRequest(recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Stop playback for a test. </summary>
        /// <param name="recordingId"> The recording ID to stop playback for. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<StopPlaybackResponse> StopPlayback(string recordingId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            ClientResult result = StopPlayback(recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((StopPlaybackResponse)result, result.GetRawResponse());
        }

        /// <summary> Stop playback for a test. </summary>
        /// <param name="recordingId"> The recording ID to stop playback for. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<StopPlaybackResponse>> StopPlaybackAsync(string recordingId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            ClientResult result = await StopPlaybackAsync(recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((StopPlaybackResponse)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Start recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StartRecord(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartRecordRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Start recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StartRecordAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartRecordRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Start recording for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<StartRecordResponse> StartRecord(StartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = StartRecord(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((StartRecordResponse)result, result.GetRawResponse());
        }

        /// <summary> Start recording for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<StartRecordResponse>> StartRecordAsync(StartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await StartRecordAsync(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((StartRecordResponse)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Stop recording a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="recordingSkip"> Set to request-response to skip recording this session. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/>, <paramref name="recordingSkip"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> or <paramref name="recordingSkip"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StopRecord(string recordingId, string recordingSkip, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNullOrEmpty(recordingSkip, nameof(recordingSkip));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStopRecordRequest(recordingId, recordingSkip, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Stop recording a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="recordingSkip"> Set to request-response to skip recording this session. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/>, <paramref name="recordingSkip"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> or <paramref name="recordingSkip"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StopRecordAsync(string recordingId, string recordingSkip, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNullOrEmpty(recordingSkip, nameof(recordingSkip));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStopRecordRequest(recordingId, recordingSkip, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Stop recording a test. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="recordingSkip"> Set to request-response to skip recording this session. </param>
        /// <param name="variables"> Variables for the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/>, <paramref name="recordingSkip"/> or <paramref name="variables"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> or <paramref name="recordingSkip"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult StopRecord(string recordingId, string recordingSkip, StopRecordRequest variables, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNullOrEmpty(recordingSkip, nameof(recordingSkip));
            Argument.AssertNotNull(variables, nameof(variables));

            return StopRecord(recordingId, recordingSkip, variables, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Stop recording a test. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="recordingSkip"> Set to request-response to skip recording this session. </param>
        /// <param name="variables"> Variables for the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/>, <paramref name="recordingSkip"/> or <paramref name="variables"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> or <paramref name="recordingSkip"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> StopRecordAsync(string recordingId, string recordingSkip, StopRecordRequest variables, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNullOrEmpty(recordingSkip, nameof(recordingSkip));
            Argument.AssertNotNull(variables, nameof(variables));

            return await StopRecordAsync(recordingId, recordingSkip, variables, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Set the proxy recording options.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult SetRecordingTransportOptions(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateSetRecordingTransportOptionsRequest(recordingId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Set the proxy recording options.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> SetRecordingTransportOptionsAsync(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateSetRecordingTransportOptionsRequest(recordingId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Set the proxy recording options. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="proxyOptions"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="proxyOptions"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult SetRecordingTransportOptions(string recordingId, ProxyOptions proxyOptions, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(proxyOptions, nameof(proxyOptions));

            return SetRecordingTransportOptions(recordingId, proxyOptions, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Set the proxy recording options. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="proxyOptions"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="proxyOptions"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> SetRecordingTransportOptionsAsync(string recordingId, ProxyOptions proxyOptions, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(proxyOptions, nameof(proxyOptions));

            return await SetRecordingTransportOptionsAsync(recordingId, proxyOptions, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Removes Sanitizers
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult RemoveSanitizers(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateRemoveSanitizersRequest(recordingId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Removes Sanitizers
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> RemoveSanitizersAsync(string recordingId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateRemoveSanitizersRequest(recordingId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Removes Sanitizers. </summary>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="sanitizers"> Sanitizers to remove. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="sanitizers"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult RemoveSanitizers(string recordingId, SanitizersToRemove sanitizers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(sanitizers, nameof(sanitizers));

            return RemoveSanitizers(recordingId, sanitizers, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Removes Sanitizers. </summary>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="sanitizers"> Sanitizers to remove. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="sanitizers"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> RemoveSanitizersAsync(string recordingId, SanitizersToRemove sanitizers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(sanitizers, nameof(sanitizers));

            return await RemoveSanitizersAsync(recordingId, sanitizers, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a sanitizer.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sanitizerType"> The type of sanitizer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the sanitizer to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sanitizerType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddSanitizer(string sanitizerType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddSanitizerRequest(sanitizerType, content, recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a sanitizer.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sanitizerType"> The type of sanitizer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the sanitizer to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sanitizerType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddSanitizerAsync(string sanitizerType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddSanitizerRequest(sanitizerType, content, recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a sanitizer. </summary>
        /// <param name="sanitizerType"> The type of sanitizer. </param>
        /// <param name="sanitizer"></param>
        /// <param name="recordingId"> The recording ID to apply the sanitizer to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sanitizerType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddSanitizer(string sanitizerType, BinaryData sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            return AddSanitizer(sanitizerType, BinaryContent.Create(sanitizer), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a sanitizer. </summary>
        /// <param name="sanitizerType"> The type of sanitizer. </param>
        /// <param name="sanitizer"></param>
        /// <param name="recordingId"> The recording ID to apply the sanitizer to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sanitizerType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddSanitizerAsync(string sanitizerType, BinaryData sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            return await AddSanitizerAsync(sanitizerType, BinaryContent.Create(sanitizer), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Stop recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddBodyKeySanitizer(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddBodyKeySanitizerRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Stop recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddBodyKeySanitizerAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddBodyKeySanitizerRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="sanitizerType"></param>
        /// <param name="sanitizer"> The body for a header regex sanitizer. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddBodyKeySanitizer(string sanitizerType, BodyKeySanitizer sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            AddBodyKeySanitizerRequest spreadModel = new AddBodyKeySanitizerRequest(sanitizerType, recordingId, sanitizer, null);
            return AddBodyKeySanitizer(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="sanitizerType"></param>
        /// <param name="sanitizer"> The body for a header regex sanitizer. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddBodyKeySanitizerAsync(string sanitizerType, BodyKeySanitizer sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            AddBodyKeySanitizerRequest spreadModel = new AddBodyKeySanitizerRequest(sanitizerType, recordingId, sanitizer, null);
            return await AddBodyKeySanitizerAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add header sanitizer.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddHeaderSanitizer(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddHeaderSanitizerRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add header sanitizer.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddHeaderSanitizerAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddHeaderSanitizerRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add header sanitizer. </summary>
        /// <param name="sanitizerType"></param>
        /// <param name="sanitizer"> The body for a header regex sanitizer. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddHeaderSanitizer(string sanitizerType, HeaderRegexSanitizer sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            AddHeaderSanitizerRequest spreadModel = new AddHeaderSanitizerRequest(sanitizerType, recordingId, sanitizer, null);
            return AddHeaderSanitizer(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add header sanitizer. </summary>
        /// <param name="sanitizerType"></param>
        /// <param name="sanitizer"> The body for a header regex sanitizer. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddHeaderSanitizerAsync(string sanitizerType, HeaderRegexSanitizer sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            AddHeaderSanitizerRequest spreadModel = new AddHeaderSanitizerRequest(sanitizerType, recordingId, sanitizer, null);
            return await AddHeaderSanitizerAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] AddUriSanitizer
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddUriSanitizer(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddUriSanitizerRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] AddUriSanitizer
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddUriSanitizerAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddUriSanitizerRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> AddUriSanitizer. </summary>
        /// <param name="sanitizerType"></param>
        /// <param name="sanitizer"> The body for a URI regex sanitizer. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddUriSanitizer(string sanitizerType, UriRegexSanitizer sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            AddUriSanitizerRequest spreadModel = new AddUriSanitizerRequest(sanitizerType, recordingId, sanitizer, null);
            return AddUriSanitizer(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> AddUriSanitizer. </summary>
        /// <param name="sanitizerType"></param>
        /// <param name="sanitizer"> The body for a URI regex sanitizer. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddUriSanitizerAsync(string sanitizerType, UriRegexSanitizer sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            AddUriSanitizerRequest spreadModel = new AddUriSanitizerRequest(sanitizerType, recordingId, sanitizer, null);
            return await AddUriSanitizerAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a sanitizer.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddBodyRegexSanitizer(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddBodyRegexSanitizerRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a sanitizer.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddBodyRegexSanitizerAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddBodyRegexSanitizerRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a sanitizer. </summary>
        /// <param name="sanitizerType"></param>
        /// <param name="sanitizer"> The body for a body regex sanitizer. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddBodyRegexSanitizer(string sanitizerType, BodyRegexSanitizer sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            AddBodyRegexSanitizerRequest spreadModel = new AddBodyRegexSanitizerRequest(sanitizerType, recordingId, sanitizer, null);
            return AddBodyRegexSanitizer(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a sanitizer. </summary>
        /// <param name="sanitizerType"></param>
        /// <param name="sanitizer"> The body for a body regex sanitizer. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sanitizerType"/> or <paramref name="sanitizer"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddBodyRegexSanitizerAsync(string sanitizerType, BodyRegexSanitizer sanitizer, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sanitizerType, nameof(sanitizerType));
            Argument.AssertNotNull(sanitizer, nameof(sanitizer));

            AddBodyRegexSanitizerRequest spreadModel = new AddBodyRegexSanitizerRequest(sanitizerType, recordingId, sanitizer, null);
            return await AddBodyRegexSanitizerAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="matcherType"> The type of matcher. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the matcher to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="matcherType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult SetMatcher(string matcherType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(matcherType, nameof(matcherType));

            using PipelineMessage message = CreateSetMatcherRequest(matcherType, content, recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="matcherType"> The type of matcher. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the matcher to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="matcherType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> SetMatcherAsync(string matcherType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(matcherType, nameof(matcherType));

            using PipelineMessage message = CreateSetMatcherRequest(matcherType, content, recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a matcher. </summary>
        /// <param name="matcherType"> The type of matcher. </param>
        /// <param name="matcher"></param>
        /// <param name="recordingId"> The recording ID to apply the matcher to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="matcherType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult SetMatcher(string matcherType, BinaryData matcher = default, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(matcherType, nameof(matcherType));

            return SetMatcher(matcherType, BinaryContent.Create(matcher), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a matcher. </summary>
        /// <param name="matcherType"> The type of matcher. </param>
        /// <param name="matcher"></param>
        /// <param name="recordingId"> The recording ID to apply the matcher to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="matcherType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> SetMatcherAsync(string matcherType, BinaryData matcher = default, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(matcherType, nameof(matcherType));

            return await SetMatcherAsync(matcherType, BinaryContent.Create(matcher), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a bodiless matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddBodilessMatcher(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddBodilessMatcherRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a bodiless matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddBodilessMatcherAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddBodilessMatcherRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a bodiless matcher. </summary>
        /// <param name="matcherType"></param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddBodilessMatcher(string matcherType, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(matcherType, nameof(matcherType));

            AddBodilessMatcherRequest spreadModel = new AddBodilessMatcherRequest(matcherType, recordingId, null);
            return AddBodilessMatcher(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a bodiless matcher. </summary>
        /// <param name="matcherType"></param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddBodilessMatcherAsync(string matcherType, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(matcherType, nameof(matcherType));

            AddBodilessMatcherRequest spreadModel = new AddBodilessMatcherRequest(matcherType, recordingId, null);
            return await AddBodilessMatcherAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a custom matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddCustomMatcher(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddCustomMatcherRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a custom matcher.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddCustomMatcherAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddCustomMatcherRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a custom matcher. </summary>
        /// <param name="matcherType"></param>
        /// <param name="matcher"> The body for a custom matcher. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> or <paramref name="matcher"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddCustomMatcher(string matcherType, CustomDefaultMatcher matcher, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(matcherType, nameof(matcherType));
            Argument.AssertNotNull(matcher, nameof(matcher));

            AddCustomMatcherRequest spreadModel = new AddCustomMatcherRequest(matcherType, recordingId, matcher, null);
            return AddCustomMatcher(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a custom matcher. </summary>
        /// <param name="matcherType"></param>
        /// <param name="matcher"> The body for a custom matcher. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matcherType"/> or <paramref name="matcher"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddCustomMatcherAsync(string matcherType, CustomDefaultMatcher matcher, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(matcherType, nameof(matcherType));
            Argument.AssertNotNull(matcher, nameof(matcher));

            AddCustomMatcherRequest spreadModel = new AddCustomMatcherRequest(matcherType, recordingId, matcher, null);
            return await AddCustomMatcherAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a transform.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="transformType"> The type of transform. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="transformType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddTransform(string transformType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(transformType, nameof(transformType));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddTransformRequest(transformType, content, recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a transform.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="transformType"> The type of transform. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="transformType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddTransformAsync(string transformType, BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(transformType, nameof(transformType));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddTransformRequest(transformType, content, recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a transform. </summary>
        /// <param name="transformType"> The type of transform. </param>
        /// <param name="transform"></param>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="transform"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="transformType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddTransform(string transformType, BinaryData transform, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(transformType, nameof(transformType));
            Argument.AssertNotNull(transform, nameof(transform));

            return AddTransform(transformType, BinaryContent.Create(transform), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a transform. </summary>
        /// <param name="transformType"> The type of transform. </param>
        /// <param name="transform"></param>
        /// <param name="recordingId"> The recording ID to apply the transform to. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="transform"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="transformType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddTransformAsync(string transformType, BinaryData transform, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(transformType, nameof(transformType));
            Argument.AssertNotNull(transform, nameof(transform));

            return await AddTransformAsync(transformType, BinaryContent.Create(transform), recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Add a header transform.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddHeaderTransform(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddHeaderTransformRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Add a header transform.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddHeaderTransformAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddHeaderTransformRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Add a header transform. </summary>
        /// <param name="transformType"></param>
        /// <param name="transform"> The body for a header transform. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="transform"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddHeaderTransform(string transformType, HeaderTransform transform, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(transformType, nameof(transformType));
            Argument.AssertNotNull(transform, nameof(transform));

            AddHeaderTransformRequest spreadModel = new AddHeaderTransformRequest(transformType, recordingId, transform, null);
            return AddHeaderTransform(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Add a header transform. </summary>
        /// <param name="transformType"></param>
        /// <param name="transform"> The body for a header transform. </param>
        /// <param name="recordingId"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transformType"/> or <paramref name="transform"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddHeaderTransformAsync(string transformType, HeaderTransform transform, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(transformType, nameof(transformType));
            Argument.AssertNotNull(transform, nameof(transform));

            AddHeaderTransformRequest spreadModel = new AddHeaderTransformRequest(transformType, recordingId, transform, null);
            return await AddHeaderTransformAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
