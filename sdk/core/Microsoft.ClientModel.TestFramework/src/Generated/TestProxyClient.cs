// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.ClientModel.TestFramework;
using Microsoft.ClientModel.TestFramework.TestProxy.Admin;

namespace Microsoft.ClientModel.TestFramework.TestProxy
{
    /// <summary></summary>
    public partial class TestProxyClient
    {
        private readonly Uri _endpoint;
        private TestProxyAdminClient _cachedTestProxyAdminClient;

        /// <summary> Initializes a new instance of TestProxyClient. </summary>
        public TestProxyClient() : this(new Uri("https://localhost:5001/"), new TestProxyClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TestProxyClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TestProxyClient(Uri endpoint, TestProxyClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new TestProxyClientOptions();

            _endpoint = endpoint;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Start recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StartRecord(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartRecordRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Start recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StartRecordAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartRecordRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Start recording for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult StartRecord(TestProxyStartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            return StartRecord(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Start recording for a test. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> StartRecordAsync(TestProxyStartInformation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            return await StartRecordAsync(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Stop recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingSkip"> Optional header that can be set to request-response to skip recording this session. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StopRecord(string recordingId, BinaryContent content, string recordingSkip = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStopRecordRequest(recordingId, content, recordingSkip, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Stop recording for a test.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingSkip"> Optional header that can be set to request-response to skip recording this session. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StopRecordAsync(string recordingId, BinaryContent content, string recordingSkip = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStopRecordRequest(recordingId, content, recordingSkip, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="variables"> A set of variables for the recording session. </param>
        /// <param name="recordingSkip"> Optional header that can be set to request-response to skip recording this session. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="variables"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult StopRecord(string recordingId, IDictionary<string, string> variables, string recordingSkip = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(variables, nameof(variables));

            using BinaryContent content = BinaryContentHelper.FromDictionary(variables);
            return StopRecord(recordingId, content, recordingSkip, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Stop recording for a test. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="variables"> A set of variables for the recording session. </param>
        /// <param name="recordingSkip"> Optional header that can be set to request-response to skip recording this session. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> or <paramref name="variables"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> StopRecordAsync(string recordingId, IDictionary<string, string> variables, string recordingSkip = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));
            Argument.AssertNotNull(variables, nameof(variables));

            using BinaryContent content = BinaryContentHelper.FromDictionary(variables);
            return await StopRecordAsync(recordingId, content, recordingSkip, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Start playback for a test recording.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID. If provided, the server will duplicate an existing playback session and return the new session's recordingId. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StartPlayback(BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartPlaybackRequest(content, recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Start playback for a test recording.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="recordingId"> The recording ID. If provided, the server will duplicate an existing playback session and return the new session's recordingId. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StartPlaybackAsync(BinaryContent content, string recordingId = default, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateStartPlaybackRequest(content, recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Start playback for a test recording. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="recordingId"> The recording ID. If provided, the server will duplicate an existing playback session and return the new session's recordingId. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<IReadOnlyDictionary<string, string>> StartPlayback(TestProxyStartInformation body, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = StartPlayback(body, recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue(result.GetRawResponse().Content.ToObjectFromJson<IReadOnlyDictionary<string, string>>(), result.GetRawResponse());
        }

        /// <summary> Start playback for a test recording. </summary>
        /// <param name="body"> File location of the recording. </param>
        /// <param name="recordingId"> The recording ID. If provided, the server will duplicate an existing playback session and return the new session's recordingId. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<IReadOnlyDictionary<string, string>>> StartPlaybackAsync(TestProxyStartInformation body, string recordingId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await StartPlaybackAsync(body, recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue(result.GetRawResponse().Content.ToObjectFromJson<IReadOnlyDictionary<string, string>>(), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Stop playback for a test recording.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StopPlayback(string recordingId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            using PipelineMessage message = CreateStopPlaybackRequest(recordingId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Stop playback for a test recording.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StopPlaybackAsync(string recordingId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            using PipelineMessage message = CreateStopPlaybackRequest(recordingId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Stop playback for a test recording. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult StopPlayback(string recordingId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            return StopPlayback(recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Stop playback for a test recording. </summary>
        /// <param name="recordingId"> The recording ID. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recordingId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> StopPlaybackAsync(string recordingId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recordingId, nameof(recordingId));

            return await StopPlaybackAsync(recordingId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary> Initializes a new instance of TestProxyAdminClient. </summary>
        public virtual TestProxyAdminClient GetTestProxyAdminClient()
        {
            return Volatile.Read(ref _cachedTestProxyAdminClient) ?? Interlocked.CompareExchange(ref _cachedTestProxyAdminClient, new TestProxyAdminClient(Pipeline, _endpoint), null) ?? _cachedTestProxyAdminClient;
        }
    }
}
