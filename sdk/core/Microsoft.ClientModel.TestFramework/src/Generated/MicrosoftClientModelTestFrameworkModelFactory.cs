// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Microsoft.ClientModel.TestFramework.TestProxy;

namespace Microsoft.ClientModel.TestFramework
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class MicrosoftClientModelTestFrameworkModelFactory
    {
        /// <summary> The StartInformation. </summary>
        /// <param name="xRecordingFile"></param>
        /// <param name="xRecodingAssetsFiles"></param>
        /// <returns> A new <see cref="TestProxy.StartInformation"/> instance for mocking. </returns>
        public static StartInformation StartInformation(string xRecordingFile = default, string xRecodingAssetsFiles = default)
        {
            return new StartInformation(xRecordingFile, xRecodingAssetsFiles, additionalBinaryDataProperties: null);
        }

        /// <summary> The StartPlaybackResponse. </summary>
        /// <returns> A new <see cref="TestProxy.StartPlaybackResponse"/> instance for mocking. </returns>
        public static StartPlaybackResponse StartPlaybackResponse()
        {
            return new StartPlaybackResponse(additionalBinaryDataProperties: null);
        }

        /// <summary> The StopPlaybackResponse. </summary>
        /// <returns> A new <see cref="TestProxy.StopPlaybackResponse"/> instance for mocking. </returns>
        public static StopPlaybackResponse StopPlaybackResponse()
        {
            return new StopPlaybackResponse(additionalBinaryDataProperties: null);
        }

        /// <summary> The StartRecordResponse. </summary>
        /// <returns> A new <see cref="TestProxy.StartRecordResponse"/> instance for mocking. </returns>
        public static StartRecordResponse StartRecordResponse()
        {
            return new StartRecordResponse(additionalBinaryDataProperties: null);
        }

        /// <summary> The StopRecordRequest. </summary>
        /// <returns> A new <see cref="TestProxy.StopRecordRequest"/> instance for mocking. </returns>
        public static StopRecordRequest StopRecordRequest()
        {
            return new StopRecordRequest(additionalBinaryDataProperties: null);
        }

        /// <summary> The ProxyOptions. </summary>
        /// <param name="transport"></param>
        /// <returns> A new <see cref="TestProxy.ProxyOptions"/> instance for mocking. </returns>
        public static ProxyOptions ProxyOptions(ProxyOptionsTransport transport = default)
        {
            return new ProxyOptions(transport, additionalBinaryDataProperties: null);
        }

        /// <summary> The ProxyOptionsTransport. </summary>
        /// <param name="allowAutoRedirect"></param>
        /// <param name="tlsValidationCert"></param>
        /// <param name="certificates"></param>
        /// <returns> A new <see cref="TestProxy.ProxyOptionsTransport"/> instance for mocking. </returns>
        public static ProxyOptionsTransport ProxyOptionsTransport(bool allowAutoRedirect = default, string tlsValidationCert = default, IEnumerable<ProxyOptionsTransportCertificationsItem> certificates = default)
        {
            certificates ??= new ChangeTrackingList<ProxyOptionsTransportCertificationsItem>();

            return new ProxyOptionsTransport(allowAutoRedirect, tlsValidationCert, certificates?.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> The ProxyOptionsTransportCertificationsItem. </summary>
        /// <param name="pemValue"></param>
        /// <param name="pemKey"></param>
        /// <returns> A new <see cref="TestProxy.ProxyOptionsTransportCertificationsItem"/> instance for mocking. </returns>
        public static ProxyOptionsTransportCertificationsItem ProxyOptionsTransportCertificationsItem(string pemValue = default, string pemKey = default)
        {
            return new ProxyOptionsTransportCertificationsItem(pemValue, pemKey, additionalBinaryDataProperties: null);
        }

        /// <summary> The SanitizersToRemove. </summary>
        /// <param name="sanitizers"></param>
        /// <returns> A new <see cref="TestProxy.SanitizersToRemove"/> instance for mocking. </returns>
        public static SanitizersToRemove SanitizersToRemove(IEnumerable<string> sanitizers = default)
        {
            sanitizers ??= new ChangeTrackingList<string>();

            return new SanitizersToRemove(sanitizers?.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> The BodyKeySanitizer. </summary>
        /// <param name="jsonPath"></param>
        /// <param name="value"></param>
        /// <param name="regex"></param>
        /// <param name="groupForReplace"></param>
        /// <returns> A new <see cref="TestProxy.BodyKeySanitizer"/> instance for mocking. </returns>
        public static BodyKeySanitizer BodyKeySanitizer(string jsonPath = default, string value = default, string regex = default, string groupForReplace = default)
        {
            return new BodyKeySanitizer(jsonPath, value, regex, groupForReplace, additionalBinaryDataProperties: null);
        }

        /// <summary> The HeaderRegexSanitizer. </summary>
        /// <param name="key"></param>
        /// <param name="value"></param>
        /// <param name="regex"></param>
        /// <param name="groupForReplace"></param>
        /// <returns> A new <see cref="TestProxy.HeaderRegexSanitizer"/> instance for mocking. </returns>
        public static TestProxy.HeaderRegexSanitizer HeaderRegexSanitizer(string key = default, string value = default, string regex = default, string groupForReplace = default)
        {
            return new TestProxy.HeaderRegexSanitizer(key, value, regex, groupForReplace, additionalBinaryDataProperties: null);
        }

        /// <summary> The UriRegexSanitizer. </summary>
        /// <param name="regex"></param>
        /// <param name="value"></param>
        /// <param name="groupForReplace"></param>
        /// <returns> A new <see cref="TestProxy.UriRegexSanitizer"/> instance for mocking. </returns>
        public static TestProxy.UriRegexSanitizer UriRegexSanitizer(string regex = default, string value = default, string groupForReplace = default)
        {
            return new TestProxy.UriRegexSanitizer(regex, value, groupForReplace, additionalBinaryDataProperties: null);
        }

        /// <summary> The BodyRegexSanitizer. </summary>
        /// <param name="regex"></param>
        /// <param name="value"></param>
        /// <param name="groupForReplace"></param>
        /// <param name="condition"></param>
        /// <returns> A new <see cref="TestProxy.BodyRegexSanitizer"/> instance for mocking. </returns>
        public static BodyRegexSanitizer BodyRegexSanitizer(string regex = default, string value = default, string groupForReplace = default, SanitizerCondition condition = default)
        {
            return new BodyRegexSanitizer(regex, value, groupForReplace, condition, additionalBinaryDataProperties: null);
        }

        /// <summary> The SanitizerCondition. </summary>
        /// <param name="uriRegex"></param>
        /// <param name="responseHeader"></param>
        /// <returns> A new <see cref="TestProxy.SanitizerCondition"/> instance for mocking. </returns>
        public static SanitizerCondition SanitizerCondition(string uriRegex = default, HeaderCondition responseHeader = default)
        {
            return new SanitizerCondition(uriRegex, responseHeader, additionalBinaryDataProperties: null);
        }

        /// <summary> The HeaderCondition. </summary>
        /// <param name="key"></param>
        /// <param name="valueRegex"></param>
        /// <returns> A new <see cref="TestProxy.HeaderCondition"/> instance for mocking. </returns>
        public static HeaderCondition HeaderCondition(string key = default, string valueRegex = default)
        {
            return new HeaderCondition(key, valueRegex, additionalBinaryDataProperties: null);
        }

        /// <summary> The CustomDefaultMatcher. </summary>
        /// <param name="excludedHeaders"></param>
        /// <param name="compareBodies"></param>
        /// <param name="ignoredHeaders"></param>
        /// <param name="ignoredQueryParameters"></param>
        /// <returns> A new <see cref="TestProxy.CustomDefaultMatcher"/> instance for mocking. </returns>
        public static CustomDefaultMatcher CustomDefaultMatcher(string excludedHeaders = default, bool? compareBodies = default, string ignoredHeaders = default, string ignoredQueryParameters = default)
        {
            return new CustomDefaultMatcher(excludedHeaders, compareBodies, ignoredHeaders, ignoredQueryParameters, additionalBinaryDataProperties: null);
        }

        /// <summary> The HeaderTransform. </summary>
        /// <param name="key"></param>
        /// <param name="value"></param>
        /// <param name="condition"></param>
        /// <returns> A new <see cref="TestProxy.HeaderTransform"/> instance for mocking. </returns>
        public static HeaderTransform HeaderTransform(string key = default, string value = default, SanitizerCondition condition = default)
        {
            return new HeaderTransform(key, value, condition, additionalBinaryDataProperties: null);
        }
    }
}
