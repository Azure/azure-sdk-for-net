// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Net.ClientModel.Internal;
using System.Text.Json;

namespace OpenAI;

public partial class Completions : IJsonModel<Completions>
{
    // needed for deserialization
    private Completions() { }

    internal static Completions DeserializeCompletions(JsonElement element, ModelReaderWriterOptions options)
    {
        bool wire = options.Format == ModelReaderWriterFormat.Wire;
        if (!wire && options.Format != ModelReaderWriterFormat.Json) throw new ArgumentOutOfRangeException(nameof(options.Format));

        if (element.ValueKind == JsonValueKind.Null)
        {
            return null;
        }
        string id = default;
        DateTimeOffset created = default;
        OptionalProperty<IReadOnlyList<PromptFilterResult>> promptAnnotations = default;
        IReadOnlyList<Choice> choices = default;
        CompletionsUsage usage = default;
        foreach (var property in element.EnumerateObject())
        {
            if (property.NameEquals(wire?"id"u8:"Id"u8))
            {
                id = property.Value.GetString();
                continue;
            }
            if (property.NameEquals(wire?"created"u8:"Created"u8))
            {
                created = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                continue;
            }
            if (property.NameEquals(wire?"prompt_annotations"u8:"PromptFilterResults"u8))
            {
                if (property.Value.ValueKind == JsonValueKind.Null)
                {
                    continue;
                }
                List<PromptFilterResult> array = new List<PromptFilterResult>();
                foreach (var item in property.Value.EnumerateArray())
                {
                    array.Add(PromptFilterResult.DeserializePromptFilterResult(item));
                }
                promptAnnotations = array;
                continue;
            }
            if (property.NameEquals(wire?"choices"u8:"Choices"u8))
            {
                List<Choice> array = new List<Choice>();
                foreach (var item in property.Value.EnumerateArray())
                {
                    array.Add(Choice.DeserializeChoice(item, options));
                }
                choices = array;
                continue;
            }
            if (property.NameEquals(wire?"usage"u8:"Usage"u8))
            {
                usage = CompletionsUsage.DeserializeCompletionsUsage(property.Value);
                continue;
            }
        }
        return new Completions(id, created, OptionalProperty.ToList(promptAnnotations), choices, usage);
    }

    /// <summary> Deserializes the model from a raw response. </summary>
    /// <param name="response"> The response to deserialize the model from. </param>
    internal static Completions FromResponse(PipelineResponse response)
    {
        using var document = JsonDocument.Parse(response.Content);
        return DeserializeCompletions(document.RootElement, ModelReaderWriterOptions.DefaultWireOptions);
    }

    Completions IJsonModel<Completions>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
    {
        using var json = JsonDocument.ParseValue(ref reader);
        return DeserializeCompletions(json.RootElement, options);
    }

    Completions IModel<Completions>.Read(BinaryData data, ModelReaderWriterOptions options)
    {
        using var json = JsonDocument.Parse(data.ToMemory());
        return DeserializeCompletions(json.RootElement, options);
    }

    void IJsonModel<Completions>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
        bool wire = options.Format == ModelReaderWriterFormat.Wire;
        if (!wire && options.Format != ModelReaderWriterFormat.Json) throw new ArgumentOutOfRangeException(nameof(options.Format));

        writer.WriteStartObject();
        writer.WriteString(wire?"id"u8:"Id"u8, this.Id);
        writer.WriteString(wire?"created"u8:"Created"u8, this.Created);
        if (this.Choices.Count > 0)
        {
            writer.WriteStartArray(wire?"choices"u8:"Choices"u8);
            foreach(Choice choice in this.Choices)
            {
                choice.Write(writer, options);
            }
            writer.WriteEndArray();
        }

        writer.WriteEndObject();
    }

    BinaryData IModel<Completions>.Write(ModelReaderWriterOptions options)
    {
        return ModelReaderWriter.WriteCore(this, options);
    }
}

