// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Net.ClientModel.Internal;
using System.Text.Json;

namespace OpenAI;

public partial class Choice
    {
        internal static Choice DeserializeChoice(JsonElement element, ModelReaderWriterOptions options)
        {
            bool wire = options.Format == ModelReaderWriterFormat.Wire;
            if (options.Format != ModelReaderWriterFormat.Json) throw new ArgumentOutOfRangeException(nameof(options.Format));

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string text = default;
            int index = default;
            OptionalProperty<ContentFilterResults> contentFilterResults = default;
            CompletionsLogProbabilityModel logprobs = default;
            CompletionsFinishReason? finishReason = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals(wire?"text"u8:"Text"u8))
                {
                    text = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals(wire?"index"u8:"Index"u8))
                {
                    index = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals(wire?"content_filter_results"u8:"ContentFilterResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    contentFilterResults = ContentFilterResults.DeserializeContentFilterResults(property.Value);
                    continue;
                }
                if (property.NameEquals(wire?"logprobs"u8:"LogProbabilityModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        logprobs = null;
                        continue;
                    }
                    logprobs = CompletionsLogProbabilityModel.DeserializeCompletionsLogProbabilityModel(property.Value);
                    continue;
                }
                if (property.NameEquals(wire?"finish_reason"u8:"FinishReason"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        finishReason = null;
                        continue;
                    }
                    finishReason = new CompletionsFinishReason(property.Value.GetString());
                    continue;
                }
            }
            return new Choice(text, index, contentFilterResults.Value, logprobs, finishReason);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Choice FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeChoice(document.RootElement, ModelReaderWriterOptions.DefaultWireOptions);
        }

        internal void Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            bool wire = options.Format == ModelReaderWriterFormat.Wire;
            if (options.Format != ModelReaderWriterFormat.Json) throw new ArgumentOutOfRangeException(nameof(options.Format));

            writer.WriteStartObject();
            writer.WriteString(wire?"text"u8:"Text"u8, this.Text);
            writer.WriteEndObject();
        }
    }

