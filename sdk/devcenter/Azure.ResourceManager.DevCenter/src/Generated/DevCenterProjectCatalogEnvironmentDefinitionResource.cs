// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.DevCenter.Models;

namespace Azure.ResourceManager.DevCenter
{
    /// <summary>
    /// A Class representing a DevCenterProjectCatalogEnvironmentDefinition along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="DevCenterProjectCatalogEnvironmentDefinitionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetDevCenterProjectCatalogEnvironmentDefinitionResource method.
    /// Otherwise you can get one from its parent resource <see cref="DevCenterProjectCatalogResource"/> using the GetDevCenterProjectCatalogEnvironmentDefinition method.
    /// </summary>
    public partial class DevCenterProjectCatalogEnvironmentDefinitionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="DevCenterProjectCatalogEnvironmentDefinitionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="projectName"> The projectName. </param>
        /// <param name="catalogName"> The catalogName. </param>
        /// <param name="environmentDefinitionName"> The environmentDefinitionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string environmentDefinitionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/environmentDefinitions/{environmentDefinitionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsClientDiagnostics;
        private readonly EnvironmentDefinitionsRestOperations _devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsRestClient;
        private readonly ClientDiagnostics _projectCatalogEnvironmentDefinitionsClientDiagnostics;
        private readonly ProjectCatalogEnvironmentDefinitionsRestOperations _projectCatalogEnvironmentDefinitionsRestClient;
        private readonly DevCenterEnvironmentDefinitionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DevCenter/projects/catalogs/environmentDefinitions";

        /// <summary> Initializes a new instance of the <see cref="DevCenterProjectCatalogEnvironmentDefinitionResource"/> class for mocking. </summary>
        protected DevCenterProjectCatalogEnvironmentDefinitionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DevCenterProjectCatalogEnvironmentDefinitionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal DevCenterProjectCatalogEnvironmentDefinitionResource(ArmClient client, DevCenterEnvironmentDefinitionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="DevCenterProjectCatalogEnvironmentDefinitionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal DevCenterProjectCatalogEnvironmentDefinitionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DevCenter", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsApiVersion);
            _devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsRestClient = new EnvironmentDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsApiVersion);
            _projectCatalogEnvironmentDefinitionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DevCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _projectCatalogEnvironmentDefinitionsRestClient = new ProjectCatalogEnvironmentDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual DevCenterEnvironmentDefinitionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an environment definition from the catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/environmentDefinitions/{environmentDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnvironmentDefinitions_GetByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogEnvironmentDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DevCenterProjectCatalogEnvironmentDefinitionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogEnvironmentDefinitionResource.Get");
            scope.Start();
            try
            {
                var response = await _devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsRestClient.GetByProjectCatalogAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DevCenterProjectCatalogEnvironmentDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an environment definition from the catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/environmentDefinitions/{environmentDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnvironmentDefinitions_GetByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogEnvironmentDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DevCenterProjectCatalogEnvironmentDefinitionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogEnvironmentDefinitionResource.Get");
            scope.Start();
            try
            {
                var response = _devCenterProjectCatalogEnvironmentDefinitionEnvironmentDefinitionsRestClient.GetByProjectCatalog(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DevCenterProjectCatalogEnvironmentDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets Environment Definition error details.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/environmentDefinitions/{environmentDefinitionName}/getErrorDetails</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogEnvironmentDefinitions_GetErrorDetails</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CatalogResourceValidationErrorDetails>> GetErrorDetailsProjectCatalogEnvironmentDefinitionAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _projectCatalogEnvironmentDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogEnvironmentDefinitionResource.GetErrorDetailsProjectCatalogEnvironmentDefinition");
            scope.Start();
            try
            {
                var response = await _projectCatalogEnvironmentDefinitionsRestClient.GetErrorDetailsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets Environment Definition error details.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/environmentDefinitions/{environmentDefinitionName}/getErrorDetails</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogEnvironmentDefinitions_GetErrorDetails</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CatalogResourceValidationErrorDetails> GetErrorDetailsProjectCatalogEnvironmentDefinition(CancellationToken cancellationToken = default)
        {
            using var scope = _projectCatalogEnvironmentDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogEnvironmentDefinitionResource.GetErrorDetailsProjectCatalogEnvironmentDefinition");
            scope.Start();
            try
            {
                var response = _projectCatalogEnvironmentDefinitionsRestClient.GetErrorDetails(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
