// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.DevCenter;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDevCenterModelFactory
    {
        /// <summary> Initializes a new instance of DevCenterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed identity properties. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="DevCenter.DevCenterData"/> instance for mocking. </returns>
        public static DevCenterData DevCenterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DevCenterData(id, name, resourceType, systemData, tags, location, identity, provisioningState);
        }

        /// <summary> Initializes a new instance of ProjectData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="devCenterId"> Resource Id of an associated DevCenter. </param>
        /// <param name="description"> Description of the project. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="DevCenter.ProjectData"/> instance for mocking. </returns>
        public static ProjectData ProjectData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string devCenterId = null, string description = null, string provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProjectData(id, name, resourceType, systemData, tags, location, devCenterId, description, provisioningState);
        }

        /// <summary> Initializes a new instance of AttachedNetworkConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <param name="networkConnectionId"> The resource ID of the NetworkConnection you want to attach. </param>
        /// <param name="networkConnectionLocation"> The geo-location where the NetworkConnection resource specified in &apos;networkConnectionResourceId&apos; property lives. </param>
        /// <param name="healthCheckStatus"> Health check status values. </param>
        /// <param name="domainJoinType"> AAD Join type of the network. This is populated based on the referenced Network Connection. </param>
        /// <returns> A new <see cref="DevCenter.AttachedNetworkConnectionData"/> instance for mocking. </returns>
        public static AttachedNetworkConnectionData AttachedNetworkConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, string networkConnectionId = null, string networkConnectionLocation = null, HealthCheckStatus? healthCheckStatus = null, DomainJoinType? domainJoinType = null)
        {
            return new AttachedNetworkConnectionData(id, name, resourceType, systemData, provisioningState, networkConnectionId, networkConnectionLocation, healthCheckStatus, domainJoinType);
        }

        /// <summary> Initializes a new instance of GalleryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <param name="galleryResourceId"> The resource ID of the backing Azure Compute Gallery. </param>
        /// <returns> A new <see cref="DevCenter.GalleryData"/> instance for mocking. </returns>
        public static GalleryData GalleryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, string galleryResourceId = null)
        {
            return new GalleryData(id, name, resourceType, systemData, provisioningState, galleryResourceId);
        }

        /// <summary> Initializes a new instance of ImageData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> The description of the image. </param>
        /// <param name="publisher"> The publisher of the image. </param>
        /// <param name="offer"> The name of the image offer. </param>
        /// <param name="sku"> The SKU name for the image. </param>
        /// <param name="recommendedMachineConfiguration"> The recommended machine configuration to use with the image. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="DevCenter.ImageData"/> instance for mocking. </returns>
        public static ImageData ImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string publisher = null, string offer = null, string sku = null, RecommendedMachineConfiguration recommendedMachineConfiguration = null, string provisioningState = null)
        {
            return new ImageData(id, name, resourceType, systemData, description, publisher, offer, sku, recommendedMachineConfiguration, provisioningState);
        }

        /// <summary> Initializes a new instance of RecommendedMachineConfiguration. </summary>
        /// <param name="memory"> Recommended memory range. </param>
        /// <param name="vCpus"> Recommended vCPU range. </param>
        /// <returns> A new <see cref="Models.RecommendedMachineConfiguration"/> instance for mocking. </returns>
        public static RecommendedMachineConfiguration RecommendedMachineConfiguration(ResourceRange memory = null, ResourceRange vCpus = null)
        {
            return new RecommendedMachineConfiguration(memory, vCpus);
        }

        /// <summary> Initializes a new instance of ResourceRange. </summary>
        /// <param name="min"> Minimum value. </param>
        /// <param name="max"> Maximum value. </param>
        /// <returns> A new <see cref="Models.ResourceRange"/> instance for mocking. </returns>
        public static ResourceRange ResourceRange(int? min = null, int? max = null)
        {
            return new ResourceRange(min, max);
        }

        /// <summary> Initializes a new instance of ImageVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="namePropertiesName"> The semantic version string. </param>
        /// <param name="publishedOn"> The datetime that the backing image version was published. </param>
        /// <param name="excludeFromLatest"> If the version should be excluded from being treated as the latest version. </param>
        /// <param name="osDiskImageSizeInGb"> The size of the OS disk image, in GB. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="DevCenter.ImageVersionData"/> instance for mocking. </returns>
        public static ImageVersionData ImageVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string namePropertiesName = null, DateTimeOffset? publishedOn = null, bool? excludeFromLatest = null, int? osDiskImageSizeInGb = null, string provisioningState = null)
        {
            return new ImageVersionData(id, name, resourceType, systemData, namePropertiesName, publishedOn, excludeFromLatest, osDiskImageSizeInGb, provisioningState);
        }

        /// <summary> Initializes a new instance of CatalogData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="gitHub"> Properties for a GitHub catalog type. </param>
        /// <param name="adoGit"> Properties for an Azure DevOps catalog type. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <param name="lastSyncOn"> When the catalog was last synced. </param>
        /// <returns> A new <see cref="DevCenter.CatalogData"/> instance for mocking. </returns>
        public static CatalogData CatalogData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GitCatalog gitHub = null, GitCatalog adoGit = null, string provisioningState = null, DateTimeOffset? lastSyncOn = null)
        {
            return new CatalogData(id, name, resourceType, systemData, gitHub, adoGit, provisioningState, lastSyncOn);
        }

        /// <summary> Initializes a new instance of EnvironmentTypeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="DevCenter.EnvironmentTypeData"/> instance for mocking. </returns>
        public static EnvironmentTypeData EnvironmentTypeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, string provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new EnvironmentTypeData(id, name, resourceType, systemData, tags, provisioningState);
        }

        /// <summary> Initializes a new instance of ProjectEnvironmentTypeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed identity properties. </param>
        /// <param name="deploymentTargetId"> Id of a subscription that the environment type will be mapped to. The environment&apos;s resources will be deployed into this subscription. </param>
        /// <param name="status"> Defines whether this Environment Type can be used in this Project. </param>
        /// <param name="roles"> The role definition assigned to the environment creator on backing resources. </param>
        /// <param name="userRoleAssignments"> Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="DevCenter.ProjectEnvironmentTypeData"/> instance for mocking. </returns>
        public static ProjectEnvironmentTypeData ProjectEnvironmentTypeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string deploymentTargetId = null, EnableStatus? status = null, IDictionary<string, EnvironmentRole> roles = null, IDictionary<string, UserRoleAssignmentValue> userRoleAssignments = null, string provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            roles ??= new Dictionary<string, EnvironmentRole>();
            userRoleAssignments ??= new Dictionary<string, UserRoleAssignmentValue>();

            return new ProjectEnvironmentTypeData(id, name, resourceType, systemData, tags, location, identity, deploymentTargetId, status, roles != null ? new ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment(roles) : null, userRoleAssignments, provisioningState);
        }

        /// <summary> Initializes a new instance of EnvironmentRole. </summary>
        /// <param name="roleName"> The common name of the Role Assignment. This is a descriptive name such as &apos;AcrPush&apos;. </param>
        /// <param name="description"> This is a description of the Role Assignment. </param>
        /// <returns> A new <see cref="Models.EnvironmentRole"/> instance for mocking. </returns>
        public static EnvironmentRole EnvironmentRole(string roleName = null, string description = null)
        {
            return new EnvironmentRole(roleName, description);
        }

        /// <summary> Initializes a new instance of DevBoxDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="imageReference"> Image reference information. </param>
        /// <param name="sku"> The SKU for Dev Boxes created using this definition. </param>
        /// <param name="osStorageType"> The storage type used for the Operating System disk of Dev Boxes created using this definition. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <param name="imageValidationStatus"> Validation status of the configured image. </param>
        /// <param name="imageValidationErrorDetails"> Details for image validator error. Populated when the image validation is not successful. </param>
        /// <param name="activeImageReference"> Image reference information for the currently active image (only populated during updates). </param>
        /// <returns> A new <see cref="DevCenter.DevBoxDefinitionData"/> instance for mocking. </returns>
        public static DevBoxDefinitionData DevBoxDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ImageReference imageReference = null, DevCenterSku sku = null, string osStorageType = null, string provisioningState = null, ImageValidationStatus? imageValidationStatus = null, ImageValidationErrorDetails imageValidationErrorDetails = null, ImageReference activeImageReference = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DevBoxDefinitionData(id, name, resourceType, systemData, tags, location, imageReference, sku, osStorageType, provisioningState, imageValidationStatus, imageValidationErrorDetails, activeImageReference);
        }

        /// <summary> Initializes a new instance of ImageValidationErrorDetails. </summary>
        /// <param name="code"> An identifier for the error. </param>
        /// <param name="message"> A message describing the error. </param>
        /// <returns> A new <see cref="Models.ImageValidationErrorDetails"/> instance for mocking. </returns>
        public static ImageValidationErrorDetails ImageValidationErrorDetails(string code = null, string message = null)
        {
            return new ImageValidationErrorDetails(code, message);
        }

        /// <summary> Initializes a new instance of ImageReference. </summary>
        /// <param name="id"> Image ID, or Image version ID. When Image ID is provided, its latest version will be used. </param>
        /// <param name="exactVersion"> The actual version of the image after use. When id references a gallery image latest version, this will indicate the actual version in use. </param>
        /// <param name="publisher"> The image publisher. </param>
        /// <param name="offer"> The image offer. </param>
        /// <param name="sku"> The image sku. </param>
        /// <returns> A new <see cref="Models.ImageReference"/> instance for mocking. </returns>
        public static ImageReference ImageReference(string id = null, string exactVersion = null, string publisher = null, string offer = null, string sku = null)
        {
            return new ImageReference(id, exactVersion, publisher, offer, sku);
        }

        /// <summary> Initializes a new instance of OperationStatus. </summary>
        /// <param name="id"> Fully qualified ID for the operation status. </param>
        /// <param name="name"> The operation id name. </param>
        /// <param name="status"> Provisioning state of the resource. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="percentComplete"> Percent of the operation that is complete. </param>
        /// <param name="properties"> Custom operation properties, populated only for a successful operation. </param>
        /// <param name="error"> Operation Error message. </param>
        /// <returns> A new <see cref="Models.OperationStatus"/> instance for mocking. </returns>
        public static OperationStatus OperationStatus(string id = null, string name = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, float? percentComplete = null, BinaryData properties = null, OperationStatusError error = null)
        {
            return new OperationStatus(id, name, status, startOn, endOn, percentComplete, properties, error);
        }

        /// <summary> Initializes a new instance of OperationStatusError. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <returns> A new <see cref="Models.OperationStatusError"/> instance for mocking. </returns>
        public static OperationStatusError OperationStatusError(string code = null, string message = null)
        {
            return new OperationStatusError(code, message);
        }

        /// <summary> Initializes a new instance of DevCenterUsage. </summary>
        /// <param name="currentValue"> The current usage. </param>
        /// <param name="limit"> The limit integer. </param>
        /// <param name="unit"> The unit details. </param>
        /// <param name="name"> The name. </param>
        /// <returns> A new <see cref="Models.DevCenterUsage"/> instance for mocking. </returns>
        public static DevCenterUsage DevCenterUsage(long? currentValue = null, long? limit = null, UsageUnit? unit = null, UsageName name = null)
        {
            return new DevCenterUsage(currentValue, limit, unit, name);
        }

        /// <summary> Initializes a new instance of UsageName. </summary>
        /// <param name="localizedValue"> The localized name of the resource. </param>
        /// <param name="value"> The name of the resource. </param>
        /// <returns> A new <see cref="Models.UsageName"/> instance for mocking. </returns>
        public static UsageName UsageName(string localizedValue = null, string value = null)
        {
            return new UsageName(localizedValue, value);
        }

        /// <summary> Initializes a new instance of DevCenterSkuDetails. </summary>
        /// <param name="name"> The name of the SKU. Ex - P3. It is typically a letter+number code. </param>
        /// <param name="tier"> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </param>
        /// <param name="size"> The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. </param>
        /// <param name="family"> If the service has different generations of hardware, for the same SKU, then that can be captured here. </param>
        /// <param name="capacity"> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </param>
        /// <param name="resourceType"> The name of the resource type. </param>
        /// <param name="locations"> SKU supported locations. </param>
        /// <param name="capabilities"> Collection of name/value pairs to describe the SKU capabilities. </param>
        /// <returns> A new <see cref="Models.DevCenterSkuDetails"/> instance for mocking. </returns>
        public static DevCenterSkuDetails DevCenterSkuDetails(string name = null, DevCenterSkuTier? tier = null, string size = null, string family = null, int? capacity = null, string resourceType = null, IEnumerable<string> locations = null, IEnumerable<Capability> capabilities = null)
        {
            locations ??= new List<string>();
            capabilities ??= new List<Capability>();

            return new DevCenterSkuDetails(name, tier, size, family, capacity, resourceType, locations?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of Capability. </summary>
        /// <param name="name"> Name of the capability. </param>
        /// <param name="value"> Value of the capability. </param>
        /// <returns> A new <see cref="Models.Capability"/> instance for mocking. </returns>
        public static Capability Capability(string name = null, string value = null)
        {
            return new Capability(name, value);
        }

        /// <summary> Initializes a new instance of PoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="devBoxDefinitionName"> Name of a Dev Box definition in parent Project of this Pool. </param>
        /// <param name="networkConnectionName"> Name of a Network Connection in parent Project of this Pool. </param>
        /// <param name="licenseType"> Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created. </param>
        /// <param name="localAdministrator"> Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="DevCenter.PoolData"/> instance for mocking. </returns>
        public static PoolData PoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string devBoxDefinitionName = null, string networkConnectionName = null, LicenseType? licenseType = null, LocalAdminStatus? localAdministrator = null, string provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PoolData(id, name, resourceType, systemData, tags, location, devBoxDefinitionName, networkConnectionName, licenseType, localAdministrator, provisioningState);
        }

        /// <summary> Initializes a new instance of ScheduleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="typePropertiesType"> Supported type this scheduled task represents. </param>
        /// <param name="frequency"> The frequency of this scheduled task. </param>
        /// <param name="time"> The target time to trigger the action. The format is HH:MM. </param>
        /// <param name="timeZone"> The IANA timezone id at which the schedule should execute. </param>
        /// <param name="state"> Indicates whether or not this scheduled task is enabled. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="DevCenter.ScheduleData"/> instance for mocking. </returns>
        public static ScheduleData ScheduleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ScheduledType? typePropertiesType = null, ScheduledFrequency? frequency = null, string time = null, string timeZone = null, EnableStatus? state = null, string provisioningState = null)
        {
            return new ScheduleData(id, name, resourceType, systemData, typePropertiesType, frequency, time, timeZone, state, provisioningState);
        }

        /// <summary> Initializes a new instance of NetworkConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="subnetId"> The subnet to attach Virtual Machines to. </param>
        /// <param name="domainName"> Active Directory domain name. </param>
        /// <param name="organizationUnit"> Active Directory domain Organization Unit (OU). </param>
        /// <param name="domainUsername"> The username of an Active Directory account (user or service account) that has permissions to create computer objects in Active Directory. Required format: admin@contoso.com. </param>
        /// <param name="domainPassword"> The password for the account used to join domain. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <param name="healthCheckStatus"> Overall health status of the network connection. Health checks are run on creation, update, and periodically to validate the network connection. </param>
        /// <param name="networkingResourceGroupName"> The name for resource group where NICs will be placed. </param>
        /// <param name="domainJoinType"> AAD Join type. </param>
        /// <returns> A new <see cref="DevCenter.NetworkConnectionData"/> instance for mocking. </returns>
        public static NetworkConnectionData NetworkConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string subnetId = null, string domainName = null, string organizationUnit = null, string domainUsername = null, string domainPassword = null, string provisioningState = null, HealthCheckStatus? healthCheckStatus = null, string networkingResourceGroupName = null, DomainJoinType? domainJoinType = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkConnectionData(id, name, resourceType, systemData, tags, location, subnetId, domainName, organizationUnit, domainUsername, domainPassword, provisioningState, healthCheckStatus, networkingResourceGroupName, domainJoinType);
        }

        /// <summary> Initializes a new instance of HealthCheckStatusDetailData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startOn"> Start time of last execution of the health checks. </param>
        /// <param name="endOn"> End time of last execution of the health checks. </param>
        /// <param name="healthChecks"> Details for each health check item. </param>
        /// <returns> A new <see cref="DevCenter.HealthCheckStatusDetailData"/> instance for mocking. </returns>
        public static HealthCheckStatusDetailData HealthCheckStatusDetailData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<HealthCheck> healthChecks = null)
        {
            healthChecks ??= new List<HealthCheck>();

            return new HealthCheckStatusDetailData(id, name, resourceType, systemData, startOn, endOn, healthChecks?.ToList());
        }

        /// <summary> Initializes a new instance of HealthCheck. </summary>
        /// <param name="status"> The status of the health check item. </param>
        /// <param name="displayName"> The display name of this health check item. </param>
        /// <param name="startOn"> Start time of health check item. </param>
        /// <param name="endOn"> End time of the health check item. </param>
        /// <param name="errorType"> The type of error that occurred during this health check. </param>
        /// <param name="recommendedAction"> The recommended action to fix the corresponding error. </param>
        /// <param name="additionalDetails"> Additional details about the health check or the recommended action. </param>
        /// <returns> A new <see cref="Models.HealthCheck"/> instance for mocking. </returns>
        public static HealthCheck HealthCheck(HealthCheckStatus? status = null, string displayName = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string errorType = null, string recommendedAction = null, string additionalDetails = null)
        {
            return new HealthCheck(status, displayName, startOn, endOn, errorType, recommendedAction, additionalDetails);
        }
    }
}
