// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> Indicates catalog item types. </summary>
    public readonly partial struct CatalogItemType : IEquatable<CatalogItemType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CatalogItemType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CatalogItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnvironmentDefinitionValue = "EnvironmentDefinition";
        private const string ImageDefinitionValue = "ImageDefinition";

        /// <summary> Environment definition catalog item type. </summary>
        public static CatalogItemType EnvironmentDefinition { get; } = new CatalogItemType(EnvironmentDefinitionValue);
        /// <summary> Image definition catalog item type. </summary>
        public static CatalogItemType ImageDefinition { get; } = new CatalogItemType(ImageDefinitionValue);
        /// <summary> Determines if two <see cref="CatalogItemType"/> values are the same. </summary>
        public static bool operator ==(CatalogItemType left, CatalogItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CatalogItemType"/> values are not the same. </summary>
        public static bool operator !=(CatalogItemType left, CatalogItemType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CatalogItemType"/>. </summary>
        public static implicit operator CatalogItemType(string value) => new CatalogItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CatalogItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CatalogItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
