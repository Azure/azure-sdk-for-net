// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> Stats of the synchronization. </summary>
    public partial class CatalogSyncStats
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CatalogSyncStats"/>. </summary>
        internal CatalogSyncStats()
        {
            SyncedCatalogItemTypes = new ChangeTrackingList<CatalogItemType>();
        }

        /// <summary> Initializes a new instance of <see cref="CatalogSyncStats"/>. </summary>
        /// <param name="added"> Count of catalog items added during synchronization. </param>
        /// <param name="updated"> Count of catalog items updated during synchronization. </param>
        /// <param name="unchanged"> Count of catalog items that were unchanged during synchronization. </param>
        /// <param name="removed"> Count of catalog items removed during synchronization. </param>
        /// <param name="validationErrors"> Count of catalog items that had validation errors during synchronization. </param>
        /// <param name="synchronizationErrors"> Count of synchronization errors that occured during synchronization. </param>
        /// <param name="syncedCatalogItemTypes"> Indicates catalog item types that were synced. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CatalogSyncStats(int? added, int? updated, int? unchanged, int? removed, int? validationErrors, int? synchronizationErrors, IReadOnlyList<CatalogItemType> syncedCatalogItemTypes, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Added = added;
            Updated = updated;
            Unchanged = unchanged;
            Removed = removed;
            ValidationErrors = validationErrors;
            SynchronizationErrors = synchronizationErrors;
            SyncedCatalogItemTypes = syncedCatalogItemTypes;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Count of catalog items added during synchronization. </summary>
        public int? Added { get; }
        /// <summary> Count of catalog items updated during synchronization. </summary>
        public int? Updated { get; }
        /// <summary> Count of catalog items that were unchanged during synchronization. </summary>
        public int? Unchanged { get; }
        /// <summary> Count of catalog items removed during synchronization. </summary>
        public int? Removed { get; }
        /// <summary> Count of catalog items that had validation errors during synchronization. </summary>
        public int? ValidationErrors { get; }
        /// <summary> Count of synchronization errors that occured during synchronization. </summary>
        public int? SynchronizationErrors { get; }
        /// <summary> Indicates catalog item types that were synced. </summary>
        public IReadOnlyList<CatalogItemType> SyncedCatalogItemTypes { get; }
    }
}
