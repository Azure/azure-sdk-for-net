// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> The state of an Image Definition Build. </summary>
    public readonly partial struct ImageDefinitionBuildStatus : IEquatable<ImageDefinitionBuildStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImageDefinitionBuildStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImageDefinitionBuildStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string RunningValue = "Running";
        private const string ValidationFailedValue = "ValidationFailed";
        private const string FailedValue = "Failed";
        private const string CancelledValue = "Cancelled";
        private const string TimedOutValue = "TimedOut";

        /// <summary> The image build has succeeded. </summary>
        public static ImageDefinitionBuildStatus Succeeded { get; } = new ImageDefinitionBuildStatus(SucceededValue);
        /// <summary> The image build is running. </summary>
        public static ImageDefinitionBuildStatus Running { get; } = new ImageDefinitionBuildStatus(RunningValue);
        /// <summary> The built image has failed validation. </summary>
        public static ImageDefinitionBuildStatus ValidationFailed { get; } = new ImageDefinitionBuildStatus(ValidationFailedValue);
        /// <summary> The image build has failed. </summary>
        public static ImageDefinitionBuildStatus Failed { get; } = new ImageDefinitionBuildStatus(FailedValue);
        /// <summary> The image build has been cancelled. </summary>
        public static ImageDefinitionBuildStatus Cancelled { get; } = new ImageDefinitionBuildStatus(CancelledValue);
        /// <summary> The image build has timed out. </summary>
        public static ImageDefinitionBuildStatus TimedOut { get; } = new ImageDefinitionBuildStatus(TimedOutValue);
        /// <summary> Determines if two <see cref="ImageDefinitionBuildStatus"/> values are the same. </summary>
        public static bool operator ==(ImageDefinitionBuildStatus left, ImageDefinitionBuildStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImageDefinitionBuildStatus"/> values are not the same. </summary>
        public static bool operator !=(ImageDefinitionBuildStatus left, ImageDefinitionBuildStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ImageDefinitionBuildStatus"/>. </summary>
        public static implicit operator ImageDefinitionBuildStatus(string value) => new ImageDefinitionBuildStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageDefinitionBuildStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImageDefinitionBuildStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
