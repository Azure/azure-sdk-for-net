// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevCenter.Models
{
    public partial class ActiveHoursConfiguration : IUtf8JsonSerializable, IJsonModel<ActiveHoursConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ActiveHoursConfiguration>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ActiveHoursConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ActiveHoursConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ActiveHoursConfiguration)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(KeepAwakeEnableStatus))
            {
                writer.WritePropertyName("keepAwakeEnableStatus"u8);
                writer.WriteStringValue(KeepAwakeEnableStatus.Value.ToString());
            }
            if (Optional.IsDefined(AutoStartEnableStatus))
            {
                writer.WritePropertyName("autoStartEnableStatus"u8);
                writer.WriteStringValue(AutoStartEnableStatus.Value.ToString());
            }
            if (Optional.IsDefined(DefaultTimeZone))
            {
                writer.WritePropertyName("defaultTimeZone"u8);
                writer.WriteStringValue(DefaultTimeZone);
            }
            if (Optional.IsDefined(DefaultStartTimeHour))
            {
                writer.WritePropertyName("defaultStartTimeHour"u8);
                writer.WriteNumberValue(DefaultStartTimeHour.Value);
            }
            if (Optional.IsDefined(DefaultEndTimeHour))
            {
                writer.WritePropertyName("defaultEndTimeHour"u8);
                writer.WriteNumberValue(DefaultEndTimeHour.Value);
            }
            if (Optional.IsCollectionDefined(DefaultDaysOfWeek))
            {
                writer.WritePropertyName("defaultDaysOfWeek"u8);
                writer.WriteStartArray();
                foreach (var item in DefaultDaysOfWeek)
                {
                    writer.WriteStringValue(item.ToSerialString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DaysOfWeekLimit))
            {
                writer.WritePropertyName("daysOfWeekLimit"u8);
                writer.WriteNumberValue(DaysOfWeekLimit.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ActiveHoursConfiguration IJsonModel<ActiveHoursConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ActiveHoursConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ActiveHoursConfiguration)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeActiveHoursConfiguration(document.RootElement, options);
        }

        internal static ActiveHoursConfiguration DeserializeActiveHoursConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            KeepAwakeEnableStatus? keepAwakeEnableStatus = default;
            AutoStartEnableStatus? autoStartEnableStatus = default;
            string defaultTimeZone = default;
            int? defaultStartTimeHour = default;
            int? defaultEndTimeHour = default;
            IList<DayOfWeek> defaultDaysOfWeek = default;
            int? daysOfWeekLimit = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("keepAwakeEnableStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keepAwakeEnableStatus = new KeepAwakeEnableStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("autoStartEnableStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoStartEnableStatus = new AutoStartEnableStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("defaultTimeZone"u8))
                {
                    defaultTimeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultStartTimeHour"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultStartTimeHour = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("defaultEndTimeHour"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultEndTimeHour = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("defaultDaysOfWeek"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DayOfWeek> array = new List<DayOfWeek>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString().ToDayOfWeek());
                    }
                    defaultDaysOfWeek = array;
                    continue;
                }
                if (property.NameEquals("daysOfWeekLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    daysOfWeekLimit = property.Value.GetInt32();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ActiveHoursConfiguration(
                keepAwakeEnableStatus,
                autoStartEnableStatus,
                defaultTimeZone,
                defaultStartTimeHour,
                defaultEndTimeHour,
                defaultDaysOfWeek ?? new ChangeTrackingList<DayOfWeek>(),
                daysOfWeekLimit,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ActiveHoursConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ActiveHoursConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerDevCenterContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ActiveHoursConfiguration)} does not support writing '{options.Format}' format.");
            }
        }

        ActiveHoursConfiguration IPersistableModel<ActiveHoursConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ActiveHoursConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeActiveHoursConfiguration(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ActiveHoursConfiguration)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ActiveHoursConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
