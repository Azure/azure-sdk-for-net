// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> Properties of an Environment Definition parameter. </summary>
    public partial class EnvironmentDefinitionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EnvironmentDefinitionContent"/>. </summary>
        internal EnvironmentDefinitionContent()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentDefinitionContent"/>. </summary>
        /// <param name="id"> Unique ID of the parameter. </param>
        /// <param name="name"> Display name of the parameter. </param>
        /// <param name="description"> Description of the parameter. </param>
        /// <param name="parameterType"> A string of one of the basic JSON types (number, integer, array, object, boolean, string). </param>
        /// <param name="isReadOnly"> Whether or not this parameter is read-only.  If true, default should have a value. </param>
        /// <param name="isRequired"> Whether or not this parameter is required. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EnvironmentDefinitionContent(Guid? id, string name, string description, EnvironmentDefinitionParameterType? parameterType, bool? isReadOnly, bool? isRequired, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Name = name;
            Description = description;
            ParameterType = parameterType;
            IsReadOnly = isReadOnly;
            IsRequired = isRequired;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Unique ID of the parameter. </summary>
        public Guid? Id { get; }
        /// <summary> Display name of the parameter. </summary>
        public string Name { get; }
        /// <summary> Description of the parameter. </summary>
        public string Description { get; }
        /// <summary> A string of one of the basic JSON types (number, integer, array, object, boolean, string). </summary>
        public EnvironmentDefinitionParameterType? ParameterType { get; }
        /// <summary> Whether or not this parameter is read-only.  If true, default should have a value. </summary>
        public bool? IsReadOnly { get; }
        /// <summary> Whether or not this parameter is required. </summary>
        public bool? IsRequired { get; }
    }
}
