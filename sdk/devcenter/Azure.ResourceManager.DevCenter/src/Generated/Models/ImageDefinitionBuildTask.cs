// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> A task executed during the image definition build. </summary>
    public partial class ImageDefinitionBuildTask
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ImageDefinitionBuildTask"/>. </summary>
        internal ImageDefinitionBuildTask()
        {
            Parameters = new ChangeTrackingList<ImageDefinitionBuildTaskParametersItem>();
        }

        /// <summary> Initializes a new instance of <see cref="ImageDefinitionBuildTask"/>. </summary>
        /// <param name="name"> The name of the task. </param>
        /// <param name="parameters"> Parameters for the task. </param>
        /// <param name="displayName"> Display name to help differentiate multiple instances of the same task. </param>
        /// <param name="id"> ID of the task instance. </param>
        /// <param name="startOn"> Start time of the task. </param>
        /// <param name="endOn"> End time of the task. </param>
        /// <param name="status"> The status of the task. </param>
        /// <param name="logUri"> The URI for retrieving logs for the task execution. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ImageDefinitionBuildTask(string name, IReadOnlyList<ImageDefinitionBuildTaskParametersItem> parameters, string displayName, string id, DateTimeOffset? startOn, DateTimeOffset? endOn, ImageDefinitionBuildStatus? status, Uri logUri, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Parameters = parameters;
            DisplayName = displayName;
            Id = id;
            StartOn = startOn;
            EndOn = endOn;
            Status = status;
            LogUri = logUri;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The name of the task. </summary>
        public string Name { get; }
        /// <summary> Parameters for the task. </summary>
        public IReadOnlyList<ImageDefinitionBuildTaskParametersItem> Parameters { get; }
        /// <summary> Display name to help differentiate multiple instances of the same task. </summary>
        public string DisplayName { get; }
        /// <summary> ID of the task instance. </summary>
        public string Id { get; }
        /// <summary> Start time of the task. </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> End time of the task. </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> The status of the task. </summary>
        public ImageDefinitionBuildStatus? Status { get; }
        /// <summary> The URI for retrieving logs for the task execution. </summary>
        public Uri LogUri { get; }
    }
}
