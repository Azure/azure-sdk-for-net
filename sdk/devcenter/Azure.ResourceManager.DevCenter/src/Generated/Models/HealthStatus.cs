// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> Health status indicating whether a pool is available to create Dev Boxes. </summary>
    public readonly partial struct HealthStatus : IEquatable<HealthStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string PendingValue = "Pending";
        private const string HealthyValue = "Healthy";
        private const string WarningValue = "Warning";
        private const string UnhealthyValue = "Unhealthy";

        /// <summary> Unknown. </summary>
        public static HealthStatus Unknown { get; } = new HealthStatus(UnknownValue);
        /// <summary> Pending. </summary>
        public static HealthStatus Pending { get; } = new HealthStatus(PendingValue);
        /// <summary> Healthy. </summary>
        public static HealthStatus Healthy { get; } = new HealthStatus(HealthyValue);
        /// <summary> Warning. </summary>
        public static HealthStatus Warning { get; } = new HealthStatus(WarningValue);
        /// <summary> Unhealthy. </summary>
        public static HealthStatus Unhealthy { get; } = new HealthStatus(UnhealthyValue);
        /// <summary> Determines if two <see cref="HealthStatus"/> values are the same. </summary>
        public static bool operator ==(HealthStatus left, HealthStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthStatus"/> values are not the same. </summary>
        public static bool operator !=(HealthStatus left, HealthStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthStatus"/>. </summary>
        public static implicit operator HealthStatus(string value) => new HealthStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
