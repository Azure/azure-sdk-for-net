// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> Indicates whether workspace storage is enabled. </summary>
    public readonly partial struct WorkspaceStorageMode : IEquatable<WorkspaceStorageMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkspaceStorageMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkspaceStorageMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DisabledValue = "Disabled";
        private const string AutoDeployValue = "AutoDeploy";

        /// <summary> Workspace storage is disabled. </summary>
        public static WorkspaceStorageMode Disabled { get; } = new WorkspaceStorageMode(DisabledValue);
        /// <summary> Workspace storage is enabled and necessary resources will be automatically setup. </summary>
        public static WorkspaceStorageMode AutoDeploy { get; } = new WorkspaceStorageMode(AutoDeployValue);
        /// <summary> Determines if two <see cref="WorkspaceStorageMode"/> values are the same. </summary>
        public static bool operator ==(WorkspaceStorageMode left, WorkspaceStorageMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkspaceStorageMode"/> values are not the same. </summary>
        public static bool operator !=(WorkspaceStorageMode left, WorkspaceStorageMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="WorkspaceStorageMode"/>. </summary>
        public static implicit operator WorkspaceStorageMode(string value) => new WorkspaceStorageMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkspaceStorageMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkspaceStorageMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
