// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> The project properties for partial update. Properties not provided in the update request will not be changed. </summary>
    public partial class DevCenterProjectPatch : DevCenterTrackedResourceUpdate
    {
        /// <summary> Initializes a new instance of <see cref="DevCenterProjectPatch"/>. </summary>
        public DevCenterProjectPatch()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DevCenterProjectPatch"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="devCenterId"> Resource Id of an associated DevCenter. </param>
        /// <param name="description"> Description of the project. </param>
        /// <param name="maxDevBoxesPerUser"> When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project. This will have no effect on existing Dev Boxes when reduced. </param>
        /// <param name="displayName"> The display name of the project. </param>
        /// <param name="catalogSettings"> Settings to be used when associating a project with a catalog. </param>
        /// <param name="customizationSettings"> Settings to be used for customizations. </param>
        /// <param name="devBoxAutoDeleteSettings"> Dev Box Auto Delete settings. </param>
        /// <param name="azureAiServicesSettings"> Indicates whether Azure AI services are enabled for a project. </param>
        /// <param name="serverlessGpuSessionsSettings"> Settings to be used for serverless GPU. </param>
        /// <param name="workspaceStorageSettings"> Settings to be used for workspace storage. </param>
        internal DevCenterProjectPatch(IDictionary<string, string> tags, AzureLocation? location, IDictionary<string, BinaryData> serializedAdditionalRawData, ResourceIdentifier devCenterId, string description, int? maxDevBoxesPerUser, string displayName, ProjectCatalogSettings catalogSettings, ProjectCustomizationSettings customizationSettings, DevBoxAutoDeleteSettings devBoxAutoDeleteSettings, AzureAiServicesSettings azureAiServicesSettings, ServerlessGpuSessionsSettings serverlessGpuSessionsSettings, WorkspaceStorageSettings workspaceStorageSettings) : base(tags, location, serializedAdditionalRawData)
        {
            DevCenterId = devCenterId;
            Description = description;
            MaxDevBoxesPerUser = maxDevBoxesPerUser;
            DisplayName = displayName;
            CatalogSettings = catalogSettings;
            CustomizationSettings = customizationSettings;
            DevBoxAutoDeleteSettings = devBoxAutoDeleteSettings;
            AzureAiServicesSettings = azureAiServicesSettings;
            ServerlessGpuSessionsSettings = serverlessGpuSessionsSettings;
            WorkspaceStorageSettings = workspaceStorageSettings;
        }

        /// <summary> Resource Id of an associated DevCenter. </summary>
        public ResourceIdentifier DevCenterId { get; set; }
        /// <summary> Description of the project. </summary>
        public string Description { get; set; }
        /// <summary> When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project. This will have no effect on existing Dev Boxes when reduced. </summary>
        public int? MaxDevBoxesPerUser { get; set; }
        /// <summary> The display name of the project. </summary>
        public string DisplayName { get; set; }
        /// <summary> Settings to be used when associating a project with a catalog. </summary>
        internal ProjectCatalogSettings CatalogSettings { get; set; }
        /// <summary> Indicates catalog item types that can be synced. </summary>
        public IList<CatalogItemType> CatalogItemSyncTypes
        {
            get
            {
                if (CatalogSettings is null)
                    CatalogSettings = new ProjectCatalogSettings();
                return CatalogSettings.CatalogItemSyncTypes;
            }
        }

        /// <summary> Settings to be used for customizations. </summary>
        public ProjectCustomizationSettings CustomizationSettings { get; set; }
        /// <summary> Dev Box Auto Delete settings. </summary>
        public DevBoxAutoDeleteSettings DevBoxAutoDeleteSettings { get; set; }
        /// <summary> Indicates whether Azure AI services are enabled for a project. </summary>
        internal AzureAiServicesSettings AzureAiServicesSettings { get; set; }
        /// <summary> The property indicates whether Azure AI services is enabled. </summary>
        public AzureAiServicesMode? AzureAiServicesMode
        {
            get => AzureAiServicesSettings is null ? default : AzureAiServicesSettings.AzureAiServicesMode;
            set
            {
                if (AzureAiServicesSettings is null)
                    AzureAiServicesSettings = new AzureAiServicesSettings();
                AzureAiServicesSettings.AzureAiServicesMode = value;
            }
        }

        /// <summary> Settings to be used for serverless GPU. </summary>
        public ServerlessGpuSessionsSettings ServerlessGpuSessionsSettings { get; set; }
        /// <summary> Settings to be used for workspace storage. </summary>
        internal WorkspaceStorageSettings WorkspaceStorageSettings { get; set; }
        /// <summary> Indicates whether workspace storage is enabled. </summary>
        public WorkspaceStorageMode? WorkspaceStorageMode
        {
            get => WorkspaceStorageSettings is null ? default : WorkspaceStorageSettings.WorkspaceStorageMode;
            set
            {
                if (WorkspaceStorageSettings is null)
                    WorkspaceStorageSettings = new WorkspaceStorageSettings();
                WorkspaceStorageSettings.WorkspaceStorageMode = value;
            }
        }
    }
}
