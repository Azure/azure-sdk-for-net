// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> The pool properties for partial update. Properties not provided in the update request will not be changed. </summary>
    public partial class DevCenterPoolPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DevCenterPoolPatch"/>. </summary>
        public DevCenterPoolPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
            ManagedVirtualNetworkRegions = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="DevCenterPoolPatch"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="devBoxDefinitionType"> Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly. </param>
        /// <param name="devBoxDefinitionName"> Name of a Dev Box definition in parent Project of this Pool. Will be ignored if devBoxDefinitionType is Value. </param>
        /// <param name="devBoxDefinition"> A definition of the machines that are created from this Pool. Will be ignored if devBoxDefinitionType is Reference or not provided. </param>
        /// <param name="networkConnectionName"> Name of a Network Connection in parent Project of this Pool. </param>
        /// <param name="licenseType"> Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created. </param>
        /// <param name="localAdministrator"> Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box. </param>
        /// <param name="stopOnDisconnect"> Stop on disconnect configuration settings for Dev Boxes created in this pool. </param>
        /// <param name="stopOnNoConnect"> Stop on no connect configuration settings for Dev Boxes created in this pool. </param>
        /// <param name="singleSignOnStatus"> Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant. </param>
        /// <param name="displayName"> The display name of the pool. </param>
        /// <param name="virtualNetworkType"> Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network. </param>
        /// <param name="managedVirtualNetworkRegions"> The regions of the managed virtual network (required when managedNetworkType is Managed). </param>
        /// <param name="activeHoursConfiguration"> Active hours configuration settings for Dev Boxes created in this pool. </param>
        /// <param name="devBoxTunnelEnableStatus"> Indicates whether Dev Box Tunnel is enabled for a the pool. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DevCenterPoolPatch(IDictionary<string, string> tags, AzureLocation? location, PoolDevBoxDefinitionType? devBoxDefinitionType, string devBoxDefinitionName, PoolDevBox devBoxDefinition, string networkConnectionName, DevCenterLicenseType? licenseType, LocalAdminStatus? localAdministrator, StopOnDisconnectConfiguration stopOnDisconnect, StopOnNoConnectConfiguration stopOnNoConnect, PoolUpdateSingleSignOnStatus? singleSignOnStatus, string displayName, VirtualNetworkType? virtualNetworkType, IList<string> managedVirtualNetworkRegions, ActiveHoursConfiguration activeHoursConfiguration, DevBoxTunnelEnableStatus? devBoxTunnelEnableStatus, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Tags = tags;
            Location = location;
            DevBoxDefinitionType = devBoxDefinitionType;
            DevBoxDefinitionName = devBoxDefinitionName;
            DevBoxDefinition = devBoxDefinition;
            NetworkConnectionName = networkConnectionName;
            LicenseType = licenseType;
            LocalAdministrator = localAdministrator;
            StopOnDisconnect = stopOnDisconnect;
            StopOnNoConnect = stopOnNoConnect;
            SingleSignOnStatus = singleSignOnStatus;
            DisplayName = displayName;
            VirtualNetworkType = virtualNetworkType;
            ManagedVirtualNetworkRegions = managedVirtualNetworkRegions;
            ActiveHoursConfiguration = activeHoursConfiguration;
            DevBoxTunnelEnableStatus = devBoxTunnelEnableStatus;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> The geo-location where the resource lives. </summary>
        public AzureLocation? Location { get; set; }
        /// <summary> Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly. </summary>
        public PoolDevBoxDefinitionType? DevBoxDefinitionType { get; set; }
        /// <summary> Name of a Dev Box definition in parent Project of this Pool. Will be ignored if devBoxDefinitionType is Value. </summary>
        public string DevBoxDefinitionName { get; set; }
        /// <summary> A definition of the machines that are created from this Pool. Will be ignored if devBoxDefinitionType is Reference or not provided. </summary>
        public PoolDevBox DevBoxDefinition { get; set; }
        /// <summary> Name of a Network Connection in parent Project of this Pool. </summary>
        public string NetworkConnectionName { get; set; }
        /// <summary> Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created. </summary>
        public DevCenterLicenseType? LicenseType { get; set; }
        /// <summary> Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box. </summary>
        public LocalAdminStatus? LocalAdministrator { get; set; }
        /// <summary> Stop on disconnect configuration settings for Dev Boxes created in this pool. </summary>
        public StopOnDisconnectConfiguration StopOnDisconnect { get; set; }
        /// <summary> Stop on no connect configuration settings for Dev Boxes created in this pool. </summary>
        public StopOnNoConnectConfiguration StopOnNoConnect { get; set; }
        /// <summary> Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant. </summary>
        public PoolUpdateSingleSignOnStatus? SingleSignOnStatus { get; set; }
        /// <summary> The display name of the pool. </summary>
        public string DisplayName { get; set; }
        /// <summary> Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network. </summary>
        public VirtualNetworkType? VirtualNetworkType { get; set; }
        /// <summary> The regions of the managed virtual network (required when managedNetworkType is Managed). </summary>
        public IList<string> ManagedVirtualNetworkRegions { get; }
        /// <summary> Active hours configuration settings for Dev Boxes created in this pool. </summary>
        public ActiveHoursConfiguration ActiveHoursConfiguration { get; set; }
        /// <summary> Indicates whether Dev Box Tunnel is enabled for a the pool. </summary>
        public DevBoxTunnelEnableStatus? DevBoxTunnelEnableStatus { get; set; }
    }
}
