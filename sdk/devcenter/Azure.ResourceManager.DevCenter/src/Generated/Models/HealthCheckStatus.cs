// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> Health check status values. </summary>
    public readonly partial struct HealthCheckStatus : IEquatable<HealthCheckStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthCheckStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthCheckStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string RunningValue = "Running";
        private const string PassedValue = "Passed";
        private const string FailedValue = "Failed";
        private const string WarningValue = "Warning";
        private const string UnknownValue = "Unknown";

        /// <summary> Pending. </summary>
        public static HealthCheckStatus Pending { get; } = new HealthCheckStatus(PendingValue);
        /// <summary> Running. </summary>
        public static HealthCheckStatus Running { get; } = new HealthCheckStatus(RunningValue);
        /// <summary> Passed. </summary>
        public static HealthCheckStatus Passed { get; } = new HealthCheckStatus(PassedValue);
        /// <summary> Failed. </summary>
        public static HealthCheckStatus Failed { get; } = new HealthCheckStatus(FailedValue);
        /// <summary> Warning. </summary>
        public static HealthCheckStatus Warning { get; } = new HealthCheckStatus(WarningValue);
        /// <summary> Unknown. </summary>
        public static HealthCheckStatus Unknown { get; } = new HealthCheckStatus(UnknownValue);
        /// <summary> Determines if two <see cref="HealthCheckStatus"/> values are the same. </summary>
        public static bool operator ==(HealthCheckStatus left, HealthCheckStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthCheckStatus"/> values are not the same. </summary>
        public static bool operator !=(HealthCheckStatus left, HealthCheckStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthCheckStatus"/>. </summary>
        public static implicit operator HealthCheckStatus(string value) => new HealthCheckStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthCheckStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthCheckStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
