// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DevCenter.Models
{
    /// <summary> A resource policy. </summary>
    public partial class ResourcePolicy
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ResourcePolicy"/>. </summary>
        public ResourcePolicy()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ResourcePolicy"/>. </summary>
        /// <param name="resources"> Resources that are included and shared as a part of a project policy. </param>
        /// <param name="filter"> Optional. When specified, this expression is used to filter the resources. </param>
        /// <param name="action"> Policy action to be taken on the resources. This is optional, and defaults to allow. </param>
        /// <param name="resourceType"> Optional. The resource type being restricted or allowed by a project policy. Used with a given action to restrict or allow access to a resource type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ResourcePolicy(string resources, string filter, PolicyAction? action, DevCenterResourceType? resourceType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Resources = resources;
            Filter = filter;
            Action = action;
            ResourceType = resourceType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resources that are included and shared as a part of a project policy. </summary>
        public string Resources { get; set; }
        /// <summary> Optional. When specified, this expression is used to filter the resources. </summary>
        public string Filter { get; set; }
        /// <summary> Policy action to be taken on the resources. This is optional, and defaults to allow. </summary>
        public PolicyAction? Action { get; set; }
        /// <summary> Optional. The resource type being restricted or allowed by a project policy. Used with a given action to restrict or allow access to a resource type. </summary>
        public DevCenterResourceType? ResourceType { get; set; }
    }
}
