// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.DevCenter.Models;

namespace Azure.ResourceManager.DevCenter
{
    internal partial class ProjectCatalogImageDefinitionBuildRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of ProjectCatalogImageDefinitionBuildRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public ProjectCatalogImageDefinitionBuildRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-07-01-preview";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateListByImageDefinitionRequestUri(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DevCenter/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogName, true);
            uri.AppendPath("/imageDefinitions/", false);
            uri.AppendPath(imageDefinitionName, true);
            uri.AppendPath("/builds", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByImageDefinitionRequest(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DevCenter/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogName, true);
            uri.AppendPath("/imageDefinitions/", false);
            uri.AppendPath(imageDefinitionName, true);
            uri.AppendPath("/builds", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Lists builds for a specified image definition. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/> or <paramref name="imageDefinitionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/> or <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ImageDefinitionBuildListResult>> ListByImageDefinitionAsync(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var message = CreateListByImageDefinitionRequest(subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImageDefinitionBuildListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ImageDefinitionBuildListResult.DeserializeImageDefinitionBuildListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists builds for a specified image definition. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/> or <paramref name="imageDefinitionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/> or <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ImageDefinitionBuildListResult> ListByImageDefinition(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var message = CreateListByImageDefinitionRequest(subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImageDefinitionBuildListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ImageDefinitionBuildListResult.DeserializeImageDefinitionBuildListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DevCenter/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogName, true);
            uri.AppendPath("/imageDefinitions/", false);
            uri.AppendPath(imageDefinitionName, true);
            uri.AppendPath("/builds/", false);
            uri.AppendPath(buildName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DevCenter/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogName, true);
            uri.AppendPath("/imageDefinitions/", false);
            uri.AppendPath(imageDefinitionName, true);
            uri.AppendPath("/builds/", false);
            uri.AppendPath(buildName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Gets a build for a specified image definition. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="buildName"> The ID of the Image Definition Build. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ImageDefinitionBuildData>> GetAsync(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));
            Argument.AssertNotNullOrEmpty(buildName, nameof(buildName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName, buildName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImageDefinitionBuildData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ImageDefinitionBuildData.DeserializeImageDefinitionBuildData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((ImageDefinitionBuildData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets a build for a specified image definition. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="buildName"> The ID of the Image Definition Build. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ImageDefinitionBuildData> Get(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));
            Argument.AssertNotNullOrEmpty(buildName, nameof(buildName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName, buildName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImageDefinitionBuildData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ImageDefinitionBuildData.DeserializeImageDefinitionBuildData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((ImageDefinitionBuildData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCancelRequestUri(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DevCenter/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogName, true);
            uri.AppendPath("/imageDefinitions/", false);
            uri.AppendPath(imageDefinitionName, true);
            uri.AppendPath("/builds/", false);
            uri.AppendPath(buildName, true);
            uri.AppendPath("/cancel", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCancelRequest(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DevCenter/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogName, true);
            uri.AppendPath("/imageDefinitions/", false);
            uri.AppendPath(imageDefinitionName, true);
            uri.AppendPath("/builds/", false);
            uri.AppendPath(buildName, true);
            uri.AppendPath("/cancel", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Cancels the specified build for an image definition. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="buildName"> The ID of the Image Definition Build. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CancelAsync(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));
            Argument.AssertNotNullOrEmpty(buildName, nameof(buildName));

            using var message = CreateCancelRequest(subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName, buildName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Cancels the specified build for an image definition. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="buildName"> The ID of the Image Definition Build. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Cancel(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));
            Argument.AssertNotNullOrEmpty(buildName, nameof(buildName));

            using var message = CreateCancelRequest(subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName, buildName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateGetBuildDetailsRequestUri(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DevCenter/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogName, true);
            uri.AppendPath("/imageDefinitions/", false);
            uri.AppendPath(imageDefinitionName, true);
            uri.AppendPath("/builds/", false);
            uri.AppendPath(buildName, true);
            uri.AppendPath("/getBuildDetails", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetBuildDetailsRequest(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DevCenter/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogName, true);
            uri.AppendPath("/imageDefinitions/", false);
            uri.AppendPath(imageDefinitionName, true);
            uri.AppendPath("/builds/", false);
            uri.AppendPath(buildName, true);
            uri.AppendPath("/getBuildDetails", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Gets Build details. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="buildName"> The ID of the Image Definition Build. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ImageDefinitionBuildDetails>> GetBuildDetailsAsync(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));
            Argument.AssertNotNullOrEmpty(buildName, nameof(buildName));

            using var message = CreateGetBuildDetailsRequest(subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName, buildName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImageDefinitionBuildDetails value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ImageDefinitionBuildDetails.DeserializeImageDefinitionBuildDetails(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets Build details. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="buildName"> The ID of the Image Definition Build. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/>, <paramref name="imageDefinitionName"/> or <paramref name="buildName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ImageDefinitionBuildDetails> GetBuildDetails(string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, string buildName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));
            Argument.AssertNotNullOrEmpty(buildName, nameof(buildName));

            using var message = CreateGetBuildDetailsRequest(subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName, buildName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImageDefinitionBuildDetails value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ImageDefinitionBuildDetails.DeserializeImageDefinitionBuildDetails(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByImageDefinitionNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByImageDefinitionNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Lists builds for a specified image definition. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/> or <paramref name="imageDefinitionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/> or <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ImageDefinitionBuildListResult>> ListByImageDefinitionNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var message = CreateListByImageDefinitionNextPageRequest(nextLink, subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImageDefinitionBuildListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ImageDefinitionBuildListResult.DeserializeImageDefinitionBuildListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists builds for a specified image definition. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="projectName"> The name of the project. </param>
        /// <param name="catalogName"> The name of the Catalog. </param>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/> or <paramref name="imageDefinitionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="catalogName"/> or <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ImageDefinitionBuildListResult> ListByImageDefinitionNextPage(string nextLink, string subscriptionId, string resourceGroupName, string projectName, string catalogName, string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var message = CreateListByImageDefinitionNextPageRequest(nextLink, subscriptionId, resourceGroupName, projectName, catalogName, imageDefinitionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImageDefinitionBuildListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ImageDefinitionBuildListResult.DeserializeImageDefinitionBuildListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
