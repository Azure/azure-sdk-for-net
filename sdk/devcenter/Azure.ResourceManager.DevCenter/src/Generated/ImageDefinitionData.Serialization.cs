// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.DevCenter.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DevCenter
{
    public partial class ImageDefinitionData : IUtf8JsonSerializable, IJsonModel<ImageDefinitionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ImageDefinitionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ImageDefinitionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageDefinitionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageDefinitionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ImageReference))
            {
                writer.WritePropertyName("imageReference"u8);
                writer.WriteObjectValue(ImageReference, options);
            }
            if (options.Format != "W" && Optional.IsDefined(FileUri))
            {
                writer.WritePropertyName("fileUrl"u8);
                writer.WriteStringValue(FileUri.AbsoluteUri);
            }
            if (Optional.IsDefined(LatestBuild))
            {
                writer.WritePropertyName("latestBuild"u8);
                writer.WriteObjectValue(LatestBuild, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ImageValidationStatus))
            {
                writer.WritePropertyName("imageValidationStatus"u8);
                writer.WriteStringValue(ImageValidationStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ImageValidationErrorDetails))
            {
                writer.WritePropertyName("imageValidationErrorDetails"u8);
                writer.WriteObjectValue(ImageValidationErrorDetails, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ValidationStatus))
            {
                writer.WritePropertyName("validationStatus"u8);
                writer.WriteStringValue(ValidationStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ActiveImageReference))
            {
                writer.WritePropertyName("activeImageReference"u8);
                writer.WriteObjectValue(ActiveImageReference, options);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoImageBuild))
            {
                writer.WritePropertyName("autoImageBuild"u8);
                writer.WriteStringValue(AutoImageBuild.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Tasks))
            {
                writer.WritePropertyName("tasks"u8);
                writer.WriteStartArray();
                foreach (var item in Tasks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UserTasks))
            {
                writer.WritePropertyName("userTasks"u8);
                writer.WriteStartArray();
                foreach (var item in UserTasks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Extends))
            {
                writer.WritePropertyName("extends"u8);
                writer.WriteObjectValue(Extends, options);
            }
            writer.WriteEndObject();
        }

        ImageDefinitionData IJsonModel<ImageDefinitionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageDefinitionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageDefinitionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeImageDefinitionData(document.RootElement, options);
        }

        internal static ImageDefinitionData DeserializeImageDefinitionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            DevCenterImageReference imageReference = default;
            Uri fileUrl = default;
            LatestImageBuild latestBuild = default;
            ImageValidationStatus? imageValidationStatus = default;
            ImageValidationErrorDetails imageValidationErrorDetails = default;
            CatalogResourceValidationStatus? validationStatus = default;
            DevCenterImageReference activeImageReference = default;
            AutoImageBuildStatus? autoImageBuild = default;
            IList<CustomizationTaskInstance> tasks = default;
            IList<CustomizationTaskInstance> userTasks = default;
            ImageDefinitionReference extends = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerDevCenterContext.Default);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("imageReference"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            imageReference = DevCenterImageReference.DeserializeDevCenterImageReference(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("fileUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            fileUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("latestBuild"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            latestBuild = LatestImageBuild.DeserializeLatestImageBuild(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("imageValidationStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            imageValidationStatus = new ImageValidationStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("imageValidationErrorDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            imageValidationErrorDetails = ImageValidationErrorDetails.DeserializeImageValidationErrorDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("validationStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            validationStatus = new CatalogResourceValidationStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("activeImageReference"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            activeImageReference = DevCenterImageReference.DeserializeDevCenterImageReference(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("autoImageBuild"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autoImageBuild = new AutoImageBuildStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("tasks"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<CustomizationTaskInstance> array = new List<CustomizationTaskInstance>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(CustomizationTaskInstance.DeserializeCustomizationTaskInstance(item, options));
                            }
                            tasks = array;
                            continue;
                        }
                        if (property0.NameEquals("userTasks"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<CustomizationTaskInstance> array = new List<CustomizationTaskInstance>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(CustomizationTaskInstance.DeserializeCustomizationTaskInstance(item, options));
                            }
                            userTasks = array;
                            continue;
                        }
                        if (property0.NameEquals("extends"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            extends = ImageDefinitionReference.DeserializeImageDefinitionReference(property0.Value, options);
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ImageDefinitionData(
                id,
                name,
                type,
                systemData,
                imageReference,
                fileUrl,
                latestBuild,
                imageValidationStatus,
                imageValidationErrorDetails,
                validationStatus,
                activeImageReference,
                autoImageBuild,
                tasks ?? new ChangeTrackingList<CustomizationTaskInstance>(),
                userTasks ?? new ChangeTrackingList<CustomizationTaskInstance>(),
                extends,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ImageDefinitionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageDefinitionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerDevCenterContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ImageDefinitionData)} does not support writing '{options.Format}' format.");
            }
        }

        ImageDefinitionData IPersistableModel<ImageDefinitionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageDefinitionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeImageDefinitionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ImageDefinitionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ImageDefinitionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
