// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.DevCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="DevCenterEncryptionSetResource"/> and their operations.
    /// Each <see cref="DevCenterEncryptionSetResource"/> in the collection will belong to the same instance of <see cref="DevCenterResource"/>.
    /// To get a <see cref="DevCenterEncryptionSetCollection"/> instance call the GetDevCenterEncryptionSets method from an instance of <see cref="DevCenterResource"/>.
    /// </summary>
    public partial class DevCenterEncryptionSetCollection : ArmCollection, IEnumerable<DevCenterEncryptionSetResource>, IAsyncEnumerable<DevCenterEncryptionSetResource>
    {
        private readonly ClientDiagnostics _devCenterEncryptionSetEncryptionSetsClientDiagnostics;
        private readonly EncryptionSetsRestOperations _devCenterEncryptionSetEncryptionSetsRestClient;

        /// <summary> Initializes a new instance of the <see cref="DevCenterEncryptionSetCollection"/> class for mocking. </summary>
        protected DevCenterEncryptionSetCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DevCenterEncryptionSetCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DevCenterEncryptionSetCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _devCenterEncryptionSetEncryptionSetsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DevCenter", DevCenterEncryptionSetResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DevCenterEncryptionSetResource.ResourceType, out string devCenterEncryptionSetEncryptionSetsApiVersion);
            _devCenterEncryptionSetEncryptionSetsRestClient = new EncryptionSetsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, devCenterEncryptionSetEncryptionSetsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != DevCenterResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, DevCenterResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or updates a devcenter encryption set resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets/{encryptionSetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="encryptionSetName"> The name of the devcenter encryption set. </param>
        /// <param name="data"> Represents a devcenter encryption set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="encryptionSetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="encryptionSetName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<DevCenterEncryptionSetResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string encryptionSetName, DevCenterEncryptionSetData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(encryptionSetName, nameof(encryptionSetName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _devCenterEncryptionSetEncryptionSetsClientDiagnostics.CreateScope("DevCenterEncryptionSetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _devCenterEncryptionSetEncryptionSetsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, data, cancellationToken).ConfigureAwait(false);
                var operation = new DevCenterArmOperation<DevCenterEncryptionSetResource>(new DevCenterEncryptionSetOperationSource(Client), _devCenterEncryptionSetEncryptionSetsClientDiagnostics, Pipeline, _devCenterEncryptionSetEncryptionSetsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a devcenter encryption set resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets/{encryptionSetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="encryptionSetName"> The name of the devcenter encryption set. </param>
        /// <param name="data"> Represents a devcenter encryption set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="encryptionSetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="encryptionSetName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<DevCenterEncryptionSetResource> CreateOrUpdate(WaitUntil waitUntil, string encryptionSetName, DevCenterEncryptionSetData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(encryptionSetName, nameof(encryptionSetName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _devCenterEncryptionSetEncryptionSetsClientDiagnostics.CreateScope("DevCenterEncryptionSetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _devCenterEncryptionSetEncryptionSetsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, data, cancellationToken);
                var operation = new DevCenterArmOperation<DevCenterEncryptionSetResource>(new DevCenterEncryptionSetOperationSource(Client), _devCenterEncryptionSetEncryptionSetsClientDiagnostics, Pipeline, _devCenterEncryptionSetEncryptionSetsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a devcenter encryption set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets/{encryptionSetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="encryptionSetName"> The name of the devcenter encryption set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="encryptionSetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="encryptionSetName"/> is null. </exception>
        public virtual async Task<Response<DevCenterEncryptionSetResource>> GetAsync(string encryptionSetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(encryptionSetName, nameof(encryptionSetName));

            using var scope = _devCenterEncryptionSetEncryptionSetsClientDiagnostics.CreateScope("DevCenterEncryptionSetCollection.Get");
            scope.Start();
            try
            {
                var response = await _devCenterEncryptionSetEncryptionSetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DevCenterEncryptionSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a devcenter encryption set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets/{encryptionSetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="encryptionSetName"> The name of the devcenter encryption set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="encryptionSetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="encryptionSetName"/> is null. </exception>
        public virtual Response<DevCenterEncryptionSetResource> Get(string encryptionSetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(encryptionSetName, nameof(encryptionSetName));

            using var scope = _devCenterEncryptionSetEncryptionSetsClientDiagnostics.CreateScope("DevCenterEncryptionSetCollection.Get");
            scope.Start();
            try
            {
                var response = _devCenterEncryptionSetEncryptionSetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DevCenterEncryptionSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all encryption sets in the devcenter.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: '$top=10'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DevCenterEncryptionSetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DevCenterEncryptionSetResource> GetAllAsync(int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _devCenterEncryptionSetEncryptionSetsRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _devCenterEncryptionSetEncryptionSetsRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DevCenterEncryptionSetResource(Client, DevCenterEncryptionSetData.DeserializeDevCenterEncryptionSetData(e)), _devCenterEncryptionSetEncryptionSetsClientDiagnostics, Pipeline, "DevCenterEncryptionSetCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all encryption sets in the devcenter.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: '$top=10'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DevCenterEncryptionSetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DevCenterEncryptionSetResource> GetAll(int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _devCenterEncryptionSetEncryptionSetsRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _devCenterEncryptionSetEncryptionSetsRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DevCenterEncryptionSetResource(Client, DevCenterEncryptionSetData.DeserializeDevCenterEncryptionSetData(e)), _devCenterEncryptionSetEncryptionSetsClientDiagnostics, Pipeline, "DevCenterEncryptionSetCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets/{encryptionSetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="encryptionSetName"> The name of the devcenter encryption set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="encryptionSetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="encryptionSetName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string encryptionSetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(encryptionSetName, nameof(encryptionSetName));

            using var scope = _devCenterEncryptionSetEncryptionSetsClientDiagnostics.CreateScope("DevCenterEncryptionSetCollection.Exists");
            scope.Start();
            try
            {
                var response = await _devCenterEncryptionSetEncryptionSetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets/{encryptionSetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="encryptionSetName"> The name of the devcenter encryption set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="encryptionSetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="encryptionSetName"/> is null. </exception>
        public virtual Response<bool> Exists(string encryptionSetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(encryptionSetName, nameof(encryptionSetName));

            using var scope = _devCenterEncryptionSetEncryptionSetsClientDiagnostics.CreateScope("DevCenterEncryptionSetCollection.Exists");
            scope.Start();
            try
            {
                var response = _devCenterEncryptionSetEncryptionSetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets/{encryptionSetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="encryptionSetName"> The name of the devcenter encryption set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="encryptionSetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="encryptionSetName"/> is null. </exception>
        public virtual async Task<NullableResponse<DevCenterEncryptionSetResource>> GetIfExistsAsync(string encryptionSetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(encryptionSetName, nameof(encryptionSetName));

            using var scope = _devCenterEncryptionSetEncryptionSetsClientDiagnostics.CreateScope("DevCenterEncryptionSetCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _devCenterEncryptionSetEncryptionSetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<DevCenterEncryptionSetResource>(response.GetRawResponse());
                return Response.FromValue(new DevCenterEncryptionSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/encryptionSets/{encryptionSetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EncryptionSets_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterEncryptionSetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="encryptionSetName"> The name of the devcenter encryption set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="encryptionSetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="encryptionSetName"/> is null. </exception>
        public virtual NullableResponse<DevCenterEncryptionSetResource> GetIfExists(string encryptionSetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(encryptionSetName, nameof(encryptionSetName));

            using var scope = _devCenterEncryptionSetEncryptionSetsClientDiagnostics.CreateScope("DevCenterEncryptionSetCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _devCenterEncryptionSetEncryptionSetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, encryptionSetName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<DevCenterEncryptionSetResource>(response.GetRawResponse());
                return Response.FromValue(new DevCenterEncryptionSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DevCenterEncryptionSetResource> IEnumerable<DevCenterEncryptionSetResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DevCenterEncryptionSetResource> IAsyncEnumerable<DevCenterEncryptionSetResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
