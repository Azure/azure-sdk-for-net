// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.DevCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="DevcenterCatalogImageDefinitionResource"/> and their operations.
    /// Each <see cref="DevcenterCatalogImageDefinitionResource"/> in the collection will belong to the same instance of <see cref="DevCenterCatalogResource"/>.
    /// To get a <see cref="DevcenterCatalogImageDefinitionCollection"/> instance call the GetDevcenterCatalogImageDefinitions method from an instance of <see cref="DevCenterCatalogResource"/>.
    /// </summary>
    public partial class DevcenterCatalogImageDefinitionCollection : ArmCollection, IEnumerable<DevcenterCatalogImageDefinitionResource>, IAsyncEnumerable<DevcenterCatalogImageDefinitionResource>
    {
        private readonly ClientDiagnostics _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics;
        private readonly DevCenterCatalogImageDefinitionsRestOperations _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="DevcenterCatalogImageDefinitionCollection"/> class for mocking. </summary>
        protected DevcenterCatalogImageDefinitionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DevcenterCatalogImageDefinitionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DevcenterCatalogImageDefinitionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DevCenter", DevcenterCatalogImageDefinitionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DevcenterCatalogImageDefinitionResource.ResourceType, out string devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsApiVersion);
            _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient = new DevCenterCatalogImageDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != DevCenterCatalogResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, DevCenterCatalogResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an Image Definition from the catalog
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DevCenterCatalogImageDefinitions_GetByDevCenterCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevcenterCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual async Task<Response<DevcenterCatalogImageDefinitionResource>> GetAsync(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics.CreateScope("DevcenterCatalogImageDefinitionCollection.Get");
            scope.Start();
            try
            {
                var response = await _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.GetByDevCenterCatalogAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DevcenterCatalogImageDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an Image Definition from the catalog
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DevCenterCatalogImageDefinitions_GetByDevCenterCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevcenterCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual Response<DevcenterCatalogImageDefinitionResource> Get(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics.CreateScope("DevcenterCatalogImageDefinitionCollection.Get");
            scope.Start();
            try
            {
                var response = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.GetByDevCenterCatalog(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DevcenterCatalogImageDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Image Definitions in the catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DevCenterCatalogImageDefinitions_ListByDevCenterCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevcenterCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: '$top=10'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DevcenterCatalogImageDefinitionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DevcenterCatalogImageDefinitionResource> GetAllAsync(int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.CreateListByDevCenterCatalogRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.CreateListByDevCenterCatalogNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, top);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DevcenterCatalogImageDefinitionResource(Client, DevCenterImageDefinitionData.DeserializeDevCenterImageDefinitionData(e)), _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics, Pipeline, "DevcenterCatalogImageDefinitionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Image Definitions in the catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DevCenterCatalogImageDefinitions_ListByDevCenterCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevcenterCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: '$top=10'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DevcenterCatalogImageDefinitionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DevcenterCatalogImageDefinitionResource> GetAll(int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.CreateListByDevCenterCatalogRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.CreateListByDevCenterCatalogNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, top);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DevcenterCatalogImageDefinitionResource(Client, DevCenterImageDefinitionData.DeserializeDevCenterImageDefinitionData(e)), _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics, Pipeline, "DevcenterCatalogImageDefinitionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DevCenterCatalogImageDefinitions_GetByDevCenterCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevcenterCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics.CreateScope("DevcenterCatalogImageDefinitionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.GetByDevCenterCatalogAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DevCenterCatalogImageDefinitions_GetByDevCenterCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevcenterCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual Response<bool> Exists(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics.CreateScope("DevcenterCatalogImageDefinitionCollection.Exists");
            scope.Start();
            try
            {
                var response = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.GetByDevCenterCatalog(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DevCenterCatalogImageDefinitions_GetByDevCenterCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevcenterCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual async Task<NullableResponse<DevcenterCatalogImageDefinitionResource>> GetIfExistsAsync(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics.CreateScope("DevcenterCatalogImageDefinitionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.GetByDevCenterCatalogAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<DevcenterCatalogImageDefinitionResource>(response.GetRawResponse());
                return Response.FromValue(new DevcenterCatalogImageDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DevCenterCatalogImageDefinitions_GetByDevCenterCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevcenterCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual NullableResponse<DevcenterCatalogImageDefinitionResource> GetIfExists(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsClientDiagnostics.CreateScope("DevcenterCatalogImageDefinitionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _devcenterCatalogImageDefinitionDevCenterCatalogImageDefinitionsRestClient.GetByDevCenterCatalog(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<DevcenterCatalogImageDefinitionResource>(response.GetRawResponse());
                return Response.FromValue(new DevcenterCatalogImageDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DevcenterCatalogImageDefinitionResource> IEnumerable<DevcenterCatalogImageDefinitionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DevcenterCatalogImageDefinitionResource> IAsyncEnumerable<DevcenterCatalogImageDefinitionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
