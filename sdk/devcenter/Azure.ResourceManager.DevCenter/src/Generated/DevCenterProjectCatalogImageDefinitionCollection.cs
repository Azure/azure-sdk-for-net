// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.DevCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="DevCenterProjectCatalogImageDefinitionResource"/> and their operations.
    /// Each <see cref="DevCenterProjectCatalogImageDefinitionResource"/> in the collection will belong to the same instance of <see cref="DevCenterProjectCatalogResource"/>.
    /// To get a <see cref="DevCenterProjectCatalogImageDefinitionCollection"/> instance call the GetDevCenterProjectCatalogImageDefinitions method from an instance of <see cref="DevCenterProjectCatalogResource"/>.
    /// </summary>
    public partial class DevCenterProjectCatalogImageDefinitionCollection : ArmCollection, IEnumerable<DevCenterProjectCatalogImageDefinitionResource>, IAsyncEnumerable<DevCenterProjectCatalogImageDefinitionResource>
    {
        private readonly ClientDiagnostics _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics;
        private readonly ProjectCatalogImageDefinitionsRestOperations _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="DevCenterProjectCatalogImageDefinitionCollection"/> class for mocking. </summary>
        protected DevCenterProjectCatalogImageDefinitionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DevCenterProjectCatalogImageDefinitionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DevCenterProjectCatalogImageDefinitionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DevCenter", DevCenterProjectCatalogImageDefinitionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DevCenterProjectCatalogImageDefinitionResource.ResourceType, out string devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsApiVersion);
            _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient = new ProjectCatalogImageDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != DevCenterProjectCatalogResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, DevCenterProjectCatalogResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an Image Definition from the catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogImageDefinitions_GetByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual async Task<Response<DevCenterProjectCatalogImageDefinitionResource>> GetAsync(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogImageDefinitionCollection.Get");
            scope.Start();
            try
            {
                var response = await _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.GetByProjectCatalogAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DevCenterProjectCatalogImageDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an Image Definition from the catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogImageDefinitions_GetByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual Response<DevCenterProjectCatalogImageDefinitionResource> Get(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogImageDefinitionCollection.Get");
            scope.Start();
            try
            {
                var response = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.GetByProjectCatalog(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DevCenterProjectCatalogImageDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Image Definitions in the catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogImageDefinitions_ListByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: '$top=10'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DevCenterProjectCatalogImageDefinitionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DevCenterProjectCatalogImageDefinitionResource> GetAllAsync(int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.CreateListByProjectCatalogRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.CreateListByProjectCatalogNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, top);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DevCenterProjectCatalogImageDefinitionResource(Client, DevCenterImageDefinitionData.DeserializeDevCenterImageDefinitionData(e)), _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics, Pipeline, "DevCenterProjectCatalogImageDefinitionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Image Definitions in the catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogImageDefinitions_ListByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: '$top=10'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DevCenterProjectCatalogImageDefinitionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DevCenterProjectCatalogImageDefinitionResource> GetAll(int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.CreateListByProjectCatalogRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.CreateListByProjectCatalogNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, top);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DevCenterProjectCatalogImageDefinitionResource(Client, DevCenterImageDefinitionData.DeserializeDevCenterImageDefinitionData(e)), _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics, Pipeline, "DevCenterProjectCatalogImageDefinitionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogImageDefinitions_GetByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogImageDefinitionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.GetByProjectCatalogAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogImageDefinitions_GetByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual Response<bool> Exists(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogImageDefinitionCollection.Exists");
            scope.Start();
            try
            {
                var response = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.GetByProjectCatalog(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogImageDefinitions_GetByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual async Task<NullableResponse<DevCenterProjectCatalogImageDefinitionResource>> GetIfExistsAsync(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogImageDefinitionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.GetByProjectCatalogAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<DevCenterProjectCatalogImageDefinitionResource>(response.GetRawResponse());
                return Response.FromValue(new DevCenterProjectCatalogImageDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProjectCatalogImageDefinitions_GetByProjectCatalog</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DevCenterProjectCatalogImageDefinitionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="imageDefinitionName"> The name of the Image Definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="imageDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="imageDefinitionName"/> is null. </exception>
        public virtual NullableResponse<DevCenterProjectCatalogImageDefinitionResource> GetIfExists(string imageDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(imageDefinitionName, nameof(imageDefinitionName));

            using var scope = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsClientDiagnostics.CreateScope("DevCenterProjectCatalogImageDefinitionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _devCenterProjectCatalogImageDefinitionProjectCatalogImageDefinitionsRestClient.GetByProjectCatalog(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, imageDefinitionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<DevCenterProjectCatalogImageDefinitionResource>(response.GetRawResponse());
                return Response.FromValue(new DevCenterProjectCatalogImageDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DevCenterProjectCatalogImageDefinitionResource> IEnumerable<DevCenterProjectCatalogImageDefinitionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DevCenterProjectCatalogImageDefinitionResource> IAsyncEnumerable<DevCenterProjectCatalogImageDefinitionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
