// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.DevCenter.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DevCenter
{
    /// <summary>
    /// A class representing the DevCenterImageDefinition data model.
    /// Represents a definition for an Image.
    /// </summary>
    public partial class DevCenterImageDefinitionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DevCenterImageDefinitionData"/>. </summary>
        public DevCenterImageDefinitionData()
        {
            Tasks = new ChangeTrackingList<CustomizationTaskInstance>();
            UserTasks = new ChangeTrackingList<CustomizationTaskInstance>();
        }

        /// <summary> Initializes a new instance of <see cref="DevCenterImageDefinitionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="imageReference"> Image reference information. </param>
        /// <param name="fileUri"> The URL to the repository file containing the image definition. </param>
        /// <param name="latestBuild"> Details about the latest build. </param>
        /// <param name="imageValidationStatus"> Validation status of the configured image. </param>
        /// <param name="imageValidationErrorDetails"> Details for image validator error. Populated when the image validation is not successful. </param>
        /// <param name="validationStatus"> Validation status for the Image Definition. </param>
        /// <param name="activeImageReference"> Image reference information for the currently active image (only populated during updates). </param>
        /// <param name="autoImageBuild"> Indicates if automatic image builds will be triggered for image definition updates. </param>
        /// <param name="tasks"> Tasks to run at Dev Box provisioning time. </param>
        /// <param name="userTasks"> Tasks to run when a user first logs into a Dev Box. </param>
        /// <param name="extends"> Another Image Definition that this one extends. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DevCenterImageDefinitionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DevCenterImageReference imageReference, Uri fileUri, LatestImageBuild latestBuild, ImageValidationStatus? imageValidationStatus, ImageValidationErrorDetails imageValidationErrorDetails, CatalogResourceValidationStatus? validationStatus, DevCenterImageReference activeImageReference, AutoImageBuildStatus? autoImageBuild, IList<CustomizationTaskInstance> tasks, IList<CustomizationTaskInstance> userTasks, ImageDefinitionReference extends, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            ImageReference = imageReference;
            FileUri = fileUri;
            LatestBuild = latestBuild;
            ImageValidationStatus = imageValidationStatus;
            ImageValidationErrorDetails = imageValidationErrorDetails;
            ValidationStatus = validationStatus;
            ActiveImageReference = activeImageReference;
            AutoImageBuild = autoImageBuild;
            Tasks = tasks;
            UserTasks = userTasks;
            Extends = extends;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Image reference information. </summary>
        public DevCenterImageReference ImageReference { get; set; }
        /// <summary> The URL to the repository file containing the image definition. </summary>
        public Uri FileUri { get; }
        /// <summary> Details about the latest build. </summary>
        public LatestImageBuild LatestBuild { get; set; }
        /// <summary> Validation status of the configured image. </summary>
        public ImageValidationStatus? ImageValidationStatus { get; }
        /// <summary> Details for image validator error. Populated when the image validation is not successful. </summary>
        public ImageValidationErrorDetails ImageValidationErrorDetails { get; }
        /// <summary> Validation status for the Image Definition. </summary>
        public CatalogResourceValidationStatus? ValidationStatus { get; }
        /// <summary> Image reference information for the currently active image (only populated during updates). </summary>
        public DevCenterImageReference ActiveImageReference { get; }
        /// <summary> Indicates if automatic image builds will be triggered for image definition updates. </summary>
        public AutoImageBuildStatus? AutoImageBuild { get; }
        /// <summary> Tasks to run at Dev Box provisioning time. </summary>
        public IList<CustomizationTaskInstance> Tasks { get; }
        /// <summary> Tasks to run when a user first logs into a Dev Box. </summary>
        public IList<CustomizationTaskInstance> UserTasks { get; }
        /// <summary> Another Image Definition that this one extends. </summary>
        public ImageDefinitionReference Extends { get; set; }
    }
}
