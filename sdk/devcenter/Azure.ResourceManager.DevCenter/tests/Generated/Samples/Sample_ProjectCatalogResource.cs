// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DevCenter.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DevCenter.Samples
{
    public partial class Sample_ProjectCatalogResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ProjectCatalogsGet()
        {
            // Generated from example definition: specification/devcenter/resource-manager/Microsoft.DevCenter/preview/2025-07-01-preview/examples/ProjectCatalogs_Get.json
            // this example is just showing the usage of "ProjectCatalogs_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProjectCatalogResource created on azure
            // for more information of creating ProjectCatalogResource, please refer to the document of ProjectCatalogResource
            string subscriptionId = "0ac520ee-14c0-480f-b6c9-0a90c58fffff";
            string resourceGroupName = "rg1";
            string projectName = "DevProject";
            string catalogName = "CentralCatalog";
            ResourceIdentifier projectCatalogResourceId = ProjectCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, catalogName);
            ProjectCatalogResource projectCatalog = client.GetProjectCatalogResource(projectCatalogResourceId);

            // invoke the operation
            ProjectCatalogResource result = await projectCatalog.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DevCenterCatalogData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ProjectCatalogsDelete()
        {
            // Generated from example definition: specification/devcenter/resource-manager/Microsoft.DevCenter/preview/2025-07-01-preview/examples/ProjectCatalogs_Delete.json
            // this example is just showing the usage of "ProjectCatalogs_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProjectCatalogResource created on azure
            // for more information of creating ProjectCatalogResource, please refer to the document of ProjectCatalogResource
            string subscriptionId = "0ac520ee-14c0-480f-b6c9-0a90c58fffff";
            string resourceGroupName = "rg1";
            string projectName = "DevProject";
            string catalogName = "CentralCatalog";
            ResourceIdentifier projectCatalogResourceId = ProjectCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, catalogName);
            ProjectCatalogResource projectCatalog = client.GetProjectCatalogResource(projectCatalogResourceId);

            // invoke the operation
            await projectCatalog.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ProjectCatalogsPatch()
        {
            // Generated from example definition: specification/devcenter/resource-manager/Microsoft.DevCenter/preview/2025-07-01-preview/examples/ProjectCatalogs_Patch.json
            // this example is just showing the usage of "ProjectCatalogs_Patch" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProjectCatalogResource created on azure
            // for more information of creating ProjectCatalogResource, please refer to the document of ProjectCatalogResource
            string subscriptionId = "0ac520ee-14c0-480f-b6c9-0a90c58fffff";
            string resourceGroupName = "rg1";
            string projectName = "DevProject";
            string catalogName = "CentralCatalog";
            ResourceIdentifier projectCatalogResourceId = ProjectCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, catalogName);
            ProjectCatalogResource projectCatalog = client.GetProjectCatalogResource(projectCatalogResourceId);

            // invoke the operation
            DevCenterCatalogPatch patch = new DevCenterCatalogPatch
            {
                GitHub = new DevCenterGitCatalog
                {
                    Path = "/environments",
                },
            };
            ArmOperation<ProjectCatalogResource> lro = await projectCatalog.UpdateAsync(WaitUntil.Completed, patch);
            ProjectCatalogResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DevCenterCatalogData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Connect_ProjectCatalogsConnect()
        {
            // Generated from example definition: specification/devcenter/resource-manager/Microsoft.DevCenter/preview/2025-07-01-preview/examples/ProjectCatalogs_Connect.json
            // this example is just showing the usage of "ProjectCatalogs_Connect" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProjectCatalogResource created on azure
            // for more information of creating ProjectCatalogResource, please refer to the document of ProjectCatalogResource
            string subscriptionId = "0ac520ee-14c0-480f-b6c9-0a90c58fffff";
            string resourceGroupName = "rg1";
            string projectName = "DevProject";
            string catalogName = "CentralCatalog";
            ResourceIdentifier projectCatalogResourceId = ProjectCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, catalogName);
            ProjectCatalogResource projectCatalog = client.GetProjectCatalogResource(projectCatalogResourceId);

            // invoke the operation
            await projectCatalog.ConnectAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetSyncErrorDetails_ProjectCatalogsGetSyncErrorDetails()
        {
            // Generated from example definition: specification/devcenter/resource-manager/Microsoft.DevCenter/preview/2025-07-01-preview/examples/ProjectCatalogs_GetSyncErrorDetails.json
            // this example is just showing the usage of "ProjectCatalogs_GetSyncErrorDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProjectCatalogResource created on azure
            // for more information of creating ProjectCatalogResource, please refer to the document of ProjectCatalogResource
            string subscriptionId = "0ac520ee-14c0-480f-b6c9-0a90c58fffff";
            string resourceGroupName = "rg1";
            string projectName = "DevProject";
            string catalogName = "CentralCatalog";
            ResourceIdentifier projectCatalogResourceId = ProjectCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, catalogName);
            ProjectCatalogResource projectCatalog = client.GetProjectCatalogResource(projectCatalogResourceId);

            // invoke the operation
            CatalogSyncErrorDetails result = await projectCatalog.GetSyncErrorDetailsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Sync_ProjectCatalogsSync()
        {
            // Generated from example definition: specification/devcenter/resource-manager/Microsoft.DevCenter/preview/2025-07-01-preview/examples/ProjectCatalogs_Sync.json
            // this example is just showing the usage of "ProjectCatalogs_Sync" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProjectCatalogResource created on azure
            // for more information of creating ProjectCatalogResource, please refer to the document of ProjectCatalogResource
            string subscriptionId = "0ac520ee-14c0-480f-b6c9-0a90c58fffff";
            string resourceGroupName = "rg1";
            string projectName = "DevProject";
            string catalogName = "CentralCatalog";
            ResourceIdentifier projectCatalogResourceId = ProjectCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, catalogName);
            ProjectCatalogResource projectCatalog = client.GetProjectCatalogResource(projectCatalogResourceId);

            // invoke the operation
            await projectCatalog.SyncAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }
    }
}
