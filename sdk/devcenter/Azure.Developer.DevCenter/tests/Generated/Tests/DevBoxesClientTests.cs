// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Developer.DevCenter.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Tests
{
    public partial class DevBoxesClientTests : DeveloperDevCenterTestBase
    {
        public DevBoxesClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Pool_GetPool_GetsAPool()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response response = await client.GetPoolAsync("myProject", "DevPool", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Pool_GetPool_GetsAPool_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response<DevBoxPool> response = await client.GetPoolAsync("myProject", "DevPool");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Schedule_GetSchedule_GetsASchedule()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response response = await client.GetScheduleAsync("myProject", "DevPool", "default", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Schedule_GetSchedule_GetsASchedule_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response<DevBoxSchedule> response = await client.GetScheduleAsync("myProject", "DevPool", "default");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBox_GetDevBox_GetsADevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxAsync("myProject", "me", "MyDevBox", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBox_GetDevBox_GetsADevBox_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response<DevBox> response = await client.GetDevBoxAsync("myProject", "me", "MyDevBox");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_GetRemoteConnection_GetsRDPConnectionInfo()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response response = await client.GetRemoteConnectionAsync("myProject", "me", "MyDevBox", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_GetRemoteConnection_GetsRDPConnectionInfo_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response<RemoteConnection> response = await client.GetRemoteConnectionAsync("myProject", "me", "MyDevBox");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxAction_GetDevBoxAction_GetsAnAction()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxActionAsync("myProject", "me", "myDevBox", "schedule-default", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxAction_GetDevBoxAction_GetsAnAction_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = await client.GetDevBoxActionAsync("myProject", "me", "myDevBox", "schedule-default");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_SkipAction_SkipsAnOccurrenceOfAnAction()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response response = await client.SkipActionAsync("myProject", "me", "myDevBox", "schedule-default");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_DelayAction_DelaysTheOccurrenceOfAnAction()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response response = await client.DelayActionAsync("myProject", "me", "myDevBox", "schedule-default", DateTimeOffset.Parse("2022-09-30T17:00:00Z"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_DelayAction_DelaysTheOccurrenceOfAnAction_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = await client.DelayActionAsync("myProject", "me", "myDevBox", "schedule-default", DateTimeOffset.Parse("2022-09-30T17:00:00Z"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Pool_GetPools_ListsAvailablePools()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolsAsync("myProject", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Pool_GetPools_ListsAvailablePools_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (DevBoxPool item in client.GetPoolsAsync("myProject"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Schedule_GetSchedules_ListsAvailableSchedulesForAPool()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchedulesAsync("myProject", "DevPool", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Schedule_GetSchedules_ListsAvailableSchedulesForAPool_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (DevBoxSchedule item in client.GetSchedulesAsync("myProject", "DevPool"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_GetAllDevBoxes_ListsDevBoxesThatTheCallerHasAccessToInTheDevCenter()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllDevBoxesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_GetAllDevBoxes_ListsDevBoxesThatTheCallerHasAccessToInTheDevCenter_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (DevBox item in client.GetAllDevBoxesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_GetAllDevBoxesByUser_ListsDevBoxesInTheDevCenterForAParticularUser()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllDevBoxesByUserAsync("me", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_GetAllDevBoxesByUser_ListsDevBoxesInTheDevCenterForAParticularUser_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (DevBox item in client.GetAllDevBoxesByUserAsync("me"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_GetDevBoxes_ListsDevBoxesInTheProjectForAParticularUser()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDevBoxesAsync("myProject", "me", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_GetDevBoxes_ListsDevBoxesInTheProjectForAParticularUser_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (DevBox item in client.GetDevBoxesAsync("myProject", "me"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxAction_GetDevBoxActions_ListsActionsOnADevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDevBoxActionsAsync("myProject", "me", "myDevBox", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxAction_GetDevBoxActions_ListsActionsOnADevBox_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (DevBoxAction item in client.GetDevBoxActionsAsync("myProject", "me", "myDevBox"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_DelayAllActions_DelaysAllActions()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.DelayAllActionsAsync("myProject", "me", "myDevBox", DateTimeOffset.Parse("2022-09-30T17:00:00Z"), null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_DelayAllActions_DelaysAllActions_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            await foreach (DevBoxActionDelayResult item in client.DelayAllActionsAsync("myProject", "me", "myDevBox", DateTimeOffset.Parse("2022-09-30T17:00:00Z")))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_CreateDevBox_CreatesOrReplacesADevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                poolName = "LargeDevWorkStationPool",
            });
            Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "myProject", "me", "MyDevBox", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_DeleteDevBox_DeletesADevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "myProject", "me", "MyDevBox");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_StartDevBox_StartsADevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "myProject", "me", "MyDevBox");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_StopDevBox_StopsADevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "myProject", "me", "MyDevBox");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DevBoxesClientOperations_RestartDevBox_RestartsADevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = CreateDevBoxesClient(endpoint, credential);

            Operation operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "myProject", "me", "MyDevBox");
        }
    }
}
