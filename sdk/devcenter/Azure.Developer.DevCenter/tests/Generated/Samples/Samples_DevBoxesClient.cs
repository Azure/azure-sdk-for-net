// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Developer.DevCenter;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public class Samples_DevBoxesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetPool("<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetPoolAsync("<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetPool("<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetPoolAsync("<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScheduleByPool()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScheduleByPool_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScheduleByPool_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScheduleByPool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxByUser()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetDevBoxByUser("me", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxByUser_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetDevBoxByUserAsync("me", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxByUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetDevBoxByUser("me", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetDevBoxByUserAsync("me", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetRemoteConnection("me", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetRemoteConnectionAsync("me", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetRemoteConnection("me", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetRemoteConnectionAsync("me", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpcomingAction()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetUpcomingAction("me", "<devBoxName>", "<upcomingActionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpcomingAction_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpcomingAction_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetUpcomingAction("me", "<devBoxName>", "<upcomingActionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpcomingAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkipUpcomingAction()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.SkipUpcomingAction("me", "<devBoxName>", "<upcomingActionId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkipUpcomingAction_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.SkipUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkipUpcomingAction_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.SkipUpcomingAction("me", "<devBoxName>", "<upcomingActionId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkipUpcomingAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.SkipUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayUpcomingAction()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.DelayUpcomingAction("me", "<devBoxName>", "<upcomingActionId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayUpcomingAction_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.DelayUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayUpcomingAction_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = client.DelayUpcomingAction("me", "<devBoxName>", "<upcomingActionId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayUpcomingAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Response response = await client.DelayUpcomingActionAsync("me", "<devBoxName>", "<upcomingActionId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetPools(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetPoolsAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetPools(1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("osType").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetPoolsAsync(1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("osType").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedulesByPool()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetSchedulesByPool("<poolName>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedulesByPool_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetSchedulesByPoolAsync("<poolName>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedulesByPool_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetSchedulesByPool("<poolName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("frequency").ToString());
                Console.WriteLine(result[0].GetProperty("time").ToString());
                Console.WriteLine(result[0].GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedulesByPool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetSchedulesByPoolAsync("<poolName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("frequency").ToString());
                Console.WriteLine(result[0].GetProperty("time").ToString());
                Console.WriteLine(result[0].GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxesByUser()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetDevBoxesByUser("me", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxesByUser_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetDevBoxesByUserAsync("me", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxesByUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetDevBoxesByUser("me", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("projectName").ToString());
                Console.WriteLine(result[0].GetProperty("poolName").ToString());
                Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("actionState").ToString());
                Console.WriteLine(result[0].GetProperty("powerState").ToString());
                Console.WriteLine(result[0].GetProperty("uniqueId").ToString());
                Console.WriteLine(result[0].GetProperty("errorDetails").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("errorDetails").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("osType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result[0].GetProperty("createdTime").ToString());
                Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxesByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetDevBoxesByUserAsync("me", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("projectName").ToString());
                Console.WriteLine(result[0].GetProperty("poolName").ToString());
                Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("actionState").ToString());
                Console.WriteLine(result[0].GetProperty("powerState").ToString());
                Console.WriteLine(result[0].GetProperty("uniqueId").ToString());
                Console.WriteLine(result[0].GetProperty("errorDetails").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("errorDetails").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("osType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result[0].GetProperty("createdTime").ToString());
                Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpcomingActions()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetUpcomingActions("me", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpcomingActions_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetUpcomingActionsAsync("me", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpcomingActions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetUpcomingActions("me", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("actionType").ToString());
                Console.WriteLine(result[0].GetProperty("reason").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTime").ToString());
                Console.WriteLine(result[0].GetProperty("originalScheduledTime").ToString());
                Console.WriteLine(result[0].GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpcomingActions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetUpcomingActionsAsync("me", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("actionType").ToString());
                Console.WriteLine(result[0].GetProperty("reason").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTime").ToString());
                Console.WriteLine(result[0].GetProperty("originalScheduledTime").ToString());
                Console.WriteLine(result[0].GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
            });
            Operation<BinaryData> operation = client.CreateDevBox(WaitUntil.Completed, "me", "<devBoxName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
            });
            Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            });
            Operation<BinaryData> operation = client.CreateDevBox(WaitUntil.Completed, "me", "<devBoxName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            });
            Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = client.DeleteDevBox(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = client.DeleteDevBox(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = client.StartDevBox(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = client.StartDevBox(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = client.StopDevBox(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = client.StopDevBox(WaitUntil.Completed, "me", "<devBoxName>", hibernate: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, "<ProjectName>", credential);

            Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "me", "<devBoxName>", hibernate: true);
        }
    }
}
