// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Developer.DevCenter;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public partial class Samples_DevBoxesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetPool_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetPool("<projectName>", "<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetPool_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetPoolAsync("<projectName>", "<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetPool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetPool("<projectName>", "<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetPool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetPoolAsync("<projectName>", "<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetSchedule("<projectName>", "<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetScheduleAsync("<projectName>", "<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetSchedule("<projectName>", "<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetScheduleAsync("<projectName>", "<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetDevBox_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetDevBox("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetDevBox_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetDevBox("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetRemoteConnection_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetRemoteConnection_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetRemoteConnection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetRemoteConnection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetDevBoxAction_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetDevBoxAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetDevBoxAction_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetDevBoxAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetDevBoxAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetDevBoxAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_SkipAction_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.SkipAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_SkipAction_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.SkipActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_SkipAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.SkipAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_SkipAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.SkipActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_DelayAction_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_DelayAction_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_DelayAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_DelayAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetPools_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetPools("<projectName>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetPools_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolsAsync("<projectName>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetPools_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetPools("<projectName>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
                Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
                Console.WriteLine(result.GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetPools_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolsAsync("<projectName>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
                Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
                Console.WriteLine(result.GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetSchedules_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetSchedules("<projectName>", "<poolName>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetSchedules_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchedulesAsync("<projectName>", "<poolName>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetSchedules_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetSchedules("<projectName>", "<poolName>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetSchedules_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchedulesAsync("<projectName>", "<poolName>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetAllDevBoxes_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllDevBoxes(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetAllDevBoxes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllDevBoxesAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetAllDevBoxes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllDevBoxes("<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetAllDevBoxes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllDevBoxesAsync("<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetAllDevBoxesByUser_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllDevBoxesByUser("<userId>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetAllDevBoxesByUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllDevBoxesByUserAsync("<userId>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetAllDevBoxesByUser_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllDevBoxesByUser("<userId>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetAllDevBoxesByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllDevBoxesByUserAsync("<userId>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetDevBoxes_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetDevBoxes("<projectName>", "<userId>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetDevBoxes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDevBoxesAsync("<projectName>", "<userId>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetDevBoxes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetDevBoxes("<projectName>", "<userId>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetDevBoxes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDevBoxesAsync("<projectName>", "<userId>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetDevBoxActions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetDevBoxActions("<projectName>", "<userId>", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetDevBoxActions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDevBoxActionsAsync("<projectName>", "<userId>", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_GetDevBoxActions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetDevBoxActions("<projectName>", "<userId>", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
                Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_GetDevBoxActions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDevBoxActionsAsync("<projectName>", "<userId>", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
                Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_DelayAllActions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.DelayAllActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_DelayAllActions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.DelayAllActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_DelayAllActions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.DelayAllActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("sourceId").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_DelayAllActions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.DelayAllActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("sourceId").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_CreateDevBox_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
            });
            Operation<BinaryData> operation = client.CreateDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_CreateDevBox_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
            });
            Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_CreateDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            });
            Operation<BinaryData> operation = client.CreateDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_CreateDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            });
            Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_DeleteDevBox_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = client.DeleteDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_DeleteDevBox_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_DeleteDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = client.DeleteDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_DeleteDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_StartDevBox_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = client.StartDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_StartDevBox_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_StartDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = client.StartDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_StartDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_StopDevBox_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = client.StopDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_StopDevBox_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_StopDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = client.StopDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", hibernate: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_StopDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", hibernate: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_RestartDevBox_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = client.RestartDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_RestartDevBox_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DevBoxesClientOperations_RestartDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = client.RestartDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DevBoxesClientOperations_RestartDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Operation operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
        }
    }
}
