// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public class Samples_DevBoxesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetPool("<poolName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetPool("<poolName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetPoolAsync("<poolName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetPoolAsync("<poolName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScheduleByPool()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScheduleByPool_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScheduleByPool_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScheduleByPool_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxByUser()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetDevBoxByUser("<devBoxName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxByUser_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetDevBoxByUser("<devBoxName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxByUser_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetDevBoxByUserAsync("<devBoxName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxByUser_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetDevBoxByUserAsync("<devBoxName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetRemoteConnection("<devBoxName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetRemoteConnection("<devBoxName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetRemoteConnectionAsync("<devBoxName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetRemoteConnectionAsync("<devBoxName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpcomingAction()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetUpcomingAction("<devBoxName>", "<upcomingActionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpcomingAction_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.GetUpcomingAction("<devBoxName>", "<upcomingActionId>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpcomingAction_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetUpcomingActionAsync("<devBoxName>", "<upcomingActionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpcomingAction_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.GetUpcomingActionAsync("<devBoxName>", "<upcomingActionId>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkipUpcomingAction()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.SkipUpcomingAction("<devBoxName>", "<upcomingActionId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkipUpcomingAction_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.SkipUpcomingAction("<devBoxName>", "<upcomingActionId>", "me", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkipUpcomingAction_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.SkipUpcomingActionAsync("<devBoxName>", "<upcomingActionId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkipUpcomingAction_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.SkipUpcomingActionAsync("<devBoxName>", "<upcomingActionId>", "me", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayUpcomingAction()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.DelayUpcomingAction("<devBoxName>", "<upcomingActionId>", DateTimeOffset.UtcNow);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayUpcomingAction_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = client.DelayUpcomingAction("<devBoxName>", "<upcomingActionId>", DateTimeOffset.UtcNow, "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayUpcomingAction_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.DelayUpcomingActionAsync("<devBoxName>", "<upcomingActionId>", DateTimeOffset.UtcNow);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayUpcomingAction_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            Response response = await client.DelayUpcomingActionAsync("<devBoxName>", "<upcomingActionId>", DateTimeOffset.UtcNow, "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            foreach (var item in client.GetPools())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            foreach (var item in client.GetPools(1234, "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            await foreach (var item in client.GetPoolsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            await foreach (var item in client.GetPoolsAsync(1234, "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedulesByPool()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            foreach (var item in client.GetSchedulesByPool("<poolName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedulesByPool_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            foreach (var item in client.GetSchedulesByPool("<poolName>", 1234, "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedulesByPool_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            await foreach (var item in client.GetSchedulesByPoolAsync("<poolName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedulesByPool_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            await foreach (var item in client.GetSchedulesByPoolAsync("<poolName>", 1234, "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxesByUser()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            foreach (var item in client.GetDevBoxesByUser())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxesByUser_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            foreach (var item in client.GetDevBoxesByUser("me", "<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxesByUser_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            await foreach (var item in client.GetDevBoxesByUserAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxesByUser_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            await foreach (var item in client.GetDevBoxesByUserAsync("me", "<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpcomingActions()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            foreach (var item in client.GetUpcomingActions("<devBoxName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpcomingActions_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            foreach (var item in client.GetUpcomingActions("<devBoxName>", "me", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("scheduledTime").ToString());
                Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpcomingActions_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            await foreach (var item in client.GetUpcomingActionsAsync("<devBoxName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpcomingActions_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            await foreach (var item in client.GetUpcomingActionsAsync("<devBoxName>", "me", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("scheduledTime").ToString());
                Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var data = new
            {
                poolName = "<poolName>",
            };

            var operation = client.CreateDevBox(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var data = new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            };

            var operation = client.CreateDevBox(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data), "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var data = new
            {
                poolName = "<poolName>",
            };

            var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var data = new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            };

            var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data), "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = client.DeleteDevBox(WaitUntil.Completed, "<devBoxName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = client.DeleteDevBox(WaitUntil.Completed, "<devBoxName>", "me", new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<devBoxName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<devBoxName>", "me", new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = client.StartDevBox(WaitUntil.Completed, "<devBoxName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = client.StartDevBox(WaitUntil.Completed, "<devBoxName>", "me", new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<devBoxName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<devBoxName>", "me", new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = client.StopDevBox(WaitUntil.Completed, "<devBoxName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = client.StopDevBox(WaitUntil.Completed, "<devBoxName>", "me", true, new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<devBoxName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, "<projectName>", credential);

            var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<devBoxName>", "me", true, new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }
    }
}
