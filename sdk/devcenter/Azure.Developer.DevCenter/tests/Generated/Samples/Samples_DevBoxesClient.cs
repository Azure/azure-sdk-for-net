// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public class Samples_DevBoxesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetPool("<projectName>", "<poolName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetPool("<projectName>", "<poolName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetPoolAsync("<projectName>", "<poolName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetPoolAsync("<projectName>", "<poolName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedule()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetSchedule("<projectName>", "<poolName>", "<scheduleName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedule_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetSchedule("<projectName>", "<poolName>", "<scheduleName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedule_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetScheduleAsync("<projectName>", "<poolName>", "<scheduleName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedule_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetScheduleAsync("<projectName>", "<poolName>", "<scheduleName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetDevBox("<projectName>", "<devBoxName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetDevBox("<projectName>", "<devBoxName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxAsync("<projectName>", "<devBoxName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxAsync("<projectName>", "<devBoxName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetRemoteConnection("<projectName>", "<devBoxName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetRemoteConnection("<projectName>", "<devBoxName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetRemoteConnectionAsync("<projectName>", "<devBoxName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetRemoteConnectionAsync("<projectName>", "<devBoxName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAction()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetAction("<projectName>", "<devBoxName>", "<actionName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAction_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetAction("<projectName>", "<devBoxName>", "<actionName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAction_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetActionAsync("<projectName>", "<devBoxName>", "<actionName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAction_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetActionAsync("<projectName>", "<devBoxName>", "<actionName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkipAction()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.SkipAction("<projectName>", "<devBoxName>", "<actionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkipAction_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.SkipAction("<projectName>", "<devBoxName>", "<actionName>", "me", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkipAction_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.SkipActionAsync("<projectName>", "<devBoxName>", "<actionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkipAction_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.SkipActionAsync("<projectName>", "<devBoxName>", "<actionName>", "me", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayAction()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.DelayAction("<projectName>", "<devBoxName>", "<actionName>", DateTimeOffset.UtcNow);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayAction_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = client.DelayAction("<projectName>", "<devBoxName>", "<actionName>", DateTimeOffset.UtcNow, "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayAction_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.DelayActionAsync("<projectName>", "<devBoxName>", "<actionName>", DateTimeOffset.UtcNow);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayAction_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            Response response = await client.DelayActionAsync("<projectName>", "<devBoxName>", "<actionName>", DateTimeOffset.UtcNow, "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetPools("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetPools("<projectName>", 1234, "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
                Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
                Console.WriteLine(result.GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetPoolsAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetPoolsAsync("<projectName>", 1234, "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
                Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
                Console.WriteLine(result.GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedules()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetSchedules("<projectName>", "<poolName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedules_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetSchedules("<projectName>", "<poolName>", 1234, "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedules_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetSchedulesAsync("<projectName>", "<poolName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedules_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetSchedulesAsync("<projectName>", "<poolName>", 1234, "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllDevBoxes()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetAllDevBoxes())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllDevBoxes_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetAllDevBoxes("<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllDevBoxes_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetAllDevBoxesAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllDevBoxes_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetAllDevBoxesAsync("<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllDevBoxesByUser()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetAllDevBoxesByUser())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllDevBoxesByUser_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetAllDevBoxesByUser("me", "<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllDevBoxesByUser_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetAllDevBoxesByUserAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllDevBoxesByUser_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetAllDevBoxesByUserAsync("me", "<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxes()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetDevBoxes("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxes_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetDevBoxes("<projectName>", "me", "<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxes_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetDevBoxesAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxes_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetDevBoxesAsync("<projectName>", "me", "<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("poolName").ToString());
                Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("actionState").ToString());
                Console.WriteLine(result.GetProperty("powerState").ToString());
                Console.WriteLine(result.GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetActions()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetActions("<projectName>", "<devBoxName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetActions_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.GetActions("<projectName>", "<devBoxName>", "me", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
                Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetActions_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetActionsAsync("<projectName>", "<devBoxName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetActions_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.GetActionsAsync("<projectName>", "<devBoxName>", "me", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("sourceId").ToString());
                Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayAllActions()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.DelayAllActions("<projectName>", "<devBoxName>", DateTimeOffset.UtcNow))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayAllActions_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            foreach (var item in client.DelayAllActions("<projectName>", "<devBoxName>", DateTimeOffset.UtcNow, "me", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("sourceId").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayAllActions_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.DelayAllActionsAsync("<projectName>", "<devBoxName>", DateTimeOffset.UtcNow))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayAllActions_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            await foreach (var item in client.DelayAllActionsAsync("<projectName>", "<devBoxName>", DateTimeOffset.UtcNow, "me", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("sourceId").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result.GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var data = new
            {
                poolName = "<poolName>",
            };

            var operation = client.CreateDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var data = new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            };

            var operation = client.CreateDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", RequestContent.Create(data), "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var data = new
            {
                poolName = "<poolName>",
            };

            var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var data = new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            };

            var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", RequestContent.Create(data), "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = client.DeleteDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = client.DeleteDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = client.StartDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = client.StartDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = client.StopDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = client.StopDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", "me", true, new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", "me", true, new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RestartDevBox()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = client.RestartDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RestartDevBox_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = client.RestartDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RestartDevBox_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RestartDevBox_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DevBoxesClient(endpoint, credential);

            var operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }
    }
}
