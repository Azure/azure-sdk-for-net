// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Developer.DevCenter;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public class Samples_EnvironmentsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentByUser()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetEnvironmentByUser("me", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentByUser_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetEnvironmentByUserAsync("me", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentByUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetEnvironmentByUser("me", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("catalogItemName").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetEnvironmentByUserAsync("me", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("catalogItemName").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateEnvironment()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateEnvironment("me", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateEnvironment_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateEnvironmentAsync("me", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                catalogName = "<catalogName>",
                catalogItemName = "<catalogItemName>",
                parameters = new object(),
                scheduledTasks = new
                {
                    key = new
                    {
                        type = "AutoExpire",
                        enabled = "Enabled",
                        startTime = "2022-05-10T18:57:31.2311892Z",
                    },
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = client.UpdateEnvironment("me", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("catalogItemName").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                catalogName = "<catalogName>",
                catalogItemName = "<catalogItemName>",
                parameters = new object(),
                scheduledTasks = new
                {
                    key = new
                    {
                        type = "AutoExpire",
                        enabled = "Enabled",
                        startTime = "2022-05-10T18:57:31.2311892Z",
                    },
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = await client.UpdateEnvironmentAsync("me", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("catalogItemName").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogItem()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetCatalogItem("<catalogItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogItem_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetCatalogItemAsync("<catalogItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogItem_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetCatalogItem("<catalogItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogItem_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetCatalogItemAsync("<catalogItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogItemVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetCatalogItemVersion("<catalogItemId>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogItemVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetCatalogItemVersionAsync("<catalogItemId>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogItemVersion_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = client.GetCatalogItemVersion("<catalogItemId>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("catalogItemId").ToString());
            Console.WriteLine(result.GetProperty("catalogItemName").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("summary").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
            Console.WriteLine(result.GetProperty("runner").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogItemVersion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Response response = await client.GetCatalogItemVersionAsync("<catalogItemId>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("catalogItemId").ToString());
            Console.WriteLine(result.GetProperty("catalogItemName").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("summary").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
            Console.WriteLine(result.GetProperty("runner").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironments()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetEnvironments(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironments_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetEnvironmentsAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironments_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetEnvironments(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("catalogItemName").ToString());
                Console.WriteLine(result[0].GetProperty("parameters").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
                Console.WriteLine(result[0].GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetEnvironmentsAsync(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("catalogItemName").ToString());
                Console.WriteLine(result[0].GetProperty("parameters").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
                Console.WriteLine(result[0].GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentsByUser()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetEnvironmentsByUser("me", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentsByUser_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetEnvironmentsByUserAsync("me", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentsByUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetEnvironmentsByUser("me", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("catalogItemName").ToString());
                Console.WriteLine(result[0].GetProperty("parameters").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
                Console.WriteLine(result[0].GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentsByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetEnvironmentsByUserAsync("me", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("catalogItemName").ToString());
                Console.WriteLine(result[0].GetProperty("parameters").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
                Console.WriteLine(result[0].GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
                Console.WriteLine(result[0].GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogItems()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetCatalogItems(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogItems_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetCatalogItemsAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogItems_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetCatalogItems(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetCatalogItemsAsync(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogItemVersions()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetCatalogItemVersions("<catalogItemId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogItemVersions_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetCatalogItemVersionsAsync("<catalogItemId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogItemVersions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetCatalogItemVersions("<catalogItemId>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("catalogItemId").ToString());
                Console.WriteLine(result[0].GetProperty("catalogItemName").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("summary").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("templatePath").ToString());
                Console.WriteLine(result[0].GetProperty("parametersSchema").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("typeName").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("runner").ToString());
                Console.WriteLine(result[0].GetProperty("runner").ToString());
                Console.WriteLine(result[0].GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("eligibleForLatestVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogItemVersions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetCatalogItemVersionsAsync("<catalogItemId>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("catalogItemId").ToString());
                Console.WriteLine(result[0].GetProperty("catalogItemName").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("summary").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("templatePath").ToString());
                Console.WriteLine(result[0].GetProperty("parametersSchema").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("typeName").ToString());
                Console.WriteLine(result[0].GetProperty("actions")[0].GetProperty("runner").ToString());
                Console.WriteLine(result[0].GetProperty("runner").ToString());
                Console.WriteLine(result[0].GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("eligibleForLatestVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentTypes()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetEnvironmentTypes(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentTypes_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetEnvironmentTypesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentTypes_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            foreach (BinaryData item in client.GetEnvironmentTypes(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result[0].GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentTypes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            await foreach (BinaryData item in client.GetEnvironmentTypesAsync(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result[0].GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateEnvironment()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "me", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateEnvironment_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "me", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                user = "<user>",
                description = "<description>",
                catalogName = "<catalogName>",
                catalogItemName = "<catalogItemName>",
                parameters = new object(),
                scheduledTasks = new
                {
                    key = new
                    {
                        type = "AutoExpire",
                        enabled = "Enabled",
                        startTime = "2022-05-10T18:57:31.2311892Z",
                    },
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "me", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("catalogItemName").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                user = "<user>",
                description = "<description>",
                catalogName = "<catalogName>",
                catalogItemName = "<catalogItemName>",
                parameters = new object(),
                scheduledTasks = new
                {
                    key = new
                    {
                        type = "AutoExpire",
                        enabled = "Enabled",
                        startTime = "2022-05-10T18:57:31.2311892Z",
                    },
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "me", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("catalogItemName").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<key>").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteEnvironment()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Operation operation = client.DeleteEnvironment(WaitUntil.Completed, "me", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteEnvironment_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Operation operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "me", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Operation operation = client.DeleteEnvironment(WaitUntil.Completed, "me", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            Operation operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "me", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeployEnvironmentAction()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                actionId = "<actionId>",
            });
            Operation operation = client.DeployEnvironmentAction(WaitUntil.Completed, "me", "<environmentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeployEnvironmentAction_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                actionId = "<actionId>",
            });
            Operation operation = await client.DeployEnvironmentActionAsync(WaitUntil.Completed, "me", "<environmentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeployEnvironmentAction_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                actionId = "<actionId>",
                parameters = new object(),
            });
            Operation operation = client.DeployEnvironmentAction(WaitUntil.Completed, "me", "<environmentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeployEnvironmentAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                actionId = "<actionId>",
                parameters = new object(),
            });
            Operation operation = await client.DeployEnvironmentActionAsync(WaitUntil.Completed, "me", "<environmentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CustomEnvironmentAction()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                actionId = "<actionId>",
            });
            Operation operation = client.CustomEnvironmentAction(WaitUntil.Completed, "me", "<environmentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CustomEnvironmentAction_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                actionId = "<actionId>",
            });
            Operation operation = await client.CustomEnvironmentActionAsync(WaitUntil.Completed, "me", "<environmentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CustomEnvironmentAction_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                actionId = "<actionId>",
                parameters = new object(),
            });
            Operation operation = client.CustomEnvironmentAction(WaitUntil.Completed, "me", "<environmentName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CustomEnvironmentAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, "<ProjectName>", credential);

            RequestContent content = RequestContent.Create(new
            {
                actionId = "<actionId>",
                parameters = new object(),
            });
            Operation operation = await client.CustomEnvironmentActionAsync(WaitUntil.Completed, "me", "<environmentName>", content);
        }
    }
}
