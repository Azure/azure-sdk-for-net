// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Developer.DevCenter;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public partial class Samples_DeploymentEnvironmentsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironment("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironment("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetCatalog_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetCatalog("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetCatalog_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetCatalog_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetCatalog("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetCatalog_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinition_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinition_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinition_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinition_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetAllEnvironments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllEnvironments("<projectName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetAllEnvironments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllEnvironmentsAsync("<projectName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetAllEnvironments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllEnvironments("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("parameters").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetAllEnvironments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllEnvironmentsAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("parameters").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironments("<projectName>", "<userId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentsAsync("<projectName>", "<userId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironments("<projectName>", "<userId>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("parameters").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentsAsync("<projectName>", "<userId>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("parameters").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetCatalogs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetCatalogs("<projectName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetCatalogs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCatalogsAsync("<projectName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetCatalogs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetCatalogs("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetCatalogs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCatalogsAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitions("<projectName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsAsync("<projectName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitions("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentTypes_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentTypes("<projectName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentTypes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentTypesAsync("<projectName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentTypes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentTypes("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentTypes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentTypesAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_CreateOrUpdateEnvironment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_CreateOrUpdateEnvironment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_CreateOrUpdateEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                parameters = new object(),
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_CreateOrUpdateEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                parameters = new object(),
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_DeleteEnvironment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Operation operation = client.DeleteEnvironment(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_DeleteEnvironment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Operation operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_DeleteEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Operation operation = client.DeleteEnvironment(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_DeleteEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Operation operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>");
        }
    }
}
