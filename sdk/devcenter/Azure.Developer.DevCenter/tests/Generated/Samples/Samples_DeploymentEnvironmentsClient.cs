// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public class Samples_DeploymentEnvironmentsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironment()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironment("<projectName>", "<environmentName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironment("<projectName>", "<environmentName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironment_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentAsync("<projectName>", "<environmentName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentAsync("<projectName>", "<environmentName>", "me", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalog()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetCatalog("<projectName>", "<catalogName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalog_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetCatalog("<projectName>", "<catalogName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalog_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalog_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinition()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinition_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinition_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinition_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllEnvironments()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetAllEnvironments("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllEnvironments_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetAllEnvironments("<projectName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("parameters").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllEnvironments_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetAllEnvironmentsAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllEnvironments_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetAllEnvironmentsAsync("<projectName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("parameters").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironments()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetEnvironments("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironments_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetEnvironments("<projectName>", "me", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("parameters").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironments_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetEnvironmentsAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironments_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetEnvironmentsAsync("<projectName>", "me", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("parameters").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogs()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetCatalogs("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogs_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetCatalogs("<projectName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogs_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetCatalogsAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogs_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetCatalogsAsync("<projectName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitions()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetEnvironmentDefinitions("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitions_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetEnvironmentDefinitions("<projectName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitions_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetEnvironmentDefinitionsAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitions_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetEnvironmentDefinitionsAsync("<projectName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByCatalog()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByCatalog_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByCatalog_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByCatalog_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentTypes()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetEnvironmentTypes("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentTypes_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (var item in client.GetEnvironmentTypes("<projectName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentTypes_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetEnvironmentTypesAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentTypes_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (var item in client.GetEnvironmentTypesAsync("<projectName>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateEnvironment()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            var data = new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            };

            var operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<projectName>", "<environmentName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateEnvironment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            var data = new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
                parameters = new { },
            };

            var operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<projectName>", "<environmentName>", RequestContent.Create(data), "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateEnvironment_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            var data = new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            };

            var operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<environmentName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateEnvironment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            var data = new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
                parameters = new { },
            };

            var operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<environmentName>", RequestContent.Create(data), "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("parameters").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteEnvironment()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            var operation = client.DeleteEnvironment(WaitUntil.Completed, "<projectName>", "<environmentName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteEnvironment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            var operation = client.DeleteEnvironment(WaitUntil.Completed, "<projectName>", "<environmentName>", "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteEnvironment_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            var operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<environmentName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteEnvironment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeploymentEnvironmentsClient(endpoint, credential);

            var operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<environmentName>", "me", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }
    }
}
