// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Developer.DevCenter
{
    // Data plane generated client. The DevBoxes service client.
    /// <summary> The DevBoxes service client. </summary>
    public partial class DevBoxesClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://devcenter.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _tenantId;
        private readonly string _devCenter;
        private readonly string _projectName;
        private readonly string _devCenterDnsSuffix;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DevBoxesClient for mocking. </summary>
        protected DevBoxesClient()
        {
        }

        /// <summary> Initializes a new instance of DevBoxesClient. </summary>
        /// <param name="tenantId"> The tenant to operate on. </param>
        /// <param name="devCenter"> The DevCenter to operate on. </param>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/>, <paramref name="devCenter"/>, <paramref name="projectName"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        public DevBoxesClient(string tenantId, string devCenter, string projectName, TokenCredential credential) : this(tenantId, devCenter, projectName, credential, "devcenter.azure.com", new DevCenterClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DevBoxesClient. </summary>
        /// <param name="tenantId"> The tenant to operate on. </param>
        /// <param name="devCenter"> The DevCenter to operate on. </param>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="devCenterDnsSuffix"> The DNS suffix used as the base for all devcenter requests. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/>, <paramref name="devCenter"/>, <paramref name="projectName"/>, <paramref name="credential"/> or <paramref name="devCenterDnsSuffix"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        public DevBoxesClient(string tenantId, string devCenter, string projectName, TokenCredential credential, string devCenterDnsSuffix, DevCenterClientOptions options)
        {
            Argument.AssertNotNull(tenantId, nameof(tenantId));
            Argument.AssertNotNull(devCenter, nameof(devCenter));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(devCenterDnsSuffix, nameof(devCenterDnsSuffix));
            options ??= new DevCenterClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _tenantId = tenantId;
            _devCenter = devCenter;
            _projectName = projectName;
            _devCenterDnsSuffix = devCenterDnsSuffix;
            _apiVersion = options.Version;
        }

        /// <summary> Gets a pool. </summary>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPoolAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = await client.GetPoolAsync("<poolName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   name: string, # Optional. Pool name
        ///   location: string, # Optional. Azure region where Dev Boxes in the pool are located
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Hardware settings for the Dev Boxes created in this pool
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for Dev Box created in this pool
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Image settings for Dev Boxes create in this pool
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetPoolAsync(string poolName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPoolRequest(poolName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a pool. </summary>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPool with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = client.GetPool("<poolName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   name: string, # Optional. Pool name
        ///   location: string, # Optional. Azure region where Dev Boxes in the pool are located
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Hardware settings for the Dev Boxes created in this pool
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for Dev Box created in this pool
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Image settings for Dev Boxes create in this pool
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetPool(string poolName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPoolRequest(poolName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a schedule. </summary>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="scheduleName"> The name of a schedule. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolName"/> or <paramref name="scheduleName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolName"/> or <paramref name="scheduleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduleByPoolAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("time").ToString());
        /// Console.WriteLine(result.GetProperty("timeZone").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Schedule</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Schedule
        ///   type: &quot;StopDevBox&quot;, # Optional. Supported type this scheduled task represents.
        ///   frequency: &quot;Daily&quot;, # Optional. The frequency of this scheduled task.
        ///   time: string, # Optional. The target time to trigger the action. The format is HH:MM.
        ///   timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetScheduleByPoolAsync(string poolName, string scheduleName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNullOrEmpty(scheduleName, nameof(scheduleName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetScheduleByPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduleByPoolRequest(poolName, scheduleName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a schedule. </summary>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="scheduleName"> The name of a schedule. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolName"/> or <paramref name="scheduleName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolName"/> or <paramref name="scheduleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduleByPool with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("time").ToString());
        /// Console.WriteLine(result.GetProperty("timeZone").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Schedule</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Schedule
        ///   type: &quot;StopDevBox&quot;, # Optional. Supported type this scheduled task represents.
        ///   frequency: &quot;Daily&quot;, # Optional. The frequency of this scheduled task.
        ///   time: string, # Optional. The target time to trigger the action. The format is HH:MM.
        ///   timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetScheduleByPool(string poolName, string scheduleName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNullOrEmpty(scheduleName, nameof(scheduleName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetScheduleByPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduleByPoolRequest(poolName, scheduleName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a Dev Box. </summary>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDevBoxByUserAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = await client.GetDevBoxByUserAsync("<devBoxName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call GetDevBoxByUserAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = await client.GetDevBoxByUserAsync("<devBoxName>", <me>);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDevBoxByUserAsync(string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetDevBoxByUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDevBoxByUserRequest(userId, devBoxName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a Dev Box. </summary>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDevBoxByUser with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = client.GetDevBoxByUser("<devBoxName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call GetDevBoxByUser with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = client.GetDevBoxByUser("<devBoxName>", <me>);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDevBoxByUser(string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetDevBoxByUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDevBoxByUserRequest(userId, devBoxName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets RDP Connection info. </summary>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRemoteConnectionAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = await client.GetRemoteConnectionAsync("<devBoxName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetRemoteConnectionAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = await client.GetRemoteConnectionAsync("<devBoxName>", <me>);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("webUrl").ToString());
        /// Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RemoteConnection</c>:
        /// <code>{
        ///   webUrl: string, # Optional. URL to open a browser based RDP session
        ///   rdpConnectionUrl: string, # Optional. Link to open a Remote Desktop session
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRemoteConnectionAsync(string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetRemoteConnection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRemoteConnectionRequest(userId, devBoxName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets RDP Connection info. </summary>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRemoteConnection with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = client.GetRemoteConnection("<devBoxName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetRemoteConnection with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// Response response = client.GetRemoteConnection("<devBoxName>", <me>);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("webUrl").ToString());
        /// Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RemoteConnection</c>:
        /// <code>{
        ///   webUrl: string, # Optional. URL to open a browser based RDP session
        ///   rdpConnectionUrl: string, # Optional. Link to open a Remote Desktop session
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRemoteConnection(string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetRemoteConnection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRemoteConnectionRequest(userId, devBoxName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists available pools. </summary>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: &apos;top=10&apos;. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPoolsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// await foreach (var data in client.GetPoolsAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPoolsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// await foreach (var data in client.GetPoolsAsync(1234, "<filter>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("location").ToString());
        ///     Console.WriteLine(result.GetProperty("osType").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        ///     Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        ///     Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolListResultValue</c>:
        /// <code>{
        ///   name: string, # Optional. Pool name
        ///   location: string, # Optional. Azure region where Dev Boxes in the pool are located
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Hardware settings for the Dev Boxes created in this pool
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for Dev Box created in this pool
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Image settings for Dev Boxes create in this pool
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetPoolsAsync(int? maxCount = null, string filter = null, RequestContext context = null)
        {
            return GetPoolsImplementationAsync("DevBoxesClient.GetPools", maxCount, filter, context);
        }

        private AsyncPageable<BinaryData> GetPoolsImplementationAsync(string diagnosticsScopeName, int? maxCount, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPoolsRequest(maxCount, filter, context)
                        : CreateGetPoolsNextPageRequest(nextLink, maxCount, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists available pools. </summary>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: &apos;top=10&apos;. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPools and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// foreach (var data in client.GetPools())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPools with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// foreach (var data in client.GetPools(1234, "<filter>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("location").ToString());
        ///     Console.WriteLine(result.GetProperty("osType").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        ///     Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        ///     Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolListResultValue</c>:
        /// <code>{
        ///   name: string, # Optional. Pool name
        ///   location: string, # Optional. Azure region where Dev Boxes in the pool are located
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Hardware settings for the Dev Boxes created in this pool
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for Dev Box created in this pool
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Image settings for Dev Boxes create in this pool
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetPools(int? maxCount = null, string filter = null, RequestContext context = null)
        {
            return GetPoolsImplementation("DevBoxesClient.GetPools", maxCount, filter, context);
        }

        private Pageable<BinaryData> GetPoolsImplementation(string diagnosticsScopeName, int? maxCount, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPoolsRequest(maxCount, filter, context)
                        : CreateGetPoolsNextPageRequest(nextLink, maxCount, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists available schedules for a pool. </summary>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: &apos;top=10&apos;. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSchedulesByPoolAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// await foreach (var data in client.GetSchedulesByPoolAsync("<poolName>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetSchedulesByPoolAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// await foreach (var data in client.GetSchedulesByPoolAsync("<poolName>", 1234, "<filter>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("frequency").ToString());
        ///     Console.WriteLine(result.GetProperty("time").ToString());
        ///     Console.WriteLine(result.GetProperty("timeZone").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleListResultValue</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Schedule
        ///   type: &quot;StopDevBox&quot;, # Optional. Supported type this scheduled task represents.
        ///   frequency: &quot;Daily&quot;, # Optional. The frequency of this scheduled task.
        ///   time: string, # Optional. The target time to trigger the action. The format is HH:MM.
        ///   timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetSchedulesByPoolAsync(string poolName, int? maxCount = null, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            return GetSchedulesByPoolImplementationAsync("DevBoxesClient.GetSchedulesByPool", poolName, maxCount, filter, context);
        }

        private AsyncPageable<BinaryData> GetSchedulesByPoolImplementationAsync(string diagnosticsScopeName, string poolName, int? maxCount, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetSchedulesByPoolRequest(poolName, maxCount, filter, context)
                        : CreateGetSchedulesByPoolNextPageRequest(nextLink, poolName, maxCount, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists available schedules for a pool. </summary>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: &apos;top=10&apos;. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSchedulesByPool with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// foreach (var data in client.GetSchedulesByPool("<poolName>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetSchedulesByPool with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// foreach (var data in client.GetSchedulesByPool("<poolName>", 1234, "<filter>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("frequency").ToString());
        ///     Console.WriteLine(result.GetProperty("time").ToString());
        ///     Console.WriteLine(result.GetProperty("timeZone").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleListResultValue</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Schedule
        ///   type: &quot;StopDevBox&quot;, # Optional. Supported type this scheduled task represents.
        ///   frequency: &quot;Daily&quot;, # Optional. The frequency of this scheduled task.
        ///   time: string, # Optional. The target time to trigger the action. The format is HH:MM.
        ///   timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetSchedulesByPool(string poolName, int? maxCount = null, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            return GetSchedulesByPoolImplementation("DevBoxesClient.GetSchedulesByPool", poolName, maxCount, filter, context);
        }

        private Pageable<BinaryData> GetSchedulesByPoolImplementation(string diagnosticsScopeName, string poolName, int? maxCount, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetSchedulesByPoolRequest(poolName, maxCount, filter, context)
                        : CreateGetSchedulesByPoolNextPageRequest(nextLink, poolName, maxCount, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists Dev Boxes in the project for a particular user. </summary>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: &apos;top=10&apos;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDevBoxesByUserAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// await foreach (var data in client.GetDevBoxesByUserAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("poolName").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetDevBoxesByUserAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// await foreach (var data in client.GetDevBoxesByUserAsync(<me>, "<filter>", 1234))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("projectName").ToString());
        ///     Console.WriteLine(result.GetProperty("poolName").ToString());
        ///     Console.WriteLine(result.GetProperty("provisioningState").ToString());
        ///     Console.WriteLine(result.GetProperty("actionState").ToString());
        ///     Console.WriteLine(result.GetProperty("powerState").ToString());
        ///     Console.WriteLine(result.GetProperty("uniqueId").ToString());
        ///     Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        ///     Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        ///     Console.WriteLine(result.GetProperty("location").ToString());
        ///     Console.WriteLine(result.GetProperty("osType").ToString());
        ///     Console.WriteLine(result.GetProperty("user").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        ///     Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBoxListResultValue</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetDevBoxesByUserAsync(string userId = "me", string filter = null, int? maxCount = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            return GetDevBoxesByUserImplementationAsync("DevBoxesClient.GetDevBoxesByUser", userId, filter, maxCount, context);
        }

        private AsyncPageable<BinaryData> GetDevBoxesByUserImplementationAsync(string diagnosticsScopeName, string userId, string filter, int? maxCount, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDevBoxesByUserRequest(userId, filter, maxCount, context)
                        : CreateGetDevBoxesByUserNextPageRequest(nextLink, userId, filter, maxCount, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists Dev Boxes in the project for a particular user. </summary>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: &apos;top=10&apos;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDevBoxesByUser and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// foreach (var data in client.GetDevBoxesByUser())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("poolName").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetDevBoxesByUser with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// foreach (var data in client.GetDevBoxesByUser(<me>, "<filter>", 1234))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("projectName").ToString());
        ///     Console.WriteLine(result.GetProperty("poolName").ToString());
        ///     Console.WriteLine(result.GetProperty("provisioningState").ToString());
        ///     Console.WriteLine(result.GetProperty("actionState").ToString());
        ///     Console.WriteLine(result.GetProperty("powerState").ToString());
        ///     Console.WriteLine(result.GetProperty("uniqueId").ToString());
        ///     Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        ///     Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        ///     Console.WriteLine(result.GetProperty("location").ToString());
        ///     Console.WriteLine(result.GetProperty("osType").ToString());
        ///     Console.WriteLine(result.GetProperty("user").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        ///     Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBoxListResultValue</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetDevBoxesByUser(string userId = "me", string filter = null, int? maxCount = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            return GetDevBoxesByUserImplementation("DevBoxesClient.GetDevBoxesByUser", userId, filter, maxCount, context);
        }

        private Pageable<BinaryData> GetDevBoxesByUserImplementation(string diagnosticsScopeName, string userId, string filter, int? maxCount, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDevBoxesByUserRequest(userId, filter, maxCount, context)
                        : CreateGetDevBoxesByUserNextPageRequest(nextLink, userId, filter, maxCount, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Creates or updates a Dev Box. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/>, <paramref name="content"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateDevBoxAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var data = new {
        ///     poolName = "<poolName>",
        /// };
        /// 
        /// var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateDevBoxAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var data = new {
        ///     poolName = "<poolName>",
        ///     localAdministrator = "Enabled",
        /// };
        /// 
        /// var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data), <me>);
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CreateDevBoxAsync(WaitUntil waitUntil, string devBoxName, RequestContent content, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNull(content, nameof(content));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.CreateDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateDevBoxRequest(userId, devBoxName, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DevBoxesClient.CreateDevBox", OperationFinalStateVia.OriginalUri, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a Dev Box. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/>, <paramref name="content"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateDevBox with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var data = new {
        ///     poolName = "<poolName>",
        /// };
        /// 
        /// var operation = client.CreateDevBox(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateDevBox with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var data = new {
        ///     poolName = "<poolName>",
        ///     localAdministrator = "Enabled",
        /// };
        /// 
        /// var operation = client.CreateDevBox(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data), <me>);
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> CreateDevBox(WaitUntil waitUntil, string devBoxName, RequestContent content, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNull(content, nameof(content));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.CreateDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateDevBoxRequest(userId, devBoxName, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DevBoxesClient.CreateDevBox", OperationFinalStateVia.OriginalUri, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a Dev Box. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteDevBoxAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<devBoxName>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call DeleteDevBoxAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<devBoxName>", <me>);
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> DeleteDevBoxAsync(WaitUntil waitUntil, string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.DeleteDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDevBoxRequest(userId, devBoxName, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DevBoxesClient.DeleteDevBox", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a Dev Box. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteDevBox with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = client.DeleteDevBox(WaitUntil.Completed, "<devBoxName>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call DeleteDevBox with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = client.DeleteDevBox(WaitUntil.Completed, "<devBoxName>", <me>);
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> DeleteDevBox(WaitUntil waitUntil, string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.DeleteDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDevBoxRequest(userId, devBoxName, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DevBoxesClient.DeleteDevBox", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Starts a Dev Box. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call StartDevBoxAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<devBoxName>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call StartDevBoxAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<devBoxName>", <me>);
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> StartDevBoxAsync(WaitUntil waitUntil, string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.StartDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartDevBoxRequest(userId, devBoxName, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DevBoxesClient.StartDevBox", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Starts a Dev Box. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call StartDevBox with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = client.StartDevBox(WaitUntil.Completed, "<devBoxName>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call StartDevBox with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = client.StartDevBox(WaitUntil.Completed, "<devBoxName>", <me>);
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> StartDevBox(WaitUntil waitUntil, string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.StartDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartDevBoxRequest(userId, devBoxName, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DevBoxesClient.StartDevBox", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a Dev Box. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call StopDevBoxAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<devBoxName>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call StopDevBoxAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<devBoxName>", <me>);
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> StopDevBoxAsync(WaitUntil waitUntil, string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.StopDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopDevBoxRequest(userId, devBoxName, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DevBoxesClient.StopDevBox", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a Dev Box. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="userId"> The AAD object id of the user. If value is &apos;me&apos;, the identity is taken from the authentication context. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="devBoxName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call StopDevBox with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = client.StopDevBox(WaitUntil.Completed, "<devBoxName>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// ]]></code>
        /// This sample shows how to call StopDevBox with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);
        /// 
        /// var operation = client.StopDevBox(WaitUntil.Completed, "<devBoxName>", <me>);
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("poolName").ToString());
        /// Console.WriteLine(result.GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("actionState").ToString());
        /// Console.WriteLine(result.GetProperty("powerState").ToString());
        /// Console.WriteLine(result.GetProperty("uniqueId").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("user").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DevBox</c>:
        /// <code>{
        ///   name: string, # Optional. Display name for the Dev Box
        ///   projectName: string, # Optional. Name of the project this Dev Box belongs to
        ///   poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
        ///   provisioningState: string, # Optional. The current provisioning state of the Dev Box.
        ///   actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
        ///   powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
        ///   uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
        ///   errorDetails: {
        ///     code: string, # Optional. The error code.
        ///     message: string, # Optional. The error message.
        ///   }, # Optional. Provisioning or action error details. Populated only for error states.
        ///   location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
        ///   user: string, # Optional. User identifier of the user this vm is assigned to.
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Information about the Dev Box&apos;s hardware resources
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for this Dev Box
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Information about the image used for this Dev Box
        ///   createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> StopDevBox(WaitUntil waitUntil, string devBoxName, string userId = "me", RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.StopDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopDevBoxRequest(userId, devBoxName, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DevBoxesClient.StopDevBox", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetPoolsRequest(int? maxCount, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/pools", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPoolRequest(string poolName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSchedulesByPoolRequest(string poolName, int? maxCount, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolName, true);
            uri.AppendPath("/schedules", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetScheduleByPoolRequest(string poolName, string scheduleName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolName, true);
            uri.AppendPath("/schedules/", false);
            uri.AppendPath(scheduleName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDevBoxesByUserRequest(string userId, string filter, int? maxCount, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDevBoxByUserRequest(string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateDevBoxRequest(string userId, string devBoxName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteDevBoxRequest(string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStartDevBoxRequest(string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath(":start", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStopDevBoxRequest(string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath(":stop", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRemoteConnectionRequest(string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(_projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath("/remoteConnection", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPoolsNextPageRequest(string nextLink, int? maxCount, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSchedulesByPoolNextPageRequest(string nextLink, string poolName, int? maxCount, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDevBoxesByUserNextPageRequest(string nextLink, string userId, string filter, int? maxCount, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200202204;
        private static ResponseClassifier ResponseClassifier200202204 => _responseClassifier200202204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 202, 204 });
        private static ResponseClassifier _responseClassifier200202;
        private static ResponseClassifier ResponseClassifier200202 => _responseClassifier200202 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 202 });
    }
}
