<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetProjectAsync(string,RequestContext)">
<example>
This sample shows how to call GetProjectAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

Response response = await client.GetProjectAsync("<projectName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("maxDevBoxesPerUser").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  name: string, # Required. Name of the project
  description: string, # Optional. Description of the project.
  maxDevBoxesPerUser: number, # Optional. When specified, indicates the maximum number of Dev Boxes a single user can create across all pools in the project.
}
</code>

</remarks>
    </member>
    <member name="GetProject(string,RequestContext)">
<example>
This sample shows how to call GetProject with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

Response response = client.GetProject("<projectName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("maxDevBoxesPerUser").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  name: string, # Required. Name of the project
  description: string, # Optional. Description of the project.
  maxDevBoxesPerUser: number, # Optional. When specified, indicates the maximum number of Dev Boxes a single user can create across all pools in the project.
}
</code>

</remarks>
    </member>
    <member name="GetProjectsAsync(string,int?,RequestContext)">
<example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

await foreach (var item in client.GetProjectsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
This sample shows how to call GetProjectsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

await foreach (var item in client.GetProjectsAsync("<filter>", 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("maxDevBoxesPerUser").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ProjectListResultValue</c>:
<code>{
  name: string, # Required. Name of the project
  description: string, # Optional. Description of the project.
  maxDevBoxesPerUser: number, # Optional. When specified, indicates the maximum number of Dev Boxes a single user can create across all pools in the project.
}
</code>

</remarks>
    </member>
    <member name="GetProjects(string,int?,RequestContext)">
<example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

foreach (var item in client.GetProjects())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
This sample shows how to call GetProjects with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

foreach (var item in client.GetProjects("<filter>", 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("maxDevBoxesPerUser").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ProjectListResultValue</c>:
<code>{
  name: string, # Required. Name of the project
  description: string, # Optional. Description of the project.
  maxDevBoxesPerUser: number, # Optional. When specified, indicates the maximum number of Dev Boxes a single user can create across all pools in the project.
}
</code>

</remarks>
    </member>
  </members>
</doc>