<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetPoolAsync(String,RequestContext)">
<example>
This sample shows how to call GetPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetPoolAsync("<poolName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Pool</c>:
<code>{
  name: string, # Optional. Pool name
  location: string, # Optional. Azure region where Dev Boxes in the pool are located
  osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
}
</code>

</remarks>
    </member>
    <member name="GetPool(String,RequestContext)">
<example>
This sample shows how to call GetPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetPool("<poolName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Pool</c>:
<code>{
  name: string, # Optional. Pool name
  location: string, # Optional. Azure region where Dev Boxes in the pool are located
  osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
}
</code>

</remarks>
    </member>
    <member name="GetScheduleByPoolAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetScheduleByPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Schedule</c>:
<code>{
  name: string, # Optional. Display name for the Schedule
  type: &quot;StopDevBox&quot;, # Optional. Supported type this scheduled task represents.
  frequency: &quot;Daily&quot;, # Optional. The frequency of this scheduled task.
  time: string, # Optional. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
}
</code>

</remarks>
    </member>
    <member name="GetScheduleByPool(String,String,RequestContext)">
<example>
This sample shows how to call GetScheduleByPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Schedule</c>:
<code>{
  name: string, # Optional. Display name for the Schedule
  type: &quot;StopDevBox&quot;, # Optional. Supported type this scheduled task represents.
  frequency: &quot;Daily&quot;, # Optional. The frequency of this scheduled task.
  time: string, # Optional. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
}
</code>

</remarks>
    </member>
    <member name="GetDevBoxByUserAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDevBoxByUserAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetDevBoxByUserAsync("<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetDevBoxByUserAsync("<devBoxName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="GetDevBoxByUser(String,String,RequestContext)">
<example>
This sample shows how to call GetDevBoxByUser with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetDevBoxByUser("<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetDevBoxByUser("<devBoxName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="GetRemoteConnectionAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetRemoteConnectionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetRemoteConnectionAsync("<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnectionAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetRemoteConnectionAsync("<devBoxName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RemoteConnection</c>:
<code>{
  webUrl: string, # Optional. URL to open a browser based RDP session
  rdpConnectionUrl: string, # Optional. Link to open a Remote Desktop session
}
</code>

</remarks>
    </member>
    <member name="GetRemoteConnection(String,String,RequestContext)">
<example>
This sample shows how to call GetRemoteConnection with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetRemoteConnection("<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnection with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetRemoteConnection("<devBoxName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RemoteConnection</c>:
<code>{
  webUrl: string, # Optional. URL to open a browser based RDP session
  rdpConnectionUrl: string, # Optional. Link to open a Remote Desktop session
}
</code>

</remarks>
    </member>
    <member name="GetPoolsAsync(Int32,String,RequestContext)">
<example>
This sample shows how to call GetPoolsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetPoolsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetPoolsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetPoolsAsync(1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PoolListResultValue</c>:
<code>{
  name: string, # Optional. Pool name
  location: string, # Optional. Azure region where Dev Boxes in the pool are located
  osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
}
</code>

</remarks>
    </member>
    <member name="GetPools(Int32,String,RequestContext)">
<example>
This sample shows how to call GetPools and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetPools())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetPools with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetPools(1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PoolListResultValue</c>:
<code>{
  name: string, # Optional. Pool name
  location: string, # Optional. Azure region where Dev Boxes in the pool are located
  osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
}
</code>

</remarks>
    </member>
    <member name="GetSchedulesByPoolAsync(String,Int32,String,RequestContext)">
<example>
This sample shows how to call GetSchedulesByPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetSchedulesByPoolAsync("<poolName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSchedulesByPoolAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetSchedulesByPoolAsync("<poolName>", 1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ScheduleListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Schedule
  type: &quot;StopDevBox&quot;, # Optional. Supported type this scheduled task represents.
  frequency: &quot;Daily&quot;, # Optional. The frequency of this scheduled task.
  time: string, # Optional. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
}
</code>

</remarks>
    </member>
    <member name="GetSchedulesByPool(String,Int32,String,RequestContext)">
<example>
This sample shows how to call GetSchedulesByPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetSchedulesByPool("<poolName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSchedulesByPool with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetSchedulesByPool("<poolName>", 1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ScheduleListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Schedule
  type: &quot;StopDevBox&quot;, # Optional. Supported type this scheduled task represents.
  frequency: &quot;Daily&quot;, # Optional. The frequency of this scheduled task.
  time: string, # Optional. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Optional. The IANA timezone id at which the schedule should execute.
}
</code>

</remarks>
    </member>
    <member name="GetDevBoxesByUserAsync(String,String,Int32,RequestContext)">
<example>
This sample shows how to call GetDevBoxesByUserAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetDevBoxesByUserAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetDevBoxesByUserAsync(<me>, "<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="GetDevBoxesByUser(String,String,Int32,RequestContext)">
<example>
This sample shows how to call GetDevBoxesByUser and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetDevBoxesByUser())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetDevBoxesByUser(<me>, "<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="CreateDevBoxAsync(WaitUntil,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call CreateDevBoxAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    poolName = "<poolName>",
};

var operation = await client.CreateDevBoxAsync(WaitUntil.Started, "<devBoxName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBoxAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    poolName = "<poolName>",
    localAdministrator = "Enabled",
};

var operation = await client.CreateDevBoxAsync(WaitUntil.Started, "<devBoxName>", RequestContent.Create(data), <me>);

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="CreateDevBox(WaitUntil,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call CreateDevBox with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    poolName = "<poolName>",
};

var operation = client.CreateDevBox(WaitUntil.Started, "<devBoxName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBox with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    poolName = "<poolName>",
    localAdministrator = "Enabled",
};

var operation = client.CreateDevBox(WaitUntil.Started, "<devBoxName>", RequestContent.Create(data), <me>);

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="DeleteDevBoxAsync(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call DeleteDevBoxAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = await client.DeleteDevBoxAsync(WaitUntil.Started, "<devBoxName>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call DeleteDevBoxAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = await client.DeleteDevBoxAsync(WaitUntil.Started, "<devBoxName>", <me>);

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="DeleteDevBox(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call DeleteDevBox with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = client.DeleteDevBox(WaitUntil.Started, "<devBoxName>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call DeleteDevBox with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = client.DeleteDevBox(WaitUntil.Started, "<devBoxName>", <me>);

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="StartDevBoxAsync(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call StartDevBoxAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = await client.StartDevBoxAsync(WaitUntil.Started, "<devBoxName>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call StartDevBoxAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = await client.StartDevBoxAsync(WaitUntil.Started, "<devBoxName>", <me>);

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="StartDevBox(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call StartDevBox with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = client.StartDevBox(WaitUntil.Started, "<devBoxName>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call StartDevBox with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = client.StartDevBox(WaitUntil.Started, "<devBoxName>", <me>);

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="StopDevBoxAsync(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call StopDevBoxAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = await client.StopDevBoxAsync(WaitUntil.Started, "<devBoxName>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call StopDevBoxAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = await client.StopDevBoxAsync(WaitUntil.Started, "<devBoxName>", <me>);

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="StopDevBox(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call StopDevBox with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = client.StopDevBox(WaitUntil.Started, "<devBoxName>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call StopDevBox with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DevBoxesClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = client.StopDevBox(WaitUntil.Started, "<devBoxName>", <me>);

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Running&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. User identifier of the user this vm is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
  </members>
</doc>