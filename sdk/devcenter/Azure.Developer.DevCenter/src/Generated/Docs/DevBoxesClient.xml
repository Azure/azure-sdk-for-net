<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetPoolAsync(string,RequestContext)">
<example>
This sample shows how to call GetPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.GetPoolAsync("<poolName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
    </member>
    <member name="GetPool(string,RequestContext)">
<example>
This sample shows how to call GetPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.GetPool("<poolName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
    </member>
    <member name="GetScheduleByPoolAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetScheduleByPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.GetScheduleByPoolAsync("<poolName>", "<scheduleName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code>
</example>
    </member>
    <member name="GetScheduleByPool(string,string,RequestContext)">
<example>
This sample shows how to call GetScheduleByPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.GetScheduleByPool("<poolName>", "<scheduleName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code>
</example>
    </member>
    <member name="GetDevBoxByUserAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetDevBoxByUserAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.GetDevBoxByUserAsync("<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.GetDevBoxByUserAsync("<devBoxName>", "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
    </member>
    <member name="GetDevBoxByUser(string,string,RequestContext)">
<example>
This sample shows how to call GetDevBoxByUser with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.GetDevBoxByUser("<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.GetDevBoxByUser("<devBoxName>", "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
    </member>
    <member name="GetRemoteConnectionAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetRemoteConnectionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.GetRemoteConnectionAsync("<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnectionAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.GetRemoteConnectionAsync("<devBoxName>", "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code>
</example>
    </member>
    <member name="GetRemoteConnection(string,string,RequestContext)">
<example>
This sample shows how to call GetRemoteConnection with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.GetRemoteConnection("<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnection with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.GetRemoteConnection("<devBoxName>", "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code>
</example>
    </member>
    <member name="GetUpcomingActionAsync(string,string,string,RequestContext)">
<example>
This sample shows how to call GetUpcomingActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.GetUpcomingActionAsync("<devBoxName>", "<upcomingActionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetUpcomingActionAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.GetUpcomingActionAsync("<devBoxName>", "<upcomingActionId>", "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("scheduledTime").ToString());
Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
</example>
    </member>
    <member name="GetUpcomingAction(string,string,string,RequestContext)">
<example>
This sample shows how to call GetUpcomingAction with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.GetUpcomingAction("<devBoxName>", "<upcomingActionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetUpcomingAction with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.GetUpcomingAction("<devBoxName>", "<upcomingActionId>", "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("scheduledTime").ToString());
Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
</example>
    </member>
    <member name="SkipUpcomingActionAsync(string,string,string,RequestContext)">
<example>
This sample shows how to call SkipUpcomingActionAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.SkipUpcomingActionAsync("<devBoxName>", "<upcomingActionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SkipUpcomingActionAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.SkipUpcomingActionAsync("<devBoxName>", "<upcomingActionId>", "me");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SkipUpcomingAction(string,string,string,RequestContext)">
<example>
This sample shows how to call SkipUpcomingAction with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.SkipUpcomingAction("<devBoxName>", "<upcomingActionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SkipUpcomingAction with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.SkipUpcomingAction("<devBoxName>", "<upcomingActionId>", "me");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DelayUpcomingActionAsync(string,string,DateTimeOffset,string,RequestContext)">
<example>
This sample shows how to call DelayUpcomingActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.DelayUpcomingActionAsync("<devBoxName>", "<upcomingActionId>", DateTimeOffset.UtcNow);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DelayUpcomingActionAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = await client.DelayUpcomingActionAsync("<devBoxName>", "<upcomingActionId>", DateTimeOffset.UtcNow, "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("scheduledTime").ToString());
Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
</example>
    </member>
    <member name="DelayUpcomingAction(string,string,DateTimeOffset,string,RequestContext)">
<example>
This sample shows how to call DelayUpcomingAction with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.DelayUpcomingAction("<devBoxName>", "<upcomingActionId>", DateTimeOffset.UtcNow);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DelayUpcomingAction with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

Response response = client.DelayUpcomingAction("<devBoxName>", "<upcomingActionId>", DateTimeOffset.UtcNow, "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("scheduledTime").ToString());
Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
</example>
    </member>
    <member name="GetPoolsAsync(int?,string,RequestContext)">
<example>
This sample shows how to call GetPoolsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetPoolsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetPoolsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetPoolsAsync(1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetPools(int?,string,RequestContext)">
<example>
This sample shows how to call GetPools and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetPools())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetPools with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetPools(1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetSchedulesByPoolAsync(string,int?,string,RequestContext)">
<example>
This sample shows how to call GetSchedulesByPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetSchedulesByPoolAsync("<poolName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSchedulesByPoolAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetSchedulesByPoolAsync("<poolName>", 1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetSchedulesByPool(string,int?,string,RequestContext)">
<example>
This sample shows how to call GetSchedulesByPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetSchedulesByPool("<poolName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSchedulesByPool with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetSchedulesByPool("<poolName>", 1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetDevBoxesByUserAsync(string,string,int?,RequestContext)">
<example>
This sample shows how to call GetDevBoxesByUserAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetDevBoxesByUserAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetDevBoxesByUserAsync("me", "<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetDevBoxesByUser(string,string,int?,RequestContext)">
<example>
This sample shows how to call GetDevBoxesByUser and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetDevBoxesByUser())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetDevBoxesByUser("me", "<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetUpcomingActionsAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetUpcomingActionsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetUpcomingActionsAsync("<devBoxName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetUpcomingActionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetUpcomingActionsAsync("<devBoxName>", "me"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("reason").ToString());
    Console.WriteLine(result.GetProperty("scheduledTime").ToString());
    Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetUpcomingActions(string,string,RequestContext)">
<example>
This sample shows how to call GetUpcomingActions with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetUpcomingActions("<devBoxName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetUpcomingActions with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetUpcomingActions("<devBoxName>", "me"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("reason").ToString());
    Console.WriteLine(result.GetProperty("scheduledTime").ToString());
    Console.WriteLine(result.GetProperty("originalScheduledTime").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
}
]]></code>
</example>
    </member>
    <member name="CreateDevBoxAsync(WaitUntil,string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call CreateDevBoxAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var data = new {
    poolName = "<poolName>",
};

var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBoxAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var data = new {
    poolName = "<poolName>",
    localAdministrator = "Enabled",
};

var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data), "me");

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
    </member>
    <member name="CreateDevBox(WaitUntil,string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call CreateDevBox with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var data = new {
    poolName = "<poolName>",
};

var operation = client.CreateDevBox(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBox with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var data = new {
    poolName = "<poolName>",
    localAdministrator = "Enabled",
};

var operation = client.CreateDevBox(WaitUntil.Completed, "<devBoxName>", RequestContent.Create(data), "me");

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteDevBoxAsync(WaitUntil,string,string,RequestContext)">
<example>
This sample shows how to call DeleteDevBoxAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<devBoxName>");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call DeleteDevBoxAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<devBoxName>", "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="DeleteDevBox(WaitUntil,string,string,RequestContext)">
<example>
This sample shows how to call DeleteDevBox with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = client.DeleteDevBox(WaitUntil.Completed, "<devBoxName>");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call DeleteDevBox with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = client.DeleteDevBox(WaitUntil.Completed, "<devBoxName>", "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="StartDevBoxAsync(WaitUntil,string,string,RequestContext)">
<example>
This sample shows how to call StartDevBoxAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<devBoxName>");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call StartDevBoxAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<devBoxName>", "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="StartDevBox(WaitUntil,string,string,RequestContext)">
<example>
This sample shows how to call StartDevBox with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = client.StartDevBox(WaitUntil.Completed, "<devBoxName>");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call StartDevBox with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = client.StartDevBox(WaitUntil.Completed, "<devBoxName>", "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="StopDevBoxAsync(WaitUntil,string,string,bool?,RequestContext)">
<example>
This sample shows how to call StopDevBoxAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<devBoxName>");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call StopDevBoxAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<devBoxName>", "me", true);

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="StopDevBox(WaitUntil,string,string,bool?,RequestContext)">
<example>
This sample shows how to call StopDevBox with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = client.StopDevBox(WaitUntil.Completed, "<devBoxName>");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call StopDevBox with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, "<projectName>", credential);

var operation = client.StopDevBox(WaitUntil.Completed, "<devBoxName>", "me", true);

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
  </members>
</doc>