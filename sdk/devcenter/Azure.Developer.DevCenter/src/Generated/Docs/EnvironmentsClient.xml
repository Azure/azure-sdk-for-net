<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetEnvironmentByUserAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetEnvironmentByUserAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

Response response = await client.GetEnvironmentByUserAsync("<environmentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEnvironmentByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

Response response = await client.GetEnvironmentByUserAsync("<environmentName>", "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code>
</example>
    </member>
    <member name="GetEnvironmentByUser(string,string,RequestContext)">
<example>
This sample shows how to call GetEnvironmentByUser with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

Response response = client.GetEnvironmentByUser("<environmentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEnvironmentByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

Response response = client.GetEnvironmentByUser("<environmentName>", "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code>
</example>
    </member>
    <member name="UpdateEnvironmentAsync(string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call UpdateEnvironmentAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
};

Response response = await client.UpdateEnvironmentAsync("<environmentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateEnvironmentAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
    user = "<user>",
    description = "<description>",
    catalogName = "<catalogName>",
    catalogItemName = "<catalogItemName>",
    parameters = new {},
    scheduledTasks = new {
        key = new {
            type = "AutoExpire",
            enabled = "Enabled",
            startTime = "2022-05-10T18:57:31.2311892Z",
        },
    },
    tags = new {
        key = "<String>",
    },
};

Response response = await client.UpdateEnvironmentAsync("<environmentName>", RequestContent.Create(data), "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code>
</example>
    </member>
    <member name="UpdateEnvironment(string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call UpdateEnvironment with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
};

Response response = client.UpdateEnvironment("<environmentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateEnvironment with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
    user = "<user>",
    description = "<description>",
    catalogName = "<catalogName>",
    catalogItemName = "<catalogItemName>",
    parameters = new {},
    scheduledTasks = new {
        key = new {
            type = "AutoExpire",
            enabled = "Enabled",
            startTime = "2022-05-10T18:57:31.2311892Z",
        },
    },
    tags = new {
        key = "<String>",
    },
};

Response response = client.UpdateEnvironment("<environmentName>", RequestContent.Create(data), "me");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code>
</example>
    </member>
    <member name="GetCatalogItemAsync(string,RequestContext)">
<example>
This sample shows how to call GetCatalogItemAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

Response response = await client.GetCatalogItemAsync("<catalogItemId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
]]></code>
</example>
    </member>
    <member name="GetCatalogItem(string,RequestContext)">
<example>
This sample shows how to call GetCatalogItem with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

Response response = client.GetCatalogItem("<catalogItemId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
]]></code>
</example>
    </member>
    <member name="GetCatalogItemVersionAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetCatalogItemVersionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

Response response = await client.GetCatalogItemVersionAsync("<catalogItemId>", "<version>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("catalogItemId").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("summary").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("templatePath").ToString());
Console.WriteLine(result.GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
Console.WriteLine(result.GetProperty("runner").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
]]></code>
</example>
    </member>
    <member name="GetCatalogItemVersion(string,string,RequestContext)">
<example>
This sample shows how to call GetCatalogItemVersion with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

Response response = client.GetCatalogItemVersion("<catalogItemId>", "<version>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("catalogItemId").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("summary").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("templatePath").ToString());
Console.WriteLine(result.GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
Console.WriteLine(result.GetProperty("runner").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
]]></code>
</example>
    </member>
    <member name="GetEnvironmentsAsync(int?,RequestContext)">
<example>
This sample shows how to call GetEnvironmentsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetEnvironmentsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetEnvironmentsAsync(1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetEnvironments(int?,RequestContext)">
<example>
This sample shows how to call GetEnvironments and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetEnvironments())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironments with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetEnvironments(1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetEnvironmentsByUserAsync(string,int?,RequestContext)">
<example>
This sample shows how to call GetEnvironmentsByUserAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetEnvironmentsByUserAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentsByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetEnvironmentsByUserAsync("me", 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetEnvironmentsByUser(string,int?,RequestContext)">
<example>
This sample shows how to call GetEnvironmentsByUser and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetEnvironmentsByUser())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentsByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetEnvironmentsByUser("me", 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetCatalogItemsAsync(int?,RequestContext)">
<example>
This sample shows how to call GetCatalogItemsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetCatalogItemsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetCatalogItemsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetCatalogItemsAsync(1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetCatalogItems(int?,RequestContext)">
<example>
This sample shows how to call GetCatalogItems and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetCatalogItems())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetCatalogItems with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetCatalogItems(1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetCatalogItemVersionsAsync(string,int?,RequestContext)">
<example>
This sample shows how to call GetCatalogItemVersionsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetCatalogItemVersionsAsync("<catalogItemId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetCatalogItemVersionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetCatalogItemVersionsAsync("<catalogItemId>", 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("catalogItemId").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("summary").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("templatePath").ToString());
    Console.WriteLine(result.GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
    Console.WriteLine(result.GetProperty("runner").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetCatalogItemVersions(string,int?,RequestContext)">
<example>
This sample shows how to call GetCatalogItemVersions with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetCatalogItemVersions("<catalogItemId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetCatalogItemVersions with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetCatalogItemVersions("<catalogItemId>", 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("catalogItemId").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("summary").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("templatePath").ToString());
    Console.WriteLine(result.GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
    Console.WriteLine(result.GetProperty("runner").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetEnvironmentTypesAsync(int?,RequestContext)">
<example>
This sample shows how to call GetEnvironmentTypesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetEnvironmentTypesAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentTypesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

await foreach (var item in client.GetEnvironmentTypesAsync(1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetEnvironmentTypes(int?,RequestContext)">
<example>
This sample shows how to call GetEnvironmentTypes and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetEnvironmentTypes())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentTypes with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

foreach (var item in client.GetEnvironmentTypes(1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
</example>
    </member>
    <member name="CreateOrUpdateEnvironmentAsync(WaitUntil,string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateEnvironmentAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
};

var operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateEnvironmentAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
    user = "<user>",
    description = "<description>",
    catalogName = "<catalogName>",
    catalogItemName = "<catalogItemName>",
    parameters = new {},
    scheduledTasks = new {
        key = new {
            type = "AutoExpire",
            enabled = "Enabled",
            startTime = "2022-05-10T18:57:31.2311892Z",
        },
    },
    tags = new {
        key = "<String>",
    },
};

var operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), "me");

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdateEnvironment(WaitUntil,string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateEnvironment with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
};

var operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateEnvironment with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
    user = "<user>",
    description = "<description>",
    catalogName = "<catalogName>",
    catalogItemName = "<catalogItemName>",
    parameters = new {},
    scheduledTasks = new {
        key = new {
            type = "AutoExpire",
            enabled = "Enabled",
            startTime = "2022-05-10T18:57:31.2311892Z",
        },
    },
    tags = new {
        key = "<String>",
    },
};

var operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), "me");

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteEnvironmentAsync(WaitUntil,string,string,RequestContext)">
<example>
This sample shows how to call DeleteEnvironmentAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<environmentName>");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call DeleteEnvironmentAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<environmentName>", "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="DeleteEnvironment(WaitUntil,string,string,RequestContext)">
<example>
This sample shows how to call DeleteEnvironment with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var operation = client.DeleteEnvironment(WaitUntil.Completed, "<environmentName>");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call DeleteEnvironment with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var operation = client.DeleteEnvironment(WaitUntil.Completed, "<environmentName>", "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="DeployEnvironmentActionAsync(WaitUntil,string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call DeployEnvironmentActionAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = await client.DeployEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call DeployEnvironmentActionAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = await client.DeployEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="DeployEnvironmentAction(WaitUntil,string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call DeployEnvironmentAction with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = client.DeployEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call DeployEnvironmentAction with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = client.DeployEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="CustomEnvironmentActionAsync(WaitUntil,string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call CustomEnvironmentActionAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = await client.CustomEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call CustomEnvironmentActionAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = await client.CustomEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
    <member name="CustomEnvironmentAction(WaitUntil,string,RequestContent,string,RequestContext)">
<example>
This sample shows how to call CustomEnvironmentAction with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = client.CustomEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
This sample shows how to call CustomEnvironmentAction with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EnvironmentsClient(endpoint, "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = client.CustomEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), "me");

Console.WriteLine(operation.GetRawResponse().Status);
]]></code>
</example>
    </member>
  </members>
</doc>