// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WeightsAndBiases.Models
{
    /// <summary> The available regions. </summary>
    public readonly partial struct WeightsAndBiasesRegion : IEquatable<WeightsAndBiasesRegion>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WeightsAndBiasesRegion"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WeightsAndBiasesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EastUSValue = "eastus";
        private const string CentralUSValue = "centralus";
        private const string WestUSValue = "westus";
        private const string WestEuropeValue = "westeurope";
        private const string JapanEastValue = "japaneast";
        private const string KoreaCentralValue = "koreacentral";

        /// <summary> Region: East US. </summary>
        public static WeightsAndBiasesRegion EastUS { get; } = new WeightsAndBiasesRegion(EastUSValue);
        /// <summary> Region: Central US. </summary>
        public static WeightsAndBiasesRegion CentralUS { get; } = new WeightsAndBiasesRegion(CentralUSValue);
        /// <summary> Region: West US. </summary>
        public static WeightsAndBiasesRegion WestUS { get; } = new WeightsAndBiasesRegion(WestUSValue);
        /// <summary> Region: West Europe. </summary>
        public static WeightsAndBiasesRegion WestEurope { get; } = new WeightsAndBiasesRegion(WestEuropeValue);
        /// <summary> Region: Japan East. </summary>
        public static WeightsAndBiasesRegion JapanEast { get; } = new WeightsAndBiasesRegion(JapanEastValue);
        /// <summary> Region: Korea Central. </summary>
        public static WeightsAndBiasesRegion KoreaCentral { get; } = new WeightsAndBiasesRegion(KoreaCentralValue);
        /// <summary> Determines if two <see cref="WeightsAndBiasesRegion"/> values are the same. </summary>
        public static bool operator ==(WeightsAndBiasesRegion left, WeightsAndBiasesRegion right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WeightsAndBiasesRegion"/> values are not the same. </summary>
        public static bool operator !=(WeightsAndBiasesRegion left, WeightsAndBiasesRegion right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="WeightsAndBiasesRegion"/>. </summary>
        public static implicit operator WeightsAndBiasesRegion(string value) => new WeightsAndBiasesRegion(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WeightsAndBiasesRegion other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WeightsAndBiasesRegion other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
