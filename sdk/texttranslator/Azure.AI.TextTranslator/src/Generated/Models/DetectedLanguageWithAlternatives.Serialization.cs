// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.TextTranslator.Models
{
    public partial class DetectedLanguageWithAlternatives
    {
        internal static DetectedLanguageWithAlternatives DeserializeDetectedLanguageWithAlternatives(JsonElement element)
        {
            IReadOnlyList<DetectedLanguage> alternatives = default;
            string language = default;
            float score = default;
            bool isTranslationSupported = default;
            bool isTransliterationSupported = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("alternatives"u8))
                {
                    List<DetectedLanguage> array = new List<DetectedLanguage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DetectedLanguage.DeserializeDetectedLanguage(item));
                    }
                    alternatives = array;
                    continue;
                }
                if (property.NameEquals("language"u8))
                {
                    language = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("score"u8))
                {
                    score = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("isTranslationSupported"u8))
                {
                    isTranslationSupported = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isTransliterationSupported"u8))
                {
                    isTransliterationSupported = property.Value.GetBoolean();
                    continue;
                }
            }
            return new DetectedLanguageWithAlternatives(language, score, isTranslationSupported, isTransliterationSupported, alternatives);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DetectedLanguageWithAlternatives FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDetectedLanguageWithAlternatives(document.RootElement);
        }
    }
}
