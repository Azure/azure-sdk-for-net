// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.TextTranslator.Models
{
    /// <summary> Detected Language with alternatives. </summary>
    public partial class DetectedLanguageWithAlternatives : DetectedLanguageElement
    {
        /// <summary> Initializes a new instance of DetectedLanguageWithAlternatives. </summary>
        /// <param name="language"> Code of the detected language. </param>
        /// <param name="score">
        /// A float value indicating the confidence in the result. The score is between zero and one
        /// and a low score indicates a low confidence.
        /// </param>
        /// <param name="isTranslationSupported"> A boolean value which is true if the detected language is one of the languages supported for text translation. </param>
        /// <param name="isTransliterationSupported"> A boolean value which is true if the detected language is one of the languages supported for transliteration. </param>
        /// <param name="alternatives"> An array of other possible languages. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="language"/> or <paramref name="alternatives"/> is null. </exception>
        internal DetectedLanguageWithAlternatives(string language, float score, bool isTranslationSupported, bool isTransliterationSupported, IEnumerable<DetectedLanguage> alternatives) : base(language, score, isTranslationSupported, isTransliterationSupported)
        {
            Argument.AssertNotNull(language, nameof(language));
            Argument.AssertNotNull(alternatives, nameof(alternatives));

            Alternatives = alternatives.ToList();
        }

        /// <summary> Initializes a new instance of DetectedLanguageWithAlternatives. </summary>
        /// <param name="language"> Code of the detected language. </param>
        /// <param name="score">
        /// A float value indicating the confidence in the result. The score is between zero and one
        /// and a low score indicates a low confidence.
        /// </param>
        /// <param name="isTranslationSupported"> A boolean value which is true if the detected language is one of the languages supported for text translation. </param>
        /// <param name="isTransliterationSupported"> A boolean value which is true if the detected language is one of the languages supported for transliteration. </param>
        /// <param name="alternatives"> An array of other possible languages. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="language"/> is null. </exception>
        internal DetectedLanguageWithAlternatives(string language, float score, bool isTranslationSupported, bool isTransliterationSupported, IReadOnlyList<DetectedLanguage> alternatives) : base(language, score, isTranslationSupported, isTransliterationSupported)
        {
            Argument.AssertNotNull(language, nameof(language));

            Alternatives = alternatives.ToList();
        }

        /// <summary> An array of other possible languages. </summary>
        public IReadOnlyList<DetectedLanguage> Alternatives { get; }
    }
}
