// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConnectedVMwarevSphere.Models
{
    public partial class PlacementProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ResourcePoolId))
            {
                writer.WritePropertyName("resourcePoolId"u8);
                writer.WriteStringValue(ResourcePoolId);
            }
            if (Optional.IsDefined(ClusterId))
            {
                writer.WritePropertyName("clusterId"u8);
                writer.WriteStringValue(ClusterId);
            }
            if (Optional.IsDefined(HostId))
            {
                writer.WritePropertyName("hostId"u8);
                writer.WriteStringValue(HostId);
            }
            if (Optional.IsDefined(DatastoreId))
            {
                writer.WritePropertyName("datastoreId"u8);
                writer.WriteStringValue(DatastoreId);
            }
            writer.WriteEndObject();
        }

        internal static PlacementProfile DeserializePlacementProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> resourcePoolId = default;
            Optional<string> clusterId = default;
            Optional<string> hostId = default;
            Optional<string> datastoreId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourcePoolId"u8))
                {
                    resourcePoolId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterId"u8))
                {
                    clusterId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostId"u8))
                {
                    hostId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datastoreId"u8))
                {
                    datastoreId = property.Value.GetString();
                    continue;
                }
            }
            return new PlacementProfile(resourcePoolId.Value, clusterId.Value, hostId.Value, datastoreId.Value);
        }
    }
}
