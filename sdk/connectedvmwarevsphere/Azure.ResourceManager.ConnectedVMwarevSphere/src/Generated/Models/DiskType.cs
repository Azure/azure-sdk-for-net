// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ConnectedVMwarevSphere.Models
{
    /// <summary> Defines the different types of disks. </summary>
    public readonly partial struct DiskType : IEquatable<DiskType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DiskType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FlatValue = "flat";
        private const string PmemValue = "pmem";
        private const string RawphysicalValue = "rawphysical";
        private const string RawvirtualValue = "rawvirtual";
        private const string SparseValue = "sparse";
        private const string SesparseValue = "sesparse";
        private const string UnknownValue = "unknown";

        /// <summary> flat. </summary>
        public static DiskType Flat { get; } = new DiskType(FlatValue);
        /// <summary> pmem. </summary>
        public static DiskType Pmem { get; } = new DiskType(PmemValue);
        /// <summary> rawphysical. </summary>
        public static DiskType Rawphysical { get; } = new DiskType(RawphysicalValue);
        /// <summary> rawvirtual. </summary>
        public static DiskType Rawvirtual { get; } = new DiskType(RawvirtualValue);
        /// <summary> sparse. </summary>
        public static DiskType Sparse { get; } = new DiskType(SparseValue);
        /// <summary> sesparse. </summary>
        public static DiskType Sesparse { get; } = new DiskType(SesparseValue);
        /// <summary> unknown. </summary>
        public static DiskType Unknown { get; } = new DiskType(UnknownValue);
        /// <summary> Determines if two <see cref="DiskType"/> values are the same. </summary>
        public static bool operator ==(DiskType left, DiskType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiskType"/> values are not the same. </summary>
        public static bool operator !=(DiskType left, DiskType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DiskType"/>. </summary>
        public static implicit operator DiskType(string value) => new DiskType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiskType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiskType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
