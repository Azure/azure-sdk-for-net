// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ConnectedVMwarevSphere.Models
{
    /// <summary> NIC type. </summary>
    public readonly partial struct NICType : IEquatable<NICType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NICType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NICType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Vmxnet3Value = "vmxnet3";
        private const string Vmxnet2Value = "vmxnet2";
        private const string VmxnetValue = "vmxnet";
        private const string E1000Value = "e1000";
        private const string E1000EValue = "e1000e";
        private const string Pcnet32Value = "pcnet32";

        /// <summary> vmxnet3. </summary>
        public static NICType Vmxnet3 { get; } = new NICType(Vmxnet3Value);
        /// <summary> vmxnet2. </summary>
        public static NICType Vmxnet2 { get; } = new NICType(Vmxnet2Value);
        /// <summary> vmxnet. </summary>
        public static NICType Vmxnet { get; } = new NICType(VmxnetValue);
        /// <summary> e1000. </summary>
        public static NICType E1000 { get; } = new NICType(E1000Value);
        /// <summary> e1000e. </summary>
        public static NICType E1000E { get; } = new NICType(E1000EValue);
        /// <summary> pcnet32. </summary>
        public static NICType Pcnet32 { get; } = new NICType(Pcnet32Value);
        /// <summary> Determines if two <see cref="NICType"/> values are the same. </summary>
        public static bool operator ==(NICType left, NICType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NICType"/> values are not the same. </summary>
        public static bool operator !=(NICType left, NICType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NICType"/>. </summary>
        public static implicit operator NICType(string value) => new NICType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NICType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NICType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
