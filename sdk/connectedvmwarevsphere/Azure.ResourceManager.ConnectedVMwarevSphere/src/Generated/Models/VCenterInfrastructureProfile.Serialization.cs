// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConnectedVMwarevSphere.Models
{
    public partial class VCenterInfrastructureProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TemplateId))
            {
                writer.WritePropertyName("templateId"u8);
                writer.WriteStringValue(TemplateId);
            }
            if (Optional.IsDefined(VCenterId))
            {
                writer.WritePropertyName("vCenterId"u8);
                writer.WriteStringValue(VCenterId);
            }
            if (Optional.IsDefined(InventoryItemId))
            {
                writer.WritePropertyName("inventoryItemId"u8);
                writer.WriteStringValue(InventoryItemId);
            }
            if (Optional.IsDefined(SmbiosUuid))
            {
                writer.WritePropertyName("smbiosUuid"u8);
                writer.WriteStringValue(SmbiosUuid);
            }
            if (Optional.IsDefined(FirmwareType))
            {
                writer.WritePropertyName("firmwareType"u8);
                writer.WriteStringValue(FirmwareType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static VCenterInfrastructureProfile DeserializeVCenterInfrastructureProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> templateId = default;
            Optional<string> vCenterId = default;
            Optional<string> moRefId = default;
            Optional<string> inventoryItemId = default;
            Optional<string> moName = default;
            Optional<string> folderPath = default;
            Optional<string> instanceUuid = default;
            Optional<string> smbiosUuid = default;
            Optional<VMwareFirmwareType> firmwareType = default;
            Optional<string> customResourceName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("templateId"u8))
                {
                    templateId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vCenterId"u8))
                {
                    vCenterId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("moRefId"u8))
                {
                    moRefId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inventoryItemId"u8))
                {
                    inventoryItemId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("moName"u8))
                {
                    moName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("folderPath"u8))
                {
                    folderPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceUuid"u8))
                {
                    instanceUuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("smbiosUuid"u8))
                {
                    smbiosUuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firmwareType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    firmwareType = new VMwareFirmwareType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customResourceName"u8))
                {
                    customResourceName = property.Value.GetString();
                    continue;
                }
            }
            return new VCenterInfrastructureProfile(templateId.Value, vCenterId.Value, moRefId.Value, inventoryItemId.Value, moName.Value, folderPath.Value, instanceUuid.Value, smbiosUuid.Value, Optional.ToNullable(firmwareType), customResourceName.Value);
        }
    }
}
