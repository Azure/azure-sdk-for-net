// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ConnectedVMwarevSphere
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public static partial class ArmClientExtensions
    {
        #region ResourcePool
        /// <summary> Gets an object representing a ResourcePool along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourcePool" /> object. </returns>
        public static ResourcePool GetResourcePool(this ArmClient armClient, ResourceIdentifier id)
        {
            ResourcePool.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new ResourcePool(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region VMwareCluster
        /// <summary> Gets an object representing a VMwareCluster along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VMwareCluster" /> object. </returns>
        public static VMwareCluster GetVMwareCluster(this ArmClient armClient, ResourceIdentifier id)
        {
            VMwareCluster.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new VMwareCluster(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region VMwareHost
        /// <summary> Gets an object representing a VMwareHost along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VMwareHost" /> object. </returns>
        public static VMwareHost GetVMwareHost(this ArmClient armClient, ResourceIdentifier id)
        {
            VMwareHost.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new VMwareHost(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region VMwareDatastore
        /// <summary> Gets an object representing a VMwareDatastore along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VMwareDatastore" /> object. </returns>
        public static VMwareDatastore GetVMwareDatastore(this ArmClient armClient, ResourceIdentifier id)
        {
            VMwareDatastore.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new VMwareDatastore(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region VCenter
        /// <summary> Gets an object representing a VCenter along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VCenter" /> object. </returns>
        public static VCenter GetVCenter(this ArmClient armClient, ResourceIdentifier id)
        {
            VCenter.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new VCenter(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region VirtualMachine
        /// <summary> Gets an object representing a VirtualMachine along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualMachine" /> object. </returns>
        public static VirtualMachine GetVirtualMachine(this ArmClient armClient, ResourceIdentifier id)
        {
            VirtualMachine.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new VirtualMachine(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region VirtualMachineTemplate
        /// <summary> Gets an object representing a VirtualMachineTemplate along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualMachineTemplate" /> object. </returns>
        public static VirtualMachineTemplate GetVirtualMachineTemplate(this ArmClient armClient, ResourceIdentifier id)
        {
            VirtualMachineTemplate.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new VirtualMachineTemplate(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region VirtualNetwork
        /// <summary> Gets an object representing a VirtualNetwork along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetwork" /> object. </returns>
        public static VirtualNetwork GetVirtualNetwork(this ArmClient armClient, ResourceIdentifier id)
        {
            VirtualNetwork.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new VirtualNetwork(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region InventoryItem
        /// <summary> Gets an object representing a InventoryItem along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="InventoryItem" /> object. </returns>
        public static InventoryItem GetInventoryItem(this ArmClient armClient, ResourceIdentifier id)
        {
            InventoryItem.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new InventoryItem(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region HybridIdentityMetadata
        /// <summary> Gets an object representing a HybridIdentityMetadata along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridIdentityMetadata" /> object. </returns>
        public static HybridIdentityMetadata GetHybridIdentityMetadata(this ArmClient armClient, ResourceIdentifier id)
        {
            HybridIdentityMetadata.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new HybridIdentityMetadata(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region MachineExtension
        /// <summary> Gets an object representing a MachineExtension along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MachineExtension" /> object. </returns>
        public static MachineExtension GetMachineExtension(this ArmClient armClient, ResourceIdentifier id)
        {
            MachineExtension.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new MachineExtension(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region GuestAgent
        /// <summary> Gets an object representing a GuestAgent along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GuestAgent" /> object. </returns>
        public static GuestAgent GetGuestAgent(this ArmClient armClient, ResourceIdentifier id)
        {
            GuestAgent.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new GuestAgent(clientOptions, credential, uri, pipeline, id));
        }
        #endregion
    }
}
