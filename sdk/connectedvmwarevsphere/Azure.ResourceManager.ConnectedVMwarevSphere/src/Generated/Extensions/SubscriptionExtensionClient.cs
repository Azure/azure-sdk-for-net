// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ConnectedVMwarevSphere
{
    /// <summary> A class to add extension methods to Subscription. </summary>
    internal partial class SubscriptionExtensionClient : ArmResource
    {
        private ClientDiagnostics _resourcePoolClientDiagnostics;
        private ResourcePoolsRestOperations _resourcePoolRestClient;
        private ClientDiagnostics _vMwareClusterClustersClientDiagnostics;
        private ClustersRestOperations _vMwareClusterClustersRestClient;
        private ClientDiagnostics _vMwareHostHostsClientDiagnostics;
        private HostsRestOperations _vMwareHostHostsRestClient;
        private ClientDiagnostics _vMwareDatastoreDatastoresClientDiagnostics;
        private DatastoresRestOperations _vMwareDatastoreDatastoresRestClient;
        private ClientDiagnostics _vCenterClientDiagnostics;
        private VCentersRestOperations _vCenterRestClient;
        private ClientDiagnostics _virtualMachineClientDiagnostics;
        private VirtualMachinesRestOperations _virtualMachineRestClient;
        private ClientDiagnostics _virtualMachineTemplateClientDiagnostics;
        private VirtualMachineTemplatesRestOperations _virtualMachineTemplateRestClient;
        private ClientDiagnostics _virtualNetworkClientDiagnostics;
        private VirtualNetworksRestOperations _virtualNetworkRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionExtensionClient"/> class for mocking. </summary>
        protected SubscriptionExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ResourcePoolClientDiagnostics => _resourcePoolClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ConnectedVMwarevSphere", ResourcePool.ResourceType.Namespace, DiagnosticOptions);
        private ResourcePoolsRestOperations ResourcePoolRestClient => _resourcePoolRestClient ??= new ResourcePoolsRestOperations(ResourcePoolClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(ResourcePool.ResourceType));
        private ClientDiagnostics VMwareClusterClustersClientDiagnostics => _vMwareClusterClustersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ConnectedVMwarevSphere", VMwareCluster.ResourceType.Namespace, DiagnosticOptions);
        private ClustersRestOperations VMwareClusterClustersRestClient => _vMwareClusterClustersRestClient ??= new ClustersRestOperations(VMwareClusterClustersClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(VMwareCluster.ResourceType));
        private ClientDiagnostics VMwareHostHostsClientDiagnostics => _vMwareHostHostsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ConnectedVMwarevSphere", VMwareHost.ResourceType.Namespace, DiagnosticOptions);
        private HostsRestOperations VMwareHostHostsRestClient => _vMwareHostHostsRestClient ??= new HostsRestOperations(VMwareHostHostsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(VMwareHost.ResourceType));
        private ClientDiagnostics VMwareDatastoreDatastoresClientDiagnostics => _vMwareDatastoreDatastoresClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ConnectedVMwarevSphere", VMwareDatastore.ResourceType.Namespace, DiagnosticOptions);
        private DatastoresRestOperations VMwareDatastoreDatastoresRestClient => _vMwareDatastoreDatastoresRestClient ??= new DatastoresRestOperations(VMwareDatastoreDatastoresClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(VMwareDatastore.ResourceType));
        private ClientDiagnostics VCenterClientDiagnostics => _vCenterClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ConnectedVMwarevSphere", VCenter.ResourceType.Namespace, DiagnosticOptions);
        private VCentersRestOperations VCenterRestClient => _vCenterRestClient ??= new VCentersRestOperations(VCenterClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(VCenter.ResourceType));
        private ClientDiagnostics VirtualMachineClientDiagnostics => _virtualMachineClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ConnectedVMwarevSphere", VirtualMachine.ResourceType.Namespace, DiagnosticOptions);
        private VirtualMachinesRestOperations VirtualMachineRestClient => _virtualMachineRestClient ??= new VirtualMachinesRestOperations(VirtualMachineClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(VirtualMachine.ResourceType));
        private ClientDiagnostics VirtualMachineTemplateClientDiagnostics => _virtualMachineTemplateClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ConnectedVMwarevSphere", VirtualMachineTemplate.ResourceType.Namespace, DiagnosticOptions);
        private VirtualMachineTemplatesRestOperations VirtualMachineTemplateRestClient => _virtualMachineTemplateRestClient ??= new VirtualMachineTemplatesRestOperations(VirtualMachineTemplateClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(VirtualMachineTemplate.ResourceType));
        private ClientDiagnostics VirtualNetworkClientDiagnostics => _virtualNetworkClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ConnectedVMwarevSphere", VirtualNetwork.ResourceType.Namespace, DiagnosticOptions);
        private VirtualNetworksRestOperations VirtualNetworkRestClient => _virtualNetworkRestClient ??= new VirtualNetworksRestOperations(VirtualNetworkClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(VirtualNetwork.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            Client.TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ResourcePools_List
        /// <summary> List of resourcePools in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ResourcePool" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ResourcePool> GetResourcePoolsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ResourcePool>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ResourcePoolClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetResourcePools");
                scope.Start();
                try
                {
                    var response = await ResourcePoolRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourcePool(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ResourcePool>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ResourcePoolClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetResourcePools");
                scope.Start();
                try
                {
                    var response = await ResourcePoolRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourcePool(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ResourcePools_List
        /// <summary> List of resourcePools in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ResourcePool" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ResourcePool> GetResourcePools(CancellationToken cancellationToken = default)
        {
            Page<ResourcePool> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ResourcePoolClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetResourcePools");
                scope.Start();
                try
                {
                    var response = ResourcePoolRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourcePool(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ResourcePool> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ResourcePoolClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetResourcePools");
                scope.Start();
                try
                {
                    var response = ResourcePoolRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourcePool(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/clusters
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Clusters_List
        /// <summary> List of clusters in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VMwareCluster" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VMwareCluster> GetVMwareClustersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VMwareCluster>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VMwareClusterClustersClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareClusters");
                scope.Start();
                try
                {
                    var response = await VMwareClusterClustersRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareCluster(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<VMwareCluster>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VMwareClusterClustersClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareClusters");
                scope.Start();
                try
                {
                    var response = await VMwareClusterClustersRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareCluster(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/clusters
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Clusters_List
        /// <summary> List of clusters in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VMwareCluster" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VMwareCluster> GetVMwareClusters(CancellationToken cancellationToken = default)
        {
            Page<VMwareCluster> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VMwareClusterClustersClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareClusters");
                scope.Start();
                try
                {
                    var response = VMwareClusterClustersRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareCluster(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<VMwareCluster> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VMwareClusterClustersClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareClusters");
                scope.Start();
                try
                {
                    var response = VMwareClusterClustersRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareCluster(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/hosts
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Hosts_List
        /// <summary> List of hosts in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VMwareHost" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VMwareHost> GetVMwareHostsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VMwareHost>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VMwareHostHostsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareHosts");
                scope.Start();
                try
                {
                    var response = await VMwareHostHostsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareHost(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<VMwareHost>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VMwareHostHostsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareHosts");
                scope.Start();
                try
                {
                    var response = await VMwareHostHostsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareHost(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/hosts
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Hosts_List
        /// <summary> List of hosts in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VMwareHost" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VMwareHost> GetVMwareHosts(CancellationToken cancellationToken = default)
        {
            Page<VMwareHost> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VMwareHostHostsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareHosts");
                scope.Start();
                try
                {
                    var response = VMwareHostHostsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareHost(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<VMwareHost> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VMwareHostHostsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareHosts");
                scope.Start();
                try
                {
                    var response = VMwareHostHostsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareHost(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/datastores
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Datastores_List
        /// <summary> List of datastores in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VMwareDatastore" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VMwareDatastore> GetVMwareDatastoresAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VMwareDatastore>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VMwareDatastoreDatastoresClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareDatastores");
                scope.Start();
                try
                {
                    var response = await VMwareDatastoreDatastoresRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareDatastore(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<VMwareDatastore>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VMwareDatastoreDatastoresClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareDatastores");
                scope.Start();
                try
                {
                    var response = await VMwareDatastoreDatastoresRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareDatastore(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/datastores
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Datastores_List
        /// <summary> List of datastores in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VMwareDatastore" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VMwareDatastore> GetVMwareDatastores(CancellationToken cancellationToken = default)
        {
            Page<VMwareDatastore> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VMwareDatastoreDatastoresClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareDatastores");
                scope.Start();
                try
                {
                    var response = VMwareDatastoreDatastoresRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareDatastore(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<VMwareDatastore> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VMwareDatastoreDatastoresClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVMwareDatastores");
                scope.Start();
                try
                {
                    var response = VMwareDatastoreDatastoresRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareDatastore(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/vcenters
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VCenters_List
        /// <summary> List of vCenters in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VCenter" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VCenter> GetVCentersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VCenter>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VCenterClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVCenters");
                scope.Start();
                try
                {
                    var response = await VCenterRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VCenter(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<VCenter>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VCenterClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVCenters");
                scope.Start();
                try
                {
                    var response = await VCenterRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VCenter(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/vcenters
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VCenters_List
        /// <summary> List of vCenters in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VCenter" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VCenter> GetVCenters(CancellationToken cancellationToken = default)
        {
            Page<VCenter> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VCenterClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVCenters");
                scope.Start();
                try
                {
                    var response = VCenterRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VCenter(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<VCenter> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VCenterClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVCenters");
                scope.Start();
                try
                {
                    var response = VCenterRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VCenter(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VirtualMachines_List
        /// <summary> List of virtualMachines in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VirtualMachine> GetVirtualMachinesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VirtualMachine>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VirtualMachineClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualMachines");
                scope.Start();
                try
                {
                    var response = await VirtualMachineRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualMachine(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<VirtualMachine>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VirtualMachineClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualMachines");
                scope.Start();
                try
                {
                    var response = await VirtualMachineRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualMachine(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VirtualMachines_List
        /// <summary> List of virtualMachines in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VirtualMachine> GetVirtualMachines(CancellationToken cancellationToken = default)
        {
            Page<VirtualMachine> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VirtualMachineClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualMachines");
                scope.Start();
                try
                {
                    var response = VirtualMachineRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualMachine(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<VirtualMachine> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VirtualMachineClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualMachines");
                scope.Start();
                try
                {
                    var response = VirtualMachineRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualMachine(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VirtualMachineTemplates_List
        /// <summary> List of virtualMachineTemplates in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualMachineTemplate" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VirtualMachineTemplate> GetVirtualMachineTemplatesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VirtualMachineTemplate>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VirtualMachineTemplateClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualMachineTemplates");
                scope.Start();
                try
                {
                    var response = await VirtualMachineTemplateRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualMachineTemplate(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<VirtualMachineTemplate>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VirtualMachineTemplateClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualMachineTemplates");
                scope.Start();
                try
                {
                    var response = await VirtualMachineTemplateRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualMachineTemplate(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VirtualMachineTemplates_List
        /// <summary> List of virtualMachineTemplates in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualMachineTemplate" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VirtualMachineTemplate> GetVirtualMachineTemplates(CancellationToken cancellationToken = default)
        {
            Page<VirtualMachineTemplate> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VirtualMachineTemplateClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualMachineTemplates");
                scope.Start();
                try
                {
                    var response = VirtualMachineTemplateRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualMachineTemplate(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<VirtualMachineTemplate> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VirtualMachineTemplateClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualMachineTemplates");
                scope.Start();
                try
                {
                    var response = VirtualMachineTemplateRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualMachineTemplate(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VirtualNetworks_List
        /// <summary> List of virtualNetworks in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VirtualNetwork> GetVirtualNetworksAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VirtualNetwork>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VirtualNetworkClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualNetworks");
                scope.Start();
                try
                {
                    var response = await VirtualNetworkRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualNetwork(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<VirtualNetwork>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VirtualNetworkClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualNetworks");
                scope.Start();
                try
                {
                    var response = await VirtualNetworkRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualNetwork(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VirtualNetworks_List
        /// <summary> List of virtualNetworks in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VirtualNetwork> GetVirtualNetworks(CancellationToken cancellationToken = default)
        {
            Page<VirtualNetwork> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VirtualNetworkClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualNetworks");
                scope.Start();
                try
                {
                    var response = VirtualNetworkRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualNetwork(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<VirtualNetwork> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VirtualNetworkClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetVirtualNetworks");
                scope.Start();
                try
                {
                    var response = VirtualNetworkRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualNetwork(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
