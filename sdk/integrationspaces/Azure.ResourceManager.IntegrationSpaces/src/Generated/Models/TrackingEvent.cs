// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.IntegrationSpaces.Models
{
    /// <summary> The tracking event definition. </summary>
    public partial class TrackingEvent
    {
        /// <summary> Initializes a new instance of TrackingEvent. </summary>
        public TrackingEvent()
        {
            Properties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of TrackingEvent. </summary>
        /// <param name="operationType"> The operation type. </param>
        /// <param name="operationName"> The operation name. </param>
        /// <param name="properties"> The properties to be collected for event. </param>
        internal TrackingEvent(string operationType, string operationName, IDictionary<string, BinaryData> properties)
        {
            OperationType = operationType;
            OperationName = operationName;
            Properties = properties;
        }

        /// <summary> The operation type. </summary>
        public string OperationType { get; set; }
        /// <summary> The operation name. </summary>
        public string OperationName { get; set; }
        /// <summary>
        /// The properties to be collected for event.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Properties { get; }
    }
}
