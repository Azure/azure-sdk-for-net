// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.IntegrationSpaces.Models;

namespace Azure.ResourceManager.IntegrationSpaces
{
    /// <summary>
    /// A class representing a collection of <see cref="BusinessProcessVersionResource" /> and their operations.
    /// Each <see cref="BusinessProcessVersionResource" /> in the collection will belong to the same instance of <see cref="BusinessProcessResource" />.
    /// To get a <see cref="BusinessProcessVersionCollection" /> instance call the GetBusinessProcessVersions method from an instance of <see cref="BusinessProcessResource" />.
    /// </summary>
    public partial class BusinessProcessVersionCollection : ArmCollection, IEnumerable<BusinessProcessVersionResource>, IAsyncEnumerable<BusinessProcessVersionResource>
    {
        private readonly ClientDiagnostics _businessProcessVersionClientDiagnostics;
        private readonly BusinessProcessVersionsRestOperations _businessProcessVersionRestClient;

        /// <summary> Initializes a new instance of the <see cref="BusinessProcessVersionCollection"/> class for mocking. </summary>
        protected BusinessProcessVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BusinessProcessVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal BusinessProcessVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _businessProcessVersionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.IntegrationSpaces", BusinessProcessVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(BusinessProcessVersionResource.ResourceType, out string businessProcessVersionApiVersion);
            _businessProcessVersionRestClient = new BusinessProcessVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, businessProcessVersionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != BusinessProcessResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, BusinessProcessResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a BusinessProcessVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions/{businessProcessVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcessVersions_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessVersion"> The version of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessVersion"/> is null. </exception>
        public virtual async Task<Response<BusinessProcessVersionResource>> GetAsync(string businessProcessVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessVersion, nameof(businessProcessVersion));

            using var scope = _businessProcessVersionClientDiagnostics.CreateScope("BusinessProcessVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _businessProcessVersionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, businessProcessVersion, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BusinessProcessVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a BusinessProcessVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions/{businessProcessVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcessVersions_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessVersion"> The version of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessVersion"/> is null. </exception>
        public virtual Response<BusinessProcessVersionResource> Get(string businessProcessVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessVersion, nameof(businessProcessVersion));

            using var scope = _businessProcessVersionClientDiagnostics.CreateScope("BusinessProcessVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _businessProcessVersionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, businessProcessVersion, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BusinessProcessVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List BusinessProcessVersion resources by BusinessProcess
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcessVersions_ListByBusinessProcess</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BusinessProcessVersionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BusinessProcessVersionResource> GetAllAsync(BusinessProcessVersionCollectionGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new BusinessProcessVersionCollectionGetAllOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _businessProcessVersionRestClient.CreateListByBusinessProcessRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _businessProcessVersionRestClient.CreateListByBusinessProcessNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new BusinessProcessVersionResource(Client, BusinessProcessVersionData.DeserializeBusinessProcessVersionData(e)), _businessProcessVersionClientDiagnostics, Pipeline, "BusinessProcessVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List BusinessProcessVersion resources by BusinessProcess
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcessVersions_ListByBusinessProcess</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BusinessProcessVersionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BusinessProcessVersionResource> GetAll(BusinessProcessVersionCollectionGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new BusinessProcessVersionCollectionGetAllOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _businessProcessVersionRestClient.CreateListByBusinessProcessRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _businessProcessVersionRestClient.CreateListByBusinessProcessNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new BusinessProcessVersionResource(Client, BusinessProcessVersionData.DeserializeBusinessProcessVersionData(e)), _businessProcessVersionClientDiagnostics, Pipeline, "BusinessProcessVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions/{businessProcessVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcessVersions_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessVersion"> The version of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessVersion"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string businessProcessVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessVersion, nameof(businessProcessVersion));

            using var scope = _businessProcessVersionClientDiagnostics.CreateScope("BusinessProcessVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _businessProcessVersionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, businessProcessVersion, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions/{businessProcessVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcessVersions_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessVersion"> The version of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessVersion"/> is null. </exception>
        public virtual Response<bool> Exists(string businessProcessVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessVersion, nameof(businessProcessVersion));

            using var scope = _businessProcessVersionClientDiagnostics.CreateScope("BusinessProcessVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _businessProcessVersionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, businessProcessVersion, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions/{businessProcessVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcessVersions_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessVersion"> The version of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessVersion"/> is null. </exception>
        public virtual async Task<NullableResponse<BusinessProcessVersionResource>> GetIfExistsAsync(string businessProcessVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessVersion, nameof(businessProcessVersion));

            using var scope = _businessProcessVersionClientDiagnostics.CreateScope("BusinessProcessVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _businessProcessVersionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, businessProcessVersion, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<BusinessProcessVersionResource>(response.GetRawResponse());
                return Response.FromValue(new BusinessProcessVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions/{businessProcessVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcessVersions_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessVersion"> The version of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessVersion"/> is null. </exception>
        public virtual NullableResponse<BusinessProcessVersionResource> GetIfExists(string businessProcessVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessVersion, nameof(businessProcessVersion));

            using var scope = _businessProcessVersionClientDiagnostics.CreateScope("BusinessProcessVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _businessProcessVersionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, businessProcessVersion, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<BusinessProcessVersionResource>(response.GetRawResponse());
                return Response.FromValue(new BusinessProcessVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<BusinessProcessVersionResource> IEnumerable<BusinessProcessVersionResource>.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IAsyncEnumerator<BusinessProcessVersionResource> IAsyncEnumerable<BusinessProcessVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(options: null, cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
