// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.IntegrationSpaces;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.IntegrationSpaces.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmIntegrationSpacesModelFactory
    {
        /// <summary> Initializes a new instance of SpaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="description"> The description of the resource. </param>
        /// <returns> A new <see cref="IntegrationSpaces.SpaceData"/> instance for mocking. </returns>
        public static SpaceData SpaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, string description = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SpaceData(id, name, resourceType, systemData, tags, location, provisioningState, description);
        }

        /// <summary> Initializes a new instance of IntegrationSpaceApplicationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="description"> The description of the resource. </param>
        /// <param name="trackingDataStores"> The tracking data stores. </param>
        /// <returns> A new <see cref="IntegrationSpaces.IntegrationSpaceApplicationData"/> instance for mocking. </returns>
        public static IntegrationSpaceApplicationData IntegrationSpaceApplicationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, string description = null, IDictionary<string, TrackingDataStore> trackingDataStores = null)
        {
            tags ??= new Dictionary<string, string>();
            trackingDataStores ??= new Dictionary<string, TrackingDataStore>();

            return new IntegrationSpaceApplicationData(id, name, resourceType, systemData, tags, location, provisioningState, description, trackingDataStores);
        }

        /// <summary> Initializes a new instance of BusinessProcessData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="version"> The version of the business process. </param>
        /// <param name="description"> The description of the business process. </param>
        /// <param name="tableName"> The table name of the business process. </param>
        /// <param name="trackingDataStoreReferenceName"> The tracking data store reference name. </param>
        /// <param name="identifier"> The business process identifier. </param>
        /// <param name="businessProcessStages"> The business process stages. </param>
        /// <param name="businessProcessMapping"> The business process mapping. </param>
        /// <returns> A new <see cref="IntegrationSpaces.BusinessProcessData"/> instance for mocking. </returns>
        public static BusinessProcessData BusinessProcessData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProvisioningState? provisioningState = null, string version = null, string description = null, string tableName = null, string trackingDataStoreReferenceName = null, BusinessProcessIdentifier identifier = null, IDictionary<string, BusinessProcessStage> businessProcessStages = null, IDictionary<string, BusinessProcessMappingItem> businessProcessMapping = null)
        {
            businessProcessStages ??= new Dictionary<string, BusinessProcessStage>();
            businessProcessMapping ??= new Dictionary<string, BusinessProcessMappingItem>();

            return new BusinessProcessData(id, name, resourceType, systemData, provisioningState, version, description, tableName, trackingDataStoreReferenceName, identifier, businessProcessStages, businessProcessMapping);
        }

        /// <summary> Initializes a new instance of BusinessProcessVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="version"> The version of the business process. </param>
        /// <param name="description"> The description of the business process. </param>
        /// <param name="tableName"> The table name of the business process. </param>
        /// <param name="trackingDataStoreReferenceName"> The tracking data store reference name. </param>
        /// <param name="identifier"> The business process identifier. </param>
        /// <param name="businessProcessStages"> The business process stages. </param>
        /// <param name="businessProcessMapping"> The business process mapping. </param>
        /// <returns> A new <see cref="IntegrationSpaces.BusinessProcessVersionData"/> instance for mocking. </returns>
        public static BusinessProcessVersionData BusinessProcessVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProvisioningState? provisioningState = null, string version = null, string description = null, string tableName = null, string trackingDataStoreReferenceName = null, BusinessProcessIdentifier identifier = null, IDictionary<string, BusinessProcessStage> businessProcessStages = null, IDictionary<string, BusinessProcessMappingItem> businessProcessMapping = null)
        {
            businessProcessStages ??= new Dictionary<string, BusinessProcessStage>();
            businessProcessMapping ??= new Dictionary<string, BusinessProcessMappingItem>();

            return new BusinessProcessVersionData(id, name, resourceType, systemData, provisioningState, version, description, tableName, trackingDataStoreReferenceName, identifier, businessProcessStages, businessProcessMapping);
        }

        /// <summary> Initializes a new instance of BusinessProcessDevelopmentArtifactResult. </summary>
        /// <param name="name"> The name of the business process development artifact. </param>
        /// <param name="systemData"> The system data of the business process development artifact. </param>
        /// <param name="properties"> The properties of the business process development artifact. </param>
        /// <returns> A new <see cref="Models.BusinessProcessDevelopmentArtifactResult"/> instance for mocking. </returns>
        public static BusinessProcessDevelopmentArtifactResult BusinessProcessDevelopmentArtifactResult(string name = null, SystemData systemData = null, BusinessProcessDevelopmentArtifactProperties properties = null)
        {
            return new BusinessProcessDevelopmentArtifactResult(name, systemData, properties);
        }

        /// <summary> Initializes a new instance of IntegrationSpaceResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="resourceId"> The Arm id of the application resource. </param>
        /// <param name="resourceKind"> The kind of the application resource. </param>
        /// <returns> A new <see cref="IntegrationSpaces.IntegrationSpaceResourceData"/> instance for mocking. </returns>
        public static IntegrationSpaceResourceData IntegrationSpaceResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProvisioningState? provisioningState = null, string resourceId = null, string resourceKind = null)
        {
            return new IntegrationSpaceResourceData(id, name, resourceType, systemData, provisioningState, resourceId, resourceKind);
        }

        /// <summary> Initializes a new instance of InfrastructureResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="resourceId"> The id of the infrastructure resource. </param>
        /// <returns> A new <see cref="IntegrationSpaces.InfrastructureResourceData"/> instance for mocking. </returns>
        public static InfrastructureResourceData InfrastructureResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProvisioningState? provisioningState = null, string resourceId = null)
        {
            return new InfrastructureResourceData(id, name, resourceType, systemData, provisioningState, resourceId);
        }
    }
}
