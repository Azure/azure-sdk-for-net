// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.IntegrationSpaces.Models;

namespace Azure.ResourceManager.IntegrationSpaces
{
    /// <summary>
    /// A class representing a collection of <see cref="InfrastructureResource" /> and their operations.
    /// Each <see cref="InfrastructureResource" /> in the collection will belong to the same instance of <see cref="SpaceResource" />.
    /// To get an <see cref="InfrastructureResourceCollection" /> instance call the GetInfrastructureResources method from an instance of <see cref="SpaceResource" />.
    /// </summary>
    public partial class InfrastructureResourceCollection : ArmCollection, IEnumerable<InfrastructureResource>, IAsyncEnumerable<InfrastructureResource>
    {
        private readonly ClientDiagnostics _infrastructureResourceClientDiagnostics;
        private readonly InfrastructureResourcesRestOperations _infrastructureResourceRestClient;

        /// <summary> Initializes a new instance of the <see cref="InfrastructureResourceCollection"/> class for mocking. </summary>
        protected InfrastructureResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="InfrastructureResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal InfrastructureResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _infrastructureResourceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.IntegrationSpaces", InfrastructureResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(InfrastructureResource.ResourceType, out string infrastructureResourceApiVersion);
            _infrastructureResourceRestClient = new InfrastructureResourcesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, infrastructureResourceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SpaceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SpaceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a InfrastructureResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="infrastructureResourceName"> The name of the infrastructure resource in the space. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="infrastructureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="infrastructureResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<InfrastructureResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string infrastructureResourceName, InfrastructureResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(infrastructureResourceName, nameof(infrastructureResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _infrastructureResourceClientDiagnostics.CreateScope("InfrastructureResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _infrastructureResourceRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, infrastructureResourceName, data, cancellationToken).ConfigureAwait(false);
                var operation = new IntegrationSpacesArmOperation<InfrastructureResource>(Response.FromValue(new InfrastructureResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a InfrastructureResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="infrastructureResourceName"> The name of the infrastructure resource in the space. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="infrastructureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="infrastructureResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<InfrastructureResource> CreateOrUpdate(WaitUntil waitUntil, string infrastructureResourceName, InfrastructureResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(infrastructureResourceName, nameof(infrastructureResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _infrastructureResourceClientDiagnostics.CreateScope("InfrastructureResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _infrastructureResourceRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, infrastructureResourceName, data, cancellationToken);
                var operation = new IntegrationSpacesArmOperation<InfrastructureResource>(Response.FromValue(new InfrastructureResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a InfrastructureResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="infrastructureResourceName"> The name of the infrastructure resource in the space. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="infrastructureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="infrastructureResourceName"/> is null. </exception>
        public virtual async Task<Response<InfrastructureResource>> GetAsync(string infrastructureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(infrastructureResourceName, nameof(infrastructureResourceName));

            using var scope = _infrastructureResourceClientDiagnostics.CreateScope("InfrastructureResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _infrastructureResourceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, infrastructureResourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new InfrastructureResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a InfrastructureResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="infrastructureResourceName"> The name of the infrastructure resource in the space. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="infrastructureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="infrastructureResourceName"/> is null. </exception>
        public virtual Response<InfrastructureResource> Get(string infrastructureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(infrastructureResourceName, nameof(infrastructureResourceName));

            using var scope = _infrastructureResourceClientDiagnostics.CreateScope("InfrastructureResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _infrastructureResourceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, infrastructureResourceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new InfrastructureResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List InfrastructureResource resources by Space
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_ListBySpace</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="InfrastructureResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<InfrastructureResource> GetAllAsync(InfrastructureResourceCollectionGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new InfrastructureResourceCollectionGetAllOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _infrastructureResourceRestClient.CreateListBySpaceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _infrastructureResourceRestClient.CreateListBySpaceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new InfrastructureResource(Client, InfrastructureResourceData.DeserializeInfrastructureResourceData(e)), _infrastructureResourceClientDiagnostics, Pipeline, "InfrastructureResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List InfrastructureResource resources by Space
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_ListBySpace</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="InfrastructureResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<InfrastructureResource> GetAll(InfrastructureResourceCollectionGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new InfrastructureResourceCollectionGetAllOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _infrastructureResourceRestClient.CreateListBySpaceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _infrastructureResourceRestClient.CreateListBySpaceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new InfrastructureResource(Client, InfrastructureResourceData.DeserializeInfrastructureResourceData(e)), _infrastructureResourceClientDiagnostics, Pipeline, "InfrastructureResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="infrastructureResourceName"> The name of the infrastructure resource in the space. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="infrastructureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="infrastructureResourceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string infrastructureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(infrastructureResourceName, nameof(infrastructureResourceName));

            using var scope = _infrastructureResourceClientDiagnostics.CreateScope("InfrastructureResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _infrastructureResourceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, infrastructureResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="infrastructureResourceName"> The name of the infrastructure resource in the space. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="infrastructureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="infrastructureResourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string infrastructureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(infrastructureResourceName, nameof(infrastructureResourceName));

            using var scope = _infrastructureResourceClientDiagnostics.CreateScope("InfrastructureResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _infrastructureResourceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, infrastructureResourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="infrastructureResourceName"> The name of the infrastructure resource in the space. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="infrastructureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="infrastructureResourceName"/> is null. </exception>
        public virtual async Task<NullableResponse<InfrastructureResource>> GetIfExistsAsync(string infrastructureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(infrastructureResourceName, nameof(infrastructureResourceName));

            using var scope = _infrastructureResourceClientDiagnostics.CreateScope("InfrastructureResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _infrastructureResourceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, infrastructureResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<InfrastructureResource>(response.GetRawResponse());
                return Response.FromValue(new InfrastructureResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InfrastructureResources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="infrastructureResourceName"> The name of the infrastructure resource in the space. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="infrastructureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="infrastructureResourceName"/> is null. </exception>
        public virtual NullableResponse<InfrastructureResource> GetIfExists(string infrastructureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(infrastructureResourceName, nameof(infrastructureResourceName));

            using var scope = _infrastructureResourceClientDiagnostics.CreateScope("InfrastructureResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _infrastructureResourceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, infrastructureResourceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<InfrastructureResource>(response.GetRawResponse());
                return Response.FromValue(new InfrastructureResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<InfrastructureResource> IEnumerable<InfrastructureResource>.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IAsyncEnumerator<InfrastructureResource> IAsyncEnumerable<InfrastructureResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(options: null, cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
