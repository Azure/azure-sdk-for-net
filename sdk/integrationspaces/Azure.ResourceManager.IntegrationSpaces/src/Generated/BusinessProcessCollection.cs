// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.IntegrationSpaces.Models;

namespace Azure.ResourceManager.IntegrationSpaces
{
    /// <summary>
    /// A class representing a collection of <see cref="BusinessProcessResource" /> and their operations.
    /// Each <see cref="BusinessProcessResource" /> in the collection will belong to the same instance of <see cref="IntegrationSpaceApplicationResource" />.
    /// To get a <see cref="BusinessProcessCollection" /> instance call the GetBusinessProcesses method from an instance of <see cref="IntegrationSpaceApplicationResource" />.
    /// </summary>
    public partial class BusinessProcessCollection : ArmCollection, IEnumerable<BusinessProcessResource>, IAsyncEnumerable<BusinessProcessResource>
    {
        private readonly ClientDiagnostics _businessProcessClientDiagnostics;
        private readonly BusinessProcessesRestOperations _businessProcessRestClient;

        /// <summary> Initializes a new instance of the <see cref="BusinessProcessCollection"/> class for mocking. </summary>
        protected BusinessProcessCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BusinessProcessCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal BusinessProcessCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _businessProcessClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.IntegrationSpaces", BusinessProcessResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(BusinessProcessResource.ResourceType, out string businessProcessApiVersion);
            _businessProcessRestClient = new BusinessProcessesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, businessProcessApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != IntegrationSpaceApplicationResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, IntegrationSpaceApplicationResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a BusinessProcess
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="businessProcessName"> The name of the business process. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<BusinessProcessResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string businessProcessName, BusinessProcessData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessName, nameof(businessProcessName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _businessProcessClientDiagnostics.CreateScope("BusinessProcessCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _businessProcessRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, businessProcessName, data, cancellationToken).ConfigureAwait(false);
                var operation = new IntegrationSpacesArmOperation<BusinessProcessResource>(Response.FromValue(new BusinessProcessResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a BusinessProcess
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="businessProcessName"> The name of the business process. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<BusinessProcessResource> CreateOrUpdate(WaitUntil waitUntil, string businessProcessName, BusinessProcessData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessName, nameof(businessProcessName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _businessProcessClientDiagnostics.CreateScope("BusinessProcessCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _businessProcessRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, businessProcessName, data, cancellationToken);
                var operation = new IntegrationSpacesArmOperation<BusinessProcessResource>(Response.FromValue(new BusinessProcessResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a BusinessProcess
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessName"> The name of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessName"/> is null. </exception>
        public virtual async Task<Response<BusinessProcessResource>> GetAsync(string businessProcessName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessName, nameof(businessProcessName));

            using var scope = _businessProcessClientDiagnostics.CreateScope("BusinessProcessCollection.Get");
            scope.Start();
            try
            {
                var response = await _businessProcessRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, businessProcessName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BusinessProcessResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a BusinessProcess
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessName"> The name of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessName"/> is null. </exception>
        public virtual Response<BusinessProcessResource> Get(string businessProcessName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessName, nameof(businessProcessName));

            using var scope = _businessProcessClientDiagnostics.CreateScope("BusinessProcessCollection.Get");
            scope.Start();
            try
            {
                var response = _businessProcessRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, businessProcessName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BusinessProcessResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List BusinessProcess resources by Application
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_ListByApplication</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BusinessProcessResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BusinessProcessResource> GetAllAsync(BusinessProcessCollectionGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new BusinessProcessCollectionGetAllOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _businessProcessRestClient.CreateListByApplicationRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _businessProcessRestClient.CreateListByApplicationNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new BusinessProcessResource(Client, BusinessProcessData.DeserializeBusinessProcessData(e)), _businessProcessClientDiagnostics, Pipeline, "BusinessProcessCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List BusinessProcess resources by Application
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_ListByApplication</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BusinessProcessResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BusinessProcessResource> GetAll(BusinessProcessCollectionGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new BusinessProcessCollectionGetAllOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _businessProcessRestClient.CreateListByApplicationRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _businessProcessRestClient.CreateListByApplicationNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, options.Top, options.Skip, pageSizeHint, options.Filter, options.Select, options.Expand, options.Orderby);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new BusinessProcessResource(Client, BusinessProcessData.DeserializeBusinessProcessData(e)), _businessProcessClientDiagnostics, Pipeline, "BusinessProcessCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessName"> The name of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string businessProcessName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessName, nameof(businessProcessName));

            using var scope = _businessProcessClientDiagnostics.CreateScope("BusinessProcessCollection.Exists");
            scope.Start();
            try
            {
                var response = await _businessProcessRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, businessProcessName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessName"> The name of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessName"/> is null. </exception>
        public virtual Response<bool> Exists(string businessProcessName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessName, nameof(businessProcessName));

            using var scope = _businessProcessClientDiagnostics.CreateScope("BusinessProcessCollection.Exists");
            scope.Start();
            try
            {
                var response = _businessProcessRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, businessProcessName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessName"> The name of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessName"/> is null. </exception>
        public virtual async Task<NullableResponse<BusinessProcessResource>> GetIfExistsAsync(string businessProcessName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessName, nameof(businessProcessName));

            using var scope = _businessProcessClientDiagnostics.CreateScope("BusinessProcessCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _businessProcessRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, businessProcessName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<BusinessProcessResource>(response.GetRawResponse());
                return Response.FromValue(new BusinessProcessResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BusinessProcesses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="businessProcessName"> The name of the business process. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="businessProcessName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="businessProcessName"/> is null. </exception>
        public virtual NullableResponse<BusinessProcessResource> GetIfExists(string businessProcessName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(businessProcessName, nameof(businessProcessName));

            using var scope = _businessProcessClientDiagnostics.CreateScope("BusinessProcessCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _businessProcessRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, businessProcessName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<BusinessProcessResource>(response.GetRawResponse());
                return Response.FromValue(new BusinessProcessResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<BusinessProcessResource> IEnumerable<BusinessProcessResource>.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IAsyncEnumerator<BusinessProcessResource> IAsyncEnumerable<BusinessProcessResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(options: null, cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
