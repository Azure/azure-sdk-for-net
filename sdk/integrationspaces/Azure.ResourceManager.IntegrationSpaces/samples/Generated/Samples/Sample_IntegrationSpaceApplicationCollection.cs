// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.IntegrationSpaces;
using Azure.ResourceManager.IntegrationSpaces.Models;

namespace Azure.ResourceManager.IntegrationSpaces.Samples
{
    public partial class Sample_IntegrationSpaceApplicationCollection
    {
        // ListApplicationsBySpace
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListApplicationsBySpace()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_ListBySpace.json
            // this example is just showing the usage of "Applications_ListBySpace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this IntegrationSpaceApplicationResource
            IntegrationSpaceApplicationCollection collection = space.GetIntegrationSpaceApplications();

            // invoke the operation and iterate over the result
            IntegrationSpaceApplicationCollectionGetAllOptions options = new IntegrationSpaceApplicationCollectionGetAllOptions() { };
            await foreach (IntegrationSpaceApplicationResource item in collection.GetAllAsync(options))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IntegrationSpaceApplicationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GetApplication
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetApplication()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_Get.json
            // this example is just showing the usage of "Applications_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this IntegrationSpaceApplicationResource
            IntegrationSpaceApplicationCollection collection = space.GetIntegrationSpaceApplications();

            // invoke the operation
            string applicationName = "Application1";
            IntegrationSpaceApplicationResource result = await collection.GetAsync(applicationName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IntegrationSpaceApplicationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GetApplication
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetApplication()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_Get.json
            // this example is just showing the usage of "Applications_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this IntegrationSpaceApplicationResource
            IntegrationSpaceApplicationCollection collection = space.GetIntegrationSpaceApplications();

            // invoke the operation
            string applicationName = "Application1";
            bool result = await collection.ExistsAsync(applicationName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GetApplication
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetApplication()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_Get.json
            // this example is just showing the usage of "Applications_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this IntegrationSpaceApplicationResource
            IntegrationSpaceApplicationCollection collection = space.GetIntegrationSpaceApplications();

            // invoke the operation
            string applicationName = "Application1";
            NullableResponse<IntegrationSpaceApplicationResource> response = await collection.GetIfExistsAsync(applicationName);
            IntegrationSpaceApplicationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IntegrationSpaceApplicationData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // CreateOrUpdateApplication
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateApplication()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_CreateOrUpdate.json
            // this example is just showing the usage of "Applications_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this IntegrationSpaceApplicationResource
            IntegrationSpaceApplicationCollection collection = space.GetIntegrationSpaceApplications();

            // invoke the operation
            string applicationName = "Application1";
            IntegrationSpaceApplicationData data = new IntegrationSpaceApplicationData(new AzureLocation("CentralUS"))
            {
                Description = "This is the user provided description of the application.",
                TrackingDataStores =
{
["dataStoreName1"] = new TrackingDataStore("testDatabase1","/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg/providers/Microsoft.Kusto/Clusters/cluster1",new Uri("https://someClusterName.someRegionName.kusto.windows.net"),new Uri("https://ingest-someClusterName.someRegionName.kusto.windows.net")),
["dataStoreName2"] = new TrackingDataStore("testDatabase1","/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg/providers/Microsoft.Kusto/Clusters/cluster1",new Uri("https://someClusterName.someRegionName.kusto.windows.net"),new Uri("https://ingest-someClusterName.someRegionName.kusto.windows.net")),
},
                Tags =
{
["key1"] = "Value1",
},
            };
            ArmOperation<IntegrationSpaceApplicationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, applicationName, data);
            IntegrationSpaceApplicationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IntegrationSpaceApplicationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
