// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.IntegrationSpaces;
using Azure.ResourceManager.IntegrationSpaces.Models;

namespace Azure.ResourceManager.IntegrationSpaces.Samples
{
    public partial class Sample_IntegrationSpaceApplicationResource
    {
        // GetApplication
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetApplication()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_Get.json
            // this example is just showing the usage of "Applications_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // invoke the operation
            IntegrationSpaceApplicationResource result = await integrationSpaceApplication.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IntegrationSpaceApplicationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PatchApplication
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchApplication()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_Patch.json
            // this example is just showing the usage of "Applications_Patch" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // invoke the operation
            IntegrationSpaceApplicationPatch patch = new IntegrationSpaceApplicationPatch()
            {
                Tags =
{
["key1"] = "Value1",
},
                Description = "This is the user provided PATCHED description of the application.",
            };
            IntegrationSpaceApplicationResource result = await integrationSpaceApplication.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IntegrationSpaceApplicationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DeleteApplication
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteApplication()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_Delete.json
            // this example is just showing the usage of "Applications_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // invoke the operation
            await integrationSpaceApplication.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DeleteBusinessProcessDevelopmentArtifact
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteBusinessProcessDevelopmentArtifact_DeleteBusinessProcessDevelopmentArtifact()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_DeleteBusinessProcessDevelopmentArtifact.json
            // this example is just showing the usage of "Applications_DeleteBusinessProcessDevelopmentArtifact" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // invoke the operation
            GetOrDeleteBusinessProcessDevelopmentArtifactRequest body = new GetOrDeleteBusinessProcessDevelopmentArtifactRequest("BusinessProcess1");
            await integrationSpaceApplication.DeleteBusinessProcessDevelopmentArtifactAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // GetBusinessProcessDevelopmentArtifact
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBusinessProcessDevelopmentArtifact_GetBusinessProcessDevelopmentArtifact()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_GetBusinessProcessDevelopmentArtifact.json
            // this example is just showing the usage of "Applications_GetBusinessProcessDevelopmentArtifact" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // invoke the operation
            GetOrDeleteBusinessProcessDevelopmentArtifactRequest body = new GetOrDeleteBusinessProcessDevelopmentArtifactRequest("BusinessProcess1");
            BusinessProcessDevelopmentArtifactResult result = await integrationSpaceApplication.GetBusinessProcessDevelopmentArtifactAsync(body);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ListBusinessProcessDevelopmentArtifacts
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBusinessProcessDevelopmentArtifacts_ListBusinessProcessDevelopmentArtifacts()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_ListBusinessProcessDevelopmentArtifacts.json
            // this example is just showing the usage of "Applications_ListBusinessProcessDevelopmentArtifacts" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // invoke the operation and iterate over the result
            await foreach (BusinessProcessDevelopmentArtifactResult item in integrationSpaceApplication.GetBusinessProcessDevelopmentArtifactsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // SaveBusinessProcessDevelopmentArtifact
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task SaveBusinessProcessDevelopmentArtifact_SaveBusinessProcessDevelopmentArtifact()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_SaveBusinessProcessDevelopmentArtifact.json
            // this example is just showing the usage of "Applications_SaveBusinessProcessDevelopmentArtifact" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // invoke the operation
            SaveOrValidateBusinessProcessDevelopmentArtifactRequest body = new SaveOrValidateBusinessProcessDevelopmentArtifactRequest("BusinessProcess1")
            {
                Properties = new BusinessProcessDevelopmentArtifactProperties()
                {
                    Description = "First Business Process",
                    Identifier = new BusinessProcessIdentifier()
                    {
                        PropertyName = "businessIdentifier-1",
                        PropertyType = "String",
                    },
                    BusinessProcessStages =
{
["Completed"] = new BusinessProcessStage()
{
Description = "Completed",
StagesBefore =
{
"Shipped"
},
},
["Denied"] = new BusinessProcessStage()
{
Description = "Denied",
StagesBefore =
{
"Processing"
},
},
["Processing"] = new BusinessProcessStage()
{
Description = "Processing",
Properties =
{
["ApprovalState"] = "String",
["ApproverName"] = "String",
["POAmount"] = "Integer",
},
StagesBefore =
{
"Received"
},
},
["Received"] = new BusinessProcessStage()
{
Description = "received",
Properties =
{
["City"] = "String",
["Product"] = "String",
["Quantity"] = "Integer",
["State"] = "String",
},
},
["Shipped"] = new BusinessProcessStage()
{
Description = "Shipped",
Properties =
{
["ShipPriority"] = "Integer",
["TrackingID"] = "Integer",
},
StagesBefore =
{
"Denied"
},
},
},
                    BusinessProcessMapping =
{
["Completed"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "CompletedPO",
OperationType = "Action",
},
["Denied"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "DeniedPO",
OperationType = "Action",
},
["Processing"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "PurchaseOrder",
OperationName = "ApprovedPO",
OperationType = "Action",
},
["Received"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "PurchaseOrder",
OperationName = "manual",
OperationType = "Trigger",
},
["Shipped"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "ShippedPO",
OperationType = "Action",
},
},
                    TrackingProfiles =
{
["subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1"] = new TrackingProfile()
{
Schema = "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2023-01-01/trackingdefinitionschema.json#",
BusinessProcess = new BusinessProcessReference()
{
Name = "businessProcess1",
Version = "d52c9c91-6e10-4a90-9c1f-08ee5d01c656",
},
TrackingDefinitions =
{
["Fulfillment"] = new WorkflowTracking()
{
CorrelationContext = new TrackingCorrelationContext()
{
OperationType = "Trigger",
OperationName = "manual",
PropertyName = "OrderNumber",
Value = "@trigger().outputs.body.OrderNumber",
},
Events =
{
["Completed"] = new TrackingEvent()
{
OperationType = "Action",
OperationName = "CompletedPO",
Properties =
{
},
},
["Denied"] = new TrackingEvent()
{
OperationType = "Action",
OperationName = "DeniedPO",
Properties =
{
},
},
["Shipped"] = new TrackingEvent()
{
OperationType = "Action",
OperationName = "ShippedPO",
Properties =
{
["ShipPriority"] = BinaryData.FromString("@action().inputs.shipPriority"),
["TrackingID"] = BinaryData.FromString("@action().inputs.trackingID"),
},
},
},
},
["PurchaseOrder"] = new WorkflowTracking()
{
CorrelationContext = new TrackingCorrelationContext()
{
OperationType = "Trigger",
OperationName = "manual",
PropertyName = "OrderNumber",
Value = "@trigger().outputs.body.OrderNumber",
},
Events =
{
["Processing"] = new TrackingEvent()
{
OperationType = "Action",
OperationName = "ApprovedPO",
Properties =
{
["ApprovalStatus"] = BinaryData.FromString("@action().inputs.ApprovalStatus"),
["ApproverName"] = BinaryData.FromString("@action().inputs.ApproverName"),
["POAmount"] = BinaryData.FromString("@action().inputs.POamount"),
},
},
["Received"] = new TrackingEvent()
{
OperationType = "Trigger",
OperationName = "manual",
Properties =
{
["City"] = BinaryData.FromString("@trigger().outputs.body.Address.City"),
["Product"] = BinaryData.FromString("@trigger().outputs.body.Product"),
["Quantity"] = BinaryData.FromString("@trigger().outputs.body.Quantity"),
["State"] = BinaryData.FromString("@trigger().outputs.body.Address.State"),
},
},
},
},
},
},
},
                },
            };
            BusinessProcessDevelopmentArtifactResult result = await integrationSpaceApplication.SaveBusinessProcessDevelopmentArtifactAsync(body);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ValidateBusinessProcessDevelopmentArtifact
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ValidateBusinessProcessDevelopmentArtifact_ValidateBusinessProcessDevelopmentArtifact()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/Applications_ValidateBusinessProcessDevelopmentArtifact.json
            // this example is just showing the usage of "Applications_ValidateBusinessProcessDevelopmentArtifact" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // invoke the operation
            SaveOrValidateBusinessProcessDevelopmentArtifactRequest body = new SaveOrValidateBusinessProcessDevelopmentArtifactRequest("BusinessProcess1")
            {
                Properties = new BusinessProcessDevelopmentArtifactProperties()
                {
                    Description = "First Business Process",
                    Identifier = new BusinessProcessIdentifier()
                    {
                        PropertyName = "businessIdentifier-1",
                        PropertyType = "String",
                    },
                    BusinessProcessStages =
{
["Completed"] = new BusinessProcessStage()
{
Description = "Completed",
StagesBefore =
{
"Shipped"
},
},
["Denied"] = new BusinessProcessStage()
{
Description = "Denied",
StagesBefore =
{
"Processing"
},
},
["Processing"] = new BusinessProcessStage()
{
Description = "Processing",
Properties =
{
["ApprovalState"] = "String",
["ApproverName"] = "String",
["POAmount"] = "Integer",
},
StagesBefore =
{
"Received"
},
},
["Received@"] = new BusinessProcessStage()
{
Description = "received",
Properties =
{
["City"] = "String",
["Product"] = "String",
["Quantity"] = "Integer",
["State"] = "String",
},
},
["Shipped"] = new BusinessProcessStage()
{
Description = "Shipped",
Properties =
{
["ShipPriority"] = "Integer",
["TrackingID"] = "Integer",
},
StagesBefore =
{
"Denied"
},
},
},
                    BusinessProcessMapping =
{
["Completed"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "CompletedPO",
OperationType = "Action",
},
["Denied"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "DeniedPO",
OperationType = "Action",
},
["Processing"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "PurchaseOrder",
OperationName = "ApprovedPO",
OperationType = "Action",
},
["Received"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "PurchaseOrder",
OperationName = "manual",
OperationType = "Trigger",
},
["Shipped"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "ShippedPO",
OperationType = "Action",
},
},
                    TrackingProfiles =
{
["subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1"] = new TrackingProfile()
{
Schema = "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2023-01-01/trackingdefinitionschema.json#",
BusinessProcess = new BusinessProcessReference()
{
Name = "businessProcess1",
Version = "d52c9c91-6e10-4a90-9c1f-08ee5d01c656",
},
TrackingDefinitions =
{
["Fulfillment"] = new WorkflowTracking()
{
CorrelationContext = new TrackingCorrelationContext()
{
OperationType = "Trigger",
OperationName = "manual",
PropertyName = "OrderNumber",
Value = "@trigger().outputs.body.OrderNumber",
},
Events =
{
["Completed"] = new TrackingEvent()
{
OperationType = "Action",
OperationName = "CompletedPO",
Properties =
{
},
},
["Denied"] = new TrackingEvent()
{
OperationType = "Action",
OperationName = "DeniedPO",
Properties =
{
},
},
["Shipped"] = new TrackingEvent()
{
OperationType = "Action",
OperationName = "ShippedPO",
Properties =
{
["ShipPriority"] = BinaryData.FromString("@action().inputs.shipPriority"),
["TrackingID"] = BinaryData.FromString("@action().inputs.trackingID"),
},
},
},
},
["PurchaseOrder"] = new WorkflowTracking()
{
CorrelationContext = new TrackingCorrelationContext()
{
OperationType = "Trigger",
OperationName = "manual",
PropertyName = "OrderNumber",
Value = "@trigger().outputs.body.OrderNumber",
},
Events =
{
["Processing"] = new TrackingEvent()
{
OperationType = "Action",
OperationName = "ApprovedPO",
Properties =
{
["ApprovalStatus"] = BinaryData.FromString("@action().inputs.ApprovalStatus"),
["ApproverName"] = BinaryData.FromString("@action().inputs.ApproverName"),
["POAmount"] = BinaryData.FromString("@action().inputs.POamount"),
},
},
["Received"] = new TrackingEvent()
{
OperationType = "Trigger",
OperationName = "manual",
Properties =
{
["City"] = BinaryData.FromString("@trigger().outputs.body.Address.City"),
["Product"] = BinaryData.FromString("@trigger().outputs.body.Product"),
["Quantity"] = BinaryData.FromString("@trigger().outputs.body.Quantity"),
["State"] = BinaryData.FromString("@trigger().outputs.body.Address.State"),
},
},
},
},
},
},
},
                },
            };
            await integrationSpaceApplication.ValidateBusinessProcessDevelopmentArtifactAsync(body);

            Console.WriteLine($"Succeeded");
        }
    }
}
