// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.IntegrationSpaces;
using Azure.ResourceManager.IntegrationSpaces.Models;

namespace Azure.ResourceManager.IntegrationSpaces.Samples
{
    public partial class Sample_BusinessProcessCollection
    {
        // ListBusinessProcessesByApplication
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListBusinessProcessesByApplication()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/BusinessProcesses_ListByApplication.json
            // this example is just showing the usage of "BusinessProcesses_ListByApplication" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // get the collection of this BusinessProcessResource
            BusinessProcessCollection collection = integrationSpaceApplication.GetBusinessProcesses();

            // invoke the operation and iterate over the result
            BusinessProcessCollectionGetAllOptions options = new BusinessProcessCollectionGetAllOptions() { };
            await foreach (BusinessProcessResource item in collection.GetAllAsync(options))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BusinessProcessData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GetBusinessProcess
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetBusinessProcess()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/BusinessProcesses_Get.json
            // this example is just showing the usage of "BusinessProcesses_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // get the collection of this BusinessProcessResource
            BusinessProcessCollection collection = integrationSpaceApplication.GetBusinessProcesses();

            // invoke the operation
            string businessProcessName = "BusinessProcess1";
            BusinessProcessResource result = await collection.GetAsync(businessProcessName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BusinessProcessData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GetBusinessProcess
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetBusinessProcess()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/BusinessProcesses_Get.json
            // this example is just showing the usage of "BusinessProcesses_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // get the collection of this BusinessProcessResource
            BusinessProcessCollection collection = integrationSpaceApplication.GetBusinessProcesses();

            // invoke the operation
            string businessProcessName = "BusinessProcess1";
            bool result = await collection.ExistsAsync(businessProcessName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GetBusinessProcess
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetBusinessProcess()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/BusinessProcesses_Get.json
            // this example is just showing the usage of "BusinessProcesses_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // get the collection of this BusinessProcessResource
            BusinessProcessCollection collection = integrationSpaceApplication.GetBusinessProcesses();

            // invoke the operation
            string businessProcessName = "BusinessProcess1";
            NullableResponse<BusinessProcessResource> response = await collection.GetIfExistsAsync(businessProcessName);
            BusinessProcessResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BusinessProcessData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // CreateOrUpdateBusinessProcess
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateBusinessProcess()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/BusinessProcesses_CreateOrUpdate.json
            // this example is just showing the usage of "BusinessProcesses_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IntegrationSpaceApplicationResource created on azure
            // for more information of creating IntegrationSpaceApplicationResource, please refer to the document of IntegrationSpaceApplicationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            string applicationName = "Application1";
            ResourceIdentifier integrationSpaceApplicationResourceId = IntegrationSpaceApplicationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName, applicationName);
            IntegrationSpaceApplicationResource integrationSpaceApplication = client.GetIntegrationSpaceApplicationResource(integrationSpaceApplicationResourceId);

            // get the collection of this BusinessProcessResource
            BusinessProcessCollection collection = integrationSpaceApplication.GetBusinessProcesses();

            // invoke the operation
            string businessProcessName = "BusinessProcess1";
            BusinessProcessData data = new BusinessProcessData()
            {
                Description = "First Business Process",
                TableName = "table1",
                TrackingDataStoreReferenceName = "trackingDataStoreReferenceName1",
                Identifier = new BusinessProcessIdentifier()
                {
                    PropertyName = "businessIdentifier-1",
                    PropertyType = "String",
                },
                BusinessProcessStages =
{
["Completed"] = new BusinessProcessStage()
{
Description = "Completed",
StagesBefore =
{
"Shipped"
},
},
["Denied"] = new BusinessProcessStage()
{
Description = "Denied",
StagesBefore =
{
"Processing"
},
},
["Processing"] = new BusinessProcessStage()
{
Description = "Processing",
Properties =
{
["ApprovalState"] = "String",
["ApproverName"] = "String",
["POAmount"] = "Integer",
},
StagesBefore =
{
"Received"
},
},
["Received"] = new BusinessProcessStage()
{
Description = "received",
Properties =
{
["City"] = "String",
["Product"] = "String",
["Quantity"] = "Integer",
["State"] = "String",
},
},
["Shipped"] = new BusinessProcessStage()
{
Description = "Shipped",
Properties =
{
["ShipPriority"] = "Integer",
["TrackingID"] = "Integer",
},
StagesBefore =
{
"Denied"
},
},
},
                BusinessProcessMapping =
{
["Completed"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "CompletedPO",
OperationType = "Action",
},
["Denied"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "DeniedPO",
OperationType = "Action",
},
["Processing"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "PurchaseOrder",
OperationName = "ApprovedPO",
OperationType = "Action",
},
["Received"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "PurchaseOrder",
OperationName = "manual",
OperationType = "Trigger",
},
["Shipped"] = new BusinessProcessMappingItem()
{
LogicAppResourceId = "subscriptions/sub1/resourcegroups/group1/providers/Microsoft.Web/sites/logicApp1",
WorkflowName = "Fulfillment",
OperationName = "ShippedPO",
OperationType = "Action",
},
},
            };
            ArmOperation<BusinessProcessResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, businessProcessName, data);
            BusinessProcessResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BusinessProcessData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
