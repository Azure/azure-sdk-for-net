// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.IntegrationSpaces;
using Azure.ResourceManager.IntegrationSpaces.Models;

namespace Azure.ResourceManager.IntegrationSpaces.Samples
{
    public partial class Sample_InfrastructureResourceCollection
    {
        // ListInfrastructureResourcesBySpace
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListInfrastructureResourcesBySpace()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/InfrastructureResources_ListBySpace.json
            // this example is just showing the usage of "InfrastructureResources_ListBySpace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this InfrastructureResource
            InfrastructureResourceCollection collection = space.GetInfrastructureResources();

            // invoke the operation and iterate over the result
            InfrastructureResourceCollectionGetAllOptions options = new InfrastructureResourceCollectionGetAllOptions() { };
            await foreach (InfrastructureResource item in collection.GetAllAsync(options))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                InfrastructureResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GetInfrastructureResource
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetInfrastructureResource()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/InfrastructureResources_Get.json
            // this example is just showing the usage of "InfrastructureResources_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this InfrastructureResource
            InfrastructureResourceCollection collection = space.GetInfrastructureResources();

            // invoke the operation
            string infrastructureResourceName = "InfrastructureResource1";
            InfrastructureResource result = await collection.GetAsync(infrastructureResourceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            InfrastructureResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GetInfrastructureResource
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetInfrastructureResource()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/InfrastructureResources_Get.json
            // this example is just showing the usage of "InfrastructureResources_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this InfrastructureResource
            InfrastructureResourceCollection collection = space.GetInfrastructureResources();

            // invoke the operation
            string infrastructureResourceName = "InfrastructureResource1";
            bool result = await collection.ExistsAsync(infrastructureResourceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GetInfrastructureResource
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetInfrastructureResource()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/InfrastructureResources_Get.json
            // this example is just showing the usage of "InfrastructureResources_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this InfrastructureResource
            InfrastructureResourceCollection collection = space.GetInfrastructureResources();

            // invoke the operation
            string infrastructureResourceName = "InfrastructureResource1";
            NullableResponse<InfrastructureResource> response = await collection.GetIfExistsAsync(infrastructureResourceName);
            InfrastructureResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                InfrastructureResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // CreateOrUpdateInfrastructureResource
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateInfrastructureResource()
        {
            // Generated from example definition: specification/azureintegrationspaces/resource-manager/Microsoft.IntegrationSpaces/preview/2023-11-14-preview/examples/InfrastructureResources_CreateOrUpdate.json
            // this example is just showing the usage of "InfrastructureResources_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SpaceResource created on azure
            // for more information of creating SpaceResource, please refer to the document of SpaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "testrg";
            string spaceName = "Space1";
            ResourceIdentifier spaceResourceId = SpaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, spaceName);
            SpaceResource space = client.GetSpaceResource(spaceResourceId);

            // get the collection of this InfrastructureResource
            InfrastructureResourceCollection collection = space.GetInfrastructureResources();

            // invoke the operation
            string infrastructureResourceName = "InfrastructureResource1";
            InfrastructureResourceData data = new InfrastructureResourceData()
            {
                ResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg/providers/Microsoft.ApiManagement/service/APIM1",
            };
            ArmOperation<InfrastructureResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, infrastructureResourceName, data);
            InfrastructureResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            InfrastructureResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
