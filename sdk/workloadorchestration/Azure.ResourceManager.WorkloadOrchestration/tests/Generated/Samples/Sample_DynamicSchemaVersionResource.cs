// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_DynamicSchemaVersionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DynamicSchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/stable/2025-08-01/examples/DynamicSchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DynamicSchemaVersionResource created on azure
            // for more information of creating DynamicSchemaVersionResource, please refer to the document of DynamicSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            string dynamicSchemaVersionName = "1.0.0";
            ResourceIdentifier dynamicSchemaVersionResourceId = DynamicSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            DynamicSchemaVersionResource dynamicSchemaVersion = client.GetDynamicSchemaVersionResource(dynamicSchemaVersionResourceId);

            // invoke the operation
            DynamicSchemaVersionResource result = await dynamicSchemaVersion.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DynamicSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DynamicSchemaVersionsDeleteMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/stable/2025-08-01/examples/DynamicSchemaVersions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersions_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DynamicSchemaVersionResource created on azure
            // for more information of creating DynamicSchemaVersionResource, please refer to the document of DynamicSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            string dynamicSchemaVersionName = "1.0.0";
            ResourceIdentifier dynamicSchemaVersionResourceId = DynamicSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            DynamicSchemaVersionResource dynamicSchemaVersion = client.GetDynamicSchemaVersionResource(dynamicSchemaVersionResourceId);

            // invoke the operation
            await dynamicSchemaVersion.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_DynamicSchemaVersionsUpdateMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/stable/2025-08-01/examples/DynamicSchemaVersions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersions_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DynamicSchemaVersionResource created on azure
            // for more information of creating DynamicSchemaVersionResource, please refer to the document of DynamicSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            string dynamicSchemaVersionName = "1.0.0";
            ResourceIdentifier dynamicSchemaVersionResourceId = DynamicSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            DynamicSchemaVersionResource dynamicSchemaVersion = client.GetDynamicSchemaVersionResource(dynamicSchemaVersionResourceId);

            // invoke the operation
            DynamicSchemaVersionPatch patch = new DynamicSchemaVersionPatch
            {
                SchemaVersionPropertiesUpdateValue = "muezi",
            };
            DynamicSchemaVersionResource result = await dynamicSchemaVersion.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DynamicSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
