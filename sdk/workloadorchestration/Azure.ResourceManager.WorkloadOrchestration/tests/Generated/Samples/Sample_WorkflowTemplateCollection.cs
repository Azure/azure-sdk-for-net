// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_WorkflowTemplateCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_WorkflowTemplatesCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-01-01-preview/examples/WorkflowTemplates_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplates_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowTemplateResource
            WorkflowTemplateCollection collection = resourceGroupResource.GetWorkflowTemplates();

            // invoke the operation
            string workflowTemplateName = "testname";
            WorkflowTemplateData data = new WorkflowTemplateData(new AzureLocation("dmdpeqlstfbjqgwxylvve"))
            {
                Properties = new WorkflowTemplateProperties("ugamyxjglmsp")
                {
                    LatestVersion = "kfedhfpkreiwgqnqyzwfdqquqatdy",
                },
                Tags =
{
["key414"] = "lpmqrwrrydg"
},
            };
            ArmOperation<WorkflowTemplateResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, workflowTemplateName, data);
            WorkflowTemplateResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WorkflowTemplatesGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-01-01-preview/examples/WorkflowTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplates_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowTemplateResource
            WorkflowTemplateCollection collection = resourceGroupResource.GetWorkflowTemplates();

            // invoke the operation
            string workflowTemplateName = "testname";
            WorkflowTemplateResource result = await collection.GetAsync(workflowTemplateName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_WorkflowTemplatesListByResourceGroupMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-01-01-preview/examples/WorkflowTemplates_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplates_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowTemplateResource
            WorkflowTemplateCollection collection = resourceGroupResource.GetWorkflowTemplates();

            // invoke the operation and iterate over the result
            await foreach (WorkflowTemplateResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkflowTemplateData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_WorkflowTemplatesGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-01-01-preview/examples/WorkflowTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplates_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowTemplateResource
            WorkflowTemplateCollection collection = resourceGroupResource.GetWorkflowTemplates();

            // invoke the operation
            string workflowTemplateName = "testname";
            bool result = await collection.ExistsAsync(workflowTemplateName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_WorkflowTemplatesGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-01-01-preview/examples/WorkflowTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplates_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this WorkflowTemplateResource
            WorkflowTemplateCollection collection = resourceGroupResource.GetWorkflowTemplates();

            // invoke the operation
            string workflowTemplateName = "testname";
            NullableResponse<WorkflowTemplateResource> response = await collection.GetIfExistsAsync(workflowTemplateName);
            WorkflowTemplateResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkflowTemplateData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
