// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_SolutionTemplateResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionTemplatesGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/SolutionTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplates_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SolutionTemplateResource created on azure
            // for more information of creating SolutionTemplateResource, please refer to the document of SolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier solutionTemplateResourceId = SolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            SolutionTemplateResource solutionTemplate = client.GetSolutionTemplateResource(solutionTemplateResourceId);

            // invoke the operation
            SolutionTemplateResource result = await solutionTemplate.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SolutionTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SolutionTemplatesDeleteMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/SolutionTemplates_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplates_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SolutionTemplateResource created on azure
            // for more information of creating SolutionTemplateResource, please refer to the document of SolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier solutionTemplateResourceId = SolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            SolutionTemplateResource solutionTemplate = client.GetSolutionTemplateResource(solutionTemplateResourceId);

            // invoke the operation
            await solutionTemplate.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SolutionTemplatesUpdateMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/SolutionTemplates_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplates_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SolutionTemplateResource created on azure
            // for more information of creating SolutionTemplateResource, please refer to the document of SolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier solutionTemplateResourceId = SolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            SolutionTemplateResource solutionTemplate = client.GetSolutionTemplateResource(solutionTemplateResourceId);

            // invoke the operation
            SolutionTemplatePatch patch = new SolutionTemplatePatch
            {
                Properties = new SolutionTemplatePropertiesUpdate
                {
                    Description = "onqlteg",
                    Capabilities = { "relsv" },
                    State = ResourceState.Active,
                    EnableExternalValidation = true,
                },
                Tags =
{
["key8772"] = "vbdujmqklnwiepis"
},
            };
            SolutionTemplateResource result = await solutionTemplate.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SolutionTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateVersion_SolutionTemplatesCreateVersionMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/SolutionTemplates_CreateVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplates_CreateVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SolutionTemplateResource created on azure
            // for more information of creating SolutionTemplateResource, please refer to the document of SolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier solutionTemplateResourceId = SolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            SolutionTemplateResource solutionTemplate = client.GetSolutionTemplateResource(solutionTemplateResourceId);

            // invoke the operation
            SolutionTemplateVersionWithUpdateType body = new SolutionTemplateVersionWithUpdateType(new SolutionTemplateVersionData
            {
                Properties = new SolutionTemplateVersionProperties("ofqcsavwmeuwmvtjnqpoybtjvkmrlh", new Dictionary<string, BinaryData>())
                {
                    OrchestratorType = OrchestratorType.TO,
                },
            })
            {
                UpdateType = UpdateType.Major,
                Version = "1.0.0",
            };
            ArmOperation<SolutionTemplateVersionResource> lro = await solutionTemplate.CreateVersionAsync(WaitUntil.Completed, body);
            SolutionTemplateVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SolutionTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RemoveVersion_SolutionTemplatesRemoveVersionMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/SolutionTemplates_RemoveVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplates_RemoveVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SolutionTemplateResource created on azure
            // for more information of creating SolutionTemplateResource, please refer to the document of SolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier solutionTemplateResourceId = SolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            SolutionTemplateResource solutionTemplate = client.GetSolutionTemplateResource(solutionTemplateResourceId);

            // invoke the operation
            VersionContent content = new VersionContent("ghtvdzgmzncaifrnuumg");
            await solutionTemplate.RemoveVersionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }
    }
}
