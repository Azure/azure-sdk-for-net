// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EventGridFilterResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_EventGridFiltersGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-01-01-preview/examples/EventGridFilters_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "EventGridFilters_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EventGridFilterResource created on azure
            // for more information of creating EventGridFilterResource, please refer to the document of EventGridFilterResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string eventGridFilterName = "testname";
            ResourceIdentifier eventGridFilterResourceId = EventGridFilterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, eventGridFilterName);
            EventGridFilterResource eventGridFilter = client.GetEventGridFilterResource(eventGridFilterResourceId);

            // invoke the operation
            EventGridFilterResource result = await eventGridFilter.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EventGridFilterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_EventGridFiltersDeleteMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-01-01-preview/examples/EventGridFilters_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "EventGridFilters_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EventGridFilterResource created on azure
            // for more information of creating EventGridFilterResource, please refer to the document of EventGridFilterResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string eventGridFilterName = "testname";
            ResourceIdentifier eventGridFilterResourceId = EventGridFilterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, eventGridFilterName);
            EventGridFilterResource eventGridFilter = client.GetEventGridFilterResource(eventGridFilterResourceId);

            // invoke the operation
            await eventGridFilter.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_EventGridFiltersUpdateMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-01-01-preview/examples/EventGridFilters_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "EventGridFilters_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EventGridFilterResource created on azure
            // for more information of creating EventGridFilterResource, please refer to the document of EventGridFilterResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string eventGridFilterName = "testname";
            ResourceIdentifier eventGridFilterResourceId = EventGridFilterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, eventGridFilterName);
            EventGridFilterResource eventGridFilter = client.GetEventGridFilterResource(eventGridFilterResourceId);

            // invoke the operation
            EventGridFilterPatch patch = new EventGridFilterPatch
            {
                Properties = new EventGridFilterProperties
                {
                    Filter = new Filter
                    {
                        SubjectBeginsWith = "evvgxcbccbekojhbogvh",
                        SubjectEndsWith = "wlzq",
                        IncludedEventTypes = { "laycmhjojvuopjdcooyaptev" },
                    },
                    SubscriberIdentityInfo = new SubscriberIdentityInfo
                    {
                        ClientPrincipalId = "qfax",
                        ClientObjectId = "gwvrvrmzwahcolvpqyjegrczcx",
                        ClientTenantId = "xbutphqkhw",
                        ClientApplicationId = "uwwxkiaxhstsmkys",
                        ClientAuthorizationSource = "rodwzpkgvwzzoixialgpzqqr",
                    },
                },
            };
            ArmOperation<EventGridFilterResource> lro = await eventGridFilter.UpdateAsync(WaitUntil.Completed, patch);
            EventGridFilterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EventGridFilterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
