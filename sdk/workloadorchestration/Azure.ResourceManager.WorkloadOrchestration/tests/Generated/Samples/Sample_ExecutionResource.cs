// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_ExecutionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ExecutionsGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/stable/2025-06-01/examples/Executions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Executions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ExecutionResource created on azure
            // for more information of creating ExecutionResource, please refer to the document of ExecutionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            string executionName = "abcde";
            ResourceIdentifier executionResourceId = ExecutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            ExecutionResource execution = client.GetExecutionResource(executionResourceId);

            // invoke the operation
            ExecutionResource result = await execution.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExecutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ExecutionsDeleteMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/stable/2025-06-01/examples/Executions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Executions_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ExecutionResource created on azure
            // for more information of creating ExecutionResource, please refer to the document of ExecutionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            string executionName = "abcde";
            ResourceIdentifier executionResourceId = ExecutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            ExecutionResource execution = client.GetExecutionResource(executionResourceId);

            // invoke the operation
            await execution.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ExecutionsUpdateMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/stable/2025-06-01/examples/Executions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Executions_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ExecutionResource created on azure
            // for more information of creating ExecutionResource, please refer to the document of ExecutionResource
            string subscriptionId = "FFA229AF-C1A3-4CB6-9E5D-62C25CFBE4D0";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            string executionName = "abcde";
            ResourceIdentifier executionResourceId = ExecutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            ExecutionResource execution = client.GetExecutionResource(executionResourceId);

            // invoke the operation
            ExecutionPatch patch = new ExecutionPatch
            {
                Properties = new ExecutionPropertiesUpdate
                {
                    WorkflowVersionId = "xjsxzbfltzvbuvn",
                    Specification = { },
                },
            };
            ArmOperation<ExecutionResource> lro = await execution.UpdateAsync(WaitUntil.Completed, patch);
            ExecutionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExecutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
