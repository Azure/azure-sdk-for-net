// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_WorkflowTemplateVersionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_WorkflowTemplateVersionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/WorkflowTemplateVersions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplateVersions_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WorkflowTemplateResource created on azure
            // for more information of creating WorkflowTemplateResource, please refer to the document of WorkflowTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string workflowTemplateName = "testname";
            ResourceIdentifier workflowTemplateResourceId = WorkflowTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workflowTemplateName);
            WorkflowTemplateResource workflowTemplate = client.GetWorkflowTemplateResource(workflowTemplateResourceId);

            // get the collection of this WorkflowTemplateVersionResource
            WorkflowTemplateVersionCollection collection = workflowTemplate.GetWorkflowTemplateVersions();

            // invoke the operation
            string workflowTemplateVersionName = "1.0.0";
            UpdateType updateType = UpdateType.Major;
            WorkflowTemplateVersionData data = new WorkflowTemplateVersionData
            {
                Properties = new WorkflowTemplateVersionProperties(new StageSpecTemplate[]
            {
new StageSpecTemplate("nexavxadasnlftmvwcdhqgtweoycvz")
{
Specification = {},
OrchestratorType = OrchestratorType.TO,
}
            })
                {
                    Configurations = "rfdnipulsmreqlostnyddjuaw",
                },
            };
            ArmOperation<WorkflowTemplateVersionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, workflowTemplateVersionName, updateType, data);
            WorkflowTemplateVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WorkflowTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/WorkflowTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplateVersions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WorkflowTemplateResource created on azure
            // for more information of creating WorkflowTemplateResource, please refer to the document of WorkflowTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string workflowTemplateName = "testname";
            ResourceIdentifier workflowTemplateResourceId = WorkflowTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workflowTemplateName);
            WorkflowTemplateResource workflowTemplate = client.GetWorkflowTemplateResource(workflowTemplateResourceId);

            // get the collection of this WorkflowTemplateVersionResource
            WorkflowTemplateVersionCollection collection = workflowTemplate.GetWorkflowTemplateVersions();

            // invoke the operation
            string workflowTemplateVersionName = "1.0.0";
            WorkflowTemplateVersionResource result = await collection.GetAsync(workflowTemplateVersionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_WorkflowTemplateVersionsListByWorkflowTemplateMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/WorkflowTemplateVersions_ListByWorkflowTemplate_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplateVersions_ListByWorkflowTemplate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WorkflowTemplateResource created on azure
            // for more information of creating WorkflowTemplateResource, please refer to the document of WorkflowTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string workflowTemplateName = "testname";
            ResourceIdentifier workflowTemplateResourceId = WorkflowTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workflowTemplateName);
            WorkflowTemplateResource workflowTemplate = client.GetWorkflowTemplateResource(workflowTemplateResourceId);

            // get the collection of this WorkflowTemplateVersionResource
            WorkflowTemplateVersionCollection collection = workflowTemplate.GetWorkflowTemplateVersions();

            // invoke the operation and iterate over the result
            await foreach (WorkflowTemplateVersionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkflowTemplateVersionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_WorkflowTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/WorkflowTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplateVersions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WorkflowTemplateResource created on azure
            // for more information of creating WorkflowTemplateResource, please refer to the document of WorkflowTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string workflowTemplateName = "testname";
            ResourceIdentifier workflowTemplateResourceId = WorkflowTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workflowTemplateName);
            WorkflowTemplateResource workflowTemplate = client.GetWorkflowTemplateResource(workflowTemplateResourceId);

            // get the collection of this WorkflowTemplateVersionResource
            WorkflowTemplateVersionCollection collection = workflowTemplate.GetWorkflowTemplateVersions();

            // invoke the operation
            string workflowTemplateVersionName = "1.0.0";
            bool result = await collection.ExistsAsync(workflowTemplateVersionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_WorkflowTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: specification/edge/resource-manager/Microsoft.Edge/configurationmanager/preview/2025-06-01-preview/examples/WorkflowTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowTemplateVersions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WorkflowTemplateResource created on azure
            // for more information of creating WorkflowTemplateResource, please refer to the document of WorkflowTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string workflowTemplateName = "testname";
            ResourceIdentifier workflowTemplateResourceId = WorkflowTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workflowTemplateName);
            WorkflowTemplateResource workflowTemplate = client.GetWorkflowTemplateResource(workflowTemplateResourceId);

            // get the collection of this WorkflowTemplateVersionResource
            WorkflowTemplateVersionCollection collection = workflowTemplate.GetWorkflowTemplateVersions();

            // invoke the operation
            string workflowTemplateVersionName = "1.0.0";
            NullableResponse<WorkflowTemplateVersionResource> response = await collection.GetIfExistsAsync(workflowTemplateVersionName);
            WorkflowTemplateVersionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkflowTemplateVersionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
