// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Job Step. </summary>
    public partial class EdgeJobStep
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeJobStep"/>. </summary>
        /// <param name="name"> Name of the step. </param>
        /// <param name="status"> Status of the step. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        internal EdgeJobStep(string name, EdgeJobStatus status)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Status = status;
            Steps = new ChangeTrackingList<EdgeJobStep>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobStep"/>. </summary>
        /// <param name="name"> Name of the step. </param>
        /// <param name="status"> Status of the step. </param>
        /// <param name="startOn"> Start time of the step (ISO8601). </param>
        /// <param name="endOn"> End time of the step (ISO8601). </param>
        /// <param name="message"> Message for the step. </param>
        /// <param name="statistics">
        /// Statistics for the step
        /// Please note <see cref="EdgeJobStepStatistics"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeployJobStepStatistics"/>.
        /// </param>
        /// <param name="steps"> Nested substeps for this step. </param>
        /// <param name="errorDetails"> Error Details if any failure is there. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeJobStep(string name, EdgeJobStatus status, DateTimeOffset? startOn, DateTimeOffset? endOn, string message, EdgeJobStepStatistics statistics, IReadOnlyList<EdgeJobStep> steps, ResponseError errorDetails, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Status = status;
            StartOn = startOn;
            EndOn = endOn;
            Message = message;
            Statistics = statistics;
            Steps = steps;
            ErrorDetails = errorDetails;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobStep"/> for deserialization. </summary>
        internal EdgeJobStep()
        {
        }

        /// <summary> Name of the step. </summary>
        public string Name { get; }
        /// <summary> Status of the step. </summary>
        public EdgeJobStatus Status { get; }
        /// <summary> Start time of the step (ISO8601). </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> End time of the step (ISO8601). </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> Message for the step. </summary>
        public string Message { get; }
        /// <summary>
        /// Statistics for the step
        /// Please note <see cref="EdgeJobStepStatistics"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeployJobStepStatistics"/>.
        /// </summary>
        public EdgeJobStepStatistics Statistics { get; }
        /// <summary> Nested substeps for this step. </summary>
        public IReadOnlyList<EdgeJobStep> Steps { get; }
        /// <summary> Error Details if any failure is there. </summary>
        public ResponseError ErrorDetails { get; }
    }
}
