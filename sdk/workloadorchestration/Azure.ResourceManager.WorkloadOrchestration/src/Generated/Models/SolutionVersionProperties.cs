// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Version Properties. </summary>
    public partial class SolutionVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SolutionVersionProperties"/>. </summary>
        /// <param name="specification"> App components spec. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="specification"/> is null. </exception>
        public SolutionVersionProperties(IDictionary<string, BinaryData> specification)
        {
            Argument.AssertNotNull(specification, nameof(specification));

            Specification = specification;
            SolutionDependencies = new ChangeTrackingList<SolutionDependency>();
        }

        /// <summary> Initializes a new instance of <see cref="SolutionVersionProperties"/>. </summary>
        /// <param name="solutionTemplateVersionId"> Solution Template Version Id. </param>
        /// <param name="revision"> Revision number of resolved config for this solution version. </param>
        /// <param name="targetDisplayName"> Name of applicable target's display name. </param>
        /// <param name="configuration"> Resolved configuration values. </param>
        /// <param name="targetLevelConfiguration"> Configuration on the line level across all solution template versions. </param>
        /// <param name="specification"> App components spec. </param>
        /// <param name="reviewId"> Review id of resolved config for this solution version. </param>
        /// <param name="externalValidationId"> External validation id. </param>
        /// <param name="state"> State of solution instance. </param>
        /// <param name="solutionInstanceName"> Solution instance name. </param>
        /// <param name="solutionDependencies"> Solution Dependency Context. </param>
        /// <param name="errorDetails"> Error Details if any failure is there. </param>
        /// <param name="latestActionTrackingUri"> The URI for tracking the latest action performed on this solution version. </param>
        /// <param name="actionType"> The type of the latest action performed on this solution version. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SolutionVersionProperties(string solutionTemplateVersionId, int? revision, string targetDisplayName, string configuration, string targetLevelConfiguration, IDictionary<string, BinaryData> specification, string reviewId, string externalValidationId, State? state, string solutionInstanceName, IReadOnlyList<SolutionDependency> solutionDependencies, ResponseError errorDetails, string latestActionTrackingUri, JobType? actionType, ProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionTemplateVersionId = solutionTemplateVersionId;
            Revision = revision;
            TargetDisplayName = targetDisplayName;
            Configuration = configuration;
            TargetLevelConfiguration = targetLevelConfiguration;
            Specification = specification;
            ReviewId = reviewId;
            ExternalValidationId = externalValidationId;
            State = state;
            SolutionInstanceName = solutionInstanceName;
            SolutionDependencies = solutionDependencies;
            ErrorDetails = errorDetails;
            LatestActionTrackingUri = latestActionTrackingUri;
            ActionType = actionType;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SolutionVersionProperties"/> for deserialization. </summary>
        internal SolutionVersionProperties()
        {
        }

        /// <summary> Solution Template Version Id. </summary>
        public string SolutionTemplateVersionId { get; }
        /// <summary> Revision number of resolved config for this solution version. </summary>
        public int? Revision { get; }
        /// <summary> Name of applicable target's display name. </summary>
        public string TargetDisplayName { get; }
        /// <summary> Resolved configuration values. </summary>
        public string Configuration { get; }
        /// <summary> Configuration on the line level across all solution template versions. </summary>
        public string TargetLevelConfiguration { get; }
        /// <summary>
        /// App components spec
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Specification { get; }
        /// <summary> Review id of resolved config for this solution version. </summary>
        public string ReviewId { get; }
        /// <summary> External validation id. </summary>
        public string ExternalValidationId { get; }
        /// <summary> State of solution instance. </summary>
        public State? State { get; }
        /// <summary> Solution instance name. </summary>
        public string SolutionInstanceName { get; }
        /// <summary> Solution Dependency Context. </summary>
        public IReadOnlyList<SolutionDependency> SolutionDependencies { get; }
        /// <summary> Error Details if any failure is there. </summary>
        public ResponseError ErrorDetails { get; }
        /// <summary> The URI for tracking the latest action performed on this solution version. </summary>
        public string LatestActionTrackingUri { get; }
        /// <summary> The type of the latest action performed on this solution version. </summary>
        public JobType? ActionType { get; }
        /// <summary> Provisioning state of resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
    }
}
