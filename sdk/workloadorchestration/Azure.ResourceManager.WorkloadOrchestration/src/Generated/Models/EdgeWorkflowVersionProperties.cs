// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Workflow Version Properties. </summary>
    public partial class EdgeWorkflowVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowVersionProperties"/>. </summary>
        /// <param name="stageSpec"> A list of stage specs. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="stageSpec"/> is null. </exception>
        public EdgeWorkflowVersionProperties(IEnumerable<StageSpec> stageSpec)
        {
            Argument.AssertNotNull(stageSpec, nameof(stageSpec));

            StageSpec = stageSpec.ToList();
            Specification = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowVersionProperties"/>. </summary>
        /// <param name="revision"> Revision number of resolved config for this workflow version. </param>
        /// <param name="configuration"> Resolved configuration values. </param>
        /// <param name="stageSpec"> A list of stage specs. </param>
        /// <param name="reviewId"> Review id of resolved config for this workflow version. </param>
        /// <param name="state"> State of workflow version. </param>
        /// <param name="specification"> Execution specification. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeWorkflowVersionProperties(int? revision, string configuration, IList<StageSpec> stageSpec, string reviewId, State? state, IDictionary<string, BinaryData> specification, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Revision = revision;
            Configuration = configuration;
            StageSpec = stageSpec;
            ReviewId = reviewId;
            State = state;
            Specification = specification;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowVersionProperties"/> for deserialization. </summary>
        internal EdgeWorkflowVersionProperties()
        {
        }

        /// <summary> Revision number of resolved config for this workflow version. </summary>
        public int? Revision { get; }
        /// <summary> Resolved configuration values. </summary>
        public string Configuration { get; }
        /// <summary> A list of stage specs. </summary>
        public IList<StageSpec> StageSpec { get; }
        /// <summary> Review id of resolved config for this workflow version. </summary>
        public string ReviewId { get; }
        /// <summary> State of workflow version. </summary>
        public State? State { get; }
        /// <summary>
        /// Execution specification
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Specification { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}
